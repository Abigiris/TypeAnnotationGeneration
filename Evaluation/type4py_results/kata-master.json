{
    "kata-master/conftest.py": {
        "thread_pool_executor": {
            "name": "thread_pool_executor",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "kata-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 4,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "kata-master/src/kata/defaults.py": {},
    "kata-master/src/kata/__init__.py": {},
    "kata-master/src/kata/data/repos.py": {
        "ConfigRepo.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_file": [],
                "file_reader": [],
                "file_writer": []
            }
        },
        "ConfigRepo.get_kata_grepo_username": {
            "name": "get_kata_grepo_username",
            "location": 23,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigRepo.get_kata_grepo_reponame": {
            "name": "get_kata_grepo_reponame",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigRepo.has_template_at_root": {
            "name": "has_template_at_root",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConfigRepo.get_auth_token": {
            "name": "get_auth_token",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigRepo.should_skip_not_logged_in_warning": {
            "name": "should_skip_not_logged_in_warning",
            "location": 40,
            "return": [
                "bool",
                "int",
                "List[str]",
                "pathlib.Path",
                "str",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigRepo._create_config_file_with_defaults_if_doesnt_exist": {
            "name": "_create_config_file_with_defaults_if_doesnt_exist",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "IO[Any]"
                ]
            }
        },
        "ConfigRepo._load_config": {
            "name": "_load_config",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "str",
                    "Callable[[str], None]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "ConfigRepo._validate_config": {
            "name": "_validate_config",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KataTemplateRepo.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api": [],
                "config_repo": []
            }
        },
        "KataTemplateRepo.get_for_language": {
            "name": "get_for_language",
            "location": 67,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "bool",
                    "dict",
                    "allennlp.data.dataseDataset",
                    "Iterable[allennlp.data.instance.Instance]",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "KataTemplateRepo._has_template_at_root": {
            "name": "_has_template_at_root",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "zerver.models.Realm",
                    "Optional[Callable[[Any], None]]",
                    "dict",
                    "Optional[zerver.models.Realm]",
                    "str",
                    "bool"
                ],
                "dir_contents": [
                    "zerver.models.Realm",
                    "Optional[Callable[[Any], None]]",
                    "dict",
                    "Optional[zerver.models.Realm]",
                    "str",
                    "bool"
                ]
            }
        },
        "KataTemplateRepo._extract_available_template_names": {
            "name": "_extract_available_template_names",
            "location": 109,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str",
                "jumeaux.models.Reqs2ReqsAddOnPayload",
                "dict"
            ],
            "arguments": {
                "language_root_dir_contents": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "KataLanguageRepo.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api": [],
                "config_repo": []
            }
        },
        "KataLanguageRepo.get_all": {
            "name": "get_all",
            "location": 122,
            "return": [
                "str",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KataLanguageRepo._all_sub_directories_mapped_to_languages": {
            "name": "_all_sub_directories_mapped_to_languages",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "contents_of_dir": [
                    "str",
                    "BinaryIO",
                    "dict"
                ]
            }
        },
        "KataLanguageRepo.get": {
            "name": "get",
            "location": 136,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "language_name": [
                    "str"
                ]
            }
        },
        "KataTemplateRepo.get_for_language.all_kata_templates_for_language": {
            "name": "all_kata_templates_for_language",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "KataTemplateRepo._has_template_at_root.has_template_at_root_according_to_config": {
            "name": "has_template_at_root_according_to_config",
            "location": 86,
            "return": [
                "str",
                "Union[str, IO]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "KataTemplateRepo._has_template_at_root.config_has_an_entry_for_language": {
            "name": "config_has_an_entry_for_language",
            "location": 91,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "KataTemplateRepo._has_template_at_root.try_to_guess": {
            "name": "try_to_guess",
            "location": 94,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "KataTemplateRepo._extract_available_template_names.extract_template_name_from_sub_path": {
            "name": "extract_template_name_from_sub_path",
            "location": 110,
            "return": [
                "pathlib.Path",
                "str",
                "Sequence[pathlib.Path]",
                "int",
                "trakcore.paths.path.Path"
            ],
            "arguments": {
                "sub_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[path.Path]"
                ]
            }
        },
        "HardCoded.KataTemplateRepo.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HardCoded.KataTemplateRepo.get_for_language": {
            "name": "get_for_language",
            "location": 157,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "bool",
                    "dict",
                    "allennlp.data.dataseDataset",
                    "Iterable[allennlp.data.instance.Instance]",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "HardCoded.KataLanguageRepo.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HardCoded.KataLanguageRepo.get_all": {
            "name": "get_all",
            "location": 168,
            "return": [
                "str",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardCoded.KataLanguageRepo.get": {
            "name": "get",
            "location": 171,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "language_name": [
                    "str"
                ]
            }
        },
        "HardCoded.ConfigRepo.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KataTemplateRepo._has_template_at_root.try_to_guess.has_readme": {
            "name": "has_readme",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "HardCoded.KataTemplateRepo.get_for_language.all_for_language_or_empty": {
            "name": "all_for_language_or_empty",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kata-master/src/kata/data/__init__.py": {},
    "kata-master/src/kata/data/io/file.py": {
        "FileWriter.write_to_file_in_sub_path": {
            "name": "write_to_file_in_sub_path",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "root_dir": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "file_sub_path": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "file_content": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileWriter.write_yaml_to_file": {
            "name": "write_yaml_to_file",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "file_path": [
                    "pathlib.Path"
                ],
                "yaml_data": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "Optional[Mapping]"
                ]
            }
        },
        "FileReader.read_yaml": {
            "name": "read_yaml",
            "location": 28,
            "return": [
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "file_path": [
                    "pathlib.Path"
                ]
            }
        },
        "FileWriter.write_to_file_in_sub_path.create_dir_hierarchy_if_does_not_exist": {
            "name": "create_dir_hierarchy_if_does_not_exist",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "FileWriter.write_to_file_in_sub_path.write_to_file": {
            "name": "write_to_file",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kata-master/src/kata/data/io/network.py": {
        "GithubApi.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth_token": [
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "GithubApi.contents": {
            "name": "contents",
            "location": 15,
            "return": [
                "dict",
                "int",
                "str",
                "\"DataFrame\""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Sequence[str]",
                    "bool",
                    "Optional[str]",
                    "type",
                    "str"
                ],
                "repo": [
                    "Sequence[str]",
                    "bool",
                    "Optional[str]",
                    "type",
                    "str"
                ],
                "path": [
                    "str",
                    "Optional[List[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GithubApi.download_raw_text_file": {
            "name": "download_raw_text_file",
            "location": 23,
            "return": [
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "raw_text_file_url": [
                    "str"
                ]
            }
        },
        "GithubApi._get_url": {
            "name": "_get_url",
            "location": 27,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "GithubApi._headers": {
            "name": "_headers",
            "location": 32,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Optional[Dict]",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubApi._validate_response": {
            "name": "_validate_response",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.Response",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "GithubApi._validate_response.rate_limit_reached": {
            "name": "rate_limit_reached",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "GithubApi._validate_response.invalid_auth": {
            "name": "invalid_auth",
            "location": 47,
            "return": [
                "bool",
                "Dict[str, bool]",
                "Callable[[int, str], bool]"
            ],
            "arguments": {}
        },
        "GithubApi._validate_response.rate_limit_reached.unauthorised": {
            "name": "unauthorised",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "GithubApi._validate_response.rate_limit_reached.limit_reached": {
            "name": "limit_reached",
            "location": 42,
            "return": [
                "Union[Callable, str]",
                "Optional[str]",
                "dict",
                "loading.domain.PutRecordResponse",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "kata-master/src/kata/data/io/__init__.py": {},
    "kata-master/src/kata/domain/exceptions.py": {
        "InvalidKataName.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kata_name": [
                    "str",
                    "Optional[str]"
                ],
                "reason": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[app.models.Question]"
                ]
            }
        },
        "KataLanguageNotFound.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "available_languages": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "KataTemplateNotFound.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "available_templates": [
                    "List[int]",
                    "str",
                    "int",
                    "IO",
                    "complex"
                ]
            }
        },
        "ApiLimitReached.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidAuthToken.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "kata-master/src/kata/domain/grepo.py": {
        "GRepo.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "TextIO",
                    "bool",
                    "List[str]",
                    "autorecurse.gnumake.data.Makefile"
                ],
                "file_writer": [
                    "pathlib.Path",
                    "str",
                    "BinaryIO"
                ],
                "executor": [
                    "str",
                    "TextIO",
                    "bool",
                    "List[str]",
                    "autorecurse.gnumake.data.Makefile"
                ]
            }
        },
        "GRepo.get_files_to_download": {
            "name": "get_files_to_download",
            "location": 22,
            "return": [
                "str",
                "pathlib.Path",
                "Tuple[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "pathlib.Path",
                    "str",
                    "abilian.core.models.subjects.User",
                    "bool"
                ],
                "repo": [
                    "pathlib.Path",
                    "str",
                    "abilian.core.models.subjects.User",
                    "bool"
                ],
                "path": [
                    "pathlib.Path",
                    "dict",
                    "Optional[str]",
                    "abilian.core.models.subjects.User"
                ]
            }
        },
        "GRepo.download_files_at_location": {
            "name": "download_files_at_location",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "bytes",
                    "dict",
                    "Union[str, pathlib.Path]"
                ],
                "files_to_download": [
                    "List[kata.domain.models.DownloadableFile]",
                    "str",
                    "Iterable[Optional[Any]]",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "GRepo._get_files_in_dir": {
            "name": "_get_files_in_dir",
            "location": 54,
            "return": [
                "List[Tuple[str, str]]",
                "str",
                "Tuple[str, str]",
                "List[Tuple[str, str, str]]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "pathlib.Path",
                    "Path",
                    "Union[pathlib.Path, str]"
                ],
                "repo": [
                    "str",
                    "pathlib.Path",
                    "Path",
                    "Union[pathlib.Path, str]"
                ],
                "dir_path": [
                    "str",
                    "pathlib.Path",
                    "Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "GRepo._remove_nesting_if_in_sub_path": {
            "name": "_remove_nesting_if_in_sub_path",
            "location": 78,
            "return": [
                "str",
                "pathlib.Path",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "files": [
                    "str",
                    "List[kata.domain.models.DownloadableFile]",
                    "List[str]"
                ],
                "sub_path": [
                    "str",
                    "List[kata.domain.models.DownloadableFile]",
                    "List[str]"
                ]
            }
        },
        "GRepo._map_to_model": {
            "name": "_map_to_model",
            "location": 90,
            "return": [
                "str",
                "bool",
                "bytes",
                "T",
                "Tuple[str, str]"
            ],
            "arguments": {
                "contents": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "GRepo._download_file": {
            "name": "_download_file",
            "location": 97,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[path.Path]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "pathlib2.Path",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "GRepo._get_files_in_dir.filter_by_type": {
            "name": "filter_by_type",
            "location": 55,
            "return": [
                "int",
                "list",
                "str",
                "List[str]"
            ],
            "arguments": {
                "contents": [
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "dict"
                ],
                "content_type": [
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "dict"
                ]
            }
        },
        "GRepo._get_files_in_dir.get_files_in_all_sub_dirs_async": {
            "name": "get_files_in_all_sub_dirs_async",
            "location": 58,
            "return": [
                "str",
                "pathlib.Path",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "GRepo._remove_nesting_if_in_sub_path.files_with_sub_path_at_root": {
            "name": "files_with_sub_path_at_root",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kata-master/src/kata/domain/models.py": {},
    "kata-master/src/kata/domain/services.py": {
        "InitKataService.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kata_language_repo": [
                    "str",
                    "docker.models.containers.Container",
                    "list",
                    "dict"
                ],
                "kata_template_repo": [
                    "str"
                ],
                "grepo": [
                    "str",
                    "docker.models.containers.Container",
                    "list",
                    "dict"
                ],
                "config_repo": [
                    "pathlib.Path",
                    "str",
                    "Callable"
                ]
            }
        },
        "InitKataService.init_kata": {
            "name": "init_kata",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_dir": [
                    "str",
                    "Optional[str]"
                ],
                "kata_name": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ],
                "template_language": [
                    "str"
                ],
                "template_name": [
                    "str"
                ]
            }
        },
        "InitKataService.list_available_languages": {
            "name": "list_available_languages",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "tracim.models.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitKataService.list_available_templates": {
            "name": "list_available_templates",
            "location": 34,
            "return": [
                "models.User",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "InitKataService._validate_parent_dir": {
            "name": "_validate_parent_dir",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "parent_dir": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path"
                ]
            }
        },
        "InitKataService._validate_kata_name": {
            "name": "_validate_kata_name",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "kata_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InitKataService._get_kata_template": {
            "name": "_get_kata_template",
            "location": 56,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "template_language": [
                    "str",
                    "bytes"
                ],
                "template_name": [
                    "str"
                ]
            }
        },
        "InitKataService._get_kata_language_or_raise": {
            "name": "_get_kata_language_or_raise",
            "location": 78,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]",
                "zerver.models.DefaultStreamGroup"
            ],
            "arguments": {
                "self": [],
                "language_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InitKataService._build_path": {
            "name": "_build_path",
            "location": 86,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "kata_template": [
                    "str",
                    "pathlib.Path",
                    "IO",
                    "List[str]",
                    "List[pathlib.Path]"
                ]
            }
        },
        "LoginService.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_repo": [
                    "Callable"
                ]
            }
        },
        "LoginService.is_logged_in": {
            "name": "is_logged_in",
            "location": 97,
            "return": [
                "bool",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginService.should_skip_not_logged_in_warning": {
            "name": "should_skip_not_logged_in_warning",
            "location": 100,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitKataService._validate_kata_name.has_spaces": {
            "name": "has_spaces",
            "location": 45,
            "return": [
                "str",
                "Callable",
                "type"
            ],
            "arguments": {}
        },
        "InitKataService._get_kata_template.only_one_available_for_language": {
            "name": "only_one_available_for_language",
            "location": 58,
            "return": [
                "salon.models.Stylist",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "InitKataService._get_kata_template.first": {
            "name": "first",
            "location": 61,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {}
        },
        "InitKataService._get_kata_template.first_found_or_raise_template_not_found": {
            "name": "first_found_or_raise_template_not_found",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "kata-master/src/kata/domain/__init__.py": {},
    "kata-master/src/kata/presentation/cli.py": {
        "cli": {
            "name": "cli",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        },
        "init": {
            "name": "init",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ],
                "kata_name": [
                    "str",
                    "Optional[str]"
                ],
                "template_language": [
                    "str",
                    "TextIO",
                    "List[Tuple[str, str]]"
                ],
                "template_name": [
                    "str",
                    "Tuple[int]"
                ]
            }
        },
        "list": {
            "name": "list",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "_ctx": [
                    "click.Context",
                    "click.core.Context",
                    "bool"
                ]
            }
        },
        "languages": {
            "name": "languages",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "templates": {
            "name": "templates",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "language": [
                    "float"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "explore": {
            "name": "explore",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "bool"
                ],
                "github_user": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "repo": [
                    "str",
                    "bool",
                    "Dict[str, int]"
                ],
                "sub_path_in_repo": [
                    "bool",
                    "click.Context",
                    "Dict[str, int]"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "bool"
                ],
                "github_user": [
                    "bool",
                    "str",
                    "click.Context"
                ],
                "repo": [
                    "bool",
                    "str",
                    "click.Context"
                ],
                "sub_path_in_repo": [
                    "bool",
                    "str",
                    "click.Context"
                ]
            }
        },
        "print_error": {
            "name": "print_error",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "print_success": {
            "name": "print_success",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "print_warning": {
            "name": "print_warning",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "print_normal": {
            "name": "print_normal",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bool"
                ]
            }
        },
        "print_warning_if_not_auth": {
            "name": "print_warning_if_not_auth",
            "location": 245,
            "return": [
                "Iterator[Dict[str, str]]",
                "List[django.db.models.Model]",
                "int",
                "str",
                "Iterator[Any]"
            ],
            "arguments": {
                "main_context": []
            }
        },
        "KataMainContext.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "bool",
                    "List[str]",
                    "int",
                    "str",
                    "List[pathlib.Path]"
                ]
            }
        },
        "KataMainContext.__init__.init_base_deps": {
            "name": "init_base_deps",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "KataMainContext.__init__.init_config": {
            "name": "init_config",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "KataMainContext.__init__.init_network": {
            "name": "init_network",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "KataMainContext.__init__.init_repos": {
            "name": "init_repos",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "KataMainContext.__init__.init_domain": {
            "name": "init_domain",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init.has_only_root_template": {
            "name": "has_only_root_template",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "kata-master/src/kata/presentation/__init__.py": {},
    "kata-master/tests/__init__.py": {},
    "kata-master/tests/kata/test_sandbox.py": {
        "SandboxContext.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_explore_repo": {
            "name": "test_explore_repo",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_download_raw_file": {
            "name": "test_download_raw_file",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_invalid_file": {
            "name": "test_invalid_file",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_write_subpath": {
            "name": "test_write_subpath",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_for_loop_scope": {
            "name": "test_for_loop_scope",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_kata_template_repo": {
            "name": "test_kata_template_repo",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_raise_if_used": {
            "name": "test_raise_if_used",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_asdfasdf": {
            "name": "test_asdfasdf",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_list_kata_templates": {
            "name": "test_list_kata_templates",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSandbox.test_write_subpath.write_sandbox_file": {
            "name": "write_sandbox_file",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "path_relative_to_sandbox_root": [
                    "str",
                    "domain.UserFile",
                    "bytes",
                    "lib.Path",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "domain.Workspace",
                    "bool"
                ],
                "content": [
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestSandbox.test_list_kata_templates.print_templates": {
            "name": "print_templates",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "language": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "TestSandbox.test_write_subpath.write_sandbox_file.create_dir_hierarchy_if_does_not_exist": {
            "name": "create_dir_hierarchy_if_does_not_exist",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestSandbox.test_write_subpath.write_sandbox_file.write_to_file": {
            "name": "write_to_file",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestSandbox.test_raise_if_used.ShouldNeverBeUsed.__getattribute__": {
            "name": "__getattribute__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "TestSandbox.test_raise_if_used.ShouldNeverBeUsed.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kata-master/tests/kata/__init__.py": {},
    "kata-master/tests/kata/data/test_learning_schema_validation.py": {
        "test_simple_nested_dict": {
            "name": "test_simple_nested_dict",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unlimited_keys_in_sub_dict": {
            "name": "test_unlimited_keys_in_sub_dict",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_optional": {
            "name": "test_optional",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_extract_info_of_reason_why_invalid": {
            "name": "test_extract_info_of_reason_why_invalid",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_extract_info_of_reason_why_invalid.function_under_test": {
            "name": "function_under_test",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "data_to_validate": [
                    "int",
                    "bool",
                    "list",
                    "List[str]"
                ]
            }
        },
        "test_extract_info_of_reason_why_invalid.assert_domain_exception_is_raised_matching_msg": {
            "name": "assert_domain_exception_is_raised_matching_msg",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "invalid_data": [
                    "str",
                    "bool",
                    "float",
                    "Optional[str]"
                ]
            }
        }
    },
    "kata-master/tests/kata/data/test_repos.py": {
        "extract_name_from_path": {
            "name": "extract_name_from_path",
            "location": 18,
            "return": [
                "pathlib.Path",
                "trakcore.paths.path.Path",
                "pathlib.PosixPath",
                "pathlib.PurePosixPath",
                "pathlib.PurePath",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "mock_file_entry": {
            "name": "mock_file_entry",
            "location": 22,
            "return": [
                "str",
                "Optional[str]",
                "pathlib.Path",
                "List[str]",
                "games.models.Game"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "mock_dir_entry": {
            "name": "mock_dir_entry",
            "location": 31,
            "return": [
                "users.models.CustomUser",
                "Dict[str, Any]",
                "List[str]",
                "tests.models.Customer",
                "pathlib.Path"
            ],
            "arguments": {
                "dir_path": [
                    "str",
                    "Callable[[str], None]",
                    "BinaryIO",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "mock_api": {
            "name": "mock_api",
            "location": 42,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocked_api": [
                    "app.models.TweetContent",
                    "Sequence[str]",
                    "List[str]",
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "tracim.models.data.Content"
                ]
            }
        },
        "mock_file_reader": {
            "name": "mock_file_reader",
            "location": 48,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "games.models.Game"
            ],
            "arguments": {
                "mocked_file_reader": [
                    "BinaryIO",
                    "Optional[BinaryIO]"
                ]
            }
        },
        "mock_file_writer": {
            "name": "mock_file_writer",
            "location": 54,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "games.models.Game"
            ],
            "arguments": {
                "mocked_file_writer": [
                    "BinaryIO",
                    "Optional[BinaryIO]"
                ]
            }
        },
        "config_repo": {
            "name": "config_repo",
            "location": 59,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[pathlib.Path]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "TestKataTemplateRepo.kata_template_repo": {
            "name": "kata_template_repo",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "pathlib2.Path",
                    "Optional[str]"
                ],
                "config_repo": [
                    "str",
                    "pathlib2.Path",
                    "Optional[str]"
                ]
            }
        },
        "TestKataLanguageRepo.kata_language_repo": {
            "name": "kata_language_repo",
            "location": 152,
            "return": [
                "bool",
                "application.domain.common.AuthProvider",
                "application.domain.common.TenantProvider"
            ],
            "arguments": {
                "self": [],
                "mock_api": [],
                "config_repo": []
            }
        },
        "TestConfigRepo.valid_config": {
            "name": "valid_config",
            "location": 205,
            "return": [
                "bool",
                "str",
                "unittesmock.MagicMock"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigRepo.test_load_config_at_initialization": {
            "name": "test_load_config_at_initialization",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [
                    "unittesmock.MagicMock",
                    "str",
                    "mock.MagicMock"
                ],
                "mock_file_reader": [
                    "unittesmock.MagicMock"
                ],
                "mock_file_writer": [
                    "paradigm.catalog.Path"
                ]
            }
        },
        "TestKataTemplateRepo.TestGetForLanguage.test_request_contents_of_language_directory": {
            "name": "test_request_contents_of_language_directory",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ],
                "kata_template_repo": [
                    "kata.data.repos.KataTemplateRepo"
                ]
            }
        },
        "TestKataTemplateRepo.TestGetForLanguage.test_template_is_not_at_root": {
            "name": "test_template_is_not_at_root",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock"
                ],
                "kata_template_repo": [
                    "kata.data.repos.KataTemplateRepo"
                ]
            }
        },
        "TestKataLanguageRepo.TestGetAll.test_request_contents_of_root_directory": {
            "name": "test_request_contents_of_root_directory",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "kata_language_repo": [
                    "kata.data.repos.KataLanguageRepo",
                    "unittesmock.MagicMock",
                    "bool"
                ]
            }
        },
        "TestKataLanguageRepo.TestGetAll.test_return_all_directory_as_kata_languages": {
            "name": "test_return_all_directory_as_kata_languages",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock"
                ],
                "kata_language_repo": [
                    "kata.data.repos.KataLanguageRepo",
                    "bytes",
                    "core.models.MyUser"
                ]
            }
        },
        "TestKataLanguageRepo.TestGet.test_request_contents_of_root_directory": {
            "name": "test_request_contents_of_root_directory",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock",
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "kata_language_repo": [
                    "kata.data.repos.KataLanguageRepo",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestKataLanguageRepo.TestGet.test_valid_language_name": {
            "name": "test_valid_language_name",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock"
                ],
                "kata_language_repo": [
                    "kata.data.repos.KataLanguageRepo",
                    "bool"
                ]
            }
        },
        "TestKataLanguageRepo.TestGet.test_invalid_language_name": {
            "name": "test_invalid_language_name",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock"
                ],
                "kata_language_repo": [
                    "kata.data.repos.KataLanguageRepo",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestConfigRepo.TestGetKataGRepoInfos.test_get_kata_grepo_username": {
            "name": "test_get_kata_grepo_username",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ],
                "mock_file_reader": [
                    "unittesmock.MagicMock",
                    "path.Path"
                ],
                "mock_file_writer": [
                    "paradigm.catalog.Path"
                ]
            }
        },
        "TestConfigRepo.TestGetKataGRepoInfos.test_get_kata_grepo_reponame": {
            "name": "test_get_kata_grepo_reponame",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ],
                "mock_file_reader": [
                    "unittesmock.MagicMock",
                    "path.Path"
                ],
                "mock_file_writer": [
                    "paradigm.catalog.Path"
                ]
            }
        },
        "TestConfigRepo.TestHasTemplateAtRoot.config_repo": {
            "name": "config_repo",
            "location": 243,
            "return": [
                "bool",
                "Optional[Dict]",
                "Optional[dict]",
                "Tuple[pathlib.Path, pathlib.Path]",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "mock_file_reader": [
                    "str",
                    "pathlib.Path",
                    "List[annofabapi.models.Inspection]"
                ],
                "valid_config": [
                    "Optional[Dict]",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "mock_file_writer": [
                    "str",
                    "List[str]",
                    "dict",
                    "Tuple[str, str, str]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "TestConfigRepo.TestHasTemplateAtRoot.test_has_template": {
            "name": "test_has_template",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_repo": [
                    "kata.data.repos.ConfigRepo",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestConfigRepo.TestHasTemplateAtRoot.test_doesnt_have_template": {
            "name": "test_doesnt_have_template",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_repo": [
                    "kata.data.repos.ConfigRepo",
                    "Callable",
                    "path.Path"
                ]
            }
        },
        "TestConfigRepo.TestHasTemplateAtRoot.test_no_information_whether_or_not_template_is_located_at_root": {
            "name": "test_no_information_whether_or_not_template_is_located_at_root",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_repo": [
                    "kata.data.repos.ConfigRepo",
                    "path.Path",
                    "Callable"
                ]
            }
        },
        "TestConfigRepo.TestConfigValidation.assert_given_config_raises_when_calling_given_method": {
            "name": "assert_given_config_raises_when_calling_given_method",
            "location": 326,
            "return": [
                "float",
                "int",
                "Optional[BaseException]",
                "Tuple[str, int]",
                "models.tickeTicket",
                "search.domain.DocMeta"
            ],
            "arguments": {
                "self": [],
                "mock_file_reader": [
                    "bool",
                    "Path",
                    "Optional[str]"
                ],
                "mock_file_writer": [
                    "bool",
                    "Path",
                    "Optional[str]"
                ]
            }
        },
        "TestConfigRepo.TestConfigValidation.test_missing_katagrepo_entry": {
            "name": "test_missing_katagrepo_entry",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [],
                "assert_given_config_raises_when_calling_given_method": [
                    "str"
                ]
            }
        },
        "TestConfigRepo.TestConfigValidation.test_missing_user_entry": {
            "name": "test_missing_user_entry",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [],
                "assert_given_config_raises_when_calling_given_method": []
            }
        },
        "TestConfigRepo.TestConfigValidation.test_missing_repo_entry": {
            "name": "test_missing_repo_entry",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [],
                "assert_given_config_raises_when_calling_given_method": []
            }
        },
        "TestConfigRepo.TestConfigValidation.test_missing_hastemplateatroot_entry": {
            "name": "test_missing_hastemplateatroot_entry",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [],
                "assert_given_config_raises_when_calling_given_method": [
                    "str"
                ]
            }
        },
        "TestConfigRepo.TestConfigValidation.test_missing_auth_entry": {
            "name": "test_missing_auth_entry",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [],
                "assert_given_config_raises_when_calling_given_method": [
                    "str"
                ]
            }
        },
        "TestConfigRepo.TestConfigValidation.test_missing_skipnotloggedinwarning": {
            "name": "test_missing_skipnotloggedinwarning",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [],
                "assert_given_config_raises_when_calling_given_method": [
                    "str"
                ]
            }
        },
        "TestConfigRepo.TestIntegration.test_valid_config": {
            "name": "test_valid_config",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "TestConfigRepo.TestIntegration.test_missing_config_file_then_create_with_defaults": {
            "name": "test_missing_config_file_then_create_with_defaults",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestConfigRepo.TestAuthInfos.TestGetAuthToken.test_valid_token": {
            "name": "test_valid_token",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [
                    "dict",
                    "Dict[str, str]",
                    "Set[str]",
                    "Callable",
                    "str"
                ],
                "mock_file_reader": [
                    "path.Path",
                    "str",
                    "Optional[str]"
                ],
                "mock_file_writer": [
                    "path.Path",
                    "dict",
                    "bool",
                    "paradigm.catalog.Path",
                    "Callable"
                ]
            }
        },
        "TestConfigRepo.TestAuthInfos.TestGetAuthToken.test_missing_token": {
            "name": "test_missing_token",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [
                    "pathlib.Path",
                    "str"
                ],
                "mock_file_reader": [
                    "unittesmock.MagicMock",
                    "path.Path",
                    "str"
                ],
                "mock_file_writer": [
                    "paradigm.catalog.Path",
                    "Callable",
                    "path.Path"
                ]
            }
        },
        "TestConfigRepo.TestAuthInfos.TestSkipWarning.test_do_not_skip": {
            "name": "test_do_not_skip",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [
                    "dict",
                    "Dict[str, str]",
                    "Set[str]",
                    "Callable",
                    "str"
                ],
                "mock_file_reader": [
                    "unittesmock.MagicMock",
                    "path.Path",
                    "str"
                ],
                "mock_file_writer": [
                    "path.Path",
                    "paradigm.catalog.Path",
                    "Callable",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestConfigRepo.TestAuthInfos.TestSkipWarning.test_skip": {
            "name": "test_skip",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "valid_config": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict]",
                    "Iterable[str]",
                    "pathlib.Path"
                ],
                "mock_file_reader": [
                    "str",
                    "path.Path"
                ],
                "mock_file_writer": [
                    "paradigm.catalog.Path",
                    "Callable",
                    "bool",
                    "dict",
                    "path.Path"
                ]
            }
        },
        "TestConfigRepo.TestConfigValidation.assert_given_config_raises_when_calling_given_method.wrapper": {
            "name": "wrapper",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Optional[bool]",
                    "bool",
                    "list",
                    "Mapping[str, Any]",
                    "str"
                ],
                "method_to_call": [
                    "models.User",
                    "bool",
                    "str",
                    "Mapping",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ],
                "method_args": [
                    "type",
                    "str",
                    "Callable",
                    "grouper.models.group.Group"
                ],
                "regexes_to_match": [
                    "List[str]",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "TestConfigRepo.TestConfigValidation.test_missing_katagrepo_entry.config_wo_katagrepo": {
            "name": "config_wo_katagrepo",
            "location": 348,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "TestConfigRepo.TestConfigValidation.test_missing_user_entry.config_wo_user": {
            "name": "config_wo_user",
            "location": 360,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "TestConfigRepo.TestConfigValidation.test_missing_repo_entry.config_wo_repo": {
            "name": "config_wo_repo",
            "location": 372,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        },
        "TestConfigRepo.TestConfigValidation.test_missing_hastemplateatroot_entry.config_wo_hastemplateatroot": {
            "name": "config_wo_hastemplateatroot",
            "location": 385,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "TestConfigRepo.TestConfigValidation.test_missing_auth_entry.config_wo_auth": {
            "name": "config_wo_auth",
            "location": 398,
            "return": [
                "str",
                "complex",
                "int"
            ],
            "arguments": {}
        },
        "TestConfigRepo.TestConfigValidation.test_missing_skipnotloggedinwarning.config_wo_skipnotloggedinwarning": {
            "name": "config_wo_skipnotloggedinwarning",
            "location": 411,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "TestConfigRepo.TestIntegration.test_valid_config.write_config": {
            "name": "write_config",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "config_contents": [
                    "zerver.models.Realm",
                    "str",
                    "models.LTI1p3Provider",
                    "dict",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        },
        "TestConfigRepo.TestIntegration.test_valid_config.create_config_repo": {
            "name": "create_config_repo",
            "location": 428,
            "return": [
                "Optional[str]",
                "pathlib.Path",
                "Optional[Dict]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "TestKataTemplateRepo.TestGetForLanguage.TestTemplateIsAtRoot.TestInfoIsInConfig.test_template_not_at_root": {
            "name": "test_template_not_at_root",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock"
                ],
                "config_repo": [
                    "kata.data.repos.HardCoded.ConfigRepo",
                    "Callable"
                ],
                "kata_template_repo": [
                    "kata.data.repos.KataTemplateRepo"
                ]
            }
        },
        "TestKataTemplateRepo.TestGetForLanguage.TestTemplateIsAtRoot.TestInfoIsInConfig.test_template_at_root": {
            "name": "test_template_at_root",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock"
                ],
                "config_repo": [
                    "kata.data.repos.HardCoded.ConfigRepo"
                ],
                "kata_template_repo": [
                    "kata.data.repos.KataTemplateRepo"
                ]
            }
        },
        "TestKataTemplateRepo.TestGetForLanguage.TestTemplateIsAtRoot.TestInfoIsNotInConfig.test_check_if_has_readme": {
            "name": "test_check_if_has_readme",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "unittesmock.MagicMock"
                ],
                "config_repo": [
                    "unittesmock.MagicMock",
                    "kata.data.repos.HardCoded.KataLanguageRepo"
                ],
                "kata_template_repo": [
                    "kata.data.repos.KataTemplateRepo"
                ]
            }
        },
        "TestConfigRepo.TestAuthInfos.TestGetAuthToken.test_missing_token.config_wo_token": {
            "name": "config_wo_token",
            "location": 277,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {}
        }
    },
    "kata-master/tests/kata/data/__init__.py": {},
    "kata-master/tests/kata/data/io/test_file.py": {
        "TestFileWriter.file_writer": {
            "name": "file_writer",
            "location": 11,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileWriter.TestWriteYamlToFile.test_valid_yaml": {
            "name": "test_valid_yaml",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ],
                "file_writer": [
                    "kata.data.io.file.FileWriter",
                    "pypi2nix.path.Path",
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "kata-master/tests/kata/data/io/__init__.py": {},
    "kata-master/tests/kata/domain/test_grepo.py": {
        "mock_api": {
            "name": "mock_api",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocked_api": [
                    "str",
                    "kata.data.io.network.GithubApi",
                    "List[str]"
                ]
            }
        },
        "grepo": {
            "name": "grepo",
            "location": 103,
            "return": [
                "str",
                "pathlib.Path",
                "float"
            ],
            "arguments": {
                "mock_api": [
                    "str",
                    "dict",
                    "pathlib2.Path"
                ],
                "thread_pool_executor": [
                    "str",
                    "dict",
                    "pathlib2.Path"
                ]
            }
        },
        "sort_by_file_path": {
            "name": "sort_by_file_path",
            "location": 108,
            "return": [
                "dict",
                "str",
                "pathlib.Path",
                "TextIO",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "files": [
                    "str"
                ]
            }
        },
        "mock_api.extract_name_from_path": {
            "name": "extract_name_from_path",
            "location": 18,
            "return": [
                "pathlib.Path",
                "trakcore.paths.path.Path",
                "pathlib.PosixPath",
                "pathlib.PurePosixPath",
                "pathlib.PurePath",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "mock_api.mock_file_entry": {
            "name": "mock_file_entry",
            "location": 21,
            "return": [
                "str",
                "Optional[str]",
                "pathlib.Path",
                "List[str]",
                "games.models.Game"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "mock_api.mock_dir_entry": {
            "name": "mock_dir_entry",
            "location": 29,
            "return": [
                "users.models.CustomUser",
                "Dict[str, Any]",
                "List[str]",
                "tests.models.Customer",
                "pathlib.Path"
            ],
            "arguments": {
                "dir_path": [
                    "str",
                    "Callable[[str], None]",
                    "BinaryIO",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "mock_api.return_scenario_given_as_repo_name": {
            "name": "return_scenario_given_as_repo_name",
            "location": 89,
            "return": [
                "str",
                "Mapping[str, Any]",
                "tiny_erp.apps.purchases.models.Requisition",
                "data.VerseRange",
                "Optional[str]",
                "IO[str]"
            ],
            "arguments": {
                "_user": [
                    "str",
                    "List[str]"
                ],
                "repo": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]",
                    "List[Tuple[int, int]]"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "sort_by_file_path.file_path": {
            "name": "file_path",
            "location": 109,
            "return": [
                "pathlib.Path",
                "str",
                "int",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "file_entry": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestGetFileUrls.grepo_with_scenario": {
            "name": "grepo_with_scenario",
            "location": 117,
            "return": [
                "str",
                "bool",
                "ebl.transliteration.domain.texText",
                "core.models.Recipe"
            ],
            "arguments": {
                "self": [],
                "grepo": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "TestGetFileUrls.test_only_files": {
            "name": "test_only_files",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grepo_with_scenario": [
                    "pathlib.Path"
                ]
            }
        },
        "TestGetFileUrls.test_directory_containing_files": {
            "name": "test_directory_containing_files",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grepo_with_scenario": [
                    "pathlib.Path",
                    "IO[str]"
                ]
            }
        },
        "TestGetFileUrls.test_multiple_directories_containing_files": {
            "name": "test_multiple_directories_containing_files",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grepo_with_scenario": [
                    "pathlib.Path"
                ]
            }
        },
        "TestGetFileUrls.test_multiple_directories_one_is_empty": {
            "name": "test_multiple_directories_one_is_empty",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grepo_with_scenario": [
                    "IO[str]"
                ]
            }
        },
        "TestGetFileUrls.test_mix_of_files_and_directory": {
            "name": "test_mix_of_files_and_directory",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grepo_with_scenario": [
                    "pathlib.Path",
                    "IO[str]"
                ]
            }
        },
        "TestGetFileUrls.test_nested_directories": {
            "name": "test_nested_directories",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grepo_with_scenario": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestGetFileUrls.test_nested_directories_path_isn_t_root__flatten_list_and_remove_nesting": {
            "name": "test_nested_directories_path_isn_t_root__flatten_list_and_remove_nesting",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grepo_with_scenario": [
                    "pathlib.Path"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestSingleFile.single_file_test_helper": {
            "name": "single_file_test_helper",
            "location": 328,
            "return": [
                "Iterable[str]",
                "Optional[bytes]",
                "Mapping[str, Any]",
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "kata.data.io.network.GithubApi",
                    "Optional[str]",
                    "str"
                ],
                "grepo": [
                    "kata.data.io.network.GithubApi",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestSingleFile.test_at_root": {
            "name": "test_at_root",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Iterator[dep_check.models.SourceFile]",
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "single_file_test_helper": [
                    "pathlib.Path",
                    "Iterator[dep_check.models.SourceFile]",
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestSingleFile.test_empty_file": {
            "name": "test_empty_file",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Iterator[dep_check.models.SourceFile]",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "single_file_test_helper": [
                    "pathlib.Path",
                    "Iterator[dep_check.models.SourceFile]",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestSingleFile.test_in_sub_path": {
            "name": "test_in_sub_path",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Iterator[dep_check.models.SourceFile]",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "single_file_test_helper": [
                    "pathlib.Path",
                    "Iterator[dep_check.models.SourceFile]",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestSingleFile.test_file_has_different_path_in_url_use_file_path": {
            "name": "test_file_has_different_path_in_url_use_file_path",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ],
                "single_file_test_helper": [
                    "pathlib.Path",
                    "str",
                    "Iterator[dep_check.models.SourceFile]",
                    "Optional[str]",
                    "dep_check.models.SourceFile"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestSingleFile.test_root_dir_doesnt_exist_then_create_it": {
            "name": "test_root_dir_doesnt_exist_then_create_it",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "bool",
                    "path.Path",
                    "pathlib.PosixPath"
                ],
                "single_file_test_helper": [
                    "pathlib.Path",
                    "str",
                    "Iterator[dep_check.models.SourceFile]",
                    "Optional[str]"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestMultipleFiles.test_diverse_multiple_files": {
            "name": "test_diverse_multiple_files",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "kata.data.io.network.GithubApi",
                    "kata.domain.grepo.GRepo"
                ],
                "mock_api": [
                    "pathlib.Path",
                    "kata.data.io.network.GithubApi",
                    "kata.domain.grepo.GRepo"
                ],
                "grepo": [
                    "pathlib.Path",
                    "kata.data.io.network.GithubApi",
                    "kata.domain.grepo.GRepo"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestEdgeCases.ensure_mock_api_isn_t_called": {
            "name": "ensure_mock_api_isn_t_called",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "kata.data.io.network.GithubApi",
                    "str",
                    "tracim.models.data.Content"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestEdgeCases.test_empty_list": {
            "name": "test_empty_list",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ],
                "grepo": [
                    "kata.domain.grepo.GRepo",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestEdgeCases.test_root_dir_isn_t_a_dir": {
            "name": "test_root_dir_isn_t_a_dir",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "kata.domain.services.InitKataService"
                ],
                "grepo": [
                    "kata.domain.grepo.GRepo",
                    "pathlib.Path"
                ]
            }
        },
        "TestGetFileUrls.grepo_with_scenario.RepoWithScenario.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grepo": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestGetFileUrls.grepo_with_scenario.RepoWithScenario.init_scenario": {
            "name": "init_scenario",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scenario": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestGetFileUrls.grepo_with_scenario.RepoWithScenario.get_files_to_download": {
            "name": "get_files_to_download",
            "location": 126,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "norfs.fs.base.Path",
                    "cerulean.path.Path"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestSingleFile.SingleFileTestHelper.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "core_lib.core.models.Event",
                    "Dict[str, str]"
                ],
                "grepo": [
                    "int",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Dict]"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestSingleFile.SingleFileTestHelper.test_file_is_downloaded_and_saved_with_correct_content": {
            "name": "test_file_is_downloaded_and_saved_with_correct_content",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "pathlib.Path",
                    "Optional[str]",
                    "path.Path",
                    "str",
                    "pathlib2.Path",
                    "dict",
                    "kata.data.repos.ConfigRepo"
                ],
                "file_to_download": [
                    "pathlib.Path",
                    "Optional[str]",
                    "path.Path",
                    "str",
                    "pathlib2.Path",
                    "dict",
                    "kata.data.repos.ConfigRepo"
                ],
                "file_content": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestMultipleFiles.test_diverse_multiple_files.return_file_content_for_correct_url": {
            "name": "return_file_content_for_correct_url",
            "location": 382,
            "return": [
                "str",
                "Optional[Tuple[float, float]]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestMultipleFiles.test_diverse_multiple_files.assert_file_at_path_has_content": {
            "name": "assert_file_at_path_has_content",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "file_path": [
                    "pathlib.Path",
                    "str"
                ],
                "expected_content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestDownloadFilesAtLocation.TestSingleFile.SingleFileTestHelper.test_file_is_downloaded_and_saved_with_correct_content.return_file_content_only_for_correct_url": {
            "name": "return_file_content_only_for_correct_url",
            "location": 309,
            "return": [
                "pathlib.Path",
                "Dict[str, str]",
                "Callable",
                "Union[str, pathlib.Path]",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "kata-master/tests/kata/domain/test_services.py": {
        "config_repo": {
            "name": "config_repo",
            "location": 24,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[pathlib.Path]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "TestInitKataService.mock_grepo": {
            "name": "mock_grepo",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "mocked_grepo": [
                    "Optional[str]",
                    "str",
                    "unittesmock.MagicMock"
                ]
            }
        },
        "TestInitKataService.kata_template_repo": {
            "name": "kata_template_repo",
            "location": 37,
            "return": [
                "List[src.main.core.models.display.Display]",
                "unittesmock.MagicMock",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInitKataService.kata_language_repo": {
            "name": "kata_language_repo",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInitKataService.init_kata_service": {
            "name": "init_kata_service",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "kata_language_repo": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "zerver.models.UserProfile"
                ],
                "kata_template_repo": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "zerver.models.UserProfile"
                ],
                "mock_grepo": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "zerver.models.UserProfile"
                ],
                "config_repo": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "TestLoginService.login_service": {
            "name": "login_service",
            "location": 251,
            "return": [
                "Dict[str, str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "config_repo": [
                    "dict",
                    "Union[str, Iterable[str]]",
                    "bool",
                    "pathlib.Path",
                    "Dict[Any, int]"
                ]
            }
        },
        "TestInitKataService.TestListLanguages.test_valid_case": {
            "name": "test_valid_case",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "init_kata_service": [
                    "kata.data.repos.HardCoded.KataLanguageRepo",
                    "kata.data.repos.HardCoded.ConfigRepo"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo",
                    "kata.data.repos.HardCoded.ConfigRepo"
                ]
            }
        },
        "TestInitKataService.TestListTemplates.test_valid_language": {
            "name": "test_valid_language",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "init_kata_service": [
                    "kata.data.repos.HardCoded.KataTemplateRepo",
                    "str"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo",
                    "kata.domain.services.InitKataService",
                    "str"
                ],
                "kata_template_repo": [
                    "kata.data.repos.HardCoded.KataTemplateRepo",
                    "str"
                ]
            }
        },
        "TestInitKataService.TestListTemplates.test_language_doesnt_exist": {
            "name": "test_language_doesnt_exist",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "init_kata_service": [
                    "kata.data.repos.HardCoded.KataLanguageRepo",
                    "kata.domain.services.InitKataService",
                    "str",
                    "boggle.models.board.Board"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo",
                    "kata.domain.services.InitKataService",
                    "str",
                    "boggle.models.board.Board"
                ],
                "kata_template_repo": [
                    "kata.data.repos.HardCoded.KataTemplateRepo",
                    "str"
                ]
            }
        },
        "TestLoginService.TestIsLoggedIn.test_is_logged_in": {
            "name": "test_is_logged_in",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "login_service": [
                    "kata.data.repos.HardCoded.ConfigRepo"
                ],
                "config_repo": [
                    "kata.data.repos.HardCoded.ConfigRepo",
                    "kata.data.repos.HardCoded.KataLanguageRepo"
                ]
            }
        },
        "TestLoginService.TestIsLoggedIn.test_not_logged_in": {
            "name": "test_not_logged_in",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "login_service": [],
                "config_repo": [
                    "kata.data.repos.HardCoded.ConfigRepo"
                ]
            }
        },
        "TestLoginService.TestShouldSkipWarning.test_should_skip": {
            "name": "test_should_skip",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "login_service": [
                    "Callable",
                    "pypi2nix.path.Path",
                    "pathlib.Path"
                ],
                "config_repo": [
                    "kata.data.repos.HardCoded.ConfigRepo"
                ]
            }
        },
        "TestLoginService.TestShouldSkipWarning.test_should_not_skip": {
            "name": "test_should_not_skip",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "login_service": [],
                "config_repo": [
                    "kata.data.repos.HardCoded.ConfigRepo"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestValidCases.test_with_valid_template": {
            "name": "test_with_valid_template",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo"
                ],
                "kata_template_repo": [
                    "kata.data.repos.HardCoded.KataTemplateRepo",
                    "unittesmock.MagicMock",
                    "str"
                ],
                "mock_grepo": [
                    "unittesmock.MagicMock"
                ],
                "init_kata_service": [
                    "kata.domain.services.InitKataService",
                    "pathlib.Path",
                    "Dict[str, Sequence[str]]",
                    "str"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestEdgeCases.test_invalid_parent_dir": {
            "name": "test_invalid_parent_dir",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "init_kata_service": [
                    "kata.domain.services.InitKataService",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestValidCases.TestNoExplicitTemplateNameBut.test_only_one_template_available_for_language": {
            "name": "test_only_one_template_available_for_language",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "kata.domain.services.InitKataService",
                    "pathlib.Path",
                    "str",
                    "Dict[str, Sequence[str]]"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo"
                ],
                "kata_template_repo": [
                    "kata.data.repos.HardCoded.KataTemplateRepo",
                    "unittesmock.MagicMock",
                    "str"
                ],
                "mock_grepo": [
                    "unittesmock.MagicMock"
                ],
                "init_kata_service": [
                    "kata.domain.services.InitKataService",
                    "pathlib.Path",
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestValidCases.TestNoExplicitTemplateNameBut.test_only_one_template_at_root": {
            "name": "test_only_one_template_at_root",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "kata.domain.services.InitKataService",
                    "pathlib.Path",
                    "str"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo"
                ],
                "kata_template_repo": [
                    "kata.data.repos.HardCoded.KataTemplateRepo",
                    "core.models.MyUser",
                    "str"
                ],
                "mock_grepo": [
                    "unittesmock.MagicMock"
                ],
                "init_kata_service": [
                    "kata.domain.services.InitKataService",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestValidCases.TestNoExplicitTemplateNameBut.test_default_specified_and_valid": {
            "name": "test_default_specified_and_valid",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInitKataService.TestInitKata.TestEdgeCases.TestInvalidKataName.test_kata_name_empty": {
            "name": "test_kata_name_empty",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str"
                ],
                "init_kata_service": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestEdgeCases.TestInvalidKataName.test_kata_name_with_spaces": {
            "name": "test_kata_name_with_spaces",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str"
                ],
                "init_kata_service": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestEdgeCases.TestInvalidKataName.test_kata_name_with_special_char_besides_underscore": {
            "name": "test_kata_name_with_special_char_besides_underscore",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "path.Path",
                    "str"
                ],
                "init_kata_service": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "path.Path",
                    "str"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestEdgeCases.TestInvalidTemplate.test_language_doesnt_exist": {
            "name": "test_language_doesnt_exist",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "Mapping[str, Any]",
                    "str"
                ],
                "init_kata_service": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "Mapping[str, Any]",
                    "str"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo",
                    "Tuple[str, str]",
                    "str"
                ],
                "kata_template_repo": [
                    "kata.data.repos.HardCoded.KataTemplateRepo",
                    "str"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestEdgeCases.TestInvalidTemplate.test_template_name_doesnt_exist": {
            "name": "test_template_name_doesnt_exist",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str"
                ],
                "init_kata_service": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo",
                    "Tuple[str, str]"
                ],
                "kata_template_repo": [
                    "kata.data.repos.HardCoded.KataTemplateRepo",
                    "str"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestEdgeCases.TestInvalidTemplate.test_template_name_doesnt_exist_template_at_root": {
            "name": "test_template_name_doesnt_exist_template_at_root",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str"
                ],
                "init_kata_service": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo",
                    "pathlib.Path"
                ],
                "kata_template_repo": [
                    "kata.data.repos.HardCoded.KataTemplateRepo"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestEdgeCases.TestInvalidTemplate.test_template_name_isnt_given_but_multiple_options_are_available": {
            "name": "test_template_name_isnt_given_but_multiple_options_are_available",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str",
                    "Mapping[str, Any]"
                ],
                "init_kata_service": [
                    "pathlib.Path",
                    "kata.domain.services.InitKataService",
                    "str",
                    "Mapping[str, Any]"
                ],
                "kata_language_repo": [
                    "kata.data.repos.HardCoded.KataLanguageRepo"
                ],
                "kata_template_repo": [
                    "kata.data.repos.HardCoded.KataTemplateRepo",
                    "str"
                ]
            }
        },
        "TestInitKataService.TestInitKata.TestEdgeCases.TestInvalidTemplate.test_default_template_is_invalid": {
            "name": "test_default_template_is_invalid",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kata-master/tests/kata/domain/__init__.py": {}
}
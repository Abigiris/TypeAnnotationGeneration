{
    "keanu-master/docs/bin/freezeAtVersion.py": {
        "update_file": {
            "name": "update_file",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "destination": [
                    "Sequence[str]"
                ],
                "version": [
                    "str",
                    "bool"
                ]
            }
        },
        "freeze_shiny": {
            "name": "freeze_shiny",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "copy_to_versioned_legacy_path": {
            "name": "copy_to_versioned_legacy_path",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "Tuple[int, int]",
                    "Optional[str]"
                ],
                "legacy_root": [
                    "str",
                    "Optional[str]"
                ],
                "version": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "freeze_python": {
            "name": "freeze_python",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "version": [
                    "str",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        }
    },
    "keanu-master/docs/bin/snippet_writer.py": {
        "record_error": {
            "name": "record_error",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "output_str": [
                    "str",
                    "set",
                    "bytes"
                ]
            }
        },
        "printd": {
            "name": "printd",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "debug_str": [
                    "int",
                    "str"
                ]
            }
        },
        "read_file_snippets": {
            "name": "read_file_snippets",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "str",
                    "Optional[str]",
                    "io.BytesIO"
                ],
                "snippet_store": [
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "replace_tags": {
            "name": "replace_tags",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "in_name": [
                    "str",
                    "List[str]"
                ],
                "out_name": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[str]",
                    "List[str]"
                ],
                "snippet_store": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "do_rewrites": {
            "name": "do_rewrites",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "in_loc": [
                    "str"
                ],
                "out_loc": [
                    "str"
                ],
                "snippet_store": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "for_all_files_in_dir": {
            "name": "for_all_files_in_dir",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "directory": [
                    "str",
                    "Optional[str]"
                ],
                "action": [
                    "bool",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "subtractStrings": {
            "name": "subtractStrings",
            "location": 108,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "str1": [
                    "str",
                    "Union[str, int]"
                ],
                "str2": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "for_all_in_subdirs": {
            "name": "for_all_in_subdirs",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "directory": [
                    "str",
                    "int"
                ],
                "action": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "check_output_dir_exists": {
            "name": "check_output_dir_exists",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "output_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "strip_block_whitespace": {
            "name": "strip_block_whitespace",
            "location": 126,
            "return": [
                "str",
                "dict",
                "tuple",
                "float",
                "bytes"
            ],
            "arguments": {
                "string_list": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_autocorrelation.py": {
        "test_autocorrelation_example_scalar": {
            "name": "test_autocorrelation_example_scalar",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_autocorrelation_example_nd": {
            "name": "test_autocorrelation_example_nd",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_lorenz.py": {
        "add_time": {
            "name": "add_time",
            "location": 39,
            "return": [
                "List[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "current": [
                    "Tuple[keanu.vertex.Vertex, keanu.vertex.Vertex, keanu.vertex.Vertex]",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "build_graph": {
            "name": "build_graph",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "initial": [
                    "Tuple[keanu.vertex.Vertex, keanu.vertex.Vertex, keanu.vertex.Vertex]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "apply_observations": {
            "name": "apply_observations",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "graph_time_steps": [
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "window": [
                    "Optional[int]",
                    "Tuple[int, int]",
                    "Callable[[str, str], float]",
                    "int"
                ],
                "observed": [
                    "int",
                    "bool",
                    "float",
                    "bytes"
                ]
            }
        },
        "get_time_slice_values": {
            "name": "get_time_slice_values",
            "location": 66,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "time_steps": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "time": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_run_lorenz": {
            "name": "test_run_lorenz",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "LorenzModel.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sigma": [
                    "int",
                    "float",
                    "Union[str, float]"
                ],
                "beta": [
                    "int",
                    "float",
                    "Union[str, float]"
                ],
                "rho": [
                    "int",
                    "float",
                    "Union[str, float]"
                ],
                "time_step": [
                    "int",
                    "float",
                    "Union[str, float]"
                ]
            }
        },
        "LorenzModel.run_model": {
            "name": "run_model",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_time_steps": [
                    "int",
                    "float"
                ]
            }
        },
        "LorenzModel.__get_next_position": {
            "name": "__get_next_position",
            "location": 33,
            "return": [
                "bool",
                "str",
                "int",
                "Hashable",
                "type",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "List[List[int]]",
                    "Tuple[float, float]",
                    "List[int]"
                ]
            }
        }
    },
    "keanu-master/docs/src/test/python/test_optimizer.py": {
        "build_model": {
            "name": "build_model",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_gradient_optimzer_example": {
            "name": "test_gradient_optimzer_example",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_non_gradient_optimizer_example": {
            "name": "test_non_gradient_optimizer_example",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_sampling.py": {
        "test_inference_example_metropolis": {
            "name": "test_inference_example_metropolis",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inference_example_hmc_nuts": {
            "name": "test_inference_example_hmc_nuts",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_save_load.py": {
        "test_can_save_and_load": {
            "name": "test_can_save_and_load",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "dict"
                ]
            }
        }
    },
    "keanu-master/docs/src/test/python/test_tensors.py": {
        "test_tensor_example_creation": {
            "name": "test_tensor_example_creation",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keanu-master/docs/src/test/python/test_thermometers.py": {
        "test_thermometers_example": {
            "name": "test_thermometers_example",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-project/src/test/resources/model.py": {},
    "keanu-master/keanu-python/setup.py": {
        "readme": {
            "name": "readme",
            "location": 6,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/docs/conf.py": {},
    "keanu-master/keanu-python/docs/remove_underscores.py": {},
    "keanu-master/keanu-python/examples/coal_mining.py": {
        "CoalMining.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoalMining.model": {
            "name": "model",
            "location": 15,
            "return": [
                "Callable",
                "Optional[str]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoalMining.training_data": {
            "name": "training_data",
            "location": 30,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List['PydanticModelField']",
                "str",
                "int",
                "Dict[str, numpy.ndarray]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/examples/lorenz_model.py": {
        "LorenzModel.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sigma": [
                    "int",
                    "float",
                    "Union[str, float]"
                ],
                "beta": [
                    "int",
                    "float",
                    "Union[str, float]"
                ],
                "rho": [
                    "int",
                    "float",
                    "Union[str, float]"
                ],
                "time_step": [
                    "int",
                    "float",
                    "Union[str, float]"
                ]
            }
        },
        "LorenzModel.run_model": {
            "name": "run_model",
            "location": 15,
            "return": [
                "typing.Generator[Coordinates, None, None]"
            ],
            "arguments": {
                "self": [],
                "num_time_steps": [
                    "int",
                    "float"
                ]
            }
        },
        "LorenzModel.__get_next_position": {
            "name": "__get_next_position",
            "location": 22,
            "return": [
                "bool",
                "str",
                "int",
                "Hashable",
                "type",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": [],
                "current": [
                    "List[List[int]]",
                    "Tuple[float, float]",
                    "List[int]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/examples/thermometers.py": {
        "model": {
            "name": "model",
            "location": 5,
            "return": [
                "Callable",
                "Optional[str]",
                "Type"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/examples/__init__.py": {},
    "keanu-master/keanu-python/keanu/base.py": {
        "JavaObjectWrapper.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JavaObjectWrapper.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaObjectWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 14,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "Optional[str]",
                    "int",
                    "float"
                ]
            }
        },
        "JavaObjectWrapper.__check_if_constructed_without_error": {
            "name": "__check_if_constructed_without_error",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "JavaObjectWrapper.__check_if_unwrapped": {
            "name": "__check_if_unwrapped",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "KT",
                    "int"
                ]
            }
        },
        "JavaObjectWrapper.unwrap": {
            "name": "unwrap",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/context.py": {
        "Singleton.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [
                    "type",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "KeanuContext.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.__build_classpath": {
            "name": "__build_classpath",
            "location": 41,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.__stderr_with_redirect_disabled_for_jupyter": {
            "name": "__stderr_with_redirect_disabled_for_jupyter",
            "location": 46,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.__get_random_port_for_callback_server": {
            "name": "__get_random_port_for_callback_server",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.jvm_view": {
            "name": "jvm_view",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeanuContext.to_java_map": {
            "name": "to_java_map",
            "location": 64,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "python_map": [
                    "dict",
                    "Dict[Tuple[int, ...], float]"
                ]
            }
        },
        "KeanuContext.to_java_object_list": {
            "name": "to_java_object_list",
            "location": 82,
            "return": [
                "IO[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "bool",
                    "int"
                ]
            }
        },
        "KeanuContext.to_java_object_set": {
            "name": "to_java_object_set",
            "location": 95,
            "return": [
                "Set[str]",
                "set",
                "Callable[..., None]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "bool",
                    "List[T]",
                    "List[str]"
                ]
            }
        },
        "KeanuContext.to_java_array": {
            "name": "to_java_array",
            "location": 103,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "float",
                    "\"Lattice\"",
                    "bool",
                    "str"
                ],
                "klass": [
                    "Sequence[str]",
                    "Optional[Tuple]",
                    "Optional[str]"
                ]
            }
        },
        "KeanuContext.to_java_long_array": {
            "name": "to_java_long_array",
            "location": 113,
            "return": [
                "int",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "KeanuContext.to_java_int_array": {
            "name": "to_java_int_array",
            "location": 116,
            "return": [
                "int",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "KeanuContext.to_java_boolean_array": {
            "name": "to_java_boolean_array",
            "location": 119,
            "return": [
                "int",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "KeanuContext.to_java_string_array": {
            "name": "to_java_string_array",
            "location": 122,
            "return": [
                "BaseException",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "int",
                    "str"
                ]
            }
        },
        "KeanuContext.to_java_vertex_array": {
            "name": "to_java_vertex_array",
            "location": 125,
            "return": [
                "int",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "KeanuContext.__infer_class_from_array": {
            "name": "__infer_class_from_array",
            "location": 129,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "List[List[str]]",
                    "int",
                    "Set[str]",
                    "List[str]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/description_creator.py": {
        "create_description": {
            "name": "create_description",
            "location": 13,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "vertex": [
                    "str"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/infer_type.py": {
        "infer_type_and_execute": {
            "name": "infer_type_and_execute",
            "location": 11,
            "return": [
                "Callable",
                "Optional[str]",
                "Type[Any]"
            ],
            "arguments": {
                "value": [
                    "Dict[type, Callable]",
                    "keanu.vartypes.tensor_arg_types",
                    "type",
                    "str",
                    "bytes"
                ],
                "actions": [
                    "Dict[type, Callable]",
                    "keanu.vartypes.tensor_arg_types",
                    "type",
                    "str",
                    "bytes"
                ]
            }
        },
        "get_type_of_value": {
            "name": "get_type_of_value",
            "location": 15,
            "return": [
                "Iterable[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "t": [
                    "Type",
                    "Callable"
                ]
            }
        },
        "__infer_type_from_ndarray": {
            "name": "__infer_type_from_ndarray",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "ndarray": [
                    "keanu.vartypes.numpy_types",
                    "Optional[numpy.ndarray]",
                    "dict",
                    "numpy.ndarray",
                    "Union[int, float]"
                ]
            }
        },
        "__infer_type_from_scalar": {
            "name": "__infer_type_from_scalar",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "scalar": [
                    "keanu.vartypes.primitive_types",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/java_exception.py": {
        "JavaException.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Exception"
                ]
            }
        },
        "JavaException.get_class": {
            "name": "get_class",
            "location": 11,
            "return": [
                "str",
                "dict",
                "List[\"Source\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaException.get_message": {
            "name": "get_message",
            "location": 14,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaException.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/keanu_random.py": {
        "set_deterministic_state": {
            "name": "set_deterministic_state",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "KeanuRandom.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Optional[str]",
                    "float",
                    "bool"
                ]
            }
        },
        "KeanuRandom.next_double": {
            "name": "next_double",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeanuRandom.set_default_random_seed": {
            "name": "set_default_random_seed",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "Union[int, float]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertices": [
                    "bytes",
                    "dict",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Model.to_bayes_net": {
            "name": "to_bayes_net",
            "location": 12,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__setattr__": {
            "name": "__setattr__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "dict",
                    "str",
                    "\"QuerySet[MODEL]\"",
                    "int"
                ],
                "v": [
                    "dict",
                    "models.base.Model"
                ]
            }
        },
        "Model.__getattr__": {
            "name": "__getattr__",
            "location": 23,
            "return": [
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Model.__enter__": {
            "name": "__enter__",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__exit__": {
            "name": "__exit__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/net.py": {
        "BayesNet.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertices": [
                    "float",
                    "int",
                    "dict"
                ]
            }
        },
        "BayesNet.iter_latent_or_observed_vertices": {
            "name": "iter_latent_or_observed_vertices",
            "location": 23,
            "return": [
                "int",
                "Union[base.Criterion, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_latent_vertices": {
            "name": "iter_latent_vertices",
            "location": 26,
            "return": [
                "int",
                "Union[base.Criterion, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_observed_vertices": {
            "name": "iter_observed_vertices",
            "location": 29,
            "return": [
                "int",
                "Union[base.Criterion, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_continuous_latent_vertices": {
            "name": "iter_continuous_latent_vertices",
            "location": 32,
            "return": [
                "int",
                "Union[base.Criterion, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_discrete_latent_vertices": {
            "name": "iter_discrete_latent_vertices",
            "location": 35,
            "return": [
                "int",
                "Union[base.Criterion, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.iter_all_vertices": {
            "name": "iter_all_vertices",
            "location": 38,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BayesNet.probe_for_non_zero_probability": {
            "name": "probe_for_non_zero_probability",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attempts": [
                    "bool",
                    "str"
                ],
                "random": [
                    "bool",
                    "str"
                ]
            }
        },
        "BayesNet.get_vertex_by_label": {
            "name": "get_vertex_by_label",
            "location": 44,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "ProbabilisticModel.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "str"
                ]
            }
        },
        "ProbabilisticModelWithGradient.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/network_io.py": {
        "NetworkSaver.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "saver_object": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "NetworkSaver.save": {
            "name": "save",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "save_values": [
                    "str",
                    "dict"
                ],
                "metadata": [
                    "Optional[Dict[str, str]]",
                    "Type[T]",
                    "planetsclub.users.base.BaseUser",
                    "golem_messages.message.base.Message"
                ]
            }
        },
        "ProtobufSaver.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "net": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "DotSaver.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "net_or_vertices": [
                    "Callable"
                ]
            }
        },
        "JsonSaver.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "net": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "MIRSaver.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "net": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "NetworkLoader.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loader_object": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "NetworkLoader.load": {
            "name": "load",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ProtobufLoader.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonLoader.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MIRLoader.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/sequence.py": {
        "SequenceItem.add": {
            "name": "add",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertex": [
                    "str",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "Union[str, Callable[[], str]]",
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "int"
                ],
                "label": [
                    "Union[str, Callable[[], str]]"
                ]
            }
        },
        "SequenceItem.get": {
            "name": "get",
            "location": 35,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Set[int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "SequenceItem.get_contents": {
            "name": "get_contents",
            "location": 38,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceItem.add_double_proxy_for": {
            "name": "add_double_proxy_for",
            "location": 50,
            "return": [
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bytes",
                    "IO",
                    "float",
                    "Callable"
                ],
                "shape": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[float]",
                    "Optional[Tuple[float, float]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "SequenceItem.add_integer_proxy_for": {
            "name": "add_integer_proxy_for",
            "location": 59,
            "return": [
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bytes",
                    "IO",
                    "float",
                    "Callable"
                ],
                "shape": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[float]",
                    "Optional[Tuple[float, float]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "SequenceItem.add_boolean_proxy_for": {
            "name": "add_boolean_proxy_for",
            "location": 68,
            "return": [
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bytes",
                    "IO",
                    "float",
                    "Callable"
                ],
                "shape": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[float]",
                    "Optional[Tuple[float, float]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Sequence.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "factories": [
                    "Optional[Any]",
                    "Optional[dict]",
                    "int",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "count": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[dict]"
                ],
                "name": [
                    "str",
                    "Optional[Mapping[str, str]]",
                    "list"
                ],
                "data_generator": [
                    "str",
                    "float",
                    "Optional[Callable[[str], bool]]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[float]"
                ],
                "initial_state": [
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ]
            }
        },
        "Sequence.__iter__": {
            "name": "__iter__",
            "location": 131,
            "return": [
                "typing.Generator[SequenceItem, None, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.size": {
            "name": "size",
            "location": 136,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.get_last_item": {
            "name": "get_last_item",
            "location": 139,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.to_bayes_net": {
            "name": "to_bayes_net",
            "location": 142,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.proxy_label_for": {
            "name": "proxy_label_for",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Awaitable[Any]",
                    "Dict[object, Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SequenceItem.get_contents.get_unqualified_name_or_proxy_name": {
            "name": "get_unqualified_name_or_proxy_name",
            "location": 40,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "vertex": [
                    "str",
                    "int",
                    "Hashable",
                    "Union[str, int]",
                    "Tuple[int, int]",
                    "Set[int]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/shape_validation.py": {
        "check_index_is_valid": {
            "name": "check_index_is_valid",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "shape": [
                    "int",
                    "List[int]"
                ],
                "index": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "check_all_shapes_match": {
            "name": "check_all_shapes_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "shapes": [
                    "Set[str]",
                    "str",
                    "dict",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/stats.py": {
        "autocorrelation": {
            "name": "autocorrelation",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Hashable"
                ]
            }
        },
        "check_all_floats": {
            "name": "check_all_floats",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": [
                    "bool",
                    "Awaitable[T]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/tensor.py": {
        "Tensor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Tensor.is_scalar": {
            "name": "is_scalar",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tensor.scalar": {
            "name": "scalar",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tensor.apply": {
            "name": "apply",
            "location": 38,
            "return": [
                "Sequence['cirq.Qid']",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "Callable"
                ]
            }
        },
        "Tensor.get_tensor_type": {
            "name": "get_tensor_type",
            "location": 41,
            "return": [
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tensor.__get_tensor_from_ndarray": {
            "name": "__get_tensor_from_ndarray",
            "location": 50,
            "return": [
                "Type[T]",
                "Iterable[numpy.dtype]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "ndarray": [
                    "vartypes.numpy_types",
                    "str",
                    "Any"
                ]
            }
        },
        "Tensor.__get_java_array_from_ndarray": {
            "name": "__get_java_array_from_ndarray",
            "location": 59,
            "return": [
                "bool",
                "List[dict]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "ndarray": [
                    "vartypes.numpy_types",
                    "bytes",
                    "dict",
                    "str",
                    "golem_messages.message.base.Message",
                    "int"
                ]
            }
        },
        "Tensor.__infer_tensor_ctor_from_ndarray": {
            "name": "__infer_tensor_ctor_from_ndarray",
            "location": 77,
            "return": [
                "numpy.array",
                "bool",
                "str",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "ndarray": [
                    "vartypes.numpy_types",
                    "numpy.ndarray",
                    "Optional[list]",
                    "int"
                ]
            }
        },
        "Tensor.__get_tensor_from_scalar": {
            "name": "__get_tensor_from_scalar",
            "location": 89,
            "return": [
                "bool",
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "Set[str]"
            ],
            "arguments": {
                "scalar": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Tensor._to_ndarray": {
            "name": "_to_ndarray",
            "location": 100,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "dict",
                "str"
            ],
            "arguments": {
                "java_tensor": [
                    "py4j.java_gateway.JavaObject",
                    "str"
                ]
            }
        },
        "Tensor.__get_ndarray_from_tensor": {
            "name": "__get_ndarray_from_tensor",
            "location": 107,
            "return": [
                "dict",
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "java_tensor": [
                    "Optional[bytes]",
                    "Union[int, str]",
                    "List[Tuple[int, bytes]]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/vartypes.py": {},
    "keanu-master/keanu-python/keanu/__init__.py": {},
    "keanu-master/keanu-python/keanu/__version__.py": {},
    "keanu-master/keanu-python/keanu/algorithm/optimization.py": {
        "relative": {
            "name": "relative",
            "location": 40,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "List[str]",
                "Optional[float]"
            ],
            "arguments": {
                "norm": [
                    "str",
                    "float",
                    "int"
                ],
                "tolerance": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "absolute": {
            "name": "absolute",
            "location": 44,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "norm": [
                    "float",
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "tolerance": [
                    "float",
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "_OptimizedResult.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_object": [
                    "py4j.java_gateway.JavaObject",
                    "List[str]",
                    "Sequence[str]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_OptimizedResult.fitness": {
            "name": "fitness",
            "location": 30,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OptimizedResult.value_for": {
            "name": "value_for",
            "location": 33,
            "return": [
                "Union[int, float, complex]",
                "Dict[str, int]",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConvergenceChecker.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "difference": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "norm": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "tolerance": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Optimizer.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [
                    "int",
                    "bool",
                    "float"
                ],
                "net": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Optimizer.max_a_posteriori": {
            "name": "max_a_posteriori",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.max_likelihood": {
            "name": "max_likelihood",
            "location": 78,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optimizer._build_bayes_net": {
            "name": "_build_bayes_net",
            "location": 82,
            "return": [
                "Type[T]",
                "Callable[..., None]",
                "Optional[str]"
            ],
            "arguments": {
                "factory_class": [
                    "List[str]",
                    "Type[T]",
                    "str"
                ],
                "net": [
                    "Union[keanu.neBayesNet, keanu.vertex.base.Vertex]",
                    "str",
                    "bool"
                ]
            }
        },
        "GradientOptimizer.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "Union[keanu.neBayesNet, keanu.vertex.base.Vertex]",
                    "dict",
                    "bool",
                    "tensorflow.Tensor",
                    "cmk.base.events.EventContext"
                ],
                "algorithm": [
                    "Optional[float]",
                    "Optional[bool]",
                    "torch.Tensor"
                ]
            }
        },
        "ConjugateGradient.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_evaluations": [
                    "Optional[int]",
                    "bytes",
                    "Union[str, int]",
                    "Optional[str]",
                    "int"
                ],
                "relative_threshold": [
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Optional[Any]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "absolute_threshold": [
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Optional[Any]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "Adam.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_evaluations": [
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "alpha": [
                    "Optional[float]",
                    "Optional[bool]",
                    "torch.Tensor"
                ],
                "beta1": [
                    "Optional[float]",
                    "Optional[bool]",
                    "torch.Tensor"
                ],
                "beta2": [
                    "Optional[float]",
                    "Optional[bool]",
                    "torch.Tensor"
                ],
                "epsilon": [
                    "Optional[float]",
                    "Optional[bool]",
                    "torch.Tensor"
                ],
                "convergence_checker": [
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "NonGradientOptimizer.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "net": [
                    "Union[keanu.neBayesNet, keanu.vertex.base.Vertex]",
                    "dict",
                    "bool",
                    "tensorflow.Tensor",
                    "Optional[str]"
                ],
                "algorithm": [
                    "Optional[float]",
                    "Optional[bool]",
                    "torch.Tensor"
                ]
            }
        },
        "BOBYQA.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_evaluations": [
                    "Optional[int]",
                    "int"
                ],
                "bounds_range": [
                    "Optional[float]",
                    "bool",
                    "Optional[Type[Any]]",
                    "Optional[List]",
                    "Optional[Tuple[float, float]]"
                ],
                "initial_trust_region_radius": [
                    "Optional[float]",
                    "Optional[int]",
                    "Union[None, float, int]",
                    "Optional[gluonts.model.common.Tensor]",
                    "Optional[List[int]]",
                    "Optional[str]"
                ],
                "stopping_trust_region_radius": [
                    "Optional[float]",
                    "Optional[int]",
                    "Union[None, float, int]",
                    "Optional[gluonts.model.common.Tensor]",
                    "Optional[List[int]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/algorithm/proposal_listeners.py": {
        "AcceptanceRateTracker.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AcceptanceRateTracker.get_acceptance_rate": {
            "name": "get_acceptance_rate",
            "location": 21,
            "return": [
                "str",
                "Callable",
                "Dict[str, Dict[str, Any]]",
                "bytes",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "vertex": [
                    "str"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/algorithm/sampling.py": {
        "sample": {
            "name": "sample",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "net": [
                    "int",
                    "str"
                ],
                "sample_from": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ],
                "sampling_algorithm": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[base.MinimizationAttack]"
                ],
                "draws": [
                    "str",
                    "bool",
                    "alerta.database.base.Query"
                ],
                "drop": [
                    "str",
                    "bool",
                    "alerta.database.base.Query"
                ],
                "down_sample_interval": [
                    "str",
                    "bool",
                    "alerta.database.base.Query"
                ],
                "plot": [
                    "bool",
                    "list"
                ],
                "ax": [
                    "bool",
                    "int",
                    "str",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "generate_samples": {
            "name": "generate_samples",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "net": [
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "Dict[int, Dict[int, Any]]",
                    "Dict[str, Any]",
                    "Dict[int, dict]"
                ],
                "sample_from": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ],
                "sampling_algorithm": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[base.MinimizationAttack]"
                ],
                "drop": [
                    "int",
                    "Set[Tuple[str, ...]]",
                    "float",
                    "torch.Tensor",
                    "Sequence[str]"
                ],
                "down_sample_interval": [
                    "int",
                    "Set[Tuple[str, ...]]",
                    "float",
                    "torch.Tensor",
                    "Sequence[str]"
                ],
                "live_plot": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]"
                ],
                "refresh_every": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]"
                ],
                "ax": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "__all_scalar": {
            "name": "__all_scalar",
            "location": 245,
            "return": [
                "bool",
                "str",
                "Hashable"
            ],
            "arguments": {
                "sample_from": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "_samples_generator": {
            "name": "_samples_generator",
            "location": 249,
            "return": [
                "keanu.vartypes.sample_generator_types"
            ],
            "arguments": {
                "sample_iterator": [
                    "Optional[Collection[int]]",
                    "int",
                    "bool"
                ],
                "vertices_unwrapped": [
                    "int",
                    "numpy.ndarray"
                ],
                "live_plot": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[List[str]]",
                    "list"
                ],
                "refresh_every": [
                    "int",
                    "float",
                    "bool",
                    "numpy.random.RandomState"
                ],
                "ax": [
                    "float",
                    "int",
                    "torch.Tensor",
                    "List[torch.Tensor]"
                ],
                "all_scalar": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Optional[List[str]]",
                    "list"
                ],
                "id_to_label": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "__check_if_vertices_are_labelled": {
            "name": "__check_if_vertices_are_labelled",
            "location": 278,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, int]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "vertices": [
                    "Dict[str, Any]",
                    "str",
                    "Callable[[], object]",
                    "bool"
                ]
            }
        },
        "__create_single_indexed_samples": {
            "name": "__create_single_indexed_samples",
            "location": 289,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "network_samples": [
                    "str",
                    "Dict[str, Any]"
                ],
                "vertices_unwrapped": [
                    "str",
                    "list",
                    "int",
                    "List[dict]",
                    "float"
                ],
                "id_to_label": [
                    "bool",
                    "eth.chains.base.MiningChain",
                    "bytes",
                    "Sequence[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "__create_multi_indexed_samples": {
            "name": "__create_multi_indexed_samples",
            "location": 299,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "vertices_unwrapped": [
                    "str",
                    "list",
                    "int",
                    "List[dict]",
                    "float"
                ],
                "network_samples": [
                    "str",
                    "Dict[str, Any]"
                ],
                "id_to_label": [
                    "bool",
                    "eth.chains.base.MiningChain",
                    "bytes",
                    "Sequence[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "__create_multi_indexed_samples_generated": {
            "name": "__create_multi_indexed_samples_generated",
            "location": 316,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "vertices_unwrapped": [
                    "str",
                    "list",
                    "int",
                    "List[dict]",
                    "float"
                ],
                "network_samples": [
                    "Dict[str, int]",
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Callable]"
                ],
                "id_to_label": [
                    "bool",
                    "eth.chains.base.MiningChain",
                    "bytes",
                    "Sequence[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "__add_sample_to_dict": {
            "name": "__add_sample_to_dict",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "sample_value": [
                    "str",
                    "dict",
                    "list",
                    "float",
                    "bool",
                    "Match"
                ],
                "vertex_sample": [
                    "Dict[str, bool]",
                    "list"
                ]
            }
        },
        "__get_vertex_samples": {
            "name": "__get_vertex_samples",
            "location": 340,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "network_samples": [
                    "int",
                    "dict"
                ],
                "vertex": [
                    "int",
                    "dict"
                ]
            }
        },
        "PosteriorSamplingAlgorithm.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sampler": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PosteriorSamplingAlgorithm.get_sampler": {
            "name": "get_sampler",
            "location": 31,
            "return": [
                "str",
                "bool",
                "Vertex",
                "eagerpy.Tensor"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwardSampler.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetropolisHastingsSampler.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "proposal_distribution": [
                    "Optional[int]",
                    "tuple",
                    "Optional[str]"
                ],
                "latents": [
                    "str",
                    "dict"
                ],
                "proposal_listeners": [
                    "Optional[int]",
                    "tuple",
                    "Optional[str]"
                ],
                "proposal_distribution_sigma": [
                    "str"
                ]
            }
        },
        "NUTSSampler.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "adapt_count": [
                    "Optional[int]",
                    "Union[int, None]",
                    "Optional[float]"
                ],
                "adapt_step_size_enabled": [
                    "Optional[float]",
                    "Optional[List[int]]",
                    "Optional[numpy.ndarray]",
                    "Optional[int]"
                ],
                "adapt_potential_enabled": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[numpy.ndarray]",
                    "bool",
                    "Tuple[numpy.dtype]",
                    "Optional[base.MinimizationAttack]"
                ],
                "target_acceptance_prob": [
                    "bool",
                    "Optional[dict]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "initial_step_size": [
                    "int",
                    "Union[float, int]",
                    "bool",
                    "Optional[float]",
                    "List[float]",
                    "tuple"
                ],
                "potential_adapt_window_size": [
                    "Optional[int]",
                    "int",
                    "Optional[float]",
                    "Optional[numpy.ndarray]"
                ],
                "max_energy_change": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Union[None, int]"
                ],
                "max_tree_height": [
                    "int",
                    "numpy.ndarray",
                    "Optional[int]",
                    "List[int]",
                    "Optional[numpy.ndarray]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/algorithm/_proposal_distribution.py": {
        "ProposalDistribution.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Type",
                    "bool",
                    "str",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type"
                ],
                "latents": [
                    "Optional[Sequence[str]]",
                    "Iterable[str]",
                    "Sequence[str]",
                    "List[Dict]",
                    "str"
                ],
                "sigma": [],
                "listeners": [
                    "str",
                    "Callable",
                    "List[Dict[str, str]]",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/algorithm/__init__.py": {},
    "keanu-master/keanu-python/keanu/functional/biconsumer.py": {
        "BiConsumer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "BiConsumer.accept": {
            "name": "accept",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg1": [
                    "int"
                ],
                "arg2": [
                    "int"
                ]
            }
        },
        "BiConsumer.hashCode": {
            "name": "hashCode",
            "location": 21,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/consumer.py": {
        "Consumer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Consumer.accept": {
            "name": "accept",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Consumer.hashCode": {
            "name": "hashCode",
            "location": 21,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/function.py": {
        "Function.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Function.apply": {
            "name": "apply",
            "location": 11,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/hash_shortener.py": {
        "shorten_hash": {
            "name": "shorten_hash",
            "location": 1,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "original_hash": [
                    "int",
                    "Dict[str, int]",
                    "List[list]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/iterator.py": {
        "JavaIterator.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "python_iterator": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JavaIterator.next": {
            "name": "next",
            "location": 17,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "JavaIterator.hasNext": {
            "name": "hasNext",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/supplier.py": {
        "Supplier.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lambda_function": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Supplier.get": {
            "name": "get",
            "location": 11,
            "return": [
                "str",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/functional/__init__.py": {},
    "keanu-master/keanu-python/keanu/plots/autocorrelation.py": {
        "__create_new_mpl": {
            "name": "__create_new_mpl",
            "location": 11,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "__plot_corr": {
            "name": "__plot_corr",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "str",
                    "bool"
                ],
                "acf_x": [
                    "int",
                    "Dict[int, Tuple[int, int]]",
                    "str"
                ],
                "nlags": [
                    "int",
                    "Dict[int, Tuple[int, int]]",
                    "str"
                ]
            }
        },
        "__calc_max_lag": {
            "name": "__calc_max_lag",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data_len": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "plot_acf": {
            "name": "plot_acf",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "nlags": [
                    "dict",
                    "int",
                    "Sequence[T]",
                    "list"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/plots/traceplot.py": {
        "traceplot": {
            "name": "traceplot",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "trace": [
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "int",
                    "Optional[Tuple[int, ...]]",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ],
                "labels": [
                    "numpy.array",
                    "List[List[str]]",
                    "numpy.ndarray",
                    "Tuple[numpy.ndarray, numpy.ndarray]"
                ],
                "ax": [
                    "Tuple[numpy.ndarray, numpy.ndarray]",
                    "Optional[Any]",
                    "bool",
                    "List[List[str]]",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "x0": [
                    "int",
                    "OrderedDict",
                    "List[list]",
                    "List[int]",
                    "Optional[List[str]]",
                    "Dict[int, str]",
                    "Union[int, str]",
                    "List[List[Any]]"
                ]
            }
        },
        "__integer_xaxis": {
            "name": "__integer_xaxis",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "ax": [
                    "int",
                    "float",
                    "dict",
                    "str"
                ],
                "x0": [
                    "float",
                    "bool",
                    "Iterable[float]"
                ],
                "n": [
                    "float",
                    "bool",
                    "Iterable[float]"
                ]
            }
        },
        "__pause_for_crude_animation": {
            "name": "__pause_for_crude_animation",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/keanu/plots/__init__.py": {},
    "keanu-master/keanu-python/keanu/stubs/numpy/__init__.py": {
        "packbits": {
            "name": "packbits",
            "location": 16,
            "return": [],
            "arguments": {
                "array": []
            }
        },
        "arange": {
            "name": "arange",
            "location": 446,
            "return": [],
            "arguments": {
                "start": [],
                "stop": [],
                "step": [],
                "dtype": []
            }
        },
        "array": {
            "name": "array",
            "location": 447,
            "return": [],
            "arguments": {
                "object": [],
                "dtype": [],
                "copy": [],
                "order": [],
                "subok": [],
                "ndmin": []
            }
        },
        "asarray": {
            "name": "asarray",
            "location": 450,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": []
            }
        },
        "asanyarray": {
            "name": "asanyarray",
            "location": 451,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": []
            }
        },
        "asmatrix": {
            "name": "asmatrix",
            "location": 452,
            "return": [],
            "arguments": {
                "data": [],
                "dtype": []
            }
        },
        "ascontiguousarray": {
            "name": "ascontiguousarray",
            "location": 453,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": []
            }
        },
        "copy": {
            "name": "copy",
            "location": 454,
            "return": [],
            "arguments": {
                "a": [],
                "order": []
            }
        },
        "empty": {
            "name": "empty",
            "location": 455,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "order": []
            }
        },
        "empty_like": {
            "name": "empty_like",
            "location": 456,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": [],
                "subok": []
            }
        },
        "eye": {
            "name": "eye",
            "location": 457,
            "return": [],
            "arguments": {
                "N": [],
                "M": [],
                "k": [],
                "dtype": []
            }
        },
        "frombuffer": {
            "name": "frombuffer",
            "location": 458,
            "return": [],
            "arguments": {
                "buffer": [],
                "dtype": [],
                "count": [],
                "offset": []
            }
        },
        "fromfile": {
            "name": "fromfile",
            "location": 460,
            "return": [],
            "arguments": {
                "file": [],
                "dtype": [],
                "count": [],
                "sep": []
            }
        },
        "full": {
            "name": "full",
            "location": 461,
            "return": [],
            "arguments": {
                "shape": [],
                "fill_value": [],
                "dtype": [],
                "order": []
            }
        },
        "full_like": {
            "name": "full_like",
            "location": 463,
            "return": [],
            "arguments": {
                "a": [],
                "fill_value": [],
                "dtype": [],
                "order": [],
                "subok": []
            }
        },
        "fromfunction": {
            "name": "fromfunction",
            "location": 465,
            "return": [],
            "arguments": {
                "function": [],
                "shape": [],
                "dtype": []
            }
        },
        "fromiter": {
            "name": "fromiter",
            "location": 466,
            "return": [],
            "arguments": {
                "iterable": [],
                "dytpe": [],
                "count": []
            }
        },
        "fromstring": {
            "name": "fromstring",
            "location": 467,
            "return": [],
            "arguments": {
                "string": [],
                "dtype": [],
                "count": [],
                "sep": []
            }
        },
        "identity": {
            "name": "identity",
            "location": 468,
            "return": [],
            "arguments": {
                "n": [],
                "dtype": []
            }
        },
        "loadtxt": {
            "name": "loadtxt",
            "location": 469,
            "return": [],
            "arguments": {
                "fname": [],
                "dtype": [],
                "comments": [],
                "delimiter": [],
                "converters": [],
                "skiprows": [],
                "usecols": [],
                "unpack": [],
                "ndmin": []
            }
        },
        "ones": {
            "name": "ones",
            "location": 473,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "order": []
            }
        },
        "ones_like": {
            "name": "ones_like",
            "location": 474,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": [],
                "subok": []
            }
        },
        "ndenumerate": {
            "name": "ndenumerate",
            "location": 475,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "zeros": {
            "name": "zeros",
            "location": 476,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "order": []
            }
        },
        "zeros_like": {
            "name": "zeros_like",
            "location": 477,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": [],
                "subok": []
            }
        },
        "average": {
            "name": "average",
            "location": 483,
            "return": [],
            "arguments": {
                "a": [],
                "axis": [],
                "weights": [],
                "returned": []
            }
        },
        "array_equal": {
            "name": "array_equal",
            "location": 484,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "allclose": {
            "name": "allclose",
            "location": 485,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "rtol": [],
                "atol": [],
                "equal_nan": []
            }
        },
        "concatenate": {
            "name": "concatenate",
            "location": 486,
            "return": [],
            "arguments": {
                "a_tuple": [],
                "axis": [],
                "out": []
            }
        },
        "argmax": {
            "name": "argmax",
            "location": 487,
            "return": [],
            "arguments": {
                "a": [],
                "axis": [],
                "out": []
            }
        },
        "bincount": {
            "name": "bincount",
            "location": 488,
            "return": [],
            "arguments": {
                "x": [],
                "weights": [],
                "minlength": []
            }
        },
        "logical_not": {
            "name": "logical_not",
            "location": 489,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "all": {
            "name": "all",
            "location": 490,
            "return": [],
            "arguments": {
                "a": [],
                "axis": [],
                "out": [],
                "keepdims": []
            }
        },
        "invert": {
            "name": "invert",
            "location": 491,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "issubdtype": {
            "name": "issubdtype",
            "location": 492,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "hstack": {
            "name": "hstack",
            "location": 493,
            "return": [],
            "arguments": {
                "tup": []
            }
        },
        "stack": {
            "name": "stack",
            "location": 494,
            "return": [],
            "arguments": {
                "arrays": [],
                "axis": [],
                "out": []
            }
        },
        "atleast_1d": {
            "name": "atleast_1d",
            "location": 495,
            "return": [],
            "arguments": {}
        },
        "floor": {
            "name": "floor",
            "location": 496,
            "return": [],
            "arguments": {
                "x": [],
                "out": []
            }
        },
        "log10": {
            "name": "log10",
            "location": 497,
            "return": [],
            "arguments": {
                "x": [],
                "out": []
            }
        },
        "flagsobj.__getitem__": {
            "name": "__getitem__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "flagsobj.__setitem__": {
            "name": "__setitem__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "value": []
            }
        },
        "flatiter.copy": {
            "name": "copy",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.all": {
            "name": "all",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.any": {
            "name": "any",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.argmax": {
            "name": "argmax",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.argmin": {
            "name": "argmin",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.argpartition": {
            "name": "argpartition",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "kth": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "_ArrayLike.argsort": {
            "name": "argsort",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "_ArrayLike.astype": {
            "name": "astype",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "order": [],
                "casting": [],
                "subok": [],
                "copy": []
            }
        },
        "_ArrayLike.byteswap": {
            "name": "byteswap",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "inplace": []
            }
        },
        "_ArrayLike.choose": {
            "name": "choose",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "choices": [],
                "out": [],
                "mode": []
            }
        },
        "_ArrayLike.clip": {
            "name": "clip",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "a_min": [],
                "a_max": [],
                "out": []
            }
        },
        "_ArrayLike.compress": {
            "name": "compress",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.conj": {
            "name": "conj",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.conjugate": {
            "name": "conjugate",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.copy": {
            "name": "copy",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.cumprod": {
            "name": "cumprod",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": []
            }
        },
        "_ArrayLike.cumsum": {
            "name": "cumsum",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": []
            }
        },
        "_ArrayLike.diagonal": {
            "name": "diagonal",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "axis1": [],
                "axis2": []
            }
        },
        "_ArrayLike.dot": {
            "name": "dot",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "b": [],
                "out": []
            }
        },
        "_ArrayLike.dump": {
            "name": "dump",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "_ArrayLike.dumps": {
            "name": "dumps",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.fill": {
            "name": "fill",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.flatten": {
            "name": "flatten",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.getfield": {
            "name": "getfield",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "offset": []
            }
        },
        "_ArrayLike.item": {
            "name": "item",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "_ArrayLike.itemset": {
            "name": "itemset",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "arg0": [],
                "arg1": []
            }
        },
        "_ArrayLike.max": {
            "name": "max",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.mean": {
            "name": "mean",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.min": {
            "name": "min",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.newbyteorder": {
            "name": "newbyteorder",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "new_order": []
            }
        },
        "_ArrayLike.nonzero": {
            "name": "nonzero",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.partition": {
            "name": "partition",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "kth": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "_ArrayLike.prod": {
            "name": "prod",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.ptp": {
            "name": "ptp",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "out": []
            }
        },
        "_ArrayLike.put": {
            "name": "put",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "ind": [],
                "v": [],
                "mode": []
            }
        },
        "_ArrayLike.ravel": {
            "name": "ravel",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.repeat": {
            "name": "repeat",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "repeats": [],
                "axis": []
            }
        },
        "_ArrayLike.reshape": {
            "name": "reshape",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "newshape": [],
                "order": []
            }
        },
        "_ArrayLike.resize": {
            "name": "resize",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "new_shape": [],
                "refcheck": []
            }
        },
        "_ArrayLike.round": {
            "name": "round",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "decimals": [],
                "out": []
            }
        },
        "_ArrayLike.searchsorted": {
            "name": "searchsorted",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "side": [],
                "sorter": []
            }
        },
        "_ArrayLike.setfield": {
            "name": "setfield",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "dtype": [],
                "offset": []
            }
        },
        "_ArrayLike.setflags": {
            "name": "setflags",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "write": [],
                "align": [],
                "uic": []
            }
        },
        "_ArrayLike.sort": {
            "name": "sort",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "_ArrayLike.squeeze": {
            "name": "squeeze",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "_ArrayLike.std": {
            "name": "std",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "ddof": [],
                "keepdims": []
            }
        },
        "_ArrayLike.sum": {
            "name": "sum",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "keepdims": []
            }
        },
        "_ArrayLike.swapaxes": {
            "name": "swapaxes",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "axis1": [],
                "axis2": []
            }
        },
        "_ArrayLike.take": {
            "name": "take",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "indices": [],
                "axis": [],
                "out": [],
                "mode": []
            }
        },
        "_ArrayLike.tobytes": {
            "name": "tobytes",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.tofile": {
            "name": "tofile",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "fid": [],
                "sep": [],
                "format": []
            }
        },
        "_ArrayLike.tolist": {
            "name": "tolist",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.tostring": {
            "name": "tostring",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayLike.trace": {
            "name": "trace",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "axis1": [],
                "axis2": [],
                "dtype": [],
                "out": []
            }
        },
        "_ArrayLike.transpose": {
            "name": "transpose",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "axes": []
            }
        },
        "_ArrayLike.var": {
            "name": "var",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dtype": [],
                "out": [],
                "ddof": [],
                "keepdims": []
            }
        },
        "_ArrayLike.view": {
            "name": "view",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "type": []
            }
        },
        "_ArrayLike.__abs__": {
            "name": "__abs__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__add__": {
            "name": "__add__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__and__": {
            "name": "__and__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__array__": {
            "name": "__array__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "_ArrayLike.__array_prepare__": {
            "name": "__array_prepare__",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "_ArrayLike.__array_wrap__": {
            "name": "__array_wrap__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "_ArrayLike.__bool__": {
            "name": "__bool__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__complex__": {
            "name": "__complex__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__contains__": {
            "name": "__contains__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_ArrayLike.__copy__": {
            "name": "__copy__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__delattr__": {
            "name": "__delattr__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_ArrayLike.__delitem__": {
            "name": "__delitem__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_ArrayLike.__dir__": {
            "name": "__dir__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__divmod__": {
            "name": "__divmod__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__eq__": {
            "name": "__eq__",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__float__": {
            "name": "__float__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__floordiv__": {
            "name": "__floordiv__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ge__": {
            "name": "__ge__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__getattribute__": {
            "name": "__getattribute__",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_ArrayLike.__getitem__": {
            "name": "__getitem__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_ArrayLike.__gt__": {
            "name": "__gt__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__iadd__": {
            "name": "__iadd__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__iand__": {
            "name": "__iand__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ilshift__": {
            "name": "__ilshift__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__imatmul__": {
            "name": "__imatmul__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__imod__": {
            "name": "__imod__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__imul__": {
            "name": "__imul__",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__index__": {
            "name": "__index__",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__int__": {
            "name": "__int__",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__invert__": {
            "name": "__invert__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__ior__": {
            "name": "__ior__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ipow__": {
            "name": "__ipow__",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__irshift__": {
            "name": "__irshift__",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__isub__": {
            "name": "__isub__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__iter__": {
            "name": "__iter__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__itruediv__": {
            "name": "__itruediv__",
            "location": 310,
            "return": [],
            "arguments": {
                "sel": [],
                "value": []
            }
        },
        "_ArrayLike.__ixor__": {
            "name": "__ixor__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__le__": {
            "name": "__le__",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__len__": {
            "name": "__len__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__lshift__": {
            "name": "__lshift__",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__lt__": {
            "name": "__lt__",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__matmul__": {
            "name": "__matmul__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__mod__": {
            "name": "__mod__",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__mul__": {
            "name": "__mul__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ne__": {
            "name": "__ne__",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__neg__": {
            "name": "__neg__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__or__": {
            "name": "__or__",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__pos__": {
            "name": "__pos__",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__pow__": {
            "name": "__pow__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__radd__": {
            "name": "__radd__",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rand__": {
            "name": "__rand__",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rdivmod__": {
            "name": "__rdivmod__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rlshift__": {
            "name": "__rlshift__",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rmod__": {
            "name": "__rmod__",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rmul__": {
            "name": "__rmul__",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__ror__": {
            "name": "__ror__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rpow__": {
            "name": "__rpow__",
            "location": 356,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rrshift__": {
            "name": "__rrshift__",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rshift__": {
            "name": "__rshift__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rsub__": {
            "name": "__rsub__",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__rxor__": {
            "name": "__rxor__",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__setattr__": {
            "name": "__setattr__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "_ArrayLike.__setitem__": {
            "name": "__setitem__",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "_ArrayLike.__str__": {
            "name": "__str__",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLike.__sub__": {
            "name": "__sub__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ArrayLike.__truediv__": {
            "name": "__truediv__",
            "location": 376,
            "return": [],
            "arguments": {
                "sel": [],
                "value": []
            }
        },
        "_ArrayLike.__xor__": {
            "name": "__xor__",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "dtype": [],
                "buffer": [],
                "offset": [],
                "strides": [],
                "order": []
            }
        },
        "testing.assert_almost_equal": {
            "name": "assert_almost_equal",
            "location": 506,
            "return": [],
            "arguments": {
                "actual": [],
                "desired": [],
                "decimal": [],
                "err_msg": [],
                "verbose": []
            }
        },
        "testing.assert_array_equal": {
            "name": "assert_array_equal",
            "location": 508,
            "return": [],
            "arguments": {
                "actual": [],
                "desired": [],
                "decimal": [],
                "err_msg": [],
                "verbose": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/__init__.py": {},
    "keanu-master/keanu-python/keanu/stubs/pandas/core/base.py": {
        "StringMixin.__unicode__": {
            "name": "__unicode__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMixin.__bytes__": {
            "name": "__bytes__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasObject.__unicode__": {
            "name": "__unicode__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasObject.__sizeof__": {
            "name": "__sizeof__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoNewAttributesMixin.__setattr__": {
            "name": "__setattr__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "SelectionMixin.ndim": {
            "name": "ndim",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectionMixin.__getitem__": {
            "name": "__getitem__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SelectionMixin.aggregate": {
            "name": "aggregate",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "IndexOpsMixin.transpose": {
            "name": "transpose",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.shape": {
            "name": "shape",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.ndim": {
            "name": "ndim",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.item": {
            "name": "item",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.data": {
            "name": "data",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.itemsize": {
            "name": "itemsize",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.nbytes": {
            "name": "nbytes",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.strides": {
            "name": "strides",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.size": {
            "name": "size",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.flags": {
            "name": "flags",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.base": {
            "name": "base",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.empty": {
            "name": "empty",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.max": {
            "name": "max",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.argmax": {
            "name": "argmax",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "IndexOpsMixin.min": {
            "name": "min",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.argmin": {
            "name": "argmin",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "IndexOpsMixin.tolist": {
            "name": "tolist",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.__iter__": {
            "name": "__iter__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.hasnans": {
            "name": "hasnans",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.value_counts": {
            "name": "value_counts",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "normalize": [],
                "sort": [],
                "ascending": [],
                "bins": [],
                "dropna": []
            }
        },
        "IndexOpsMixin.unique": {
            "name": "unique",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.nunique": {
            "name": "nunique",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "dropna": []
            }
        },
        "IndexOpsMixin.is_unique": {
            "name": "is_unique",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.is_monotonic": {
            "name": "is_monotonic",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.is_monotonic_decreasing": {
            "name": "is_monotonic_decreasing",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.memory_usage": {
            "name": "memory_usage",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "deep": []
            }
        },
        "IndexOpsMixin.factorize": {
            "name": "factorize",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "sort": [],
                "na_sentinel": []
            }
        },
        "IndexOpsMixin.searchsorted": {
            "name": "searchsorted",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "side": [],
                "sorter": []
            }
        },
        "IndexOpsMixin.drop_duplicates": {
            "name": "drop_duplicates",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "keep": [],
                "inplace": []
            }
        },
        "IndexOpsMixin.duplicated": {
            "name": "duplicated",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "keep": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/core/frame.py": {
        "extract_index": {
            "name": "extract_index",
            "location": 115,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "DataFrame.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "index": [],
                "columns": [],
                "dtype": [],
                "copy": []
            }
        },
        "DataFrame.axes": {
            "name": "axes",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.shape": {
            "name": "shape",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.__unicode__": {
            "name": "__unicode__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.style": {
            "name": "style",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.iteritems": {
            "name": "iteritems",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.iterrows": {
            "name": "iterrows",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.itertuples": {
            "name": "itertuples",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "name": []
            }
        },
        "DataFrame.__len__": {
            "name": "__len__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.dot": {
            "name": "dot",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__matmul__": {
            "name": "__matmul__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.from_dict": {
            "name": "from_dict",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "data": [],
                "orient": [],
                "dtype": [],
                "columns": []
            }
        },
        "DataFrame.to_dict": {
            "name": "to_dict",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "orient": [],
                "into": []
            }
        },
        "DataFrame.to_gbq": {
            "name": "to_gbq",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "destination_table": [],
                "project_id": [],
                "chunksize": [],
                "reauth": [],
                "if_exists": [],
                "private_key": [],
                "auth_local_webserver": [],
                "table_schema": [],
                "location": [],
                "progress_bar": [],
                "verbose": []
            }
        },
        "DataFrame.from_records": {
            "name": "from_records",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "data": [],
                "index": [],
                "exclude": [],
                "columns": [],
                "coerce_float": [],
                "nrows": []
            }
        },
        "DataFrame.to_records": {
            "name": "to_records",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "convert_datetime64": []
            }
        },
        "DataFrame.from_items": {
            "name": "from_items",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "items": [],
                "columns": [],
                "orient": []
            }
        },
        "DataFrame.from_csv": {
            "name": "from_csv",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "header": [],
                "sep": [],
                "index_col": [],
                "parse_dates": [],
                "encoding": [],
                "tupleize_cols": [],
                "infer_datetime_format": []
            }
        },
        "DataFrame.to_sparse": {
            "name": "to_sparse",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "fill_value": [],
                "kind": []
            }
        },
        "DataFrame.to_panel": {
            "name": "to_panel",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.to_excel": {
            "name": "to_excel",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "excel_writer": [],
                "sheet_name": [],
                "na_rep": [],
                "float_format": [],
                "columns": [],
                "header": [],
                "index": [],
                "index_label": [],
                "startrow": [],
                "startcol": [],
                "engine": [],
                "merge_cells": [],
                "encoding": [],
                "inf_rep": [],
                "verbose": [],
                "freeze_panes": []
            }
        },
        "DataFrame.to_stata": {
            "name": "to_stata",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "convert_dates": [],
                "write_index": [],
                "encoding": [],
                "byteorder": [],
                "time_stamp": [],
                "data_label": [],
                "variable_labels": [],
                "version": [],
                "convert_strl": []
            }
        },
        "DataFrame.to_feather": {
            "name": "to_feather",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "DataFrame.to_parquet": {
            "name": "to_parquet",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "engine": [],
                "compression": [],
                "index": []
            }
        },
        "DataFrame.to_string": {
            "name": "to_string",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "columns": [],
                "col_space": [],
                "header": [],
                "index": [],
                "na_rep": [],
                "formatters": [],
                "float_format": [],
                "sparsify": [],
                "index_names": [],
                "justify": [],
                "line_width": [],
                "max_rows": [],
                "max_cols": [],
                "show_dimensions": []
            }
        },
        "DataFrame.to_html": {
            "name": "to_html",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "columns": [],
                "col_space": [],
                "header": [],
                "index": [],
                "na_rep": [],
                "formatters": [],
                "float_format": [],
                "sparsify": [],
                "index_names": [],
                "justify": [],
                "bold_rows": [],
                "classes": [],
                "escape": [],
                "max_rows": [],
                "max_cols": [],
                "show_dimensions": [],
                "notebook": [],
                "decimal": [],
                "border": [],
                "table_id": []
            }
        },
        "DataFrame.info": {
            "name": "info",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "verbose": [],
                "buf": [],
                "max_cols": [],
                "memory_usage": [],
                "null_counts": []
            }
        },
        "DataFrame.memory_usage": {
            "name": "memory_usage",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "deep": []
            }
        },
        "DataFrame.transpose": {
            "name": "transpose",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.get_value": {
            "name": "get_value",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "col": [],
                "takeable": []
            }
        },
        "DataFrame.set_value": {
            "name": "set_value",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "col": [],
                "value": [],
                "takeable": []
            }
        },
        "DataFrame.__getitem__": {
            "name": "__getitem__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DataFrame.query": {
            "name": "query",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [],
                "inplace": []
            }
        },
        "DataFrame.eval": {
            "name": "eval",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [],
                "inplace": []
            }
        },
        "DataFrame.select_dtypes": {
            "name": "select_dtypes",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "include": [],
                "exclude": []
            }
        },
        "DataFrame.__setitem__": {
            "name": "__setitem__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "DataFrame.insert": {
            "name": "insert",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "loc": [],
                "column": [],
                "value": [],
                "allow_duplicates": []
            }
        },
        "DataFrame.assign": {
            "name": "assign",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.lookup": {
            "name": "lookup",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "row_labels": [],
                "col_labels": []
            }
        },
        "DataFrame.align": {
            "name": "align",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "join": [],
                "axis": [],
                "level": [],
                "copy": [],
                "fill_value": [],
                "method": [],
                "limit": [],
                "fill_axis": [],
                "broadcast_axis": []
            }
        },
        "DataFrame.reindex": {
            "name": "reindex",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.reindex_axis": {
            "name": "reindex_axis",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "axis": [],
                "method": [],
                "level": [],
                "copy": [],
                "limit": [],
                "fill_value": []
            }
        },
        "DataFrame.drop": {
            "name": "drop",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "axis": [],
                "index": [],
                "columns": [],
                "level": [],
                "inplace": [],
                "errors": []
            }
        },
        "DataFrame.rename": {
            "name": "rename",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.fillna": {
            "name": "fillna",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "method": [],
                "axis": [],
                "inplace": [],
                "limit": [],
                "downcast": []
            }
        },
        "DataFrame.replace": {
            "name": "replace",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "to_replace": [],
                "value": [],
                "inplace": [],
                "limit": [],
                "regex": [],
                "method": []
            }
        },
        "DataFrame.shift": {
            "name": "shift",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "freq": [],
                "axis": []
            }
        },
        "DataFrame.set_index": {
            "name": "set_index",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [],
                "drop": [],
                "append": [],
                "inplace": [],
                "verify_integrity": []
            }
        },
        "DataFrame.reset_index": {
            "name": "reset_index",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "drop": [],
                "inplace": [],
                "col_level": [],
                "col_fill": []
            }
        },
        "DataFrame.isna": {
            "name": "isna",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.isnull": {
            "name": "isnull",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.notna": {
            "name": "notna",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.notnull": {
            "name": "notnull",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.dropna": {
            "name": "dropna",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "how": [],
                "thresh": [],
                "subset": [],
                "inplace": []
            }
        },
        "DataFrame.drop_duplicates": {
            "name": "drop_duplicates",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "subset": [],
                "keep": [],
                "inplace": []
            }
        },
        "DataFrame.duplicated": {
            "name": "duplicated",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "subset": [],
                "keep": []
            }
        },
        "DataFrame.sort_values": {
            "name": "sort_values",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "by": [],
                "axis": [],
                "ascending": [],
                "inplace": [],
                "kind": [],
                "na_position": []
            }
        },
        "DataFrame.sort_index": {
            "name": "sort_index",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "level": [],
                "ascending": [],
                "inplace": [],
                "kind": [],
                "na_position": [],
                "sort_remaining": [],
                "by": []
            }
        },
        "DataFrame.nlargest": {
            "name": "nlargest",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "columns": [],
                "keep": []
            }
        },
        "DataFrame.nsmallest": {
            "name": "nsmallest",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "columns": [],
                "keep": []
            }
        },
        "DataFrame.swaplevel": {
            "name": "swaplevel",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": [],
                "axis": []
            }
        },
        "DataFrame.reorder_levels": {
            "name": "reorder_levels",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "order": [],
                "axis": []
            }
        },
        "DataFrame.combine": {
            "name": "combine",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "func": [],
                "fill_value": [],
                "overwrite": []
            }
        },
        "DataFrame.combine_first": {
            "name": "combine_first",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.update": {
            "name": "update",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "join": [],
                "overwrite": [],
                "filter_func": [],
                "raise_conflict": []
            }
        },
        "DataFrame.pivot": {
            "name": "pivot",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "columns": [],
                "values": []
            }
        },
        "DataFrame.pivot_table": {
            "name": "pivot_table",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "index": [],
                "columns": [],
                "aggfunc": [],
                "fill_value": [],
                "margins": [],
                "dropna": [],
                "margins_name": []
            }
        },
        "DataFrame.stack": {
            "name": "stack",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "dropna": []
            }
        },
        "DataFrame.unstack": {
            "name": "unstack",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "fill_value": []
            }
        },
        "DataFrame.melt": {
            "name": "melt",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "id_vars": [],
                "value_vars": [],
                "var_name": [],
                "value_name": [],
                "col_level": []
            }
        },
        "DataFrame.diff": {
            "name": "diff",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "axis": []
            }
        },
        "DataFrame.aggregate": {
            "name": "aggregate",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "axis": []
            }
        },
        "DataFrame.transform": {
            "name": "transform",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "axis": []
            }
        },
        "DataFrame.apply": {
            "name": "apply",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "axis": [],
                "broadcast": [],
                "raw": [],
                "reduce": [],
                "result_type": [],
                "args": []
            }
        },
        "DataFrame.applymap": {
            "name": "applymap",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "DataFrame.append": {
            "name": "append",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "ignore_index": [],
                "verify_integrity": [],
                "sort": []
            }
        },
        "DataFrame.join": {
            "name": "join",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "on": [],
                "how": [],
                "lsuffix": [],
                "rsuffix": [],
                "sort": []
            }
        },
        "DataFrame.merge": {
            "name": "merge",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "right": [],
                "how": [],
                "on": [],
                "left_on": [],
                "right_on": [],
                "left_index": [],
                "right_index": [],
                "sort": [],
                "suffixes": [],
                "copy": [],
                "indicator": [],
                "validate": []
            }
        },
        "DataFrame.round": {
            "name": "round",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "decimals": []
            }
        },
        "DataFrame.corr": {
            "name": "corr",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "min_periods": []
            }
        },
        "DataFrame.cov": {
            "name": "cov",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "min_periods": []
            }
        },
        "DataFrame.corrwith": {
            "name": "corrwith",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "axis": [],
                "drop": []
            }
        },
        "DataFrame.count": {
            "name": "count",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "level": [],
                "numeric_only": []
            }
        },
        "DataFrame.nunique": {
            "name": "nunique",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dropna": []
            }
        },
        "DataFrame.idxmin": {
            "name": "idxmin",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "skipna": []
            }
        },
        "DataFrame.idxmax": {
            "name": "idxmax",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "skipna": []
            }
        },
        "DataFrame.mode": {
            "name": "mode",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "numeric_only": [],
                "dropna": []
            }
        },
        "DataFrame.quantile": {
            "name": "quantile",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "axis": [],
                "numeric_only": [],
                "interpolation": []
            }
        },
        "DataFrame.to_timestamp": {
            "name": "to_timestamp",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "freq": [],
                "how": [],
                "axis": [],
                "copy": []
            }
        },
        "DataFrame.to_period": {
            "name": "to_period",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "freq": [],
                "axis": [],
                "copy": []
            }
        },
        "DataFrame.isin": {
            "name": "isin",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/core/generic.py": {
        "NDFrame.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "axes": [],
                "copy": [],
                "dtype": [],
                "fastpath": []
            }
        },
        "NDFrame.is_copy": {
            "name": "is_copy",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "NDFrame.__unicode__": {
            "name": "__unicode__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.shape": {
            "name": "shape",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.axes": {
            "name": "axes",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.ndim": {
            "name": "ndim",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.size": {
            "name": "size",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.set_axis": {
            "name": "set_axis",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "axis": [],
                "inplace": []
            }
        },
        "NDFrame.transpose": {
            "name": "transpose",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.swapaxes": {
            "name": "swapaxes",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "axis1": [],
                "axis2": [],
                "copy": []
            }
        },
        "NDFrame.droplevel": {
            "name": "droplevel",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "axis": []
            }
        },
        "NDFrame.pop": {
            "name": "pop",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "NDFrame.squeeze": {
            "name": "squeeze",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "NDFrame.swaplevel": {
            "name": "swaplevel",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": [],
                "axis": []
            }
        },
        "NDFrame.rename": {
            "name": "rename",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.rename_axis": {
            "name": "rename_axis",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "NDFrame.__neg__": {
            "name": "__neg__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.__pos__": {
            "name": "__pos__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.__invert__": {
            "name": "__invert__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.equals": {
            "name": "equals",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NDFrame.__hash__": {
            "name": "__hash__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.keys": {
            "name": "keys",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.iteritems": {
            "name": "iteritems",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.__len__": {
            "name": "__len__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.__contains__": {
            "name": "__contains__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NDFrame.empty": {
            "name": "empty",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.__nonzero__": {
            "name": "__nonzero__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.bool": {
            "name": "bool",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.__abs__": {
            "name": "__abs__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.__round__": {
            "name": "__round__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "decimals": []
            }
        },
        "NDFrame.__array__": {
            "name": "__array__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "NDFrame.__array_wrap__": {
            "name": "__array_wrap__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "context": []
            }
        },
        "NDFrame.to_dense": {
            "name": "to_dense",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.to_json": {
            "name": "to_json",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "path_or_buf": [],
                "orient": [],
                "date_format": [],
                "double_precision": [],
                "force_ascii": [],
                "date_unit": [],
                "default_handler": [],
                "lines": [],
                "compression": [],
                "index": []
            }
        },
        "NDFrame.to_hdf": {
            "name": "to_hdf",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "path_or_buf": [],
                "key": []
            }
        },
        "NDFrame.to_msgpack": {
            "name": "to_msgpack",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "path_or_buf": [],
                "encoding": []
            }
        },
        "NDFrame.to_sql": {
            "name": "to_sql",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "con": [],
                "schema": [],
                "if_exists": [],
                "index": [],
                "index_label": [],
                "chunksize": [],
                "dtype": []
            }
        },
        "NDFrame.to_pickle": {
            "name": "to_pickle",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "compression": [],
                "protocol": []
            }
        },
        "NDFrame.to_clipboard": {
            "name": "to_clipboard",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "excel": [],
                "sep": []
            }
        },
        "NDFrame.to_xarray": {
            "name": "to_xarray",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.to_latex": {
            "name": "to_latex",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "columns": [],
                "col_space": [],
                "header": [],
                "index": [],
                "na_rep": [],
                "formatters": [],
                "float_format": [],
                "sparsify": [],
                "index_names": [],
                "bold_rows": [],
                "column_format": [],
                "longtable": [],
                "escape": [],
                "encoding": [],
                "decimal": [],
                "multicolumn": [],
                "multicolumn_format": [],
                "multirow": []
            }
        },
        "NDFrame.get": {
            "name": "get",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "NDFrame.__getitem__": {
            "name": "__getitem__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "NDFrame.__delitem__": {
            "name": "__delitem__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NDFrame.take": {
            "name": "take",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "indices": [],
                "axis": [],
                "convert": [],
                "is_copy": []
            }
        },
        "NDFrame.xs": {
            "name": "xs",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "axis": [],
                "level": [],
                "drop_level": []
            }
        },
        "NDFrame.select": {
            "name": "select",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "crit": [],
                "axis": []
            }
        },
        "NDFrame.reindex_like": {
            "name": "reindex_like",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "method": [],
                "copy": [],
                "limit": [],
                "tolerance": []
            }
        },
        "NDFrame.drop": {
            "name": "drop",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "axis": [],
                "index": [],
                "columns": [],
                "level": [],
                "inplace": [],
                "errors": []
            }
        },
        "NDFrame.add_prefix": {
            "name": "add_prefix",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "NDFrame.add_suffix": {
            "name": "add_suffix",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": []
            }
        },
        "NDFrame.sort_values": {
            "name": "sort_values",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "by": [],
                "axis": [],
                "ascending": [],
                "inplace": [],
                "kind": [],
                "na_position": []
            }
        },
        "NDFrame.sort_index": {
            "name": "sort_index",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "level": [],
                "ascending": [],
                "inplace": [],
                "kind": [],
                "na_position": [],
                "sort_remaining": []
            }
        },
        "NDFrame.reindex": {
            "name": "reindex",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.reindex_axis": {
            "name": "reindex_axis",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "axis": [],
                "method": [],
                "level": [],
                "copy": [],
                "limit": [],
                "fill_value": []
            }
        },
        "NDFrame.filter": {
            "name": "filter",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "items": [],
                "like": [],
                "regex": [],
                "axis": []
            }
        },
        "NDFrame.head": {
            "name": "head",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "NDFrame.tail": {
            "name": "tail",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "NDFrame.sample": {
            "name": "sample",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "frac": [],
                "replace": [],
                "weights": [],
                "random_state": [],
                "axis": []
            }
        },
        "NDFrame.pipe": {
            "name": "pipe",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "NDFrame.__finalize__": {
            "name": "__finalize__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "method": []
            }
        },
        "NDFrame.__getattr__": {
            "name": "__getattr__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "NDFrame.__setattr__": {
            "name": "__setattr__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "NDFrame.as_matrix": {
            "name": "as_matrix",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "NDFrame.values": {
            "name": "values",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.get_values": {
            "name": "get_values",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.get_dtype_counts": {
            "name": "get_dtype_counts",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.get_ftype_counts": {
            "name": "get_ftype_counts",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.dtypes": {
            "name": "dtypes",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.ftypes": {
            "name": "ftypes",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.as_blocks": {
            "name": "as_blocks",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "copy": []
            }
        },
        "NDFrame.blocks": {
            "name": "blocks",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.astype": {
            "name": "astype",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "copy": [],
                "errors": []
            }
        },
        "NDFrame.copy": {
            "name": "copy",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "deep": []
            }
        },
        "NDFrame.__copy__": {
            "name": "__copy__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "deep": []
            }
        },
        "NDFrame.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "memo": []
            }
        },
        "NDFrame.convert_objects": {
            "name": "convert_objects",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "convert_dates": [],
                "convert_numeric": [],
                "convert_timedeltas": [],
                "copy": []
            }
        },
        "NDFrame.infer_objects": {
            "name": "infer_objects",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.fillna": {
            "name": "fillna",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "method": [],
                "axis": [],
                "inplace": [],
                "limit": [],
                "downcast": []
            }
        },
        "NDFrame.ffill": {
            "name": "ffill",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "inplace": [],
                "limit": [],
                "downcast": []
            }
        },
        "NDFrame.bfill": {
            "name": "bfill",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "inplace": [],
                "limit": [],
                "downcast": []
            }
        },
        "NDFrame.replace": {
            "name": "replace",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "to_replace": [],
                "value": [],
                "inplace": [],
                "limit": [],
                "regex": [],
                "method": []
            }
        },
        "NDFrame.interpolate": {
            "name": "interpolate",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "axis": [],
                "limit": [],
                "inplace": [],
                "limit_direction": [],
                "limit_area": [],
                "downcast": []
            }
        },
        "NDFrame.asof": {
            "name": "asof",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "where": [],
                "subset": []
            }
        },
        "NDFrame.isna": {
            "name": "isna",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.isnull": {
            "name": "isnull",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.notna": {
            "name": "notna",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.notnull": {
            "name": "notnull",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.clip": {
            "name": "clip",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": [],
                "axis": [],
                "inplace": []
            }
        },
        "NDFrame.clip_upper": {
            "name": "clip_upper",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "threshold": [],
                "axis": [],
                "inplace": []
            }
        },
        "NDFrame.clip_lower": {
            "name": "clip_lower",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "threshold": [],
                "axis": [],
                "inplace": []
            }
        },
        "NDFrame.groupby": {
            "name": "groupby",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "by": [],
                "axis": [],
                "level": [],
                "as_index": [],
                "sort": [],
                "group_keys": [],
                "squeeze": [],
                "observed": []
            }
        },
        "NDFrame.asfreq": {
            "name": "asfreq",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "freq": [],
                "method": [],
                "how": [],
                "normalize": [],
                "fill_value": []
            }
        },
        "NDFrame.at_time": {
            "name": "at_time",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "time": [],
                "asof": []
            }
        },
        "NDFrame.between_time": {
            "name": "between_time",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "start_time": [],
                "end_time": [],
                "include_start": [],
                "include_end": []
            }
        },
        "NDFrame.resample": {
            "name": "resample",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "rule": [],
                "how": [],
                "axis": [],
                "fill_method": [],
                "closed": [],
                "label": [],
                "convention": [],
                "kind": [],
                "loffset": [],
                "limit": [],
                "base": [],
                "on": [],
                "level": []
            }
        },
        "NDFrame.first": {
            "name": "first",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "NDFrame.last": {
            "name": "last",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "NDFrame.rank": {
            "name": "rank",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "method": [],
                "numeric_only": [],
                "na_option": [],
                "ascending": [],
                "pct": []
            }
        },
        "NDFrame.align": {
            "name": "align",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "join": [],
                "axis": [],
                "level": [],
                "copy": [],
                "fill_value": [],
                "method": [],
                "limit": [],
                "fill_axis": [],
                "broadcast_axis": []
            }
        },
        "NDFrame.where": {
            "name": "where",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "cond": [],
                "other": [],
                "inplace": [],
                "axis": [],
                "level": [],
                "errors": [],
                "try_cast": [],
                "raise_on_error": []
            }
        },
        "NDFrame.mask": {
            "name": "mask",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "cond": [],
                "other": [],
                "inplace": [],
                "axis": [],
                "level": [],
                "errors": [],
                "try_cast": [],
                "raise_on_error": []
            }
        },
        "NDFrame.shift": {
            "name": "shift",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "freq": [],
                "axis": []
            }
        },
        "NDFrame.slice_shift": {
            "name": "slice_shift",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "axis": []
            }
        },
        "NDFrame.tshift": {
            "name": "tshift",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "freq": [],
                "axis": []
            }
        },
        "NDFrame.truncate": {
            "name": "truncate",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "before": [],
                "after": [],
                "axis": [],
                "copy": []
            }
        },
        "NDFrame.tz_convert": {
            "name": "tz_convert",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "tz": [],
                "axis": [],
                "level": [],
                "copy": []
            }
        },
        "NDFrame.tz_localize": {
            "name": "tz_localize",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "tz": [],
                "axis": [],
                "level": [],
                "copy": [],
                "ambiguous": [],
                "nonexistent": []
            }
        },
        "NDFrame.abs": {
            "name": "abs",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.describe": {
            "name": "describe",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "percentiles": [],
                "include": [],
                "exclude": []
            }
        },
        "NDFrame.pct_change": {
            "name": "pct_change",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "fill_method": [],
                "limit": [],
                "freq": []
            }
        },
        "NDFrame.transform": {
            "name": "transform",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "NDFrame.first_valid_index": {
            "name": "first_valid_index",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.last_valid_index": {
            "name": "last_valid_index",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NDFrame.to_csv": {
            "name": "to_csv",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "path_or_buf": [],
                "sep": [],
                "na_rep": [],
                "float_format": [],
                "columns": [],
                "header": [],
                "index": [],
                "index_label": [],
                "mode": [],
                "encoding": [],
                "compression": [],
                "quoting": [],
                "quotechar": [],
                "line_terminator": [],
                "chunksize": [],
                "tupleize_cols": [],
                "date_format": [],
                "doublequote": [],
                "escapechar": [],
                "decimal": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/core/series.py": {
        "Series.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "index": [],
                "dtype": [],
                "name": [],
                "copy": [],
                "fastpath": []
            }
        },
        "Series.from_array": {
            "name": "from_array",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [],
                "arr": [],
                "index": [],
                "name": [],
                "dtype": [],
                "copy": [],
                "fastpath": []
            }
        },
        "Series.name": {
            "name": "name",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Series.dtype": {
            "name": "dtype",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.dtypes": {
            "name": "dtypes",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.ftype": {
            "name": "ftype",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.ftypes": {
            "name": "ftypes",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.values": {
            "name": "values",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.get_values": {
            "name": "get_values",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.asobject": {
            "name": "asobject",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.ravel": {
            "name": "ravel",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "Series.compress": {
            "name": "compress",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "Series.nonzero": {
            "name": "nonzero",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.put": {
            "name": "put",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.__len__": {
            "name": "__len__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.view": {
            "name": "view",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "Series.__array__": {
            "name": "__array__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "Series.__array_wrap__": {
            "name": "__array_wrap__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "context": []
            }
        },
        "Series.__array_prepare__": {
            "name": "__array_prepare__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "result": [],
                "context": []
            }
        },
        "Series.real": {
            "name": "real",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Series.imag": {
            "name": "imag",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "Series.axes": {
            "name": "axes",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.__getitem__": {
            "name": "__getitem__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Series.__setitem__": {
            "name": "__setitem__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Series.repeat": {
            "name": "repeat",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "repeats": []
            }
        },
        "Series.get_value": {
            "name": "get_value",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "takeable": []
            }
        },
        "Series.set_value": {
            "name": "set_value",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "value": [],
                "takeable": []
            }
        },
        "Series.reset_index": {
            "name": "reset_index",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "drop": [],
                "name": [],
                "inplace": []
            }
        },
        "Series.__unicode__": {
            "name": "__unicode__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.to_string": {
            "name": "to_string",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "na_rep": [],
                "float_format": [],
                "header": [],
                "index": [],
                "length": [],
                "dtype": [],
                "name": [],
                "max_rows": []
            }
        },
        "Series.iteritems": {
            "name": "iteritems",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.keys": {
            "name": "keys",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.to_dict": {
            "name": "to_dict",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "into": []
            }
        },
        "Series.to_frame": {
            "name": "to_frame",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Series.to_sparse": {
            "name": "to_sparse",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "kind": [],
                "fill_value": []
            }
        },
        "Series.count": {
            "name": "count",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Series.mode": {
            "name": "mode",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "dropna": []
            }
        },
        "Series.unique": {
            "name": "unique",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.drop_duplicates": {
            "name": "drop_duplicates",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "keep": [],
                "inplace": []
            }
        },
        "Series.duplicated": {
            "name": "duplicated",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "keep": []
            }
        },
        "Series.idxmin": {
            "name": "idxmin",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "skipna": []
            }
        },
        "Series.idxmax": {
            "name": "idxmax",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "skipna": []
            }
        },
        "Series.round": {
            "name": "round",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "decimals": []
            }
        },
        "Series.quantile": {
            "name": "quantile",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "interpolation": []
            }
        },
        "Series.corr": {
            "name": "corr",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "method": [],
                "min_periods": []
            }
        },
        "Series.cov": {
            "name": "cov",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "min_periods": []
            }
        },
        "Series.diff": {
            "name": "diff",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "periods": []
            }
        },
        "Series.autocorr": {
            "name": "autocorr",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "lag": []
            }
        },
        "Series.dot": {
            "name": "dot",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.__matmul__": {
            "name": "__matmul__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.searchsorted": {
            "name": "searchsorted",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "side": [],
                "sorter": []
            }
        },
        "Series.append": {
            "name": "append",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "to_append": [],
                "ignore_index": [],
                "verify_integrity": []
            }
        },
        "Series.combine": {
            "name": "combine",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "func": [],
                "fill_value": []
            }
        },
        "Series.combine_first": {
            "name": "combine_first",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.update": {
            "name": "update",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.sort_values": {
            "name": "sort_values",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "by": [],
                "axis": [],
                "ascending": [],
                "inplace": [],
                "kind": [],
                "na_position": []
            }
        },
        "Series.sort_index": {
            "name": "sort_index",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "level": [],
                "ascending": [],
                "inplace": [],
                "kind": [],
                "na_position": [],
                "sort_remaining": []
            }
        },
        "Series.argsort": {
            "name": "argsort",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "Series.nlargest": {
            "name": "nlargest",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "keep": []
            }
        },
        "Series.nsmallest": {
            "name": "nsmallest",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "keep": []
            }
        },
        "Series.swaplevel": {
            "name": "swaplevel",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": [],
                "copy": []
            }
        },
        "Series.reorder_levels": {
            "name": "reorder_levels",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "Series.unstack": {
            "name": "unstack",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "fill_value": []
            }
        },
        "Series.map": {
            "name": "map",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [],
                "na_action": []
            }
        },
        "Series.aggregate": {
            "name": "aggregate",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "axis": []
            }
        },
        "Series.transform": {
            "name": "transform",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "axis": []
            }
        },
        "Series.apply": {
            "name": "apply",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "convert_dtype": [],
                "args": []
            }
        },
        "Series.align": {
            "name": "align",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "join": [],
                "axis": [],
                "level": [],
                "copy": [],
                "fill_value": [],
                "method": [],
                "limit": [],
                "fill_axis": [],
                "broadcast_axis": []
            }
        },
        "Series.rename": {
            "name": "rename",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.reindex": {
            "name": "reindex",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.drop": {
            "name": "drop",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "axis": [],
                "index": [],
                "columns": [],
                "level": [],
                "inplace": [],
                "errors": []
            }
        },
        "Series.fillna": {
            "name": "fillna",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "method": [],
                "axis": [],
                "inplace": [],
                "limit": [],
                "downcast": []
            }
        },
        "Series.replace": {
            "name": "replace",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "to_replace": [],
                "value": [],
                "inplace": [],
                "limit": [],
                "regex": [],
                "method": []
            }
        },
        "Series.shift": {
            "name": "shift",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "freq": [],
                "axis": []
            }
        },
        "Series.reindex_axis": {
            "name": "reindex_axis",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "axis": [],
                "method": [],
                "level": [],
                "copy": [],
                "limit": [],
                "fill_value": []
            }
        },
        "Series.memory_usage": {
            "name": "memory_usage",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "deep": []
            }
        },
        "Series.isin": {
            "name": "isin",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Series.between": {
            "name": "between",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "inclusive": []
            }
        },
        "Series.from_csv": {
            "name": "from_csv",
            "location": 116,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "sep": [],
                "parse_dates": [],
                "header": [],
                "index_col": [],
                "encoding": [],
                "infer_datetime_format": []
            }
        },
        "Series.to_csv": {
            "name": "to_csv",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.to_excel": {
            "name": "to_excel",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "excel_writer": [],
                "sheet_name": [],
                "na_rep": [],
                "float_format": [],
                "columns": [],
                "header": [],
                "index": [],
                "index_label": [],
                "startrow": [],
                "startcol": [],
                "engine": [],
                "merge_cells": [],
                "encoding": [],
                "inf_rep": [],
                "verbose": []
            }
        },
        "Series.isna": {
            "name": "isna",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.isnull": {
            "name": "isnull",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.notna": {
            "name": "notna",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.notnull": {
            "name": "notnull",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.dropna": {
            "name": "dropna",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "inplace": []
            }
        },
        "Series.valid": {
            "name": "valid",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "inplace": []
            }
        },
        "Series.to_timestamp": {
            "name": "to_timestamp",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "freq": [],
                "how": [],
                "copy": []
            }
        },
        "Series.to_period": {
            "name": "to_period",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "freq": [],
                "copy": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/core/__init__.py": {},
    "keanu-master/keanu-python/keanu/stubs/pandas/io/api.py": {},
    "keanu-master/keanu-python/keanu/stubs/pandas/io/clipboards.py": {
        "read_clipboard": {
            "name": "read_clipboard",
            "location": 7,
            "return": [],
            "arguments": {
                "sep": []
            }
        },
        "to_clipboard": {
            "name": "to_clipboard",
            "location": 8,
            "return": [],
            "arguments": {
                "obj": [],
                "excel": [],
                "sep": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/common.py": {
        "is_s3_url": {
            "name": "is_s3_url",
            "location": 18,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "is_gcs_url": {
            "name": "is_gcs_url",
            "location": 19,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "get_filepath_or_buffer": {
            "name": "get_filepath_or_buffer",
            "location": 20,
            "return": [],
            "arguments": {
                "filepath_or_buffer": [],
                "encoding": [],
                "compression": [],
                "mode": []
            }
        },
        "file_path_to_url": {
            "name": "file_path_to_url",
            "location": 21,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "BaseIterator.__iter__": {
            "name": "__iter__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseIterator.__next__": {
            "name": "__next__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BytesZipFile.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "file": [],
                "mode": [],
                "compression": []
            }
        },
        "BytesZipFile.write": {
            "name": "write",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "arcname": [],
                "compress_type": []
            }
        },
        "BytesZipFile.closed": {
            "name": "closed",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MMapWrapper.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "MMapWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MMapWrapper.__iter__": {
            "name": "__iter__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MMapWrapper.__next__": {
            "name": "__next__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UTF8Recoder.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "encoding": []
            }
        },
        "UTF8Recoder.read": {
            "name": "read",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "bytes": []
            }
        },
        "UTF8Recoder.readline": {
            "name": "readline",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UTF8Recoder.next": {
            "name": "next",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnicodeReader.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "dialect": [],
                "encoding": []
            }
        },
        "UnicodeReader.__next__": {
            "name": "__next__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnicodeWriter.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "dialect": [],
                "encoding": []
            }
        },
        "UnicodeWriter.writerow": {
            "name": "writerow",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "UnicodeWriter.writerows": {
            "name": "writerows",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "rows": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/date_converters.py": {
        "parse_date_time": {
            "name": "parse_date_time",
            "location": 7,
            "return": [],
            "arguments": {
                "date_col": [],
                "time_col": []
            }
        },
        "parse_date_fields": {
            "name": "parse_date_fields",
            "location": 8,
            "return": [],
            "arguments": {
                "year_col": [],
                "month_col": [],
                "day_col": []
            }
        },
        "parse_all_fields": {
            "name": "parse_all_fields",
            "location": 9,
            "return": [],
            "arguments": {
                "year_col": [],
                "month_col": [],
                "day_col": [],
                "hour_col": [],
                "minute_col": [],
                "second_col": []
            }
        },
        "generic_parser": {
            "name": "generic_parser",
            "location": 10,
            "return": [],
            "arguments": {
                "parse_func": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/excel.py": {
        "read_excel": {
            "name": "read_excel",
            "location": 7,
            "return": [],
            "arguments": {
                "io": [],
                "sheet_name": [],
                "header": [],
                "names": [],
                "index_col": [],
                "usecols": [],
                "squeeze": [],
                "dtype": [],
                "engine": [],
                "converters": [],
                "true_values": [],
                "false_values": [],
                "skiprows": [],
                "nrows": [],
                "na_values": [],
                "parse_dates": [],
                "date_parser": [],
                "thousands": [],
                "comment": [],
                "skipfooter": [],
                "convert_float": []
            }
        },
        "ExcelFile.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "io": []
            }
        },
        "ExcelFile.__fspath__": {
            "name": "__fspath__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelFile.parse": {
            "name": "parse",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "sheet_name": [],
                "header": [],
                "names": [],
                "index_col": [],
                "usecols": [],
                "squeeze": [],
                "converters": [],
                "true_values": [],
                "false_values": [],
                "skiprows": [],
                "nrows": [],
                "na_values": [],
                "parse_dates": [],
                "date_parser": [],
                "thousands": [],
                "comment": [],
                "skipfooter": [],
                "convert_float": []
            }
        },
        "ExcelFile.sheet_names": {
            "name": "sheet_names",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelFile.close": {
            "name": "close",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelFile.__enter__": {
            "name": "__enter__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelFile.__exit__": {
            "name": "__exit__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "ExcelWriter.__new__": {
            "name": "__new__",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "engine": []
            }
        },
        "ExcelWriter.supported_extensions": {
            "name": "supported_extensions",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelWriter.engine": {
            "name": "engine",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelWriter.write_cells": {
            "name": "write_cells",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "cells": [],
                "sheet_name": [],
                "startrow": [],
                "startcol": [],
                "freeze_panes": []
            }
        },
        "ExcelWriter.save": {
            "name": "save",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelWriter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "engine": [],
                "date_format": [],
                "datetime_format": [],
                "mode": []
            }
        },
        "ExcelWriter.__fspath__": {
            "name": "__fspath__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelWriter.check_extension": {
            "name": "check_extension",
            "location": 38,
            "return": [],
            "arguments": {
                "cls": [],
                "ext": []
            }
        },
        "ExcelWriter.__enter__": {
            "name": "__enter__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelWriter.__exit__": {
            "name": "__exit__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "ExcelWriter.close": {
            "name": "close",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OpenpyxlWriter.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "engine": [],
                "mode": []
            }
        },
        "_OpenpyxlWriter.save": {
            "name": "save",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_OpenpyxlWriter.write_cells": {
            "name": "write_cells",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "cells": [],
                "sheet_name": [],
                "startrow": [],
                "startcol": [],
                "freeze_panes": []
            }
        },
        "_XlwtWriter.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "engine": [],
                "encoding": [],
                "mode": []
            }
        },
        "_XlwtWriter.save": {
            "name": "save",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_XlwtWriter.write_cells": {
            "name": "write_cells",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "cells": [],
                "sheet_name": [],
                "startrow": [],
                "startcol": [],
                "freeze_panes": []
            }
        },
        "_XlsxStyler.convert": {
            "name": "convert",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [],
                "style_dict": [],
                "num_format_str": []
            }
        },
        "_XlsxWriter.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "engine": [],
                "date_format": [],
                "datetime_format": [],
                "mode": []
            }
        },
        "_XlsxWriter.save": {
            "name": "save",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_XlsxWriter.write_cells": {
            "name": "write_cells",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "cells": [],
                "sheet_name": [],
                "startrow": [],
                "startcol": [],
                "freeze_panes": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/feather_format.py": {
        "to_feather": {
            "name": "to_feather",
            "location": 7,
            "return": [],
            "arguments": {
                "df": [],
                "path": []
            }
        },
        "read_feather": {
            "name": "read_feather",
            "location": 8,
            "return": [],
            "arguments": {
                "path": [],
                "use_threads": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/gbq.py": {
        "read_gbq": {
            "name": "read_gbq",
            "location": 7,
            "return": [],
            "arguments": {
                "query": [],
                "project_id": [],
                "index_col": [],
                "col_order": [],
                "reauth": [],
                "private_key": [],
                "auth_local_webserver": [],
                "dialect": [],
                "location": [],
                "configuration": [],
                "verbose": []
            }
        },
        "to_gbq": {
            "name": "to_gbq",
            "location": 8,
            "return": [],
            "arguments": {
                "dataframe": [],
                "destination_table": [],
                "project_id": [],
                "chunksize": [],
                "verbose": [],
                "reauth": [],
                "if_exists": [],
                "private_key": [],
                "auth_local_webserver": [],
                "table_schema": [],
                "location": [],
                "progress_bar": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/gcs.py": {
        "get_filepath_or_buffer": {
            "name": "get_filepath_or_buffer",
            "location": 7,
            "return": [],
            "arguments": {
                "filepath_or_buffer": [],
                "encoding": [],
                "compression": [],
                "mode": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/html.py": {
        "read_html": {
            "name": "read_html",
            "location": 24,
            "return": [],
            "arguments": {
                "io": [],
                "match": [],
                "flavor": [],
                "header": [],
                "index_col": [],
                "skiprows": [],
                "attrs": [],
                "parse_dates": [],
                "tupleize_cols": [],
                "thousands": [],
                "encoding": [],
                "decimal": [],
                "converters": [],
                "na_values": [],
                "keep_default_na": [],
                "displayed_only": []
            }
        },
        "_HtmlFrameParser.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "io": [],
                "match": [],
                "attrs": [],
                "encoding": [],
                "displayed_only": []
            }
        },
        "_HtmlFrameParser.parse_tables": {
            "name": "parse_tables",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BeautifulSoupHtml5LibFrameParser.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_LxmlFrameParser.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/packers.py": {
        "to_msgpack": {
            "name": "to_msgpack",
            "location": 10,
            "return": [],
            "arguments": {
                "path_or_buf": []
            }
        },
        "read_msgpack": {
            "name": "read_msgpack",
            "location": 11,
            "return": [],
            "arguments": {
                "path_or_buf": [],
                "encoding": [],
                "iterator": []
            }
        },
        "dtype_for": {
            "name": "dtype_for",
            "location": 15,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "c2f": {
            "name": "c2f",
            "location": 19,
            "return": [],
            "arguments": {
                "r": [],
                "i": [],
                "ctype_name": []
            }
        },
        "convert": {
            "name": "convert",
            "location": 20,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "unconvert": {
            "name": "unconvert",
            "location": 21,
            "return": [],
            "arguments": {
                "values": [],
                "dtype": [],
                "compress": []
            }
        },
        "encode": {
            "name": "encode",
            "location": 22,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "decode": {
            "name": "decode",
            "location": 23,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "pack": {
            "name": "pack",
            "location": 24,
            "return": [],
            "arguments": {
                "o": [],
                "default": [],
                "encoding": [],
                "unicode_errors": [],
                "use_single_float": [],
                "autoreset": [],
                "use_bin_type": []
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 25,
            "return": [],
            "arguments": {
                "packed": [],
                "object_hook": [],
                "list_hook": [],
                "use_list": [],
                "encoding": [],
                "unicode_errors": [],
                "object_pairs_hook": [],
                "max_buffer_size": [],
                "ext_hook": []
            }
        },
        "Packer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "encoding": [],
                "unicode_errors": [],
                "use_single_float": [],
                "autoreset": [],
                "use_bin_type": []
            }
        },
        "Unpacker.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "file_like": [],
                "read_size": [],
                "use_list": [],
                "object_hook": [],
                "object_pairs_hook": [],
                "list_hook": [],
                "encoding": [],
                "unicode_errors": [],
                "max_buffer_size": [],
                "ext_hook": []
            }
        },
        "Iterator.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Iterator.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/parquet.py": {
        "get_engine": {
            "name": "get_engine",
            "location": 7,
            "return": [],
            "arguments": {
                "engine": []
            }
        },
        "to_parquet": {
            "name": "to_parquet",
            "location": 28,
            "return": [],
            "arguments": {
                "df": [],
                "path": [],
                "engine": [],
                "compression": [],
                "index": []
            }
        },
        "read_parquet": {
            "name": "read_parquet",
            "location": 29,
            "return": [],
            "arguments": {
                "path": [],
                "engine": [],
                "columns": []
            }
        },
        "BaseImpl.validate_dataframe": {
            "name": "validate_dataframe",
            "location": 12,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "BaseImpl.write": {
            "name": "write",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "path": [],
                "compression": []
            }
        },
        "BaseImpl.read": {
            "name": "read",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "columns": []
            }
        },
        "PyArrowImpl.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PyArrowImpl.write": {
            "name": "write",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "path": [],
                "compression": [],
                "coerce_timestamps": [],
                "index": []
            }
        },
        "PyArrowImpl.read": {
            "name": "read",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "columns": []
            }
        },
        "FastParquetImpl.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FastParquetImpl.write": {
            "name": "write",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "path": [],
                "compression": [],
                "index": []
            }
        },
        "FastParquetImpl.read": {
            "name": "read",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "columns": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/parsers.py": {
        "read_fwf": {
            "name": "read_fwf",
            "location": 11,
            "return": [],
            "arguments": {
                "filepath_or_buffer": [],
                "colspecs": [],
                "widths": []
            }
        },
        "TextParser": {
            "name": "TextParser",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "count_empty_vals": {
            "name": "count_empty_vals",
            "location": 64,
            "return": [],
            "arguments": {
                "vals": []
            }
        },
        "TextFileReader.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "engine": []
            }
        },
        "TextFileReader.close": {
            "name": "close",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextFileReader.__next__": {
            "name": "__next__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextFileReader.read": {
            "name": "read",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "nrows": []
            }
        },
        "TextFileReader.get_chunk": {
            "name": "get_chunk",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "ParserBase.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "kwds": []
            }
        },
        "ParserBase.close": {
            "name": "close",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CParserWrapper.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "src": []
            }
        },
        "CParserWrapper.close": {
            "name": "close",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CParserWrapper.set_error_bad_lines": {
            "name": "set_error_bad_lines",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "status": []
            }
        },
        "CParserWrapper.read": {
            "name": "read",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "nrows": []
            }
        },
        "PythonParser.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "PythonParser.read": {
            "name": "read",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "rows": []
            }
        },
        "PythonParser.get_chunk": {
            "name": "get_chunk",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "FixedWidthReader.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "colspecs": [],
                "delimiter": [],
                "comment": [],
                "skiprows": []
            }
        },
        "FixedWidthReader.get_rows": {
            "name": "get_rows",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "skiprows": []
            }
        },
        "FixedWidthReader.detect_colspecs": {
            "name": "detect_colspecs",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "skiprows": []
            }
        },
        "FixedWidthReader.__next__": {
            "name": "__next__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FixedWidthFieldParser.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/pickle.py": {
        "to_pickle": {
            "name": "to_pickle",
            "location": 7,
            "return": [],
            "arguments": {
                "obj": [],
                "path": [],
                "compression": [],
                "protocol": []
            }
        },
        "read_pickle": {
            "name": "read_pickle",
            "location": 8,
            "return": [],
            "arguments": {
                "path": [],
                "compression": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/pytables.py": {
        "to_hdf": {
            "name": "to_hdf",
            "location": 29,
            "return": [],
            "arguments": {
                "path_or_buf": [],
                "key": [],
                "value": [],
                "mode": [],
                "complevel": [],
                "complib": [],
                "append": []
            }
        },
        "read_hdf": {
            "name": "read_hdf",
            "location": 30,
            "return": [],
            "arguments": {
                "path_or_buf": [],
                "key": [],
                "mode": []
            }
        },
        "timeit": {
            "name": "timeit",
            "location": 504,
            "return": [],
            "arguments": {
                "key": [],
                "df": [],
                "fn": [],
                "remove": []
            }
        },
        "HDFStore.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "mode": [],
                "complevel": [],
                "complib": [],
                "fletcher32": []
            }
        },
        "HDFStore.__fspath__": {
            "name": "__fspath__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.root": {
            "name": "root",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.filename": {
            "name": "filename",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.__getitem__": {
            "name": "__getitem__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HDFStore.__setitem__": {
            "name": "__setitem__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "HDFStore.__delitem__": {
            "name": "__delitem__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HDFStore.__getattr__": {
            "name": "__getattr__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "HDFStore.__contains__": {
            "name": "__contains__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HDFStore.__len__": {
            "name": "__len__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.__unicode__": {
            "name": "__unicode__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.__enter__": {
            "name": "__enter__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.__exit__": {
            "name": "__exit__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "HDFStore.keys": {
            "name": "keys",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.__iter__": {
            "name": "__iter__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.items": {
            "name": "items",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.open": {
            "name": "open",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "HDFStore.close": {
            "name": "close",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.is_open": {
            "name": "is_open",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.flush": {
            "name": "flush",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "fsync": []
            }
        },
        "HDFStore.get": {
            "name": "get",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HDFStore.select": {
            "name": "select",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "where": [],
                "start": [],
                "stop": [],
                "columns": [],
                "iterator": [],
                "chunksize": [],
                "auto_close": []
            }
        },
        "HDFStore.select_as_coordinates": {
            "name": "select_as_coordinates",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "where": [],
                "start": [],
                "stop": []
            }
        },
        "HDFStore.select_column": {
            "name": "select_column",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "column": []
            }
        },
        "HDFStore.select_as_multiple": {
            "name": "select_as_multiple",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [],
                "where": [],
                "selector": [],
                "columns": [],
                "start": [],
                "stop": [],
                "iterator": [],
                "chunksize": [],
                "auto_close": []
            }
        },
        "HDFStore.put": {
            "name": "put",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "format": [],
                "append": []
            }
        },
        "HDFStore.remove": {
            "name": "remove",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "where": [],
                "start": [],
                "stop": []
            }
        },
        "HDFStore.append": {
            "name": "append",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "format": [],
                "append": [],
                "columns": [],
                "dropna": []
            }
        },
        "HDFStore.append_to_multiple": {
            "name": "append_to_multiple",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "d": [],
                "value": [],
                "selector": [],
                "data_columns": [],
                "axes": [],
                "dropna": []
            }
        },
        "HDFStore.create_table_index": {
            "name": "create_table_index",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HDFStore.groups": {
            "name": "groups",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDFStore.walk": {
            "name": "walk",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "where": []
            }
        },
        "HDFStore.get_node": {
            "name": "get_node",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HDFStore.get_storer": {
            "name": "get_storer",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HDFStore.copy": {
            "name": "copy",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "file": [],
                "mode": [],
                "propindexes": [],
                "keys": [],
                "complib": [],
                "complevel": [],
                "fletcher32": [],
                "overwrite": []
            }
        },
        "HDFStore.info": {
            "name": "info",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableIterator.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "store": [],
                "s": [],
                "func": [],
                "where": [],
                "nrows": [],
                "start": [],
                "stop": [],
                "iterator": [],
                "chunksize": [],
                "auto_close": []
            }
        },
        "TableIterator.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableIterator.close": {
            "name": "close",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableIterator.get_result": {
            "name": "get_result",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "coordinates": []
            }
        },
        "IndexCol.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "kind": [],
                "typ": [],
                "cname": [],
                "itemsize": [],
                "name": [],
                "axis": [],
                "kind_attr": [],
                "pos": [],
                "freq": [],
                "tz": [],
                "index_name": []
            }
        },
        "IndexCol.set_name": {
            "name": "set_name",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "kind_attr": []
            }
        },
        "IndexCol.set_axis": {
            "name": "set_axis",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "IndexCol.set_pos": {
            "name": "set_pos",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "IndexCol.set_table": {
            "name": "set_table",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "IndexCol.__unicode__": {
            "name": "__unicode__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.__eq__": {
            "name": "__eq__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexCol.__ne__": {
            "name": "__ne__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexCol.is_indexed": {
            "name": "is_indexed",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.copy": {
            "name": "copy",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.infer": {
            "name": "infer",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "IndexCol.convert": {
            "name": "convert",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "nan_rep": [],
                "encoding": [],
                "errors": []
            }
        },
        "IndexCol.take_data": {
            "name": "take_data",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.attrs": {
            "name": "attrs",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.description": {
            "name": "description",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.col": {
            "name": "col",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.cvalues": {
            "name": "cvalues",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.__iter__": {
            "name": "__iter__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.maybe_set_size": {
            "name": "maybe_set_size",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "min_itemsize": []
            }
        },
        "IndexCol.validate": {
            "name": "validate",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [],
                "append": []
            }
        },
        "IndexCol.validate_names": {
            "name": "validate_names",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.validate_and_set": {
            "name": "validate_and_set",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [],
                "append": []
            }
        },
        "IndexCol.validate_col": {
            "name": "validate_col",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "itemsize": []
            }
        },
        "IndexCol.validate_attr": {
            "name": "validate_attr",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "append": []
            }
        },
        "IndexCol.update_info": {
            "name": "update_info",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "IndexCol.set_info": {
            "name": "set_info",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "IndexCol.get_attr": {
            "name": "get_attr",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.set_attr": {
            "name": "set_attr",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexCol.read_metadata": {
            "name": "read_metadata",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "IndexCol.validate_metadata": {
            "name": "validate_metadata",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "IndexCol.write_metadata": {
            "name": "write_metadata",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "GenericIndexCol.is_indexed": {
            "name": "is_indexed",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericIndexCol.convert": {
            "name": "convert",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "nan_rep": [],
                "encoding": [],
                "errors": []
            }
        },
        "GenericIndexCol.get_attr": {
            "name": "get_attr",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericIndexCol.set_attr": {
            "name": "set_attr",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataCol.create_for_block": {
            "name": "create_for_block",
            "location": 157,
            "return": [],
            "arguments": {
                "cls": [],
                "i": [],
                "name": [],
                "cname": [],
                "version": []
            }
        },
        "DataCol.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "kind": [],
                "typ": [],
                "cname": [],
                "data": [],
                "meta": [],
                "metadata": [],
                "block": []
            }
        },
        "DataCol.__unicode__": {
            "name": "__unicode__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataCol.__eq__": {
            "name": "__eq__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataCol.set_data": {
            "name": "set_data",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "dtype": []
            }
        },
        "DataCol.take_data": {
            "name": "take_data",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataCol.set_metadata": {
            "name": "set_metadata",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "DataCol.set_kind": {
            "name": "set_kind",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataCol.set_atom": {
            "name": "set_atom",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "block_items": [],
                "existing_col": [],
                "min_itemsize": [],
                "nan_rep": [],
                "info": [],
                "encoding": [],
                "errors": []
            }
        },
        "DataCol.get_atom_string": {
            "name": "get_atom_string",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "itemsize": []
            }
        },
        "DataCol.set_atom_string": {
            "name": "set_atom_string",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "block_items": [],
                "existing_col": [],
                "min_itemsize": [],
                "nan_rep": [],
                "encoding": [],
                "errors": []
            }
        },
        "DataCol.get_atom_coltype": {
            "name": "get_atom_coltype",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "DataCol.get_atom_data": {
            "name": "get_atom_data",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "kind": []
            }
        },
        "DataCol.set_atom_complex": {
            "name": "set_atom_complex",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "DataCol.set_atom_data": {
            "name": "set_atom_data",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "DataCol.set_atom_categorical": {
            "name": "set_atom_categorical",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "items": [],
                "info": [],
                "values": []
            }
        },
        "DataCol.get_atom_datetime64": {
            "name": "get_atom_datetime64",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "DataCol.set_atom_datetime64": {
            "name": "set_atom_datetime64",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "values": []
            }
        },
        "DataCol.set_atom_datetime64tz": {
            "name": "set_atom_datetime64tz",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "info": [],
                "values": []
            }
        },
        "DataCol.get_atom_timedelta64": {
            "name": "get_atom_timedelta64",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "DataCol.set_atom_timedelta64": {
            "name": "set_atom_timedelta64",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "values": []
            }
        },
        "DataCol.shape": {
            "name": "shape",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataCol.cvalues": {
            "name": "cvalues",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataCol.validate_attr": {
            "name": "validate_attr",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "append": []
            }
        },
        "DataCol.convert": {
            "name": "convert",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "nan_rep": [],
                "encoding": [],
                "errors": []
            }
        },
        "DataCol.get_attr": {
            "name": "get_attr",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataCol.set_attr": {
            "name": "set_attr",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataIndexableCol.validate_names": {
            "name": "validate_names",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataIndexableCol.get_atom_string": {
            "name": "get_atom_string",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "itemsize": []
            }
        },
        "DataIndexableCol.get_atom_data": {
            "name": "get_atom_data",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "block": [],
                "kind": []
            }
        },
        "DataIndexableCol.get_atom_datetime64": {
            "name": "get_atom_datetime64",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "DataIndexableCol.get_atom_timedelta64": {
            "name": "get_atom_timedelta64",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "GenericDataIndexableCol.get_attr": {
            "name": "get_attr",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "group": [],
                "encoding": [],
                "errors": []
            }
        },
        "Fixed.is_old_version": {
            "name": "is_old_version",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.set_version": {
            "name": "set_version",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.pandas_type": {
            "name": "pandas_type",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.format_type": {
            "name": "format_type",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.__unicode__": {
            "name": "__unicode__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.set_object_info": {
            "name": "set_object_info",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.copy": {
            "name": "copy",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.storage_obj_type": {
            "name": "storage_obj_type",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.shape": {
            "name": "shape",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.pathname": {
            "name": "pathname",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.attrs": {
            "name": "attrs",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.set_attrs": {
            "name": "set_attrs",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.get_attrs": {
            "name": "get_attrs",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.storable": {
            "name": "storable",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.is_exists": {
            "name": "is_exists",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.nrows": {
            "name": "nrows",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.validate": {
            "name": "validate",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Fixed.validate_version": {
            "name": "validate_version",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "where": []
            }
        },
        "Fixed.infer_axes": {
            "name": "infer_axes",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.read": {
            "name": "read",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.write": {
            "name": "write",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fixed.delete": {
            "name": "delete",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "where": [],
                "start": [],
                "stop": []
            }
        },
        "GenericFixed.validate_read": {
            "name": "validate_read",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "GenericFixed.is_exists": {
            "name": "is_exists",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericFixed.set_attrs": {
            "name": "set_attrs",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericFixed.get_attrs": {
            "name": "get_attrs",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericFixed.write": {
            "name": "write",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "GenericFixed.read_array": {
            "name": "read_array",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "start": [],
                "stop": []
            }
        },
        "GenericFixed.read_index": {
            "name": "read_index",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "GenericFixed.write_index": {
            "name": "write_index",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "index": []
            }
        },
        "GenericFixed.write_block_index": {
            "name": "write_block_index",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "index": []
            }
        },
        "GenericFixed.read_block_index": {
            "name": "read_block_index",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "GenericFixed.write_sparse_intindex": {
            "name": "write_sparse_intindex",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "index": []
            }
        },
        "GenericFixed.read_sparse_intindex": {
            "name": "read_sparse_intindex",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "GenericFixed.write_multi_index": {
            "name": "write_multi_index",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "index": []
            }
        },
        "GenericFixed.read_multi_index": {
            "name": "read_multi_index",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "GenericFixed.read_index_node": {
            "name": "read_index_node",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "start": [],
                "stop": []
            }
        },
        "GenericFixed.write_array_empty": {
            "name": "write_array_empty",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "GenericFixed.write_array": {
            "name": "write_array",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "items": []
            }
        },
        "LegacyFixed.read_index_legacy": {
            "name": "read_index_legacy",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "start": [],
                "stop": []
            }
        },
        "LegacySeriesFixed.read": {
            "name": "read",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LegacyFrameFixed.read": {
            "name": "read",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesFixed.shape": {
            "name": "shape",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesFixed.read": {
            "name": "read",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesFixed.write": {
            "name": "write",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "SparseFixed.validate_read": {
            "name": "validate_read",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "SparseSeriesFixed.read": {
            "name": "read",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparseSeriesFixed.write": {
            "name": "write",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "SparseFrameFixed.read": {
            "name": "read",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparseFrameFixed.write": {
            "name": "write",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "BlockManagerFixed.shape": {
            "name": "shape",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockManagerFixed.read": {
            "name": "read",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "start": [],
                "stop": []
            }
        },
        "BlockManagerFixed.write": {
            "name": "write",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PanelFixed.write": {
            "name": "write",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.table_type_short": {
            "name": "table_type_short",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.format_type": {
            "name": "format_type",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.__unicode__": {
            "name": "__unicode__",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.__getitem__": {
            "name": "__getitem__",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "Table.validate": {
            "name": "validate",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Table.is_multi_index": {
            "name": "is_multi_index",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.validate_metadata": {
            "name": "validate_metadata",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "existing": []
            }
        },
        "Table.validate_multiindex": {
            "name": "validate_multiindex",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Table.nrows_expected": {
            "name": "nrows_expected",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.is_exists": {
            "name": "is_exists",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.storable": {
            "name": "storable",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.table": {
            "name": "table",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.dtype": {
            "name": "dtype",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.description": {
            "name": "description",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.axes": {
            "name": "axes",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.ncols": {
            "name": "ncols",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.is_transposed": {
            "name": "is_transposed",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.data_orientation": {
            "name": "data_orientation",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.queryables": {
            "name": "queryables",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.index_cols": {
            "name": "index_cols",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.values_cols": {
            "name": "values_cols",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.write_metadata": {
            "name": "write_metadata",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "values": []
            }
        },
        "Table.read_metadata": {
            "name": "read_metadata",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Table.set_info": {
            "name": "set_info",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.set_attrs": {
            "name": "set_attrs",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.get_attrs": {
            "name": "get_attrs",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.validate_version": {
            "name": "validate_version",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "where": []
            }
        },
        "Table.validate_min_itemsize": {
            "name": "validate_min_itemsize",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "min_itemsize": []
            }
        },
        "Table.indexables": {
            "name": "indexables",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.create_index": {
            "name": "create_index",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "optlevel": [],
                "kind": []
            }
        },
        "Table.read_axes": {
            "name": "read_axes",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "where": []
            }
        },
        "Table.get_object": {
            "name": "get_object",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Table.validate_data_columns": {
            "name": "validate_data_columns",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "data_columns": [],
                "min_itemsize": []
            }
        },
        "Table.create_axes": {
            "name": "create_axes",
            "location": 391,
            "return": [],
            "arguments": {
                "self": [],
                "axes": [],
                "obj": [],
                "validate": [],
                "nan_rep": [],
                "data_columns": [],
                "min_itemsize": []
            }
        },
        "Table.process_axes": {
            "name": "process_axes",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "columns": []
            }
        },
        "Table.create_description": {
            "name": "create_description",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "complib": [],
                "complevel": [],
                "fletcher32": [],
                "expectedrows": []
            }
        },
        "Table.read_coordinates": {
            "name": "read_coordinates",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "where": [],
                "start": [],
                "stop": []
            }
        },
        "Table.read_column": {
            "name": "read_column",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "where": [],
                "start": [],
                "stop": []
            }
        },
        "WORMTable.read": {
            "name": "read",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WORMTable.write": {
            "name": "write",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LegacyTable.write": {
            "name": "write",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LegacyTable.read": {
            "name": "read",
            "location": 406,
            "return": [],
            "arguments": {
                "self": [],
                "where": [],
                "columns": []
            }
        },
        "LegacyFrameTable.read": {
            "name": "read",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppendableTable.write": {
            "name": "write",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "axes": [],
                "append": [],
                "complib": [],
                "complevel": [],
                "fletcher32": [],
                "min_itemsize": [],
                "chunksize": [],
                "expectedrows": [],
                "dropna": []
            }
        },
        "AppendableTable.write_data": {
            "name": "write_data",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "chunksize": [],
                "dropna": []
            }
        },
        "AppendableTable.write_data_chunk": {
            "name": "write_data_chunk",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "rows": [],
                "indexes": [],
                "mask": [],
                "values": []
            }
        },
        "AppendableTable.delete": {
            "name": "delete",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "where": [],
                "start": [],
                "stop": []
            }
        },
        "AppendableFrameTable.is_transposed": {
            "name": "is_transposed",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppendableFrameTable.get_object": {
            "name": "get_object",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "AppendableFrameTable.read": {
            "name": "read",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "where": [],
                "columns": []
            }
        },
        "AppendableSeriesTable.is_transposed": {
            "name": "is_transposed",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppendableSeriesTable.get_object": {
            "name": "get_object",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "AppendableSeriesTable.write": {
            "name": "write",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "data_columns": []
            }
        },
        "AppendableSeriesTable.read": {
            "name": "read",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "AppendableMultiSeriesTable.write": {
            "name": "write",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "GenericTable.pandas_type": {
            "name": "pandas_type",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericTable.storable": {
            "name": "storable",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericTable.get_attrs": {
            "name": "get_attrs",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericTable.indexables": {
            "name": "indexables",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericTable.write": {
            "name": "write",
            "location": 471,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppendableMultiFrameTable.table_type_short": {
            "name": "table_type_short",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppendableMultiFrameTable.write": {
            "name": "write",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "data_columns": []
            }
        },
        "AppendableMultiFrameTable.read": {
            "name": "read",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppendablePanelTable.get_object": {
            "name": "get_object",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "AppendablePanelTable.is_transposed": {
            "name": "is_transposed",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Selection.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "where": [],
                "start": [],
                "stop": []
            }
        },
        "Selection.generate": {
            "name": "generate",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "where": []
            }
        },
        "Selection.select": {
            "name": "select",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Selection.select_coords": {
            "name": "select_coords",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/s3.py": {
        "get_filepath_or_buffer": {
            "name": "get_filepath_or_buffer",
            "location": 7,
            "return": [],
            "arguments": {
                "filepath_or_buffer": [],
                "encoding": [],
                "compression": [],
                "mode": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/sql.py": {
        "execute": {
            "name": "execute",
            "location": 11,
            "return": [],
            "arguments": {
                "sql": [],
                "con": [],
                "cur": [],
                "params": []
            }
        },
        "read_sql_table": {
            "name": "read_sql_table",
            "location": 12,
            "return": [],
            "arguments": {
                "table_name": [],
                "con": [],
                "schema": [],
                "index_col": [],
                "coerce_float": [],
                "parse_dates": [],
                "columns": [],
                "chunksize": []
            }
        },
        "read_sql_query": {
            "name": "read_sql_query",
            "location": 13,
            "return": [],
            "arguments": {
                "sql": [],
                "con": [],
                "index_col": [],
                "coerce_float": [],
                "params": [],
                "parse_dates": [],
                "chunksize": []
            }
        },
        "read_sql": {
            "name": "read_sql",
            "location": 14,
            "return": [],
            "arguments": {
                "sql": [],
                "con": [],
                "index_col": [],
                "coerce_float": [],
                "params": [],
                "parse_dates": [],
                "columns": [],
                "chunksize": []
            }
        },
        "to_sql": {
            "name": "to_sql",
            "location": 15,
            "return": [],
            "arguments": {
                "frame": [],
                "name": [],
                "con": [],
                "schema": [],
                "if_exists": [],
                "index": [],
                "index_label": [],
                "chunksize": [],
                "dtype": []
            }
        },
        "has_table": {
            "name": "has_table",
            "location": 16,
            "return": [],
            "arguments": {
                "table_name": [],
                "con": [],
                "schema": []
            }
        },
        "pandasSQL_builder": {
            "name": "pandasSQL_builder",
            "location": 19,
            "return": [],
            "arguments": {
                "con": [],
                "schema": [],
                "meta": [],
                "is_cursor": []
            }
        },
        "get_schema": {
            "name": "get_schema",
            "location": 78,
            "return": [],
            "arguments": {
                "frame": [],
                "name": [],
                "keys": [],
                "con": [],
                "dtype": []
            }
        },
        "SQLTable.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pandas_sql_engine": [],
                "frame": [],
                "index": [],
                "if_exists": [],
                "prefix": [],
                "index_label": [],
                "schema": [],
                "keys": [],
                "dtype": []
            }
        },
        "SQLTable.exists": {
            "name": "exists",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLTable.sql_schema": {
            "name": "sql_schema",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLTable.create": {
            "name": "create",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLTable.insert_statement": {
            "name": "insert_statement",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLTable.insert_data": {
            "name": "insert_data",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLTable.insert": {
            "name": "insert",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "chunksize": []
            }
        },
        "SQLTable.read": {
            "name": "read",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "coerce_float": [],
                "parse_dates": [],
                "columns": [],
                "chunksize": []
            }
        },
        "PandasSQL.read_sql": {
            "name": "read_sql",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PandasSQL.to_sql": {
            "name": "to_sql",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLDatabase.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "engine": [],
                "schema": [],
                "meta": []
            }
        },
        "SQLDatabase.run_transaction": {
            "name": "run_transaction",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLDatabase.execute": {
            "name": "execute",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLDatabase.read_table": {
            "name": "read_table",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "index_col": [],
                "coerce_float": [],
                "parse_dates": [],
                "columns": [],
                "schema": [],
                "chunksize": []
            }
        },
        "SQLDatabase.read_query": {
            "name": "read_query",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [],
                "index_col": [],
                "coerce_float": [],
                "parse_dates": [],
                "params": [],
                "chunksize": []
            }
        },
        "SQLDatabase.to_sql": {
            "name": "to_sql",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "frame": [],
                "name": [],
                "if_exists": [],
                "index": [],
                "index_label": [],
                "schema": [],
                "chunksize": [],
                "dtype": []
            }
        },
        "SQLDatabase.tables": {
            "name": "tables",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLDatabase.has_table": {
            "name": "has_table",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "schema": []
            }
        },
        "SQLDatabase.get_table": {
            "name": "get_table",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "SQLDatabase.drop_table": {
            "name": "drop_table",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "SQLiteTable.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLiteTable.sql_schema": {
            "name": "sql_schema",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLiteTable.insert_statement": {
            "name": "insert_statement",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLiteDatabase.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "con": [],
                "is_cursor": []
            }
        },
        "SQLiteDatabase.run_transaction": {
            "name": "run_transaction",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLiteDatabase.execute": {
            "name": "execute",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLiteDatabase.read_query": {
            "name": "read_query",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [],
                "index_col": [],
                "coerce_float": [],
                "params": [],
                "parse_dates": [],
                "chunksize": []
            }
        },
        "SQLiteDatabase.to_sql": {
            "name": "to_sql",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "frame": [],
                "name": [],
                "if_exists": [],
                "index": [],
                "index_label": [],
                "schema": [],
                "chunksize": [],
                "dtype": []
            }
        },
        "SQLiteDatabase.has_table": {
            "name": "has_table",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "schema": []
            }
        },
        "SQLiteDatabase.get_table": {
            "name": "get_table",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "schema": []
            }
        },
        "SQLiteDatabase.drop_table": {
            "name": "drop_table",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "schema": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/stata.py": {
        "read_stata": {
            "name": "read_stata",
            "location": 9,
            "return": [],
            "arguments": {
                "filepath_or_buffer": [],
                "convert_dates": [],
                "convert_categoricals": [],
                "encoding": [],
                "index_col": [],
                "convert_missing": [],
                "preserve_dtypes": [],
                "columns": [],
                "order_categoricals": [],
                "chunksize": [],
                "iterator": []
            }
        },
        "StataValueLabel.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "catarray": []
            }
        },
        "StataValueLabel.generate_value_label": {
            "name": "generate_value_label",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "byteorder": [],
                "encoding": []
            }
        },
        "StataMissingValue.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "StataMissingValue.__unicode__": {
            "name": "__unicode__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataMissingValue.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "StataMissingValue.get_base_missing_value": {
            "name": "get_base_missing_value",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [],
                "dtype": []
            }
        },
        "StataParser.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataReader.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "path_or_buf": [],
                "convert_dates": [],
                "convert_categoricals": [],
                "index_col": [],
                "convert_missing": [],
                "preserve_dtypes": [],
                "columns": [],
                "order_categoricals": [],
                "encoding": [],
                "chunksize": []
            }
        },
        "StataReader.__enter__": {
            "name": "__enter__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataReader.__exit__": {
            "name": "__exit__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "StataReader.close": {
            "name": "close",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataReader.data": {
            "name": "data",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataReader.__next__": {
            "name": "__next__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataReader.get_chunk": {
            "name": "get_chunk",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "StataReader.read": {
            "name": "read",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "nrows": [],
                "convert_dates": [],
                "convert_categoricals": [],
                "index_col": [],
                "convert_missing": [],
                "preserve_dtypes": [],
                "columns": [],
                "order_categoricals": []
            }
        },
        "StataReader.data_label": {
            "name": "data_label",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataReader.variable_labels": {
            "name": "variable_labels",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataReader.value_labels": {
            "name": "value_labels",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataWriter.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "data": [],
                "convert_dates": [],
                "write_index": [],
                "encoding": [],
                "byteorder": [],
                "time_stamp": [],
                "data_label": [],
                "variable_labels": []
            }
        },
        "StataWriter.write_file": {
            "name": "write_file",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataStrLWriter.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "columns": [],
                "version": [],
                "byteorder": []
            }
        },
        "StataStrLWriter.generate_table": {
            "name": "generate_table",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StataStrLWriter.generate_blob": {
            "name": "generate_blob",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "gso_table": []
            }
        },
        "StataWriter117.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "data": [],
                "convert_dates": [],
                "write_index": [],
                "encoding": [],
                "byteorder": [],
                "time_stamp": [],
                "data_label": [],
                "variable_labels": [],
                "convert_strl": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/__init__.py": {},
    "keanu-master/keanu-python/keanu/stubs/pandas/io/clipboard/clipboards.py": {
        "init_osx_clipboard": {
            "name": "init_osx_clipboard",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "init_gtk_clipboard": {
            "name": "init_gtk_clipboard",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "init_qt_clipboard": {
            "name": "init_qt_clipboard",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "init_xclip_clipboard": {
            "name": "init_xclip_clipboard",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "init_xsel_clipboard": {
            "name": "init_xsel_clipboard",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "init_klipper_clipboard": {
            "name": "init_klipper_clipboard",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "init_no_clipboard": {
            "name": "init_no_clipboard",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/clipboard/exceptions.py": {
        "PyperclipWindowsException.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/clipboard/windows.py": {
        "init_windows_clipboard": {
            "name": "init_windows_clipboard",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "CheckedCall.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "CheckedCall.__call__": {
            "name": "__call__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckedCall.__setattr__": {
            "name": "__setattr__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/clipboard/__init__.py": {},
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/console.py": {
        "detect_console_encoding": {
            "name": "detect_console_encoding",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "get_console_size": {
            "name": "get_console_size",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "in_interactive_session": {
            "name": "in_interactive_session",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "in_qtconsole": {
            "name": "in_qtconsole",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "in_ipnb": {
            "name": "in_ipnb",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "in_ipython_frontend": {
            "name": "in_ipython_frontend",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/css.py": {
        "CSSResolver.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "declarations_str": [],
                "inherited": []
            }
        },
        "CSSResolver.size_to_pt": {
            "name": "size_to_pt",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "in_val": [],
                "em_pt": [],
                "conversions": []
            }
        },
        "CSSResolver.atomize": {
            "name": "atomize",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "declarations": []
            }
        },
        "CSSResolver.parse": {
            "name": "parse",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "declarations_str": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/csvs.py": {
        "CSVFormatter.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "path_or_buf": [],
                "sep": [],
                "na_rep": [],
                "float_format": [],
                "cols": [],
                "header": [],
                "index": [],
                "index_label": [],
                "mode": [],
                "nanRep": [],
                "encoding": [],
                "compression": [],
                "quoting": [],
                "line_terminator": [],
                "chunksize": [],
                "tupleize_cols": [],
                "quotechar": [],
                "date_format": [],
                "doublequote": [],
                "escapechar": [],
                "decimal": []
            }
        },
        "CSVFormatter.save": {
            "name": "save",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/excel.py": {
        "ExcelCell.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": [],
                "val": [],
                "style": [],
                "mergestart": [],
                "mergeend": []
            }
        },
        "CSSToExcelConverter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "inherited": []
            }
        },
        "CSSToExcelConverter.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "declarations_str": []
            }
        },
        "CSSToExcelConverter.build_xlstyle": {
            "name": "build_xlstyle",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "props": []
            }
        },
        "CSSToExcelConverter.build_alignment": {
            "name": "build_alignment",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "props": []
            }
        },
        "CSSToExcelConverter.build_border": {
            "name": "build_border",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "props": []
            }
        },
        "CSSToExcelConverter.build_fill": {
            "name": "build_fill",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "props": []
            }
        },
        "CSSToExcelConverter.build_font": {
            "name": "build_font",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "props": []
            }
        },
        "CSSToExcelConverter.color_to_excel": {
            "name": "color_to_excel",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "CSSToExcelConverter.build_number_format": {
            "name": "build_number_format",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "props": []
            }
        },
        "ExcelFormatter.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "na_rep": [],
                "float_format": [],
                "cols": [],
                "header": [],
                "index": [],
                "index_label": [],
                "merge_cells": [],
                "inf_rep": [],
                "style_converter": []
            }
        },
        "ExcelFormatter.header_style": {
            "name": "header_style",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelFormatter.get_formatted_cells": {
            "name": "get_formatted_cells",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExcelFormatter.write": {
            "name": "write",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "writer": [],
                "sheet_name": [],
                "startrow": [],
                "startcol": [],
                "freeze_panes": [],
                "engine": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/format.py": {
        "format_array": {
            "name": "format_array",
            "location": 87,
            "return": [],
            "arguments": {
                "values": [],
                "formatter": [],
                "float_format": [],
                "na_rep": [],
                "digits": [],
                "space": [],
                "justify": [],
                "decimal": []
            }
        },
        "format_percentiles": {
            "name": "format_percentiles",
            "location": 124,
            "return": [],
            "arguments": {
                "percentiles": []
            }
        },
        "set_eng_float_format": {
            "name": "set_eng_float_format",
            "location": 140,
            "return": [],
            "arguments": {
                "accuracy": [],
                "use_eng_prefix": []
            }
        },
        "get_level_lengths": {
            "name": "get_level_lengths",
            "location": 141,
            "return": [],
            "arguments": {
                "levels": [],
                "sentinel": []
            }
        },
        "buffer_put_lines": {
            "name": "buffer_put_lines",
            "location": 142,
            "return": [],
            "arguments": {
                "buf": [],
                "lines": []
            }
        },
        "CategoricalFormatter.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "categorical": [],
                "buf": [],
                "length": [],
                "na_rep": [],
                "footer": []
            }
        },
        "CategoricalFormatter.to_string": {
            "name": "to_string",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesFormatter.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "series": [],
                "buf": [],
                "length": [],
                "header": [],
                "index": [],
                "na_rep": [],
                "name": [],
                "float_format": [],
                "dtype": [],
                "max_rows": []
            }
        },
        "SeriesFormatter.to_string": {
            "name": "to_string",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextAdjustment.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextAdjustment.len": {
            "name": "len",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TextAdjustment.justify": {
            "name": "justify",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "texts": [],
                "max_len": [],
                "mode": []
            }
        },
        "TextAdjustment.adjoin": {
            "name": "adjoin",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "space": []
            }
        },
        "EastAsianTextAdjustment.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EastAsianTextAdjustment.len": {
            "name": "len",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "EastAsianTextAdjustment.justify": {
            "name": "justify",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "texts": [],
                "max_len": [],
                "mode": []
            }
        },
        "TableFormatter.should_show_dimensions": {
            "name": "should_show_dimensions",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrameFormatter.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "frame": [],
                "buf": [],
                "columns": [],
                "col_space": [],
                "header": [],
                "index": [],
                "na_rep": [],
                "formatters": [],
                "justify": [],
                "float_format": [],
                "sparsify": [],
                "index_names": [],
                "line_width": [],
                "max_rows": [],
                "max_cols": [],
                "show_dimensions": [],
                "decimal": [],
                "table_id": []
            }
        },
        "DataFrameFormatter.to_string": {
            "name": "to_string",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrameFormatter.to_latex": {
            "name": "to_latex",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "column_format": [],
                "longtable": [],
                "encoding": [],
                "multicolumn": [],
                "multicolumn_format": [],
                "multirow": []
            }
        },
        "DataFrameFormatter.to_html": {
            "name": "to_html",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "classes": [],
                "notebook": [],
                "border": []
            }
        },
        "DataFrameFormatter.has_index_names": {
            "name": "has_index_names",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrameFormatter.has_column_names": {
            "name": "has_column_names",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericArrayFormatter.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "digits": [],
                "formatter": [],
                "na_rep": [],
                "space": [],
                "float_format": [],
                "justify": [],
                "decimal": [],
                "quoting": [],
                "fixed_width": []
            }
        },
        "GenericArrayFormatter.get_result": {
            "name": "get_result",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FloatArrayFormatter.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FloatArrayFormatter.get_result_as_array": {
            "name": "get_result_as_array",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Datetime64Formatter.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "nat_rep": [],
                "date_format": []
            }
        },
        "IntervalArrayFormatter.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "CategoricalArrayFormatter.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Timedelta64Formatter.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "nat_rep": [],
                "box": []
            }
        },
        "EngFormatter.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "accuracy": [],
                "use_eng_prefix": []
            }
        },
        "EngFormatter.__call__": {
            "name": "__call__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/html.py": {
        "single_column_table": {
            "name": "single_column_table",
            "location": 32,
            "return": [],
            "arguments": {
                "column": [],
                "align": [],
                "style": []
            }
        },
        "single_row_table": {
            "name": "single_row_table",
            "location": 33,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "HTMLFormatter.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": [],
                "classes": [],
                "max_rows": [],
                "max_cols": [],
                "notebook": [],
                "border": [],
                "table_id": []
            }
        },
        "HTMLFormatter.write": {
            "name": "write",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "indent": []
            }
        },
        "HTMLFormatter.write_th": {
            "name": "write_th",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "indent": [],
                "tags": []
            }
        },
        "HTMLFormatter.write_td": {
            "name": "write_td",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "indent": [],
                "tags": []
            }
        },
        "HTMLFormatter.write_tr": {
            "name": "write_tr",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "line": [],
                "indent": [],
                "indent_delta": [],
                "header": [],
                "align": [],
                "tags": [],
                "nindex_levels": []
            }
        },
        "HTMLFormatter.write_style": {
            "name": "write_style",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLFormatter.write_result": {
            "name": "write_result",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "buf": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/latex.py": {
        "LatexFormatter.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": [],
                "column_format": [],
                "longtable": [],
                "multicolumn": [],
                "multicolumn_format": [],
                "multirow": []
            }
        },
        "LatexFormatter.write_result": {
            "name": "write_result",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "buf": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/printing.py": {
        "adjoin": {
            "name": "adjoin",
            "location": 7,
            "return": [],
            "arguments": {
                "space": []
            }
        },
        "justify": {
            "name": "justify",
            "location": 8,
            "return": [],
            "arguments": {
                "texts": [],
                "max_len": [],
                "mode": []
            }
        },
        "pprint_thing": {
            "name": "pprint_thing",
            "location": 9,
            "return": [],
            "arguments": {
                "thing": [],
                "_nest_lvl": [],
                "escape_chars": [],
                "default_escapes": [],
                "quote_strings": [],
                "max_seq_items": []
            }
        },
        "pprint_thing_encoded": {
            "name": "pprint_thing_encoded",
            "location": 10,
            "return": [],
            "arguments": {
                "object": [],
                "encoding": [],
                "errors": []
            }
        },
        "format_object_summary": {
            "name": "format_object_summary",
            "location": 14,
            "return": [],
            "arguments": {
                "obj": [],
                "formatter": [],
                "is_justify": [],
                "name": []
            }
        },
        "format_object_attrs": {
            "name": "format_object_attrs",
            "location": 15,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/style.py": {
        "Styler.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "precision": [],
                "table_styles": [],
                "uuid": [],
                "caption": [],
                "table_attributes": [],
                "cell_ids": []
            }
        },
        "Styler.to_excel": {
            "name": "to_excel",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "excel_writer": [],
                "sheet_name": [],
                "na_rep": [],
                "float_format": [],
                "columns": [],
                "header": [],
                "index": [],
                "index_label": [],
                "startrow": [],
                "startcol": [],
                "engine": [],
                "merge_cells": [],
                "encoding": [],
                "inf_rep": [],
                "verbose": [],
                "freeze_panes": []
            }
        },
        "Styler.format": {
            "name": "format",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": [],
                "subset": []
            }
        },
        "Styler.render": {
            "name": "render",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Styler.__copy__": {
            "name": "__copy__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Styler.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "memo": []
            }
        },
        "Styler.clear": {
            "name": "clear",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Styler.apply": {
            "name": "apply",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "axis": [],
                "subset": []
            }
        },
        "Styler.applymap": {
            "name": "applymap",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "subset": []
            }
        },
        "Styler.where": {
            "name": "where",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "cond": [],
                "value": [],
                "other": [],
                "subset": []
            }
        },
        "Styler.set_precision": {
            "name": "set_precision",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "precision": []
            }
        },
        "Styler.set_table_attributes": {
            "name": "set_table_attributes",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "attributes": []
            }
        },
        "Styler.export": {
            "name": "export",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Styler.use": {
            "name": "use",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "styles": []
            }
        },
        "Styler.set_uuid": {
            "name": "set_uuid",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "Styler.set_caption": {
            "name": "set_caption",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "caption": []
            }
        },
        "Styler.set_table_styles": {
            "name": "set_table_styles",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "table_styles": []
            }
        },
        "Styler.hide_index": {
            "name": "hide_index",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Styler.hide_columns": {
            "name": "hide_columns",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "subset": []
            }
        },
        "Styler.highlight_null": {
            "name": "highlight_null",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "null_color": []
            }
        },
        "Styler.background_gradient": {
            "name": "background_gradient",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "cmap": [],
                "low": [],
                "high": [],
                "axis": [],
                "subset": [],
                "text_color_threshold": []
            }
        },
        "Styler.set_properties": {
            "name": "set_properties",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "subset": []
            }
        },
        "Styler.bar": {
            "name": "bar",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "subset": [],
                "axis": [],
                "color": [],
                "width": [],
                "align": [],
                "vmin": [],
                "vmax": []
            }
        },
        "Styler.highlight_max": {
            "name": "highlight_max",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "subset": [],
                "color": [],
                "axis": []
            }
        },
        "Styler.highlight_min": {
            "name": "highlight_min",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "subset": [],
                "color": [],
                "axis": []
            }
        },
        "Styler.from_custom_template": {
            "name": "from_custom_template",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [],
                "searchpath": [],
                "name": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/terminal.py": {
        "get_terminal_size": {
            "name": "get_terminal_size",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "is_terminal": {
            "name": "is_terminal",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/formats/__init__.py": {},
    "keanu-master/keanu-python/keanu/stubs/pandas/io/json/json.py": {
        "to_json": {
            "name": "to_json",
            "location": 14,
            "return": [],
            "arguments": {
                "path_or_buf": [],
                "obj": [],
                "orient": [],
                "date_format": [],
                "double_precision": [],
                "force_ascii": [],
                "date_unit": [],
                "default_handler": [],
                "lines": [],
                "compression": [],
                "index": []
            }
        },
        "read_json": {
            "name": "read_json",
            "location": 40,
            "return": [],
            "arguments": {
                "path_or_buf": [],
                "orient": [],
                "typ": [],
                "dtype": [],
                "convert_axes": [],
                "convert_dates": [],
                "keep_default_dates": [],
                "numpy": [],
                "precise_float": [],
                "date_unit": [],
                "encoding": [],
                "lines": [],
                "chunksize": [],
                "compression": []
            }
        },
        "Writer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "orient": [],
                "date_format": [],
                "double_precision": [],
                "ensure_ascii": [],
                "date_unit": [],
                "index": [],
                "default_handler": []
            }
        },
        "Writer.write": {
            "name": "write",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONTableWriter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "orient": [],
                "date_format": [],
                "double_precision": [],
                "ensure_ascii": [],
                "date_unit": [],
                "index": [],
                "default_handler": []
            }
        },
        "JsonReader.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "filepath_or_buffer": [],
                "orient": [],
                "typ": [],
                "dtype": [],
                "convert_axes": [],
                "convert_dates": [],
                "keep_default_dates": [],
                "numpy": [],
                "precise_float": [],
                "date_unit": [],
                "encoding": [],
                "lines": [],
                "chunksize": [],
                "compression": []
            }
        },
        "JsonReader.read": {
            "name": "read",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonReader.close": {
            "name": "close",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonReader.__next__": {
            "name": "__next__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "json": [],
                "orient": [],
                "dtype": [],
                "convert_axes": [],
                "convert_dates": [],
                "keep_default_dates": [],
                "numpy": [],
                "precise_float": [],
                "date_unit": []
            }
        },
        "Parser.check_keys_split": {
            "name": "check_keys_split",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "decoded": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/json/normalize.py": {
        "nested_to_record": {
            "name": "nested_to_record",
            "location": 7,
            "return": [],
            "arguments": {
                "ds": [],
                "prefix": [],
                "sep": [],
                "level": []
            }
        },
        "json_normalize": {
            "name": "json_normalize",
            "location": 8,
            "return": [],
            "arguments": {
                "data": [],
                "record_path": [],
                "meta": [],
                "meta_prefix": [],
                "record_prefix": [],
                "errors": [],
                "sep": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/json/table_schema.py": {
        "as_json_table_type": {
            "name": "as_json_table_type",
            "location": 9,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "set_default_names": {
            "name": "set_default_names",
            "location": 10,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "convert_pandas_type_to_json_field": {
            "name": "convert_pandas_type_to_json_field",
            "location": 11,
            "return": [],
            "arguments": {
                "arr": [],
                "dtype": []
            }
        },
        "convert_json_field_to_pandas_type": {
            "name": "convert_json_field_to_pandas_type",
            "location": 12,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "build_table_schema": {
            "name": "build_table_schema",
            "location": 13,
            "return": [],
            "arguments": {
                "data": [],
                "index": [],
                "primary_key": [],
                "version": []
            }
        },
        "parse_table_schema": {
            "name": "parse_table_schema",
            "location": 14,
            "return": [],
            "arguments": {
                "json": [],
                "precise_float": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/json/__init__.py": {},
    "keanu-master/keanu-python/keanu/stubs/pandas/io/msgpack/exceptions.py": {
        "ExtraData.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "unpacked": [],
                "extra": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/msgpack/_packer.py": {
        "Packer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packer.bytes": {
            "name": "bytes",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packer.pack": {
            "name": "pack",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packer.pack_array_header": {
            "name": "pack_array_header",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packer.pack_ext_type": {
            "name": "pack_ext_type",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packer.pack_map_header": {
            "name": "pack_map_header",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packer.pack_map_pairs": {
            "name": "pack_map_pairs",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packer.reset": {
            "name": "reset",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packer.__reduce__": {
            "name": "__reduce__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packer.__setstate__": {
            "name": "__setstate__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/msgpack/_unpacker.py": {
        "default_read_extended_type": {
            "name": "default_read_extended_type",
            "location": 7,
            "return": [],
            "arguments": {
                "typecode": [],
                "data": []
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "unpackb": {
            "name": "unpackb",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "Unpacker.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.feed": {
            "name": "feed",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.read_array_header": {
            "name": "read_array_header",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.read_bytes": {
            "name": "read_bytes",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.read_map_header": {
            "name": "read_map_header",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.skip": {
            "name": "skip",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.unpack": {
            "name": "unpack",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.__iter__": {
            "name": "__iter__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.__next__": {
            "name": "__next__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.__reduce__": {
            "name": "__reduce__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unpacker.__setstate__": {
            "name": "__setstate__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/msgpack/_version.py": {},
    "keanu-master/keanu-python/keanu/stubs/pandas/io/msgpack/__init__.py": {
        "pack": {
            "name": "pack",
            "location": 12,
            "return": [],
            "arguments": {
                "o": [],
                "stream": []
            }
        },
        "packb": {
            "name": "packb",
            "location": 13,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "ExtType.__new__": {
            "name": "__new__",
            "location": 10,
            "return": [],
            "arguments": {
                "cls": [],
                "code": [],
                "data": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/sas/sas7bdat.py": {
        "SAS7BDATReader.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "path_or_buf": [],
                "index": [],
                "convert_dates": [],
                "blank_missing": [],
                "chunksize": [],
                "encoding": [],
                "convert_text": [],
                "convert_header_text": []
            }
        },
        "SAS7BDATReader.column_data_lengths": {
            "name": "column_data_lengths",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAS7BDATReader.column_data_offsets": {
            "name": "column_data_offsets",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAS7BDATReader.column_types": {
            "name": "column_types",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAS7BDATReader.close": {
            "name": "close",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAS7BDATReader.__next__": {
            "name": "__next__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAS7BDATReader.read": {
            "name": "read",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "nrows": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/sas/sasreader.py": {
        "read_sas": {
            "name": "read_sas",
            "location": 7,
            "return": [],
            "arguments": {
                "filepath_or_buffer": [],
                "format": [],
                "index": [],
                "encoding": [],
                "chunksize": [],
                "iterator": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/sas/sas_constants.py": {},
    "keanu-master/keanu-python/keanu/stubs/pandas/io/sas/sas_xport.py": {
        "XportReader.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "filepath_or_buffer": [],
                "index": [],
                "encoding": [],
                "chunksize": []
            }
        },
        "XportReader.close": {
            "name": "close",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XportReader.__next__": {
            "name": "__next__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XportReader.get_chunk": {
            "name": "get_chunk",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "XportReader.read": {
            "name": "read",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "nrows": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/sas/_sas.py": {
        "__pyx_unpickle_Enum": {
            "name": "__pyx_unpickle_Enum",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.read": {
            "name": "read",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.__reduce__": {
            "name": "__reduce__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.__setstate__": {
            "name": "__setstate__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/pandas/io/sas/__init__.py": {},
    "keanu-master/keanu-python/keanu/stubs/py4j/clientserver.py": {
        "FinalizerWorker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "deque": []
            }
        },
        "FinalizerWorker.run": {
            "name": "run",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaParameters.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "port": [],
                "auto_field": [],
                "auto_close": [],
                "auto_convert": [],
                "eager_load": [],
                "ssl_context": [],
                "enable_memory_management": [],
                "auto_gc": [],
                "read_timeout": [],
                "daemonize_memory_management": [],
                "auth_token": []
            }
        },
        "PythonParameters.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "port": [],
                "daemonize": [],
                "daemonize_connections": [],
                "eager_load": [],
                "ssl_context": [],
                "auto_gc": [],
                "accept_timeout": [],
                "read_timeout": [],
                "propagate_java_exceptions": [],
                "auth_token": []
            }
        },
        "JavaClient.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "java_parameters": [],
                "python_parameters": [],
                "gateway_property": [],
                "finalizer_deque": []
            }
        },
        "JavaClient.garbage_collect_object": {
            "name": "garbage_collect_object",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "target_id": [],
                "enqueue": []
            }
        },
        "JavaClient.set_thread_connection": {
            "name": "set_thread_connection",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "JavaClient.shutdown_gateway": {
            "name": "shutdown_gateway",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaClient.get_thread_connection": {
            "name": "get_thread_connection",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerConnectionGuard.__exit__": {
            "name": "__exit__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "PythonServer.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "java_client": [],
                "java_parameters": [],
                "python_parameters": [],
                "gateway_property": []
            }
        },
        "ClientServerConnection.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "java_parameters": [],
                "python_parameters": [],
                "gateway_property": [],
                "java_client": [],
                "python_server": []
            }
        },
        "ClientServerConnection.connect_to_java_server": {
            "name": "connect_to_java_server",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerConnection.init_socket_from_python_server": {
            "name": "init_socket_from_python_server",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "socket": [],
                "stream": []
            }
        },
        "ClientServerConnection.shutdown_gateway": {
            "name": "shutdown_gateway",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerConnection.start": {
            "name": "start",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerConnection.run": {
            "name": "run",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerConnection.send_command": {
            "name": "send_command",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "ClientServerConnection.close": {
            "name": "close",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "ClientServerConnection.wait_for_commands": {
            "name": "wait_for_commands",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServer.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "java_parameters": [],
                "python_parameters": [],
                "python_server_entry_point": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/compat.py": {
        "items": {
            "name": "items",
            "location": 10,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "iteritems": {
            "name": "iteritems",
            "location": 11,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "next": {
            "name": "next",
            "location": 12,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "isbytestr": {
            "name": "isbytestr",
            "location": 15,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "ispython3bytestr": {
            "name": "ispython3bytestr",
            "location": 16,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "isbytearray": {
            "name": "isbytearray",
            "location": 17,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "bytetoint": {
            "name": "bytetoint",
            "location": 18,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "bytetostr": {
            "name": "bytetostr",
            "location": 19,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "strtobyte": {
            "name": "strtobyte",
            "location": 20,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "hasattr2": {
            "name": "hasattr2",
            "location": 31,
            "return": [],
            "arguments": {
                "o": [],
                "name": []
            }
        },
        "CompatThread.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/finalizer.py": {
        "clear_finalizers": {
            "name": "clear_finalizers",
            "location": 26,
            "return": [],
            "arguments": {
                "clear_all": []
            }
        },
        "ThreadSafeFinalizer.add_finalizer": {
            "name": "add_finalizer",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [],
                "id": [],
                "weak_ref": []
            }
        },
        "ThreadSafeFinalizer.remove_finalizer": {
            "name": "remove_finalizer",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [],
                "id": []
            }
        },
        "ThreadSafeFinalizer.clear_finalizers": {
            "name": "clear_finalizers",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [],
                "clear_all": []
            }
        },
        "Finalizer.add_finalizer": {
            "name": "add_finalizer",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "id": [],
                "weak_ref": []
            }
        },
        "Finalizer.remove_finalizer": {
            "name": "remove_finalizer",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "id": []
            }
        },
        "Finalizer.clear_finalizers": {
            "name": "clear_finalizers",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "clear_all": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/java_collections.py": {
        "JavaIterator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "target_id": [],
                "gateway_client": []
            }
        },
        "JavaIterator.__iter__": {
            "name": "__iter__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaIterator.next": {
            "name": "next",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaMap.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "target_id": [],
                "gateway_client": []
            }
        },
        "JavaMap.__getitem__": {
            "name": "__getitem__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JavaMap.__setitem__": {
            "name": "__setitem__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "JavaMap.__len__": {
            "name": "__len__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaMap.__delitem__": {
            "name": "__delitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JavaMap.__iter__": {
            "name": "__iter__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaMap.__contains__": {
            "name": "__contains__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JavaSet.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "target_id": [],
                "gateway_client": []
            }
        },
        "JavaSet.add": {
            "name": "add",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "JavaSet.discard": {
            "name": "discard",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "JavaSet.remove": {
            "name": "remove",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "JavaSet.clear": {
            "name": "clear",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaSet.__len__": {
            "name": "__len__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaSet.__iter__": {
            "name": "__iter__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaSet.__contains__": {
            "name": "__contains__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "JavaArray.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "target_id": [],
                "gateway_client": []
            }
        },
        "JavaArray.__getitem__": {
            "name": "__getitem__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JavaArray.__setitem__": {
            "name": "__setitem__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "JavaArray.__len__": {
            "name": "__len__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaList.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "target_id": [],
                "gateway_client": []
            }
        },
        "JavaList.__len__": {
            "name": "__len__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaList.__iter__": {
            "name": "__iter__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaList.__setitem__": {
            "name": "__setitem__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "JavaList.__getitem__": {
            "name": "__getitem__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JavaList.__delitem__": {
            "name": "__delitem__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JavaList.__contains__": {
            "name": "__contains__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "JavaList.__add__": {
            "name": "__add__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "JavaList.__radd__": {
            "name": "__radd__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "JavaList.__iadd__": {
            "name": "__iadd__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "JavaList.__mul__": {
            "name": "__mul__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "JavaList.__rmul__": {
            "name": "__rmul__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "JavaList.__imul__": {
            "name": "__imul__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "JavaList.append": {
            "name": "append",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "JavaList.insert": {
            "name": "insert",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "JavaList.extend": {
            "name": "extend",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "other_list": []
            }
        },
        "JavaList.pop": {
            "name": "pop",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JavaList.index": {
            "name": "index",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "start": [],
                "end": []
            }
        },
        "JavaList.count": {
            "name": "count",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "JavaList.sort": {
            "name": "sort",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaList.reverse": {
            "name": "reverse",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaList.remove": {
            "name": "remove",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SetConverter.can_convert": {
            "name": "can_convert",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "SetConverter.convert": {
            "name": "convert",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "gateway_client": []
            }
        },
        "ListConverter.can_convert": {
            "name": "can_convert",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "ListConverter.convert": {
            "name": "convert",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "gateway_client": []
            }
        },
        "MapConverter.can_convert": {
            "name": "can_convert",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "MapConverter.convert": {
            "name": "convert",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "gateway_client": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/java_gateway.py": {
        "get_create_new_process_group_kwargs": {
            "name": "get_create_new_process_group_kwargs",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "set_reuse_address": {
            "name": "set_reuse_address",
            "location": 32,
            "return": [],
            "arguments": {
                "server_socket": []
            }
        },
        "set_default_callback_accept_timeout": {
            "name": "set_default_callback_accept_timeout",
            "location": 33,
            "return": [],
            "arguments": {
                "accept_timeout": []
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 34,
            "return": [],
            "arguments": {
                "name": [],
                "last_version": [],
                "use_instead": [],
                "level": [],
                "raise_exc": []
            }
        },
        "java_import": {
            "name": "java_import",
            "location": 35,
            "return": [],
            "arguments": {
                "jvm_view": [],
                "import_str": []
            }
        },
        "find_jar_path": {
            "name": "find_jar_path",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "launch_gateway": {
            "name": "launch_gateway",
            "location": 37,
            "return": [],
            "arguments": {
                "port": [],
                "jarpath": [],
                "classpath": [],
                "javaopts": [],
                "die_on_exit": [],
                "redirect_stdout": [],
                "redirect_stderr": [],
                "daemonize_redirect": [],
                "java_path": [],
                "create_new_process_group": [],
                "enable_auth": []
            }
        },
        "get_field": {
            "name": "get_field",
            "location": 38,
            "return": [],
            "arguments": {
                "java_object": [],
                "field_name": []
            }
        },
        "set_field": {
            "name": "set_field",
            "location": 39,
            "return": [],
            "arguments": {
                "java_object": [],
                "field_name": [],
                "value": []
            }
        },
        "get_method": {
            "name": "get_method",
            "location": 40,
            "return": [],
            "arguments": {
                "java_object": [],
                "method_name": []
            }
        },
        "is_instance_of": {
            "name": "is_instance_of",
            "location": 41,
            "return": [],
            "arguments": {
                "gateway": [],
                "java_object": [],
                "java_class": []
            }
        },
        "get_java_class": {
            "name": "get_java_class",
            "location": 42,
            "return": [],
            "arguments": {
                "java_class": []
            }
        },
        "quiet_close": {
            "name": "quiet_close",
            "location": 43,
            "return": [],
            "arguments": {
                "closable": []
            }
        },
        "quiet_shutdown": {
            "name": "quiet_shutdown",
            "location": 44,
            "return": [],
            "arguments": {
                "socket_instance": []
            }
        },
        "set_linger": {
            "name": "set_linger",
            "location": 45,
            "return": [],
            "arguments": {
                "a_socket": []
            }
        },
        "check_connection": {
            "name": "check_connection",
            "location": 46,
            "return": [],
            "arguments": {
                "a_socket": [],
                "read_timeout": []
            }
        },
        "gateway_help": {
            "name": "gateway_help",
            "location": 47,
            "return": [],
            "arguments": {
                "gateway_client": [],
                "var": [],
                "pattern": [],
                "short_name": [],
                "display": []
            }
        },
        "do_client_auth": {
            "name": "do_client_auth",
            "location": 48,
            "return": [],
            "arguments": {
                "command": [],
                "input_stream": [],
                "sock": [],
                "auth_token": []
            }
        },
        "NullHandler.emit": {
            "name": "emit",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "OutputConsumer.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "redirect": [],
                "stream": []
            }
        },
        "OutputConsumer.run": {
            "name": "run",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessConsumer.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "proc": [],
                "closable_list": []
            }
        },
        "ProcessConsumer.run": {
            "name": "run",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayParameters.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "port": [],
                "auto_field": [],
                "auto_close": [],
                "auto_convert": [],
                "eager_load": [],
                "ssl_context": [],
                "enable_memory_management": [],
                "read_timeout": [],
                "auth_token": []
            }
        },
        "CallbackServerParameters.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "port": [],
                "daemonize": [],
                "daemonize_connections": [],
                "eager_load": [],
                "ssl_context": [],
                "accept_timeout": [],
                "read_timeout": [],
                "propagate_java_exceptions": [],
                "auth_token": []
            }
        },
        "DummyRLock.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyRLock.acquire": {
            "name": "acquire",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": []
            }
        },
        "DummyRLock.release": {
            "name": "release",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyRLock.__enter__": {
            "name": "__enter__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyRLock.__exit__": {
            "name": "__exit__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "tb": []
            }
        },
        "GatewayConnectionGuard.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "connection": []
            }
        },
        "GatewayConnectionGuard.__enter__": {
            "name": "__enter__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayConnectionGuard.read": {
            "name": "read",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "hint": []
            }
        },
        "GatewayConnectionGuard.__exit__": {
            "name": "__exit__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "GatewayClient.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "port": [],
                "auto_close": [],
                "gateway_property": [],
                "ssl_context": [],
                "gateway_parameters": []
            }
        },
        "GatewayClient.garbage_collect_object": {
            "name": "garbage_collect_object",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "target_id": []
            }
        },
        "GatewayClient.shutdown_gateway": {
            "name": "shutdown_gateway",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayClient.send_command": {
            "name": "send_command",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "command": [],
                "retry": [],
                "binary": []
            }
        },
        "GatewayClient.close": {
            "name": "close",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayConnection.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "gateway_parameters": [],
                "gateway_property": []
            }
        },
        "GatewayConnection.start": {
            "name": "start",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayConnection.close": {
            "name": "close",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "GatewayConnection.shutdown_gateway": {
            "name": "shutdown_gateway",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayConnection.send_command": {
            "name": "send_command",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "JavaMember.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "container": [],
                "target_id": [],
                "gateway_client": []
            }
        },
        "JavaMember.__doc__": {
            "name": "__doc__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaMember.stream": {
            "name": "stream",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaMember.__call__": {
            "name": "__call__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaObject.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "target_id": [],
                "gateway_client": []
            }
        },
        "JavaObject.__doc__": {
            "name": "__doc__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaObject.__getattr__": {
            "name": "__getattr__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "JavaObject.__dir__": {
            "name": "__dir__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaObject.__eq__": {
            "name": "__eq__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "JavaObject.__hash__": {
            "name": "__hash__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaClass.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "fqn": [],
                "gateway_client": []
            }
        },
        "JavaClass.__doc__": {
            "name": "__doc__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaClass.__dir__": {
            "name": "__dir__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaClass.__getattr__": {
            "name": "__getattr__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "JavaClass.__call__": {
            "name": "__call__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaPackage.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "fqn": [],
                "gateway_client": [],
                "jvm_id": []
            }
        },
        "JavaPackage.__dir__": {
            "name": "__dir__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaPackage.__getattr__": {
            "name": "__getattr__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "JVMView.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "gateway_client": [],
                "jvm_name": [],
                "id": [],
                "jvm_object": []
            }
        },
        "JVMView.__dir__": {
            "name": "__dir__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMView.__getattr__": {
            "name": "__getattr__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GatewayProperty.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "auto_field": [],
                "pool": [],
                "enable_memory_management": []
            }
        },
        "JavaGateway.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "gateway_client": [],
                "auto_field": [],
                "python_proxy_port": [],
                "start_callback_server": [],
                "auto_convert": [],
                "eager_load": [],
                "gateway_parameters": [],
                "callback_server_parameters": [],
                "python_server_entry_point": []
            }
        },
        "JavaGateway.set_gateway_client": {
            "name": "set_gateway_client",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "gateway_client": []
            }
        },
        "JavaGateway.__getattr__": {
            "name": "__getattr__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "JavaGateway.get_callback_server": {
            "name": "get_callback_server",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaGateway.start_callback_server": {
            "name": "start_callback_server",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "callback_server_parameters": []
            }
        },
        "JavaGateway.new_jvm_view": {
            "name": "new_jvm_view",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "JavaGateway.new_array": {
            "name": "new_array",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "java_class": []
            }
        },
        "JavaGateway.shutdown": {
            "name": "shutdown",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "raise_exception": []
            }
        },
        "JavaGateway.shutdown_callback_server": {
            "name": "shutdown_callback_server",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "raise_exception": []
            }
        },
        "JavaGateway.close_callback_server": {
            "name": "close_callback_server",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "raise_exception": []
            }
        },
        "JavaGateway.restart_callback_server": {
            "name": "restart_callback_server",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaGateway.close": {
            "name": "close",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "keep_callback_server": [],
                "close_callback_server_connections": []
            }
        },
        "JavaGateway.detach": {
            "name": "detach",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "java_object": []
            }
        },
        "JavaGateway.help": {
            "name": "help",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "var": [],
                "pattern": [],
                "short_name": [],
                "display": []
            }
        },
        "JavaGateway.launch_gateway": {
            "name": "launch_gateway",
            "location": 206,
            "return": [],
            "arguments": {
                "cls": [],
                "port": [],
                "jarpath": [],
                "classpath": [],
                "javaopts": [],
                "die_on_exit": [],
                "redirect_stdout": [],
                "redirect_stderr": [],
                "daemonize_redirect": [],
                "java_path": [],
                "create_new_process_group": [],
                "enable_auth": []
            }
        },
        "CallbackServer.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "pool": [],
                "gateway_client": [],
                "port": [],
                "address": [],
                "callback_server_parameters": []
            }
        },
        "CallbackServer.start": {
            "name": "start",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallbackServer.get_listening_port": {
            "name": "get_listening_port",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallbackServer.get_listening_address": {
            "name": "get_listening_address",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallbackServer.run": {
            "name": "run",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallbackServer.close": {
            "name": "close",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallbackServer.shutdown": {
            "name": "shutdown",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallbackConnection.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "pool": [],
                "input": [],
                "socket_instance": [],
                "gateway_client": [],
                "callback_server_parameters": [],
                "callback_server": []
            }
        },
        "CallbackConnection.run": {
            "name": "run",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallbackConnection.close": {
            "name": "close",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "PythonProxyPool.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonProxyPool.put": {
            "name": "put",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "force_id": []
            }
        },
        "PythonProxyPool.__getitem__": {
            "name": "__getitem__",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PythonProxyPool.__delitem__": {
            "name": "__delitem__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PythonProxyPool.clear": {
            "name": "clear",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonProxyPool.__contains__": {
            "name": "__contains__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PythonProxyPool.__len__": {
            "name": "__len__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/protocol.py": {
        "escape_new_line": {
            "name": "escape_new_line",
            "location": 103,
            "return": [],
            "arguments": {
                "original": []
            }
        },
        "unescape_new_line": {
            "name": "unescape_new_line",
            "location": 104,
            "return": [],
            "arguments": {
                "escaped": []
            }
        },
        "smart_decode": {
            "name": "smart_decode",
            "location": 105,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "encode_float": {
            "name": "encode_float",
            "location": 106,
            "return": [],
            "arguments": {
                "float_value": []
            }
        },
        "encode_bytearray": {
            "name": "encode_bytearray",
            "location": 107,
            "return": [],
            "arguments": {
                "barray": []
            }
        },
        "decode_bytearray": {
            "name": "decode_bytearray",
            "location": 108,
            "return": [],
            "arguments": {
                "encoded": []
            }
        },
        "is_python_proxy": {
            "name": "is_python_proxy",
            "location": 109,
            "return": [],
            "arguments": {
                "parameter": []
            }
        },
        "get_command_part": {
            "name": "get_command_part",
            "location": 110,
            "return": [],
            "arguments": {
                "parameter": [],
                "python_proxy_pool": []
            }
        },
        "get_return_value": {
            "name": "get_return_value",
            "location": 111,
            "return": [],
            "arguments": {
                "answer": [],
                "gateway_client": [],
                "target_id": [],
                "name": []
            }
        },
        "get_error_message": {
            "name": "get_error_message",
            "location": 112,
            "return": [],
            "arguments": {
                "answer": [],
                "gateway_client": []
            }
        },
        "compute_exception_message": {
            "name": "compute_exception_message",
            "location": 113,
            "return": [],
            "arguments": {
                "default_message": [],
                "extra_message": []
            }
        },
        "is_error": {
            "name": "is_error",
            "location": 114,
            "return": [],
            "arguments": {
                "answer": []
            }
        },
        "is_fatal_error": {
            "name": "is_fatal_error",
            "location": 115,
            "return": [],
            "arguments": {
                "answer": []
            }
        },
        "register_output_converter": {
            "name": "register_output_converter",
            "location": 116,
            "return": [],
            "arguments": {
                "output_type": [],
                "converter": []
            }
        },
        "register_input_converter": {
            "name": "register_input_converter",
            "location": 117,
            "return": [],
            "arguments": {
                "converter": [],
                "prepend": []
            }
        },
        "Py4JError.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "cause": []
            }
        },
        "Py4JAuthenticationError.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "cause": []
            }
        },
        "Py4JNetworkError.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "cause": [],
                "when": []
            }
        },
        "Py4JJavaError.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "java_exception": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/signals.py": {
        "make_id": {
            "name": "make_id",
            "location": 7,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Signal.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signal.connect": {
            "name": "connect",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "receiver": [],
                "sender": [],
                "unique_id": []
            }
        },
        "Signal.disconnect": {
            "name": "disconnect",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "receiver": [],
                "sender": [],
                "unique_id": []
            }
        },
        "Signal.send": {
            "name": "send",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/version.py": {},
    "keanu-master/keanu-python/keanu/stubs/py4j/__init__.py": {},
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/benchmark1.py": {
        "callStaticMethodNoParam": {
            "name": "callStaticMethodNoParam",
            "location": 16,
            "return": [],
            "arguments": {
                "iterations": [],
                "staticMethod": []
            }
        },
        "callInstanceMethodWithShortParam": {
            "name": "callInstanceMethodWithShortParam",
            "location": 17,
            "return": [],
            "arguments": {
                "iterations": [],
                "instanceMethod": []
            }
        },
        "callFunc": {
            "name": "callFunc",
            "location": 18,
            "return": [],
            "arguments": {
                "iterations": [],
                "func": []
            }
        },
        "benchmark": {
            "name": "benchmark",
            "location": 19,
            "return": [],
            "arguments": {
                "name": [],
                "func": []
            }
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [],
            "arguments": {
                "iterations": []
            }
        },
        "ComparablePython.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ComparablePython.compareTo": {
            "name": "compareTo",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/byte_string_test.py": {
        "ByteStringTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteStringTest.tearDown": {
            "name": "tearDown",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteStringTest.testByteString": {
            "name": "testByteString",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/client_server_test.py": {
        "start_clientserver_example_server": {
            "name": "start_clientserver_example_server",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "start_short_timeout_clientserver_example_server": {
            "name": "start_short_timeout_clientserver_example_server",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "start_java_clientserver_example_server": {
            "name": "start_java_clientserver_example_server",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "start_java_clientserver_gc_example_server": {
            "name": "start_java_clientserver_gc_example_server",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "start_clientserver_example_app_process": {
            "name": "start_clientserver_example_app_process",
            "location": 12,
            "return": [],
            "arguments": {
                "start_java_client": [],
                "start_short_timeout": [],
                "start_gc_test": [],
                "auth_token": []
            }
        },
        "clientserver_example_app_process": {
            "name": "clientserver_example_app_process",
            "location": 13,
            "return": [],
            "arguments": {
                "start_java_client": [],
                "start_short_timeout": [],
                "start_gc_test": [],
                "join": [],
                "auth_token": []
            }
        },
        "start_java_multi_client_server_app": {
            "name": "start_java_multi_client_server_app",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "start_java_multi_client_server_app_process": {
            "name": "start_java_multi_client_server_app_process",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "java_multi_client_server_app_process": {
            "name": "java_multi_client_server_app_process",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "HelloObjects.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelloObjects.sendObject": {
            "name": "sendObject",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "o1": [],
                "o2": []
            }
        },
        "GarbageCollectionTest.testSendObjects": {
            "name": "testSendObjects",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryTest.testBadRetry": {
            "name": "testBadRetry",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryTest.testGoodRetry": {
            "name": "testGoodRetry",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryTest.testBadRetryFromJava": {
            "name": "testBadRetryFromJava",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryTest.testGoodRetryFromJava": {
            "name": "testGoodRetryFromJava",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testJavaClientPythonServer": {
            "name": "testJavaClientPythonServer",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testJavaClientPythonServerWithAuth": {
            "name": "testJavaClientPythonServerWithAuth",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testBasicJVM": {
            "name": "testBasicJVM",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testErrorInPy4J": {
            "name": "testErrorInPy4J",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testErrorInPythonCallback": {
            "name": "testErrorInPythonCallback",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testErrorInPythonCallbackNoPropagate": {
            "name": "testErrorInPythonCallbackNoPropagate",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testStream": {
            "name": "testStream",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testRecursionWithAutoGC": {
            "name": "testRecursionWithAutoGC",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testJavaGC": {
            "name": "testJavaGC",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testPythonGC": {
            "name": "testPythonGC",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testMultiClientServerWithSharedJavaThread": {
            "name": "testMultiClientServerWithSharedJavaThread",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testMultiClientServer": {
            "name": "testMultiClientServer",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonGetThreadId.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "gateway": []
            }
        },
        "PythonGetThreadId.getThreadId": {
            "name": "getThreadId",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonGetThreadId.getJavaThreadId": {
            "name": "getJavaThreadId",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/finalizer_test.py": {
        "deleted": {
            "name": "deleted",
            "location": 8,
            "return": [],
            "arguments": {
                "accumulator": [],
                "id": []
            }
        },
        "Accumulator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AClass.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "acc": []
            }
        },
        "AClass2.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "acc": []
            }
        },
        "JavaObjecTest.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "acc": []
            }
        },
        "JavaMemberTest.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "container": []
            }
        },
        "TestThreadSafeFinalizer.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThreadSafeFinalizer.work1": {
            "name": "work1",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "acc": []
            }
        },
        "TestThreadSafeFinalizer.work1b": {
            "name": "work1b",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "acc": []
            }
        },
        "TestThreadSafeFinalizer.work2": {
            "name": "work2",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "acc": []
            }
        },
        "TestThreadSafeFinalizer.testFinalizer": {
            "name": "testFinalizer",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThreadSafeFinalizer.work_circ": {
            "name": "work_circ",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "acc": []
            }
        },
        "TestThreadSafeFinalizer.testCircularReference2": {
            "name": "testCircularReference2",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThreadSafeFinalizer.testCleanUp": {
            "name": "testCleanUp",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThreadSafeFinalizer.testCleanUpAll": {
            "name": "testCleanUpAll",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFinalizer.tearDown": {
            "name": "tearDown",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFinalizer.work1": {
            "name": "work1",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "acc": []
            }
        },
        "TestFinalizer.work2": {
            "name": "work2",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "acc": []
            }
        },
        "TestFinalizer.testFinalizer": {
            "name": "testFinalizer",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFinalizer.testCleanUp": {
            "name": "testCleanUp",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFinalizer.testCleanUpAll": {
            "name": "testCleanUpAll",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/instrumented.py": {
        "register_creation": {
            "name": "register_creation",
            "location": 14,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "InstrumentedPythonPing.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "fail": []
            }
        },
        "InstrJavaGateway.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrGatewayClient.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrGatewayProperty.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrGatewayConnection.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrCallbackServer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrCallbackConnection.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrClientServerConnection.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrPythonServer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrJavaClient.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstrClientServer.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/java_array_test.py": {
        "ArrayTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayTest.tearDown": {
            "name": "tearDown",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayTest.testArray": {
            "name": "testArray",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayTest.testCreateArray": {
            "name": "testCreateArray",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayTest.testDoubleArray": {
            "name": "testDoubleArray",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayTest.testFloatArray": {
            "name": "testFloatArray",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayTest.testCharArray": {
            "name": "testCharArray",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/java_callback_test.py": {
        "start_example_server": {
            "name": "start_example_server",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "start_no_mem_example_server": {
            "name": "start_no_mem_example_server",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "start_python_entry_point_server": {
            "name": "start_python_entry_point_server",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "start_example_server2": {
            "name": "start_example_server2",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "start_example_server3": {
            "name": "start_example_server3",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "start_example_app_process": {
            "name": "start_example_app_process",
            "location": 14,
            "return": [],
            "arguments": {
                "app": [],
                "args": []
            }
        },
        "gateway_example_app_process": {
            "name": "gateway_example_app_process",
            "location": 15,
            "return": [],
            "arguments": {
                "app": [],
                "args": []
            }
        },
        "start_example_app_process2": {
            "name": "start_example_app_process2",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "start_example_app_process3": {
            "name": "start_example_app_process3",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "Returner.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "bad_type": []
            }
        },
        "Returner.getChar": {
            "name": "getChar",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Returner.getFloat": {
            "name": "getFloat",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Returner.getInt": {
            "name": "getInt",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Returner.doNothing": {
            "name": "doNothing",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Returner.getNull": {
            "name": "getNull",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FalseAddition.doOperation": {
            "name": "doOperation",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": [],
                "k": []
            }
        },
        "GoodAddition.doOperation": {
            "name": "doOperation",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "CustomBytesOperator.returnBytes": {
            "name": "returnBytes",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "byte_array": []
            }
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "runner_range": [],
                "pool": []
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPool.testPool": {
            "name": "testPool",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleProxy.hello": {
            "name": "hello",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "IHelloImpl.sayHello": {
            "name": "sayHello",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "s": []
            }
        },
        "IHelloFailingImpl.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "IHelloFailingImpl.sayHello": {
            "name": "sayHello",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "s": []
            }
        },
        "PythonEntryPointTest.test_python_entry_point": {
            "name": "test_python_entry_point",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonEntryPointTest.test_python_entry_point_with_auth": {
            "name": "test_python_entry_point_with_auth",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoMemManagementTest.testGC": {
            "name": "testGC",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.setUp": {
            "name": "setUp",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.tearDown": {
            "name": "tearDown",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testShutdown": {
            "name": "testShutdown",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testProxyReturnerFloatErrorTypeConversion": {
            "name": "testProxyReturnerFloatErrorTypeConversion",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testProxyReturnerIntOverflow": {
            "name": "testProxyReturnerIntOverflow",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testProxyReturnerFloat": {
            "name": "testProxyReturnerFloat",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testProxyReturnerChar": {
            "name": "testProxyReturnerChar",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testProxyReturnerVoid": {
            "name": "testProxyReturnerVoid",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testProxyReturnerNull": {
            "name": "testProxyReturnerNull",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testProxy": {
            "name": "testProxy",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testProxyError": {
            "name": "testProxyError",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testGC": {
            "name": "testGC",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testDoubleCallbackServer": {
            "name": "testDoubleCallbackServer",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testMethodConstructor": {
            "name": "testMethodConstructor",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoPropagateTest.setUp": {
            "name": "setUp",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoPropagateTest.tearDown": {
            "name": "tearDown",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoPropagateTest.testProxyError": {
            "name": "testProxyError",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResetCallbackClientTest.setUp": {
            "name": "setUp",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResetCallbackClientTest.tearDown": {
            "name": "tearDown",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResetCallbackClientTest.testProxy": {
            "name": "testProxy",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodicCleanupTest.setUp": {
            "name": "setUp",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodicCleanupTest.tearDown": {
            "name": "tearDown",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodicCleanupTest.testPeriodicCleanup": {
            "name": "testPeriodicCleanup",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodicCleanupTest.testBytes": {
            "name": "testBytes",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.getA": {
            "name": "getA",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceTest.setUp": {
            "name": "setUp",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceTest.tearDown": {
            "name": "tearDown",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceTest.testByteString": {
            "name": "testByteString",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceDeprecatedTest.setUp": {
            "name": "setUp",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceDeprecatedTest.tearDown": {
            "name": "tearDown",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceDeprecatedTest.testByteString": {
            "name": "testByteString",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyStartTest.setUp": {
            "name": "setUp",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyStartTest.tearDown": {
            "name": "tearDown",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyStartTest.testByteString": {
            "name": "testByteString",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/java_dir_test.py": {
        "test_dir_object": {
            "name": "test_dir_object",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_dir_object_fields": {
            "name": "test_dir_object_fields",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_dir_object_shows_manually_called_after_dir": {
            "name": "test_dir_object_shows_manually_called_after_dir",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_dir_object_shows_manually_called_before_dir": {
            "name": "test_dir_object_shows_manually_called_before_dir",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_dir_class": {
            "name": "test_dir_class",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "helper_dir_jvmview": {
            "name": "helper_dir_jvmview",
            "location": 16,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "test_dir_jvmview_default": {
            "name": "test_dir_jvmview_default",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_dir_jvmview_new": {
            "name": "test_dir_jvmview_new",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_dir_jvmview_two": {
            "name": "test_dir_jvmview_two",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_dir_package": {
            "name": "test_dir_package",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/java_gateway_test.py": {
        "stderr_is_polluted": {
            "name": "stderr_is_polluted",
            "location": 15,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "sleep": {
            "name": "sleep",
            "location": 16,
            "return": [],
            "arguments": {
                "sleep_time": []
            }
        },
        "start_echo_server": {
            "name": "start_echo_server",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "start_echo_server_process": {
            "name": "start_echo_server_process",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "start_example_server": {
            "name": "start_example_server",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "start_short_timeout_example_server": {
            "name": "start_short_timeout_example_server",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "start_ipv6_example_server": {
            "name": "start_ipv6_example_server",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "start_example_app_process": {
            "name": "start_example_app_process",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "start_short_timeout_app_process": {
            "name": "start_short_timeout_app_process",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "start_ipv6_app_process": {
            "name": "start_ipv6_app_process",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "check_connection": {
            "name": "check_connection",
            "location": 25,
            "return": [],
            "arguments": {
                "gateway_parameters": []
            }
        },
        "get_socket": {
            "name": "get_socket",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "safe_shutdown": {
            "name": "safe_shutdown",
            "location": 27,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "gateway": {
            "name": "gateway",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "example_app_process": {
            "name": "example_app_process",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "TestConnection.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "return_message": []
            }
        },
        "TestConnection.start": {
            "name": "start",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConnection.stop": {
            "name": "stop",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConnection.send_command": {
            "name": "send_command",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "ProtocolTest.tearDown": {
            "name": "tearDown",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProtocolTest.testEscape": {
            "name": "testEscape",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProtocolTest.testProtocolSend": {
            "name": "testProtocolSend",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProtocolTest.testProtocolReceive": {
            "name": "testProtocolReceive",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.setUp": {
            "name": "setUp",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.tearDown": {
            "name": "tearDown",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testIntegration": {
            "name": "testIntegration",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.testException": {
            "name": "testException",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CloseTest.testNoCallbackServer": {
            "name": "testNoCallbackServer",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CloseTest.testCallbackServer": {
            "name": "testCallbackServer",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.setUp": {
            "name": "setUp",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.tearDown": {
            "name": "tearDown",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.testNoneArg": {
            "name": "testNoneArg",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.testUnicode": {
            "name": "testUnicode",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.testEscape": {
            "name": "testEscape",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldTest.setUp": {
            "name": "setUp",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldTest.tearDown": {
            "name": "tearDown",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldTest.testAutoField": {
            "name": "testAutoField",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldTest.testAutoFieldDeprecated": {
            "name": "testAutoFieldDeprecated",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldTest.testNoField": {
            "name": "testNoField",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldTest.testNoAutoField": {
            "name": "testNoAutoField",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldTest.testSetField": {
            "name": "testSetField",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldTest.testGetMethod": {
            "name": "testGetMethod",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeprecatedTest.setUp": {
            "name": "setUp",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeprecatedTest.test_gateway_client": {
            "name": "test_gateway_client",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeprecatedTest.tearDown": {
            "name": "tearDown",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityTest.setUp": {
            "name": "setUp",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityTest.tearDown": {
            "name": "tearDown",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityTest.testGetJavaClass": {
            "name": "testGetJavaClass",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityTest.testIsInstance": {
            "name": "testIsInstance",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryManagementTest.setUp": {
            "name": "setUp",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryManagementTest.tearDown": {
            "name": "tearDown",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryManagementTest.testNoAttach": {
            "name": "testNoAttach",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryManagementTest.testDetach": {
            "name": "testDetach",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryManagementTest.testGCCollect": {
            "name": "testGCCollect",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryManagementTest.testGCCollectNoMemoryManagement": {
            "name": "testGCCollectNoMemoryManagement",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeConversionTest.setUp": {
            "name": "setUp",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeConversionTest.tearDown": {
            "name": "tearDown",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeConversionTest.testLongInt": {
            "name": "testLongInt",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeConversionTest.testBigDecimal": {
            "name": "testBigDecimal",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeConversionTest.testFloatConversion": {
            "name": "testFloatConversion",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeConversionTest.testUnboxingInt": {
            "name": "testUnboxingInt",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnicodeTest.setUp": {
            "name": "setUp",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnicodeTest.tearDown": {
            "name": "tearDown",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnicodeTest.testUnicodeString": {
            "name": "testUnicodeString",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTest.setUp": {
            "name": "setUp",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTest.tearDown": {
            "name": "tearDown",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTest.testBinarySuccess": {
            "name": "testBinarySuccess",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTest.testBinaryFailure": {
            "name": "testBinaryFailure",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamTest.testNotAStream": {
            "name": "testNotAStream",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteTest.setUp": {
            "name": "setUp",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteTest.tearDown": {
            "name": "tearDown",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteTest.testJavaByteConversion": {
            "name": "testJavaByteConversion",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteTest.testProtocolConversion": {
            "name": "testProtocolConversion",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteTest.testBytesType": {
            "name": "testBytesType",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteTest.testBytesType2": {
            "name": "testBytesType2",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ByteTest.testLargeByteArray": {
            "name": "testLargeByteArray",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionTest.setUp": {
            "name": "setUp",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionTest.tearDown": {
            "name": "tearDown",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionTest.testJavaError": {
            "name": "testJavaError",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionTest.testJavaConstructorError": {
            "name": "testJavaConstructorError",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionTest.doError": {
            "name": "doError",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionTest.testJavaErrorGC": {
            "name": "testJavaErrorGC",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionTest.testReflectionError": {
            "name": "testReflectionError",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionTest.testStrError": {
            "name": "testStrError",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.setUp": {
            "name": "setUp",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.tearDown": {
            "name": "tearDown",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testConstructors": {
            "name": "testConstructors",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testStaticMethods": {
            "name": "testStaticMethods",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testStaticFields": {
            "name": "testStaticFields",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testDefaultImports": {
            "name": "testDefaultImports",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testNone": {
            "name": "testNone",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testJavaGatewayServer": {
            "name": "testJavaGatewayServer",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testJVMView": {
            "name": "testJVMView",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testImport": {
            "name": "testImport",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testEnum": {
            "name": "testEnum",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMTest.testInnerClass": {
            "name": "testInnerClass",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpTest.setUp": {
            "name": "setUp",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpTest.tearDown": {
            "name": "tearDown",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpTest.testHelpObject": {
            "name": "testHelpObject",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpTest.testHelpObjectWithPattern": {
            "name": "testHelpObjectWithPattern",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpTest.testHelpClass": {
            "name": "testHelpClass",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "runner_range": [],
                "gateway": []
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadTest.setUp": {
            "name": "setUp",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadTest.tearDown": {
            "name": "tearDown",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadTest.testStress": {
            "name": "testStress",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.tearDown": {
            "name": "tearDown",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testDefaults": {
            "name": "testDefaults",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testJavaPath": {
            "name": "testJavaPath",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testCreateNewProcessGroup": {
            "name": "testCreateNewProcessGroup",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testJavaopts": {
            "name": "testJavaopts",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testRedirectToNull": {
            "name": "testRedirectToNull",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testRedirectToNullOtherProcessGroup": {
            "name": "testRedirectToNullOtherProcessGroup",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testRedirectToQueue": {
            "name": "testRedirectToQueue",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testRedirectToDeque": {
            "name": "testRedirectToDeque",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testRedirectToFile": {
            "name": "testRedirectToFile",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayLauncherTest.testGatewayAuth": {
            "name": "testGatewayAuth",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WaitOperator.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "sleepTime": []
            }
        },
        "WaitOperator.doOperation": {
            "name": "doOperation",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "IPv6Test.testIpV6": {
            "name": "testIpV6",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryTest.testBadRetry": {
            "name": "testBadRetry",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryTest.testGoodRetry": {
            "name": "testGoodRetry",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryTest.testBadRetryFromJava": {
            "name": "testBadRetryFromJava",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryTest.testGoodRetryFromJava": {
            "name": "testGoodRetryFromJava",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/java_help_test.py": {
        "test_help_object": {
            "name": "test_help_object",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_doc_object": {
            "name": "test_doc_object",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_not_callable": {
            "name": "test_not_callable",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_help_pattern_1": {
            "name": "test_help_pattern_1",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_help_pattern_2": {
            "name": "test_help_pattern_2",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_help_method": {
            "name": "test_help_method",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_doc_method": {
            "name": "test_doc_method",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_help_class": {
            "name": "test_help_class",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_doc_class": {
            "name": "test_doc_class",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/java_list_test.py": {
        "get_list": {
            "name": "get_list",
            "location": 8,
            "return": [],
            "arguments": {
                "count": []
            }
        },
        "AutoConvertTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConvertTest.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConvertTest.testAutoConvert": {
            "name": "testAutoConvert",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConvertTest.testAutoConvertConstructor": {
            "name": "testAutoConvertConstructor",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConvertTest.testAutoConvertNotByteArray": {
            "name": "testAutoConvertNotByteArray",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.testJavaListProtocol": {
            "name": "testJavaListProtocol",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.testJavaListProtocol2": {
            "name": "testJavaListProtocol2",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.testJavaListGetSlice": {
            "name": "testJavaListGetSlice",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.testJavaListDelSlice": {
            "name": "testJavaListDelSlice",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.testJavaListSetSlice": {
            "name": "testJavaListSetSlice",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.testJavaList": {
            "name": "testJavaList",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.testRemove": {
            "name": "testRemove",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.testBinaryOp": {
            "name": "testBinaryOp",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListTest.testException": {
            "name": "testException",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/java_map_test.py": {
        "get_map": {
            "name": "get_map",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "AutoConvertTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConvertTest.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConvertTest.testAutoConvert": {
            "name": "testAutoConvert",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapTest.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapTest.equal_maps": {
            "name": "equal_maps",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "m1": [],
                "m2": []
            }
        },
        "MapTest.testMap": {
            "name": "testMap",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/java_set_test.py": {
        "AutoConvertTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConvertTest.tearDown": {
            "name": "tearDown",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConvertTest.testAutoConvert": {
            "name": "testAutoConvert",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetTest.tearDown": {
            "name": "tearDown",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetTest.testTreeSet": {
            "name": "testTreeSet",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetTest.testHashSet": {
            "name": "testHashSet",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/java_tls_test.py": {
        "start_example_tls_server": {
            "name": "start_example_tls_server",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "start_example_tls_process": {
            "name": "start_example_tls_process",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "Adder.doOperation": {
            "name": "doOperation",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TestIntegration.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.testUnicode": {
            "name": "testUnicode",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.testMethodConstructor": {
            "name": "testMethodConstructor",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/memory_leak_test.py": {
        "start_instrumented_gateway_server": {
            "name": "start_instrumented_gateway_server",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "start_instrumented_clientserver": {
            "name": "start_instrumented_clientserver",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "start_gateway_server_example_app_process": {
            "name": "start_gateway_server_example_app_process",
            "location": 11,
            "return": [],
            "arguments": {
                "start_gateway_server": []
            }
        },
        "gateway_server_example_app_process": {
            "name": "gateway_server_example_app_process",
            "location": 12,
            "return": [],
            "arguments": {
                "start_gateway_server": []
            }
        },
        "assert_python_memory": {
            "name": "assert_python_memory",
            "location": 22,
            "return": [],
            "arguments": {
                "test": [],
                "size": []
            }
        },
        "python_gc": {
            "name": "python_gc",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "HelloState2.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "run_gc": []
            }
        },
        "HelloState2.sayHello": {
            "name": "sayHello",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "int_value": [],
                "string_value": []
            }
        },
        "GatewayServerTest.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayServerTest.testPythonToJava": {
            "name": "testPythonToJava",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayServerTest.testPythonToJavaToPython": {
            "name": "testPythonToJavaToPython",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayServerTest.testPythonToJavaToPythonClose": {
            "name": "testPythonToJavaToPythonClose",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayServerTest.testJavaToPythonToJavaCleanGC": {
            "name": "testJavaToPythonToJavaCleanGC",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayServerTest.testJavaToPythonToJavaNoGC": {
            "name": "testJavaToPythonToJavaNoGC",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayServerTest.testJavaToPythonToJavaCleanGCNoShutdown": {
            "name": "testJavaToPythonToJavaCleanGCNoShutdown",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GatewayServerTest.testJavaToPythonToJavaNoGCNoShutdown": {
            "name": "testJavaToPythonToJavaNoGCNoShutdown",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.testPythonToJava": {
            "name": "testPythonToJava",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.testPythonToJavaToPython": {
            "name": "testPythonToJavaToPython",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.testPythonToJavaToPythonClose": {
            "name": "testPythonToJavaToPythonClose",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.testJavaToPythonToJavaCleanGC": {
            "name": "testJavaToPythonToJavaCleanGC",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.testJavaToPythonToJavaNoGC": {
            "name": "testJavaToPythonToJavaNoGC",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.testJavaToPythonToJavaCleanGCNoShutdown": {
            "name": "testJavaToPythonToJavaCleanGCNoShutdown",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.testJavaToPythonToJavaNoGCNoShutdown": {
            "name": "testJavaToPythonToJavaNoGCNoShutdown",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/multithreadtest.py": {
        "TestJVM1.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "gateway": []
            }
        },
        "TestJVM1.run": {
            "name": "run",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJVM2.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "System": []
            }
        },
        "TestJVM2.run": {
            "name": "run",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJVM3.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "jvm": []
            }
        },
        "TestJVM3.run": {
            "name": "run",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJVM4.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "System": []
            }
        },
        "TestJVM4.run": {
            "name": "run",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMMultiProcessTest.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMMultiProcessTest.tearDown": {
            "name": "tearDown",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMMultiProcessTest.testMultiProcessJVMAccess": {
            "name": "testMultiProcessJVMAccess",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMMultiProcessTest.testMultiProcessSystemReference": {
            "name": "testMultiProcessSystemReference",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMMultiProcessTest.testMultiProcessJVMReference": {
            "name": "testMultiProcessJVMReference",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JVMMultiProcessTest.testMultiProcessJVMError": {
            "name": "testMultiProcessJVMError",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/py4j_callback_example.py": {
        "Addition.doOperation": {
            "name": "doOperation",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": [],
                "k": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/py4j_callback_example2.py": {
        "ClassNone.getName": {
            "name": "getName",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/py4j_callback_listener_example.py": {
        "PythonListener.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "gateway": []
            }
        },
        "PythonListener.notify": {
            "name": "notify",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/py4j_callback_recursive_example.py": {
        "HelloState.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelloState.sayHello": {
            "name": "sayHello",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "int_value": [],
                "string_value": []
            }
        },
        "SimpleHello.sayHello": {
            "name": "sayHello",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "int_value": [],
                "string_value": []
            }
        },
        "RecursiveHello.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "example_obj": []
            }
        },
        "RecursiveHello.sayHello": {
            "name": "sayHello",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "int_value": [],
                "string_value": []
            }
        },
        "JavaHello.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaHello.sayHello": {
            "name": "sayHello",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "int_value": [],
                "string_value": []
            }
        },
        "PythonPing.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "fail": []
            }
        },
        "PythonPing.ping1": {
            "name": "ping1",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PythonPing.ping2": {
            "name": "ping2",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PythonPing.ping3": {
            "name": "ping3",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/py4j_example.py": {},
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/py4j_signals_test.py": {
        "MockListener.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "test_case": []
            }
        },
        "MockListener.started": {
            "name": "started",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "MockListener.connection_started": {
            "name": "connection_started",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "MockListener.connection_stopped": {
            "name": "connection_stopped",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "MockListener.stopped": {
            "name": "stopped",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "MockListener.pre_shutdown": {
            "name": "pre_shutdown",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "MockListener.post_shutdown": {
            "name": "post_shutdown",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "sender": []
            }
        },
        "JavaGatewayTest.test_all_regular_signals_auto_start": {
            "name": "test_all_regular_signals_auto_start",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.test_all_regular_signals": {
            "name": "test_all_regular_signals",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientServerTest.test_signals_started_from_python": {
            "name": "test_signals_started_from_python",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/signals_test.py": {
        "SignalTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignalTest.testConnect": {
            "name": "testConnect",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignalTest.testDisconnect": {
            "name": "testDisconnect",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignalTest.testSend": {
            "name": "testSend",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignalTest.testSendToSender": {
            "name": "testSendToSender",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignalTest.testSendException": {
            "name": "testSendException",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/keanu/stubs/py4j/tests/__init__.py": {},
    "keanu-master/keanu-python/keanu/vertex/base.py": {
        "__cast_to": {
            "name": "__cast_to",
            "location": 370,
            "return": [
                "str",
                "Literal"
            ],
            "arguments": {
                "arg": [
                    "keanu.vartypes.tensor_arg_types",
                    "float",
                    "str"
                ],
                "cast_to_type": [
                    "type",
                    "Set[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "Type[T]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "cast_tensor_arg_to_double": {
            "name": "cast_tensor_arg_to_double",
            "location": 381,
            "return": [
                "eth.chains.base.MiningChain",
                "Dict[str, Any]"
            ],
            "arguments": {
                "arg": [
                    "keanu.vartypes.tensor_arg_types"
                ]
            }
        },
        "cast_tensor_arg_to_integer": {
            "name": "cast_tensor_arg_to_integer",
            "location": 385,
            "return": [
                "eth.chains.base.MiningChain",
                "Dict[str, Any]"
            ],
            "arguments": {
                "arg": [
                    "keanu.vartypes.tensor_arg_types"
                ]
            }
        },
        "cast_tensor_arg_to_boolean": {
            "name": "cast_tensor_arg_to_boolean",
            "location": 389,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "arg": [
                    "keanu.vartypes.tensor_arg_types"
                ]
            }
        },
        "is_floating_type": {
            "name": "is_floating_type",
            "location": 393,
            "return": [
                "str",
                "Optional[str]",
                "keanu.vartypes.primitive_types"
            ],
            "arguments": {
                "other": [
                    "Type",
                    "numpy.array",
                    "bool"
                ]
            }
        },
        "cast_to_double_vertex_if_integer_vertex": {
            "name": "cast_to_double_vertex_if_integer_vertex",
            "location": 400,
            "return": [
                "str",
                "numpy.ndarray",
                "Dict[str, int]",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "vertex": [
                    "str",
                    "int"
                ]
            }
        },
        "Vertex.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val_or_ctor": [
                    "str"
                ],
                "label": [
                    "Optional[str]",
                    "List[str]",
                    "Optional[Tuple[numpy.ndarray, numpy.ndarray]]",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Vertex.cast": {
            "name": "cast",
            "location": 38,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bytes",
                    "str",
                    "bool",
                    "keanu.vartypes.tensor_arg_types"
                ]
            }
        },
        "Vertex.__bool__": {
            "name": "__bool__",
            "location": 41,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__hash__": {
            "name": "__hash__",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.observe": {
            "name": "observe",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "list",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "Vertex.unobserve": {
            "name": "unobserve",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.set_value": {
            "name": "set_value",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Vertex.set_and_cascade": {
            "name": "set_and_cascade",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "bool",
                    "Union[str, int, float]"
                ]
            }
        },
        "Vertex.set_label": {
            "name": "set_label",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]",
                    "bytes",
                    "Union[str, None]"
                ]
            }
        },
        "Vertex.sample": {
            "name": "sample",
            "location": 66,
            "return": [
                "eth.chains.base.MiningChain"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_value": {
            "name": "get_value",
            "location": 69,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.iter_connected_graph": {
            "name": "iter_connected_graph",
            "location": 72,
            "return": [
                "int",
                "Union[base.Criterion, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_id": {
            "name": "get_id",
            "location": 75,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_label": {
            "name": "get_label",
            "location": 78,
            "return": [
                "Optional[str]",
                "str",
                "Union[None, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.get_label_without_outer_namespace": {
            "name": "get_label_without_outer_namespace",
            "location": 82,
            "return": [
                "Optional[str]",
                "Optional[Dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.iter_parents": {
            "name": "iter_parents",
            "location": 86,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.iter_children": {
            "name": "iter_children",
            "location": 89,
            "return": [
                "int",
                "Union[base.Criterion, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.is_observed": {
            "name": "is_observed",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.has_value": {
            "name": "has_value",
            "location": 95,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "Iterable[numpy.dtype]",
                "Callable[[Mapping], T]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__array_ufunc__": {
            "name": "__array_ufunc__",
            "location": 104,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "ufunc": [
                    "str"
                ],
                "method": [
                    "str",
                    "Optional[str]"
                ],
                "input0": [
                    "int",
                    "numpy.ndarray",
                    "torch.Tensor",
                    "List[str]"
                ],
                "_": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "Vertex.__add__": {
            "name": "__add__",
            "location": 129,
            "return": [
                "bool",
                "Tuple[float, float]",
                "Optional[bool]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool"
                ]
            }
        },
        "Vertex.__radd__": {
            "name": "__radd__",
            "location": 134,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__sub__": {
            "name": "__sub__",
            "location": 138,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[int]"
                ]
            }
        },
        "Vertex.__rsub__": {
            "name": "__rsub__",
            "location": 143,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__mul__": {
            "name": "__mul__",
            "location": 147,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[int]"
                ]
            }
        },
        "Vertex.__rmul__": {
            "name": "__rmul__",
            "location": 152,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__pow__": {
            "name": "__pow__",
            "location": 156,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[int]"
                ]
            }
        },
        "Vertex.__rpow__": {
            "name": "__rpow__",
            "location": 161,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__truediv__": {
            "name": "__truediv__",
            "location": 165,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[int]"
                ]
            }
        },
        "Vertex.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 170,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vertex.__floordiv__": {
            "name": "__floordiv__",
            "location": 174,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Vertex.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 181,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "numpy.array",
                    "str"
                ]
            }
        },
        "Vertex.__eq__": {
            "name": "__eq__",
            "location": 186,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[base.WhereSpec]",
                    "Tuple[int, int]"
                ]
            }
        },
        "Vertex.__ne__": {
            "name": "__ne__",
            "location": 190,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, Any]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[base.WhereSpec]",
                    "Tuple[int, int]"
                ]
            }
        },
        "Vertex.__gt__": {
            "name": "__gt__",
            "location": 194,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, Any]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[base.WhereSpec]",
                    "Tuple[int, int]"
                ]
            }
        },
        "Vertex.__ge__": {
            "name": "__ge__",
            "location": 197,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[List[T]]",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "Vertex.__lt__": {
            "name": "__lt__",
            "location": 200,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, Any]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[base.WhereSpec]",
                    "Tuple[int, int]"
                ]
            }
        },
        "Vertex.__le__": {
            "name": "__le__",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[List[T]]",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "Vertex.__abs__": {
            "name": "__abs__",
            "location": 206,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__round__": {
            "name": "__round__",
            "location": 209,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "ndigits": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Vertex.__floor__": {
            "name": "__floor__",
            "location": 214,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__ceil__": {
            "name": "__ceil__",
            "location": 217,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vertex.__parse_args": {
            "name": "__parse_args",
            "location": 221,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "list",
                "Tuple[int]",
                "Union[str, List[Any]]",
                "Union[List[float], List[int]]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "args": []
            }
        },
        "Vertex.__parse_arg": {
            "name": "__parse_arg",
            "location": 225,
            "return": [
                "int",
                "dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "arg": [
                    "Type"
                ]
            }
        },
        "Vertex._from_java_vertex": {
            "name": "_from_java_vertex",
            "location": 236,
            "return": [
                "Optional[bool]",
                "bool",
                "Optional[str]",
                "str",
                "list",
                "Optional[float]"
            ],
            "arguments": {
                "java_vertex": [
                    "py4j.java_gateway.JavaObject",
                    "float",
                    "str",
                    "int",
                    "Union[numpy.ndarray, astropy.units.quantity.Quantity]"
                ]
            }
        },
        "Vertex._to_generator": {
            "name": "_to_generator",
            "location": 251,
            "return": [
                "int",
                "List[str]",
                "dict",
                "bytes",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "java_vertices": [
                    "numpy.ndarray",
                    "float",
                    "Dict[str, numpy.ndarray]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "Vertex._get_python_id": {
            "name": "_get_python_id",
            "location": 255,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "java_vertex": [
                    "py4j.java_gateway.JavaObject",
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "Double.cast": {
            "name": "cast",
            "location": 261,
            "return": [
                "dict",
                "Dict[str, int]",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "keanu.vartypes.tensor_arg_types",
                    "Sequence[Any]",
                    "tensorflow.Tensor"
                ]
            }
        },
        "Integer.cast": {
            "name": "cast",
            "location": 267,
            "return": [
                "dict",
                "Dict[str, int]",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "keanu.vartypes.tensor_arg_types",
                    "Sequence[Any]",
                    "tensorflow.Tensor"
                ]
            }
        },
        "Integer.__array_ufunc__": {
            "name": "__array_ufunc__",
            "location": 270,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "ufunc": [
                    "Dict[str, torch.Tensor]",
                    "Type[T]",
                    "Callable",
                    "str",
                    "Dict[str, str]",
                    "Callable[[], None]",
                    "cmk.base.events.EventContext",
                    "dict"
                ],
                "method": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "input0": [
                    "str",
                    "Mapping[str, Any]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "_": [
                    "Iterable[List[T]]",
                    "numpy.ndarray"
                ]
            }
        },
        "Integer.__op_based_on_other_type": {
            "name": "__op_based_on_other_type",
            "location": 289,
            "return": [
                "Optional[numpy.ndarray]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[str]",
                    "Sequence[numpy.ndarray]"
                ],
                "op": [
                    "bool",
                    "int",
                    "dict",
                    "List[List]",
                    "Union[int, float]"
                ],
                "integer_op_ctr": [
                    "Callable"
                ]
            }
        },
        "Integer.__add__": {
            "name": "__add__",
            "location": 297,
            "return": [
                "bool",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__radd__": {
            "name": "__radd__",
            "location": 303,
            "return": [
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__sub__": {
            "name": "__sub__",
            "location": 309,
            "return": [
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__rsub__": {
            "name": "__rsub__",
            "location": 315,
            "return": [
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__mul__": {
            "name": "__mul__",
            "location": 321,
            "return": [
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__rmul__": {
            "name": "__rmul__",
            "location": 327,
            "return": [
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__pow__": {
            "name": "__pow__",
            "location": 333,
            "return": [
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__rpow__": {
            "name": "__rpow__",
            "location": 339,
            "return": [
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__truediv__": {
            "name": "__truediv__",
            "location": 345,
            "return": [
                "str",
                "numpy.ndarray",
                "Dict[str, int]",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable"
                ]
            }
        },
        "Integer.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 348,
            "return": [
                "str",
                "numpy.ndarray",
                "Dict[str, int]",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable"
                ]
            }
        },
        "Integer.__floordiv__": {
            "name": "__floordiv__",
            "location": 351,
            "return": [
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Integer.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 357,
            "return": [
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Boolean.cast": {
            "name": "cast",
            "location": 366,
            "return": [
                "dict",
                "Dict[str, int]",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "keanu.vartypes.tensor_arg_types",
                    "Sequence[Any]",
                    "tensorflow.Tensor"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/const.py": {
        "Const": {
            "name": "Const",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "t": [],
                "label": [
                    "Optional[str]",
                    "Optional[int]",
                    "list",
                    "Union[str, bool]",
                    "Optional[float]",
                    "dict"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/generated.py": {
        "cast_to_double_vertex": {
            "name": "cast_to_double_vertex",
            "location": 30,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "cast_to_integer_vertex": {
            "name": "cast_to_integer_vertex",
            "location": 34,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "cast_to_boolean_vertex": {
            "name": "cast_to_boolean_vertex",
            "location": 38,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "cast_to_vertex": {
            "name": "cast_to_vertex",
            "location": 42,
            "return": [
                "bool",
                "Type",
                "List[List[str]]",
                "Callable"
            ],
            "arguments": {
                "input": [
                    "base.vertex_constructor_param_types",
                    "Iterable[Mapping[str, Any]]",
                    "Iterable['cirq.Qid']",
                    "Iterable[int]"
                ]
            }
        },
        "Broadcast": {
            "name": "Broadcast",
            "location": 189,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ],
                "to_shape": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ]
            }
        },
        "DiagPart": {
            "name": "DiagPart",
            "location": 193,
            "return": [
                "int",
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Diag": {
            "name": "Diag",
            "location": 197,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "FillTriangular": {
            "name": "FillTriangular",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "bool",
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "fill_upper": [
                    "bool",
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "fill_lower": [
                    "bool",
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "bool",
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Permute": {
            "name": "Permute",
            "location": 205,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]",
                    "int"
                ],
                "rearrange": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]",
                    "int"
                ]
            }
        },
        "Reshape": {
            "name": "Reshape",
            "location": 209,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ],
                "proposed_shape": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ],
                "label": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ]
            }
        },
        "Slice": {
            "name": "Slice",
            "location": 213,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ],
                "dimension": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ],
                "index": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ],
                "label": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ]
            }
        },
        "StridedSlice": {
            "name": "StridedSlice",
            "location": 224,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Collection[int]",
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "int",
                    "bool"
                ],
                "start": [
                    "Collection[int]",
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "int",
                    "bool"
                ],
                "end": [
                    "Collection[int]",
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "int",
                    "bool"
                ],
                "stride": [
                    "Collection[int]",
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "int",
                    "bool"
                ],
                "ellipsis": [
                    "Collection[int]",
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "int",
                    "bool"
                ],
                "upper_bound_stop": [
                    "Collection[int]",
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "int",
                    "bool"
                ],
                "drop_dimension": [
                    "Collection[int]",
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "int",
                    "bool"
                ],
                "label": [
                    "Collection[int]",
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "int",
                    "bool"
                ]
            }
        },
        "Take": {
            "name": "Take",
            "location": 228,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]",
                    "int"
                ],
                "index": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]",
                    "int"
                ]
            }
        },
        "TriLower": {
            "name": "TriLower",
            "location": 232,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "int",
                    "Optional[str]",
                    "Collection[int]",
                    "bool"
                ],
                "k": [
                    "base.vertex_constructor_param_types",
                    "int",
                    "Optional[str]",
                    "Collection[int]",
                    "bool"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "int",
                    "Optional[str]",
                    "Collection[int]",
                    "bool"
                ]
            }
        },
        "TriUpper": {
            "name": "TriUpper",
            "location": 236,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int",
                    "float"
                ],
                "k": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int",
                    "float"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int",
                    "float"
                ]
            }
        },
        "TrianglePart": {
            "name": "TrianglePart",
            "location": 240,
            "return": [
                "int",
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "bool",
                    "Optional[str]"
                ],
                "upper_part": [
                    "base.vertex_constructor_param_types",
                    "bool",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Where": {
            "name": "Where",
            "location": 244,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "predicate": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ],
                "thn": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ],
                "els": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ]
            }
        },
        "BooleanProxy": {
            "name": "BooleanProxy",
            "location": 248,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "shape": [
                    "str",
                    "Collection[int]",
                    "keanu.vartypes.tensor_arg_types",
                    "Optional[str]"
                ],
                "label": [
                    "str",
                    "Collection[int]",
                    "keanu.vartypes.tensor_arg_types",
                    "Optional[str]"
                ]
            }
        },
        "CastNumberToBoolean": {
            "name": "CastNumberToBoolean",
            "location": 252,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "CastToBoolean": {
            "name": "CastToBoolean",
            "location": 256,
            "return": [
                "str",
                "Dict[str, int]",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "ConstantBoolean": {
            "name": "ConstantBoolean",
            "location": 260,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "constant": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "AndBinary": {
            "name": "AndBinary",
            "location": 264,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "OrBinary": {
            "name": "OrBinary",
            "location": 268,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "XorBinary": {
            "name": "XorBinary",
            "location": 272,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Equals": {
            "name": "Equals",
            "location": 276,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "GreaterThanOrEqual": {
            "name": "GreaterThanOrEqual",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "GreaterThan": {
            "name": "GreaterThan",
            "location": 284,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "LessThanOrEqual": {
            "name": "LessThanOrEqual",
            "location": 288,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "LessThan": {
            "name": "LessThan",
            "location": 292,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "NotEquals": {
            "name": "NotEquals",
            "location": 296,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "NumericalEquals": {
            "name": "NumericalEquals",
            "location": 300,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float"
                ],
                "b": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float"
                ],
                "epsilon": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "BooleanConcatenation": {
            "name": "BooleanConcatenation",
            "location": 304,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dimension": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "input": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "BooleanToDoubleMask": {
            "name": "BooleanToDoubleMask",
            "location": 308,
            "return": [
                "str",
                "Dict[str, int]",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "BooleanToIntegerMask": {
            "name": "BooleanToIntegerMask",
            "location": 312,
            "return": [
                "str",
                "Dict[str, int]",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "AllFalse": {
            "name": "AllFalse",
            "location": 316,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "AllTrue": {
            "name": "AllTrue",
            "location": 320,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "AnyFalse": {
            "name": "AnyFalse",
            "location": 324,
            "return": [
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "AnyTrue": {
            "name": "AnyTrue",
            "location": 328,
            "return": [
                "bytearray",
                "Dict[str, int]",
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "IsFinite": {
            "name": "IsFinite",
            "location": 332,
            "return": [
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "IsInfinite": {
            "name": "IsInfinite",
            "location": 336,
            "return": [
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "IsNaN": {
            "name": "IsNaN",
            "location": 340,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "IsNegativeInfinity": {
            "name": "IsNegativeInfinity",
            "location": 344,
            "return": [
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "IsPositiveInfinity": {
            "name": "IsPositiveInfinity",
            "location": 348,
            "return": [
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "NotBinary": {
            "name": "NotBinary",
            "location": 352,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "NotNaN": {
            "name": "NotNaN",
            "location": 356,
            "return": [
                "str",
                "IO",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Bernoulli": {
            "name": "Bernoulli",
            "location": 360,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "prob_true": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Print": {
            "name": "Print",
            "location": 370,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "base.vertex_constructor_param_types"
                ],
                "message": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "base.vertex_constructor_param_types"
                ],
                "print_data": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "CastNumberToInteger": {
            "name": "CastNumberToInteger",
            "location": 374,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "ConstantInteger": {
            "name": "ConstantInteger",
            "location": 378,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "constant": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "IntegerProxy": {
            "name": "IntegerProxy",
            "location": 382,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "shape": [
                    "str",
                    "Collection[int]",
                    "keanu.vartypes.tensor_arg_types",
                    "Optional[str]"
                ],
                "label": [
                    "str",
                    "Collection[int]",
                    "keanu.vartypes.tensor_arg_types",
                    "Optional[str]"
                ]
            }
        },
        "IntegerConcatenation": {
            "name": "IntegerConcatenation",
            "location": 386,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dimension": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "input": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ArgMax": {
            "name": "ArgMax",
            "location": 390,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "axis": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ArgMin": {
            "name": "ArgMin",
            "location": 394,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "axis": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "NaNArgMax": {
            "name": "NaNArgMax",
            "location": 398,
            "return": [
                "str",
                "List[str]",
                "float",
                "Callable"
            ],
            "arguments": {
                "input_vertex": [
                    "int",
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "axis": [
                    "int",
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "int",
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "NaNArgMin": {
            "name": "NaNArgMin",
            "location": 402,
            "return": [
                "str",
                "List[str]",
                "float",
                "Callable"
            ],
            "arguments": {
                "input_vertex": [
                    "int",
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "axis": [
                    "int",
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "int",
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Binomial": {
            "name": "Binomial",
            "location": 406,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "p": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "n": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Geometric": {
            "name": "Geometric",
            "location": 410,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "p": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "keanu.vartypes.tensor_arg_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "keanu.vartypes.tensor_arg_types"
                ]
            }
        },
        "Multinomial": {
            "name": "Multinomial",
            "location": 414,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "n": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "bool"
                ],
                "p": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "bool"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Poisson": {
            "name": "Poisson",
            "location": 418,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "mu": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "keanu.vartypes.tensor_arg_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "keanu.vartypes.tensor_arg_types"
                ]
            }
        },
        "UniformInt": {
            "name": "UniformInt",
            "location": 428,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "min": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "max": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Mod": {
            "name": "Mod",
            "location": 432,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "left": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "right": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "CastNumberToDouble": {
            "name": "CastNumberToDouble",
            "location": 436,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "ConstantDouble": {
            "name": "ConstantDouble",
            "location": 440,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "constant": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "DoubleProxy": {
            "name": "DoubleProxy",
            "location": 444,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "shape": [
                    "str",
                    "Collection[int]",
                    "keanu.vartypes.tensor_arg_types",
                    "Optional[str]"
                ],
                "label": [
                    "str",
                    "Collection[int]",
                    "keanu.vartypes.tensor_arg_types",
                    "Optional[str]"
                ]
            }
        },
        "Concatenation": {
            "name": "Concatenation",
            "location": 448,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "dimension": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "operands": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Beta": {
            "name": "Beta",
            "location": 459,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "alpha": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "beta": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Cauchy": {
            "name": "Cauchy",
            "location": 470,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "location": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "scale": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "ChiSquared": {
            "name": "ChiSquared",
            "location": 474,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "k": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "str"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "str"
                ]
            }
        },
        "Dirichlet": {
            "name": "Dirichlet",
            "location": 484,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "concentration": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "keanu.vartypes.tensor_arg_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "keanu.vartypes.tensor_arg_types"
                ]
            }
        },
        "Exponential": {
            "name": "Exponential",
            "location": 493,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "rate": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "keanu.vartypes.tensor_arg_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types",
                    "keanu.vartypes.tensor_arg_types"
                ]
            }
        },
        "Gamma": {
            "name": "Gamma",
            "location": 502,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "theta": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "k": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Gaussian": {
            "name": "Gaussian",
            "location": 512,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "mu": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "sigma": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "HalfCauchy": {
            "name": "HalfCauchy",
            "location": 516,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scale": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "HalfGaussian": {
            "name": "HalfGaussian",
            "location": 520,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sigma": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "InverseGamma": {
            "name": "InverseGamma",
            "location": 524,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alpha": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "beta": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "KDE": {
            "name": "KDE",
            "location": 535,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "samples": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "bandwidth": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Laplace": {
            "name": "Laplace",
            "location": 539,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "mu": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "beta": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "LogNormal": {
            "name": "LogNormal",
            "location": 550,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "mu": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "sigma": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Logistic": {
            "name": "Logistic",
            "location": 554,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "mu": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "s": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "MultivariateGaussian": {
            "name": "MultivariateGaussian",
            "location": 558,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mu": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "covariance": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Pareto": {
            "name": "Pareto",
            "location": 572,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "location": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "scale": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "StudentT": {
            "name": "StudentT",
            "location": 576,
            "return": [],
            "arguments": {
                "v": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Triangular": {
            "name": "Triangular",
            "location": 580,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "x_min": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "x_max": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "c": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Uniform": {
            "name": "Uniform",
            "location": 591,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "x_min": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float"
                ],
                "x_max": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "ArcTan2": {
            "name": "ArcTan2",
            "location": 602,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Optional[int]",
                    "Tuple[Any, int]"
                ],
                "y": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Optional[int]",
                    "Tuple[Any, int]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Optional[int]",
                    "Tuple[Any, int]"
                ]
            }
        },
        "LogAddExp2": {
            "name": "LogAddExp2",
            "location": 612,
            "return": [
                "bool",
                "Dict[int, Set[int]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "left": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "right": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "LogAddExp": {
            "name": "LogAddExp",
            "location": 616,
            "return": [
                "bool",
                "Dict[int, Set[int]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "left": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "right": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "SafeLogTimes": {
            "name": "SafeLogTimes",
            "location": 620,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "x": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "List[str]"
                ],
                "y": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "List[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "ArcCos": {
            "name": "ArcCos",
            "location": 624,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ArcCosh": {
            "name": "ArcCosh",
            "location": 633,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ArcSin": {
            "name": "ArcSin",
            "location": 642,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ArcSinh": {
            "name": "ArcSinh",
            "location": 651,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ArcTan": {
            "name": "ArcTan",
            "location": 660,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ArcTanh": {
            "name": "ArcTanh",
            "location": 669,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Ceil": {
            "name": "Ceil",
            "location": 678,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "CholeskyDecomposition": {
            "name": "CholeskyDecomposition",
            "location": 688,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "CholeskyInverse": {
            "name": "CholeskyInverse",
            "location": 697,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Cos": {
            "name": "Cos",
            "location": 706,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Cosh": {
            "name": "Cosh",
            "location": 715,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Digamma": {
            "name": "Digamma",
            "location": 724,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Exp2": {
            "name": "Exp2",
            "location": 733,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "ExpM1": {
            "name": "ExpM1",
            "location": 742,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Exp": {
            "name": "Exp",
            "location": 751,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Floor": {
            "name": "Floor",
            "location": 760,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Log10": {
            "name": "Log10",
            "location": 770,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "float",
                "List[dict]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ]
            }
        },
        "Log1p": {
            "name": "Log1p",
            "location": 779,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Log2": {
            "name": "Log2",
            "location": 788,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "float",
                "List[dict]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ]
            }
        },
        "LogGamma": {
            "name": "LogGamma",
            "location": 797,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Log": {
            "name": "Log",
            "location": 806,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "float",
                "List[dict]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "Collection[int]"
                ]
            }
        },
        "MatrixDeterminant": {
            "name": "MatrixDeterminant",
            "location": 815,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vertex": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "keanu.vartypes.tensor_arg_types",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "MatrixInverse": {
            "name": "MatrixInverse",
            "location": 819,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Mean": {
            "name": "Mean",
            "location": 823,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ],
                "over_dimensions": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ],
                "label": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ]
            }
        },
        "ReplaceNaN": {
            "name": "ReplaceNaN",
            "location": 833,
            "return": [
                "str",
                "IO",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float",
                    "int"
                ],
                "replace_with_value": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "float",
                    "int"
                ]
            }
        },
        "Round": {
            "name": "Round",
            "location": 837,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Sigmoid": {
            "name": "Sigmoid",
            "location": 847,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Sin": {
            "name": "Sin",
            "location": 857,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Sinh": {
            "name": "Sinh",
            "location": 866,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "StandardDeviation": {
            "name": "StandardDeviation",
            "location": 875,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Standardize": {
            "name": "Standardize",
            "location": 884,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Tan": {
            "name": "Tan",
            "location": 888,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Tanh": {
            "name": "Tanh",
            "location": 897,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Trigamma": {
            "name": "Trigamma",
            "location": 906,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Addition": {
            "name": "Addition",
            "location": 915,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "left": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "right": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Difference": {
            "name": "Difference",
            "location": 925,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "left": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "right": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Division": {
            "name": "Division",
            "location": 929,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "left": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "right": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "GreaterThanMask": {
            "name": "GreaterThanMask",
            "location": 939,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "right": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "GreaterThanOrEqualToMask": {
            "name": "GreaterThanOrEqualToMask",
            "location": 943,
            "return": [
                "float",
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "left": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "right": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "LessThanMask": {
            "name": "LessThanMask",
            "location": 947,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "right": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "LessThanOrEqualToMask": {
            "name": "LessThanOrEqualToMask",
            "location": 951,
            "return": [
                "float",
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "left": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "right": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "MatrixMultiplication": {
            "name": "MatrixMultiplication",
            "location": 955,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ],
                "right": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ],
                "transpose_left": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ],
                "transpose_right": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Max": {
            "name": "Max",
            "location": 967,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "left": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "right": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Min": {
            "name": "Min",
            "location": 977,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "left": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "right": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Multiplication": {
            "name": "Multiplication",
            "location": 987,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "left": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "right": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Power": {
            "name": "Power",
            "location": 997,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "base": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "exponent": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "TensorMultiplication": {
            "name": "TensorMultiplication",
            "location": 1007,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ],
                "right": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ],
                "dims_left": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ],
                "dims_right": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "SetWithMask": {
            "name": "SetWithMask",
            "location": 1021,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "operand": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "mask": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "set_value": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "Abs": {
            "name": "Abs",
            "location": 1025,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "CumProd": {
            "name": "CumProd",
            "location": 1034,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "requested_dimension": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "CumSum": {
            "name": "CumSum",
            "location": 1038,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "requested_dimension": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "MaxUnary": {
            "name": "MaxUnary",
            "location": 1042,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]"
                ]
            }
        },
        "MinUnary": {
            "name": "MinUnary",
            "location": 1046,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Product": {
            "name": "Product",
            "location": 1050,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Sequence[str]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "input_vertex": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "Optional[str]",
                    "int"
                ],
                "over_dimensions": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "Optional[str]",
                    "int"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Collection[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Sign": {
            "name": "Sign",
            "location": 1054,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ],
                "label": [
                    "Optional[str]",
                    "base.vertex_constructor_param_types"
                ]
            }
        },
        "Sum": {
            "name": "Sum",
            "location": 1063,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "input_vertex": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ],
                "over_dimensions": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ],
                "label": [
                    "Optional[str]",
                    "Collection[int]",
                    "base.vertex_constructor_param_types",
                    "int"
                ]
            }
        },
        "Assert": {
            "name": "Assert",
            "location": 1073,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "predicate": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "str"
                ],
                "error_message": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "str"
                ],
                "label": [
                    "base.vertex_constructor_param_types",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/iff.py": {
        "If": {
            "name": "If",
            "location": 12,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "List[str]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "predicate": [
                    "Union[keanu.vartypes.tensor_arg_types, base.Vertex]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]"
                ],
                "thn": [
                    "Optional[int]"
                ],
                "els": [
                    "Optional[dict]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/label.py": {
        "_VertexLabel.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable[[float], bool]"
                ]
            }
        },
        "_VertexLabel.get_name": {
            "name": "get_name",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_VertexLabel.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str",
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_VertexLabel.create_from_list": {
            "name": "create_from_list",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/keanu/vertex/lambda_model.py": {
        "LambdaModel.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "executor": [
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "update_values": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "List[Dict]"
                ],
                "label": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "LambdaModel.__execute": {
            "name": "__execute",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertices_unwrapped": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "LambdaModel.__update_value": {
            "name": "__update_value",
            "location": 36,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaModel.__to_java_map": {
            "name": "__to_java_map",
            "location": 41,
            "return": [
                "eth.chains.base.MiningChain",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "inputs": [
                    "dict",
                    "str",
                    "Pattern[str]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "LambdaModel.__wrap": {
            "name": "__wrap",
            "location": 46,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "vertices": [
                    "py4j.java_JavaMap",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "LambdaModel.__update_unwrapped_vertices": {
            "name": "__update_unwrapped_vertices",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "vertices_wrapped": [
                    "Dict[str, keanu.vertex.base.Vertex]",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, int]"
                ],
                "vertices_unwrapped": [
                    "py4j.java_JavaMap",
                    "bytes",
                    "Callable",
                    "Dict[str, float]"
                ]
            }
        },
        "LambdaModel.get_double_model_output_vertex": {
            "name": "get_double_model_output_vertex",
            "location": 54,
            "return": [
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "int",
                    "ByteString"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/vertex_casting.py": {
        "do_vertex_cast": {
            "name": "do_vertex_cast",
            "location": 13,
            "return": [
                "str",
                "int",
                "dict",
                "float",
                "tuple"
            ],
            "arguments": {
                "vertex_ctor": [
                    "Callable",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "float"
                ],
                "value": [
                    "Callable",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "float"
                ]
            }
        },
        "do_inferred_vertex_cast": {
            "name": "do_inferred_vertex_cast",
            "location": 17,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Hashable"
            ],
            "arguments": {
                "ctors": [
                    "Union[str, int, float]",
                    "str",
                    "T",
                    "list"
                ],
                "value": [
                    "str",
                    "T",
                    "int",
                    "type",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "cast_to_double_tensor": {
            "name": "cast_to_double_tensor",
            "location": 28,
            "return": [
                "str",
                "int",
                "dict",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {
                "value": [
                    "keanu.vartypes.tensor_arg_types",
                    "float",
                    "torch.Tensor",
                    "T",
                    "bool",
                    "str"
                ]
            }
        },
        "cast_to_integer_tensor": {
            "name": "cast_to_integer_tensor",
            "location": 32,
            "return": [
                "str",
                "int",
                "dict",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {
                "value": [
                    "keanu.vartypes.tensor_arg_types",
                    "float",
                    "torch.Tensor",
                    "T",
                    "bool",
                    "str"
                ]
            }
        },
        "cast_to_boolean_tensor": {
            "name": "cast_to_boolean_tensor",
            "location": 36,
            "return": [
                "str",
                "int",
                "dict",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {
                "value": [
                    "keanu.vartypes.tensor_arg_types",
                    "float",
                    "torch.Tensor",
                    "T",
                    "bool",
                    "str"
                ]
            }
        },
        "cast_to_double": {
            "name": "cast_to_double",
            "location": 40,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "cast_to_integer": {
            "name": "cast_to_integer",
            "location": 44,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "cast_to_boolean": {
            "name": "cast_to_boolean",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "cast_to_long_array": {
            "name": "cast_to_long_array",
            "location": 52,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "cast_to_int_array": {
            "name": "cast_to_int_array",
            "location": 56,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "cast_to_boolean_array": {
            "name": "cast_to_boolean_array",
            "location": 60,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "cast_to_vertex_array": {
            "name": "cast_to_vertex_array",
            "location": 64,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "input": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "keanu-master/keanu-python/keanu/vertex/__init__.py": {},
    "keanu-master/keanu-python/nd4j/setup.py": {},
    "keanu-master/keanu-python/nd4j/nd4j/__init__.py": {
        "get_classpath": {
            "name": "get_classpath",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/nd4j/nd4j/__version__.py": {},
    "keanu-master/keanu-python/tests/conftest.py": {
        "make_tests_deterministic": {
            "name": "make_tests_deterministic",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "int"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_base.py": {
        "java_list_wrapper": {
            "name": "java_list_wrapper",
            "location": 8,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {}
        },
        "test_you_can_call_a_java_method_on_the_unwrapped_object": {
            "name": "test_you_can_call_a_java_method_on_the_unwrapped_object",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "java_list_wrapper": [
                    "str",
                    "list",
                    "Optional[List[str]]",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "test_you_cannot_call_a_java_method_with_snake_case_on_the_unwrapped_object": {
            "name": "test_you_cannot_call_a_java_method_with_snake_case_on_the_unwrapped_object",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "java_list_wrapper": [
                    "str",
                    "list",
                    "Optional[List[str]]",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "test_you_cannot_call_a_java_method_with_snake_case_on_the_wrapped_object": {
            "name": "test_you_cannot_call_a_java_method_with_snake_case_on_the_wrapped_object",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "java_list_wrapper": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_you_can_overload_a_java_method_in_python": {
            "name": "test_you_can_overload_a_java_method_in_python",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "java_list_wrapper": [
                    "str",
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "test_you_cannot_call_a_java_method_that_hasnt_been_overloaded": {
            "name": "test_you_cannot_call_a_java_method_that_hasnt_been_overloaded",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "java_list_wrapper": [
                    "str"
                ]
            }
        },
        "test_throws_if_not_unwrapped_and_passed_to_java_object": {
            "name": "test_throws_if_not_unwrapped_and_passed_to_java_object",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "java_list_wrapper": [
                    "str",
                    "Union[None, dict]",
                    "dict"
                ]
            }
        },
        "java_list_wrapper.JavaListWrapper.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "numbers": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "java_list_wrapper.JavaListWrapper.get": {
            "name": "get",
            "location": 19,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_cast.py": {
        "test_scalar_cast": {
            "name": "test_scalar_cast",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "type",
                    "Callable",
                    "keanu.vartypes.primitive_types",
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex"
                ],
                "cast_fn": [
                    "type",
                    "Callable",
                    "keanu.vartypes.primitive_types",
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex"
                ],
                "expected_type": [
                    "type",
                    "Callable",
                    "keanu.vartypes.primitive_types",
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex"
                ]
            }
        },
        "test_nonscalar_tensor_cast": {
            "name": "test_nonscalar_tensor_cast",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "type",
                    "Callable",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "cast_fn": [
                    "type",
                    "Callable",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "expected_type": [
                    "type",
                    "Callable",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_nonscalar_vertex_cast": {
            "name": "test_nonscalar_vertex_cast",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "type",
                    "Callable",
                    "keanu.vartypes.primitive_types",
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex"
                ],
                "cast_fn": [
                    "type",
                    "Callable",
                    "keanu.vartypes.primitive_types",
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex"
                ],
                "expected_type": [
                    "type",
                    "Callable",
                    "keanu.vartypes.primitive_types",
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex"
                ]
            }
        },
        "test_cant_pass_vertex_to_cast_tensor_arg": {
            "name": "test_cant_pass_vertex_to_cast_tensor_arg",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "cast_fn": [
                    "Callable",
                    "str"
                ],
                "cast_to_type": [
                    "type",
                    "Type[Any]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_coal_mining.py": {
        "test_coalmining": {
            "name": "test_coalmining",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_const.py": {
        "generic": {
            "name": "generic",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_const_takes_ndarray": {
            "name": "test_const_takes_ndarray",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "Iterable[str]",
                    "List[List[keanu.vartypes.primitive_types]]",
                    "Iterable[int]",
                    "T",
                    "float",
                    "AbstractSet[Any]"
                ],
                "expected_java_class": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_const_takes_panda_series": {
            "name": "test_const_takes_panda_series",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "List[List[int]]",
                    "Dict[str, str]",
                    "Type[Dict[str, Any]]",
                    "Union[Dict, List]"
                ],
                "expected_java_class": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_const_takes_panda_dataframe": {
            "name": "test_const_takes_panda_dataframe",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "expected_java_class": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_const_takes_num": {
            "name": "test_const_takes_num",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "num": [
                    "bool",
                    "list",
                    "int",
                    "float"
                ],
                "expected_java_class": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_const_does_not_take_generic_ndarray": {
            "name": "test_const_does_not_take_generic_ndarray",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "generic": [
                    "List[numpy.ndarray]",
                    "numpy.ndarray",
                    "keanu.vartypes.primitive_types",
                    "str",
                    "int"
                ]
            }
        },
        "test_const_does_not_take_generic": {
            "name": "test_const_does_not_take_generic",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "generic": [
                    "str"
                ]
            }
        },
        "test_const_does_not_take_empty_ndarray": {
            "name": "test_const_does_not_take_empty_ndarray",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_const_takes_ndarray_of_rank_one": {
            "name": "test_const_takes_ndarray_of_rank_one",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_const_takes_label": {
            "name": "test_const_takes_label",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_const_takes_none_label": {
            "name": "test_const_takes_none_label",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_java_class": {
            "name": "assert_java_class",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "java_object_wrapper": [
                    "str"
                ],
                "java_class_str": [
                    "str"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_context.py": {
        "test_the_context_is_a_singleton": {
            "name": "test_the_context_is_a_singleton",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_there_is_only_one_jvm_view": {
            "name": "test_there_is_only_one_jvm_view",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_convert_a_numpy_array_to_a_java_array": {
            "name": "test_you_can_convert_a_numpy_array_to_a_java_array",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_create_vertex_array_from_different_types": {
            "name": "test_you_can_create_vertex_array_from_different_types",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_descriptions.py": {
        "test_simple_if_vertex_description_created_correctly": {
            "name": "test_simple_if_vertex_description_created_correctly",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_binary_op_description": {
            "name": "test_simple_binary_op_description",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_gradient_optimization.py": {
        "model": {
            "name": "model",
            "location": 10,
            "return": [
                "allennlp.models.model.Model"
            ],
            "arguments": {}
        },
        "test_gradient_op_bayes_net": {
            "name": "test_gradient_op_bayes_net",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_gradient_op_vertex": {
            "name": "test_gradient_op_vertex",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "TestModule.Model",
                    "bool"
                ]
            }
        },
        "test_gradient_op_throws_with_invalid_net_param": {
            "name": "test_gradient_op_throws_with_invalid_net_param",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gradient_can_set_max_eval_builder_properties_for_conjugate_gradient": {
            "name": "test_gradient_can_set_max_eval_builder_properties_for_conjugate_gradient",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "TestModule.Model",
                    "int"
                ]
            }
        },
        "test_thermometers_map_gradient_with_conjugate_gradient": {
            "name": "test_thermometers_map_gradient_with_conjugate_gradient",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "TestModule.Model",
                    "bool"
                ]
            }
        },
        "test_thermometers_map_gradient_with_adam": {
            "name": "test_thermometers_map_gradient_with_adam",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "TestModule.Model",
                    "bool"
                ]
            }
        },
        "thermometers_map_gradient": {
            "name": "thermometers_map_gradient",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "str",
                    "dict",
                    "Set[int]"
                ],
                "algorithm": [
                    "Union['Contributor', 'Coverage']",
                    "rflx.model.Model",
                    "Optional[float]",
                    "allennlp.models.model.Model"
                ]
            }
        },
        "test_thermometers_likelihood_gradient_for_conjugate_gradient": {
            "name": "test_thermometers_likelihood_gradient_for_conjugate_gradient",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "TestModule.Model",
                    "bool"
                ]
            }
        },
        "test_thermometers_likelihood_gradient_for_adam": {
            "name": "test_thermometers_likelihood_gradient_for_adam",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "TestModule.Model",
                    "bool"
                ]
            }
        },
        "thermometers_max_likelihood_gradient": {
            "name": "thermometers_max_likelihood_gradient",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "str",
                    "dict",
                    "Set[int]"
                ],
                "algorithm": [
                    "Union['Contributor', 'Coverage']",
                    "rflx.model.Model",
                    "Optional[float]",
                    "allennlp.models.model.Model"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_if.py": {
        "test_you_can_create_a_double_valued_if": {
            "name": "test_you_can_create_a_double_valued_if",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "bool",
                    "Union[List, Dict]",
                    "List[str]",
                    "float"
                ],
                "data": [
                    "Union[keanu.vartypes.tensor_arg_types, keanu.vertex.Vertex]"
                ]
            }
        },
        "test_you_can_create_an_integer_valued_if": {
            "name": "test_you_can_create_an_integer_valued_if",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "Union[List, Dict]",
                    "List[str]",
                    "float",
                    "bool"
                ],
                "data": [
                    "Union[keanu.vartypes.tensor_arg_types, keanu.vertex.Vertex]"
                ]
            }
        },
        "test_you_can_create_a_boolean_valued_if": {
            "name": "test_you_can_create_a_boolean_valued_if",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "bool",
                    "Union[List, Dict]",
                    "List[str]",
                    "float"
                ],
                "data": [
                    "Union[keanu.vartypes.tensor_arg_types, keanu.vertex.Vertex]"
                ]
            }
        },
        "test_if_thn_or_els_is_not_float_it_gets_coerced": {
            "name": "test_if_thn_or_els_is_not_float_it_gets_coerced",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "thn": [
                    "Optional[\"Game\"]",
                    "Optional[int]",
                    "Callable[[int], Tuple]"
                ],
                "els": [
                    "Optional[\"Game\"]",
                    "Optional[int]",
                    "Callable[[int], Tuple]"
                ]
            }
        },
        "test_if_thn_or_els_is_not_int_it_gets_coerced": {
            "name": "test_if_thn_or_els_is_not_int_it_gets_coerced",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "thn": [
                    "Optional[\"Game\"]",
                    "Optional[int]",
                    "Callable[[int], Tuple]"
                ],
                "els": [
                    "Optional[\"Game\"]",
                    "Optional[int]",
                    "Callable[[int], Tuple]"
                ]
            }
        },
        "test_if_predicate_is_not_bool_it_gets_coerced": {
            "name": "test_if_predicate_is_not_bool_it_gets_coerced",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "pred": [
                    "bool"
                ]
            }
        },
        "test_you_get_a_useful_error_message_when_you_use_a_boolean_vertex_in_a_python_if_clause": {
            "name": "test_you_get_a_useful_error_message_when_you_use_a_boolean_vertex_in_a_python_if_clause",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_init.py": {
        "test_version_is_correctly_formatted": {
            "name": "test_version_is_correctly_formatted",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_iterator.py": {
        "test_it_tells_you_when_it_is_finished": {
            "name": "test_it_tells_you_when_it_is_finished",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_throws_if_you_pass_the_end": {
            "name": "test_it_throws_if_you_pass_the_end",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_an_empty_python_iterator_yields_an_empty_java_iterator": {
            "name": "test_an_empty_python_iterator_yields_an_empty_java_iterator",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_java_exception.py": {
        "test_you_can_get_info_from_a_java_exception": {
            "name": "test_you_can_get_info_from_a_java_exception",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_throw_a_java_exception": {
            "name": "test_you_can_throw_a_java_exception",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_its_repr_method_gives_you_the_stack_trace": {
            "name": "test_its_repr_method_gives_you_the_stack_trace",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_keanu_random.py": {
        "test_default_keanu_random": {
            "name": "test_default_keanu_random",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_seeded_keanu_random": {
            "name": "test_seeded_keanu_random",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_labels.py": {
        "test_you_can_create_a_label_with_a_name": {
            "name": "test_you_can_create_a_label_with_a_name",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_create_a_label_from_a_dot_separated_string": {
            "name": "test_you_can_create_a_label_from_a_dot_separated_string",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_there_is_a_helper_method_to_build_the_string_from_a_list": {
            "name": "test_there_is_a_helper_method_to_build_the_string_from_a_list",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_cannot_build_it_with_an_empty_list": {
            "name": "test_you_cannot_build_it_with_an_empty_list",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_the_repr_method_makes_it_clear_what_the_namespace_is": {
            "name": "test_the_repr_method_makes_it_clear_what_the_namespace_is",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_lambdas.py": {
        "plus_one": {
            "name": "plus_one",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "vertices": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_you_can_create_a_lambda_model_vertex": {
            "name": "test_you_can_create_a_lambda_model_vertex",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_create_a_process_model_vertex": {
            "name": "test_you_can_create_a_process_model_vertex",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "evaluate_and_check_for_increment": {
            "name": "evaluate_and_check_for_increment",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "str",
                    "bool"
                ],
                "v_in": [
                    "keanu.vertex.Vertex",
                    "bool",
                    "int",
                    "tuple",
                    "float"
                ]
            }
        },
        "BlackBoxProcess.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [
                    "IO[str]",
                    "str",
                    "int"
                ]
            }
        },
        "BlackBoxProcess.run": {
            "name": "run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertices": [
                    "str",
                    "list"
                ]
            }
        },
        "BlackBoxProcess.extract_values": {
            "name": "extract_values",
            "location": 19,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_lorenz.py": {
        "test_lorenz": {
            "name": "test_lorenz",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_time": {
            "name": "add_time",
            "location": 54,
            "return": [
                "List[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "current": [
                    "Tuple[keanu.vertex.Vertex, keanu.vertex.Vertex, keanu.vertex.Vertex]",
                    "str",
                    "Union[str, int]",
                    "numpy.ndarray"
                ]
            }
        },
        "build_graph": {
            "name": "build_graph",
            "location": 64,
            "return": [
                "typing.Generator[typing.Tuple[keanu.vertex.Vertex, keanu.vertex.Vertex, keanu.vertex.Vertex], None, None]"
            ],
            "arguments": {
                "initial": [
                    "Tuple[keanu.vertex.Vertex, keanu.vertex.Vertex, keanu.vertex.Vertex]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "apply_observations": {
            "name": "apply_observations",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "graph_time_steps": [
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "window": [
                    "Optional[int]",
                    "Tuple[int, int]",
                    "numpy.ndarray",
                    "Callable[[str, str], float]",
                    "int"
                ],
                "observed": [
                    "int",
                    "bool",
                    "float",
                    "bytes"
                ]
            }
        },
        "get_time_slice_values": {
            "name": "get_time_slice_values",
            "location": 81,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "time_steps": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "time": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_model.py": {
        "test_to_bayes_net": {
            "name": "test_to_bayes_net",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_bayes_net_excludes_non_vertices": {
            "name": "test_to_bayes_net_excludes_non_vertices",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_net.py": {
        "test_construct_bayes_net": {
            "name": "test_construct_bayes_net",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_get_vertices_from_bayes_net": {
            "name": "test_can_get_vertices_from_bayes_net",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "get_method": [
                    "str",
                    "Callable[[], str]",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[bytes]"
                ],
                "latent": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, List['WantedGallery']]",
                    "T",
                    "int",
                    "float"
                ],
                "observed": [
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "continuous": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, List['WantedGallery']]",
                    "T",
                    "int",
                    "float"
                ],
                "discrete": [
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "deterministic": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_probe_for_non_zero_probability_from_bayes_net": {
            "name": "test_probe_for_non_zero_probability_from_bayes_net",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_loaded_net": {
            "name": "check_loaded_net",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "int",
                    "bool"
                ]
            }
        },
        "check_dot_file": {
            "name": "check_dot_file",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "dot_file_name": [
                    "str"
                ]
            }
        },
        "test_can_save_and_load": {
            "name": "test_can_save_and_load",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_can_dot_save_list_of_vertices": {
            "name": "test_can_dot_save_list_of_vertices",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_dot_save_only_takes_bayes_net_or_list": {
            "name": "test_dot_save_only_takes_bayes_net_or_list",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_get_vertex_by_label": {
            "name": "test_get_vertex_by_label",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_non_gradient_optimization.py": {
        "model": {
            "name": "model",
            "location": 10,
            "return": [
                "Callable",
                "Optional[str]",
                "Type"
            ],
            "arguments": {}
        },
        "test_non_gradient_op_bayes_net": {
            "name": "test_non_gradient_op_bayes_net",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "test_non_gradient_op_vertex": {
            "name": "test_non_gradient_op_vertex",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "bool",
                    "TestModule.Model"
                ]
            }
        },
        "test_non_gradient_op_throws_with_invalid_net_param": {
            "name": "test_non_gradient_op_throws_with_invalid_net_param",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_gradient_can_set_max_eval_builder_properties": {
            "name": "test_non_gradient_can_set_max_eval_builder_properties",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "int",
                    "TestModule.Model"
                ]
            }
        },
        "test_non_gradient_can_set_bounds_range_builder_properties": {
            "name": "test_non_gradient_can_set_bounds_range_builder_properties",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "TestModule.Model",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_map_non_gradient": {
            "name": "test_map_non_gradient",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "int",
                    "TestModule.Model"
                ]
            }
        },
        "test_max_likelihood_non_gradient": {
            "name": "test_max_likelihood_non_gradient",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "int",
                    "TestModule.Model"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_proposal_distributions.py": {
        "net": {
            "name": "net",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_you_can_create_a_prior_proposal_distribution": {
            "name": "test_you_can_create_a_prior_proposal_distribution",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "keanu.BayesNet",
                    "keanu.vartypes.tensor_arg_types",
                    "int",
                    "Dict[type, Any]"
                ]
            }
        },
        "test_you_can_create_a_gaussian_proposal_distribution": {
            "name": "test_you_can_create_a_gaussian_proposal_distribution",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "sigma": [
                    "keanu.BayesNet",
                    "keanu.vartypes.tensor_arg_types",
                    "int",
                    "Dict[type, Any]"
                ],
                "net": [
                    "keanu.BayesNet",
                    "keanu.vartypes.tensor_arg_types",
                    "int",
                    "Dict[type, Any]"
                ]
            }
        },
        "test_it_throws_if_you_specify_gaussian_without_a_value_for_sigma": {
            "name": "test_it_throws_if_you_specify_gaussian_without_a_value_for_sigma",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "keanu.BayesNet",
                    "keanu.vartypes.tensor_arg_types",
                    "Optional[List[str]]",
                    "Dict[type, Any]"
                ]
            }
        },
        "test_it_throws_if_you_specify_gaussian_with_not_enough_sigmas_for_each_latent": {
            "name": "test_it_throws_if_you_specify_gaussian_with_not_enough_sigmas_for_each_latent",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "keanu.BayesNet",
                    "keanu.vartypes.tensor_arg_types",
                    "int",
                    "Dict[type, Any]"
                ]
            }
        },
        "test_it_throws_if_you_specify_gaussian_without_values_for_latents": {
            "name": "test_it_throws_if_you_specify_gaussian_without_values_for_latents",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_throws_if_you_specify_gaussian_with_empty_list_of_latents": {
            "name": "test_it_throws_if_you_specify_gaussian_with_empty_list_of_latents",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "keanu.BayesNet"
                ]
            }
        },
        "test_it_throws_if_you_specify_sigma_but_the_type_isnt_gaussian": {
            "name": "test_it_throws_if_you_specify_sigma_but_the_type_isnt_gaussian",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_throws_if_it_doesnt_recognise_the_type": {
            "name": "test_it_throws_if_it_doesnt_recognise_the_type",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_sampling.py": {
        "net": {
            "name": "net",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "tensor_net": {
            "name": "tensor_net",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_sampling_returns_dict_of_list_of_ndarrays_for_vertices_in_sample_from": {
            "name": "test_sampling_returns_dict_of_list_of_ndarrays_for_vertices_in_sample_from",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "algo": [
                    "Callable"
                ],
                "net": [
                    "int",
                    "pandas.DataFrame",
                    "keanu.BayesNet"
                ]
            }
        },
        "test_sampling_returns_multi_indexed_dict_of_list_of_scalars_for_tensor_in_sample_from": {
            "name": "test_sampling_returns_multi_indexed_dict_of_list_of_scalars_for_tensor_in_sample_from",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "algo": [
                    "dict"
                ],
                "tensor_net": [
                    "keanu.BayesNet",
                    "int",
                    "pandas.DataFrame",
                    "keanu.vartypes.tensor_arg_types"
                ]
            }
        },
        "test_sampling_returns_multi_indexed_dict_of_list_of_scalars_for_mixed_net": {
            "name": "test_sampling_returns_multi_indexed_dict_of_list_of_scalars_for_mixed_net",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "algo": [
                    "dict"
                ]
            }
        },
        "test_sample_dict_can_be_loaded_in_to_dataframe": {
            "name": "test_sample_dict_can_be_loaded_in_to_dataframe",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "int",
                    "keanu.BayesNet",
                    "pandas.DataFrame"
                ]
            }
        },
        "test_multi_indexed_sample_dict_can_be_loaded_in_to_dataframe": {
            "name": "test_multi_indexed_sample_dict_can_be_loaded_in_to_dataframe",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "tensor_net": [
                    "keanu.BayesNet",
                    "int",
                    "pandas.DataFrame",
                    "Optional[List[str]]"
                ]
            }
        },
        "test_dropping_samples": {
            "name": "test_dropping_samples",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "str"
                ]
            }
        },
        "test_down_sample_interval": {
            "name": "test_down_sample_interval",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "str"
                ]
            }
        },
        "test_sample_with_plot": {
            "name": "test_sample_with_plot",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "keanu.BayesNet",
                    "str"
                ]
            }
        },
        "test_can_specify_a_gaussian_proposal_distribution": {
            "name": "test_can_specify_a_gaussian_proposal_distribution",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "keanu.BayesNet"
                ]
            }
        },
        "test_can_specify_a_gaussian_proposal_distribution_with_multiple_sigmas": {
            "name": "test_can_specify_a_gaussian_proposal_distribution_with_multiple_sigmas",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "keanu.BayesNet"
                ]
            }
        },
        "test_can_iter_through_samples": {
            "name": "test_can_iter_through_samples",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "algo": [
                    "bool",
                    "int"
                ],
                "net": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_can_iter_through_tensor_samples": {
            "name": "test_can_iter_through_tensor_samples",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "algo": [
                    "str",
                    "Callable[[keanu.BayesNet], keanu.algorithm.PosteriorSamplingAlgorithm]",
                    "keanu.BayesNet",
                    "Dict[str, Any]"
                ],
                "tensor_net": [
                    "str",
                    "Callable[[keanu.BayesNet], keanu.algorithm.PosteriorSamplingAlgorithm]",
                    "keanu.BayesNet",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_iter_returns_same_result_as_sample": {
            "name": "test_iter_returns_same_result_as_sample",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter_with_live_plot": {
            "name": "test_iter_with_live_plot",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "int"
                ]
            }
        },
        "test_can_get_acceptance_rates": {
            "name": "test_can_get_acceptance_rates",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "pandas.DataFrame"
                ]
            }
        },
        "test_can_track_acceptance_rate_when_iterating": {
            "name": "test_can_track_acceptance_rate_when_iterating",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "pandas.DataFrame",
                    "keanu.BayesNet"
                ]
            }
        },
        "test_can_specify_nuts_params": {
            "name": "test_can_specify_nuts_params",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "net": [
                    "keanu.BayesNet",
                    "keanu.vartypes.tensor_arg_types",
                    "int",
                    "Dict[type, Any]"
                ]
            }
        },
        "test_sample_throws_if_vertices_in_sample_from_are_missing_labels": {
            "name": "test_sample_throws_if_vertices_in_sample_from_are_missing_labels",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_samples_throws_if_vertices_in_sample_from_are_missing_labels": {
            "name": "test_generate_samples_throws_if_vertices_in_sample_from_are_missing_labels",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_starting_state": {
            "name": "set_starting_state",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "reorder_subplots": {
            "name": "reorder_subplots",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "ax": [
                    "str",
                    "int"
                ]
            }
        },
        "__assert_valid_samples": {
            "name": "__assert_valid_samples",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "draws": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Sequence[Tuple[float, float]]"
                ],
                "samples": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_sequence.py": {
        "test_you_can_iterate_over_the_sequence": {
            "name": "test_you_can_iterate_over_the_sequence",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_build_a_sequence_with_fixed_count": {
            "name": "test_you_can_build_a_sequence_with_fixed_count",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_build_a_sequence_from_data": {
            "name": "test_you_can_build_a_sequence_from_data",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_must_pass_count_or_data_generator": {
            "name": "test_you_must_pass_count_or_data_generator",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_cannot_pass_both_count_and_data_generator": {
            "name": "test_you_cannot_pass_both_count_and_data_generator",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_build_a_time_series": {
            "name": "test_you_can_build_a_time_series",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "__check_sequence_output_links_to_input": {
            "name": "__check_sequence_output_links_to_input",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "Dict[str, Dict[str, str]]",
                    "bool",
                    "dict",
                    "Dict[str, Type[Any]]",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "str"
                ],
                "previous_output_label": [
                    "Dict[str, Dict[str, str]]",
                    "bool",
                    "dict",
                    "Dict[str, Type[Any]]",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "str"
                ],
                "current_input_label": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "__check_output_equals": {
            "name": "__check_output_equals",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "sequence": [
                    "Iterable[float]",
                    "List[T]",
                    "int",
                    "str"
                ],
                "label": [
                    "str",
                    "bool",
                    "float",
                    "Callable[[bytes], bytes]"
                ],
                "desired_output": [
                    "float",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "test_you_can_use_multiple_factories_to_build_sequences": {
            "name": "test_you_can_use_multiple_factories_to_build_sequences",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_last_item_retrieved_correctly": {
            "name": "test_last_item_retrieved_correctly",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_name_a_sequence": {
            "name": "test_you_can_name_a_sequence",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_get_a_bayes_net_from_a_sequence": {
            "name": "test_you_can_get_a_bayes_net_from_a_sequence",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proxy_vertices_are_correctly_typed": {
            "name": "test_proxy_vertices_are_correctly_typed",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_build_a_sequence_with_fixed_count.create_vertex": {
            "name": "create_vertex",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "keanu.sequence.SequenceItem",
                    "T",
                    "Mapping",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_you_can_build_a_sequence_from_data.create_vertices": {
            "name": "create_vertices",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "Dict[str, Any]",
                    "keanu.sequence.SequenceItem",
                    "list",
                    "dict"
                ],
                "point": [
                    "Dict[str, Any]",
                    "keanu.sequence.SequenceItem",
                    "list",
                    "dict"
                ]
            }
        },
        "test_you_can_build_a_time_series.create_time_step": {
            "name": "create_time_step",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "sequence_item": [
                    "Optional[TextIO]"
                ]
            }
        },
        "test_you_can_use_multiple_factories_to_build_sequences.factory1": {
            "name": "factory1",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "sequence_item": [
                    "int"
                ]
            }
        },
        "test_you_can_use_multiple_factories_to_build_sequences.factory2": {
            "name": "factory2",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "sequence_item": [
                    "int"
                ]
            }
        },
        "test_last_item_retrieved_correctly.factory": {
            "name": "factory",
            "location": 195,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        },
        "test_you_can_name_a_sequence.factory": {
            "name": "factory",
            "location": 219,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        },
        "test_you_can_get_a_bayes_net_from_a_sequence.factory": {
            "name": "factory",
            "location": 248,
            "return": [],
            "arguments": {
                "sequence_item": []
            }
        },
        "test_proxy_vertices_are_correctly_typed.factory": {
            "name": "factory",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "sequence_item": [
                    "Dict[str, Any]",
                    "float"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_shape_validation.py": {
        "test_doesnt_throw_on_valid_index": {
            "name": "test_doesnt_throw_on_valid_index",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_throws_on_index_longer_than_shape": {
            "name": "test_throws_on_index_longer_than_shape",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_throws_on_index_shorter_than_shape": {
            "name": "test_throws_on_index_shorter_than_shape",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_throws_on_index_out_of_bounds": {
            "name": "test_throws_on_index_out_of_bounds",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_doesnt_throw_on_matching_shapes": {
            "name": "test_doesnt_throw_on_matching_shapes",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_throws_on_non_mathcing_shapes": {
            "name": "test_throws_on_non_mathcing_shapes",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_throws_on_empty_list_of_shapes": {
            "name": "test_throws_on_empty_list_of_shapes",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_stats.py": {
        "test_can_get_correct_autocorrelation": {
            "name": "test_can_get_correct_autocorrelation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_autocorr_returns_ndarray_of_correct_dtype": {
            "name": "test_autocorr_returns_ndarray_of_correct_dtype",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cant_get_autocorrelation_of_np_bools": {
            "name": "test_cant_get_autocorrelation_of_np_bools",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cant_get_autocorrelation_of_np_ints": {
            "name": "test_cant_get_autocorrelation_of_np_ints",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_autocorrelation_same_for_streaming_as_batch": {
            "name": "test_autocorrelation_same_for_streaming_as_batch",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_starting_state": {
            "name": "set_starting_state",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "keanu.Model",
                    "str",
                    "tensorflow.keras.Model",
                    "keanu.vertex.base.Vertex",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_tensor.py": {
        "generic": {
            "name": "generic",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_num_passed_to_Tensor_creates_scalar_tensor": {
            "name": "test_num_passed_to_Tensor_creates_scalar_tensor",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "num": [
                    "int",
                    "str"
                ]
            }
        },
        "test_dataframe_passed_to_Tensor_creates_tensor": {
            "name": "test_dataframe_passed_to_Tensor_creates_tensor",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "pandas.core.groupby.DataFrameGroupBy"
                ]
            }
        },
        "test_series_passed_to_Tensor_creates_tensor": {
            "name": "test_series_passed_to_Tensor_creates_tensor",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "torch.Tensor",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_cannot_pass_generic_to_Tensor": {
            "name": "test_cannot_pass_generic_to_Tensor",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "generic": [
                    "str"
                ]
            }
        },
        "test_ndarray_passed_to_Tensor_creates_nonscalar_tensor": {
            "name": "test_ndarray_passed_to_Tensor_creates_nonscalar_tensor",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "arr": [
                    "float",
                    "numpy.ndarray",
                    "List[numpy.ndarray]",
                    "keanu.vartypes.primitive_types"
                ]
            }
        },
        "test_cannot_pass_generic_ndarray_to_Tensor": {
            "name": "test_cannot_pass_generic_ndarray_to_Tensor",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "generic": [
                    "numpy.ndarray",
                    "List[numpy.ndarray]",
                    "str",
                    "keanu.vartypes.primitive_types"
                ]
            }
        },
        "test_can_pass_empty_ndarray_to_Tensor": {
            "name": "test_can_pass_empty_ndarray_to_Tensor",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_java_tensor_to_ndarray": {
            "name": "test_convert_java_tensor_to_ndarray",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "keanu.vartypes.numpy_types",
                    "str"
                ]
            }
        },
        "test_you_can_apply_a_function_to_a_tensor": {
            "name": "test_you_can_apply_a_function_to_a_tensor",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "bool",
                    "int",
                    "str"
                ],
                "expected_result": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_you_can_create_tensors": {
            "name": "test_you_can_create_tensors",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "dtype": []
            }
        },
        "test_you_can_create_boolean_tensor": {
            "name": "test_you_can_create_boolean_tensor",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "float",
                    "List[float]"
                ]
            }
        },
        "test_fails_when_long_is_too_long": {
            "name": "test_fails_when_long_is_too_long",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keanu-master/keanu-python/tests/test_traceplot.py": {
        "trace": {
            "name": "trace",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {}
        },
        "test_traceplot_returns_axesplot_with_correct_data": {
            "name": "test_traceplot_returns_axesplot_with_correct_data",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "trace": []
            }
        }
    },
    "keanu-master/keanu-python/tests/test_vertex.py": {
        "jvm_view": {
            "name": "jvm_view",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "assert_vertex_value_equals_scalar": {
            "name": "assert_vertex_value_equals_scalar",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "vertex": [
                    "keanu.vertex.base.Vertex",
                    "str",
                    "bool"
                ],
                "expected_type": [
                    "Type",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Tuple[List[str], List[str]]",
                    "Tuple[str]"
                ],
                "scalar": [
                    "keanu.vartypes.primitive_types",
                    "Type",
                    "Tuple[keanu.vertex.Vertex, keanu.vertex.Vertex, keanu.vertex.Vertex]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "assert_vertex_value_equals_ndarray": {
            "name": "assert_vertex_value_equals_ndarray",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "vertex": [
                    "keanu.vertex.base.Vertex",
                    "str",
                    "bool"
                ],
                "expected_type": [
                    "str",
                    "T"
                ],
                "ndarray": [
                    "str",
                    "int",
                    "bytes",
                    "Iterable[Iterable[str]]"
                ]
            }
        },
        "assert_vertex_value_equals_pandas": {
            "name": "assert_vertex_value_equals_pandas",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "vertex": [
                    "keanu.vertex.base.Vertex",
                    "str",
                    "bool"
                ],
                "expected_type": [
                    "dict",
                    "int"
                ],
                "pandas": [
                    "bool",
                    "float",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "test_can_pass_scalar_to_vertex": {
            "name": "test_can_pass_scalar_to_vertex",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_pass_ndarray_to_vertex": {
            "name": "test_can_pass_ndarray_to_vertex",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_pass_pandas_dataframe_to_vertex": {
            "name": "test_can_pass_pandas_dataframe_to_vertex",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_pass_pandas_series_to_vertex": {
            "name": "test_can_pass_pandas_series_to_vertex",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_pass_vertex_to_vertex": {
            "name": "test_can_pass_vertex_to_vertex",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "jvm_view": [
                    "int"
                ]
            }
        },
        "test_can_pass_array_to_vertex": {
            "name": "test_can_pass_array_to_vertex",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "jvm_view": [
                    "int"
                ]
            }
        },
        "test_cannot_pass_generic_to_vertex": {
            "name": "test_cannot_pass_generic_to_vertex",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "jvm_view": [
                    "py4j.java_gateway.JVMView",
                    "int"
                ]
            }
        },
        "test_int_vertex_value_is_a_numpy_array": {
            "name": "test_int_vertex_value_is_a_numpy_array",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_float_vertex_value_is_a_numpy_array": {
            "name": "test_float_vertex_value_is_a_numpy_array",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_boolean_vertex_value_is_a_numpy_array": {
            "name": "test_boolean_vertex_value_is_a_numpy_array",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_vertex_value_is_a_numpy_array": {
            "name": "test_scalar_vertex_value_is_a_numpy_array",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vertex_sample_is_a_numpy_array": {
            "name": "test_vertex_sample_is_a_numpy_array",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_connected_graph": {
            "name": "test_get_connected_graph",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_id_str_of_downstream_vertex_is_higher_than_upstream": {
            "name": "test_id_str_of_downstream_vertex_is_higher_than_upstream",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_construct_vertex_with_java_vertex": {
            "name": "test_construct_vertex_with_java_vertex",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_java_collections_to_generator": {
            "name": "test_java_collections_to_generator",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_vertex_id": {
            "name": "test_get_vertex_id",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ids_are_reset": {
            "name": "test_ids_are_reset",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_set_value": {
            "name": "test_you_can_set_value",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "vertex": [
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex",
                    "Callable",
                    "Type",
                    "AbstractSet[T]",
                    "Set[VT]",
                    "bool"
                ],
                "expected_type": [
                    "Type",
                    "Callable",
                    "int"
                ],
                "value": [
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex",
                    "Callable",
                    "Type",
                    "AbstractSet[T]",
                    "Set[VT]",
                    "bool"
                ],
                "assert_vertex_value_equals": [
                    "Type",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_you_can_set_scalar_value": {
            "name": "test_you_can_set_scalar_value",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "vertex": [
                    "str",
                    "Optional[Iterable[str]]"
                ],
                "expected_type": [
                    "Callable",
                    "str",
                    "bool",
                    "Type[Any]"
                ],
                "value": [
                    "str",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "test_you_can_set_and_cascade": {
            "name": "test_you_can_set_and_cascade",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "ctor": [
                    "bool",
                    "dict",
                    "Union[str, int, float]",
                    "Optional[Dict]"
                ],
                "args": [],
                "expected_type": [
                    "Callable",
                    "Type",
                    "List[int]",
                    "bytes",
                    "dict"
                ],
                "value": [
                    "keanu.vartypes.tensor_arg_types",
                    "dict",
                    "float",
                    "bool",
                    "str"
                ],
                "assert_vertex_value_equals": [
                    "Callable",
                    "Type",
                    "List[int]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "test_you_can_set_and_cascade_scalar": {
            "name": "test_you_can_set_and_cascade_scalar",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "ctor": [
                    "Callable",
                    "Optional[Iterable[str]]"
                ],
                "args": [],
                "expected_type": [
                    "Callable",
                    "Optional[Iterable[str]]"
                ],
                "value": [
                    "Callable",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "test_you_can_observe": {
            "name": "test_you_can_observe",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "ctor": [
                    "Callable",
                    "bool",
                    "str",
                    "Callable[[Any], bool]",
                    "int"
                ],
                "args": [],
                "expected_type": [
                    "Type",
                    "Callable",
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex"
                ],
                "value": [
                    "keanu.vartypes.tensor_arg_types",
                    "int",
                    "str"
                ],
                "assert_vertex_value_equals": [
                    "Type",
                    "Callable",
                    "keanu.vartypes.tensor_arg_types",
                    "keanu.vertex.base.Vertex"
                ]
            }
        },
        "test_unobserve": {
            "name": "test_unobserve",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_observe_scalar": {
            "name": "test_you_can_observe_scalar",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "ctor": [
                    "Optional[Iterable[str]]"
                ],
                "args": [],
                "expected_type": [
                    "Optional[Iterable[str]]"
                ],
                "value": [
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "test_pass_label_as_an_optional_param": {
            "name": "test_pass_label_as_an_optional_param",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_pass_none_label": {
            "name": "test_can_pass_none_label",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_pass_namespaced_label": {
            "name": "test_can_pass_namespaced_label",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_label": {
            "name": "test_set_label",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cannot_set_none_label": {
            "name": "test_cannot_set_none_label",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_is_required_param_for_proxy_vertices": {
            "name": "test_label_is_required_param_for_proxy_vertices",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_proxy_vertex_takes_string_as_required_param": {
            "name": "test_proxy_vertex_takes_string_as_required_param",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_java_vertex_to_python_vertex_persists_label": {
            "name": "test_java_vertex_to_python_vertex_persists_label",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_get_parents_and_children": {
            "name": "test_can_get_parents_and_children",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_get_parents_and_children.labels_match": {
            "name": "labels_match",
            "location": 389,
            "return": [
                "List[List[str]]",
                "object",
                "dict",
                "List[T]",
                "Set[int]",
                "List[str]"
            ],
            "arguments": {
                "lhs": [
                    "str",
                    "int"
                ],
                "rhs": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "keanu-master/keanu-python/tests/test_vertex_operations.py": {
        "test_can_do_equal_to": {
            "name": "test_can_do_equal_to",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "keanu.vertex.base.Vertex",
                    "bool",
                    "str",
                    "int",
                    "Iterable[Iterable[Any]]"
                ],
                "rhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "keanu.vertex.base.Vertex",
                    "bool",
                    "str",
                    "int",
                    "Iterable[Iterable[Any]]"
                ],
                "expected_result": [
                    "keanu.vartypes.numpy_types",
                    "Union[keanu.vartypes.numpy_types, float]"
                ]
            }
        },
        "test_can_do_not_equal_to": {
            "name": "test_can_do_not_equal_to",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "keanu.vertex.base.Vertex",
                    "bool",
                    "str",
                    "int"
                ],
                "rhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "keanu.vertex.base.Vertex",
                    "bool",
                    "str",
                    "int"
                ],
                "expected_result": [
                    "keanu.vartypes.numpy_types",
                    "Union[keanu.vartypes.numpy_types, float]"
                ]
            }
        },
        "test_can_do_greater_than": {
            "name": "test_can_do_greater_than",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "bool",
                    "int",
                    "str"
                ],
                "rhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "bool",
                    "int",
                    "str"
                ],
                "expected_result": [
                    "keanu.vartypes.numpy_types",
                    "Union[keanu.vartypes.numpy_types, float]"
                ]
            }
        },
        "test_can_do_less_than": {
            "name": "test_can_do_less_than",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "bool",
                    "int",
                    "str"
                ],
                "rhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "bool",
                    "int",
                    "str"
                ],
                "expected_result": [
                    "keanu.vartypes.numpy_types",
                    "Union[keanu.vartypes.numpy_types, float]"
                ]
            }
        },
        "test_can_do_greater_than_or_equal_to": {
            "name": "test_can_do_greater_than_or_equal_to",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Union[int, slice]"
                ],
                "rhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Union[int, slice]"
                ],
                "expected_result": [
                    "keanu.vartypes.numpy_types",
                    "Iterable[Iterable[Any]]",
                    "Union[keanu.vartypes.numpy_types, float]"
                ]
            }
        },
        "test_can_do_greater_than_or_equal_to_with_vertex_on_rhs": {
            "name": "test_can_do_greater_than_or_equal_to_with_vertex_on_rhs",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Union[int, slice]"
                ],
                "rhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Union[int, slice]"
                ],
                "expected_result": [
                    "keanu.vartypes.numpy_types",
                    "Iterable[Iterable[Any]]",
                    "Union[keanu.vartypes.numpy_types, float]"
                ]
            }
        },
        "test_can_do_less_than_or_equal_to": {
            "name": "test_can_do_less_than_or_equal_to",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Union[int, slice]"
                ],
                "rhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Union[int, slice]"
                ],
                "expected_result": [
                    "keanu.vartypes.numpy_types",
                    "Iterable[Iterable[Any]]",
                    "Union[keanu.vartypes.numpy_types, float]"
                ]
            }
        },
        "test_can_do_less_than_or_equal_to_with_vertex_on_rhs": {
            "name": "test_can_do_less_than_or_equal_to_with_vertex_on_rhs",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Union[int, slice]"
                ],
                "rhs": [
                    "keanu.vertex.base.Vertex",
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Union[int, slice]"
                ],
                "expected_result": [
                    "keanu.vartypes.numpy_types",
                    "Iterable[Iterable[Any]]",
                    "Union[keanu.vartypes.numpy_types, float]"
                ]
            }
        },
        "infer_result_type": {
            "name": "infer_result_type",
            "location": 147,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "lhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, int]",
                    "str"
                ],
                "rhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, int]",
                    "str"
                ]
            }
        },
        "result_should_be_vertex": {
            "name": "result_should_be_vertex",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "lhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Callable"
                ],
                "rhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, float]",
                    "Callable"
                ]
            }
        },
        "assert_is_correct_vertex_type_and_expected_value": {
            "name": "assert_is_correct_vertex_type_and_expected_value",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, int]",
                    "bool",
                    "Dict[str, Any]",
                    "type"
                ],
                "rhs": [
                    "Union[keanu.vertex.base.Vertex, keanu.vartypes.numpy_types, int]",
                    "bool",
                    "Dict[str, Any]",
                    "type"
                ],
                "result": [
                    "int",
                    "bool",
                    "dict"
                ],
                "expected_result": [
                    "numpy.ndarray",
                    "dict",
                    "Optional[numpy.ndarray]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "test_can_do_addition": {
            "name": "test_can_do_addition",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs_constructor": [
                    "str"
                ],
                "rhs_constructor": [
                    "str"
                ],
                "lhs": [
                    "str"
                ],
                "rhs": [
                    "str"
                ],
                "expected_result": []
            }
        },
        "test_can_do_subtraction": {
            "name": "test_can_do_subtraction",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs_constructor": [
                    "str"
                ],
                "rhs_constructor": [
                    "str"
                ],
                "lhs": [
                    "str"
                ],
                "rhs": [
                    "str"
                ],
                "expected_result": []
            }
        },
        "test_can_do_multiplication": {
            "name": "test_can_do_multiplication",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs_constructor": [
                    "str"
                ],
                "rhs_constructor": [
                    "str"
                ],
                "lhs": [
                    "str"
                ],
                "rhs": [
                    "str"
                ],
                "expected_result": []
            }
        },
        "test_can_do_division": {
            "name": "test_can_do_division",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs_constructor": [
                    "str"
                ],
                "rhs_constructor": [
                    "str"
                ],
                "lhs": [
                    "str"
                ],
                "rhs": [
                    "str"
                ],
                "expected_result": [
                    "Union[keanu.vartypes.numpy_types, float]",
                    "keanu.vartypes.numpy_types"
                ]
            }
        },
        "test_can_do_integer_division": {
            "name": "test_can_do_integer_division",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs_constructor": [
                    "str"
                ],
                "rhs_constructor": [
                    "str"
                ],
                "lhs": [
                    "str"
                ],
                "rhs": [
                    "str"
                ],
                "expected_result": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_can_do_pow": {
            "name": "test_can_do_pow",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs_constructor": [
                    "str"
                ],
                "rhs_constructor": [
                    "str"
                ],
                "lhs": [
                    "str"
                ],
                "rhs": [
                    "str"
                ],
                "expected_result": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_can_do_compound_operations": {
            "name": "test_can_do_compound_operations",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_do_abs": {
            "name": "test_can_do_abs",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_do_round": {
            "name": "test_can_do_round",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rounding_is_only_supported_to_zero_digits": {
            "name": "test_rounding_is_only_supported_to_zero_digits",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_do_floor": {
            "name": "test_can_do_floor",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_do_ceil": {
            "name": "test_can_do_ceil",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
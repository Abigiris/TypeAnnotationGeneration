{
    "kedro-main/setup.py": {
        "_collect_requirements": {
            "name": "_collect_requirements",
            "location": 50,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "requires": [
                    "List[int]",
                    "list",
                    "Iterable['cirq.Qid']"
                ]
            }
        }
    },
    "kedro-main/docs/conf.py": {
        "get_classes": {
            "name": "get_classes",
            "location": 328,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "get_functions": {
            "name": "get_functions",
            "location": 333,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "remove_arrows_in_examples": {
            "name": "remove_arrows_in_examples",
            "location": 340,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "autolink_replacements": {
            "name": "autolink_replacements",
            "location": 345,
            "return": [],
            "arguments": {
                "what": []
            }
        },
        "log_suggestions": {
            "name": "log_suggestions",
            "location": 417,
            "return": [],
            "arguments": {
                "lines": [],
                "name": []
            }
        },
        "autolink_classes_and_methods": {
            "name": "autolink_classes_and_methods",
            "location": 460,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "autodoc_process_docstring": {
            "name": "autodoc_process_docstring",
            "location": 469,
            "return": [],
            "arguments": {
                "app": [],
                "what": [],
                "name": [],
                "obj": [],
                "options": [],
                "lines": []
            }
        },
        "_prepare_build_dir": {
            "name": "_prepare_build_dir",
            "location": 487,
            "return": [],
            "arguments": {
                "app": [],
                "config": []
            }
        },
        "env_override": {
            "name": "env_override",
            "location": 501,
            "return": [],
            "arguments": {
                "default_appid": []
            }
        },
        "_add_jinja_filters": {
            "name": "_add_jinja_filters",
            "location": 512,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "remove_unused_mermaid_script_file": {
            "name": "remove_unused_mermaid_script_file",
            "location": 526,
            "return": [],
            "arguments": {
                "app": [],
                "pagename": [],
                "templatename": [],
                "context": [],
                "doctree": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 549,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "kedro-main/features/environment.py": {
        "call": {
            "name": "call",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "Sequence[Path]",
                    "Type[BaseException]",
                    "bool"
                ],
                "env": [
                    "str",
                    "Sequence[Path]",
                    "Type[BaseException]",
                    "bool"
                ]
            }
        },
        "before_all": {
            "name": "before_all",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "after_all": {
            "name": "after_all",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "Sequence[Tuple[Any, Any]]",
                    "List[Callable]"
                ]
            }
        },
        "before_scenario": {
            "name": "before_scenario",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "dict"
                ],
                "scenario": [
                    "str",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "_setup_context_with_venv": {
            "name": "_setup_context_with_venv",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "pathlib.Path",
                    "Union[os.PathLike, str]",
                    "Optional[str]",
                    "IO"
                ],
                "venv_dir": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[os.PathLike, str]",
                    "IO"
                ]
            }
        },
        "_create_new_venv": {
            "name": "_create_new_venv",
            "location": 77,
            "return": [
                "pathlib.Path",
                "int",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_create_tmp_dir": {
            "name": "_create_tmp_dir",
            "location": 89,
            "return": [
                "pathlib.Path",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "_setup_minimal_env": {
            "name": "_setup_minimal_env",
            "location": 96,
            "return": [
                "str",
                "list",
                "int",
                "bytes",
                "complex"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Union[str, bytes]",
                    "pypi2nix.path.Path",
                    "bool"
                ]
            }
        },
        "_install_project_requirements": {
            "name": "_install_project_requirements",
            "location": 117,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "context": [
                    "int",
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "kedro-main/features/__init__.py": {},
    "kedro-main/features/steps/cli_steps.py": {
        "_check_service_up": {
            "name": "_check_service_up",
            "location": 119,
            "return": [],
            "arguments": {
                "context": [],
                "url": [],
                "string": []
            }
        },
        "create_run_config_file": {
            "name": "create_run_config_file",
            "location": 137,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "create_config_file": {
            "name": "create_config_file",
            "location": 144,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "pip_install_dependencies": {
            "name": "pip_install_dependencies",
            "location": 163,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "install_project_package_via_pip": {
            "name": "install_project_package_via_pip",
            "location": 179,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "install_test_plugin": {
            "name": "install_test_plugin",
            "location": 187,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "disable_plugin_hooks": {
            "name": "disable_plugin_hooks",
            "location": 195,
            "return": [],
            "arguments": {
                "context": [],
                "plugin": []
            }
        },
        "init_git_repo": {
            "name": "init_git_repo",
            "location": 206,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "add_test_jupyter_nb": {
            "name": "add_test_jupyter_nb",
            "location": 215,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "create_project_with_starter": {
            "name": "create_project_with_starter",
            "location": 227,
            "return": [],
            "arguments": {
                "context": [],
                "starter": []
            }
        },
        "create_project_without_starter": {
            "name": "create_project_without_starter",
            "location": 249,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "add_proj_dir_to_staging": {
            "name": "add_proj_dir_to_staging",
            "location": 264,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "commit_changes_to_git": {
            "name": "commit_changes_to_git",
            "location": 272,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "exec_kedro_target": {
            "name": "exec_kedro_target",
            "location": 280,
            "return": [],
            "arguments": {
                "context": [],
                "command": []
            }
        },
        "exec_project": {
            "name": "exec_project",
            "location": 288,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "get_kedro_version": {
            "name": "get_kedro_version",
            "location": 300,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "get_kedro_version_python": {
            "name": "get_kedro_version_python",
            "location": 308,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "exec_notebook": {
            "name": "exec_notebook",
            "location": 316,
            "return": [],
            "arguments": {
                "context": [],
                "command": []
            }
        },
        "wait": {
            "name": "wait",
            "location": 329,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "simulate_nb_execution": {
            "name": "simulate_nb_execution",
            "location": 335,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "delete_notebooks_dir": {
            "name": "delete_notebooks_dir",
            "location": 348,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "do_git_reset_hard": {
            "name": "do_git_reset_hard",
            "location": 355,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "move_package": {
            "name": "move_package",
            "location": 362,
            "return": [],
            "arguments": {
                "context": [],
                "new_source_dir": []
            }
        },
        "update_pyproject_toml": {
            "name": "update_pyproject_toml",
            "location": 372,
            "return": [],
            "arguments": {
                "context": [],
                "new_source_dir": []
            }
        },
        "update_kedro_req": {
            "name": "update_kedro_req",
            "location": 382,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "add_req": {
            "name": "add_req",
            "location": 403,
            "return": [],
            "arguments": {
                "context": [],
                "dependency": []
            }
        },
        "check_kedro_version": {
            "name": "check_kedro_version",
            "location": 410,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_created_project_structure": {
            "name": "check_created_project_structure",
            "location": 417,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_empty_pipeline_exists": {
            "name": "check_empty_pipeline_exists",
            "location": 429,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_pipeline_not_empty": {
            "name": "check_pipeline_not_empty",
            "location": 443,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_one_node_run": {
            "name": "check_one_node_run",
            "location": 457,
            "return": [],
            "arguments": {
                "context": [],
                "number": []
            }
        },
        "check_correct_nodes_run": {
            "name": "check_correct_nodes_run",
            "location": 465,
            "return": [],
            "arguments": {
                "context": [],
                "node": []
            }
        },
        "check_status_code": {
            "name": "check_status_code",
            "location": 477,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_failed_status_code": {
            "name": "check_failed_status_code",
            "location": 489,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_message_printed": {
            "name": "check_message_printed",
            "location": 502,
            "return": [],
            "arguments": {
                "context": [],
                "msg": []
            }
        },
        "check_message_not_printed": {
            "name": "check_message_not_printed",
            "location": 518,
            "return": [],
            "arguments": {
                "context": [],
                "msg": []
            }
        },
        "check_error_message_printed": {
            "name": "check_error_message_printed",
            "location": 534,
            "return": [],
            "arguments": {
                "context": [],
                "msg": []
            }
        },
        "check_additional_cell_added": {
            "name": "check_additional_cell_added",
            "location": 550,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_output_cells_empty": {
            "name": "check_output_cells_empty",
            "location": 563,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_jupyter_nb_proc_on_port": {
            "name": "check_jupyter_nb_proc_on_port",
            "location": 570,
            "return": [],
            "arguments": {
                "context": [],
                "port": []
            }
        },
        "check_jupyter_lab_proc_on_port": {
            "name": "check_jupyter_lab_proc_on_port",
            "location": 593,
            "return": [],
            "arguments": {
                "context": [],
                "port": []
            }
        },
        "check_docs_generated": {
            "name": "check_docs_generated",
            "location": 616,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_reqs_generated": {
            "name": "check_reqs_generated",
            "location": 626,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_dependency_in_reqs": {
            "name": "check_dependency_in_reqs",
            "location": 634,
            "return": [],
            "arguments": {
                "context": [],
                "dependency": []
            }
        },
        "check_cell_conversion": {
            "name": "check_cell_conversion",
            "location": 640,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "check_created_project_structure.is_created": {
            "name": "is_created",
            "location": 420,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "kedro-main/features/steps/sh_run.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "List[str]"
                ],
                "split": [
                    "str",
                    "int"
                ],
                "print_output": [
                    "bool"
                ]
            }
        },
        "check_run": {
            "name": "check_run",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str"
                ],
                "print_output": [
                    "bool"
                ]
            }
        },
        "ChildTerminatingPopen.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "ChildTerminatingPopen.terminate": {
            "name": "terminate",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/features/steps/util.py": {
        "chdir": {
            "name": "chdir",
            "location": 13,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "wait_for": {
            "name": "wait_for",
            "location": 34,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "func": [
                    "Optional[str]",
                    "Callable"
                ],
                "timeout_": [
                    "bool",
                    "Callable",
                    "int"
                ],
                "print_error": [
                    "bool",
                    "int",
                    "Callable[..., None]",
                    "List[int]"
                ],
                "sleep_for": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "parse_csv": {
            "name": "parse_csv",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "kedro-main/features/steps/__init__.py": {},
    "kedro-main/features/steps/test_plugin/plugin.py": {
        "MyPluginHook.after_catalog_created": {
            "name": "after_catalog_created",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "catalog": [
                    "bool"
                ]
            }
        }
    },
    "kedro-main/features/steps/test_plugin/setup.py": {},
    "kedro-main/features/steps/test_plugin/__init__.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/docs/source/conf.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/setup.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/tests/test_run.py": {
        "config_loader": {
            "name": "config_loader",
            "location": 21,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "project_context": {
            "name": "project_context",
            "location": 26,
            "return": [
                "str",
                "NamedTuple",
                "dict"
            ],
            "arguments": {
                "config_loader": [
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "TestProjectContext.test_project_path": {
            "name": "test_project_path",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_context": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        }
    },
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/tests/__init__.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/tests/pipelines/__init__.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipeline_registry.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/settings.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__init__.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__main__.py": {
        "_find_run_command": {
            "name": "_find_run_command",
            "location": 11,
            "return": [
                "str",
                "pydcop.replication.path_utils.Path",
                "Optional[List[cmk.utils.type_defs.HostName]]",
                "bool",
                "Tuple[str]",
                "dict"
            ],
            "arguments": {
                "package_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_find_run_command_in_plugins": {
            "name": "_find_run_command_in_plugins",
            "location": 33,
            "return": [
                "str",
                "bool",
                "float",
                "List[str]"
            ],
            "arguments": {
                "plugins": [
                    "str",
                    "IO",
                    "Mapping[str, Any]",
                    "List[str]",
                    "Optional[Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/__init__.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/nodes.py": {
        "split_data": {
            "name": "split_data",
            "location": 12,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[int, List[str]]",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "example_test_data_ratio": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        }
    },
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/pipeline.py": {
        "create_pipeline": {
            "name": "create_pipeline",
            "location": 12,
            "return": [
                "bool",
                "Dict[str, str]",
                "int",
                "dict"
            ],
            "arguments": {}
        }
    },
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/__init__.py": {},
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/nodes.py": {
        "train_model": {
            "name": "train_model",
            "location": 15,
            "return": [
                "pandas.DataFrame",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "train_x": [
                    "int",
                    "pandas.Series",
                    "Union[int, float]",
                    "Optional[float]"
                ],
                "train_y": [
                    "bool",
                    "float",
                    "int"
                ],
                "parameters": [
                    "bool",
                    "slice",
                    "float",
                    "int"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 50,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "model": [
                    "float",
                    "list",
                    "int",
                    "bool"
                ],
                "test_x": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "report_accuracy": {
            "name": "report_accuracy",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "predictions": [
                    "int",
                    "List[list]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "test_y": [
                    "bool",
                    "int"
                ]
            }
        },
        "_sigmoid": {
            "name": "_sigmoid",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/pipeline.py": {
        "create_pipeline": {
            "name": "create_pipeline",
            "location": 12,
            "return": [
                "float",
                "bool",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "kedro-main/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/__init__.py": {},
    "kedro-main/kedro/utils.py": {
        "load_obj": {
            "name": "load_obj",
            "location": 8,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "obj_path": [
                    "List[str]",
                    "Sequence[str]",
                    "str"
                ],
                "default_obj_path": [
                    "List[str]",
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "kedro-main/kedro/__init__.py": {},
    "kedro-main/kedro/__main__.py": {},
    "kedro-main/kedro/config/abstract_config.py": {
        "AbstractConfigLoader.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conf_source": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "env": [
                    "str",
                    "float",
                    "Callable",
                    "tuple"
                ],
                "runtime_params": [
                    "str",
                    "float",
                    "Callable",
                    "tuple"
                ]
            }
        },
        "AbstractConfigLoader.get": {
            "name": "get",
            "location": 27,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/config/common.py": {
        "_get_config_from_patterns": {
            "name": "_get_config_from_patterns",
            "location": 27,
            "return": [
                "dict",
                "Optional[dict]",
                "Dict[str, Any]",
                "Optional[Dict]"
            ],
            "arguments": {
                "conf_paths": [
                    "str"
                ],
                "patterns": [
                    "str"
                ],
                "ac_template": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "_load_config_file": {
            "name": "_load_config_file",
            "location": 101,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]",
                "Optional[dict]",
                "Dict[Any, pathlib.Path]"
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "pathlib.Path",
                    "Sequence[str]",
                    "pathlib.PosixPath"
                ],
                "ac_template": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_load_configs": {
            "name": "_load_configs",
            "location": 141,
            "return": [
                "Dict[str, Any]",
                "str",
                "_vendor.traitlets.config.Config",
                "Optional[str]",
                "app.config.MQConfig"
            ],
            "arguments": {
                "config_filepaths": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "List[str]"
                ],
                "ac_template": [
                    "str",
                    "baseplate.lib.config.RawConfig"
                ]
            }
        },
        "_lookup_config_filepaths": {
            "name": "_lookup_config_filepaths",
            "location": 173,
            "return": [
                "str",
                "Callable",
                "Union[str, pathlib.Path]",
                "neuromation.api.config._AuthConfig",
                "pathlib.Path",
                "Set[str]"
            ],
            "arguments": {
                "conf_path": [
                    "str",
                    "path.Path",
                    "Optional[str]",
                    "Union[str, pathlib.Path]"
                ],
                "patterns": [
                    "str",
                    "path.Path",
                    "Optional[str]",
                    "Union[str, pathlib.Path]"
                ],
                "processed_files": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "logger": [
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "IO",
                    "Exception"
                ]
            }
        },
        "_remove_duplicates": {
            "name": "_remove_duplicates",
            "location": 192,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "items": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "_check_duplicate_keys": {
            "name": "_check_duplicate_keys",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "processed_files": [
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "filepath": [
                    "str",
                    "pathlib.Path"
                ],
                "conf": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "_path_lookup": {
            "name": "_path_lookup",
            "location": 225,
            "return": [
                "str",
                "pathlib.Path",
                "Union[pathlib.Path, str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "conf_path": [
                    "pathlib.Path",
                    "str",
                    "pathlib.PosixPath"
                ],
                "patterns": [
                    "Iterable[str]",
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "kedro-main/kedro/config/config.py": {
        "ConfigLoader.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conf_source": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "env": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "runtime_params": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ]
            }
        },
        "ConfigLoader.conf_paths": {
            "name": "conf_paths",
            "location": 96,
            "return": [
                "str",
                "pathlib.Path",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigLoader.get": {
            "name": "get",
            "location": 100,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigLoader._build_conf_paths": {
            "name": "_build_conf_paths",
            "location": 105,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/config/templated_config.py": {
        "_format_object": {
            "name": "_format_object",
            "location": 174,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "val": [
                    "complex",
                    "bytes",
                    "T",
                    "dict"
                ],
                "format_dict": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TemplatedConfigLoader.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conf_source": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "env": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "runtime_params": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ]
            }
        },
        "TemplatedConfigLoader.conf_paths": {
            "name": "conf_paths",
            "location": 136,
            "return": [
                "str",
                "pathlib.Path",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatedConfigLoader.get": {
            "name": "get",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplatedConfigLoader._build_conf_paths": {
            "name": "_build_conf_paths",
            "location": 166,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_format_object._format_string": {
            "name": "_format_string",
            "location": 217,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "match": [
                    "str",
                    "Union[int, str]"
                ]
            }
        }
    },
    "kedro-main/kedro/config/__init__.py": {},
    "kedro-main/kedro/extras/__init__.py": {},
    "kedro-main/kedro/extras/datasets/__init__.py": {},
    "kedro-main/kedro/extras/datasets/api/api_dataset.py": {
        "APIDataSet.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "method": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "data": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "params": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "headers": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "auth": [
                    "dict",
                    "Optional[Dict[str, str]]",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Optional[Dict[str, float]]"
                ],
                "json": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "timeout": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "APIDataSet._describe": {
            "name": "_describe",
            "location": 95,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIDataSet._execute_request": {
            "name": "_execute_request",
            "location": 98,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIDataSet._load": {
            "name": "_load",
            "location": 109,
            "return": [
                "str",
                "int",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIDataSet._save": {
            "name": "_save",
            "location": 112,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[Dict]",
                    "List[Tuple]",
                    "int",
                    "bytes"
                ]
            }
        },
        "APIDataSet._exists": {
            "name": "_exists",
            "location": 115,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/api/__init__.py": {},
    "kedro-main/kedro/extras/datasets/biosequence/biosequence_dataset.py": {
        "BioSequenceDataSet.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bool"
                ],
                "load_args": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "int"
                ],
                "save_args": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "int"
                ],
                "credentials": [
                    "int",
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "core.base.setup.Settings",
                    "bool"
                ],
                "fs_args": [
                    "Dict[str, Any]"
                ]
            }
        },
        "BioSequenceDataSet._describe": {
            "name": "_describe",
            "location": 104,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BioSequenceDataSet._load": {
            "name": "_load",
            "location": 112,
            "return": [
                "List[str]",
                "List[dict]",
                "List[pathlib.Path]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BioSequenceDataSet._save": {
            "name": "_save",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list",
                    "str",
                    "bytes",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "Optional[str]"
                ]
            }
        },
        "BioSequenceDataSet._exists": {
            "name": "_exists",
            "location": 123,
            "return": [
                "str",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BioSequenceDataSet._release": {
            "name": "_release",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BioSequenceDataSet.invalidate_cache": {
            "name": "invalidate_cache",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/biosequence/__init__.py": {},
    "kedro-main/kedro/extras/datasets/dask/parquet_dataset.py": {
        "ParquetDataSet.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "core.base.setup.Settings",
                    "bool"
                ],
                "load_args": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "int"
                ],
                "save_args": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "int"
                ],
                "credentials": [
                    "int",
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "core.base.setup.Settings",
                    "bool"
                ],
                "fs_args": [
                    "Dict[str, Any]"
                ]
            }
        },
        "ParquetDataSet.fs_args": {
            "name": "fs_args",
            "location": 85,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetDataSet._describe": {
            "name": "_describe",
            "location": 95,
            "return": [
                "dict",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetDataSet._load": {
            "name": "_load",
            "location": 102,
            "return": [
                "abilian.core.models.subjects.Principal",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetDataSet._save": {
            "name": "_save",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "list",
                    "core.entity.Dataset"
                ]
            }
        },
        "ParquetDataSet._exists": {
            "name": "_exists",
            "location": 110,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/dask/__init__.py": {},
    "kedro-main/kedro/extras/datasets/email/message_dataset.py": {
        "EmailMessageDataSet.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "EmailMessageDataSet._describe": {
            "name": "_describe",
            "location": 145,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailMessageDataSet._load": {
            "name": "_load",
            "location": 156,
            "return": [
                "bool",
                "str",
                "Callable[[Any], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailMessageDataSet._save": {
            "name": "_save",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, List[Any]]",
                    "dict",
                    "MutableMapping[str, Any]",
                    "Dict[str, object]",
                    "bytes",
                    "Callable",
                    "T"
                ]
            }
        },
        "EmailMessageDataSet._exists": {
            "name": "_exists",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailMessageDataSet._release": {
            "name": "_release",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailMessageDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/email/__init__.py": {},
    "kedro-main/kedro/extras/datasets/geopandas/geojson_dataset.py": {
        "GeoJSONDataSet.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ],
                "fs_args": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "list",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "GeoJSONDataSet._load": {
            "name": "_load",
            "location": 123,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "tuple",
                "Optional[TextIO]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeoJSONDataSet._save": {
            "name": "_save",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "List[T]"
                ]
            }
        },
        "GeoJSONDataSet._exists": {
            "name": "_exists",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeoJSONDataSet._describe": {
            "name": "_describe",
            "location": 141,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeoJSONDataSet._release": {
            "name": "_release",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeoJSONDataSet.invalidate_cache": {
            "name": "invalidate_cache",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/geopandas/__init__.py": {},
    "kedro-main/kedro/extras/datasets/holoviews/holoviews_writer.py": {
        "HoloviewsWriter.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "property",
                    "Callable[[Optional, Optional, str], None]",
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "core.base.setup.Settings"
                ],
                "credentials": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]",
                    "Type[T]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "save_args": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "int"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "HoloviewsWriter._describe": {
            "name": "_describe",
            "location": 101,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoloviewsWriter._load": {
            "name": "_load",
            "location": 109,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoloviewsWriter._save": {
            "name": "_save",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[bytes, str]",
                    "io.StringIO",
                    "int"
                ]
            }
        },
        "HoloviewsWriter._exists": {
            "name": "_exists",
            "location": 122,
            "return": [
                "str",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoloviewsWriter._release": {
            "name": "_release",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoloviewsWriter._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/holoviews/__init__.py": {},
    "kedro-main/kedro/extras/datasets/json/json_dataset.py": {
        "JSONDataSet.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "save_args": [
                    "Optional[Dict[str, Any]]",
                    "IO",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "dict"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "property",
                    "List[str]",
                    "Callable[[Optional, Optional, str], None]",
                    "dict",
                    "core.base.setup.Settings"
                ]
            }
        },
        "JSONDataSet._describe": {
            "name": "_describe",
            "location": 124,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._load": {
            "name": "_load",
            "location": 132,
            "return": [
                "str",
                "pathlib.Path",
                "dict",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._save": {
            "name": "_save",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List[str]",
                    "str",
                    "Union[str, bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "JSONDataSet._exists": {
            "name": "_exists",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._release": {
            "name": "_release",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/json/__init__.py": {},
    "kedro-main/kedro/extras/datasets/matplotlib/matplotlib_writer.py": {
        "MatplotlibWriter.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "property",
                    "Callable[[Optional, Optional, str], None]",
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "core.base.setup.Settings"
                ],
                "credentials": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]",
                    "Type[T]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "save_args": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "int"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "overwrite": [
                    "Optional[str]",
                    "bool",
                    "Optional[Callable[[Any], bool]]",
                    "float",
                    "Sequence[str]"
                ]
            }
        },
        "MatplotlibWriter._describe": {
            "name": "_describe",
            "location": 152,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatplotlibWriter._load": {
            "name": "_load",
            "location": 160,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatplotlibWriter._save": {
            "name": "_save",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[AbstractSet[str], Set[Any]]",
                    "core.models.Model",
                    "Iterable[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MatplotlibWriter._save_to_fs": {
            "name": "_save_to_fs",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "full_key_path": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "plot": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "MatplotlibWriter._exists": {
            "name": "_exists",
            "location": 196,
            "return": [
                "str",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatplotlibWriter._release": {
            "name": "_release",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatplotlibWriter._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/matplotlib/__init__.py": {},
    "kedro-main/kedro/extras/datasets/networkx/gml_dataset.py": {
        "GMLDataSet.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "GMLDataSet._load": {
            "name": "_load",
            "location": 109,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMLDataSet._save": {
            "name": "_save",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "GMLDataSet._exists": {
            "name": "_exists",
            "location": 121,
            "return": [
                "str",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMLDataSet._describe": {
            "name": "_describe",
            "location": 125,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMLDataSet._release": {
            "name": "_release",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMLDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/networkx/graphml_dataset.py": {
        "GraphMLDataSet.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "GraphMLDataSet._load": {
            "name": "_load",
            "location": 108,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphMLDataSet._save": {
            "name": "_save",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Iterable[str]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "GraphMLDataSet._exists": {
            "name": "_exists",
            "location": 119,
            "return": [
                "str",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphMLDataSet._describe": {
            "name": "_describe",
            "location": 123,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphMLDataSet._release": {
            "name": "_release",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphMLDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/networkx/json_dataset.py": {
        "JSONDataSet.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "JSONDataSet._load": {
            "name": "_load",
            "location": 109,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "dict",
                "Dict[str, type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._save": {
            "name": "_save",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, object]",
                    "core.entity.Dataset"
                ]
            }
        },
        "JSONDataSet._exists": {
            "name": "_exists",
            "location": 125,
            "return": [
                "str",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._describe": {
            "name": "_describe",
            "location": 130,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._release": {
            "name": "_release",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/networkx/__init__.py": {},
    "kedro-main/kedro/extras/datasets/pandas/csv_dataset.py": {
        "CSVDataSet.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "CSVDataSet._describe": {
            "name": "_describe",
            "location": 144,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVDataSet._load": {
            "name": "_load",
            "location": 153,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVDataSet._save": {
            "name": "_save",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[Dict[str, str]]",
                    "dict",
                    "Union[str, bytes, None]",
                    "bytes",
                    "T",
                    "\"RequirementsFile\""
                ]
            }
        },
        "CSVDataSet._exists": {
            "name": "_exists",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVDataSet._release": {
            "name": "_release",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/excel_dataset.py": {
        "ExcelDataSet.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Optional[str]",
                    "kedro.io.core.Version",
                    "Optional[int]"
                ],
                "engine": [
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Mapping[str, Any]",
                    "Optional[tuple]",
                    "List[str]",
                    "dict"
                ],
                "load_args": [
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "Exception"
                ],
                "save_args": [
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "Exception"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "kedro.io.core.Version",
                    "Optional[int]"
                ],
                "credentials": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Mapping]",
                    "Optional[int]",
                    "Type[T]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "property",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "ExcelDataSet._describe": {
            "name": "_describe",
            "location": 163,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExcelDataSet._load": {
            "name": "_load",
            "location": 173,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExcelDataSet._save": {
            "name": "_save",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ExcelDataSet._exists": {
            "name": "_exists",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExcelDataSet._release": {
            "name": "_release",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExcelDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/feather_dataset.py": {
        "FeatherDataSet.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "FeatherDataSet._describe": {
            "name": "_describe",
            "location": 123,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatherDataSet._load": {
            "name": "_load",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatherDataSet._save": {
            "name": "_save",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[bytes, bytearray, memoryview]",
                    "pandas.DataFrame",
                    "pandas.core.frame.DataFrame",
                    "int"
                ]
            }
        },
        "FeatherDataSet._exists": {
            "name": "_exists",
            "location": 156,
            "return": [
                "str",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatherDataSet._release": {
            "name": "_release",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatherDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/gbq_dataset.py": {
        "GBQTableDataSet.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str",
                    "Optional[str]",
                    "MutableSequence[str]"
                ],
                "table_name": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]",
                    "bool"
                ],
                "project": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "credentials": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[Any, Any]]"
                ],
                "load_args": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "Dict[str, Union[str, Any]]",
                    "Dict[str, str]"
                ],
                "save_args": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "Dict[str, Union[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "GBQTableDataSet._describe": {
            "name": "_describe",
            "location": 128,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBQTableDataSet._load": {
            "name": "_load",
            "location": 136,
            "return": [
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBQTableDataSet._save": {
            "name": "_save",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Dict[str, float]]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "GBQTableDataSet._exists": {
            "name": "_exists",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBQTableDataSet._validate_location": {
            "name": "_validate_location",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GBQQueryDataSet.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Callable[[Optional, Optional, str], None]",
                    "int"
                ],
                "project": [
                    "List[str]",
                    "int",
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "credentials": [
                    "str"
                ],
                "load_args": [
                    "int",
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "IO"
                ],
                "fs_args": [
                    "bool",
                    "OrderedDict",
                    "Mapping",
                    "Dict[str, Any]",
                    "dict"
                ],
                "filepath": [
                    "bool"
                ]
            }
        },
        "GBQQueryDataSet._describe": {
            "name": "_describe",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBQQueryDataSet._load": {
            "name": "_load",
            "location": 295,
            "return": [
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GBQQueryDataSet._save": {
            "name": "_save",
            "location": 309,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pandas.DataFrame",
                    "List[Dict]",
                    "List[Tuple]",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/generic_dataset.py": {
        "GenericDataSet.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "List[pathlib.Path]",
                    "Optional[str]"
                ],
                "file_format": [
                    "str",
                    "int"
                ],
                "load_args": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "save_args": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "credentials": [
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "Tuple[float, float]",
                    "int"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "MutableMapping",
                    "Callable[[str], bool]"
                ]
            }
        },
        "GenericDataSet._ensure_file_system_target": {
            "name": "_ensure_file_system_target",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericDataSet._load": {
            "name": "_load",
            "location": 183,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericDataSet._save": {
            "name": "_save",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, object]",
                    "int",
                    "list",
                    "bytes"
                ]
            }
        },
        "GenericDataSet._exists": {
            "name": "_exists",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericDataSet._describe": {
            "name": "_describe",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericDataSet._release": {
            "name": "_release",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/hdf_dataset.py": {
        "HDFDataSet.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, pathlib.Path]]",
                    "pandas.DataFrame",
                    "Optional[Dict[str, str]]",
                    "int",
                    "bool"
                ],
                "key": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "load_args": [
                    "str",
                    "Dict[str, Optional[str]]",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "save_args": [
                    "str",
                    "Dict[str, Optional[str]]",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, pathlib.Path]]",
                    "pandas.DataFrame",
                    "Optional[Dict[str, str]]",
                    "int",
                    "bool"
                ],
                "credentials": [
                    "bool",
                    "int",
                    "Callable"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "bool",
                    "property",
                    "MutableMapping",
                    "Callable[[str], bool]"
                ]
            }
        },
        "HDFDataSet._describe": {
            "name": "_describe",
            "location": 137,
            "return": [
                "Dict[str, str]",
                "OrderedDict",
                "dict",
                "bytes",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDFDataSet._load": {
            "name": "_load",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDFDataSet._save": {
            "name": "_save",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "pandas.DataFrame",
                    "OrderedDict",
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "HDFDataSet._exists": {
            "name": "_exists",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDFDataSet._release": {
            "name": "_release",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HDFDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/json_dataset.py": {
        "JSONDataSet.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "JSONDataSet._describe": {
            "name": "_describe",
            "location": 135,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._load": {
            "name": "_load",
            "location": 144,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._save": {
            "name": "_save",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "Callable",
                    "Union[Dict, List]",
                    "pandas._ArrayLike",
                    "T"
                ]
            }
        },
        "JSONDataSet._exists": {
            "name": "_exists",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._release": {
            "name": "_release",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/parquet_dataset.py": {
        "ParquetDataSet.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "ParquetDataSet._describe": {
            "name": "_describe",
            "location": 151,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetDataSet._load": {
            "name": "_load",
            "location": 160,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetDataSet._load_from_pandas": {
            "name": "_load_from_pandas",
            "location": 176,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetDataSet._save": {
            "name": "_save",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "T"
                ]
            }
        },
        "ParquetDataSet._exists": {
            "name": "_exists",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetDataSet._release": {
            "name": "_release",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParquetDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/sql_dataset.py": {
        "_find_known_drivers": {
            "name": "_find_known_drivers",
            "location": 37,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "module_import_error": [
                    "Union[str, bytes]",
                    "Optional[str]",
                    "Sequence[core.ICanonicalSource]"
                ]
            }
        },
        "_get_missing_module_error": {
            "name": "_get_missing_module_error",
            "location": 70,
            "return": [
                "str",
                "type",
                "Exception",
                "sqlalchemy.Column",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "import_error": [
                    "Optional[str]",
                    "str",
                    "Union[int, List]",
                    "IO"
                ]
            }
        },
        "_get_sql_alchemy_missing_error": {
            "name": "_get_sql_alchemy_missing_error",
            "location": 81,
            "return": [
                "List[str]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "List[Mapping[str, Any]]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "SQLTableDataSet.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "credentials": [
                    "str",
                    "Tuple[str]"
                ],
                "load_args": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "save_args": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "SQLTableDataSet.create_connection": {
            "name": "create_connection",
            "location": 217,
            "return": [
                "str",
                "pandas.Series",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "connection_str": [
                    "str"
                ]
            }
        },
        "SQLTableDataSet._describe": {
            "name": "_describe",
            "location": 234,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLTableDataSet._load": {
            "name": "_load",
            "location": 245,
            "return": [
                "str",
                "bool",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLTableDataSet._save": {
            "name": "_save",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "Union['Contributor', 'Coverage']",
                    "Dict[str, str]"
                ]
            }
        },
        "SQLTableDataSet._exists": {
            "name": "_exists",
            "location": 253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQueryDataSet.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Callable[[Optional, Optional, str], None]",
                    "bool",
                    "list",
                    "int"
                ],
                "credentials": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Union[bool, str]",
                    "bool"
                ],
                "load_args": [
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Union[int, float]",
                    "float"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "Optional[tuple]",
                    "MutableMapping[str, Any]"
                ],
                "filepath": [
                    "tensorhive.core.ssh.Hostname"
                ]
            }
        },
        "SQLQueryDataSet.create_connection": {
            "name": "create_connection",
            "location": 396,
            "return": [
                "str",
                "pandas.Series",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "connection_str": [
                    "str"
                ]
            }
        },
        "SQLQueryDataSet._describe": {
            "name": "_describe",
            "location": 413,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQueryDataSet._load": {
            "name": "_load",
            "location": 421,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "int",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLQueryDataSet._save": {
            "name": "_save",
            "location": 432,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pandas.DataFrame",
                    "List[Dict]",
                    "List[Tuple]",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/xml_dataset.py": {
        "XMLDataSet.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "XMLDataSet._describe": {
            "name": "_describe",
            "location": 119,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLDataSet._load": {
            "name": "_load",
            "location": 128,
            "return": [
                "str",
                "bool",
                "pathlib.Path",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLDataSet._save": {
            "name": "_save",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Union[bytes, bytearray, memoryview]",
                    "pandas.core.frame.DataFrame",
                    "pandas.DataFrame",
                    "dict"
                ]
            }
        },
        "XMLDataSet._exists": {
            "name": "_exists",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLDataSet._release": {
            "name": "_release",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pandas/__init__.py": {},
    "kedro-main/kedro/extras/datasets/pickle/pickle_dataset.py": {
        "PickleDataSet.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Optional[str]",
                    "kedro.io.core.Version",
                    "Optional[int]"
                ],
                "backend": [
                    "str",
                    "Tuple[str, int]"
                ],
                "load_args": [
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "Exception"
                ],
                "save_args": [
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "Exception"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "kedro.io.core.Version",
                    "Optional[int]"
                ],
                "credentials": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Mapping]",
                    "Optional[int]",
                    "Type[T]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "property",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "PickleDataSet._describe": {
            "name": "_describe",
            "location": 197,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleDataSet._load": {
            "name": "_load",
            "location": 207,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleDataSet._save": {
            "name": "_save",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "PickleDataSet._exists": {
            "name": "_exists",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleDataSet._release": {
            "name": "_release",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pickle/__init__.py": {},
    "kedro-main/kedro/extras/datasets/pillow/image_dataset.py": {
        "ImageDataSet.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "save_args": [
                    "Optional[Dict[str, Any]]",
                    "IO",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "dict"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "property",
                    "List[str]",
                    "Callable[[Optional, Optional, str], None]",
                    "dict",
                    "core.base.setup.Settings"
                ]
            }
        },
        "ImageDataSet._describe": {
            "name": "_describe",
            "location": 102,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageDataSet._load": {
            "name": "_load",
            "location": 110,
            "return": [
                "str",
                "bytes",
                "pathlib.Path",
                "Optional[str]",
                "Union[Callable, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageDataSet._save": {
            "name": "_save",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "pathpy.core.path.Path.Collection"
                ]
            }
        },
        "ImageDataSet._exists": {
            "name": "_exists",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageDataSet._release": {
            "name": "_release",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/pillow/__init__.py": {},
    "kedro-main/kedro/extras/datasets/plotly/json_dataset.py": {
        "JSONDataSet.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str",
                    "dict",
                    "List[\"Outcome\"]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable[[Optional, Optional, str], None]",
                    "List[str]",
                    "core.base.setup.Settings",
                    "dict",
                    "property"
                ]
            }
        },
        "JSONDataSet._describe": {
            "name": "_describe",
            "location": 114,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._load": {
            "name": "_load",
            "location": 123,
            "return": [
                "str",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._save": {
            "name": "_save",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "JSONDataSet._exists": {
            "name": "_exists",
            "location": 139,
            "return": [
                "str",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._release": {
            "name": "_release",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/plotly/plotly_dataset.py": {
        "PlotlyDataSet.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "plotly_args": [
                    "bool"
                ],
                "load_args": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "save_args": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "version": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "credentials": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "fs_args": [
                    "Callable[[Optional, Optional, str], None]",
                    "bool",
                    "Optional[tuple]",
                    "str",
                    "int"
                ]
            }
        },
        "PlotlyDataSet._describe": {
            "name": "_describe",
            "location": 99,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotlyDataSet._save": {
            "name": "_save",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "PlotlyDataSet._plot_dataframe": {
            "name": "_plot_dataframe",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "kedro-main/kedro/extras/datasets/plotly/__init__.py": {},
    "kedro-main/kedro/extras/datasets/redis/redis_dataset.py": {
        "PickleDataSet.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "dict",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ],
                "backend": [
                    "bool",
                    "str",
                    "Callable[[str, backuppy.io.IOIter], backuppy.io.IOIter]",
                    "Optional[bool]",
                    "int"
                ],
                "load_args": [
                    "Optional[str]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "save_args": [
                    "Optional[str]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "credentials": [
                    "str",
                    "List[List[str]]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Callable[[], bool]]",
                    "list",
                    "bool"
                ],
                "redis_args": [
                    "List[str]",
                    "bool",
                    "MutableMapping",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[List[bytes]]"
                ]
            }
        },
        "PickleDataSet._describe": {
            "name": "_describe",
            "location": 152,
            "return": [
                "bytes",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleDataSet._load": {
            "name": "_load",
            "location": 157,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleDataSet._save": {
            "name": "_save",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[AbstractSet[str], Set[Any]]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "PickleDataSet._exists": {
            "name": "_exists",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/redis/__init__.py": {},
    "kedro-main/kedro/extras/datasets/spark/deltatable_dataset.py": {
        "DeltaTableDataSet.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Callable",
                    "int",
                    "dict",
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "DeltaTableDataSet._get_spark": {
            "name": "_get_spark",
            "location": 81,
            "return": [
                "cmk.utils.type_defs.UserId",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "DeltaTableDataSet._load": {
            "name": "_load",
            "location": 84,
            "return": [
                "str",
                "Optional[str]",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeltaTableDataSet._save": {
            "name": "_save",
            "location": 88,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[Dict]",
                    "List[Tuple]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DeltaTableDataSet._exists": {
            "name": "_exists",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeltaTableDataSet._describe": {
            "name": "_describe",
            "location": 103,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/spark/spark_dataset.py": {
        "_parse_glob_pattern": {
            "name": "_parse_glob_pattern",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_split_filepath": {
            "name": "_split_filepath",
            "location": 38,
            "return": [
                "bool",
                "str",
                "int",
                "Hashable",
                "pandas.DataFrame"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]",
                    "Tuple[Tuple[int, ...]]"
                ]
            }
        },
        "_strip_dbfs_prefix": {
            "name": "_strip_dbfs_prefix",
            "location": 45,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "pathlib.Path",
                "str",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "prefix": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_dbfs_glob": {
            "name": "_dbfs_glob",
            "location": 49,
            "return": [
                "str",
                "int",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "float",
                    "Union[str, List[str]]",
                    "Union[Sequence[str], Sequence[int]]",
                    "Iterable[str]"
                ],
                "dbutils": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "_get_dbutils": {
            "name": "_get_dbutils",
            "location": 76,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "spark": [
                    "str",
                    "bool",
                    "pyspark.sql.SparkSession"
                ]
            }
        },
        "_dbfs_exists": {
            "name": "_dbfs_exists",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int",
                    "BinaryIO"
                ],
                "dbutils": [
                    "str",
                    "int"
                ]
            }
        },
        "KedroHdfsInsecureClient.hdfs_exists": {
            "name": "hdfs_exists",
            "location": 122,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "hdfs_path": [
                    "str"
                ]
            }
        },
        "KedroHdfsInsecureClient.hdfs_glob": {
            "name": "hdfs_glob",
            "location": 133,
            "return": [
                "str",
                "int",
                "pandas.DataFrame",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "Pattern[str]",
                    "dict",
                    "list",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "SparkDataSet.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]",
                    "type"
                ],
                "file_format": [
                    "str",
                    "int",
                    "opentrons.types.Mount",
                    "bytes"
                ],
                "load_args": [
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "dict"
                ],
                "save_args": [
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "dict"
                ],
                "version": [
                    "kedro.io.core.Version",
                    "str",
                    "bool"
                ],
                "credentials": [
                    "int",
                    "bool",
                    "str",
                    "bytes",
                    "Iterable",
                    "Optional[str]"
                ]
            }
        },
        "SparkDataSet._load_schema_from_file": {
            "name": "_load_schema_from_file",
            "location": 339,
            "return": [
                "str",
                "int",
                "bool",
                "type"
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "Union[utils.CWLObjectType, MutableSequence[utils.CWLObjectType], None]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SparkDataSet._describe": {
            "name": "_describe",
            "location": 365,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Dict[str, Dict[str, str]]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkDataSet._get_spark": {
            "name": "_get_spark",
            "location": 375,
            "return": [
                "cmk.utils.type_defs.UserId",
                "int",
                "bool",
                "pandas.DataFrame"
            ],
            "arguments": {}
        },
        "SparkDataSet._load": {
            "name": "_load",
            "location": 378,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkDataSet._save": {
            "name": "_save",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "pyspark.sql.DataFrame",
                    "Optional[str]"
                ]
            }
        },
        "SparkDataSet._exists": {
            "name": "_exists",
            "location": 392,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkDataSet._handle_delta_format": {
            "name": "_handle_delta_format",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/spark/spark_hive_dataset.py": {
        "SparkHiveDataSet.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "str",
                    "bool",
                    "int"
                ],
                "table": [
                    "str",
                    "bool",
                    "int"
                ],
                "write_mode": [
                    "str"
                ],
                "table_pk": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "save_args": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "SparkHiveDataSet._describe": {
            "name": "_describe",
            "location": 120,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Dict[str, float]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkHiveDataSet._get_spark": {
            "name": "_get_spark",
            "location": 131,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {}
        },
        "SparkHiveDataSet._create_hive_table": {
            "name": "_create_hive_table",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict"
                ],
                "mode": [
                    "str",
                    "Union[List, Dict]",
                    "Sequence[str]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "SparkHiveDataSet._load": {
            "name": "_load",
            "location": 153,
            "return": [
                "Optional[str]",
                "str",
                "List[dict]",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkHiveDataSet._save": {
            "name": "_save",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Optional[List[Any]]",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "SparkHiveDataSet._upsert_save": {
            "name": "_upsert_save",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "List[List[Any]]"
                ]
            }
        },
        "SparkHiveDataSet._validate_save": {
            "name": "_validate_save",
            "location": 188,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "SparkHiveDataSet._exists": {
            "name": "_exists",
            "location": 204,
            "return": [
                "str",
                "pandas.DataFrame",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkHiveDataSet.__getstate__": {
            "name": "__getstate__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/spark/spark_jdbc_dataset.py": {
        "SparkJDBCDataSet.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "table": [
                    "int",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "credentials": [
                    "Optional[str]",
                    "Iterable",
                    "Iterable[str]",
                    "Type",
                    "type",
                    "bool",
                    "List[str]"
                ],
                "load_args": [
                    "dict",
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "save_args": [
                    "dict",
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "SparkJDBCDataSet._describe": {
            "name": "_describe",
            "location": 143,
            "return": [
                "dict",
                "Dict[str, str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkJDBCDataSet._get_spark": {
            "name": "_get_spark",
            "location": 164,
            "return": [
                "int",
                "bool",
                "pandas.DataFrame"
            ],
            "arguments": {}
        },
        "SparkJDBCDataSet._load": {
            "name": "_load",
            "location": 167,
            "return": [
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "dict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkJDBCDataSet._save": {
            "name": "_save",
            "location": 170,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "kedro-main/kedro/extras/datasets/spark/__init__.py": {},
    "kedro-main/kedro/extras/datasets/tensorflow/tensorflow_model_dataset.py": {
        "TensorFlowModelDataset.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "load_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "save_args": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[Dict[str, Any]]",
                    "IO"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ],
                "fs_args": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "list",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TensorFlowModelDataset._load": {
            "name": "_load",
            "location": 110,
            "return": [
                "str",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFlowModelDataset._save": {
            "name": "_save",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "tensorflow.keras.Model"
                ]
            }
        },
        "TensorFlowModelDataset._exists": {
            "name": "_exists",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFlowModelDataset._describe": {
            "name": "_describe",
            "location": 150,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFlowModelDataset._release": {
            "name": "_release",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFlowModelDataset._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/tensorflow/__init__.py": {},
    "kedro-main/kedro/extras/datasets/text/text_dataset.py": {
        "TextDataSet.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]",
                    "bool"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[str]",
                    "bool"
                ],
                "credentials": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "Callable[[Optional, Optional, str], None]",
                    "core.base.setup.Settings"
                ]
            }
        },
        "TextDataSet._describe": {
            "name": "_describe",
            "location": 92,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextDataSet._load": {
            "name": "_load",
            "location": 99,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextDataSet._save": {
            "name": "_save",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "TextDataSet._exists": {
            "name": "_exists",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextDataSet._release": {
            "name": "_release",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/text/__init__.py": {},
    "kedro-main/kedro/extras/datasets/tracking/json_dataset.py": {
        "JSONDataSet._load": {
            "name": "_load",
            "location": 34,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/tracking/metrics_dataset.py": {
        "MetricsDataSet._load": {
            "name": "_load",
            "location": 36,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsDataSet._save": {
            "name": "_save",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "\"Project\"",
                    "list",
                    "\"RequirementsFile\"",
                    "str"
                ]
            }
        }
    },
    "kedro-main/kedro/extras/datasets/tracking/__init__.py": {},
    "kedro-main/kedro/extras/datasets/yaml/yaml_dataset.py": {
        "YAMLDataSet.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "save_args": [
                    "Optional[Dict[str, Any]]",
                    "IO",
                    "Dict[str, List[Callable]]",
                    "Optional[str]",
                    "dict"
                ],
                "version": [
                    "str",
                    "kedro.io.core.Version",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "credentials": [
                    "int",
                    "str"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "property",
                    "List[str]",
                    "Callable[[Optional, Optional, str], None]",
                    "dict",
                    "core.base.setup.Settings"
                ]
            }
        },
        "YAMLDataSet._describe": {
            "name": "_describe",
            "location": 105,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YAMLDataSet._load": {
            "name": "_load",
            "location": 113,
            "return": [
                "str",
                "bool",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YAMLDataSet._save": {
            "name": "_save",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "List[str]",
                    "str",
                    "Union[str, bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "YAMLDataSet._exists": {
            "name": "_exists",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "YAMLDataSet._release": {
            "name": "_release",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YAMLDataSet._invalidate_cache": {
            "name": "_invalidate_cache",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/extras/datasets/yaml/__init__.py": {},
    "kedro-main/kedro/extras/extensions/ipython.py": {
        "_remove_cached_modules": {
            "name": "_remove_cached_modules",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "package_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_find_kedro_project": {
            "name": "_find_kedro_project",
            "location": 26,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "current_dir": [
                    "pathlib.Path",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "reload_kedro": {
            "name": "reload_kedro",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "bytes",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "bool",
                    "Union[str, pathlib.Path]"
                ],
                "env": [
                    "Optional[str]",
                    "pathlib.Path",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "extra_params": [
                    "Optional[str]",
                    "pathlib.Path",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "load_ipython_extension": {
            "name": "load_ipython_extension",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "ipython": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "kedro-main/kedro/extras/extensions/__init__.py": {},
    "kedro-main/kedro/extras/logging/color_logger.py": {
        "ColorHandler.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "int",
                    "Dict[str, List[str]]"
                ],
                "colors": [
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "ColorHandler._get_color": {
            "name": "_get_color",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "logging.Logger",
                    "str",
                    "Exception",
                    "int"
                ]
            }
        },
        "ColorHandler.format": {
            "name": "format",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "dict",
                    "str",
                    "logging.LogRecord",
                    "logging.Logger"
                ]
            }
        }
    },
    "kedro-main/kedro/extras/logging/__init__.py": {},
    "kedro-main/kedro/framework/startup.py": {
        "_version_mismatch_error": {
            "name": "_version_mismatch_error",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "project_version": [
                    "bool",
                    "str"
                ]
            }
        },
        "_is_project": {
            "name": "_is_project",
            "location": 35,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "project_path": [
                    "Union[str, pathlib.Path]",
                    "bool",
                    "pathlib.Path",
                    "Union[List, str]",
                    "List[pathlib.Path]",
                    "pathlib.PurePath"
                ]
            }
        },
        "_get_project_metadata": {
            "name": "_get_project_metadata",
            "location": 46,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "project_path": [
                    "pathlib.Path"
                ]
            }
        },
        "_validate_source_path": {
            "name": "_validate_source_path",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "source_path": [
                    "pathlib.Path",
                    "norfs.fs.base.Path"
                ],
                "project_path": [
                    "pathlib.Path",
                    "cerulean.path.Path",
                    "str"
                ]
            }
        },
        "_add_src_to_path": {
            "name": "_add_src_to_path",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "source_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "project_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "bootstrap_project": {
            "name": "bootstrap_project",
            "location": 149,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "project_path": [
                    "str",
                    "pathlib.Path",
                    "norfs.fs.base.Path"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/__init__.py": {},
    "kedro-main/kedro/framework/cli/catalog.py": {
        "_create_session": {
            "name": "_create_session",
            "location": 14,
            "return": [
                "str",
                "Optional[\"permissions_doc\"]",
                "dict",
                "Dict[str, Any]",
                "T"
            ],
            "arguments": {
                "package_name": [
                    "str"
                ]
            }
        },
        "catalog_cli": {
            "name": "catalog_cli",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "catalog": {
            "name": "catalog",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "list_datasets": {
            "name": "list_datasets",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "Optional[IO[str]]"
                ],
                "pipeline": [],
                "env": [
                    "str",
                    "Optional[IO[str]]"
                ]
            }
        },
        "_map_type_to_datasets": {
            "name": "_map_type_to_datasets",
            "location": 88,
            "return": [
                "Dict[str, Any]",
                "OrderedDict",
                "int",
                "str"
            ],
            "arguments": {
                "datasets": [
                    "type",
                    "str"
                ],
                "datasets_meta": [
                    "dict"
                ]
            }
        },
        "create_catalog": {
            "name": "create_catalog",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "Optional[str]"
                ],
                "pipeline_name": [
                    "str",
                    "bool",
                    "Optional[dict]"
                ],
                "env": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "_add_missing_datasets_to_catalog": {
            "name": "_add_missing_datasets_to_catalog",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "missing_ds": [
                    "List[str]",
                    "str",
                    "bool",
                    "list"
                ],
                "catalog_path": [
                    "TextIO"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/cli/cli.py": {
        "cli": {
            "name": "cli",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_init_plugins": {
            "name": "_init_plugins",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "KedroCLI.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path",
                    "Sequence[str]"
                ]
            }
        },
        "KedroCLI.main": {
            "name": "main",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": [],
                "prog_name": [
                    "list",
                    "int",
                    "List[str]",
                    "str"
                ],
                "complete_var": [
                    "list",
                    "int",
                    "List[str]",
                    "str"
                ],
                "standalone_mode": [
                    "list",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "KedroCLI.global_groups": {
            "name": "global_groups",
            "location": 155,
            "return": [
                "int",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroCLI.project_groups": {
            "name": "project_groups",
            "location": 163,
            "return": [
                "str",
                "Tuple[str]",
                "int",
                "pypi2nix.path.Path"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/framework/cli/jupyter.py": {
        "jupyter_cli": {
            "name": "jupyter_cli",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "jupyter": {
            "name": "jupyter",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "jupyter_notebook": {
            "name": "jupyter_notebook",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "dict",
                    "Optional[Dict[Hashable, Any]]",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "env": [
                    "bool",
                    "type"
                ],
                "args": []
            }
        },
        "jupyter_lab": {
            "name": "jupyter_lab",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "dict",
                    "Optional[Dict[Hashable, Any]]",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "env": [
                    "bool",
                    "type"
                ],
                "args": []
            }
        },
        "_create_kernel": {
            "name": "_create_kernel",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "kernel_name": [
                    "str",
                    "Optional[List[str]]"
                ],
                "display_name": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "convert_notebook": {
            "name": "convert_notebook",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "float",
                    "str",
                    "TextIO"
                ],
                "all_flag": [
                    "Dict[str, Tuple[str, int, int]]",
                    "int",
                    "Callable",
                    "List[str]",
                    "Dict[str, Tuple[str, str, Any]]"
                ],
                "overwrite_flag": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "Union[int, List]",
                    "Iterable[str]"
                ],
                "filepath": [
                    "str",
                    "bool"
                ],
                "env": [
                    "Optional[Callable]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO",
                    "Optional[int]"
                ]
            }
        },
        "_export_nodes": {
            "name": "_export_nodes",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "output_path": [
                    "pathlib.Path"
                ]
            }
        },
        "_append_source_code": {
            "name": "_append_source_code",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "cell": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "path": [
                    "pathlib.Path",
                    "pathlib2.Path",
                    "pathlib.PosixPath",
                    "str"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/cli/micropkg.py": {
        "_check_module_path": {
            "name": "_check_module_path",
            "location": 49,
            "return": [
                "str",
                "Union[str, List]",
                "List[str]"
            ],
            "arguments": {
                "ctx": [
                    "Union[click.Option, click.Parameter]",
                    "click.Context",
                    "Tuple[str]",
                    "bool",
                    "click.Parameter",
                    "List[Tuple[str, str]]"
                ],
                "param": [
                    "Union[click.Option, click.Parameter]",
                    "click.Context",
                    "Tuple[str]",
                    "bool",
                    "click.Parameter",
                    "List[Tuple[str, str]]"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "micropkg_cli": {
            "name": "micropkg_cli",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "micropkg": {
            "name": "micropkg",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pull_package": {
            "name": "pull_package",
            "location": 98,
            "return": [
                "Dict[str, Any]",
                "int",
                "set",
                "List[list]"
            ],
            "arguments": {
                "metadata": [
                    "bool",
                    "str",
                    "TextIO",
                    "List[str]"
                ],
                "package_path": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "bool",
                    "pydcop.replication.path_utils.Path",
                    "cerulean.path.Path"
                ],
                "env": [
                    "bool",
                    "Optional[Callable]",
                    "str",
                    "Optional[Any]"
                ],
                "alias": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "destination": [
                    "bool",
                    "Optional[Callable]",
                    "str",
                    "Optional[Any]"
                ],
                "fs_args": [
                    "bool",
                    "Optional[Callable]",
                    "str",
                    "Optional[Any]"
                ],
                "all_flag": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_pull_package": {
            "name": "_pull_package",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "package_path": [
                    "str",
                    "bool"
                ],
                "metadata": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[pathlib.Path, str, None]",
                    "list"
                ],
                "env": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "alias": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "destination": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "fs_args": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "_pull_packages_from_manifest": {
            "name": "_pull_packages_from_manifest",
            "location": 182,
            "return": [
                "Set[str]",
                "Dict[str, Any]",
                "List[Tuple[bytes, bytes]]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "dict",
                    "waterbutler.core.streams.BaseStream"
                ]
            }
        },
        "_package_micropkgs_from_manifest": {
            "name": "_package_micropkgs_from_manifest",
            "location": 206,
            "return": [
                "int"
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "cmk.base.config.ObjectAttributes"
                ]
            }
        },
        "package_micropkg": {
            "name": "package_micropkg",
            "location": 256,
            "return": [
                "str",
                "bool",
                "Optional[Union[Any, str]]"
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "module_path": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "Union[pathlib3x.Path, IO[str], None]"
                ],
                "env": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]"
                ],
                "alias": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]"
                ],
                "destination": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]"
                ],
                "all_flag": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "_get_fsspec_filesystem": {
            "name": "_get_fsspec_filesystem",
            "location": 283,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "location": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Optional[Union[Any, Any]]",
                    "Optional[List[str]]",
                    "Tuple[int, int, int]",
                    "Type"
                ]
            }
        },
        "_unpack_sdist": {
            "name": "_unpack_sdist",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [
                    "str",
                    "dict",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "destination": [
                    "Optional[pathlib.Path]",
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "int"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "_rename_files": {
            "name": "_rename_files",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "conf_source": [
                    "str",
                    "Callable",
                    "pathlib.Path"
                ],
                "old_name": [
                    "str"
                ],
                "new_name": [
                    "str",
                    "boto3.resources.base.ServiceResource"
                ]
            }
        },
        "_refactor_code_for_unpacking": {
            "name": "_refactor_code_for_unpacking",
            "location": 338,
            "return": [
                "str",
                "Union[str, pathlib.Path]",
                "Iterable[str]",
                "TextIO"
            ],
            "arguments": {
                "project": [
                    "str",
                    "List[str]",
                    "TextIO",
                    "Tuple[float, float, float, float]",
                    "Optional[IO[str]]"
                ],
                "package_path": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "tests_path": [
                    "pathlib.Path",
                    "pathlib.PurePath"
                ],
                "alias": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ],
                "destination": [
                    "str",
                    "Iterable[pathlib.Path]",
                    "bool"
                ],
                "project_metadata": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]",
                    "Iterable[Tuple[pathlib.Path, pathlib.Path]]"
                ]
            }
        },
        "_install_files": {
            "name": "_install_files",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "project_metadata": [
                    "int",
                    "str",
                    "tensorhive.core.ssh.Hostname"
                ],
                "package_name": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]"
                ],
                "source_path": [
                    "pathlib.Path",
                    "str"
                ],
                "env": [
                    "Optional[pathlib.Path]",
                    "bool",
                    "str",
                    "dict"
                ],
                "alias": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "Iterable[Tuple[pathlib.Path, pathlib.Path]]"
                ],
                "destination": [
                    "Optional[TextIO]",
                    "Optional[Callable[[List, bool], None]]",
                    "pathlib.Path",
                    "tartare.core.models.ValidityPeriod",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_find_config_files": {
            "name": "_find_config_files",
            "location": 466,
            "return": [
                "str",
                "pathlib.Path",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "source_config_dir": [
                    "pathlib.Path",
                    "waterbutler.core.path.WaterButlerPath",
                    "str"
                ],
                "glob_patterns": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Dict[str, pathlib.Path]"
                ]
            }
        },
        "_get_default_version": {
            "name": "_get_default_version",
            "location": 482,
            "return": [
                "List[dict]",
                "django.contrib.auth.models.AbstractBaseUser",
                "List[Dict[str, Any]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "bool",
                    "list"
                ],
                "micropkg_module_path": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "_package_micropkg": {
            "name": "_package_micropkg",
            "location": 495,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "micropkg_module_path": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "metadata": [
                    "bool",
                    "str",
                    "Set[str]",
                    "Union[pathlib.Path, str, None]",
                    "pathlib.Path"
                ],
                "alias": [
                    "str",
                    "Set[str]",
                    "dict"
                ],
                "destination": [
                    "Optional[Union[str, pathlib.Path]]",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "str"
                ],
                "env": [
                    "pathlib.Path",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_validate_dir": {
            "name": "_validate_dir",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path"
                ]
            }
        },
        "_get_sdist_name": {
            "name": "_get_sdist_name",
            "location": 546,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Tuple[str, int]"
                ],
                "version": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Tuple[str, int]"
                ]
            }
        },
        "_sync_path_list": {
            "name": "_sync_path_list",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Literal",
                    "graphx.core.entities.Node"
                ],
                "target": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "_make_install_requires": {
            "name": "_make_install_requires",
            "location": 556,
            "return": [
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "requirements_txt": [
                    "Callable",
                    "int",
                    "graphx.core.entities.Edge"
                ]
            }
        },
        "_create_nested_package": {
            "name": "_create_nested_package",
            "location": 565,
            "return": [
                "pathlib.Path",
                "str",
                "projects.project_models.Project"
            ],
            "arguments": {
                "project": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "package_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "_move_package": {
            "name": "_move_package",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str",
                    "dict",
                    "pathlib.PurePath",
                    "projects.models.Project",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "source": [
                    "str",
                    "Optional[Union[str, pathlib.Path]]",
                    "pathlib.Path"
                ],
                "target": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "_rename_package": {
            "name": "_rename_package",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str",
                    "cmk.utils.type_defs.SectionName",
                    "Dict[str, Any]"
                ],
                "old_name": [
                    "str",
                    "Optional[str]"
                ],
                "new_name": [
                    "str",
                    "int"
                ]
            }
        },
        "_refactor_code_for_package": {
            "name": "_refactor_code_for_package",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "package_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "bool"
                ],
                "tests_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "alias": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "project_metadata": [
                    "pathlib.Path",
                    "str",
                    "Type[pathlib.PurePath]",
                    "waterbutler.core.path.WaterButlerPath",
                    "Dict[str, pathlib.Path]"
                ]
            }
        },
        "_generate_sdist_file": {
            "name": "_generate_sdist_file",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "micropkg_name": [
                    "str",
                    "Optional[str]"
                ],
                "destination": [
                    "str",
                    "pathlib.PurePath",
                    "List[str]"
                ],
                "source_paths": [
                    "pathlib.Path",
                    "str"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "waterbutler.core.path.WaterButlerPath"
                ],
                "metadata": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "dict"
                ],
                "alias": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_generate_manifest_file": {
            "name": "_generate_manifest_file",
            "location": 762,
            "return": [
                ""
            ],
            "arguments": {
                "output_dir": [
                    "str"
                ]
            }
        },
        "_generate_setup_file": {
            "name": "_generate_setup_file",
            "location": 775,
            "return": [
                "str",
                "pathlib.Path",
                "list",
                "Tuple[str, str]"
            ],
            "arguments": {
                "package_name": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "Union[Optional[str], Literal[Literal]]"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "Union[Optional[str], Literal[Literal]]"
                ],
                "install_requires": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "Union[Optional[str], Literal[Literal]]"
                ],
                "output_dir": [
                    "str"
                ]
            }
        },
        "_get_package_artifacts": {
            "name": "_get_package_artifacts",
            "location": 788,
            "return": [
                "str",
                "pathlib.Path",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "pathlib.Path"
                ],
                "package_name": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_append_package_reqs": {
            "name": "_append_package_reqs",
            "location": 803,
            "return": [
                "str",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "Union[tuple, list]",
                "bool"
            ],
            "arguments": {
                "requirements_txt": [
                    "pathlib.Path",
                    "bool",
                    "str"
                ],
                "package_reqs": [
                    "str",
                    "dict",
                    "Iterable[cmk.utils.type_defs.SectionName]",
                    "Dict[str, Any]",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]"
                ],
                "package_name": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "_safe_parse_requirements": {
            "name": "_safe_parse_requirements",
            "location": 840,
            "return": [
                "float",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "requirements": [
                    "float",
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "_refactor_code_for_unpacking._move_package_with_conflicting_name": {
            "name": "_move_package_with_conflicting_name",
            "location": 371,
            "return": [],
            "arguments": {
                "target": [],
                "original_name": [],
                "desired_name": []
            }
        },
        "_refactor_code_for_package._move_package_with_conflicting_name": {
            "name": "_move_package_with_conflicting_name",
            "location": 653,
            "return": [
                ""
            ],
            "arguments": {
                "target": [
                    "str",
                    "List[str]"
                ],
                "conflicting_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/cli/pipeline.py": {
        "_assert_pkg_name_ok": {
            "name": "_assert_pkg_name_ok",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "pkg_name": [
                    "str",
                    "type"
                ]
            }
        },
        "_check_pipeline_name": {
            "name": "_check_pipeline_name",
            "location": 67,
            "return": [
                "str",
                "list",
                "T",
                "Type"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "Tuple[str]",
                    "List[Tuple[str, str]]",
                    "Union[click.Option, click.Parameter]",
                    "bool",
                    "click.Parameter",
                    "str"
                ],
                "param": [
                    "click.Context",
                    "Tuple[str]",
                    "List[Tuple[str, str]]",
                    "Union[click.Option, click.Parameter]",
                    "bool",
                    "click.Parameter",
                    "str"
                ],
                "value": [
                    "str",
                    "click.core.Command"
                ]
            }
        },
        "pipeline_cli": {
            "name": "pipeline_cli",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pipeline": {
            "name": "pipeline",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_pipeline": {
            "name": "create_pipeline",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path"
                ],
                "name": [
                    "pathlib.Path",
                    "dict",
                    "str",
                    "bool",
                    "Optional[str]",
                    "bytes"
                ],
                "skip_config": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ],
                "env": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "delete_pipeline": {
            "name": "delete_pipeline",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "pathlib.Path",
                    "dict"
                ],
                "name": [
                    "str",
                    "List[pathlib.Path]",
                    "bool"
                ],
                "env": [
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "yes": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_echo_deletion_warning": {
            "name": "_echo_deletion_warning",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "pathlib.Path",
                    "settings.Settings",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "_create_pipeline": {
            "name": "_create_pipeline",
            "location": 194,
            "return": [
                "str",
                "pathlib.Path",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Set[str]"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "str",
                    "norfs.fs.base.Path",
                    "Optional[pathlib.Path]",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "_sync_dirs": {
            "name": "_sync_dirs",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ],
                "target": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "overwrite": [
                    "str",
                    "bool"
                ]
            }
        },
        "_get_pipeline_artifacts": {
            "name": "_get_pipeline_artifacts",
            "location": 280,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "project_metadata": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "pipeline_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "env": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "_get_artifacts_to_package": {
            "name": "_get_artifacts_to_package",
            "location": 289,
            "return": [
                "list",
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "project_metadata": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]"
                ],
                "module_path": [
                    "str",
                    "pathlib.Path"
                ],
                "env": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_copy_pipeline_tests": {
            "name": "_copy_pipeline_tests",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "pipeline_name": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "result_path": [
                    "str"
                ],
                "package_dir": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "_copy_pipeline_configs": {
            "name": "_copy_pipeline_configs",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "result_path": [
                    "str",
                    "bool"
                ],
                "conf_path": [
                    "str",
                    "bool",
                    "int",
                    "pathlib.Path"
                ],
                "skip_config": [
                    "bool",
                    "int"
                ],
                "env": [
                    "str",
                    "bool",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "_delete_artifacts": {
            "name": "_delete_artifacts",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kedro-main/kedro/framework/cli/project.py": {
        "project_group": {
            "name": "project_group",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "pathlib.Path"
                ],
                "args": []
            }
        },
        "lint": {
            "name": "lint",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "pathlib.Path",
                    "TextIO"
                ],
                "files": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "Optional[pathlib.Path]"
                ],
                "check_only": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "ipython": {
            "name": "ipython",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "Dict[str, str]",
                    "Iterable[str]",
                    "os._Environ",
                    "bool"
                ],
                "env": [
                    "bool",
                    "type"
                ],
                "args": []
            }
        },
        "package": {
            "name": "package",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "pathlib.Path",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "build_docs": {
            "name": "build_docs",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "pathlib.Path",
                    "bool",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "BinaryIO"
                ],
                "open_docs": [
                    "bool",
                    "Exception",
                    "str"
                ]
            }
        },
        "build_reqs": {
            "name": "build_reqs",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "pathlib.Path",
                    "str"
                ],
                "input_file": [
                    "pathlib.Path",
                    "TextIO",
                    "str"
                ],
                "output_file": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, cerulean.Path]",
                    "TextIO",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ],
                "args": []
            }
        },
        "activate_nbstripout": {
            "name": "activate_nbstripout",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "pathlib.Path",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "tag": [
                    "str",
                    "Optional[str]",
                    "object",
                    "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]",
                    "dict",
                    "bool"
                ],
                "env": [
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "Dict[str, str]",
                    "Dict[str, bytes]",
                    "Optional[str]",
                    "raiden.utils.Address",
                    "Dict[str, list]"
                ],
                "runner": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "str"
                ],
                "is_async": [
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "node_names": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "to_nodes": [
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "from_nodes": [
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "from_inputs": [
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "to_outputs": [
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "load_version": [
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "pipeline": [
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "config": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Sequence[str]"
                ],
                "params": [
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "Dict[str, str]",
                    "Dict[str, bytes]",
                    "Optional[str]",
                    "raiden.utils.Address",
                    "Dict[str, list]"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/cli/registry.py": {
        "registry_cli": {
            "name": "registry_cli",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "registry": {
            "name": "registry",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "list_registered_pipelines": {
            "name": "list_registered_pipelines",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "describe_registered_pipeline": {
            "name": "describe_registered_pipeline",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "metadata": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ],
                "name": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/cli/starters.py": {
        "_remove_readonly": {
            "name": "_remove_readonly",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "str"
                ],
                "path": [
                    "pathlib.Path",
                    "norfs.fs.base.Path",
                    "str",
                    "bool",
                    "dict"
                ],
                "excinfo": [
                    "str",
                    "Iterable[Tuple[str, Any]]",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "_get_starters_dict": {
            "name": "_get_starters_dict",
            "location": 101,
            "return": [
                "int",
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {}
        },
        "_starter_spec_to_dict": {
            "name": "_starter_spec_to_dict",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "starter_specs": [
                    "dict",
                    "Mapping",
                    "Dict[str, int]",
                    "Dict[int, Dict[int, Any]]"
                ]
            }
        },
        "create_cli": {
            "name": "create_cli",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "new": {
            "name": "new",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "pathlib.Path",
                    "cerulean.Path",
                    "Optional[str]"
                ],
                "starter_alias": [
                    "bool",
                    "int",
                    "str"
                ],
                "checkout": [
                    "pathlib.Path",
                    "str",
                    "int"
                ],
                "directory": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "starter": {
            "name": "starter",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "list_starters": {
            "name": "list_starters",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_fetch_config_from_file": {
            "name": "_fetch_config_from_file",
            "location": 266,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[str]",
                "bool",
                "cmk.utils.type_defs.OptionalConfigSerial"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "_make_cookiecutter_args": {
            "name": "_make_cookiecutter_args",
            "location": 296,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "config": [
                    "str",
                    "utils.config_generator.Configurations",
                    "pathlib.Path",
                    "Optional[List[str]]"
                ],
                "checkout": [
                    "dict",
                    "TextIO"
                ],
                "directory": [
                    "dict",
                    "TextIO"
                ]
            }
        },
        "_create_project": {
            "name": "_create_project",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "template_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path",
                    "bool"
                ],
                "cookiecutter_args": [
                    "pathlib.Path",
                    "Optional[Callable[[List, bool], None]]",
                    "Optional[TextIO]",
                    "bool",
                    "Optional[IO[str]]"
                ]
            }
        },
        "_get_cookiecutter_dir": {
            "name": "_get_cookiecutter_dir",
            "location": 382,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "os.PathLike",
                "pathlib.Path",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "template_path": [
                    "str"
                ],
                "checkout": [
                    "str"
                ],
                "directory": [
                    "str"
                ],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "_get_prompts_required": {
            "name": "_get_prompts_required",
            "location": 419,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[pathlib.Path]",
                "Optional[str]",
                "Optional[Tuple[str, str]]"
            ],
            "arguments": {
                "cookiecutter_dir": [
                    "path.Path",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_fetch_config_from_user_prompts": {
            "name": "_fetch_config_from_user_prompts",
            "location": 434,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[dict]"
            ],
            "arguments": {
                "prompts": [
                    "dict",
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "cookiecutter_context": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_make_cookiecutter_context_for_prompts": {
            "name": "_make_cookiecutter_context_for_prompts",
            "location": 471,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Callable[..., None]",
                "Optional[Any]"
            ],
            "arguments": {
                "cookiecutter_dir": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "_get_available_tags": {
            "name": "_get_available_tags",
            "location": 510,
            "return": [
                "str",
                "List[Optional[str]]",
                "MutableMapping[str, int]",
                "Match",
                "Set[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "template_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_validate_config_file": {
            "name": "_validate_config_file",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "prompts": [
                    "Set[str]",
                    "list",
                    "Iterator[dict]",
                    "Tuple[List[Any], List[Any]]"
                ]
            }
        },
        "_Prompt.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Prompt.__str__": {
            "name": "__str__",
            "location": 494,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Prompt.validate": {
            "name": "validate",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_input": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/cli/utils.py": {
        "call": {
            "name": "call",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "List[str]",
                    "BinaryIO",
                    "int",
                    "str"
                ]
            }
        },
        "python_call": {
            "name": "python_call",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "module": [],
                "arguments": []
            }
        },
        "find_stylesheets": {
            "name": "find_stylesheets",
            "location": 63,
            "return": [
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "forward_command": {
            "name": "forward_command",
            "location": 73,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "group": [
                    "Optional[str]",
                    "float",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "str",
                    "Optional[Callable]",
                    "int"
                ],
                "name": [
                    "Optional[str]",
                    "float",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "str",
                    "Optional[Callable]",
                    "int"
                ],
                "forward_help": [
                    "Optional[str]",
                    "float",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "str",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "_suggest_cli_command": {
            "name": "_suggest_cli_command",
            "location": 91,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "original_command_name": [
                    "str",
                    "int"
                ],
                "existing_command_names": [
                    "str",
                    "int"
                ]
            }
        },
        "get_pkg_version": {
            "name": "get_pkg_version",
            "location": 201,
            "return": [
                "str",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "reqs_path": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Union[str, pathlib.Path]"
                ],
                "package_name": [
                    "str",
                    "Optional[str]",
                    "Union[List[str], Tuple[str], None]",
                    "Optional[Dict[int, Any]]"
                ]
            }
        },
        "_update_verbose_flag": {
            "name": "_update_verbose_flag",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "param": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "click.Context",
                    "bool"
                ]
            }
        },
        "_click_verbose": {
            "name": "_click_verbose",
            "location": 233,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Callable",
                    "Tuple[str, str, List[str]]"
                ]
            }
        },
        "command_with_verbosity": {
            "name": "command_with_verbosity",
            "location": 244,
            "return": [
                "list",
                "Callable[[Mapping], T]",
                "int",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "group": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_clean_pycache": {
            "name": "_clean_pycache",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "split_string": {
            "name": "split_string",
            "location": 291,
            "return": [
                "str",
                "Iterable[str]",
                "List[List[str]]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "param": [
                    "click.Parameter",
                    "str",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "click.Context"
                ]
            }
        },
        "env_option": {
            "name": "env_option",
            "location": 296,
            "return": [
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "func_": [
                    "Type"
                ]
            }
        },
        "_filter_deprecation_warnings": {
            "name": "_filter_deprecation_warnings",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_check_module_importable": {
            "name": "_check_module_importable",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_get_entry_points": {
            "name": "_get_entry_points",
            "location": 322,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "List[bool]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "_safe_load_entry_point": {
            "name": "_safe_load_entry_point",
            "location": 327,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "Mapping[str, Sequence[str]]",
                "int"
            ],
            "arguments": {
                "entry_point": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "load_entry_points": {
            "name": "load_entry_points",
            "location": 343,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "_config_file_callback": {
            "name": "_config_file_callback",
            "location": 365,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "bool",
                    "Tuple[str]",
                    "click.Context",
                    "str"
                ],
                "value": [
                    "str",
                    "click.Context"
                ]
            }
        },
        "_reformat_load_versions": {
            "name": "_reformat_load_versions",
            "location": 383,
            "return": [
                "Optional[str]",
                "Tuple[int]",
                "type",
                "bool",
                "Optional[Callable[[dict], None]]"
            ],
            "arguments": {
                "ctx": [
                    "Union[click.Option, click.Parameter]",
                    "click.Context",
                    "bool",
                    "click.Parameter",
                    "Tuple[str]",
                    "List[Tuple[str, str]]"
                ],
                "param": [
                    "Union[click.Option, click.Parameter]",
                    "click.Context",
                    "bool",
                    "click.Parameter",
                    "Tuple[str]",
                    "List[Tuple[str, str]]"
                ],
                "value": [
                    "Union[click.Option, click.Parameter]",
                    "click.Context",
                    "bool",
                    "click.Parameter",
                    "Tuple[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "_try_convert_to_numeric": {
            "name": "_try_convert_to_numeric",
            "location": 404,
            "return": [
                "str",
                "bool",
                "Generator"
            ],
            "arguments": {
                "value": [
                    "int",
                    "T",
                    "float"
                ]
            }
        },
        "_split_params": {
            "name": "_split_params",
            "location": 412,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Context"
                ],
                "value": [
                    "Dict[str, Any]",
                    "click.Context"
                ]
            }
        },
        "_update_value_nested_dict": {
            "name": "_update_value_nested_dict",
            "location": 437,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "nested_dict": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "walking_path": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_get_values_as_tuple": {
            "name": "_get_values_as_tuple",
            "location": 468,
            "return": [
                "bool",
                "str",
                "Callable[[], bool]",
                "Iterable[pathlib.Path]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "values": [
                    "Iterable[str]",
                    "str",
                    "Union[bytes, bytearray, str]",
                    "List[str]"
                ]
            }
        },
        "forward_command.wrapit": {
            "name": "wrapit",
            "location": 76,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "dict",
                    "pathlib.Path"
                ]
            }
        },
        "CommandCollection.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandCollection._dedupe_commands": {
            "name": "_dedupe_commands",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "cli_collections": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "CommandCollection._merge_same_name_collections": {
            "name": "_merge_same_name_collections",
            "location": 158,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {
                "groups": [
                    "Dict[str, Any]",
                    "bool",
                    "Iterable[Tuple[int, Any]]"
                ]
            }
        },
        "CommandCollection.resolve_command": {
            "name": "resolve_command",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "click.Context"
                ],
                "args": []
            }
        },
        "CommandCollection.format_commands": {
            "name": "format_commands",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str"
                ],
                "formatter": [
                    "str",
                    "click.Context"
                ]
            }
        },
        "command_with_verbosity.decorator": {
            "name": "decorator",
            "location": 247,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "KedroCliError.show": {
            "name": "show",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Iterable[pathlib.Path]",
                    "Optional[int]"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/cli/__init__.py": {},
    "kedro-main/kedro/framework/cli/hooks/manager.py": {
        "get_cli_hook_manager": {
            "name": "get_cli_hook_manager",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "CLIHooksManager.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIHooksManager._register_cli_hooks_setuptools": {
            "name": "_register_cli_hooks_setuptools",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/framework/cli/hooks/markers.py": {},
    "kedro-main/kedro/framework/cli/hooks/specs.py": {
        "CLICommandSpecs.before_command_run": {
            "name": "before_command_run",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_metadata": [
                    "Sequence[int]",
                    "dict"
                ],
                "command_args": [
                    "Sequence[int]",
                    "dict"
                ]
            }
        },
        "CLICommandSpecs.after_command_run": {
            "name": "after_command_run",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_metadata": [
                    "int",
                    "Sequence[int]",
                    "bool",
                    "List[dict]",
                    "str"
                ],
                "command_args": [
                    "int",
                    "Sequence[int]",
                    "bool",
                    "List[dict]",
                    "str"
                ],
                "exit_code": [
                    "int",
                    "Sequence[int]",
                    "bool",
                    "List[dict]",
                    "str"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/cli/hooks/__init__.py": {},
    "kedro-main/kedro/framework/context/context.py": {
        "_is_relative_path": {
            "name": "_is_relative_path",
            "location": 17,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "path_string": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "pathlib2.Path",
                    "pathlib.PurePath"
                ]
            }
        },
        "_convert_paths_to_absolute_posix": {
            "name": "_convert_paths_to_absolute_posix",
            "location": 52,
            "return": [
                "pathlib.Path",
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "project_path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path"
                ],
                "conf_dictionary": [
                    "Dict[str, Any]",
                    "dict",
                    "pathlib.Path",
                    "bytes",
                    "str"
                ]
            }
        },
        "_validate_layers_for_transcoding": {
            "name": "_validate_layers_for_transcoding",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "catalog": [
                    "str",
                    "kedro.io.DataCatalog"
                ]
            }
        },
        "_update_nested_dict": {
            "name": "_update_nested_dict",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "old_dict": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, int]",
                    "Dict[str, str]"
                ],
                "new_dict": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[int, Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "_validate_layers_for_transcoding._find_conflicts": {
            "name": "_find_conflicts",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "KedroContext.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "project_path": [
                    "str",
                    "Optional[str]"
                ],
                "config_loader": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "hook_manager": [
                    "bool",
                    "str"
                ],
                "env": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "Container[str]"
                ],
                "extra_params": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "Container[str]"
                ]
            }
        },
        "KedroContext.env": {
            "name": "env",
            "location": 203,
            "return": [
                "Optional[Dict[str, str]]",
                "Dict[str, str]",
                "List[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroContext.project_path": {
            "name": "project_path",
            "location": 213,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroContext.catalog": {
            "name": "catalog",
            "location": 223,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroContext.params": {
            "name": "params",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroContext.config_loader": {
            "name": "config_loader",
            "location": 254,
            "return": [
                "str",
                "Optional[dict]",
                "app.config.MQConfig",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroContext._get_catalog": {
            "name": "_get_catalog",
            "location": 264,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "kedro.versioning.Journal",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "load_versions": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "kedro.versioning.Journal",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "KedroContext._get_feed_dict": {
            "name": "_get_feed_dict",
            "location": 307,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroContext._get_config_credentials": {
            "name": "_get_config_credentials",
            "location": 337,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroContext._get_feed_dict._add_param_to_feed_dict": {
            "name": "_add_param_to_feed_dict",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "param_name": [
                    "str",
                    "dict"
                ],
                "param_value": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/context/__init__.py": {},
    "kedro-main/kedro/framework/hooks/manager.py": {
        "_create_hook_manager": {
            "name": "_create_hook_manager",
            "location": 23,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "_register_hooks": {
            "name": "_register_hooks",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "hook_manager": [
                    "Callable",
                    "int"
                ],
                "hooks": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_register_hooks_setuptools": {
            "name": "_register_hooks_setuptools",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "hook_manager": [],
                "disabled_plugins": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_NullPluginManager.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_NullPluginManager.__getattr__": {
            "name": "__getattr__",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "_NullPluginManager.__call__": {
            "name": "__call__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/framework/hooks/markers.py": {},
    "kedro-main/kedro/framework/hooks/specs.py": {
        "DataCatalogSpecs.after_catalog_created": {
            "name": "after_catalog_created",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "kedro.io.DataCatalog",
                    "bool",
                    "int"
                ],
                "conf_catalog": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "kedro.io.DataCatalog",
                    "bool",
                    "int"
                ],
                "conf_creds": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "kedro.io.DataCatalog",
                    "bool",
                    "int"
                ],
                "feed_dict": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "kedro.io.DataCatalog",
                    "bool",
                    "int"
                ],
                "save_version": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "kedro.io.DataCatalog",
                    "bool",
                    "int"
                ],
                "load_versions": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "kedro.io.DataCatalog",
                    "bool",
                    "int"
                ]
            }
        },
        "NodeSpecs.before_node_run": {
            "name": "before_node_run",
            "location": 49,
            "return": [
                "typing.Optional[typing.Dict[builtins.str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Set[int]"
                ],
                "catalog": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Set[int]"
                ],
                "inputs": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Set[int]"
                ],
                "is_async": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Set[int]"
                ],
                "session_id": [
                    "List[Dict[str, Any]]",
                    "str",
                    "Set[int]"
                ]
            }
        },
        "NodeSpecs.after_node_run": {
            "name": "after_node_run",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "Dict[str, Any]"
                ],
                "catalog": [
                    "int",
                    "Dict[str, Any]"
                ],
                "inputs": [
                    "int",
                    "Dict[str, Any]"
                ],
                "outputs": [
                    "int",
                    "Dict[str, Any]"
                ],
                "is_async": [
                    "int",
                    "Dict[str, Any]"
                ],
                "session_id": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "NodeSpecs.on_node_error": {
            "name": "on_node_error",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error": [
                    "bool",
                    "str",
                    "Type[T]"
                ],
                "node": [
                    "bool",
                    "str",
                    "Type[T]"
                ],
                "catalog": [
                    "bool",
                    "str",
                    "Type[T]"
                ],
                "inputs": [
                    "bool",
                    "str",
                    "Type[T]"
                ],
                "is_async": [
                    "bool",
                    "str",
                    "Type[T]"
                ],
                "session_id": [
                    "bool",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "PipelineSpecs.before_pipeline_run": {
            "name": "before_pipeline_run",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_params": [
                    "kedro.io.DataCatalog",
                    "kedro.pipeline.Pipeline",
                    "Dict[str, Any]",
                    "bool"
                ],
                "pipeline": [
                    "kedro.io.DataCatalog",
                    "kedro.pipeline.Pipeline",
                    "Dict[str, Any]",
                    "bool"
                ],
                "catalog": [
                    "kedro.io.DataCatalog",
                    "kedro.pipeline.Pipeline",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "PipelineSpecs.after_pipeline_run": {
            "name": "after_pipeline_run",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_params": [
                    "bool"
                ],
                "run_result": [
                    "bool"
                ],
                "pipeline": [
                    "bool"
                ],
                "catalog": [
                    "bool"
                ]
            }
        },
        "PipelineSpecs.on_pipeline_error": {
            "name": "on_pipeline_error",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error": [
                    "kedro.pipeline.Pipeline",
                    "Exception",
                    "kedro.io.DataCatalog",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Iterable[str]"
                ],
                "run_params": [
                    "kedro.pipeline.Pipeline",
                    "Exception",
                    "kedro.io.DataCatalog",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Iterable[str]"
                ],
                "pipeline": [
                    "kedro.pipeline.Pipeline",
                    "Exception",
                    "kedro.io.DataCatalog",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Iterable[str]"
                ],
                "catalog": [
                    "kedro.pipeline.Pipeline",
                    "Exception",
                    "kedro.io.DataCatalog",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Iterable[str]"
                ]
            }
        },
        "DatasetSpecs.before_dataset_loaded": {
            "name": "before_dataset_loaded",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str",
                    "int"
                ]
            }
        },
        "DatasetSpecs.after_dataset_loaded": {
            "name": "after_dataset_loaded",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str",
                    "bool",
                    "Callable[[], Any]",
                    "List[str]"
                ],
                "data": [
                    "str",
                    "bool",
                    "Callable[[], Any]",
                    "List[str]"
                ]
            }
        },
        "DatasetSpecs.before_dataset_saved": {
            "name": "before_dataset_saved",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str",
                    "bool",
                    "Callable[[], Any]",
                    "Iterator[int]"
                ],
                "data": [
                    "str",
                    "bool",
                    "Callable[[], Any]",
                    "Iterator[int]"
                ]
            }
        },
        "DatasetSpecs.after_dataset_saved": {
            "name": "after_dataset_saved",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str",
                    "bool",
                    "Callable[[], Any]",
                    "Iterator[int]"
                ],
                "data": [
                    "str",
                    "bool",
                    "Callable[[], Any]",
                    "Iterator[int]"
                ]
            }
        },
        "KedroContextSpecs.after_context_created": {
            "name": "after_context_created",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/hooks/__init__.py": {},
    "kedro-main/kedro/framework/project/__init__.py": {
        "_get_default_class": {
            "name": "_get_default_class",
            "location": 23,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "class_import_path": [
                    "str",
                    "dict",
                    "bool",
                    "Iterable[bytes]",
                    "Optional[Iterable[str]]",
                    "Callable"
                ]
            }
        },
        "_load_data_wrapper": {
            "name": "_load_data_wrapper",
            "location": 122,
            "return": [
                "bool",
                "str",
                "Optional[pathlib.Path]",
                "List[str]",
                "Generator"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "configure_project": {
            "name": "configure_project",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "package_name": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "configure_logging": {
            "name": "configure_logging",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "logging_config": [
                    "str",
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "validate_settings": {
            "name": "validate_settings",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_get_default_class.validator_func": {
            "name": "validator_func",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "settings": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ],
                "validators": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "_IsSubclassValidator.validate": {
            "name": "validate",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Dict[str, Any]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "_HasSharedParentClassValidator.validate": {
            "name": "validate",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Dict[str, Any]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "_ProjectSettings.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_load_data_wrapper.inner": {
            "name": "inner",
            "location": 127,
            "return": [
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [
                    "float",
                    "int"
                ]
            }
        },
        "_ProjectPipelines.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ProjectPipelines._get_pipelines_registry_callable": {
            "name": "_get_pipelines_registry_callable",
            "location": 147,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pipelines_module": [
                    "str",
                    "int"
                ]
            }
        },
        "_ProjectPipelines._load_data": {
            "name": "_load_data",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ProjectPipelines.configure": {
            "name": "configure",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipelines_module": [
                    "str",
                    "ruamel.yaml.YAML"
                ]
            }
        },
        "_ProjectLogging.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_ProjectLogging.configure": {
            "name": "configure",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging_config": [
                    "dict"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/session/session.py": {
        "_describe_git": {
            "name": "_describe_git",
            "location": 31,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "project_path": [
                    "str",
                    "cerulean.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "_jsonify_cli_context": {
            "name": "_jsonify_cli_context",
            "location": 55,
            "return": [
                "str",
                "int",
                "type",
                "BaseException",
                "bool"
            ],
            "arguments": {
                "ctx": [
                    "click.core.Context",
                    "click.Context"
                ]
            }
        },
        "KedroSession.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "package_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "project_path": [
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "save_on_close": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[float, float]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "KedroSession.create": {
            "name": "create",
            "location": 111,
            "return": [
                "str",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "pathlib.Path"
                ],
                "package_name": [
                    "str",
                    "pathlib.Path"
                ],
                "project_path": [
                    "str",
                    "pathlib.Path"
                ],
                "save_on_close": [
                    "str",
                    "pathlib.Path"
                ],
                "env": [
                    "str"
                ],
                "extra_params": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "KedroSession._get_logging_config": {
            "name": "_get_logging_config",
            "location": 179,
            "return": [
                "Optional[dict]",
                "static_frame.core.display.Display",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Sequence",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroSession._setup_logging": {
            "name": "_setup_logging",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroSession._init_store": {
            "name": "_init_store",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroSession._log_exception": {
            "name": "_log_exception",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [
                    "Type",
                    "int",
                    "List[Dict]"
                ],
                "exc_tb": [
                    "Type",
                    "int",
                    "List[Dict]"
                ]
            }
        },
        "KedroSession._logger": {
            "name": "_logger",
            "location": 233,
            "return": [
                "logging.Logger",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroSession.store": {
            "name": "store",
            "location": 237,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroSession.load_context": {
            "name": "load_context",
            "location": 241,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroSession._get_config_loader": {
            "name": "_get_config_loader",
            "location": 262,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroSession.close": {
            "name": "close",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroSession.__enter__": {
            "name": "__enter__",
            "location": 282,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KedroSession.__exit__": {
            "name": "__exit__",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "int",
                    "Optional[Exception]",
                    "Optional[type]",
                    "bool"
                ],
                "exc_value": [
                    "int",
                    "Optional[Exception]",
                    "Optional[type]",
                    "bool"
                ],
                "tb_": [
                    "int",
                    "Optional[Exception]",
                    "Optional[type]",
                    "bool"
                ]
            }
        },
        "KedroSession.run": {
            "name": "run",
            "location": 290,
            "return": [
                "bool",
                "int",
                "Coroutine"
            ],
            "arguments": {
                "self": [],
                "pipeline_name": [
                    "str",
                    "bool"
                ],
                "tags": [
                    "str",
                    "Optional[str]"
                ],
                "runner": [
                    "str",
                    "bool"
                ],
                "node_names": [
                    "str",
                    "Optional[str]"
                ],
                "from_nodes": [
                    "str",
                    "Optional[str]"
                ],
                "to_nodes": [
                    "str",
                    "Optional[str]"
                ],
                "from_inputs": [
                    "str",
                    "Optional[str]"
                ],
                "to_outputs": [
                    "str",
                    "Optional[str]"
                ],
                "load_versions": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "kedro-main/kedro/framework/session/store.py": {
        "BaseSessionStore.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "List[pathlib.Path]"
                ],
                "session_id": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseSessionStore._logger": {
            "name": "_logger",
            "location": 23,
            "return": [
                "logging.Logger",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSessionStore.read": {
            "name": "read",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSessionStore.save": {
            "name": "save",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShelveStore._location": {
            "name": "_location",
            "location": 52,
            "return": [
                "str",
                "pathlib.Path",
                "path.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShelveStore.read": {
            "name": "read",
            "location": 55,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShelveStore.save": {
            "name": "save",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/framework/session/__init__.py": {},
    "kedro-main/kedro/io/cached_dataset.py": {
        "CachedDataSet.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str",
                    "Optional[float]",
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "Dict[int, Dict[str, str]]"
                ],
                "version": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "str"
                ],
                "copy_mode": [
                    "int",
                    "str",
                    "Iterable[List[str]]",
                    "Iterable[List[Any]]"
                ]
            }
        },
        "CachedDataSet._release": {
            "name": "_release",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedDataSet._from_config": {
            "name": "_from_config",
            "location": 69,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "version": [
                    "Optional[Dict]",
                    "Optional[dict]",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "CachedDataSet._describe": {
            "name": "_describe",
            "location": 82,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedDataSet._load": {
            "name": "_load",
            "location": 88,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedDataSet._save": {
            "name": "_save",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "CachedDataSet._exists": {
            "name": "_exists",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedDataSet.__getstate__": {
            "name": "__getstate__",
            "location": 103,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/io/core.py": {
        "generate_timestamp": {
            "name": "generate_timestamp",
            "location": 322,
            "return": [
                "datetime.datetime",
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "parse_dataset_definition": {
            "name": "parse_dataset_definition",
            "location": 353,
            "return": [
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Union[pathlib.Path, str]"
                ],
                "load_version": [
                    "str",
                    "pathlib.Path"
                ],
                "save_version": [
                    "str",
                    "Union[_WebHandler, abc.AbstractView]",
                    "Optional[str]"
                ]
            }
        },
        "_load_obj": {
            "name": "_load_obj",
            "location": 424,
            "return": [
                "Optional[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "class_path": [
                    "str",
                    "pathpy.core.path.Path.Collection"
                ]
            }
        },
        "_local_exists": {
            "name": "_local_exists",
            "location": 452,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "_parse_filepath": {
            "name": "_parse_filepath",
            "location": 654,
            "return": [
                "str",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_protocol_and_path": {
            "name": "get_protocol_and_path",
            "location": 692,
            "return": [
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "version": [
                    "Optional[str]",
                    "Sequence[int]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bool",
                    "List[int]",
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "get_filepath_str": {
            "name": "get_filepath_str",
            "location": 721,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "protocol": [
                    "str"
                ]
            }
        },
        "validate_on_forbidden_chars": {
            "name": "validate_on_forbidden_chars",
            "location": 737,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "AbstractDataSet.from_config": {
            "name": "from_config",
            "location": 117,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "dict",
                "Dict[str, pathlib.Path]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "List[str]",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "config": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "load_version": [
                    "str",
                    "Optional[Iterable[str]]",
                    "Type['BaseConfig']",
                    "bool"
                ],
                "save_version": [
                    "str",
                    "Optional[Iterable[str]]",
                    "Type['BaseConfig']",
                    "bool"
                ]
            }
        },
        "AbstractDataSet._logger": {
            "name": "_logger",
            "location": 169,
            "return": [
                "logging.Logger",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet.load": {
            "name": "load",
            "location": 172,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet.save": {
            "name": "save",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Union[None, int, str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "bytes",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "AbstractDataSet.__str__": {
            "name": "__str__",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet._load": {
            "name": "_load",
            "location": 251,
            "return": [
                "_DO"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet._save": {
            "name": "_save",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[Dict]",
                    "List[Tuple]",
                    "int",
                    "bytes"
                ]
            }
        },
        "AbstractDataSet._describe": {
            "name": "_describe",
            "location": 265,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet.exists": {
            "name": "exists",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet._exists": {
            "name": "_exists",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet.release": {
            "name": "release",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet._release": {
            "name": "_release",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet._copy": {
            "name": "_copy",
            "location": 315,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractVersionedDataSet.__init__": {
            "name": "__init__",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Optional[List[str]]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "version": [
                    "Optional[List[str]]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "exists_function": [
                    "Optional[List[str]]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "glob_function": [
                    "Optional[List[str]]",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "AbstractVersionedDataSet._fetch_latest_load_version": {
            "name": "_fetch_latest_load_version",
            "location": 533,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractVersionedDataSet._fetch_latest_save_version": {
            "name": "_fetch_latest_save_version",
            "location": 550,
            "return": [
                "int",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractVersionedDataSet.resolve_load_version": {
            "name": "resolve_load_version",
            "location": 554,
            "return": [
                "str",
                "Optional[int]",
                "List[Dict[str, Any]]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractVersionedDataSet._get_load_path": {
            "name": "_get_load_path",
            "location": 562,
            "return": [
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractVersionedDataSet.resolve_save_version": {
            "name": "resolve_save_version",
            "location": 570,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractVersionedDataSet._get_save_path": {
            "name": "_get_save_path",
            "location": 578,
            "return": [
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractVersionedDataSet._get_versioned_path": {
            "name": "_get_versioned_path",
            "location": 594,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str"
                ]
            }
        },
        "AbstractVersionedDataSet.load": {
            "name": "load",
            "location": 597,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractVersionedDataSet.save": {
            "name": "save",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "list",
                    "Iterable[str]",
                    "Iterable[bytes]"
                ]
            }
        },
        "AbstractVersionedDataSet.exists": {
            "name": "exists",
            "location": 627,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractVersionedDataSet._release": {
            "name": "_release",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDataSet.__str__._to_str": {
            "name": "_to_str",
            "location": 224,
            "return": [
                "raiden.utils.TokenAmount",
                "Optional[Union[str, Any]]",
                "Callable[..., None]",
                "Optional[str]",
                "eth.abc.BlockHeaderAPI"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "utils.MinMaxStats",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "is_root": [
                    "str"
                ]
            }
        }
    },
    "kedro-main/kedro/io/data_catalog.py": {
        "_get_credentials": {
            "name": "_get_credentials",
            "location": 30,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "credentials_name": [
                    "str",
                    "List[str]"
                ],
                "credentials": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "_resolve_credentials": {
            "name": "_resolve_credentials",
            "location": 58,
            "return": [
                "Set[str]",
                "dict",
                "Dict[int, Dict[int, Any]]",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Type[T]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "credentials": [
                    "Optional[static_frame.core.display_config.DisplayConfig]",
                    "Dict[str, Any]",
                    "bool",
                    "core.Config"
                ]
            }
        },
        "_sub_nonword_chars": {
            "name": "_sub_nonword_chars",
            "location": 83,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "data_set_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "_resolve_credentials._map_value": {
            "name": "_map_value",
            "location": 73,
            "return": [
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "KT",
                    "bytes"
                ],
                "value": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "_FrozenDatasets.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_FrozenDatasets.__setattr__": {
            "name": "__setattr__",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Set[str]"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "DataCatalog.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_sets": [
                    "dict",
                    "bool",
                    "Tuple['cirq.Qid']",
                    "Dict[str, Any]",
                    "Tuple[str, list]"
                ],
                "feed_dict": [
                    "dict",
                    "Tuple['cirq.Qid']",
                    "T",
                    "\"ImageStack\""
                ],
                "layers": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "DataCatalog._logger": {
            "name": "_logger",
            "location": 177,
            "return": [
                "logging.Logger",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataCatalog.from_config": {
            "name": "from_config",
            "location": 181,
            "return": [
                "List[Dict[str, Any]]",
                "bytes",
                "boucanpy.core.dns_requesDnsRequestRepo",
                "dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "list",
                    "Optional[int]",
                    "List[str]",
                    "List[Tuple]",
                    "pathpy.core.node.Node",
                    "Mapping[Any, Any]"
                ],
                "catalog": [
                    "T",
                    "bytes",
                    "bool",
                    "dict",
                    "int"
                ],
                "credentials": [
                    "bool",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, bool]"
                ],
                "load_versions": [
                    "dict",
                    "bytes",
                    "List[List[str]]",
                    "Dict[str, Any]"
                ],
                "save_version": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "DataCatalog._get_dataset": {
            "name": "_get_dataset",
            "location": 284,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data_set_name": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "version": [
                    "kedro.io.core.Version",
                    "str",
                    "Optional[Iterable[Any]]",
                    "Tuple[float, float]",
                    "static_frame.core.util.IndexInitializer",
                    "type"
                ],
                "suggest": [
                    "str",
                    "Callable[[], Any]",
                    "Iterator[int]",
                    "int"
                ]
            }
        },
        "DataCatalog.load": {
            "name": "load",
            "location": 312,
            "return": [
                "wtforms.fields.core.UnboundField",
                "bool",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "version": [
                    "bool",
                    "Optional[IO[bytes]]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[Dict[str, dict]]",
                    "str"
                ]
            }
        },
        "DataCatalog.save": {
            "name": "save",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "logging.Logger",
                    "dict",
                    "int"
                ],
                "data": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "DataCatalog.exists": {
            "name": "exists",
            "location": 386,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DataCatalog.release": {
            "name": "release",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DataCatalog.add": {
            "name": "add",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_set_name": [
                    "str",
                    "int"
                ],
                "data_set": [
                    "dict",
                    "str",
                    "Dict[str, float]",
                    "Dict[str, Any]"
                ],
                "replace": [
                    "bool",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "DataCatalog.add_all": {
            "name": "add_all",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_sets": [
                    "Dict[str, kedro.io.core.AbstractDataSet]",
                    "dict",
                    "List[Dict]",
                    "bool",
                    "int"
                ],
                "replace": [
                    "str",
                    "bool",
                    "dict",
                    "List[Pattern]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "DataCatalog.add_feed_dict": {
            "name": "add_feed_dict",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feed_dict": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "replace": [
                    "tuple",
                    "Mapping[str, Any]",
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "DataCatalog.list": {
            "name": "list",
            "location": 523,
            "return": [
                "Set[str]",
                "bool",
                "list",
                "List[float]",
                "Set[Tuple[int, int]]",
                "List[str]",
                "Set[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "regex_search": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "DataCatalog.shallow_copy": {
            "name": "shallow_copy",
            "location": 568,
            "return": [
                "dict",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataCatalog.__eq__": {
            "name": "__eq__",
            "location": 576,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "List[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]",
                    "Union[list, 'ListProxy']"
                ]
            }
        },
        "DataCatalog.confirm": {
            "name": "confirm",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "kedro-main/kedro/io/lambda_dataset.py": {
        "LambdaDataSet._describe": {
            "name": "_describe",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaDataSet._save": {
            "name": "_save",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "LambdaDataSet._load": {
            "name": "_load",
            "location": 58,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaDataSet._exists": {
            "name": "_exists",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaDataSet._release": {
            "name": "_release",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LambdaDataSet.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load": [
                    "str"
                ],
                "save": [
                    "str",
                    "bool"
                ],
                "exists": [
                    "str",
                    "Optional[str]"
                ],
                "release": [
                    "str",
                    "io.BytesIO"
                ]
            }
        },
        "LambdaDataSet._describe._to_str": {
            "name": "_to_str",
            "location": 33,
            "return": [
                "bool",
                "Optional[Any]",
                "Optional[Dict]",
                "dict",
                "Optional[str]",
                "int",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Tuple[str, str]",
                    "Optional[int]",
                    "Callable[[T], bool]"
                ]
            }
        }
    },
    "kedro-main/kedro/io/memory_dataset.py": {
        "_infer_copy_mode": {
            "name": "_infer_copy_mode",
            "location": 77,
            "return": [
                "int",
                "Type[Exception]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_copy_with_mode": {
            "name": "_copy_with_mode",
            "location": 105,
            "return": [
                "str",
                "Callable[[Any], bool]",
                "Optional[float]",
                "dict",
                "IO[bytes]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "int",
                    "Dict[str, Any]"
                ],
                "copy_mode": [
                    "str",
                    "List[Tuple[int, str]]",
                    "int"
                ]
            }
        },
        "MemoryDataSet.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "Optional[str]",
                    "\"ks.Series\"",
                    "bytes"
                ],
                "copy_mode": [
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "List[List[int]]"
                ]
            }
        },
        "MemoryDataSet._load": {
            "name": "_load",
            "location": 51,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryDataSet._save": {
            "name": "_save",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "defaultdict"
                ]
            }
        },
        "MemoryDataSet._exists": {
            "name": "_exists",
            "location": 63,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryDataSet._release": {
            "name": "_release",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryDataSet._describe": {
            "name": "_describe",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/kedro/io/partitioned_dataset.py": {
        "PartitionedDataSet.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "dataset": [
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "str",
                    "int"
                ],
                "filepath_arg": [
                    "bool",
                    "float",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[dict]"
                ],
                "filename_suffix": [
                    "bool",
                    "float",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[dict]"
                ],
                "credentials": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "bytes",
                    "int",
                    "Optional[str]"
                ],
                "load_args": [
                    "List[str]",
                    "MutableMapping",
                    "Optional[Dict]",
                    "Sequence[str]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "MutableMapping",
                    "Dict[str, str]",
                    "bool",
                    "Optional[bool]",
                    "int",
                    "Callable[[str], bool]",
                    "MutableMapping[str, Any]"
                ],
                "overwrite": [
                    "bool",
                    "float",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[dict]"
                ]
            }
        },
        "PartitionedDataSet._filesystem": {
            "name": "_filesystem",
            "location": 203,
            "return": [
                "trezor.utils.Writer",
                "Callable",
                "utils.Node",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionedDataSet._normalized_path": {
            "name": "_normalized_path",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionedDataSet._list_partitions": {
            "name": "_list_partitions",
            "location": 217,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Tuple[str, str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionedDataSet._join_protocol": {
            "name": "_join_protocol",
            "location": 224,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PartitionedDataSet._partition_to_path": {
            "name": "_partition_to_path",
            "location": 231,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PartitionedDataSet._path_to_partition": {
            "name": "_path_to_partition",
            "location": 237,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PartitionedDataSet._load": {
            "name": "_load",
            "location": 244,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionedDataSet._save": {
            "name": "_save",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "authorityspoke.io.name_index.RawFactor",
                    "bytes",
                    "str",
                    "authorityspoke.io.name_index.RawPredicate"
                ]
            }
        },
        "PartitionedDataSet._describe": {
            "name": "_describe",
            "location": 275,
            "return": [
                "int",
                "bool",
                "Type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionedDataSet._invalidate_caches": {
            "name": "_invalidate_caches",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionedDataSet._exists": {
            "name": "_exists",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartitionedDataSet._release": {
            "name": "_release",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementalDataSet.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Union[int, List]"
                ],
                "dataset": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Union[int, List]"
                ],
                "checkpoint": [
                    "bool",
                    "Optional[bool]",
                    "Callable[[], bool]",
                    "Optional[Dict]",
                    "Tuple[Literal, Literal]",
                    "Iterable[str]"
                ],
                "filepath_arg": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Union[int, List]"
                ],
                "filename_suffix": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Union[int, List]"
                ],
                "credentials": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Union[int, List]"
                ],
                "load_args": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Union[int, List]"
                ],
                "fs_args": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Union[int, List]"
                ]
            }
        },
        "IncrementalDataSet._parse_checkpoint_config": {
            "name": "_parse_checkpoint_config",
            "location": 418,
            "return": [
                "Dict[str, Any]",
                "Optional[dict]",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "checkpoint_config": [
                    "static_frame.core.store.StoreConfigMapInitializer",
                    "str",
                    "dict"
                ]
            }
        },
        "IncrementalDataSet._list_partitions": {
            "name": "_list_partitions",
            "location": 453,
            "return": [
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "Counter",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementalDataSet._checkpoint": {
            "name": "_checkpoint",
            "location": 479,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementalDataSet._read_checkpoint": {
            "name": "_read_checkpoint",
            "location": 483,
            "return": [
                "bool",
                "float",
                "Optional[float]",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementalDataSet._load": {
            "name": "_load",
            "location": 491,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementalDataSet.confirm": {
            "name": "confirm",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncrementalDataSet._list_partitions._is_valid_partition": {
            "name": "_is_valid_partition",
            "location": 461,
            "return": [
                "bool"
            ],
            "arguments": {
                "partition": [
                    "Type"
                ]
            }
        }
    },
    "kedro-main/kedro/io/__init__.py": {},
    "kedro-main/kedro/pipeline/modular_pipeline.py": {
        "_is_all_parameters": {
            "name": "_is_all_parameters",
            "location": 22,
            "return": [
                "str",
                "type",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_is_single_parameter": {
            "name": "_is_single_parameter",
            "location": 26,
            "return": [
                "str",
                "List[str]",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "type",
                    "dict",
                    "Tuple[str, int]"
                ]
            }
        },
        "_is_parameter": {
            "name": "_is_parameter",
            "location": 30,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_validate_inputs_outputs": {
            "name": "_validate_inputs_outputs",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Pattern",
                    "int",
                    "List[Tuple[int, int, str]]"
                ],
                "outputs": [
                    "bool",
                    "Tuple[int]",
                    "Type[T]",
                    "str"
                ],
                "pipe": [
                    "str",
                    "Pattern",
                    "bytes",
                    "float",
                    "int"
                ]
            }
        },
        "_validate_datasets_exist": {
            "name": "_validate_datasets_exist",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "str"
                ],
                "outputs": [
                    "int",
                    "memoryview",
                    "List[int]",
                    "Tuple[float, float]"
                ],
                "parameters": [
                    "str",
                    "Node",
                    "Dict[str, float]",
                    "bool",
                    "Optional[str]",
                    "Optional[Sequence[str]]"
                ],
                "pipe": [
                    "int",
                    "str",
                    "list",
                    "List[str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "_get_dataset_names_mapping": {
            "name": "_get_dataset_names_mapping",
            "location": 77,
            "return": [
                "Dict[str, Any]",
                "type",
                "Dict[str, Union[str, Any]]"
            ],
            "arguments": {
                "names": [
                    "Optional[str]",
                    "str",
                    "Optional[List]",
                    "node.Node"
                ]
            }
        },
        "_normalize_param_name": {
            "name": "_normalize_param_name",
            "location": 109,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_get_param_names_mapping": {
            "name": "_get_param_names_mapping",
            "location": 114,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "names": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "pipeline": {
            "name": "pipeline",
            "location": 151,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "pipe": [
                    "bool",
                    "int",
                    "List[str]",
                    "Tuple[int]"
                ]
            }
        },
        "pipeline._prefix_dataset": {
            "name": "_prefix_dataset",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "pipeline._prefix_param": {
            "name": "_prefix_param",
            "location": 226,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[object]",
                    "Optional[str]"
                ]
            }
        },
        "pipeline._is_transcode_base_in_mapping": {
            "name": "_is_transcode_base_in_mapping",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "pipeline._map_transcode_base": {
            "name": "_map_transcode_base",
            "location": 234,
            "return": [
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "pipeline._rename": {
            "name": "_rename",
            "location": 238,
            "return": [
                "bool",
                "Sequence[Any]",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "pipeline._process_dataset_names": {
            "name": "_process_dataset_names",
            "location": 259,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "datasets": [
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Type",
                    "int",
                    "str",
                    "Optional[gfg.trees.binary_tree_node.Node]"
                ]
            }
        },
        "pipeline._copy_node": {
            "name": "_copy_node",
            "location": 275,
            "return": [
                "float",
                "type"
            ],
            "arguments": {
                "node": [
                    "Node"
                ]
            }
        }
    },
    "kedro-main/kedro/pipeline/node.py": {
        "_node_error_message": {
            "name": "_node_error_message",
            "location": 491,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bool",
                    "Callable",
                    "Type[Any]"
                ]
            }
        },
        "node": {
            "name": "node",
            "location": 498,
            "return": [
                "str",
                "Mapping",
                "bool"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Union[str, List[str]]",
                    "Callable",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "inputs": [
                    "str",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Union[str, List[str]]",
                    "Callable",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "outputs": [
                    "str",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Union[str, List[str]]",
                    "Callable",
                    "Iterable[str]",
                    "Optional[str]"
                ]
            }
        },
        "_dict_inputs_to_list": {
            "name": "_dict_inputs_to_list",
            "location": 574,
            "return": [
                "bool",
                "int",
                "float",
                "Mapping"
            ],
            "arguments": {
                "func": [
                    "Dict[str, Any]",
                    "List[str]",
                    "str"
                ],
                "inputs": [
                    "Dict[str, Any]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_to_list": {
            "name": "_to_list",
            "location": 582,
            "return": [
                "Dict[str, Set[str]]",
                "Dict[str, Any]",
                "Callable",
                "List[Dict]"
            ],
            "arguments": {
                "element": [
                    "type",
                    "Optional[Any]",
                    "Mapping",
                    "Optional[Iterable[str]]",
                    "dict",
                    "Optional[Callable]",
                    "Optional[int]"
                ]
            }
        },
        "_get_readable_func_name": {
            "name": "_get_readable_func_name",
            "location": 598,
            "return": [
                "Optional[BaseException]",
                "bool",
                "Type[Any]"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "int",
                    "Optional[List[Any]]",
                    "Callable",
                    "List[List[int]]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Optional[Any]"
                ],
                "inputs": [
                    "Union[None, str, List[str], Dict[str, str]]",
                    "str",
                    "dict",
                    "type",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]"
                ],
                "outputs": [
                    "Union[None, str, List[str], Dict[str, str]]",
                    "type",
                    "Mapping",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Node._copy": {
            "name": "_copy",
            "location": 113,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._logger": {
            "name": "_logger",
            "location": 130,
            "return": [
                "logging.Logger",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._unique_key": {
            "name": "_unique_key",
            "location": 134,
            "return": [
                "str",
                "IO",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 147,
            "return": [
                "Dict[str, Any]",
                "Dict[str, List]",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "Node.__lt__": {
            "name": "__lt__",
            "location": 152,
            "return": [
                "Dict[str, Any]",
                "Dict[str, List]",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 157,
            "return": [
                "int",
                "slice",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 160,
            "return": [
                "bool",
                "Optional[Union[int, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__call__": {
            "name": "__call__",
            "location": 176,
            "return": [
                "Type",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._func_name": {
            "name": "_func_name",
            "location": 180,
            "return": [
                "str",
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.func": {
            "name": "func",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "Node.tags": {
            "name": "tags",
            "location": 210,
            "return": [
                "str",
                "Callable[[str], str]",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.tag": {
            "name": "tag",
            "location": 219,
            "return": [
                "str",
                "dict",
                "bool",
                "IO"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "Union[str, Iterable[str]]",
                    "List[str]",
                    "int",
                    "deque"
                ]
            }
        },
        "Node.name": {
            "name": "name",
            "location": 233,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.short_name": {
            "name": "short_name",
            "location": 245,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.namespace": {
            "name": "namespace",
            "location": 258,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.inputs": {
            "name": "inputs",
            "location": 267,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.outputs": {
            "name": "outputs",
            "location": 280,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.confirms": {
            "name": "confirms",
            "location": 291,
            "return": [
                "bytes",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.run": {
            "name": "run",
            "location": 299,
            "return": [
                "Sequence[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Node._run_with_no_inputs": {
            "name": "_run_with_no_inputs",
            "location": 355,
            "return": [
                "dict",
                "Dict[str, Any]",
                "int",
                "type"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str"
                ]
            }
        },
        "Node._run_with_one_input": {
            "name": "_run_with_one_input",
            "location": 365,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "bool"
                ],
                "node_input": [
                    "str",
                    "bool"
                ]
            }
        },
        "Node._run_with_list": {
            "name": "_run_with_list",
            "location": 375,
            "return": [
                "Set[str]",
                "bool",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str"
                ],
                "node_inputs": [
                    "str"
                ]
            }
        },
        "Node._run_with_dict": {
            "name": "_run_with_dict",
            "location": 386,
            "return": [
                "Dict[str, Any]",
                "dict",
                "T",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "node_inputs": [
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "Node._outputs_to_dictionary": {
            "name": "_outputs_to_dictionary",
            "location": 398,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "dict"
                ]
            }
        },
        "Node._validate_inputs": {
            "name": "_validate_inputs",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Type"
                ],
                "inputs": [
                    "Callable",
                    "T"
                ]
            }
        },
        "Node._validate_unique_outputs": {
            "name": "_validate_unique_outputs",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._validate_inputs_dif_than_outputs": {
            "name": "_validate_inputs_dif_than_outputs",
            "location": 467,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._process_inputs_for_bind": {
            "name": "_process_inputs_for_bind",
            "location": 477,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Optional[Iterable[str]]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "inputs": [
                    "bool",
                    "Iterable[int]",
                    "List[str]",
                    "Mapping[Any, Any]"
                ]
            }
        },
        "Node._unique_key.hashable": {
            "name": "hashable",
            "location": 135,
            "return": [
                "int",
                "float",
                "bool",
                "List[int]",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list",
                    "float",
                    "List[\"Variable\"]"
                ]
            }
        },
        "Node.__str__._set_to_str": {
            "name": "_set_to_str",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "xset": [
                    "int",
                    "List[str]",
                    "list",
                    "dict",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Node._outputs_to_dictionary._from_dict": {
            "name": "_from_dict",
            "location": 399,
            "return": [
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "Node._outputs_to_dictionary._from_list": {
            "name": "_from_list",
            "location": 408,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "Tuple[int, str]"
            ],
            "arguments": {}
        }
    },
    "kedro-main/kedro/pipeline/pipeline.py": {
        "_transcode_split": {
            "name": "_transcode_split",
            "location": 21,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "element": [
                    "str",
                    "List[str]",
                    "Exception",
                    "dict",
                    "Set[str]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "_strip_transcoding": {
            "name": "_strip_transcoding",
            "location": 44,
            "return": [
                "str",
                "Sequence[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "element": [
                    "str",
                    "list",
                    "List[Dict]"
                ]
            }
        },
        "_validate_duplicate_nodes": {
            "name": "_validate_duplicate_nodes",
            "location": 790,
            "return": [
                ""
            ],
            "arguments": {
                "nodes_or_pipes": [
                    "bool",
                    "dcos_e2e.node.Node",
                    "str",
                    "List[List[int]]",
                    "InstanceOrType[Node]"
                ]
            }
        },
        "_validate_unique_outputs": {
            "name": "_validate_unique_outputs",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "nodes": [
                    "List[kedro.pipeline.node.Node]",
                    "Optional[Node]"
                ]
            }
        },
        "_validate_unique_confirms": {
            "name": "_validate_unique_confirms",
            "location": 836,
            "return": [
                "None"
            ],
            "arguments": {
                "nodes": [
                    "List[kedro.pipeline.node.Node]",
                    "Optional[Node]"
                ]
            }
        },
        "_validate_transcoded_inputs_outputs": {
            "name": "_validate_transcoded_inputs_outputs",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "nodes": [
                    "List[kedro.pipeline.node.Node]",
                    "docutils.nodes.Node",
                    "Sequence[object]"
                ]
            }
        },
        "_topologically_sorted": {
            "name": "_topologically_sorted",
            "location": 873,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "node_dependencies": [
                    "int",
                    "network_simulator.Node.Node"
                ]
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "float",
                    "Optional[Any]",
                    "str",
                    "Tuple[int, Any]",
                    "Optional[\"Response\"]"
                ]
            }
        },
        "Pipeline.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.__add__": {
            "name": "__add__",
            "location": 179,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]",
                    "dict"
                ]
            }
        },
        "Pipeline.__radd__": {
            "name": "__radd__",
            "location": 184,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "Pipeline.__sub__": {
            "name": "__sub__",
            "location": 189,
            "return": [
                "Iterable[str]",
                "IO[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]"
                ]
            }
        },
        "Pipeline.__and__": {
            "name": "__and__",
            "location": 194,
            "return": [
                "Iterable[str]",
                "IO[str]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]"
                ]
            }
        },
        "Pipeline.__or__": {
            "name": "__or__",
            "location": 199,
            "return": [
                "Iterable[str]",
                "str",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]",
                    "Union[int, float]"
                ]
            }
        },
        "Pipeline.all_inputs": {
            "name": "all_inputs",
            "location": 204,
            "return": [
                "Set[str]",
                "Set[Tuple[int, int]]",
                "set",
                "Set[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.all_outputs": {
            "name": "all_outputs",
            "location": 213,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline._remove_intermediates": {
            "name": "_remove_intermediates",
            "location": 222,
            "return": [
                "List[str]",
                "str",
                "List[dict]",
                "list"
            ],
            "arguments": {
                "self": [],
                "datasets": [
                    "Set[str]",
                    "Container[T]",
                    "str",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "Pipeline.inputs": {
            "name": "inputs",
            "location": 228,
            "return": [
                "bool",
                "utils.Node",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.outputs": {
            "name": "outputs",
            "location": 240,
            "return": [
                "bytes",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.data_sets": {
            "name": "data_sets",
            "location": 251,
            "return": [
                "str",
                "int",
                "Mapping[str, Any]",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline._transcode_compatible_names": {
            "name": "_transcode_compatible_names",
            "location": 261,
            "return": [
                "int",
                "Iterable",
                "str",
                "set",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.describe": {
            "name": "describe",
            "location": 264,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "names_only": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Pipeline.node_dependencies": {
            "name": "node_dependencies",
            "location": 324,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.nodes": {
            "name": "nodes",
            "location": 343,
            "return": [
                "List[Dict]",
                "list",
                "str",
                "Optional[Union[str, Any]]",
                "tuple",
                "List[str]",
                "List[int]",
                "List[kedro.pipeline.node.Node]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.grouped_nodes": {
            "name": "grouped_nodes",
            "location": 355,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.only_nodes": {
            "name": "only_nodes",
            "location": 366,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.only_nodes_with_namespace": {
            "name": "only_nodes_with_namespace",
            "location": 390,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "node_namespace": [
                    "Optional[gfg.trees.binary_tree_node.Node]",
                    "int",
                    "Node",
                    "str",
                    "bytes"
                ]
            }
        },
        "Pipeline._get_nodes_with_inputs_transcode_compatible": {
            "name": "_get_nodes_with_inputs_transcode_compatible",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "datasets": [
                    "Optional[List[str]]"
                ]
            }
        },
        "Pipeline._get_nodes_with_outputs_transcode_compatible": {
            "name": "_get_nodes_with_outputs_transcode_compatible",
            "location": 445,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "datasets": [
                    "str",
                    "int"
                ]
            }
        },
        "Pipeline.only_nodes_with_inputs": {
            "name": "only_nodes_with_inputs",
            "location": 478,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.from_inputs": {
            "name": "from_inputs",
            "location": 504,
            "return": [
                "int",
                "float",
                "dict",
                "Tuple[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.only_nodes_with_outputs": {
            "name": "only_nodes_with_outputs",
            "location": 544,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.to_outputs": {
            "name": "to_outputs",
            "location": 569,
            "return": [
                "int",
                "float",
                "Tuple[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.from_nodes": {
            "name": "from_nodes",
            "location": 608,
            "return": [
                "str",
                "bool",
                "Tuple[Sequence]",
                "List[Dict[str, str]]",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.to_nodes": {
            "name": "to_nodes",
            "location": 629,
            "return": [
                "str",
                "bool",
                "Tuple[Sequence]",
                "List[Dict[str, str]]",
                "list",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.only_nodes_with_tags": {
            "name": "only_nodes_with_tags",
            "location": 650,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.filter": {
            "name": "filter",
            "location": 668,
            "return": [
                "str",
                "Optional[Any]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "Optional[Set[int]]",
                    "Tuple[float, float]",
                    "Type[T]"
                ],
                "from_nodes": [
                    "Optional[Set[int]]",
                    "Tuple[float, float]",
                    "Type[T]"
                ],
                "to_nodes": [
                    "Optional[Set[int]]",
                    "Tuple[float, float]",
                    "Type[T]"
                ],
                "node_names": [
                    "Optional[Set[int]]",
                    "Tuple[float, float]",
                    "Type[T]"
                ],
                "from_inputs": [
                    "Optional[Set[int]]",
                    "Tuple[float, float]",
                    "Type[T]"
                ],
                "to_outputs": [
                    "Optional[Set[int]]",
                    "Tuple[float, float]",
                    "Type[T]"
                ],
                "node_namespace": [
                    "T",
                    "Tuple[float, float]",
                    "Optional[int]"
                ]
            }
        },
        "Pipeline.tag": {
            "name": "tag",
            "location": 759,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Pipeline.to_json": {
            "name": "to_json",
            "location": 771,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_validate_duplicate_nodes._check_node": {
            "name": "_check_node",
            "location": 794,
            "return": [
                ""
            ],
            "arguments": {
                "node_": [
                    "Node",
                    "dict",
                    "str",
                    "bytes"
                ],
                "pipeline_": [
                    "Sequence[object]",
                    "List[kedro.pipeline.node.Node]"
                ]
            }
        },
        "_topologically_sorted._circle_error_message": {
            "name": "_circle_error_message",
            "location": 887,
            "return": [
                "str"
            ],
            "arguments": {
                "error_data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "IO[bytes]",
                    "bool",
                    "bytes",
                    "list"
                ]
            }
        },
        "Pipeline.describe.set_to_string": {
            "name": "set_to_string",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "set_of_strings": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "kedro-main/kedro/pipeline/__init__.py": {},
    "kedro-main/kedro/runner/parallel_runner.py": {
        "_bootstrap_subprocess": {
            "name": "_bootstrap_subprocess",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "package_name": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "logging_config": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "_run_node_synchronization": {
            "name": "_run_node_synchronization",
            "location": 90,
            "return": [
                "List[str]",
                "dict",
                "Optional[str]",
                "BaseException",
                "bool"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Dict[str, int]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "catalog": [
                    "str",
                    "Dict[str, int]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "is_async": [
                    "str",
                    "Dict[str, int]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "session_id": [
                    "str",
                    "Dict[str, int]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "package_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "logging_config": [
                    "str"
                ]
            }
        },
        "_SharedMemoryDataSet.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "_SharedMemoryDataSet.__getattr__": {
            "name": "__getattr__",
            "location": 48,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Dict]",
                    "bool",
                    "int"
                ]
            }
        },
        "_SharedMemoryDataSet.save": {
            "name": "save",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "ParallelRunner.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_workers": [
                    "Optional[int]",
                    "int",
                    "List[\"Issue\"]"
                ],
                "is_async": [
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "ParallelRunner.__del__": {
            "name": "__del__",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelRunner.create_default_data_set": {
            "name": "create_default_data_set",
            "location": 167,
            "return": [
                "Callable",
                "bool",
                "Optional[int]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ds_name": [
                    "str",
                    "Iterable[str]",
                    "bytes"
                ]
            }
        },
        "ParallelRunner._validate_nodes": {
            "name": "_validate_nodes",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "List[List[int]]",
                    "dcos_e2e.node.Node",
                    "bool",
                    "str"
                ],
                "nodes": [
                    "List[str]",
                    "List[List[int]]",
                    "dcos_e2e.node.Node",
                    "bool",
                    "str"
                ]
            }
        },
        "ParallelRunner._validate_catalog": {
            "name": "_validate_catalog",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "catalog": [
                    "kedro.io.DataCatalog",
                    "type",
                    "str",
                    "dict",
                    "T"
                ],
                "pipeline": [
                    "kedro.pipeline.Pipeline",
                    "dict",
                    "Dict[str, bool]",
                    "Iterable[T]",
                    "list",
                    "Callable"
                ]
            }
        },
        "ParallelRunner._get_required_workers_count": {
            "name": "_get_required_workers_count",
            "location": 248,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "Sequence[str]",
                    "list"
                ]
            }
        },
        "ParallelRunner._run": {
            "name": "_run",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "Optional[int]",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ],
                "catalog": [
                    "str",
                    "int"
                ],
                "hook_manager": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "List[int]"
                ],
                "session_id": [
                    "Node",
                    "int",
                    "List[str]",
                    "Optional[Any]",
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "kedro-main/kedro/runner/runner.py": {
        "run_node": {
            "name": "run_node",
            "location": 187,
            "return": [
                "blib2to3.pytree.Node",
                "int",
                "logging.LogRecord"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Optional[Dict]",
                    "Optional[Dict[str, Any]]",
                    "kedro.io.core.AbstractDataSet"
                ],
                "catalog": [
                    "Optional[str]",
                    "Optional[Dict]",
                    "str"
                ],
                "hook_manager": [
                    "Optional[str]",
                    "Optional[Dict]",
                    "Optional[Mapping[str, str]]",
                    "str"
                ],
                "is_async": [
                    "str",
                    "int",
                    "list",
                    "bytes",
                    "Optional[str]"
                ],
                "session_id": [
                    "Optional[str]",
                    "Optional[Dict]",
                    "Optional[Mapping[str, str]]",
                    "str"
                ]
            }
        },
        "_collect_inputs_from_hook": {
            "name": "_collect_inputs_from_hook",
            "location": 218,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "node": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[bool]",
                    "Type",
                    "Optional[Any]",
                    "Optional[dict]",
                    "float",
                    "List[bytes]"
                ],
                "catalog": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[bool]",
                    "Type",
                    "Optional[Any]",
                    "Optional[dict]",
                    "float",
                    "List[bytes]"
                ],
                "inputs": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "is_async": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[bool]",
                    "Type",
                    "Optional[Any]",
                    "Optional[dict]",
                    "float",
                    "List[bytes]"
                ],
                "hook_manager": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[bool]",
                    "Type",
                    "Optional[Any]",
                    "Optional[dict]",
                    "float",
                    "List[bytes]"
                ],
                "session_id": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[bool]",
                    "Type",
                    "Optional[Any]",
                    "Optional[dict]",
                    "float",
                    "List[bytes]"
                ]
            }
        },
        "_call_node_run": {
            "name": "_call_node_run",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int",
                    "Callable[[], str]"
                ],
                "catalog": [
                    "bool",
                    "Hashable",
                    "List[Dict[str, Any]]",
                    "Tuple[()]",
                    "Set[str]"
                ],
                "inputs": [
                    "str",
                    "int",
                    "Callable[[], str]"
                ],
                "is_async": [
                    "bool",
                    "Hashable",
                    "List[Dict[str, Any]]",
                    "Tuple[()]",
                    "Set[str]"
                ],
                "hook_manager": [
                    "bool",
                    "Hashable",
                    "List[Dict[str, Any]]",
                    "Tuple[()]",
                    "Set[str]"
                ],
                "session_id": [
                    "bool",
                    "Hashable",
                    "List[Dict[str, Any]]",
                    "Tuple[()]",
                    "Set[str]"
                ]
            }
        },
        "_run_node_sequential": {
            "name": "_run_node_sequential",
            "location": 285,
            "return": [
                "blib2to3.pytree.Node",
                "int",
                "logging.LogRecord"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int"
                ],
                "catalog": [
                    "str",
                    "bool",
                    "List[List[str]]",
                    "wdom.node.Node",
                    "[str]"
                ],
                "hook_manager": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "session_id": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_run_node_async": {
            "name": "_run_node_async",
            "location": 316,
            "return": [
                "blib2to3.pytree.Node",
                "int",
                "logging.LogRecord"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int"
                ],
                "catalog": [
                    "str",
                    "Dict[str, Any]"
                ],
                "hook_manager": [
                    "str",
                    "Dict[str, Any]"
                ],
                "session_id": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "AbstractRunner.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bool",
                    "Optional[Any]",
                    "List[str]",
                    "Callable[[str], bool]",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ]
            }
        },
        "AbstractRunner._logger": {
            "name": "_logger",
            "location": 40,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRunner.run": {
            "name": "run",
            "location": 43,
            "return": [
                "Optional[List[str]]",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "List['cirq.Circuit']",
                    "Union[int, List[int]]",
                    "eth.abc.BlockHeaderAPI",
                    "Union[str, List[str]]"
                ],
                "catalog": [
                    "str",
                    "int",
                    "list"
                ],
                "hook_manager": [
                    "Callable[[], Any]",
                    "str",
                    "bool",
                    "int"
                ],
                "session_id": [
                    "int",
                    "str",
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "AbstractRunner.run_only_missing": {
            "name": "run_only_missing",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "IO[str]",
                    "str"
                ],
                "catalog": [
                    "Sequence[int]",
                    "Callable"
                ],
                "hook_manager": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "AbstractRunner._run": {
            "name": "_run",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "List[int]"
                ],
                "catalog": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "List[int]"
                ],
                "hook_manager": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "List[int]"
                ],
                "session_id": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "List[int]"
                ]
            }
        },
        "AbstractRunner.create_default_data_set": {
            "name": "create_default_data_set",
            "location": 151,
            "return": [
                "kedro.io.AbstractDataSet"
            ],
            "arguments": {
                "self": [],
                "ds_name": [
                    "str",
                    "Iterable[str]",
                    "bytes"
                ]
            }
        },
        "AbstractRunner._suggest_resume_scenario": {
            "name": "_suggest_resume_scenario",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "pathpy.core.node.Node",
                    "dict",
                    "set",
                    "Dict[int, Set[int]]",
                    "str"
                ],
                "done_nodes": [
                    "set"
                ]
            }
        },
        "_run_node_async._synchronous_dataset_load": {
            "name": "_synchronous_dataset_load",
            "location": 322,
            "return": [
                "bool",
                "int",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "dataset_name": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[Type]"
                ]
            }
        }
    },
    "kedro-main/kedro/runner/sequential_runner.py": {
        "SequentialRunner.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "SequentialRunner.create_default_data_set": {
            "name": "create_default_data_set",
            "location": 32,
            "return": [
                "IO[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ds_name": [
                    "str",
                    "Iterable[str]",
                    "bytes"
                ]
            }
        },
        "SequentialRunner._run": {
            "name": "_run",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "int",
                    "list",
                    "bool"
                ],
                "catalog": [
                    "bytes",
                    "int"
                ],
                "hook_manager": [
                    "int",
                    "str",
                    "bytes"
                ],
                "session_id": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "kedro-main/kedro/runner/thread_runner.py": {
        "ThreadRunner.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_workers": [
                    "int",
                    "bool"
                ],
                "is_async": [
                    "bool",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "ThreadRunner.create_default_data_set": {
            "name": "create_default_data_set",
            "location": 53,
            "return": [
                "IO[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ds_name": [
                    "str",
                    "Iterable[str]",
                    "bytes"
                ]
            }
        },
        "ThreadRunner._get_required_workers_count": {
            "name": "_get_required_workers_count",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "int",
                    "Sequence[str]",
                    "List[int]",
                    "bool",
                    "list",
                    "str"
                ]
            }
        },
        "ThreadRunner._run": {
            "name": "_run",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "int",
                    "List[str]",
                    "bytes"
                ],
                "catalog": [
                    "str",
                    "Optional[Any]",
                    "kedro.io.DataCatalog",
                    "List[str]",
                    "int"
                ],
                "hook_manager": [
                    "str",
                    "Optional[Any]",
                    "Iterable",
                    "List[str]"
                ],
                "session_id": [
                    "str",
                    "Optional[Any]",
                    "Iterable",
                    "List[str]"
                ]
            }
        }
    },
    "kedro-main/kedro/runner/__init__.py": {},
    "kedro-main/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/nodes.py": {},
    "kedro-main/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/pipeline.py": {
        "create_pipeline": {
            "name": "create_pipeline",
            "location": 9,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "kedro-main/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/__init__.py": {},
    "kedro-main/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/tests/test_pipeline.py": {},
    "kedro-main/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/tests/__init__.py": {},
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/docs/source/conf.py": {},
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/src/setup.py": {},
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/src/tests/test_run.py": {
        "config_loader": {
            "name": "config_loader",
            "location": 22,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "project_context": {
            "name": "project_context",
            "location": 27,
            "return": [
                "str",
                "NamedTuple",
                "dict"
            ],
            "arguments": {
                "config_loader": [
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "TestProjectContext.test_project_path": {
            "name": "test_project_path",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_context": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        }
    },
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/src/tests/__init__.py": {},
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/src/tests/pipelines/__init__.py": {},
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipeline_registry.py": {
        "register_pipelines": {
            "name": "register_pipelines",
            "location": 7,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/settings.py": {},
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__init__.py": {},
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__main__.py": {
        "_find_run_command": {
            "name": "_find_run_command",
            "location": 11,
            "return": [
                "str",
                "pydcop.replication.path_utils.Path",
                "Optional[List[cmk.utils.type_defs.HostName]]",
                "bool",
                "Tuple[str]",
                "dict"
            ],
            "arguments": {
                "package_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_find_run_command_in_plugins": {
            "name": "_find_run_command_in_plugins",
            "location": 33,
            "return": [
                "str",
                "bool",
                "float",
                "List[str]"
            ],
            "arguments": {
                "plugins": [
                    "str",
                    "IO",
                    "Mapping[str, Any]",
                    "List[str]",
                    "Optional[Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kedro-main/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/__init__.py": {},
    "kedro-main/tests/conftest.py": {
        "preserve_system_context": {
            "name": "preserve_system_context",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kedro-main/tests/test_utils.py": {
        "TestExtractObject.test_load_obj": {
            "name": "test_load_obj",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractObject.test_load_obj_default_path": {
            "name": "test_load_obj_default_path",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractObject.test_load_obj_invalid_attribute": {
            "name": "test_load_obj_invalid_attribute",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractObject.test_load_obj_invalid_module": {
            "name": "test_load_obj_invalid_module",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/__init__.py": {},
    "kedro-main/tests/config/test_config.py": {
        "_write_yaml": {
            "name": "_write_yaml",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "_write_json": {
            "name": "_write_json",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "cmk.base.config.ObjectAttributes",
                    "config.Config",
                    "entity_embeddings.config.Config"
                ]
            }
        },
        "_write_dummy_ini": {
            "name": "_write_dummy_ini",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "str",
                    "type"
                ]
            }
        },
        "base_config": {
            "name": "base_config",
            "location": 39,
            "return": [
                "type",
                "str",
                "dict",
                "Dict[str, Union[str, Any]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "path.Path",
                    "pathlib2.Path",
                    "Iterable[str]",
                    "BinaryIO"
                ]
            }
        },
        "local_config": {
            "name": "local_config",
            "location": 52,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Union[str, Any]]",
                "Dict[str, str]",
                "bool",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path",
                    "BinaryIO"
                ]
            }
        },
        "create_config_dir": {
            "name": "create_config_dir",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Callable",
                    "pathlib.Path"
                ],
                "base_config": [
                    "dict",
                    "int",
                    "str",
                    "Callable"
                ],
                "local_config": [
                    "int",
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "proj_catalog": {
            "name": "proj_catalog",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "Optional[pathlib.Path]"
                ],
                "base_config": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "proj_catalog_nested": {
            "name": "proj_catalog_nested",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "list",
                    "IO",
                    "AsyncGenerator",
                    "Coroutine",
                    "pathlib.Path"
                ]
            }
        },
        "TestConfigLoader.test_load_local_config": {
            "name": "test_load_local_config",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "TestConfigLoader.test_load_base_config": {
            "name": "test_load_base_config",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "str",
                    "paradigm.catalog.Path",
                    "Callable"
                ],
                "base_config": []
            }
        },
        "TestConfigLoader.test_duplicate_patterns": {
            "name": "test_duplicate_patterns",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "str",
                    "Callable",
                    "paradigm.catalog.Path"
                ],
                "base_config": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository"
                ]
            }
        },
        "TestConfigLoader.test_subdirs_dont_exist": {
            "name": "test_subdirs_dont_exist",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "Optional[str]",
                    "str",
                    "path.Path"
                ],
                "base_config": [
                    "set",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestConfigLoader.test_nested": {
            "name": "test_nested",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "cerulean.path.Path"
                ]
            }
        },
        "TestConfigLoader.test_nested_subdirs_duplicate": {
            "name": "test_nested_subdirs_duplicate",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pypi2nix.path.Path",
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "base_config": [
                    "IO[str]",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository"
                ]
            }
        },
        "TestConfigLoader.test_ignore_hidden_keys": {
            "name": "test_ignore_hidden_keys",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "TestConfigLoader.test_bad_config_syntax": {
            "name": "test_bad_config_syntax",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        },
        "TestConfigLoader.test_lots_of_duplicates": {
            "name": "test_lots_of_duplicates",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "TestConfigLoader.test_same_key_in_same_dir": {
            "name": "test_same_key_in_same_dir",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository"
                ],
                "base_config": [
                    "set",
                    "Dict[str, Any]",
                    "cmk.base.config.ConfigCache"
                ]
            }
        },
        "TestConfigLoader.test_empty_patterns": {
            "name": "test_empty_patterns",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "TestConfigLoader.test_no_files_found": {
            "name": "test_no_files_found",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "TestConfigLoader.test_duplicate_paths": {
            "name": "test_duplicate_paths",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "caplog": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "bytes",
                    "path.Path"
                ]
            }
        },
        "TestConfigLoader.test_overlapping_patterns": {
            "name": "test_overlapping_patterns",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "caplog": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "TestConfigLoader.test_yaml_parser_error": {
            "name": "test_yaml_parser_error",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "bool",
                    "pathlib.PosixPath"
                ]
            }
        }
    },
    "kedro-main/tests/config/test_templated_config.py": {
        "_write_yaml": {
            "name": "_write_yaml",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "param_config": {
            "name": "param_config",
            "location": 21,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "int",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {}
        },
        "template_config": {
            "name": "template_config",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "catalog_with_jinja2_syntax": {
            "name": "catalog_with_jinja2_syntax",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "proj_catalog_param": {
            "name": "proj_catalog_param",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]",
                    "bool"
                ],
                "param_config": [
                    "bool",
                    "str",
                    "MutableMapping[str, str]",
                    "pathlib.Path",
                    "List[Dict]"
                ]
            }
        },
        "proj_catalog_globals": {
            "name": "proj_catalog_globals",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]"
                ],
                "template_config": [
                    "pathlib.Path",
                    "Optional[str]",
                    "cerulean.Path",
                    "str"
                ]
            }
        },
        "normal_config_advanced": {
            "name": "normal_config_advanced",
            "location": 85,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Union[str, Any]]",
                "Dict[str, str]",
                "bool",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {}
        },
        "proj_catalog_advanced": {
            "name": "proj_catalog_advanced",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]",
                    "bool"
                ],
                "normal_config_advanced": [
                    "bool",
                    "str"
                ]
            }
        },
        "param_config_advanced": {
            "name": "param_config_advanced",
            "location": 104,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "type",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "template_config_advanced": {
            "name": "template_config_advanced",
            "location": 117,
            "return": [
                "Mapping[str, Any]",
                "int",
                "kedro.framework.contexKedroContext",
                "List[str]",
                "str",
                "Dict[str, pathlib.Path]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "proj_catalog_param_w_vals_advanced": {
            "name": "proj_catalog_param_w_vals_advanced",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]",
                    "bool"
                ],
                "param_config_advanced": [
                    "bool",
                    "str"
                ]
            }
        },
        "param_config_mixed": {
            "name": "param_config_mixed",
            "location": 134,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "int",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {}
        },
        "get_environ": {
            "name": "get_environ",
            "location": 150,
            "return": [
                "set",
                "bool",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "proj_catalog_param_mixed": {
            "name": "proj_catalog_param_mixed",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]",
                    "bool"
                ],
                "param_config_mixed": [
                    "bool",
                    "str"
                ]
            }
        },
        "param_config_namespaced": {
            "name": "param_config_namespaced",
            "location": 161,
            "return": [
                "Type[Any]",
                "IO",
                "int",
                "Optional[List[\"custom_index\"]]"
            ],
            "arguments": {}
        },
        "proj_catalog_param_namespaced": {
            "name": "proj_catalog_param_namespaced",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]",
                    "bool"
                ],
                "param_config_namespaced": [
                    "bool",
                    "str"
                ]
            }
        },
        "param_config_exceptional": {
            "name": "param_config_exceptional",
            "location": 183,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "template_config_exceptional": {
            "name": "template_config_exceptional",
            "location": 188,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "proj_catalog_param_w_vals_exceptional": {
            "name": "proj_catalog_param_w_vals_exceptional",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]",
                    "bool"
                ],
                "param_config_exceptional": [
                    "bool",
                    "str"
                ]
            }
        },
        "param_config_with_default": {
            "name": "param_config_with_default",
            "location": 199,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "proj_catalog_param_with_default": {
            "name": "proj_catalog_param_with_default",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "param_config_with_default": [
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_parameterized_w_dict": {
            "name": "test_catalog_parameterized_w_dict",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "path.Path",
                    "pathlib.Path",
                    "str"
                ],
                "template_config": [
                    "path.Path",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_parameterized_w_globals": {
            "name": "test_catalog_parameterized_w_globals",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_parameterized_no_params_no_default": {
            "name": "test_catalog_parameterized_no_params_no_default",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_parameterized_empty_params_with_default": {
            "name": "test_catalog_parameterized_empty_params_with_default",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_advanced": {
            "name": "test_catalog_advanced",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ],
                "normal_config_advanced": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_parameterized_advanced": {
            "name": "test_catalog_parameterized_advanced",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ],
                "template_config_advanced": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_parameterized_w_dict_mixed": {
            "name": "test_catalog_parameterized_w_dict_mixed",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Callable"
                ],
                "get_environ": [
                    "config.config.Settings",
                    "dict"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_parameterized_w_dict_namespaced": {
            "name": "test_catalog_parameterized_w_dict_namespaced",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Iterable[Tuple[pathlib.Path, pathlib.Path]]",
                    "Optional[pathlib.Path]",
                    "TextIO"
                ],
                "template_config": [
                    "pathlib.Path",
                    "Iterable[Tuple[pathlib.Path, pathlib.Path]]",
                    "Optional[pathlib.Path]",
                    "TextIO"
                ],
                "get_environ": [
                    "pathlib.Path",
                    "Iterable[Tuple[pathlib.Path, pathlib.Path]]",
                    "Optional[pathlib.Path]",
                    "TextIO"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_parameterized_exceptional": {
            "name": "test_catalog_parameterized_exceptional",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ],
                "template_config_exceptional": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_with_jinja2_syntax": {
            "name": "test_catalog_with_jinja2_syntax",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "template_config": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "TestTemplatedConfigLoader.test_catalog_with_jinja2_syntax_and_globals_file": {
            "name": "test_catalog_with_jinja2_syntax_and_globals_file",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "TestFormatObject.test_simple_replace": {
            "name": "test_simple_replace",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "dict",
                    "str",
                    "Set[str]"
                ],
                "format_dict": [
                    "dict",
                    "str",
                    "Set[str]"
                ],
                "expected": [
                    "dict",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "TestFormatObject.test_raises_error": {
            "name": "test_raises_error",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [],
                "format_dict": [],
                "expected_error_message": [
                    "int",
                    "str",
                    "type",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "kedro-main/tests/config/__init__.py": {},
    "kedro-main/tests/extras/__init__.py": {},
    "kedro-main/tests/extras/datasets/conftest.py": {
        "load_version": {
            "name": "load_version",
            "location": 14,
            "return": [
                "int",
                "float",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "save_version": {
            "name": "save_version",
            "location": 19,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "load_args": {
            "name": "load_args",
            "location": 24,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "request": [
                    "Set[str]"
                ]
            }
        },
        "save_args": {
            "name": "save_args",
            "location": 29,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "fs_args": {
            "name": "fs_args",
            "location": 34,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/__init__.py": {},
    "kedro-main/tests/extras/datasets/api/test_api_dataset.py": {
        "TestAPIDataSet.requests_mocker": {
            "name": "requests_mocker",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPIDataSet.test_successfully_load_with_response": {
            "name": "test_successfully_load_with_response",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests_mocker": [
                    "str",
                    "int",
                    "list"
                ],
                "method": [
                    "Mapping[str, str]",
                    "Optional[dict]",
                    "requests_mock.reques_RequestObjectProxy"
                ]
            }
        },
        "TestAPIDataSet.test_successful_json_load_with_response": {
            "name": "test_successful_json_load_with_response",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests_mocker": [
                    "requests_mock.reques_RequestObjectProxy",
                    "str",
                    "Mapping[str, str]"
                ],
                "method": [
                    "Optional[dict]"
                ]
            }
        },
        "TestAPIDataSet.test_http_error": {
            "name": "test_http_error",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests_mocker": [
                    "starlette.requests.Request",
                    "Dict[str, Dict[str, Any]]"
                ],
                "method": [
                    "requests_mock.reques_RequestObjectProxy",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ]
            }
        },
        "TestAPIDataSet.test_socket_error": {
            "name": "test_socket_error",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests_mocker": [
                    "bool",
                    "str"
                ],
                "method": [
                    "requests_mock.reques_RequestObjectProxy",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ]
            }
        },
        "TestAPIDataSet.test_read_only_mode": {
            "name": "test_read_only_mode",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestAPIDataSet.test_exists_http_error": {
            "name": "test_exists_http_error",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests_mocker": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ],
                "method": [
                    "requests_mock.reques_RequestObjectProxy",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "TestAPIDataSet.test_exists_ok": {
            "name": "test_exists_ok",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests_mocker": [
                    "str",
                    "int",
                    "list",
                    "dict"
                ],
                "method": [
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "TestAPIDataSet.test_credentials_auth_error": {
            "name": "test_credentials_auth_error",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Callable",
                    "str",
                    "dict"
                ]
            }
        },
        "TestAPIDataSet.test_auth_sequence": {
            "name": "test_auth_sequence",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests_mocker": [
                    "str",
                    "Iterable[str]"
                ],
                "method": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "list"
                ],
                "auth_seq": [
                    "str",
                    "Optional[IO[bytes]]",
                    "Dict[str, object]",
                    "List[str]",
                    "bool"
                ],
                "auth_kwarg": [
                    "str",
                    "Optional[IO[bytes]]",
                    "Dict[str, object]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/api/__init__.py": {},
    "kedro-main/tests/extras/datasets/bioinformatics/test_biosequence_dataset.py": {
        "filepath_biosequence": {
            "name": "filepath_biosequence",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Iterable[str]",
                    "list",
                    "pathlib.Path"
                ]
            }
        },
        "biosequence_data_set": {
            "name": "biosequence_data_set",
            "location": 25,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "filepath_biosequence": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable",
                    "str"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable",
                    "str"
                ]
            }
        },
        "dummy_data": {
            "name": "dummy_data",
            "location": 35,
            "return": [
                "List[str]",
                "List[Dict]",
                "Sequence[str]",
                "List[Tuple[str, str, bool]]"
            ],
            "arguments": {}
        },
        "TestBioSequenceDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "biosequence_data_set": [
                    "str",
                    "dict",
                    "Dict[Any, pathlib.Path]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "dummy_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "TestBioSequenceDataSet.test_exists": {
            "name": "test_exists",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "biosequence_data_set": [
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "dummy_data": [
                    "Dict[str, List[Any]]",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "TestBioSequenceDataSet.test_load_save_args_propagation": {
            "name": "test_load_save_args_propagation",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "biosequence_data_set": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "TestBioSequenceDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "biosequence_data_set": [
                    "dict",
                    "Callable[[Any, Any], Any]"
                ],
                "fs_args": [
                    "Callable[[Any, Any], Any]",
                    "Dict[Any, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestBioSequenceDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "biosequence_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestBioSequenceDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "IO[str]",
                    "pathlib.Path"
                ],
                "instance_type": []
            }
        },
        "TestBioSequenceDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "kedro-main/tests/extras/datasets/bioinformatics/__init__.py": {},
    "kedro-main/tests/extras/datasets/dask/test_parquet_dataset.py": {
        "mocked_s3_bucket": {
            "name": "mocked_s3_bucket",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dummy_dd_dataframe": {
            "name": "dummy_dd_dataframe",
            "location": 36,
            "return": [
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "mocked_s3_object": {
            "name": "mocked_s3_object",
            "location": 44,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "List[str]"
                ],
                "mocked_s3_bucket": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "dummy_dd_dataframe": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "type",
                    "str"
                ]
            }
        },
        "s3_data_set": {
            "name": "s3_data_set",
            "location": 58,
            "return": [
                "Dict[str, str]",
                "Mapping[str, str]",
                "dict",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "load_args": [
                    "str",
                    "Optional[str]"
                ],
                "save_args": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "s3fs_cleanup": {
            "name": "s3fs_cleanup",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestParquetDataSet.test_incorrect_credentials_load": {
            "name": "test_incorrect_credentials_load",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParquetDataSet.test_empty_credentials_load": {
            "name": "test_empty_credentials_load",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bad_credentials": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestParquetDataSet.test_pass_credentials": {
            "name": "test_pass_credentials",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestParquetDataSet.test_save_data": {
            "name": "test_save_data",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s3_data_set": [
                    "str",
                    "int",
                    "Tuple[str, float]"
                ]
            }
        },
        "TestParquetDataSet.test_load_data": {
            "name": "test_load_data",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s3_data_set": [
                    "str",
                    "Callable",
                    "Optional[Exception]",
                    "pandas.DataFrame",
                    "Optional[int]"
                ],
                "dummy_dd_dataframe": [
                    "Optional[int]",
                    "set",
                    "int"
                ]
            }
        },
        "TestParquetDataSet.test_exists": {
            "name": "test_exists",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s3_data_set": [
                    "str",
                    "Set[str]",
                    "Pattern",
                    "list"
                ],
                "dummy_dd_dataframe": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "TestParquetDataSet.test_save_load_locally": {
            "name": "test_save_load_locally",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [],
                "dummy_dd_dataframe": []
            }
        },
        "TestParquetDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s3_data_set": [
                    "str",
                    "OrderedDict"
                ],
                "load_args": [
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "TestParquetDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s3_data_set": [
                    "static_frame.core.util.PathSpecifier",
                    "Dict[str, Any]",
                    "list",
                    "float"
                ],
                "save_args": [
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/dask/__init__.py": {},
    "kedro-main/tests/extras/datasets/email/test_message_dataset.py": {
        "filepath_message": {
            "name": "filepath_message",
            "location": 17,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "message_data_set": {
            "name": "message_data_set",
            "location": 22,
            "return": [
                "dict",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "filepath_message": [
                    "Dict[str, Any]",
                    "Callable",
                    "str"
                ],
                "load_args": [
                    "Dict[str, Any]",
                    "Callable",
                    "str"
                ],
                "save_args": [
                    "Dict[str, Any]",
                    "Callable",
                    "str"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable",
                    "str"
                ]
            }
        },
        "versioned_message_data_set": {
            "name": "versioned_message_data_set",
            "location": 32,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "int",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "filepath_message": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "load_version": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "save_version": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "dummy_msg": {
            "name": "dummy_msg",
            "location": 39,
            "return": [
                "list",
                "str"
            ],
            "arguments": {}
        },
        "TestEmailMessageDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message_data_set": [
                    "str",
                    "Dict[Any, pathlib.Path]",
                    "Callable",
                    "core.models.Grouping"
                ],
                "dummy_msg": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "django.http.FileResponse"
                ]
            }
        },
        "TestEmailMessageDataSet.test_exists": {
            "name": "test_exists",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message_data_set": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "dummy_msg": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestEmailMessageDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message_data_set": [
                    "str",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestEmailMessageDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message_data_set": [
                    "bytes",
                    "str",
                    "core_lib.core.models.Event"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestEmailMessageDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message_data_set": [
                    "dict",
                    "Callable[[Any, Any], Any]"
                ],
                "fs_args": [
                    "Callable[[Any, Any], Any]",
                    "Dict[Any, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestEmailMessageDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestEmailMessageDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "IO[str]",
                    "pathlib.Path"
                ],
                "instance_type": []
            }
        },
        "TestEmailMessageDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestEmailMessageDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str"
                ],
                "save_version": [
                    "str"
                ]
            }
        },
        "TestEmailMessageDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_message_data_set": [
                    "str",
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "Optional[Exception]",
                    "TextIO"
                ],
                "dummy_msg": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "TestEmailMessageDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_message_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestEmailMessageDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_message_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_msg": [
                    "dict"
                ]
            }
        },
        "TestEmailMessageDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_message_data_set": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "dummy_msg": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TestEmailMessageDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_message_data_set": [
                    "str",
                    "dict"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_msg": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestEmailMessageDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailMessageDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_message_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_msg": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/email/__init__.py": {},
    "kedro-main/tests/extras/datasets/geojson/test_geojson_dataset.py": {
        "load_version": {
            "name": "load_version",
            "location": 18,
            "return": [
                "int",
                "float",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "save_version": {
            "name": "save_version",
            "location": 23,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "filepath": {
            "name": "filepath",
            "location": 28,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "load_args": {
            "name": "load_args",
            "location": 33,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "bool",
                "float",
                "pandas.DataFrame"
            ],
            "arguments": {
                "request": [
                    "Set[str]"
                ]
            }
        },
        "save_args": {
            "name": "save_args",
            "location": 38,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 43,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "List[str]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "geojson_data_set": {
            "name": "geojson_data_set",
            "location": 51,
            "return": [
                "int",
                "str",
                "Optional[Exception]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath": [
                    "Dict[str, Any]",
                    "Callable",
                    "str",
                    "Set[str]"
                ],
                "load_args": [
                    "Dict[str, Any]",
                    "Callable",
                    "str",
                    "Set[str]"
                ],
                "save_args": [
                    "Dict[str, Any]",
                    "Callable",
                    "str",
                    "Set[str]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "Callable",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "versioned_geojson_data_set": {
            "name": "versioned_geojson_data_set",
            "location": 58,
            "return": [
                "int",
                "Optional[Exception]",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "load_version": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "save_version": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "TestGeoJSONDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geojson_data_set": [
                    "str"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "TestGeoJSONDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geojson_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestGeoJSONDataSet.test_exists": {
            "name": "test_exists",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geojson_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Dict[str, cerulean.path.Path]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestGeoJSONDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geojson_data_set": [
                    "dict",
                    "Callable",
                    "bool"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestGeoJSONDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geojson_data_set": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "List[str]",
                    "Callable",
                    "Set[str]",
                    "core.models.Grouping"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestGeoJSONDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geojson_data_set": [
                    "dict",
                    "Callable[[Any, Any], Any]"
                ],
                "fs_args": [
                    "Callable[[Any, Any], Any]",
                    "Dict[Any, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestGeoJSONDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "tartare.core.models.DataSource",
                    "pathlib.Path"
                ],
                "instance_type": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "T"
                ]
            }
        },
        "TestGeoJSONDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestGeoJSONDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str"
                ],
                "save_version": [
                    "str"
                ]
            }
        },
        "TestGeoJSONDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_geojson_data_set": [
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse"
                ]
            }
        },
        "TestGeoJSONDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_geojson_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestGeoJSONDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_geojson_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "dict"
                ]
            }
        },
        "TestGeoJSONDataSetVersioned.test_prevent_override": {
            "name": "test_prevent_override",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_geojson_data_set": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "dummy_dataframe": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestGeoJSONDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_geojson_data_set": [
                    "str",
                    "dict"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestGeoJSONDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeoJSONDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geojson_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_geojson_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_dataframe": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/geojson/__init__.py": {},
    "kedro-main/tests/extras/datasets/holoviews/test_holoviews_writer.py": {
        "filepath_png": {
            "name": "filepath_png",
            "location": 18,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "dummy_hv_object": {
            "name": "dummy_hv_object",
            "location": 23,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "hv_writer": {
            "name": "hv_writer",
            "location": 28,
            "return": [
                "Dict[str, int]",
                "pathlib.Path",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath_png": [
                    "int",
                    "Callable",
                    "str",
                    "dict",
                    "Optional[Iterable]",
                    "Optional[Dict[str, Any]]",
                    "purplship.core.utils.xml.Element"
                ],
                "save_args": [
                    "int",
                    "Callable",
                    "str",
                    "dict",
                    "Optional[Iterable]",
                    "Optional[Dict[str, Any]]",
                    "purplship.core.utils.xml.Element"
                ],
                "fs_args": [
                    "int",
                    "Callable",
                    "str",
                    "dict",
                    "Optional[Iterable]",
                    "Optional[Dict[str, Any]]",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "versioned_hv_writer": {
            "name": "versioned_hv_writer",
            "location": 33,
            "return": [
                "str",
                "Dict[str, Any]",
                "pathlib.Path"
            ],
            "arguments": {
                "filepath_png": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "load_version": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "save_version": [
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "TestHoloviewsWriter.test_save_data": {
            "name": "test_save_data",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ],
                "dummy_hv_object": [
                    "pypi2nix.path.Path",
                    "pathlib.Path",
                    "path.Path",
                    "Callable",
                    "py.path.local",
                    "paradigm.catalog.Path"
                ],
                "hv_writer": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "TestHoloviewsWriter.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "path.Path",
                    "pathlib.Path"
                ],
                "fs_args": [
                    "path.Path",
                    "Callable"
                ],
                "mocker": []
            }
        },
        "TestHoloviewsWriter.test_load_fail": {
            "name": "test_load_fail",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hv_writer": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "core.models.Recipe"
                ]
            }
        },
        "TestHoloviewsWriter.test_exists": {
            "name": "test_exists",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_hv_object": [
                    "pathlib.Path"
                ],
                "hv_writer": []
            }
        },
        "TestHoloviewsWriter.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestHoloviewsWriter.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hv_writer": [
                    "str"
                ],
                "save_args": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestHoloviewsWriter.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "pathlib.Path"
                ],
                "instance_type": [],
                "credentials": [
                    "List[Dict]",
                    "List[str]",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestHoloviewsWriterVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hv_writer": [
                    "pathlib.Path",
                    "float",
                    "str",
                    "py.path.local"
                ],
                "versioned_hv_writer": [
                    "Callable"
                ]
            }
        },
        "TestHoloviewsWriterVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_hv_object": [
                    "blurr.core.schema_loader.SchemaLoader"
                ],
                "versioned_hv_writer": [
                    "blurr.core.schema_loader.SchemaLoader"
                ]
            }
        },
        "TestHoloviewsWriterVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "Optional[Dict[str, Any]]",
                    "Union[str, float]",
                    "int",
                    "str"
                ],
                "save_version": [
                    "Optional[Dict[str, Any]]",
                    "Union[str, float]",
                    "int",
                    "str"
                ],
                "dummy_hv_object": [
                    "bool",
                    "str"
                ],
                "versioned_hv_writer": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestHoloviewsWriterVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoloviewsWriterVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_hv_writer": []
            }
        },
        "TestHoloviewsWriterVersioned.test_exists": {
            "name": "test_exists",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_hv_writer": [
                    "blurr.core.schema_loader.SchemaLoader"
                ],
                "dummy_hv_object": [
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestHoloviewsWriterVersioned.test_save_data": {
            "name": "test_save_data",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_hv_writer": [
                    "pathlib.Path",
                    "IO[str]"
                ],
                "dummy_hv_object": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "pypi2nix.path.Path",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestHoloviewsWriterVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hv_writer": [
                    "pathlib.Path",
                    "cerulean.LocalFileSystem"
                ],
                "versioned_hv_writer": [],
                "dummy_hv_object": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/holoviews/__init__.py": {},
    "kedro-main/tests/extras/datasets/json/test_json_dataset.py": {
        "filepath_json": {
            "name": "filepath_json",
            "location": 15,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "json_data_set": {
            "name": "json_data_set",
            "location": 20,
            "return": [
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "filepath_json": [
                    "bool",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "Dict[Any, int]",
                    "Callable"
                ],
                "save_args": [
                    "bool",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "Dict[Any, int]",
                    "Callable"
                ],
                "fs_args": [
                    "bool",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "Dict[Any, int]",
                    "Callable"
                ]
            }
        },
        "versioned_json_data_set": {
            "name": "versioned_json_data_set",
            "location": 25,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_json": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "dummy_data": {
            "name": "dummy_data",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Union[int, bool]]",
                "List[List[int]]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "TestJSONDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "str",
                    "dict",
                    "Dict[Any, pathlib.Path]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "dummy_data": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestJSONDataSet.test_exists": {
            "name": "test_exists",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "dummy_data": [
                    "Dict[str, List[Any]]",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "TestJSONDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "bytes",
                    "str",
                    "core_lib.core.models.Event"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestJSONDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "dict",
                    "Callable[[Any, Any], Any]"
                ],
                "fs_args": [
                    "Callable[[Any, Any], Any]",
                    "Dict[Any, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestJSONDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestJSONDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "instance_type": []
            }
        },
        "TestJSONDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestJSONDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [],
                "dummy_data": []
            }
        },
        "TestJSONDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "Set[str]",
                    "int",
                    "str",
                    "Dict[str, Optional[str]]",
                    "bytes"
                ],
                "dummy_data": [
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [],
                "dummy_data": []
            }
        },
        "TestJSONDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "Optional[bytes]",
                    "starfish.core.imagestack.parser.TileData",
                    "Dict[str, Union[int, str]]",
                    "int"
                ],
                "load_version": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bytes"
                ],
                "save_version": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bytes"
                ],
                "dummy_data": [
                    "Optional[bytes]",
                    "starfish.core.imagestack.parser.TileData",
                    "Dict[str, Union[int, str]]",
                    "int"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "versioned_json_data_set": [
                    "str",
                    "dict",
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "core.models.Subtask"
                ],
                "dummy_data": [
                    "str",
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/json/__init__.py": {},
    "kedro-main/tests/extras/datasets/matplotlib/test_matplotlib_writer.py": {
        "mock_single_plot": {
            "name": "mock_single_plot",
            "location": 24,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "mock_list_plot": {
            "name": "mock_list_plot",
            "location": 31,
            "return": [
                "List[str]",
                "str",
                "matplotlib.colorbar.Colorbar",
                "List[Dict]",
                "Optional[str]",
                "List[int]"
            ],
            "arguments": {}
        },
        "mock_dict_plot": {
            "name": "mock_dict_plot",
            "location": 42,
            "return": [
                "dict",
                "Dict[int, List[str]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "mocked_s3_bucket": {
            "name": "mocked_s3_bucket",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mocked_encrypted_s3_bucket": {
            "name": "mocked_encrypted_s3_bucket",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "s3fs_cleanup": {
            "name": "s3fs_cleanup",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "overwrite": {
            "name": "overwrite",
            "location": 101,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "plot_writer": {
            "name": "plot_writer",
            "location": 106,
            "return": [
                "bool",
                "bytes",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "mocked_s3_bucket": [
                    "str",
                    "bool",
                    "int",
                    "dict"
                ],
                "fs_args": [
                    "str",
                    "dict",
                    "List[str]",
                    "Exception",
                    "list",
                    "pathlib.Path"
                ],
                "save_args": [
                    "str",
                    "dict",
                    "List[str]",
                    "Exception",
                    "list",
                    "pathlib.Path"
                ],
                "overwrite": [
                    "str",
                    "dict",
                    "List[str]",
                    "Exception",
                    "list",
                    "pathlib.Path"
                ]
            }
        },
        "versioned_plot_writer": {
            "name": "versioned_plot_writer",
            "location": 119,
            "return": [
                "str",
                "Dict[str, Any]",
                "pathlib.Path"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Sequence[str]",
                    "Optional[List[str]]"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Sequence[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "cleanup_plt": {
            "name": "cleanup_plt",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestMatplotlibWriter.test_save_data": {
            "name": "test_save_data",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ],
                "mock_single_plot": [],
                "plot_writer": [],
                "mocked_s3_bucket": [
                    "pathlib.Path",
                    "Dict[str, Sequence[str]]"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestMatplotlibWriter.test_list_save": {
            "name": "test_list_save",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "pypi2nix.path.Path"
                ],
                "mock_list_plot": [],
                "plot_writer": [],
                "mocked_s3_bucket": []
            }
        },
        "TestMatplotlibWriter.test_dict_save": {
            "name": "test_dict_save",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "mock_dict_plot": [],
                "plot_writer": [],
                "mocked_s3_bucket": [
                    "dict",
                    "str"
                ]
            }
        },
        "TestMatplotlibWriter.test_overwrite": {
            "name": "test_overwrite",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_list_plot": [],
                "mock_dict_plot": [],
                "plot_writer": [],
                "mocked_s3_bucket": [],
                "expected_num_plots": []
            }
        },
        "TestMatplotlibWriter.test_fs_args": {
            "name": "test_fs_args",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "mock_single_plot": [],
                "mocked_encrypted_s3_bucket": []
            }
        },
        "TestMatplotlibWriter.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plot_writer": [
                    "str",
                    "Dict[str, Any]"
                ],
                "fs_args": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestMatplotlibWriter.test_load_fail": {
            "name": "test_load_fail",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plot_writer": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "TestMatplotlibWriter.test_exists_single": {
            "name": "test_exists_single",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_single_plot": [],
                "plot_writer": []
            }
        },
        "TestMatplotlibWriter.test_exists_multiple": {
            "name": "test_exists_multiple",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_dict_plot": [],
                "plot_writer": []
            }
        },
        "TestMatplotlibWriter.test_release": {
            "name": "test_release",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMatplotlibWriterVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Optional[pathlib.Path]",
                    "List[str]"
                ],
                "save_version": [
                    "str",
                    "Optional[pathlib.Path]",
                    "List[str]"
                ]
            }
        },
        "TestMatplotlibWriterVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_single_plot": [],
                "versioned_plot_writer": []
            }
        },
        "TestMatplotlibWriterVersioned.test_ineffective_overwrite": {
            "name": "test_ineffective_overwrite",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "save_version": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "TestMatplotlibWriterVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "bool",
                    "dict",
                    "str"
                ],
                "save_version": [
                    "bool",
                    "dict",
                    "str"
                ],
                "mock_single_plot": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Sequence[str]]",
                    "pathlib2.Path"
                ],
                "versioned_plot_writer": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Sequence[str]]",
                    "pathlib2.Path"
                ]
            }
        },
        "TestMatplotlibWriterVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatplotlibWriterVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_plot_writer": []
            }
        },
        "TestMatplotlibWriterVersioned.test_exists": {
            "name": "test_exists",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_plot_writer": [
                    "str",
                    "io.BytesIO"
                ],
                "mock_single_plot": []
            }
        },
        "TestMatplotlibWriterVersioned.test_exists_multiple": {
            "name": "test_exists_multiple",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_plot_writer": [
                    "str",
                    "io.BytesIO",
                    "pypi2nix.path.Path"
                ],
                "mock_list_plot": []
            }
        },
        "TestMatplotlibWriterVersioned.test_save_data": {
            "name": "test_save_data",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_plot_writer": [
                    "str"
                ],
                "mock_single_plot": [
                    "str",
                    "Optional[str]"
                ],
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "BinaryIO"
                ]
            }
        },
        "TestMatplotlibWriterVersioned.test_list_save": {
            "name": "test_list_save",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "mock_list_plot": [],
                "versioned_plot_writer": []
            }
        },
        "TestMatplotlibWriterVersioned.test_dict_save": {
            "name": "test_dict_save",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ],
                "mock_dict_plot": [],
                "versioned_plot_writer": []
            }
        },
        "TestMatplotlibWriterVersioned.test_versioning_existing_dataset_single_plot": {
            "name": "test_versioning_existing_dataset_single_plot",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plot_writer": [],
                "versioned_plot_writer": [
                    "str"
                ],
                "mock_single_plot": []
            }
        },
        "TestMatplotlibWriterVersioned.test_versioning_existing_dataset_list_plot": {
            "name": "test_versioning_existing_dataset_list_plot",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plot_writer": [],
                "versioned_plot_writer": [],
                "mock_list_plot": []
            }
        },
        "TestMatplotlibWriterVersioned.test_versioning_existing_dataset_dict_plot": {
            "name": "test_versioning_existing_dataset_dict_plot",
            "location": 422,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plot_writer": [],
                "versioned_plot_writer": [],
                "mock_dict_plot": []
            }
        }
    },
    "kedro-main/tests/extras/datasets/matplotlib/__init__.py": {},
    "kedro-main/tests/extras/datasets/networkx/test_gml_dataset.py": {
        "filepath_gml": {
            "name": "filepath_gml",
            "location": 24,
            "return": [
                "str",
                "pathlib.Path",
                "py._path.local.LocalPath",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "gml_data_set": {
            "name": "gml_data_set",
            "location": 29,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "bytes",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath_gml": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Mapping"
                ]
            }
        },
        "versioned_gml_data_set": {
            "name": "versioned_gml_data_set",
            "location": 38,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_gml": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "dict"
                ],
                "load_version": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "dict"
                ],
                "save_version": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "dict"
                ]
            }
        },
        "dummy_graph_data": {
            "name": "dummy_graph_data",
            "location": 48,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {}
        },
        "TestGMLDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gml_data_set": [
                    "Optional[List[Type]]",
                    "bool"
                ],
                "dummy_graph_data": [
                    "Dict[str, Union[int, str]]",
                    "dict"
                ]
            }
        },
        "TestGMLDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gml_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestGMLDataSet.test_exists": {
            "name": "test_exists",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gml_data_set": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "dummy_graph_data": [
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestGMLDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "instance_type": []
            }
        },
        "TestGMLDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestGMLDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_gml_data_set": [
                    "Dict[str, Union[int, str]]"
                ],
                "dummy_graph_data": []
            }
        },
        "TestGMLDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_gml_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestGMLDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_gml_data_set": [
                    "str",
                    "dict",
                    "int",
                    "bytes",
                    "Set[str]"
                ],
                "dummy_graph_data": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Union[int, str]]"
                ]
            }
        },
        "TestGMLDataSetVersioned.test_prevent_override": {
            "name": "test_prevent_override",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_gml_data_set": [],
                "dummy_graph_data": []
            }
        },
        "TestGMLDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_gml_data_set": [
                    "dict",
                    "starfish.core.imagestack.parser.TileData",
                    "Optional[List[str]]",
                    "str"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_graph_data": [
                    "dict",
                    "starfish.core.imagestack.parser.TileData",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "TestGMLDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestGMLDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gml_data_set": [
                    "dict",
                    "str",
                    "Dict[str, Union[int, str]]"
                ],
                "versioned_gml_data_set": [
                    "str",
                    "dict",
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "core.models.Subtask"
                ],
                "dummy_graph_data": [
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/networkx/test_graphml_dataset.py": {
        "filepath_graphml": {
            "name": "filepath_graphml",
            "location": 24,
            "return": [
                "str",
                "pathlib.Path",
                "py._path.local.LocalPath",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "graphml_data_set": {
            "name": "graphml_data_set",
            "location": 29,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "filepath_graphml": [
                    "Dict[str, str]",
                    "str",
                    "bytes",
                    "pathlib.Path",
                    "List[dict]"
                ]
            }
        },
        "versioned_graphml_data_set": {
            "name": "versioned_graphml_data_set",
            "location": 38,
            "return": [
                "int",
                "str",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_graphml": [
                    "dict",
                    "Sequence[str]",
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ],
                "load_version": [
                    "dict",
                    "Sequence[str]",
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ],
                "save_version": [
                    "dict",
                    "Sequence[str]",
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "dummy_graph_data": {
            "name": "dummy_graph_data",
            "location": 48,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {}
        },
        "TestGraphMLDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graphml_data_set": [
                    "Optional[List[Type]]",
                    "bool"
                ],
                "dummy_graph_data": [
                    "Dict[str, Union[int, str]]",
                    "dict"
                ]
            }
        },
        "TestGraphMLDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graphml_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestGraphMLDataSet.test_exists": {
            "name": "test_exists",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graphml_data_set": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "dummy_graph_data": [
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestGraphMLDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "IO[str]",
                    "pathlib.Path"
                ],
                "instance_type": []
            }
        },
        "TestGraphMLDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestGraphMLDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_graphml_data_set": [
                    "Dict[str, Union[int, str]]"
                ],
                "dummy_graph_data": []
            }
        },
        "TestGraphMLDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_graphml_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestGraphMLDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_graphml_data_set": [
                    "str",
                    "dict",
                    "int",
                    "bytes",
                    "Set[str]"
                ],
                "dummy_graph_data": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Union[int, str]]"
                ]
            }
        },
        "TestGraphMLDataSetVersioned.test_prevent_override": {
            "name": "test_prevent_override",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_graphml_data_set": [],
                "dummy_graph_data": []
            }
        },
        "TestGraphMLDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_graphml_data_set": [
                    "dict",
                    "starfish.core.imagestack.parser.TileData",
                    "Optional[List[str]]",
                    "str"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_graph_data": [
                    "dict",
                    "starfish.core.imagestack.parser.TileData",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "TestGraphMLDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str"
                ],
                "save_version": [
                    "str"
                ]
            }
        },
        "TestGraphMLDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graphml_data_set": [
                    "dict",
                    "str",
                    "Dict[str, Union[int, str]]"
                ],
                "versioned_graphml_data_set": [
                    "str",
                    "dict",
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "core.models.Subtask"
                ],
                "dummy_graph_data": [
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/networkx/test_json_dataset.py": {
        "filepath_json": {
            "name": "filepath_json",
            "location": 24,
            "return": [
                "str",
                "pathlib.Path",
                "py._path.local.LocalPath",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "json_data_set": {
            "name": "json_data_set",
            "location": 29,
            "return": [
                "pymatgen.io.vasp.inputs.Poscar",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath_json": [
                    "str",
                    "type"
                ],
                "fs_args": [
                    "str",
                    "type"
                ]
            }
        },
        "versioned_json_data_set": {
            "name": "versioned_json_data_set",
            "location": 34,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_json": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "json_data_set_args": {
            "name": "json_data_set_args",
            "location": 41,
            "return": [
                "bool",
                "IO[bytes]",
                "Optional[Exception]",
                "int"
            ],
            "arguments": {
                "filepath_json": [
                    "str",
                    "List[str]",
                    "Dict[str, int]",
                    "bool",
                    "dict"
                ]
            }
        },
        "dummy_graph_data": {
            "name": "dummy_graph_data",
            "location": 48,
            "return": [
                "str",
                "int",
                "bytes",
                "Generator"
            ],
            "arguments": {}
        },
        "TestJSONDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "Optional[List[Type]]",
                    "bool"
                ],
                "dummy_graph_data": [
                    "Dict[str, Union[int, str]]",
                    "dict"
                ]
            }
        },
        "TestJSONDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestJSONDataSet.test_load_args_save_args": {
            "name": "test_load_args_save_args",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "bytes",
                    "int"
                ],
                "json_data_set_args": [
                    "str",
                    "int",
                    "bytes",
                    "List[List[int]]",
                    "bool"
                ],
                "dummy_graph_data": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestJSONDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "dict",
                    "Callable[[Any, Any], Any]"
                ],
                "fs_args": [
                    "Callable[[Any, Any], Any]",
                    "Dict[Any, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestJSONDataSet.test_exists": {
            "name": "test_exists",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "dummy_graph_data": [
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestJSONDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "instance_type": []
            }
        },
        "TestJSONDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestJSONDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [],
                "dummy_graph_data": []
            }
        },
        "TestJSONDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "str",
                    "dict",
                    "int",
                    "bytes",
                    "Set[str]"
                ],
                "dummy_graph_data": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Union[int, str]]"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_prevent_override": {
            "name": "test_prevent_override",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [],
                "dummy_graph_data": []
            }
        },
        "TestJSONDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "dict",
                    "starfish.core.imagestack.parser.TileData",
                    "Optional[List[str]]",
                    "str"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_graph_data": [
                    "dict",
                    "starfish.core.imagestack.parser.TileData",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "dict",
                    "str",
                    "Dict[str, Union[int, str]]"
                ],
                "versioned_json_data_set": [
                    "str",
                    "dict",
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "core.models.Subtask"
                ],
                "dummy_graph_data": [
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/networkx/__init__.py": {},
    "kedro-main/tests/extras/datasets/pandas/test_csv_dataset.py": {
        "filepath_csv": {
            "name": "filepath_csv",
            "location": 19,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "csv_data_set": {
            "name": "csv_data_set",
            "location": 24,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "pandas.DataFrame",
                "bytes",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath_csv": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "load_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "save_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "fs_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "versioned_csv_data_set": {
            "name": "versioned_csv_data_set",
            "location": 31,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_csv": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 38,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "TestCSVDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Set[str]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "TestCSVDataSet.test_exists": {
            "name": "test_exists",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Dict[str, cerulean.path.Path]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestCSVDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_data_set": [
                    "str",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestCSVDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_data_set": [
                    "bytes",
                    "str",
                    "core_lib.core.models.Event"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestCSVDataSet.test_storage_options_dropped": {
            "name": "test_storage_options_dropped",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "save_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "caplog": [
                    "dict",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "MutableMapping"
                ],
                "tmp_path": [
                    "path.Path",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "TestCSVDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestCSVDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Dict[str, Any]",
                    "str"
                ],
                "instance_type": [],
                "credentials": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestCSVDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestCSVDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestCSVDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse"
                ]
            }
        },
        "TestCSVDataSetVersioned.test_multiple_loads": {
            "name": "test_multiple_loads",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "TextIO",
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]",
                    "bool"
                ],
                "dummy_dataframe": [
                    "Optional[Exception]",
                    "core_lib.core.models.Event",
                    "Optional[Dict]"
                ],
                "filepath_csv": [
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        },
        "TestCSVDataSetVersioned.test_multiple_saves": {
            "name": "test_multiple_saves",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_dataframe": [
                    "py.path.local",
                    "pathlib.Path"
                ],
                "filepath_csv": [
                    "str",
                    "Tuple[int, int]",
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "TestCSVDataSetVersioned.test_release_instance_cache": {
            "name": "test_release_instance_cache",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_dataframe": [
                    "int",
                    "str"
                ],
                "filepath_csv": [
                    "str",
                    "Tuple[int, int]",
                    "src.core.model.scripScript",
                    "pathlib.Path"
                ]
            }
        },
        "TestCSVDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestCSVDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "dict"
                ]
            }
        },
        "TestCSVDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "dummy_dataframe": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestCSVDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "str",
                    "dict"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestCSVDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCSVDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_csv_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_dataframe": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/test_excel_dataset.py": {
        "filepath_excel": {
            "name": "filepath_excel",
            "location": 17,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "excel_data_set": {
            "name": "excel_data_set",
            "location": 22,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "pandas.DataFrame",
                "bytes",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath_excel": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "load_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "save_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "fs_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "excel_multisheet_data_set": {
            "name": "excel_multisheet_data_set",
            "location": 32,
            "return": [
                "bool",
                "int",
                "Optional[Exception]",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath_excel": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "save_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "fs_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "versioned_excel_data_set": {
            "name": "versioned_excel_data_set",
            "location": 43,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_excel": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 50,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "another_dummy_dataframe": {
            "name": "another_dummy_dataframe",
            "location": 55,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "TestExcelDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "excel_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Set[str]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "TestExcelDataSet.test_save_and_load_multiple_sheets": {
            "name": "test_save_and_load_multiple_sheets",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "excel_multisheet_data_set": [
                    "str",
                    "Dict[str, Union[int, str]]",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]",
                    "dict",
                    "Optional[Exception]"
                ],
                "dummy_dataframe": [
                    "int",
                    "str"
                ],
                "another_dummy_dataframe": [
                    "int",
                    "str"
                ]
            }
        },
        "TestExcelDataSet.test_exists": {
            "name": "test_exists",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "excel_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Dict[str, cerulean.path.Path]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestExcelDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "excel_data_set": [
                    "str",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestExcelDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "excel_data_set": [
                    "bytes",
                    "str",
                    "core_lib.core.models.Event"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestExcelDataSet.test_storage_options_dropped": {
            "name": "test_storage_options_dropped",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "save_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "caplog": [
                    "dict",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "MutableMapping"
                ],
                "tmp_path": [
                    "path.Path",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "TestExcelDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "excel_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestExcelDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "instance_type": [
                    "Container"
                ],
                "load_path": [
                    "path.Path"
                ],
                "mocker": [
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "TestExcelDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestExcelDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestExcelDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_excel_data_set": [
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse"
                ]
            }
        },
        "TestExcelDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_excel_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestExcelDataSetVersioned.test_versioning_not_supported_in_append_mode": {
            "name": "test_versioning_not_supported_in_append_mode",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "path.Path",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "load_version": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "save_version": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "TestExcelDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_excel_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "dict"
                ]
            }
        },
        "TestExcelDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_excel_data_set": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "dummy_dataframe": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestExcelDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_excel_data_set": [
                    "str",
                    "dict"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestExcelDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExcelDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "excel_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_excel_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_dataframe": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/test_feather_dataset.py": {
        "filepath_feather": {
            "name": "filepath_feather",
            "location": 17,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "feather_data_set": {
            "name": "feather_data_set",
            "location": 22,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "pandas.DataFrame",
                "bytes",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath_feather": [
                    "bool",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "Callable",
                    "Dict[Any, int]"
                ],
                "load_args": [
                    "bool",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "Callable",
                    "Dict[Any, int]"
                ],
                "fs_args": [
                    "bool",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "Callable",
                    "Dict[Any, int]"
                ]
            }
        },
        "versioned_feather_data_set": {
            "name": "versioned_feather_data_set",
            "location": 29,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_feather": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "TestFeatherDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "feather_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Set[str]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "TestFeatherDataSet.test_exists": {
            "name": "test_exists",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "feather_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Dict[str, cerulean.path.Path]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestFeatherDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "feather_data_set": [
                    "str",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestFeatherDataSet.test_storage_options_dropped": {
            "name": "test_storage_options_dropped",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "save_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "caplog": [
                    "dict",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "MutableMapping"
                ],
                "tmp_path": [
                    "path.Path",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "TestFeatherDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "feather_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestFeatherDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "instance_type": [
                    "Container"
                ],
                "load_path": [
                    "path.Path"
                ],
                "mocker": [
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "TestFeatherDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestFeatherDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestFeatherDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_feather_data_set": [
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse"
                ]
            }
        },
        "TestFeatherDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_feather_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestFeatherDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_feather_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "dict"
                ]
            }
        },
        "TestFeatherDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_feather_data_set": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "dummy_dataframe": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestFeatherDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_feather_data_set": [
                    "str",
                    "dict"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestFeatherDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatherDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "feather_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_feather_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_dataframe": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/test_gbq_dataset.py": {
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "mock_bigquery_client": {
            "name": "mock_bigquery_client",
            "location": 23,
            "return": [
                "str",
                "bool",
                "google.cloud.pubsub.Client"
            ],
            "arguments": {
                "mocker": [
                    "dict",
                    "supersemodels.core.Database",
                    "Callable",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "gbq_dataset": {
            "name": "gbq_dataset",
            "location": 29,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "load_args": [
                    "Optional[str]"
                ],
                "save_args": [
                    "Optional[str]"
                ],
                "mock_bigquery_client": [
                    "bool",
                    "str"
                ]
            }
        },
        "gbq_sql_dataset": {
            "name": "gbq_sql_dataset",
            "location": 43,
            "return": [
                "List[str]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "load_args": [
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "dict",
                    "bool"
                ],
                "mock_bigquery_client": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Optional[List[Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "sql_file": {
            "name": "sql_file",
            "location": 53,
            "return": [
                "str",
                "pathlib.Path",
                "dict",
                "Optional[\"Path\"]"
            ],
            "arguments": {
                "tmp_path": [
                    "int",
                    "pathlib.Path",
                    "List[str]",
                    "kata.data.io.file.FileWriter"
                ]
            }
        },
        "gbq_sql_file_dataset": {
            "name": "gbq_sql_file_dataset",
            "location": 60,
            "return": [
                "dict",
                "str",
                "pathlib.Path",
                "Optional[List[str]]"
            ],
            "arguments": {
                "load_args": [
                    "str",
                    "bool",
                    "list",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "sql_file": [
                    "str",
                    "bool",
                    "list",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "mock_bigquery_client": [
                    "List[int]",
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "TestGBQDataSet.test_exists": {
            "name": "test_exists",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_bigquery_client": []
            }
        },
        "TestGBQDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_dataset": [
                    "str"
                ],
                "load_args": [
                    "Callable"
                ]
            }
        },
        "TestGBQDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_dataset": [
                    "str"
                ],
                "save_args": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestGBQDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_dataset": [
                    "pathlib.Path",
                    "Callable",
                    "str"
                ],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestGBQDataSet.test_invalid_location": {
            "name": "test_invalid_location",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "save_args": [
                    "str",
                    "abilian.core.models.subjects.User",
                    "List[Dict[str, Any]]"
                ],
                "load_args": [
                    "str",
                    "abilian.core.models.subjects.User",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestGBQDataSet.test_str_representation": {
            "name": "test_str_representation",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_dataset": [
                    "bytes",
                    "pathlib.Path",
                    "int",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "save_args": [
                    "Dict[str, Any]",
                    "dict",
                    "flask.testing.FlaskClient"
                ],
                "load_args": [
                    "Dict[str, Any]",
                    "dict",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestGBQDataSet.test_save_load_data": {
            "name": "test_save_load_data",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_dataset": [],
                "dummy_dataframe": [],
                "mocker": []
            }
        },
        "TestGBQDataSet.test_read_gbq_with_query": {
            "name": "test_read_gbq_with_query",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_dataset": [
                    "static_frame.core.util.DtypeSpecifier",
                    "bool",
                    "core.models.MyUser"
                ],
                "dummy_dataframe": [],
                "mocker": [
                    "str",
                    "int"
                ],
                "load_args": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "TestGBQDataSet.test_validation_of_dataset_and_table_name": {
            "name": "test_validation_of_dataset_and_table_name",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str",
                    "List[str]",
                    "int",
                    "type",
                    "Tuple[str]"
                ],
                "table_name": [
                    "str",
                    "List[str]",
                    "int",
                    "type",
                    "Tuple[str]"
                ]
            }
        },
        "TestGBQDataSet.test_credentials_propagation": {
            "name": "test_credentials_propagation",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestGBQQueryDataSet.test_empty_query_error": {
            "name": "test_empty_query_error",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGBQQueryDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_sql_dataset": [
                    "str"
                ],
                "load_args": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestGBQQueryDataSet.test_credentials_propagation": {
            "name": "test_credentials_propagation",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestGBQQueryDataSet.test_load": {
            "name": "test_load",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ],
                "gbq_sql_dataset": [
                    "static_frame.core.util.DtypeSpecifier"
                ],
                "dummy_dataframe": []
            }
        },
        "TestGBQQueryDataSet.test_load_query_file": {
            "name": "test_load_query_file",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "gbq_sql_file_dataset": [
                    "pathlib.Path",
                    "str"
                ],
                "dummy_dataframe": [
                    "str"
                ]
            }
        },
        "TestGBQQueryDataSet.test_save_error": {
            "name": "test_save_error",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_sql_dataset": [
                    "pathlib.Path",
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "str"
                ],
                "dummy_dataframe": [
                    "pathlib.Path",
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "str"
                ]
            }
        },
        "TestGBQQueryDataSet.test_str_representation_sql": {
            "name": "test_str_representation_sql",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_sql_dataset": [
                    "str",
                    "Callable",
                    "bytes"
                ],
                "sql_file": [
                    "kata.data.io.file.FileWriter",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "TestGBQQueryDataSet.test_str_representation_filepath": {
            "name": "test_str_representation_filepath",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gbq_sql_file_dataset": [
                    "pathlib.Path",
                    "str"
                ],
                "sql_file": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestGBQQueryDataSet.test_sql_and_filepath_args": {
            "name": "test_sql_and_filepath_args",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sql_file": [
                    "str",
                    "core.models.Grouping",
                    "core_lib.core.models.Event"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/test_generic_dataset.py": {
        "filepath_sas": {
            "name": "filepath_sas",
            "location": 19,
            "return": [
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "path.Path",
                    "Iterable[pathlib.Path]",
                    "pathlib.Path",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "filepath_csv": {
            "name": "filepath_csv",
            "location": 24,
            "return": [
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "path.Path",
                    "Iterable[pathlib.Path]",
                    "pathlib.Path",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "filepath_html": {
            "name": "filepath_html",
            "location": 29,
            "return": [
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "path.Path",
                    "Iterable[pathlib.Path]",
                    "pathlib.Path",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "sas_binary": {
            "name": "sas_binary",
            "location": 35,
            "return": [
                "Callable",
                "bool",
                "Tuple[int, str, str]"
            ],
            "arguments": {}
        },
        "sas_data_set": {
            "name": "sas_data_set",
            "location": 40,
            "return": [
                "int",
                "Optional[Exception]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "filepath_sas": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "purplship.core.utils.xml.Element"
                ],
                "fs_args": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "html_data_set": {
            "name": "html_data_set",
            "location": 50,
            "return": [
                "int",
                "Optional[Exception]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "filepath_html": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "purplship.core.utils.xml.Element",
                    "Iterable[Dict[str, Any]]"
                ],
                "fs_args": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "purplship.core.utils.xml.Element",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "sas_data_set_bad_config": {
            "name": "sas_data_set_bad_config",
            "location": 60,
            "return": [
                "int",
                "Optional[Exception]",
                "dict"
            ],
            "arguments": {
                "filepath_sas": [
                    "dict",
                    "int",
                    "bool",
                    "purplship.core.utils.xml.Element",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "str"
                ],
                "fs_args": [
                    "dict",
                    "int",
                    "bool",
                    "purplship.core.utils.xml.Element",
                    "boucanpy.core.http_server.HttpServerRepo",
                    "boucanpy.core.dns_server.DnsServerRepo",
                    "str"
                ]
            }
        },
        "versioned_csv_data_set": {
            "name": "versioned_csv_data_set",
            "location": 70,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[bytes]",
                "bytes",
                "int"
            ],
            "arguments": {
                "filepath_csv": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "load_version": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "save_version": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "csv_data_set": {
            "name": "csv_data_set",
            "location": 80,
            "return": [
                "int",
                "Optional[Exception]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "filepath_csv": [
                    "str",
                    "Optional[IO[str]]",
                    "bool"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 89,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "TestGenericSasDataSet.test_load": {
            "name": "test_load",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sas_binary": [
                    "core.models.GroupingKey",
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ],
                "sas_data_set": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "filepath_sas": [
                    "core.models.GroupingKey",
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "TestGenericSasDataSet.test_save_fail": {
            "name": "test_save_fail",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sas_data_set": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TestGenericSasDataSet.test_bad_load": {
            "name": "test_bad_load",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sas_data_set_bad_config": [
                    "core.models.Recipe"
                ],
                "sas_binary": [
                    "core.models.MyUser",
                    "bool"
                ],
                "filepath_sas": [
                    "core.models.MyUser",
                    "bool"
                ]
            }
        },
        "TestGenericSasDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "pathlib.Path",
                    "str"
                ],
                "instance_type": [],
                "credentials": [
                    "str"
                ]
            }
        },
        "TestGenericSasDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestGenericCSVDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath_csv": [
                    "Optional[Dict[str, Any]]",
                    "Union[str, float]"
                ],
                "load_version": [
                    "str",
                    "bytes"
                ],
                "save_version": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestGenericCSVDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ],
                "dummy_dataframe": [
                    "str",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse"
                ]
            }
        },
        "TestGenericCSVDataSetVersioned.test_multiple_loads": {
            "name": "test_multiple_loads",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "TextIO",
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]",
                    "bool"
                ],
                "dummy_dataframe": [
                    "core_lib.core.models.Event",
                    "Optional[Exception]",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ],
                "filepath_csv": [
                    "str",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestGenericCSVDataSetVersioned.test_multiple_saves": {
            "name": "test_multiple_saves",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_dataframe": [
                    "py.path.local",
                    "pathlib.Path"
                ],
                "filepath_csv": []
            }
        },
        "TestGenericCSVDataSetVersioned.test_release_instance_cache": {
            "name": "test_release_instance_cache",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_dataframe": [
                    "int",
                    "str"
                ],
                "filepath_csv": []
            }
        },
        "TestGenericCSVDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestGenericCSVDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "dict"
                ]
            }
        },
        "TestGenericCSVDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "dummy_dataframe": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestGenericCSVDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_csv_data_set": [
                    "str",
                    "dict"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestGenericCSVDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_csv_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_dataframe": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "TestGenericHtmlDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_dataframe": [
                    "bool",
                    "Optional[List[str]]"
                ],
                "html_data_set": [
                    "core.models.Grouping",
                    "str",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "TestBadGenericDataSet.test_bad_file_format_argument": {
            "name": "test_bad_file_format_argument",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadGenericDataSet.test_generic_no_filepaths": {
            "name": "test_generic_no_filepaths",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_format": [
                    "str",
                    "Union[str, BinaryIO]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/test_hdf_dataset.py": {
        "filepath_hdf": {
            "name": "filepath_hdf",
            "location": 19,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "hdf_data_set": {
            "name": "hdf_data_set",
            "location": 24,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "filepath_hdf": [
                    "Dict[str, Any]",
                    "int"
                ],
                "load_args": [
                    "Dict[str, Any]",
                    "int"
                ],
                "save_args": [
                    "Dict[str, Any]",
                    "int"
                ],
                "mocker": [
                    "Union[bool, int, str]",
                    "Optional[Dict[str, Any]]",
                    "pandas.DataFrame",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, List[dict]]"
                ],
                "fs_args": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "versioned_hdf_data_set": {
            "name": "versioned_hdf_data_set",
            "location": 36,
            "return": [
                "bytes",
                "bool",
                "django.http.HttpRequest",
                "str"
            ],
            "arguments": {
                "filepath_hdf": [
                    "Dict[str, Any]",
                    "Dict[str, List[str]]",
                    "dict",
                    "Dict[str, str]",
                    "bool",
                    "Callable[[str], bool]",
                    "Dict[str, List[Any]]"
                ],
                "load_version": [
                    "Dict[str, Any]",
                    "Dict[str, List[str]]",
                    "dict",
                    "Dict[str, str]",
                    "bool",
                    "Callable[[str], bool]",
                    "Dict[str, List[Any]]"
                ],
                "save_version": [
                    "Dict[str, Any]",
                    "Dict[str, List[str]]",
                    "dict",
                    "Dict[str, str]",
                    "bool",
                    "Callable[[str], bool]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 43,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "TestHDFDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "TestHDFDataSet.test_exists": {
            "name": "test_exists",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Dict[str, cerulean.path.Path]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestHDFDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_data_set": [
                    "str",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestHDFDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_data_set": [
                    "bytes",
                    "str",
                    "core_lib.core.models.Event"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestHDFDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_data_set": [
                    "dict",
                    "Callable[[Any, Any], Any]"
                ],
                "fs_args": [
                    "Callable[[Any, Any], Any]",
                    "Dict[Any, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestHDFDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestHDFDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "instance_type": []
            }
        },
        "TestHDFDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestHDFDataSet.test_save_and_load_df_with_categorical_variables": {
            "name": "test_save_and_load_df_with_categorical_variables",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_data_set": [
                    "str",
                    "dict",
                    "flask.testing.FlaskClient",
                    "core.models.Grouping",
                    "core.models.Recipe",
                    "bytes"
                ]
            }
        },
        "TestHDFDataSet.test_thread_lock_usage": {
            "name": "test_thread_lock_usage",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_data_set": [
                    "str",
                    "Optional[Dict]",
                    "dict",
                    "waterbutler.core.streams.BaseStream"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ],
                "mocker": [
                    "int",
                    "List[int]",
                    "Optional[Callable[[str], bool]]"
                ]
            }
        },
        "TestHDFDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "dict"
                ],
                "save_version": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestHDFDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_hdf_data_set": [
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse"
                ]
            }
        },
        "TestHDFDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_hdf_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestHDFDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_hdf_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "dict"
                ]
            }
        },
        "TestHDFDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_hdf_data_set": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "dummy_dataframe": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestHDFDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_hdf_data_set": [
                    "str",
                    "dict"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestHDFDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHDFDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hdf_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_hdf_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_dataframe": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/test_json_dataset.py": {
        "filepath_json": {
            "name": "filepath_json",
            "location": 18,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "json_data_set": {
            "name": "json_data_set",
            "location": 23,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "pandas.DataFrame",
                "bytes",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath_json": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "load_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "save_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "fs_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "versioned_json_data_set": {
            "name": "versioned_json_data_set",
            "location": 33,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_json": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "TestJSONDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Set[str]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "TestJSONDataSet.test_exists": {
            "name": "test_exists",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Dict[str, cerulean.path.Path]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestJSONDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "str",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestJSONDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "bytes",
                    "str",
                    "core_lib.core.models.Event"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestJSONDataSet.test_storage_options_dropped": {
            "name": "test_storage_options_dropped",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "save_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "caplog": [
                    "dict",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "MutableMapping"
                ],
                "tmp_path": [
                    "path.Path",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "TestJSONDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestJSONDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "instance_type": [
                    "int",
                    "Container"
                ],
                "credentials": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "load_path": [
                    "path.Path"
                ],
                "mocker": []
            }
        },
        "TestJSONDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestJSONDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "dict"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "dummy_dataframe": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_json_data_set": [
                    "str",
                    "dict"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestJSONDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_json_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_dataframe": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/test_parquet_dataset.py": {
        "filepath_parquet": {
            "name": "filepath_parquet",
            "location": 21,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "List[int]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "parquet_data_set": {
            "name": "parquet_data_set",
            "location": 26,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "pandas.DataFrame",
                "bytes",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath_parquet": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "load_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "save_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "fs_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "versioned_parquet_data_set": {
            "name": "versioned_parquet_data_set",
            "location": 36,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_parquet": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 43,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "TestParquetDataSet.test_credentials_propagated": {
            "name": "test_credentials_propagated",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "TestParquetDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "dummy_dataframe": []
            }
        },
        "TestParquetDataSet.test_save_and_load_non_existing_dir": {
            "name": "test_save_and_load_non_existing_dir",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "dummy_dataframe": []
            }
        },
        "TestParquetDataSet.test_exists": {
            "name": "test_exists",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parquet_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Dict[str, cerulean.path.Path]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestParquetDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parquet_data_set": [
                    "str",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestParquetDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parquet_data_set": [
                    "bytes",
                    "str",
                    "core_lib.core.models.Event"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestParquetDataSet.test_storage_options_dropped": {
            "name": "test_storage_options_dropped",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "save_args": [
                    "Optional[str]",
                    "List[str]"
                ],
                "caplog": [
                    "dict",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "MutableMapping"
                ],
                "tmp_path": [
                    "path.Path",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "TestParquetDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parquet_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestParquetDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "instance_type": [
                    "Container"
                ],
                "load_path": [
                    "path.Path"
                ],
                "mocker": [
                    "pathlib.Path",
                    "pandas.Series"
                ]
            }
        },
        "TestParquetDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "pathlib.Path",
                    "str"
                ],
                "path": [
                    "pathlib.Path",
                    "str"
                ],
                "mocker": []
            }
        },
        "TestParquetDataSet.test_read_partitioned_file": {
            "name": "test_read_partitioned_file",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "dummy_dataframe": [
                    "pathlib.Path"
                ]
            }
        },
        "TestParquetDataSet.test_write_to_dir": {
            "name": "test_write_to_dir",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_dataframe": [
                    "Optional[str]",
                    "pathlib.Path",
                    "path.Path"
                ],
                "tmp_path": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "TestParquetDataSet.test_read_from_non_local_dir": {
            "name": "test_read_from_non_local_dir",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestParquetDataSet.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestParquetDataSet.test_arg_partition_cols": {
            "name": "test_arg_partition_cols",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_dataframe": [
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "tmp_path": [
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "TestParquetDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "Optional[str]",
                    "str"
                ],
                "save_version": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestParquetDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_parquet_data_set": [
                    "str"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestParquetDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_parquet_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestParquetDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_parquet_data_set": [
                    "str",
                    "pathlib.Path",
                    "Union[str, List[str]]",
                    "Optional[str]"
                ],
                "dummy_dataframe": [
                    "dict"
                ],
                "mocker": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestParquetDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_parquet_data_set": [
                    "str"
                ],
                "dummy_dataframe": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "mocker": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestParquetDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_parquet_data_set": [
                    "str"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "dict"
                ],
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestParquetDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParquetDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parquet_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_parquet_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_dataframe": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/test_sql_dataset.py": {
        "cleanup_engines": {
            "name": "cleanup_engines",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "sql_file": {
            "name": "sql_file",
            "location": 33,
            "return": [
                "str",
                "pathlib.Path",
                "dict",
                "Optional[\"Path\"]"
            ],
            "arguments": {
                "tmp_path": [
                    "int",
                    "pathlib.Path",
                    "List[str]",
                    "kata.data.io.file.FileWriter"
                ]
            }
        },
        "table_data_set": {
            "name": "table_data_set",
            "location": 40,
            "return": [
                "str",
                "Optional[Dict[str, bytes]]",
                "Optional[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "request": []
            }
        },
        "query_data_set": {
            "name": "query_data_set",
            "location": 47,
            "return": [
                "bytes",
                "Dict[str, Union[str, int]]",
                "dict",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "request": []
            }
        },
        "query_file_data_set": {
            "name": "query_file_data_set",
            "location": 54,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "bytes",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "Callable[..., Awaitable[dict]]",
                    "Callable[..., Awaitable]"
                ],
                "sql_file": [
                    "Dict[str, Any]",
                    "MutableMapping",
                    "Tuple[str, str]"
                ]
            }
        },
        "TestSQLTableDataSet._assert_sqlalchemy_called_once": {
            "name": "_assert_sqlalchemy_called_once",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestSQLTableDataSet.test_empty_table_name": {
            "name": "test_empty_table_name",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLTableDataSet.test_empty_connection": {
            "name": "test_empty_connection",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLTableDataSet.test_driver_missing": {
            "name": "test_driver_missing",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSQLTableDataSet.test_unknown_sql": {
            "name": "test_unknown_sql",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLTableDataSet.test_unknown_module": {
            "name": "test_unknown_module",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSQLTableDataSet.test_str_representation_table": {
            "name": "test_str_representation_table",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "table_data_set": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "TestSQLTableDataSet.test_table_exists": {
            "name": "test_table_exists",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ],
                "table_data_set": [
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "TestSQLTableDataSet.test_table_exists_schema": {
            "name": "test_table_exists_schema",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ],
                "table_data_set": [
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "TestSQLTableDataSet.test_table_exists_mocked": {
            "name": "test_table_exists_mocked",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "table_data_set": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "TestSQLTableDataSet.test_load_sql_params": {
            "name": "test_load_sql_params",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "table_data_set": [
                    "sqlalchemy.orm.session.Session",
                    "dict"
                ]
            }
        },
        "TestSQLTableDataSet.test_save_default_index": {
            "name": "test_save_default_index",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Hashable"
                ],
                "table_data_set": [
                    "bool",
                    "str",
                    "Union[None, dict]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Type['Declared']"
                ]
            }
        },
        "TestSQLTableDataSet.test_save_overwrite_index": {
            "name": "test_save_overwrite_index",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "List[str]",
                    "Optional[Iterable[Any]]",
                    "str",
                    "int"
                ],
                "table_data_set": [
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestSQLTableDataSet.test_save_ignore_table_name_override": {
            "name": "test_save_ignore_table_name_override",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Iterable[Any]]",
                    "List[str]"
                ],
                "table_data_set": [],
                "dummy_dataframe": [
                    "str"
                ]
            }
        },
        "TestSQLTableDataSetSingleConnection.test_single_connection": {
            "name": "test_single_connection",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_dataframe": [],
                "mocker": []
            }
        },
        "TestSQLTableDataSetSingleConnection.test_create_connection_only_once": {
            "name": "test_create_connection_only_once",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestSQLTableDataSetSingleConnection.test_multiple_connections": {
            "name": "test_multiple_connections",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSQLQueryDataSet.test_empty_query_error": {
            "name": "test_empty_query_error",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLQueryDataSet.test_empty_con_error": {
            "name": "test_empty_con_error",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLQueryDataSet.test_load": {
            "name": "test_load",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ],
                "query_data_set": [
                    "bool",
                    "dict",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ]
            }
        },
        "TestSQLQueryDataSet.test_load_query_file": {
            "name": "test_load_query_file",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Sequence[str]",
                    "dict",
                    "pathlib.Path"
                ],
                "query_file_data_set": [
                    "dict",
                    "Callable[[str], None]",
                    "Dict[str, Union[Any, Any]]",
                    "Dict[str, Any]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "TestSQLQueryDataSet.test_load_driver_missing": {
            "name": "test_load_driver_missing",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "TestSQLQueryDataSet.test_invalid_module": {
            "name": "test_invalid_module",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSQLQueryDataSet.test_load_unknown_module": {
            "name": "test_load_unknown_module",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Tuple[int, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestSQLQueryDataSet.test_load_unknown_sql": {
            "name": "test_load_unknown_sql",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLQueryDataSet.test_save_error": {
            "name": "test_save_error",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query_data_set": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "bytes",
                    "int",
                    "Optional[dict]"
                ],
                "dummy_dataframe": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "bytes",
                    "int",
                    "Optional[dict]"
                ]
            }
        },
        "TestSQLQueryDataSet.test_str_representation_sql": {
            "name": "test_str_representation_sql",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query_data_set": [
                    "dict",
                    "bytes",
                    "MutableMapping[str, Any]"
                ],
                "sql_file": [
                    "str",
                    "Optional[pathlib.Path]",
                    "pathlib.Path",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestSQLQueryDataSet.test_str_representation_filepath": {
            "name": "test_str_representation_filepath",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query_file_data_set": [
                    "pathlib.Path",
                    "str",
                    "TextIO"
                ],
                "sql_file": [
                    "pathlib.Path",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "BinaryIO"
                ]
            }
        },
        "TestSQLQueryDataSet.test_sql_and_filepath_args": {
            "name": "test_sql_and_filepath_args",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sql_file": [
                    "str"
                ]
            }
        },
        "TestSQLQueryDataSet.test_create_connection_only_once": {
            "name": "test_create_connection_only_once",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/test_xml_dataset.py": {
        "filepath_xml": {
            "name": "filepath_xml",
            "location": 18,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "xml_data_set": {
            "name": "xml_data_set",
            "location": 23,
            "return": [
                "dict"
            ],
            "arguments": {
                "filepath_xml": [
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "MutableMapping[str, str]",
                    "float",
                    "str",
                    "int"
                ],
                "load_args": [
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "MutableMapping[str, str]",
                    "float",
                    "str",
                    "int"
                ],
                "save_args": [
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "MutableMapping[str, str]",
                    "float",
                    "str",
                    "int"
                ],
                "fs_args": [
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "MutableMapping[str, str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "versioned_xml_data_set": {
            "name": "versioned_xml_data_set",
            "location": 33,
            "return": [
                "dict",
                "pathlib.Path"
            ],
            "arguments": {
                "filepath_xml": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "int"
                ],
                "load_version": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "int"
                ],
                "save_version": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "TestXMLDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xml_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path"
                ],
                "dummy_dataframe": [
                    "dict",
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestXMLDataSet.test_exists": {
            "name": "test_exists",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xml_data_set": [
                    "pathlib.Path",
                    "Iterable[Tuple[pathlib.Path, pathlib.Path]]",
                    "Dict[str, Any]"
                ],
                "dummy_dataframe": [
                    "dict",
                    "pathlib.Path",
                    "bytes",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "TestXMLDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xml_data_set": [
                    "dict",
                    "List[Dict]",
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "Mapping",
                    "bytes"
                ],
                "load_args": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TestXMLDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xml_data_set": [
                    "dict",
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "Mapping",
                    "bytes",
                    "List[Dict]"
                ],
                "save_args": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TestXMLDataSet.test_storage_options_dropped": {
            "name": "test_storage_options_dropped",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_args": [
                    "int",
                    "str"
                ],
                "save_args": [
                    "int",
                    "str"
                ],
                "caplog": [
                    "dict",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "MutableMapping"
                ],
                "tmp_path": [
                    "path.Path",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "TestXMLDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xml_data_set": [
                    "dict",
                    "pathlib.Path",
                    "MutableMapping[str, Any]",
                    "Optional[Tuple[str]]",
                    "List[str]"
                ]
            }
        },
        "TestXMLDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "pipwatch_worker.core.data_models.Project",
                    "IO[bytes]"
                ],
                "instance_type": [
                    "int",
                    "Container"
                ],
                "credentials": [
                    "pipwatch_worker.core.data_models.Project"
                ],
                "load_path": [
                    "path.Path"
                ],
                "mocker": []
            }
        },
        "TestXMLDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestXMLDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "int",
                    "TextIO",
                    "str",
                    "pipwatch_worker.core.data_models.Project"
                ],
                "save_version": [
                    "int",
                    "TextIO",
                    "str",
                    "pipwatch_worker.core.data_models.Project"
                ]
            }
        },
        "TestXMLDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_xml_data_set": [
                    "pathlib.Path",
                    "dict",
                    "Dict[str, Any]"
                ],
                "dummy_dataframe": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "TestXMLDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_xml_data_set": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "str",
                    "path.Path"
                ]
            }
        },
        "TestXMLDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_xml_data_set": [
                    "pathlib.Path"
                ],
                "dummy_dataframe": [
                    "pathlib.Path"
                ]
            }
        },
        "TestXMLDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_xml_data_set": [
                    "pathlib.Path",
                    "bytes"
                ],
                "dummy_dataframe": [
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "TestXMLDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_xml_data_set": [
                    "pathlib.Path"
                ],
                "load_version": [
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "pathlib.Path",
                    "dict"
                ],
                "save_version": [
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "pathlib.Path",
                    "dict"
                ],
                "dummy_dataframe": [
                    "pathlib.Path"
                ]
            }
        },
        "TestXMLDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestXMLDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xml_data_set": [
                    "Dict[str, Any]",
                    "List[str]",
                    "str",
                    "pathlib.Path",
                    "Tuple[Any, Any]"
                ],
                "versioned_xml_data_set": [
                    "waterbutler.core.path.WaterButlerPath",
                    "pathlib.Path",
                    "Dict[str, Union[Any, Any]]"
                ],
                "dummy_dataframe": [
                    "dict",
                    "Tuple[Any, Any]",
                    "bytes"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pandas/__init__.py": {},
    "kedro-main/tests/extras/datasets/pickle/test_pickle_dataset.py": {
        "filepath_pickle": {
            "name": "filepath_pickle",
            "location": 18,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "backend": {
            "name": "backend",
            "location": 23,
            "return": [
                "int",
                "pandas.DataFrame",
                "list",
                "static_frame.core.util.DepthLevelSpecifier"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "pickle_data_set": {
            "name": "pickle_data_set",
            "location": 28,
            "return": [
                "bytes",
                "str",
                "django.http.HttpRequest",
                "dict"
            ],
            "arguments": {
                "filepath_pickle": [],
                "backend": [],
                "load_args": [],
                "save_args": [],
                "fs_args": []
            }
        },
        "versioned_pickle_data_set": {
            "name": "versioned_pickle_data_set",
            "location": 39,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_pickle": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 46,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "TestPickleDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str"
                ]
            }
        },
        "TestPickleDataSet.test_exists": {
            "name": "test_exists",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Dict[str, cerulean.path.Path]",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestPickleDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "str",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestPickleDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "bytes",
                    "str",
                    "core_lib.core.models.Event"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestPickleDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "dict",
                    "Callable[[Any, Any], Any]"
                ],
                "fs_args": [
                    "Callable[[Any, Any], Any]",
                    "Dict[Any, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestPickleDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestPickleDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "instance_type": []
            }
        },
        "TestPickleDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestPickleDataSet.test_unserialisable_data": {
            "name": "test_unserialisable_data",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "mocker": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "TestPickleDataSet.test_invalid_backend": {
            "name": "test_invalid_backend",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestPickleDataSet.test_no_backend": {
            "name": "test_no_backend",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "TestPickleDataSet.test_copy": {
            "name": "test_copy",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestPickleDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestPickleDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_pickle_data_set": [
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "str",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ],
                "dummy_dataframe": [
                    "flask.testing.FlaskClient",
                    "str",
                    "inspire_mitmproxy.http.MITMRequest",
                    "inspire_mitmproxy.http.MITMResponse"
                ]
            }
        },
        "TestPickleDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_pickle_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPickleDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_pickle_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_dataframe": [
                    "dict"
                ]
            }
        },
        "TestPickleDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_pickle_data_set": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "dummy_dataframe": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ]
            }
        },
        "TestPickleDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_pickle_data_set": [
                    "str",
                    "dict"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "dummy_dataframe": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestPickleDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPickleDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "versioned_pickle_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ],
                "dummy_dataframe": [
                    "Dict[Any, pathlib.Path]",
                    "dict",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "TestPickleDataSetVersioned.test_copy": {
            "name": "test_copy",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_pickle_data_set": [
                    "bytes",
                    "str",
                    "dict",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]",
                    "Dict[str, Union[int, str]]",
                    "core_lib.core.models.Event"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pickle/__init__.py": {},
    "kedro-main/tests/extras/datasets/pillow/test_image_dataset.py": {
        "filepath_png": {
            "name": "filepath_png",
            "location": 16,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "image_dataset": {
            "name": "image_dataset",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath_png": [
                    "bool",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "int"
                ],
                "save_args": [
                    "bool",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "int"
                ],
                "fs_args": [
                    "bool",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "versioned_image_dataset": {
            "name": "versioned_image_dataset",
            "location": 26,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "filepath_png": [
                    "Dict[str, List[Any]]",
                    "Dict[str, dict]",
                    "int",
                    "bool",
                    "Dict[str, bool]",
                    "dict",
                    "Dict[str, List[str]]",
                    "Tuple[str, str]"
                ],
                "load_version": [
                    "Dict[str, List[Any]]",
                    "Dict[str, dict]",
                    "int",
                    "bool",
                    "Dict[str, bool]",
                    "dict",
                    "Dict[str, List[str]]",
                    "Tuple[str, str]"
                ],
                "save_version": [
                    "Dict[str, List[Any]]",
                    "Dict[str, dict]",
                    "int",
                    "bool",
                    "Dict[str, bool]",
                    "dict",
                    "Dict[str, List[str]]",
                    "Tuple[str, str]"
                ]
            }
        },
        "image_object": {
            "name": "image_object",
            "location": 33,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "images_equal": {
            "name": "images_equal",
            "location": 38,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "image_1": [
                    "int",
                    "starfish.core.morphology.label_image.label_image.LabelImage",
                    "IO[Any]",
                    "Counter",
                    "Dict[str, List[str]]",
                    "PIL.Image.Image",
                    "Mapping[str, float]"
                ],
                "image_2": [
                    "int",
                    "starfish.core.morphology.label_image.label_image.LabelImage",
                    "IO[Any]",
                    "Counter",
                    "Dict[str, List[str]]",
                    "PIL.Image.Image",
                    "Mapping[str, float]"
                ]
            }
        },
        "TestImageDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image_dataset": [
                    "str",
                    "List[str]",
                    "Tuple[int, int]"
                ],
                "image_object": [
                    "str",
                    "Optional[pathlib.Path]",
                    "float",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "TestImageDataSet.test_exists": {
            "name": "test_exists",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image_dataset": [
                    "Optional[List[str]]",
                    "str",
                    "pypi2nix.path.Path",
                    "float",
                    "int",
                    "bool",
                    "TextIO"
                ],
                "image_object": [
                    "pathlib.Path",
                    "bytes",
                    "BinaryIO",
                    "str",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "TestImageDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image_dataset": [
                    "str",
                    "List[str]",
                    "Union[str, int]",
                    "int"
                ],
                "save_args": [
                    "List[str]",
                    "dict",
                    "list",
                    "MutableMapping[str, str]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "TestImageDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image_dataset": [
                    "Callable",
                    "Optional[\"Game\"]"
                ],
                "fs_args": [
                    "Optional[List[Any]]",
                    "str"
                ]
            }
        },
        "TestImageDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image_dataset": [
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "TestImageDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "pipwatch_worker.core.data_models.Project",
                    "pathlib.PosixPath",
                    "path.Path"
                ],
                "instance_type": []
            }
        },
        "TestImageDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestImageDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "pipwatch_worker.core.data_models.Project",
                    "Optional[bool]"
                ],
                "save_version": [
                    "str",
                    "pipwatch_worker.core.data_models.Project",
                    "Optional[bool]"
                ]
            }
        },
        "TestImageDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_image_dataset": [],
                "image_object": [
                    "str",
                    "bytes",
                    "Tuple[int, int]",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "TestImageDataSetVersioned.test_multiple_loads": {
            "name": "test_multiple_loads",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_image_dataset": [
                    "int",
                    "float",
                    "bool"
                ],
                "image_object": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "Tuple[int, int]"
                ],
                "filepath_png": []
            }
        },
        "TestImageDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_image_dataset": []
            }
        },
        "TestImageDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_image_dataset": [
                    "bytes",
                    "pathlib.Path",
                    "Tuple[int, int]",
                    "str"
                ],
                "image_object": [
                    "bytes",
                    "int"
                ]
            }
        },
        "TestImageDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_image_dataset": [
                    "str"
                ],
                "image_object": [
                    "str"
                ]
            }
        },
        "TestImageDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_image_dataset": [
                    "Sequence[str]",
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "load_version": [
                    "str"
                ],
                "save_version": [
                    "str"
                ],
                "image_object": [
                    "Sequence[str]",
                    "List[float]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestImageDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImageDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image_dataset": [
                    "pathlib.Path",
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "versioned_image_dataset": [
                    "int",
                    "str"
                ],
                "image_object": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/pillow/__init__.py": {},
    "kedro-main/tests/extras/datasets/plotly/test_json_dataset.py": {
        "filepath_json": {
            "name": "filepath_json",
            "location": 17,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "json_data_set": {
            "name": "json_data_set",
            "location": 22,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "bytes",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath_json": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "load_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "save_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ],
                "fs_args": [
                    "Callable",
                    "Set[str]",
                    "bool",
                    "List[str]",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "dummy_plot": {
            "name": "dummy_plot",
            "location": 32,
            "return": [
                "int",
                "List[int]",
                "pathlib.Path",
                "Tuple[Tuple[int, Any]]",
                "str"
            ],
            "arguments": {}
        },
        "TestJSONDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "str",
                    "Callable"
                ],
                "dummy_plot": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "core.models.Grouping"
                ]
            }
        },
        "TestJSONDataSet.test_exists": {
            "name": "test_exists",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "dict"
                ],
                "dummy_plot": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestJSONDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestJSONDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "List[str]",
                    "Callable",
                    "Set[str]",
                    "core.models.Grouping"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestJSONDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_data_set": [
                    "dict",
                    "Callable",
                    "bool"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestJSONDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Dict[str, Any]",
                    "str"
                ],
                "instance_type": [],
                "credentials": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestJSONDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "kedro-main/tests/extras/datasets/plotly/test_plotly_dataset.py": {
        "filepath_json": {
            "name": "filepath_json",
            "location": 19,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "plotly_data_set": {
            "name": "plotly_data_set",
            "location": 24,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "pandas.DataFrame",
                "bytes",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "filepath_json": [
                    "bool",
                    "Callable",
                    "Set[str]"
                ],
                "load_args": [
                    "bool",
                    "Callable",
                    "Set[str]"
                ],
                "save_args": [
                    "bool",
                    "Callable",
                    "Set[str]"
                ],
                "fs_args": [
                    "bool",
                    "Callable",
                    "Set[str]"
                ],
                "plotly_args": [
                    "bool",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "plotly_args": {
            "name": "plotly_args",
            "location": 35,
            "return": [
                "bool",
                "int",
                "Tuple[str]",
                "str"
            ],
            "arguments": {}
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 44,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "TestPlotlyDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plotly_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Set[str]"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "core.models.Grouping"
                ]
            }
        },
        "TestPlotlyDataSet.test_exists": {
            "name": "test_exists",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plotly_data_set": [
                    "str",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "dict"
                ],
                "dummy_dataframe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestPlotlyDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plotly_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestPlotlyDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ],
                "instance_type": [
                    "int",
                    "Optional[str]",
                    "T",
                    "Container[T]"
                ],
                "credentials": [
                    "dict",
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]"
                ],
                "plotly_args": [
                    "dict",
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPlotlyDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "core_lib.core.models.Venue"
                ],
                "plotly_args": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestPlotlyDataSet.test_fail_if_invalid_plotly_args_provided": {
            "name": "test_fail_if_invalid_plotly_args_provided",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/extras/datasets/plotly/__init__.py": {},
    "kedro-main/tests/extras/datasets/redis/test_redis_dataset.py": {
        "backend": {
            "name": "backend",
            "location": 17,
            "return": [
                "int",
                "pandas.DataFrame",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "key": {
            "name": "key",
            "location": 22,
            "return": [
                "float",
                "Optional[int]",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "Iterable[int]"
                ]
            }
        },
        "redis_args": {
            "name": "redis_args",
            "location": 27,
            "return": [
                "int",
                "Exception"
            ],
            "arguments": {}
        },
        "dummy_object": {
            "name": "dummy_object",
            "location": 34,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {}
        },
        "serialised_dummy_object": {
            "name": "serialised_dummy_object",
            "location": 40,
            "return": [
                "List[int]",
                "int",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "dummy_object": [
                    "dict",
                    "int",
                    "Mapping[str, object]",
                    "bool",
                    "float",
                    "str",
                    "Dict[str, Any]",
                    "List[int]"
                ],
                "save_args": [
                    "dict",
                    "pandas.DataFrame",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "pickle_data_set": {
            "name": "pickle_data_set",
            "location": 48,
            "return": [
                "str",
                "Dict[str, str]",
                "List[Dict]",
                "bytes",
                "Mapping",
                "int"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "key": [
                    "dict"
                ],
                "backend": [
                    "dict"
                ],
                "load_args": [
                    "dict"
                ],
                "save_args": [
                    "dict"
                ],
                "redis_args": [
                    "dict"
                ]
            }
        },
        "TestPickleDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "str",
                    "dict",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "mocker": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "Any"
                ],
                "dummy_object": [
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[bytes]",
                    "Dict[str, str]",
                    "str"
                ],
                "serialised_dummy_object": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "Any"
                ],
                "key": [
                    "int",
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "redis.Redis"
                ]
            }
        },
        "TestPickleDataSet.test_exists": {
            "name": "test_exists",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "pickle_data_set": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "dummy_object": [
                    "Dict[str, str]",
                    "IO",
                    "str",
                    "Tuple[str, str]",
                    "bool",
                    "Optional[str]"
                ],
                "key": [
                    "bytes",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "TestPickleDataSet.test_exists_raises_error": {
            "name": "test_exists_raises_error",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ]
            }
        },
        "TestPickleDataSet.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "str",
                    "numpy.ndarray",
                    "dict"
                ],
                "load_args": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TestPickleDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "bytes",
                    "str"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestPickleDataSet.test_redis_extra_args": {
            "name": "test_redis_extra_args",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [],
                "redis_args": [
                    "int",
                    "str",
                    "kata.data.io.network.GithubApi"
                ]
            }
        },
        "TestPickleDataSet.test_load_missing_key": {
            "name": "test_load_missing_key",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "pickle_data_set": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]"
                ]
            }
        },
        "TestPickleDataSet.test_unserialisable_data": {
            "name": "test_unserialisable_data",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pickle_data_set": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "dummy_object": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "mocker": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Union[str, int]"
                ]
            }
        },
        "TestPickleDataSet.test_invalid_backend": {
            "name": "test_invalid_backend",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestPickleDataSet.test_no_backend": {
            "name": "test_no_backend",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/redis/__init__.py": {},
    "kedro-main/tests/extras/datasets/spark/conftest.py": {
        "_setup_spark_session": {
            "name": "_setup_spark_session",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "spark_session": {
            "name": "spark_session",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path_factory": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/spark/test_deltatable_dataset.py": {
        "sample_spark_df": {
            "name": "sample_spark_df",
            "location": 14,
            "return": [
                "Dict[str, str]",
                "cmk.utils.type_defs.UserId",
                "List[str]"
            ],
            "arguments": {}
        },
        "TestDeltaTableDataSet.test_load": {
            "name": "test_load",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ],
                "sample_spark_df": [
                    "str"
                ]
            }
        },
        "TestDeltaTableDataSet.test_save": {
            "name": "test_save",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ],
                "sample_spark_df": [
                    "str"
                ]
            }
        },
        "TestDeltaTableDataSet.test_exists": {
            "name": "test_exists",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ],
                "sample_spark_df": [
                    "str"
                ]
            }
        },
        "TestDeltaTableDataSet.test_exists_raises_error": {
            "name": "test_exists_raises_error",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestDeltaTableDataSet.test_parallel_runner": {
            "name": "test_parallel_runner",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "float",
                    "str",
                    "routemaster.state_machine.types.Metadata"
                ]
            }
        },
        "TestDeltaTableDataSet.test_parallel_runner.no_output": {
            "name": "no_output",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Optional[List[int]]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/spark/test_memory_dataset.py": {
        "_update_spark_df": {
            "name": "_update_spark_df",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "float",
                    "int",
                    "Dict[str, float]",
                    "Dict[str, str]"
                ],
                "idx": [
                    "List[sqlalchemy.sql.expression.ColumnClause]",
                    "int",
                    "str",
                    "List[float]",
                    "Tuple[int, int]",
                    "List[Dict[str, Any]]",
                    "List[Tuple[int, int, int]]"
                ],
                "jdx": [
                    "int",
                    "list",
                    "Tuple[str]",
                    "str",
                    "dict",
                    "pandas.DataFrame"
                ],
                "value": [
                    "int",
                    "list",
                    "Tuple[str]",
                    "str",
                    "dict",
                    "pandas.DataFrame"
                ]
            }
        },
        "_check_equals": {
            "name": "_check_equals",
            "location": 20,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "data1": [
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[MutableMapping]"
                ],
                "data2": [
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[MutableMapping]"
                ]
            }
        },
        "spark_data_frame": {
            "name": "spark_data_frame",
            "location": 27,
            "return": [
                "Optional[str]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "spark_session": [
                    "str",
                    "dict"
                ]
            }
        },
        "memory_dataset": {
            "name": "memory_dataset",
            "location": 34,
            "return": [
                "bool",
                "Dict[str, List]",
                "int"
            ],
            "arguments": {
                "spark_data_frame": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_load_modify_original_data": {
            "name": "test_load_modify_original_data",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "memory_dataset": [],
                "spark_data_frame": []
            }
        },
        "test_save_modify_original_data": {
            "name": "test_save_modify_original_data",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "spark_data_frame": []
            }
        },
        "test_load_returns_same_spark_object": {
            "name": "test_load_returns_same_spark_object",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "memory_dataset": [
                    "str",
                    "List[Dict[str, Any]]",
                    "bytes"
                ],
                "spark_data_frame": []
            }
        },
        "test_str_representation": {
            "name": "test_str_representation",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "memory_dataset": [
                    "Dict[str, float]",
                    "str"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/spark/test_spark_dataset.py": {
        "sample_pandas_df": {
            "name": "sample_pandas_df",
            "location": 64,
            "return": [
                "str",
                "int",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "version": {
            "name": "version",
            "location": 71,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "versioned_dataset_local": {
            "name": "versioned_dataset_local",
            "location": 78,
            "return": [
                "bytes",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "versioned_dataset_dbfs": {
            "name": "versioned_dataset_dbfs",
            "location": 83,
            "return": [
                "bytes",
                "pymatgen.io.vasp.inputs.Poscar",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "versioned_dataset_s3": {
            "name": "versioned_dataset_s3",
            "location": 90,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "int",
                    "bool",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "sample_spark_df": {
            "name": "sample_spark_df",
            "location": 99,
            "return": [
                "Dict[str, str]",
                "cmk.utils.type_defs.UserId",
                "List[str]"
            ],
            "arguments": {}
        },
        "sample_spark_df_schema": {
            "name": "sample_spark_df_schema",
            "location": 113,
            "return": [
                "mypy.types.Type",
                "BaseException",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "spark_in": {
            "name": "spark_in",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "int",
                    "Optional[path.Path]"
                ],
                "sample_spark_df": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "mocked_s3_bucket": {
            "name": "mocked_s3_bucket",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mocked_s3_schema": {
            "name": "mocked_s3_schema",
            "location": 148,
            "return": [
                "pathlib.Path",
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "tmp_path": [
                    "Optional[str]",
                    "str"
                ],
                "mocked_s3_bucket": [
                    "str",
                    "Optional[str]"
                ],
                "sample_spark_df_schema": [
                    "str",
                    "bool",
                    "gobbli.io.EmbedInput",
                    "Optional[str]"
                ]
            }
        },
        "data_catalog": {
            "name": "data_catalog",
            "location": 942,
            "return": [
                "List[str]",
                "float",
                "Sequence[Sequence[str]]",
                "Tuple[int]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FileInfo.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "bool"
                ]
            }
        },
        "FileInfo.isDir": {
            "name": "isDir",
            "location": 163,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkDataSet.test_load_parquet": {
            "name": "test_load_parquet",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "path.Path",
                    "str"
                ],
                "sample_pandas_df": [
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSet.test_save_parquet": {
            "name": "test_save_parquet",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "sample_spark_df": [
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSet.test_load_options_csv": {
            "name": "test_load_options_csv",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ],
                "sample_pandas_df": [
                    "str",
                    "Tuple[str, str]",
                    "bool",
                    "Dict[str, str]",
                    "azure.datalake.store.core.AzureDLFileSystem"
                ]
            }
        },
        "TestSparkDataSet.test_load_options_schema_ddl_string": {
            "name": "test_load_options_schema_ddl_string",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "path.Path",
                    "str",
                    "pathlib.Path"
                ],
                "sample_pandas_df": [
                    "str",
                    "Dict[str, str]",
                    "Tuple[str, str]",
                    "path.Path"
                ],
                "sample_spark_df_schema": [
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSet.test_load_options_schema_obj": {
            "name": "test_load_options_schema_obj",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ],
                "sample_pandas_df": [
                    "str",
                    "Tuple[str, str]",
                    "bool",
                    "Dict[str, str]",
                    "azure.datalake.store.core.AzureDLFileSystem"
                ],
                "sample_spark_df_schema": [
                    "pathlib.Path",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestSparkDataSet.test_load_options_schema_path": {
            "name": "test_load_options_schema_path",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ],
                "sample_pandas_df": [
                    "str",
                    "Tuple[str, str]",
                    "Dict[str, str]",
                    "path.Path",
                    "bool"
                ],
                "sample_spark_df_schema": [
                    "pathlib.Path",
                    "str",
                    "pineboolib.application.types.Dir"
                ]
            }
        },
        "TestSparkDataSet.test_load_options_schema_path_with_credentials": {
            "name": "test_load_options_schema_path_with_credentials",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "path.Path",
                    "str",
                    "pathlib.Path"
                ],
                "sample_pandas_df": [
                    "str",
                    "Tuple[str, str]",
                    "Dict[str, str]",
                    "path.Path",
                    "bool"
                ],
                "sample_spark_df_schema": [
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSet.test_load_options_invalid_schema_file": {
            "name": "test_load_options_invalid_schema_file",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestSparkDataSet.test_load_options_invalid_schema": {
            "name": "test_load_options_invalid_schema",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSet.test_save_options_csv": {
            "name": "test_save_options_csv",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "sample_spark_df": [
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSet.test_str_representation": {
            "name": "test_str_representation",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkDataSet.test_save_overwrite_fail": {
            "name": "test_save_overwrite_fail",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "path.Path",
                    "str",
                    "pathlib.Path"
                ],
                "sample_spark_df": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "TestSparkDataSet.test_save_overwrite_mode": {
            "name": "test_save_overwrite_mode",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "path.Path",
                    "str",
                    "pathlib.Path"
                ],
                "sample_spark_df": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "TestSparkDataSet.test_file_format_delta_and_unsupported_mode": {
            "name": "test_file_format_delta_and_unsupported_mode",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "path.Path",
                    "str",
                    "pathlib.PosixPath",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "mode": [
                    "path.Path",
                    "dict",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSet.test_save_partition": {
            "name": "test_save_partition",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "sample_spark_df": [
                    "pathlib.Path",
                    "path.Path",
                    "pathlib2.Path"
                ]
            }
        },
        "TestSparkDataSet.test_exists": {
            "name": "test_exists",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_format": [
                    "str",
                    "bool",
                    "Union[str, BinaryIO]",
                    "Dict[str, Any]",
                    "list"
                ],
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ],
                "sample_spark_df": [
                    "str",
                    "pyspark.sql.session.SparkSession",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSet.test_exists_raises_error": {
            "name": "test_exists_raises_error",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "core.models.Recipe",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSet.test_parallel_runner": {
            "name": "test_parallel_runner",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bytes",
                    "dict",
                    "float",
                    "Dict[str, Any]"
                ],
                "spark_in": [
                    "bytes",
                    "pathlib.Path",
                    "Dict[str, Sequence[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestSparkDataSet.test_s3_glob_refresh": {
            "name": "test_s3_glob_refresh",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkDataSet.test_copy": {
            "name": "test_copy",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkDataSetVersionedLocal.test_no_version": {
            "name": "test_no_version",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_dataset_local": []
            }
        },
        "TestSparkDataSetVersionedLocal.test_load_latest": {
            "name": "test_load_latest",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_dataset_local": [
                    "pathlib.Path",
                    "str"
                ],
                "sample_spark_df": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestSparkDataSetVersionedLocal.test_load_exact": {
            "name": "test_load_exact",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "pathlib.Path",
                    "bytes",
                    "bool"
                ],
                "sample_spark_df": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestSparkDataSetVersionedLocal.test_save": {
            "name": "test_save",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_dataset_local": [
                    "str",
                    "pathlib.Path",
                    "datasets.linux.linux.LinuxSourcesDataset"
                ],
                "version": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ],
                "tmp_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ],
                "sample_spark_df": [
                    "str",
                    "pathlib.Path",
                    "datasets.linux.linux.LinuxSourcesDataset"
                ]
            }
        },
        "TestSparkDataSetVersionedLocal.test_repr": {
            "name": "test_repr",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_dataset_local": [
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "IO",
                    "List[str]"
                ],
                "tmp_path": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "version": [
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "IO",
                    "List[str]"
                ]
            }
        },
        "TestSparkDataSetVersionedLocal.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "sample_spark_df": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestSparkDataSetVersionedLocal.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "pathlib.Path"
                ],
                "version": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "pathlib.Path"
                ],
                "sample_spark_df": [
                    "str",
                    "Path",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSetVersionedLocal.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_dataset_local": [
                    "str",
                    "pathlib.Path"
                ],
                "sample_spark_df": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestSparkDataSetVersionedDBFS.test_load_latest": {
            "name": "test_load_latest",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "versioned_dataset_dbfs": [
                    "str"
                ],
                "version": [
                    "str",
                    "pathlib.Path"
                ],
                "tmp_path": [
                    "str"
                ],
                "sample_spark_df": [
                    "str",
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSetVersionedDBFS.test_load_exact": {
            "name": "test_load_exact",
            "location": 546,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ],
                "sample_spark_df": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestSparkDataSetVersionedDBFS.test_save": {
            "name": "test_save",
            "location": 557,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "path.Path"
                ],
                "versioned_dataset_dbfs": [
                    "str",
                    "path.Path"
                ],
                "version": [
                    "str"
                ],
                "tmp_path": [],
                "sample_spark_df": [
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSetVersionedDBFS.test_exists": {
            "name": "test_exists",
            "location": 570,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "pathlib.Path"
                ],
                "versioned_dataset_dbfs": [
                    "pathlib.Path",
                    "str"
                ],
                "version": [
                    "pathlib.Path",
                    "str"
                ],
                "tmp_path": [
                    "str"
                ],
                "sample_spark_df": [
                    "datasets.linux.linux.LinuxSourcesDataset",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSetVersionedDBFS.test_dbfs_glob": {
            "name": "test_dbfs_glob",
            "location": 586,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSparkDataSetVersionedDBFS.test_dbfs_exists": {
            "name": "test_dbfs_exists",
            "location": 601,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSparkDataSetVersionedDBFS.test_ds_init_no_dbutils": {
            "name": "test_ds_init_no_dbutils",
            "location": 617,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSparkDataSetVersionedDBFS.test_ds_init_dbutils_available": {
            "name": "test_ds_init_dbutils_available",
            "location": 627,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSparkDataSetVersionedDBFS.test_get_dbutils_from_globals": {
            "name": "test_get_dbutils_from_globals",
            "location": 642,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSparkDataSetVersionedDBFS.test_get_dbutils_from_pyspark": {
            "name": "test_get_dbutils_from_pyspark",
            "location": 649,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "core_lib.core.models.Venue"
                ]
            }
        },
        "TestSparkDataSetVersionedDBFS.test_get_dbutils_from_ipython": {
            "name": "test_get_dbutils_from_ipython",
            "location": 656,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "core_lib.core.models.Venue"
                ]
            }
        },
        "TestSparkDataSetVersionedDBFS.test_get_dbutils_no_modules": {
            "name": "test_get_dbutils_no_modules",
            "location": 665,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSparkDataSetVersionedDBFS.test_regular_path_in_different_os": {
            "name": "test_regular_path_in_different_os",
            "location": 673,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "os_name": [
                    "str",
                    "Optional[str]",
                    "pandas.Series",
                    "Dict[str, str]"
                ],
                "mocker": [
                    "str",
                    "Optional[str]",
                    "pandas.Series",
                    "Dict[str, str]"
                ]
            }
        },
        "TestSparkDataSetVersionedDBFS.test_dbfs_path_in_different_os": {
            "name": "test_dbfs_path_in_different_os",
            "location": 680,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "os_name": [
                    "str",
                    "Optional[str]",
                    "pandas.Series",
                    "Dict[str, str]"
                ],
                "mocker": [
                    "str",
                    "Optional[str]",
                    "pandas.Series",
                    "Dict[str, str]"
                ]
            }
        },
        "TestSparkDataSetVersionedS3.test_no_version": {
            "name": "test_no_version",
            "location": 688,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_dataset_s3": []
            }
        },
        "TestSparkDataSetVersionedS3.test_load_latest": {
            "name": "test_load_latest",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "src.main.core.repositories.window_repository.WindowRepository",
                    "List[src.main.core.models.area.Area]",
                    "Tuple[int, int]",
                    "int"
                ],
                "versioned_dataset_s3": [
                    "src.main.core.repositories.window_repository.WindowRepository",
                    "List[src.main.core.models.area.Area]",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "TestSparkDataSetVersionedS3.test_load_exact": {
            "name": "test_load_exact",
            "location": 713,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSparkDataSetVersionedS3.test_save": {
            "name": "test_save",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_dataset_s3": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "int",
                    "dict",
                    "Optional[Iterable[str]]"
                ],
                "version": [
                    "str"
                ],
                "mocker": [
                    "int",
                    "str"
                ]
            }
        },
        "TestSparkDataSetVersionedS3.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 742,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSetVersionedS3.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 764,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "versioned_dataset_s3": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "TestSparkDataSetVersionedS3.test_s3n_warning": {
            "name": "test_s3n_warning",
            "location": 777,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "dict",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "pandas.DataFrame",
                    "int"
                ]
            }
        },
        "TestSparkDataSetVersionedS3.test_repr": {
            "name": "test_repr",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_dataset_s3": [
                    "str",
                    "bytes",
                    "List[src.autoks.core.gp_model.GPModel]",
                    "int",
                    "pathlib.Path",
                    "Tuple[int, int]"
                ],
                "version": [
                    "str",
                    "pathlib.Path",
                    "Callable",
                    "bytes",
                    "Union[int, str]"
                ]
            }
        },
        "TestSparkDataSetVersionedHdfs.test_no_version": {
            "name": "test_no_version",
            "location": 797,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "version": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TestSparkDataSetVersionedHdfs.test_load_latest": {
            "name": "test_load_latest",
            "location": 811,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "version": [
                    "str",
                    "bytes",
                    "int",
                    "dict"
                ]
            }
        },
        "TestSparkDataSetVersionedHdfs.test_load_exact": {
            "name": "test_load_exact",
            "location": 834,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSparkDataSetVersionedHdfs.test_save": {
            "name": "test_save",
            "location": 848,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "raiden.utils.Locksroot",
                    "raiden.utils.Address",
                    "raiden.utils.MessageID"
                ],
                "version": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "TestSparkDataSetVersionedHdfs.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 876,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSparkDataSetVersionedHdfs.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 898,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "version": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestSparkDataSetVersionedHdfs.test_hdfs_warning": {
            "name": "test_hdfs_warning",
            "location": 921,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestSparkDataSetVersionedHdfs.test_repr": {
            "name": "test_repr",
            "location": 929,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestDataFlowSequentialRunner.test_spark_load_save": {
            "name": "test_spark_load_save",
            "location": 955,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bytes",
                    "dict",
                    "datasets.github.scrape_repos.proto.scrape_repos_pb2.LanguageCloneList"
                ],
                "data_catalog": [
                    "dict",
                    "str"
                ]
            }
        },
        "TestDataFlowSequentialRunner.test_spark_pickle": {
            "name": "test_spark_pickle",
            "location": 964,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bytes",
                    "dict"
                ],
                "data_catalog": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "TestDataFlowSequentialRunner.test_spark_memory_spark": {
            "name": "test_spark_memory_spark",
            "location": 971,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bytes",
                    "dict"
                ],
                "data_catalog": []
            }
        }
    },
    "kedro-main/tests/extras/datasets/spark/test_spark_hive_dataset.py": {
        "spark_session": {
            "name": "spark_session",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "spark_test_databases": {
            "name": "spark_test_databases",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "spark_session": [
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "assert_df_equal": {
            "name": "assert_df_equal",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "int",
                    "str",
                    "Type[\"SerializationDialect\"]",
                    "bool"
                ],
                "result": [
                    "str",
                    "List[Tuple[float, float]]",
                    "Dict[str, List[float]]",
                    "Type[T]",
                    "Dict[str, str]"
                ]
            }
        },
        "_generate_spark_df_one": {
            "name": "_generate_spark_df_one",
            "location": 102,
            "return": [
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "_generate_spark_df_upsert": {
            "name": "_generate_spark_df_upsert",
            "location": 113,
            "return": [
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "_generate_spark_df_upsert_expected": {
            "name": "_generate_spark_df_upsert_expected",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "assert_df_equal.indexRDD": {
            "name": "indexRDD",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "dict",
                    "set",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TestSparkHiveDataSet.test_cant_pickle": {
            "name": "test_cant_pickle",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkHiveDataSet.test_read_existing_table": {
            "name": "test_read_existing_table",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkHiveDataSet.test_overwrite_empty_table": {
            "name": "test_overwrite_empty_table",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spark_session": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestSparkHiveDataSet.test_overwrite_not_empty_table": {
            "name": "test_overwrite_not_empty_table",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spark_session": [
                    "str",
                    "bytes",
                    "IO"
                ]
            }
        },
        "TestSparkHiveDataSet.test_insert_not_empty_table": {
            "name": "test_insert_not_empty_table",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spark_session": [
                    "str",
                    "bytes",
                    "IO"
                ]
            }
        },
        "TestSparkHiveDataSet.test_upsert_config_err": {
            "name": "test_upsert_config_err",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkHiveDataSet.test_upsert_empty_table": {
            "name": "test_upsert_empty_table",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spark_session": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestSparkHiveDataSet.test_upsert_not_empty_table": {
            "name": "test_upsert_not_empty_table",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spark_session": [
                    "str",
                    "bytes",
                    "IO"
                ]
            }
        },
        "TestSparkHiveDataSet.test_invalid_pk_provided": {
            "name": "test_invalid_pk_provided",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkHiveDataSet.test_invalid_write_mode_provided": {
            "name": "test_invalid_write_mode_provided",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkHiveDataSet.test_invalid_schema_insert": {
            "name": "test_invalid_schema_insert",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spark_session": [
                    "str"
                ]
            }
        },
        "TestSparkHiveDataSet.test_insert_to_non_existent_table": {
            "name": "test_insert_to_non_existent_table",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparkHiveDataSet.test_read_from_non_existent_table": {
            "name": "test_read_from_non_existent_table",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/extras/datasets/spark/test_spark_jdbc_dataset.py": {
        "spark_jdbc_args": {
            "name": "spark_jdbc_args",
            "location": 10,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "Sequence[str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "spark_jdbc_args_credentials": {
            "name": "spark_jdbc_args_credentials",
            "location": 15,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "Iterable[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "spark_jdbc_args": [
                    "Callable",
                    "str",
                    "Callable[..., T]",
                    "Set[str]"
                ]
            }
        },
        "spark_jdbc_args_credentials_with_none_password": {
            "name": "spark_jdbc_args_credentials_with_none_password",
            "location": 22,
            "return": [
                "List[str]",
                "bool",
                "Tuple[Any, Any, Any]",
                "str",
                "set",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "spark_jdbc_args": [
                    "str",
                    "list",
                    "Dict[str, Any]",
                    "tuple",
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "spark_jdbc_args_save_load": {
            "name": "spark_jdbc_args_save_load",
            "location": 29,
            "return": [
                "Optional[Iterable[str]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "spark_jdbc_args": [
                    "Callable",
                    "str",
                    "Callable[..., T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_missing_url": {
            "name": "test_missing_url",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_table": {
            "name": "test_missing_table",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_save": {
            "name": "mock_save",
            "location": 56,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {
                "arg_dict": [
                    "dict",
                    "List[List[str]]",
                    "Dict[Any, dict]"
                ]
            }
        },
        "test_save": {
            "name": "test_save",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "spark_jdbc_args": [
                    "str"
                ]
            }
        },
        "test_save_credentials": {
            "name": "test_save_credentials",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "spark_jdbc_args_credentials": [
                    "Optional[Exception]"
                ]
            }
        },
        "test_save_args": {
            "name": "test_save_args",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "spark_jdbc_args_save_load": [
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "test_except_bad_credentials": {
            "name": "test_except_bad_credentials",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "spark_jdbc_args_credentials_with_none_password": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "mock_load": {
            "name": "mock_load",
            "location": 93,
            "return": [
                "Callable[[bytes], None]",
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "mock_get_or_create": [
                    "bool",
                    "int",
                    "str"
                ],
                "arg_dict": [
                    "Sequence[str]",
                    "Mapping[str, Any]",
                    "bool",
                    "list",
                    "dict",
                    "str"
                ]
            }
        },
        "test_load": {
            "name": "test_load",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "spark_jdbc_args": []
            }
        },
        "test_load_credentials": {
            "name": "test_load_credentials",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "spark_jdbc_args_credentials": []
            }
        },
        "test_load_args": {
            "name": "test_load_args",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "spark_jdbc_args_save_load": []
            }
        }
    },
    "kedro-main/tests/extras/datasets/spark/__init__.py": {},
    "kedro-main/tests/extras/datasets/tensorflow/test_tensorflow_model_dataset.py": {
        "tf": {
            "name": "tf",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "tensorflow_model_dataset": {
            "name": "tensorflow_model_dataset",
            "location": 37,
            "return": [
                "numpy.ndarray",
                "str",
                "int",
                "Callable",
                "float"
            ],
            "arguments": {}
        },
        "filepath": {
            "name": "filepath",
            "location": 44,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "dummy_x_train": {
            "name": "dummy_x_train",
            "location": 49,
            "return": [
                "numpy.ndarray",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "dummy_y_train": {
            "name": "dummy_y_train",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "dummy_x_test": {
            "name": "dummy_x_test",
            "location": 59,
            "return": [
                "str",
                "Type",
                "tensorflow.train.Checkpoint",
                "tensorflow.Variable",
                "Callable"
            ],
            "arguments": {}
        },
        "tf_model_dataset": {
            "name": "tf_model_dataset",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "filepath": [
                    "Optional[Dict[str, str]]",
                    "str",
                    "Dict[str, str]"
                ],
                "load_args": [
                    "Optional[Dict[str, str]]",
                    "str",
                    "Dict[str, str]"
                ],
                "save_args": [
                    "Optional[Dict[str, str]]",
                    "str",
                    "Dict[str, str]"
                ],
                "fs_args": [
                    "Optional[Dict[str, str]]",
                    "str",
                    "Dict[str, str]"
                ],
                "tensorflow_model_dataset": [
                    "Optional[Dict[str, str]]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "versioned_tf_model_dataset": {
            "name": "versioned_tf_model_dataset",
            "location": 71,
            "return": [
                "int",
                "str",
                "bool",
                "purplship.core.models.ShipmentRequest"
            ],
            "arguments": {
                "filepath": [
                    "bool",
                    "int",
                    "float"
                ],
                "load_version": [
                    "bool",
                    "int",
                    "float"
                ],
                "save_version": [
                    "bool",
                    "int",
                    "float"
                ],
                "tensorflow_model_dataset": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "dummy_tf_base_model": {
            "name": "dummy_tf_base_model",
            "location": 80,
            "return": [
                "Type[abilian.core.models.Model]"
            ],
            "arguments": {
                "dummy_x_train": [
                    "float",
                    "int"
                ],
                "dummy_y_train": [
                    "float",
                    "int"
                ],
                "tf": [
                    "float",
                    "boyleworkflow.core.Comp",
                    "List[float]"
                ]
            }
        },
        "dummy_tf_subclassed_model": {
            "name": "dummy_tf_subclassed_model",
            "location": 98,
            "return": [
                "List[src.autoks.core.gp_model.GPModel]"
            ],
            "arguments": {
                "dummy_x_train": [
                    "float"
                ],
                "dummy_y_train": [
                    "float"
                ],
                "tf": [
                    "List[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestTensorFlowModelDataset.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tf_model_dataset": [
                    "float",
                    "str",
                    "Mapping[str, int]"
                ],
                "dummy_tf_base_model": [
                    "int",
                    "str"
                ],
                "dummy_x_test": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestTensorFlowModelDataset.test_load_missing_model": {
            "name": "test_load_missing_model",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tf_model_dataset": []
            }
        },
        "TestTensorFlowModelDataset.test_exists": {
            "name": "test_exists",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tf_model_dataset": [
                    "str"
                ],
                "dummy_tf_base_model": [
                    "static_frame.core.util.DepthLevelSpecifier"
                ]
            }
        },
        "TestTensorFlowModelDataset.test_hdf5_save_format": {
            "name": "test_hdf5_save_format",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_tf_base_model": [
                    "int",
                    "numpy.dtype"
                ],
                "dummy_x_test": [
                    "bool"
                ],
                "filepath": [
                    "str"
                ],
                "tensorflow_model_dataset": [
                    "str"
                ]
            }
        },
        "TestTensorFlowModelDataset.test_unused_subclass_model_hdf5_save_format": {
            "name": "test_unused_subclass_model_hdf5_save_format",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_tf_subclassed_model": [
                    "bool",
                    "numpy.ndarray",
                    "List[numpy.ndarray]"
                ],
                "dummy_x_train": [
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "dummy_y_train": [
                    "float",
                    "numpy.ndarray",
                    "bool"
                ],
                "dummy_x_test": [],
                "filepath": [
                    "str"
                ],
                "tensorflow_model_dataset": [
                    "str"
                ]
            }
        },
        "TestTensorFlowModelDataset.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "instance_type": [
                    "waterbutler.core.path.WaterButlerPath",
                    "waterbutler.core.provider.BaseProvider"
                ],
                "tensorflow_model_dataset": [
                    "Dict[str, Sequence[str]]",
                    "List[str]",
                    "str",
                    "List[Dict]",
                    "pathlib.Path"
                ]
            }
        },
        "TestTensorFlowModelDataset.test_load_extra_params": {
            "name": "test_load_extra_params",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tf_model_dataset": [
                    "core.models.Recipe",
                    "bool",
                    "str"
                ],
                "load_args": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestTensorFlowModelDataset.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "tensorflow_model_dataset": [
                    "str"
                ]
            }
        },
        "TestTensorFlowModelDataset.test_fs_args": {
            "name": "test_fs_args",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fs_args": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "Callable"
                ],
                "mocker": [
                    "int",
                    "str"
                ],
                "tensorflow_model_dataset": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestTensorFlowModelDataset.test_exists_with_exception": {
            "name": "test_exists_with_exception",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tf_model_dataset": [],
                "mocker": []
            }
        },
        "TestTensorFlowModelDatasetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_tf_base_model": [
                    "str",
                    "Callable"
                ],
                "versioned_tf_model_dataset": [
                    "float",
                    "bool",
                    "core.models.MyUser"
                ],
                "dummy_x_test": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "List[str]"
                ],
                "load_version": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "save_version": [
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestTensorFlowModelDatasetVersioned.test_hdf5_save_format": {
            "name": "test_hdf5_save_format",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_tf_base_model": [
                    "int",
                    "numpy.dtype"
                ],
                "dummy_x_test": [
                    "bool"
                ],
                "filepath": [
                    "Iterable[Tuple[int, int]]"
                ],
                "tensorflow_model_dataset": [
                    "Iterable[Tuple[int, int]]"
                ],
                "load_version": [
                    "Iterable[Tuple[int, int]]"
                ],
                "save_version": [
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "TestTensorFlowModelDatasetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_tf_base_model": [
                    "core.models.Grouping"
                ],
                "versioned_tf_model_dataset": [
                    "core.models.Grouping"
                ]
            }
        },
        "TestTensorFlowModelDatasetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_tf_model_dataset": [
                    "static_frame.core.util.DepthLevelSpecifier",
                    "str",
                    "Mapping[str, Any]",
                    "supersemodels.core.Database",
                    "float"
                ],
                "load_version": [
                    "str",
                    "int",
                    "List[numpy.array]"
                ],
                "save_version": [
                    "str",
                    "int",
                    "List[numpy.array]"
                ],
                "dummy_tf_base_model": [
                    "static_frame.core.util.DepthLevelSpecifier",
                    "str",
                    "Mapping[str, Any]",
                    "supersemodels.core.Database",
                    "float"
                ]
            }
        },
        "TestTensorFlowModelDatasetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tensorflow_model_dataset": [
                    "core.models.Recipe",
                    "Optional[Iterable[Any]]",
                    "int"
                ]
            }
        },
        "TestTensorFlowModelDatasetVersioned.test_exists": {
            "name": "test_exists",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_tf_model_dataset": [
                    "str"
                ],
                "dummy_tf_base_model": [
                    "Mapping[str, Any]",
                    "static_frame.core.util.DepthLevelSpecifier"
                ]
            }
        },
        "TestTensorFlowModelDatasetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_tf_model_dataset": []
            }
        },
        "TestTensorFlowModelDatasetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tf_model_dataset": [
                    "bool",
                    "pathlib.Path",
                    "set",
                    "str"
                ],
                "versioned_tf_model_dataset": [
                    "str"
                ]
            }
        },
        "TestTensorFlowModelDatasetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tf_model_dataset": [
                    "static_frame.core.util.DepthLevelSpecifier",
                    "List[src.autoks.core.gp_model.GPModel]"
                ],
                "versioned_tf_model_dataset": [
                    "numpy.dtype",
                    "bool"
                ],
                "dummy_tf_base_model": [
                    "bool",
                    "int",
                    "static_frame.core.util.DepthLevelSpecifier"
                ]
            }
        },
        "dummy_tf_subclassed_model.MyModel.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "dummy_tf_subclassed_model.MyModel.call": {
            "name": "call",
            "location": 110,
            "return": [
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "pathlib.Path",
                    "int",
                    "float"
                ],
                "training": [
                    "asyncworker.http.wrapper.RequestWrapper",
                    "dict"
                ],
                "mask": [
                    "asyncworker.http.wrapper.RequestWrapper",
                    "dict"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/tensorflow/__init__.py": {},
    "kedro-main/tests/extras/datasets/text/test_text_dataset.py": {
        "filepath_txt": {
            "name": "filepath_txt",
            "location": 17,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "txt_data_set": {
            "name": "txt_data_set",
            "location": 22,
            "return": [
                "dict",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "filepath_txt": [
                    "str",
                    "type"
                ],
                "fs_args": [
                    "str",
                    "type"
                ]
            }
        },
        "versioned_txt_data_set": {
            "name": "versioned_txt_data_set",
            "location": 27,
            "return": [
                "str",
                "Callable",
                "Dict[str, Iterable[Any]]"
            ],
            "arguments": {
                "filepath_txt": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "TestTextDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txt_data_set": [
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "TestTextDataSet.test_exists": {
            "name": "test_exists",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txt_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "TestTextDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txt_data_set": [
                    "dict",
                    "Callable[[Any, Any], Any]"
                ],
                "fs_args": [
                    "Callable[[Any, Any], Any]",
                    "Dict[Any, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestTextDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txt_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestTextDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "pathlib.Path"
                ],
                "instance_type": []
            }
        },
        "TestTextDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestTextDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "bool",
                    "Optional[str]",
                    "Callable"
                ],
                "save_version": [
                    "bool",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "TestTextDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_txt_data_set": [
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestTextDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_txt_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestTextDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_txt_data_set": [
                    "Set[str]",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestTextDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_txt_data_set": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestTextDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_txt_data_set": [
                    "str",
                    "dict",
                    "bytes",
                    "List[List[int]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Dict[str, str]"
                ],
                "load_version": [
                    "int",
                    "str",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "TestTextDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txt_data_set": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[Any, pathlib.Path]"
                ],
                "versioned_txt_data_set": [
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/text/__init__.py": {},
    "kedro-main/tests/extras/datasets/tracking/test_json_dataset.py": {
        "filepath_json": {
            "name": "filepath_json",
            "location": 15,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "json_dataset": {
            "name": "json_dataset",
            "location": 20,
            "return": [
                "str",
                "bool",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath_json": [
                    "List[str]",
                    "Iterable[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "save_args": [
                    "List[str]",
                    "Iterable[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "fs_args": [
                    "List[str]",
                    "Iterable[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "explicit_versioned_json_dataset": {
            "name": "explicit_versioned_json_dataset",
            "location": 25,
            "return": [
                "str",
                "bool",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath_json": [
                    "Dict[str, List[Any]]",
                    "Dict[str, dict]",
                    "int",
                    "Dict[str, List[str]]",
                    "dict",
                    "Callable[[str], bool]"
                ],
                "load_version": [
                    "Dict[str, List[Any]]",
                    "Dict[str, dict]",
                    "int",
                    "Dict[str, List[str]]",
                    "dict",
                    "Callable[[str], bool]"
                ],
                "save_version": [
                    "Dict[str, List[Any]]",
                    "Dict[str, dict]",
                    "int",
                    "Dict[str, List[str]]",
                    "dict",
                    "Callable[[str], bool]"
                ]
            }
        },
        "dummy_data": {
            "name": "dummy_data",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Union[int, bool]]",
                "List[List[int]]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "TestJSONDataSet.test_save": {
            "name": "test_save",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath_json": [
                    "Optional[str]",
                    "dict",
                    "Exception",
                    "str",
                    "List[str]",
                    "Optional[int]"
                ],
                "dummy_data": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Optional[str]"
                ],
                "save_version": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Optional[int]"
                ]
            }
        },
        "TestJSONDataSet.test_load_fail": {
            "name": "test_load_fail",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_dataset": [
                    "Callable",
                    "List[Dict[str, Any]]"
                ],
                "dummy_data": [
                    "Dict[str, Optional[str]]",
                    "Optional[str]",
                    "str",
                    "Dict[str, Union[int, str]]"
                ]
            }
        },
        "TestJSONDataSet.test_exists": {
            "name": "test_exists",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_dataset": [
                    "pypi2nix.path.Path"
                ],
                "dummy_data": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "TestJSONDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_dataset": [
                    "str"
                ],
                "save_args": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestJSONDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_dataset": [],
                "fs_args": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestJSONDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "instance_type": []
            }
        },
        "TestJSONDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestJSONDataSet.test_not_version_str_repr": {
            "name": "test_not_version_str_repr",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONDataSet.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestJSONDataSet.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "explicit_versioned_json_dataset": [],
                "dummy_data": []
            }
        },
        "TestJSONDataSet.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "explicit_versioned_json_dataset": [
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]",
                    "str",
                    "IO[bytes]"
                ],
                "load_version": [
                    "list",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ],
                "save_version": [
                    "list",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ],
                "dummy_data": [
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]",
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "TestJSONDataSet.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/extras/datasets/tracking/test_metrics_dataset.py": {
        "filepath_json": {
            "name": "filepath_json",
            "location": 15,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "metrics_dataset": {
            "name": "metrics_dataset",
            "location": 20,
            "return": [
                "str",
                "bool",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath_json": [
                    "List[str]",
                    "Iterable[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "save_args": [
                    "List[str]",
                    "Iterable[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "fs_args": [
                    "List[str]",
                    "Iterable[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "explicit_versioned_metrics_dataset": {
            "name": "explicit_versioned_metrics_dataset",
            "location": 25,
            "return": [
                "str",
                "bool",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath_json": [
                    "Dict[str, List[Any]]",
                    "Dict[str, dict]",
                    "int",
                    "Dict[str, List[str]]",
                    "dict",
                    "Callable[[str], bool]"
                ],
                "load_version": [
                    "Dict[str, List[Any]]",
                    "Dict[str, dict]",
                    "int",
                    "Dict[str, List[str]]",
                    "dict",
                    "Callable[[str], bool]"
                ],
                "save_version": [
                    "Dict[str, List[Any]]",
                    "Dict[str, dict]",
                    "int",
                    "Dict[str, List[str]]",
                    "dict",
                    "Callable[[str], bool]"
                ]
            }
        },
        "dummy_data": {
            "name": "dummy_data",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Union[int, bool]]",
                "List[List[int]]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "TestMetricsDataSet.test_save_data": {
            "name": "test_save_data",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_data": [
                    "Dict[str, Any]",
                    "str"
                ],
                "tmp_path": [
                    "pathlib.Path",
                    "Callable",
                    "path.Path"
                ],
                "filepath_json": [
                    "bytes",
                    "Dict[str, Any]",
                    "core.models.Grouping"
                ],
                "save_version": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestMetricsDataSet.test_load_fail": {
            "name": "test_load_fail",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metrics_dataset": [
                    "Callable",
                    "List[Dict[str, Any]]"
                ],
                "dummy_data": [
                    "Dict[str, Optional[str]]",
                    "Optional[str]",
                    "str",
                    "Dict[str, Union[int, str]]"
                ]
            }
        },
        "TestMetricsDataSet.test_exists": {
            "name": "test_exists",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metrics_dataset": [
                    "pypi2nix.path.Path"
                ],
                "dummy_data": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "TestMetricsDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metrics_dataset": [
                    "str"
                ],
                "save_args": [
                    "Callable",
                    "str"
                ]
            }
        },
        "TestMetricsDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metrics_dataset": [],
                "fs_args": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestMetricsDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "instance_type": []
            }
        },
        "TestMetricsDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestMetricsDataSet.test_fail_on_saving_non_numeric_value": {
            "name": "test_fail_on_saving_non_numeric_value",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metrics_dataset": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestMetricsDataSet.test_not_version_str_repr": {
            "name": "test_not_version_str_repr",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetricsDataSet.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestMetricsDataSet.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "explicit_versioned_metrics_dataset": [],
                "dummy_data": []
            }
        },
        "TestMetricsDataSet.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "explicit_versioned_metrics_dataset": [
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]",
                    "str",
                    "IO[bytes]"
                ],
                "load_version": [
                    "list",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ],
                "save_version": [
                    "list",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ],
                "dummy_data": [
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]",
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "TestMetricsDataSet.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/extras/datasets/tracking/__init__.py": {},
    "kedro-main/tests/extras/datasets/yaml/test_yaml_dataset.py": {
        "filepath_yaml": {
            "name": "filepath_yaml",
            "location": 17,
            "return": [
                "str",
                "bytes",
                "list",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, PurePosixPath]",
                    "pathlib.Path"
                ]
            }
        },
        "yaml_data_set": {
            "name": "yaml_data_set",
            "location": 22,
            "return": [
                "bool",
                "dict",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "filepath_yaml": [
                    "bool",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "Dict[Any, int]",
                    "Callable"
                ],
                "save_args": [
                    "bool",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "Dict[Any, int]",
                    "Callable"
                ],
                "fs_args": [
                    "bool",
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "Dict[Any, int]",
                    "Callable"
                ]
            }
        },
        "versioned_yaml_data_set": {
            "name": "versioned_yaml_data_set",
            "location": 27,
            "return": [
                "bool",
                "int",
                "django.http.HttpRequest",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "filepath_yaml": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "load_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ],
                "save_version": [
                    "int",
                    "Dict[str, dict]",
                    "Dict[str, bool]",
                    "dict",
                    "Tuple[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "dummy_data": {
            "name": "dummy_data",
            "location": 34,
            "return": [
                "str",
                "Dict[str, Union[int, bool]]",
                "List[List[int]]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "TestYAMLDataSet.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "yaml_data_set": [
                    "str",
                    "dict",
                    "Dict[Any, pathlib.Path]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "dummy_data": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestYAMLDataSet.test_exists": {
            "name": "test_exists",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "yaml_data_set": [
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "dummy_data": [
                    "Dict[str, List[Any]]",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "TestYAMLDataSet.test_save_extra_params": {
            "name": "test_save_extra_params",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "yaml_data_set": [
                    "bytes",
                    "str",
                    "core_lib.core.models.Event"
                ],
                "save_args": [
                    "Callable"
                ]
            }
        },
        "TestYAMLDataSet.test_open_extra_args": {
            "name": "test_open_extra_args",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "yaml_data_set": [
                    "dict",
                    "Callable[[Any, Any], Any]"
                ],
                "fs_args": [
                    "Callable[[Any, Any], Any]",
                    "Dict[Any, int]",
                    "datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset"
                ]
            }
        },
        "TestYAMLDataSet.test_load_missing_file": {
            "name": "test_load_missing_file",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "yaml_data_set": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Dict]"
                ]
            }
        },
        "TestYAMLDataSet.test_protocol_usage": {
            "name": "test_protocol_usage",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "instance_type": []
            }
        },
        "TestYAMLDataSet.test_catalog_release": {
            "name": "test_catalog_release",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestYAMLDataSet.test_dataframe_support": {
            "name": "test_dataframe_support",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "yaml_data_set": [
                    "mirakuru.http.HTTPConnection",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[Any, pathlib.Path]"
                ]
            }
        },
        "TestYAMLDataSetVersioned.test_version_str_repr": {
            "name": "test_version_str_repr",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "load_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "save_version": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestYAMLDataSetVersioned.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_yaml_data_set": [],
                "dummy_data": []
            }
        },
        "TestYAMLDataSetVersioned.test_no_versions": {
            "name": "test_no_versions",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_yaml_data_set": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestYAMLDataSetVersioned.test_exists": {
            "name": "test_exists",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_yaml_data_set": [
                    "Set[str]",
                    "int",
                    "str",
                    "Dict[str, Optional[str]]",
                    "bytes"
                ],
                "dummy_data": [
                    "Dict[str, Union[int, str]]",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "TestYAMLDataSetVersioned.test_prevent_overwrite": {
            "name": "test_prevent_overwrite",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_yaml_data_set": [],
                "dummy_data": []
            }
        },
        "TestYAMLDataSetVersioned.test_save_version_warning": {
            "name": "test_save_version_warning",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "versioned_yaml_data_set": [
                    "Optional[bytes]",
                    "starfish.core.imagestack.parser.TileData",
                    "Dict[str, Union[int, str]]",
                    "int"
                ],
                "load_version": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bytes"
                ],
                "save_version": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bytes"
                ],
                "dummy_data": [
                    "Optional[bytes]",
                    "starfish.core.imagestack.parser.TileData",
                    "Dict[str, Union[int, str]]",
                    "int"
                ]
            }
        },
        "TestYAMLDataSetVersioned.test_http_filesystem_no_versioning": {
            "name": "test_http_filesystem_no_versioning",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestYAMLDataSetVersioned.test_versioning_existing_dataset": {
            "name": "test_versioning_existing_dataset",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "yaml_data_set": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "versioned_yaml_data_set": [
                    "str",
                    "dict",
                    "Dict[Any, pathlib.Path]",
                    "Dict[str, Any]",
                    "core.models.Subtask"
                ],
                "dummy_data": [
                    "str",
                    "Dict[str, Union[int, str]]",
                    "dict",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "kedro-main/tests/extras/datasets/yaml/__init__.py": {},
    "kedro-main/tests/extras/extensions/test_ipython.py": {
        "project_path": {
            "name": "project_path",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "cleanup_session": {
            "name": "cleanup_session",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pipeline_cleanup": {
            "name": "pipeline_cleanup",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestLoadKedroObjects.test_load_kedro_objects": {
            "name": "test_load_kedro_objects",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [],
                "mocker": [],
                "caplog": [
                    "bytes"
                ]
            }
        },
        "TestLoadKedroObjects.test_load_kedro_objects_extra_args": {
            "name": "test_load_kedro_objects_extra_args",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestLoadKedroObjects.test_load_kedro_objects_not_in_kedro_project": {
            "name": "test_load_kedro_objects_not_in_kedro_project",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestLoadKedroObjects.test_load_kedro_objects_no_path": {
            "name": "test_load_kedro_objects_no_path",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [],
                "caplog": [
                    "bytes"
                ],
                "mocker": []
            }
        },
        "TestLoadIPythonExtension.test_load_extension_not_in_kedro_env_or_project": {
            "name": "test_load_extension_not_in_kedro_env_or_project",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "expected_log_message": [
                    "str",
                    "List[str]"
                ],
                "level": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "bool",
                    "int",
                    "set",
                    "Optional[int]",
                    "List[str]"
                ],
                "caplog": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLoadKedroObjects.test_load_kedro_objects.my_register_pipeline": {
            "name": "my_register_pipeline",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "TestLoadKedroObjects.test_load_kedro_objects_no_path.my_register_pipeline": {
            "name": "my_register_pipeline",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "kedro-main/tests/extras/extensions/__init__.py": {},
    "kedro-main/tests/extras/logging/test_color_logger.py": {
        "test_color_logger": {
            "name": "test_color_logger",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "kedro-main/tests/extras/logging/__init__.py": {},
    "kedro-main/tests/framework/test_startup.py": {
        "TestIsProject.test_no_metadata_file": {
            "name": "test_no_metadata_file",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestIsProject.test_toml_invalid_format": {
            "name": "test_toml_invalid_format",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "TestIsProject.test_non_kedro_project": {
            "name": "test_non_kedro_project",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pathlib.Path"
                ]
            }
        },
        "TestIsProject.test_valid_toml_file": {
            "name": "test_valid_toml_file",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pathlib.Path"
                ]
            }
        },
        "TestIsProject.test_toml_bad_encoding": {
            "name": "test_toml_bad_encoding",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pathlib.Path"
                ]
            }
        },
        "TestGetProjectMetadata.test_no_config_files": {
            "name": "test_no_config_files",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "path.Path",
                    "str",
                    "int"
                ]
            }
        },
        "TestGetProjectMetadata.test_toml_invalid_format": {
            "name": "test_toml_invalid_format",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "pathlib.PosixPath"
                ]
            }
        },
        "TestGetProjectMetadata.test_valid_toml_file": {
            "name": "test_valid_toml_file",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pathlib.Path"
                ]
            }
        },
        "TestGetProjectMetadata.test_toml_file_with_extra_keys": {
            "name": "test_toml_file_with_extra_keys",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "TestGetProjectMetadata.test_toml_file_has_missing_mandatory_keys": {
            "name": "test_toml_file_has_missing_mandatory_keys",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "TestGetProjectMetadata.test_toml_file_without_kedro_section": {
            "name": "test_toml_file_without_kedro_section",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestGetProjectMetadata.test_source_dir_specified_in_toml": {
            "name": "test_source_dir_specified_in_toml",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestGetProjectMetadata.test_invalid_version": {
            "name": "test_invalid_version",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "invalid_version": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "mocker": [
                    "int",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestValidateSourcePath.test_valid_source_path": {
            "name": "test_valid_source_path",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "bool",
                    "str"
                ],
                "source_dir": [
                    "pathlib.Path",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TestValidateSourcePath.test_invalid_source_path": {
            "name": "test_invalid_source_path",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "cerulean.Path",
                    "Optional[str]"
                ],
                "source_dir": [
                    "pathlib.Path",
                    "bool",
                    "Optional[str]",
                    "str",
                    "pathlib.PurePath"
                ]
            }
        },
        "TestValidateSourcePath.test_non_existent_source_path": {
            "name": "test_non_existent_source_path",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "TestBootstrapProject.test_bootstrap_project": {
            "name": "test_bootstrap_project",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "pypi2nix.path.Path"
                ],
                "tmp_path": [
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        }
    },
    "kedro-main/tests/framework/__init__.py": {},
    "kedro-main/tests/framework/cli/conftest.py": {
        "entry_points": {
            "name": "entry_points",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "entry_point": {
            "name": "entry_point",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "entry_points": [
                    "int",
                    "Iterable[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "fake_root_dir": {
            "name": "fake_root_dir",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fake_package_path": {
            "name": "fake_package_path",
            "location": 57,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "fake_root_dir": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "fake_repo_path": {
            "name": "fake_repo_path",
            "location": 62,
            "return": [
                "str",
                "pathlib.Path",
                "paradigm.catalog.Path",
                "Iterable[str]"
            ],
            "arguments": {
                "fake_root_dir": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "dict"
                ]
            }
        },
        "dummy_config": {
            "name": "dummy_config",
            "location": 67,
            "return": [
                "pathlib.Path",
                "str",
                "Union[pathlib.Path, str]"
            ],
            "arguments": {
                "fake_root_dir": [
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "fake_metadata": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "fake_metadata": {
            "name": "fake_metadata",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fake_root_dir": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "fake_kedro_cli": {
            "name": "fake_kedro_cli",
            "location": 98,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "fake_project_cli": {
            "name": "fake_project_cli",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "str"
                ],
                "dummy_config": [
                    "str",
                    "pathlib.Path"
                ],
                "fake_kedro_cli": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "chdir_to_dummy_project": {
            "name": "chdir_to_dummy_project",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "str",
                    "bytes",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ],
                "monkeypatch": [
                    "str",
                    "bytes",
                    "Optional[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/test_catalog.py": {
        "fake_load_context": {
            "name": "fake_load_context",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ]
            }
        },
        "mock_pipelines": {
            "name": "mock_pipelines",
            "location": 24,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 150,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "TestCatalogListCommand.test_list_all_pipelines": {
            "name": "test_list_all_pipelines",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "mocker": []
            }
        },
        "TestCatalogListCommand.test_list_specific_pipelines": {
            "name": "test_list_specific_pipelines",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "List[str]"
                ],
                "mocker": []
            }
        },
        "TestCatalogListCommand.test_not_found_pipeline": {
            "name": "test_not_found_pipeline",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestCatalogListCommand.test_no_param_datasets_in_respose": {
            "name": "test_no_param_datasets_in_respose",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_load_context": [],
                "mocker": [],
                "mock_pipelines": [
                    "Callable"
                ]
            }
        },
        "TestCatalogListCommand.test_default_dataset": {
            "name": "test_default_dataset",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_load_context": [],
                "mocker": [],
                "mock_pipelines": [
                    "Callable"
                ]
            }
        },
        "TestCatalogCreateCommand.catalog_path": {
            "name": "catalog_path",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[Any]"
                ],
                "fake_repo_path": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "TestCatalogCreateCommand.test_pipeline_argument_is_required": {
            "name": "test_pipeline_argument_is_required",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestCatalogCreateCommand.test_not_found_pipeline": {
            "name": "test_not_found_pipeline",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "mock_pipelines": [
                    "str"
                ]
            }
        },
        "TestCatalogCreateCommand.test_catalog_is_created_in_base_by_default": {
            "name": "test_catalog_is_created_in_base_by_default",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "Callable",
                    "dict",
                    "str"
                ],
                "fake_metadata": [
                    "Callable",
                    "dict",
                    "str"
                ],
                "fake_repo_path": [
                    "Optional[List[str]]",
                    "str"
                ],
                "catalog_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestCatalogCreateCommand.test_catalog_is_created_in_correct_env": {
            "name": "test_catalog_is_created_in_correct_env",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "Callable",
                    "str",
                    "dcos_e2e.node.Node"
                ],
                "fake_metadata": [
                    "Callable",
                    "str",
                    "dcos_e2e.node.Node"
                ],
                "catalog_path": [
                    "dcos_e2e.node.Node",
                    "str"
                ]
            }
        },
        "TestCatalogCreateCommand.test_no_missing_datasets": {
            "name": "test_no_missing_datasets",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "bool"
                ],
                "fake_metadata": [
                    "bool"
                ],
                "fake_load_context": [],
                "fake_repo_path": [
                    "Callable",
                    "str"
                ],
                "mock_pipelines": [
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "TestCatalogCreateCommand.test_missing_datasets_appended": {
            "name": "test_missing_datasets_appended",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "Callable",
                    "str",
                    "dcos_e2e.node.Node"
                ],
                "fake_metadata": [
                    "Callable",
                    "str",
                    "dcos_e2e.node.Node"
                ],
                "catalog_path": [
                    "dcos_e2e.node.Node",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestCatalogCreateCommand.test_bad_env": {
            "name": "test_bad_env",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/test_cli.py": {
        "stub_cli": {
            "name": "stub_cli",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "stub_command": {
            "name": "stub_command",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "forwarded_command": {
            "name": "forwarded_command",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "forwarded_help": {
            "name": "forwarded_help",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "unnamed": {
            "name": "unnamed",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "requirements_file": {
            "name": "requirements_file",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "fake_session": {
            "name": "fake_session",
            "location": 68,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Dict[str, Sequence[Any]]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "TestCliCommands.test_cli": {
            "name": "test_cli",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCliCommands.test_print_version": {
            "name": "test_print_version",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCliCommands.test_info_contains_plugin_versions": {
            "name": "test_info_contains_plugin_versions",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entry_point": [
                    "int",
                    "str"
                ]
            }
        },
        "TestCliCommands.test_info_no_plugins": {
            "name": "test_info_no_plugins",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCliCommands.test_help": {
            "name": "test_help",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCliCommands.test_docs": {
            "name": "test_docs",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "patched_browser": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestCommandCollection.test_found": {
            "name": "test_found",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandCollection.test_found_reverse": {
            "name": "test_found_reverse",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandCollection.test_not_found": {
            "name": "test_not_found",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandCollection.test_not_found_closest_match": {
            "name": "test_not_found_closest_match",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestCommandCollection.test_not_found_closet_match_singular": {
            "name": "test_not_found_closet_match_singular",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestCommandCollection.test_help": {
            "name": "test_help",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForwardCommand.test_regular": {
            "name": "test_regular",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForwardCommand.test_unnamed": {
            "name": "test_unnamed",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForwardCommand.test_help": {
            "name": "test_help",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForwardCommand.test_forwarded_help": {
            "name": "test_forwarded_help",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCliUtils.test_get_pkg_version": {
            "name": "test_get_pkg_version",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requirements_file": [
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "TestCliUtils.test_clean_pycache": {
            "name": "test_clean_pycache",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "mocker": [
                    "pathlib.Path",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestCliUtils.test_update_value_nested_dict": {
            "name": "test_update_value_nested_dict",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEntryPoints.test_project_groups": {
            "name": "test_project_groups",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entry_points": [],
                "entry_point": []
            }
        },
        "TestEntryPoints.test_project_error_is_caught": {
            "name": "test_project_error_is_caught",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entry_points": [],
                "entry_point": [
                    "Dict[str, Any]"
                ],
                "caplog": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestEntryPoints.test_global_groups": {
            "name": "test_global_groups",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entry_points": [],
                "entry_point": [
                    "str"
                ]
            }
        },
        "TestEntryPoints.test_global_error_is_caught": {
            "name": "test_global_error_is_caught",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entry_points": [],
                "entry_point": [
                    "Dict[str, Any]"
                ],
                "caplog": []
            }
        },
        "TestEntryPoints.test_init": {
            "name": "test_init",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entry_points": [],
                "entry_point": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestEntryPoints.test_init_error_is_caught": {
            "name": "test_init_error_is_caught",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entry_points": [],
                "entry_point": []
            }
        },
        "TestKedroCLI.test_project_commands_no_clipy": {
            "name": "test_project_commands_no_clipy",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "fake_metadata": []
            }
        },
        "TestKedroCLI.test_project_commands_no_project": {
            "name": "test_project_commands_no_project",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "mock.Mock"
                ],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "TestKedroCLI.test_project_commands_invalid_clipy": {
            "name": "test_project_commands_invalid_clipy",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "fake_metadata": []
            }
        },
        "TestKedroCLI.test_project_commands_valid_clipy": {
            "name": "test_project_commands_valid_clipy",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ],
                "fake_metadata": []
            }
        },
        "TestKedroCLI.test_kedro_cli_no_project": {
            "name": "test_kedro_cli_no_project",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "TestKedroCLI.test_kedro_cli_with_project": {
            "name": "test_kedro_cli_with_project",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "fake_metadata": []
            }
        },
        "TestRunCommand.fake_run_config": {
            "name": "fake_run_config",
            "location": 450,
            "return": [
                "str",
                "pathlib.Path",
                "Union[pathlib.Path, str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "pathlib.Path",
                    "Union[str, List[str]]"
                ],
                "fake_root_dir": [
                    "str",
                    "pathlib.Path",
                    "Union[str, List[str]]"
                ]
            }
        },
        "TestRunCommand.fake_run_config_with_params": {
            "name": "fake_run_config_with_params",
            "location": 466,
            "return": [
                "dict",
                "Optional[dict]",
                "Sequence",
                "Optional[Dict]",
                "Tuple[pathlib.Path, pathlib.Path]",
                "str"
            ],
            "arguments": {
                "fake_run_config": [
                    "str",
                    "bool",
                    "raiden.utils.Address"
                ],
                "request": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "TestRunCommand.test_run_successfully": {
            "name": "test_run_successfully",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_session": [],
                "mocker": []
            }
        },
        "TestRunCommand.test_run_with_pipeline_filters": {
            "name": "test_run_with_pipeline_filters",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "flask.testing.FlaskClient",
                    "dict",
                    "pathlib.Path"
                ],
                "fake_metadata": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "flask.testing.FlaskClient",
                    "dict",
                    "pathlib.Path"
                ],
                "fake_session": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "pathlib.Path",
                    "str"
                ],
                "mocker": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestRunCommand.test_run_successfully_parallel": {
            "name": "test_run_successfully_parallel",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_session": [],
                "mocker": []
            }
        },
        "TestRunCommand.test_run_async": {
            "name": "test_run_async",
            "location": 544,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_session": [
                    "str"
                ]
            }
        },
        "TestRunCommand.test_run_with_config": {
            "name": "test_run_with_config",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_flag": [
                    "solo.configurator.registry.Registry",
                    "dict",
                    "bool"
                ],
                "fake_project_cli": [
                    "solo.configurator.registry.Registry",
                    "dict",
                    "bool"
                ],
                "fake_metadata": [
                    "solo.configurator.registry.Registry",
                    "dict",
                    "bool"
                ],
                "fake_session": [
                    "Callable"
                ],
                "fake_run_config": [
                    "solo.configurator.registry.Registry",
                    "dict",
                    "bool"
                ],
                "mocker": [
                    "Callable"
                ]
            }
        },
        "TestRunCommand.test_run_with_params_in_config": {
            "name": "test_run_with_params_in_config",
            "location": 592,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "pathlib.Path"
                ],
                "fake_project_cli": [
                    "dict",
                    "solo.configurator.registry.Registry",
                    "str",
                    "bool"
                ],
                "fake_metadata": [
                    "dict",
                    "solo.configurator.registry.Registry",
                    "str",
                    "bool"
                ],
                "fake_run_config_with_params": [
                    "dict",
                    "solo.configurator.registry.Registry",
                    "str",
                    "bool"
                ],
                "mocker": [
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "TestRunCommand.test_run_extra_params": {
            "name": "test_run_extra_params",
            "location": 655,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "fake_project_cli": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "solo.configurator.registry.Registry"
                ],
                "fake_metadata": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "solo.configurator.registry.Registry"
                ],
                "cli_arg": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "solo.configurator.registry.Registry"
                ],
                "expected_extra_params": [
                    "str",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestRunCommand.test_bad_extra_params": {
            "name": "test_bad_extra_params",
            "location": 675,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "bad_arg": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestRunCommand.test_bad_params_key": {
            "name": "test_bad_params_key",
            "location": 686,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "bad_arg": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestRunCommand.test_reformat_load_versions": {
            "name": "test_reformat_load_versions",
            "location": 697,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "bool",
                    "dict",
                    "solo.configurator.registry.Registry",
                    "List[str]"
                ],
                "fake_metadata": [
                    "bool",
                    "dict",
                    "solo.configurator.registry.Registry",
                    "List[str]"
                ],
                "fake_session": [
                    "str",
                    "bool"
                ],
                "option": [
                    "bool",
                    "dict",
                    "solo.configurator.registry.Registry",
                    "List[str]"
                ],
                "value": [
                    "dict",
                    "bool",
                    "Union[pathlib.Path, str]",
                    "List[Tuple[str, str]]"
                ],
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestRunCommand.test_fail_reformat_load_versions": {
            "name": "test_fail_reformat_load_versions",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/test_cli_hooks.py": {
        "reset_hook_manager": {
            "name": "reset_hook_manager",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fake_plugin_distribution": {
            "name": "fake_plugin_distribution",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "Iterable[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "FakeEntryPoint.load": {
            "name": "load",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKedroCLIHooks.test_kedro_cli_should_invoke_cli_hooks_from_plugin": {
            "name": "test_kedro_cli_should_invoke_cli_hooks_from_plugin",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "logging.Logger",
                    "bool"
                ],
                "command": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "exit_code": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "fake_metadata": [],
                "fake_plugin_distribution": [
                    "Callable",
                    "str"
                ],
                "entry_points": [
                    "Dict[str, Any]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "FakeEntryPoint.load.FakeCLIHooks.before_command_run": {
            "name": "before_command_run",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_metadata": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "command_args": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "FakeEntryPoint.load.FakeCLIHooks.after_command_run": {
            "name": "after_command_run",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_metadata": [
                    "str"
                ],
                "command_args": [
                    "str"
                ],
                "exit_code": [
                    "str"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/test_jupyter.py": {
        "python_call_mock": {
            "name": "python_call_mock",
            "location": 19,
            "return": [
                "str",
                "Callable",
                "bool",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Callable",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "create_kernel_mock": {
            "name": "create_kernel_mock",
            "location": 24,
            "return": [
                "bytearray",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "mocker": [
                    "dict",
                    "str",
                    "float"
                ]
            }
        },
        "cleanup_kernel": {
            "name": "cleanup_kernel",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "cleanup_nodes_dir": {
            "name": "cleanup_nodes_dir",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "fake_package_path": [
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "str",
                    "Iterable[str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "TestJupyterNotebookCommand.test_happy_path": {
            "name": "test_happy_path",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "python_call_mock": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "neuromation.cli.rooRoot",
                    "str"
                ],
                "create_kernel_mock": []
            }
        },
        "TestJupyterNotebookCommand.test_env": {
            "name": "test_env",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env_flag": [
                    "bool",
                    "Optional[dict]"
                ],
                "env": [
                    "str",
                    "click.testing.CliRunner",
                    "bool"
                ],
                "fake_project_cli": [
                    "bool",
                    "Optional[dict]"
                ],
                "fake_metadata": [
                    "bool",
                    "Optional[dict]"
                ],
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestJupyterNotebookCommand.test_fail_no_jupyter": {
            "name": "test_fail_no_jupyter",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "mocker": [
                    "bool",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository"
                ]
            }
        },
        "TestJupyterLabCommand.test_happy_path": {
            "name": "test_happy_path",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "python_call_mock": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "neuromation.cli.rooRoot",
                    "str"
                ],
                "create_kernel_mock": []
            }
        },
        "TestJupyterLabCommand.test_env": {
            "name": "test_env",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env_flag": [
                    "bool",
                    "Optional[dict]"
                ],
                "env": [
                    "str",
                    "click.testing.CliRunner",
                    "bool"
                ],
                "fake_project_cli": [
                    "bool",
                    "Optional[dict]"
                ],
                "fake_metadata": [
                    "bool",
                    "Optional[dict]"
                ],
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestJupyterLabCommand.test_fail_no_jupyter": {
            "name": "test_fail_no_jupyter",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "mocker": [
                    "bool",
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository"
                ]
            }
        },
        "TestCreateKernel.test_create_new_kernel": {
            "name": "test_create_new_kernel",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateKernel.test_kernel_install_replaces": {
            "name": "test_kernel_install_replaces",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateKernel.test_error": {
            "name": "test_error",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestConvertNotebookCommand.fake_export_nodes": {
            "name": "fake_export_nodes",
            "location": 170,
            "return": [
                "str",
                "tuple",
                "Tuple[str, str, str]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "tuple",
                    "Tuple[str, str, str]",
                    "int",
                    "float"
                ]
            }
        },
        "TestConvertNotebookCommand.tmp_file_path": {
            "name": "tmp_file_path",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertNotebookCommand.test_convert_one_file_overwrite": {
            "name": "test_convert_one_file_overwrite",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "pathlib2.Path",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Dict[str, object]"
                ],
                "fake_project_cli": [
                    "pathlib.Path",
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "fake_export_nodes": [
                    "pathlib.Path",
                    "str"
                ],
                "tmp_file_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "fake_metadata": [
                    "pathlib.Path",
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "TestConvertNotebookCommand.test_convert_one_file_do_not_overwrite": {
            "name": "test_convert_one_file_do_not_overwrite",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "pathlib2.Path",
                    "Dict[str, str]"
                ],
                "fake_project_cli": [
                    "pathlib.Path",
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "fake_export_nodes": [
                    "Iterable"
                ],
                "tmp_file_path": [
                    "pathlib.Path",
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "fake_metadata": [
                    "pathlib.Path",
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "TestConvertNotebookCommand.test_convert_all_files": {
            "name": "test_convert_all_files",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pypi2nix.path.Path",
                    "pathlib.Path"
                ],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "neuromation.cli.rooRoot",
                    "str",
                    "List[str]",
                    "path.Path"
                ],
                "fake_export_nodes": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "neuromation.cli.rooRoot",
                    "str",
                    "List[str]",
                    "path.Path"
                ]
            }
        },
        "TestConvertNotebookCommand.test_convert_without_filepath_and_all_flag": {
            "name": "test_convert_without_filepath_and_all_flag",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestConvertNotebookCommand.test_non_unique_notebook_names_error": {
            "name": "test_non_unique_notebook_names_error",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "mocker": [],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestConvertNotebookCommand.test_convert_one_file": {
            "name": "test_convert_one_file",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "pathlib.Path",
                    "int",
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "fake_export_nodes": [
                    "pathlib.Path",
                    "str"
                ],
                "tmp_file_path": [
                    "pathlib.Path",
                    "str",
                    "dict",
                    "bool"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ],
                "fake_metadata": [
                    "pathlib.Path",
                    "int",
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "TestConvertNotebookCommand.test_convert_one_file_nodes_directory_exists": {
            "name": "test_convert_one_file_nodes_directory_exists",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "pathlib.Path",
                    "int",
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "fake_export_nodes": [
                    "pathlib.Path",
                    "str"
                ],
                "tmp_file_path": [
                    "pathlib.Path",
                    "str",
                    "dict",
                    "bool"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ],
                "fake_metadata": [
                    "pathlib.Path",
                    "int",
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "TestExportNodes.project_path": {
            "name": "project_path",
            "location": 342,
            "return": [
                "pathlib.Path",
                "pathlib.PurePath",
                "List[int]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ]
            }
        },
        "TestExportNodes.nodes_path": {
            "name": "nodes_path",
            "location": 347,
            "return": [
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestExportNodes.test_export_nodes": {
            "name": "test_export_nodes",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_path": [
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "nodes_path": [
                    "pathlib.Path"
                ]
            }
        },
        "TestExportNodes.test_export_nodes_different_notebook_paths": {
            "name": "test_export_nodes_different_notebook_paths",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_path": [
                    "pathlib.Path",
                    "str"
                ],
                "nodes_path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "TestExportNodes.test_export_nodes_nothing_to_write": {
            "name": "test_export_nodes_nothing_to_write",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_path": [
                    "pathlib.Path",
                    "str"
                ],
                "nodes_path": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "TestExportNodes.test_export_nodes_overwrite": {
            "name": "test_export_nodes_overwrite",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_path": [
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "nodes_path": [
                    "Dict[str, cerulean.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "TestExportNodes.test_export_nodes_json_error": {
            "name": "test_export_nodes_json_error",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/test_project.py": {
        "call_mock": {
            "name": "call_mock",
            "location": 13,
            "return": [
                "float",
                "str",
                "bool"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Optional[BaseException]",
                    "subprocess.Popen"
                ]
            }
        },
        "python_call_mock": {
            "name": "python_call_mock",
            "location": 18,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Callable",
                    "bool",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "fake_copyfile": {
            "name": "fake_copyfile",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestActivateNbstripoutCommand.fake_nbstripout": {
            "name": "fake_nbstripout",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestActivateNbstripoutCommand.fake_git_repo": {
            "name": "fake_git_repo",
            "location": 43,
            "return": [
                "Optional[Any]",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "mocker": [
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "TestActivateNbstripoutCommand.without_git_repo": {
            "name": "without_git_repo",
            "location": 48,
            "return": [
                "Optional[Any]",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "mocker": [
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "TestActivateNbstripoutCommand.test_install_successfully": {
            "name": "test_install_successfully",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "call_mock": [],
                "fake_nbstripout": [],
                "fake_git_repo": [],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str"
                ]
            }
        },
        "TestActivateNbstripoutCommand.test_nbstripout_not_installed": {
            "name": "test_nbstripout_not_installed",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_git_repo": [
                    "path.Path"
                ],
                "mocker": [
                    "Callable[[Any, Any], Any]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestActivateNbstripoutCommand.test_no_git_repo": {
            "name": "test_no_git_repo",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_nbstripout": [
                    "str"
                ],
                "without_git_repo": [
                    "str"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestActivateNbstripoutCommand.test_no_git_executable": {
            "name": "test_no_git_executable",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_nbstripout": [
                    "str",
                    "int"
                ],
                "mocker": [
                    "bool",
                    "pathlib.Path"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestTestCommand.test_happy_path": {
            "name": "test_happy_path",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "python_call_mock": []
            }
        },
        "TestTestCommand.test_pytest_not_installed": {
            "name": "test_pytest_not_installed",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]",
                    "neuromation.cli.rooRoot"
                ],
                "python_call_mock": [],
                "mocker": [
                    "str",
                    "List[str]"
                ],
                "fake_repo_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]",
                    "neuromation.cli.rooRoot"
                ]
            }
        },
        "TestLintCommand.test_lint": {
            "name": "test_lint",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "python_call_mock": [],
                "files": [
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "mocker": [
                    "pathlib.Path",
                    "str"
                ],
                "fake_repo_path": [
                    "neuromation.cli.rooRoot",
                    "pathlib.Path"
                ],
                "fake_metadata": [
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "TestLintCommand.test_lint_check_only": {
            "name": "test_lint_check_only",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "neuromation.cli.rooRoot",
                    "path.Path"
                ],
                "python_call_mock": [],
                "check_flag": [
                    "neuromation.cli.rooRoot",
                    "path.Path"
                ],
                "mocker": [
                    "pathlib.Path",
                    "str"
                ],
                "files": [
                    "neuromation.cli.rooRoot",
                    "path.Path",
                    "str",
                    "Dict[str, Any]"
                ],
                "fake_repo_path": [
                    "pathlib.Path",
                    "neuromation.cli.rooRoot"
                ],
                "fake_metadata": [
                    "neuromation.cli.rooRoot",
                    "path.Path"
                ]
            }
        },
        "TestLintCommand.test_import_not_installed": {
            "name": "test_import_not_installed",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "path.Path",
                    "List[str]"
                ],
                "python_call_mock": [],
                "module_name": [
                    "path.Path",
                    "pypi2nix.path.Path"
                ],
                "side_effects": [
                    "str"
                ],
                "mocker": [
                    "str"
                ],
                "fake_repo_path": [
                    "path.Path",
                    "pypi2nix.path.Path"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "path.Path",
                    "List[str]"
                ]
            }
        },
        "TestLintCommand.test_pythonpath_env_var": {
            "name": "test_pythonpath_env_var",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "mocker": [],
                "fake_repo_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "fake_metadata": [
                    "str"
                ]
            }
        },
        "TestIpythonCommand.test_happy_path": {
            "name": "test_happy_path",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "call_mock": [],
                "fake_project_cli": [
                    "str",
                    "click.testing.CliRunner",
                    "List[str]",
                    "dict",
                    "pathlib.Path"
                ],
                "fake_repo_path": [
                    "bool",
                    "str",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ],
                "fake_metadata": [
                    "str",
                    "click.testing.CliRunner",
                    "List[str]",
                    "dict",
                    "pathlib.Path"
                ]
            }
        },
        "TestIpythonCommand.test_env": {
            "name": "test_env",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env_flag": [
                    "bool",
                    "Optional[dict]"
                ],
                "env": [
                    "str",
                    "click.testing.CliRunner",
                    "bool"
                ],
                "fake_project_cli": [
                    "bool",
                    "Optional[dict]"
                ],
                "mocker": [
                    "bool"
                ],
                "fake_metadata": [
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "TestIpythonCommand.test_fail_no_ipython": {
            "name": "test_fail_no_ipython",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestPackageCommand.test_happy_path": {
            "name": "test_happy_path",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "call_mock": [
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "fake_project_cli": [
                    "Callable",
                    "str",
                    "Tuple[str, str]"
                ],
                "mocker": [
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "fake_repo_path": [
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "fake_metadata": [
                    "Callable",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "TestBuildDocsCommand.test_happy_path": {
            "name": "test_happy_path",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "call_mock": [],
                "python_call_mock": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "mocker": [],
                "fake_repo_path": [],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestBuildDocsCommand.test_open_docs": {
            "name": "test_open_docs",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "open_flag": [
                    "click.testing.CliRunner"
                ],
                "fake_project_cli": [
                    "click.testing.CliRunner"
                ],
                "mocker": [
                    "bool"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner"
                ]
            }
        },
        "TestBuildReqsCommand.test_compile_from_requirements_file": {
            "name": "test_compile_from_requirements_file",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "python_call_mock": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]",
                    "path.Path"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "fake_repo_path": [],
                "fake_copyfile": [
                    "pathlib.Path",
                    "path.Path",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]",
                    "path.Path"
                ]
            }
        },
        "TestBuildReqsCommand.test_compile_from_input_and_to_output_file": {
            "name": "test_compile_from_input_and_to_output_file",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "python_call_mock": [],
                "fake_project_cli": [
                    "str",
                    "Optional[pathlib.Path]",
                    "path.Path"
                ],
                "fake_repo_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "fake_copyfile": [
                    "pathlib.Path",
                    "List[str]"
                ],
                "fake_metadata": [
                    "str",
                    "Optional[pathlib.Path]",
                    "path.Path"
                ]
            }
        },
        "TestBuildReqsCommand.test_extra_args": {
            "name": "test_extra_args",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "python_call_mock": [],
                "fake_project_cli": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner",
                    "List[str]"
                ],
                "fake_repo_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "extra_args": [],
                "fake_metadata": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner",
                    "List[str]"
                ]
            }
        },
        "TestBuildReqsCommand.test_missing_requirements_txt": {
            "name": "test_missing_requirements_txt",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "bool",
                    "str"
                ],
                "mocker": [
                    "Optional[bytes]",
                    "Dict[str, Dict]",
                    "str",
                    "bool",
                    "TextIO",
                    "tuple"
                ],
                "fake_metadata": [
                    "bool",
                    "str"
                ],
                "os_name": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "Optional[str]"
                ],
                "fake_repo_path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "pathlib.Path"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/test_registry.py": {
        "yaml_dump_mock": {
            "name": "yaml_dump_mock",
            "location": 6,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "List[str]"
                ]
            }
        },
        "pipelines_dict": {
            "name": "pipelines_dict",
            "location": 11,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "test_list_registered_pipelines": {
            "name": "test_list_registered_pipelines",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "yaml_dump_mock": [],
                "pipelines_dict": []
            }
        },
        "TestRegistryDescribeCommand.test_describe_registered_pipeline": {
            "name": "test_describe_registered_pipeline",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "fake_metadata": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "yaml_dump_mock": [],
                "pipeline_name": [
                    "str",
                    "Optional[str]"
                ],
                "pipelines_dict": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "TestRegistryDescribeCommand.test_registered_pipeline_not_found": {
            "name": "test_registered_pipeline_not_found",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestRegistryDescribeCommand.test_describe_registered_pipeline_default": {
            "name": "test_describe_registered_pipeline_default",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str"
                ],
                "yaml_dump_mock": [],
                "pipelines_dict": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/test_starters.py": {
        "chdir_to_tmp": {
            "name": "chdir_to_tmp",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "path.Path",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "TextIO"
                ],
                "tmp_path": [
                    "str",
                    "path.Path",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "TextIO"
                ]
            }
        },
        "mock_determine_repo_dir": {
            "name": "mock_determine_repo_dir",
            "location": 29,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "pathlib.Path",
                    "pypi2nix.path.Path",
                    "Callable"
                ]
            }
        },
        "mock_cookiecutter": {
            "name": "mock_cookiecutter",
            "location": 37,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "_write_yaml": {
            "name": "_write_yaml",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "_make_cli_prompt_input": {
            "name": "_make_cli_prompt_input",
            "location": 47,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "project_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "repo_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "python_package": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "_assert_template_ok": {
            "name": "_assert_template_ok",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "Dict[str, str]",
                    "dict",
                    "bool",
                    "MutableMapping[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "project_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "repo_name": [
                    "str",
                    "Optional[str]",
                    "Union[str, List[str]]"
                ],
                "python_package": [
                    "str"
                ],
                "kedro_version": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "output_dir": [
                    "str",
                    "Optional[str]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "test_starter_list": {
            "name": "test_starter_list",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_starter_list_with_starter_plugin": {
            "name": "test_starter_list_with_starter_plugin",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ],
                "entry_point": []
            }
        },
        "test_starter_list_with_invalid_starter_plugin": {
            "name": "test_starter_list_with_invalid_starter_plugin",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "entry_point": [],
                "specs": [],
                "expected": [
                    "int"
                ]
            }
        },
        "TestNewFromUserPromptsValid.test_default": {
            "name": "test_default",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromUserPromptsValid.test_custom_project_name": {
            "name": "test_custom_project_name",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": []
            }
        },
        "TestNewFromUserPromptsValid.test_custom_project_name_with_hyphen_and_underscore_and_number": {
            "name": "test_custom_project_name_with_hyphen_and_underscore_and_number",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": []
            }
        },
        "TestNewFromUserPromptsValid.test_no_prompts": {
            "name": "test_no_prompts",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromUserPromptsValid.test_empty_prompts": {
            "name": "test_empty_prompts",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromUserPromptsValid.test_custom_prompt_valid_input": {
            "name": "test_custom_prompt_valid_input",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        },
        "TestNewFromUserPromptsValid.test_custom_prompt_for_essential_variable": {
            "name": "test_custom_prompt_for_essential_variable",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        },
        "TestNewFromUserPromptsInvalid.test_fail_if_dir_exists": {
            "name": "test_fail_if_dir_exists",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestNewFromUserPromptsInvalid.test_prompt_no_title": {
            "name": "test_prompt_no_title",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromUserPromptsInvalid.test_prompt_bad_yaml": {
            "name": "test_prompt_bad_yaml",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromUserPromptsInvalid.test_invalid_project_name_special_characters": {
            "name": "test_invalid_project_name_special_characters",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": []
            }
        },
        "TestNewFromUserPromptsInvalid.test_invalid_project_name_too_short": {
            "name": "test_invalid_project_name_too_short",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": []
            }
        },
        "TestNewFromUserPromptsInvalid.test_custom_prompt_invalid_input": {
            "name": "test_custom_prompt_invalid_input",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "str",
                    "click.testing.CliRunner"
                ]
            }
        },
        "TestNewFromConfigFileValid.test_required_keys_only": {
            "name": "test_required_keys_only",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromConfigFileValid.test_custom_required_keys": {
            "name": "test_custom_required_keys",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromConfigFileValid.test_custom_kedro_version": {
            "name": "test_custom_kedro_version",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromConfigFileValid.test_custom_output_dir": {
            "name": "test_custom_output_dir",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestNewFromConfigFileValid.test_extra_keys_allowed": {
            "name": "test_extra_keys_allowed",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromConfigFileValid.test_no_prompts": {
            "name": "test_no_prompts",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromConfigFileValid.test_empty_prompts": {
            "name": "test_empty_prompts",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromConfigFileInvalid.test_output_dir_does_not_exist": {
            "name": "test_output_dir_does_not_exist",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromConfigFileInvalid.test_config_missing_key": {
            "name": "test_config_missing_key",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromConfigFileInvalid.test_config_does_not_exist": {
            "name": "test_config_does_not_exist",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewFromConfigFileInvalid.test_config_empty": {
            "name": "test_config_empty",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "path.Path"
                ]
            }
        },
        "TestNewFromConfigFileInvalid.test_config_bad_yaml": {
            "name": "test_config_bad_yaml",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "path.Path"
                ]
            }
        },
        "TestNewWithStarterValid.test_absolute_path": {
            "name": "test_absolute_path",
            "location": 450,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "pathlib.Path",
                    "path.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "TestNewWithStarterValid.test_relative_path": {
            "name": "test_relative_path",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "Dict[str, Any]",
                    "path.Path",
                    "neuromation.cli.rooRoot"
                ]
            }
        },
        "TestNewWithStarterValid.test_relative_path_directory": {
            "name": "test_relative_path_directory",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "Dict[str, Any]",
                    "path.Path",
                    "neuromation.cli.rooRoot"
                ]
            }
        },
        "TestNewWithStarterValid.test_alias": {
            "name": "test_alias",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "mock_determine_repo_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "mock_cookiecutter": [
                    "str"
                ]
            }
        },
        "TestNewWithStarterValid.test_alias_custom_checkout": {
            "name": "test_alias_custom_checkout",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "mock_determine_repo_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "mock_cookiecutter": [
                    "str"
                ]
            }
        },
        "TestNewWithStarterValid.test_git_repo": {
            "name": "test_git_repo",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "str"
                ],
                "mock_determine_repo_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "mock_cookiecutter": [
                    "str"
                ]
            }
        },
        "TestNewWithStarterValid.test_git_repo_custom_checkout": {
            "name": "test_git_repo_custom_checkout",
            "location": 522,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "str"
                ],
                "mock_determine_repo_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "mock_cookiecutter": [
                    "str"
                ]
            }
        },
        "TestNewWithStarterValid.test_git_repo_custom_directory": {
            "name": "test_git_repo_custom_directory",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "str"
                ],
                "mock_determine_repo_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "mock_cookiecutter": [
                    "str"
                ]
            }
        },
        "TestNewWithStarterInvalid.test_invalid_starter": {
            "name": "test_invalid_starter",
            "location": 569,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestNewWithStarterInvalid.test_invalid_checkout": {
            "name": "test_invalid_checkout",
            "location": 588,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "starter": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "Dict[str, Any]",
                    "path.Path"
                ],
                "repo": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "Dict[str, Any]",
                    "path.Path"
                ],
                "mocker": [
                    "cmk.gui.plugins.openapi.livestatus_helpers.testing.MockLiveStatusConnection"
                ]
            }
        },
        "TestFlagsNotAllowed.test_checkout_flag_without_starter": {
            "name": "test_checkout_flag_without_starter",
            "location": 609,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestFlagsNotAllowed.test_directory_flag_without_starter": {
            "name": "test_directory_flag_without_starter",
            "location": 620,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestFlagsNotAllowed.test_directory_flag_with_starter_alias": {
            "name": "test_directory_flag_with_starter_alias",
            "location": 632,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_kedro_cli": [
                    "click.testing.CliRunner",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/__init__.py": {},
    "kedro-main/tests/framework/cli/hooks/test_manager.py": {
        "test_hook_manager_can_call_hooks_defined_in_specs": {
            "name": "test_hook_manager_can_call_hooks_defined_in_specs",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "hook_specs": [
                    "str",
                    "bool"
                ],
                "hook_name": [
                    "str",
                    "List[str]"
                ],
                "hook_params": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/hooks/__init__.py": {},
    "kedro-main/tests/framework/cli/micropkg/conftest.py": {
        "cleanup_micropackages": {
            "name": "cleanup_micropackages",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "str",
                    "bool",
                    "int"
                ],
                "fake_package_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "cleanup_pipelines": {
            "name": "cleanup_pipelines",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "str",
                    "Tuple[str]"
                ],
                "fake_package_path": [
                    "str"
                ]
            }
        },
        "cleanup_dist": {
            "name": "cleanup_dist",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "cleanup_pyproject_toml": {
            "name": "cleanup_pyproject_toml",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "str",
                    "Optional[str]",
                    "list"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/micropkg/test_micropkg_package.py": {
        "TestMicropkgPackageCommand.assert_sdist_contents_correct": {
            "name": "assert_sdist_contents_correct",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "sdist_location": [],
                "package_name": [],
                "version": []
            }
        },
        "TestMicropkgPackageCommand.test_package_micropkg": {
            "name": "test_package_micropkg",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "fake_repo_path": [],
                "fake_project_cli": [],
                "options": [],
                "package_name": [],
                "success_message": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageCommand.test_micropkg_package_same_name_as_package_name": {
            "name": "test_micropkg_package_same_name_as_package_name",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "fake_metadata": [],
                "fake_project_cli": [],
                "fake_repo_path": []
            }
        },
        "TestMicropkgPackageCommand.test_micropkg_package_same_name_as_package_name_alias": {
            "name": "test_micropkg_package_same_name_as_package_name_alias",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "fake_metadata": [],
                "fake_project_cli": [],
                "fake_repo_path": []
            }
        },
        "TestMicropkgPackageCommand.test_micropkg_package_to_destination": {
            "name": "test_micropkg_package_to_destination",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "existing_dir": [],
                "tmp_path": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageCommand.test_micropkg_package_overwrites_sdist": {
            "name": "test_micropkg_package_overwrites_sdist",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "tmp_path": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageCommand.test_package_micropkg_bad_alias": {
            "name": "test_package_micropkg_bad_alias",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "bad_alias": [],
                "error_message": []
            }
        },
        "TestMicropkgPackageCommand.test_package_micropkg_invalid_module_path": {
            "name": "test_package_micropkg_invalid_module_path",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "fake_project_cli": []
            }
        },
        "TestMicropkgPackageCommand.test_package_micropkg_no_config": {
            "name": "test_package_micropkg_no_config",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "fake_repo_path": [],
                "fake_project_cli": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageCommand.test_package_non_existing_micropkg_dir": {
            "name": "test_package_non_existing_micropkg_dir",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "fake_package_path": [],
                "fake_project_cli": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageCommand.test_package_empty_micropkg_dir": {
            "name": "test_package_empty_micropkg_dir",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "fake_package_path": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageCommand.test_package_modular_pipeline_with_nested_parameters": {
            "name": "test_package_modular_pipeline_with_nested_parameters",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "fake_repo_path": [],
                "fake_project_cli": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageCommand.test_package_pipeline_with_deep_nested_parameters": {
            "name": "test_package_pipeline_with_deep_nested_parameters",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "fake_repo_path": [],
                "fake_project_cli": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageCommand.test_micropkg_package_default": {
            "name": "test_micropkg_package_default",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "fake_repo_path": [],
                "fake_package_path": [],
                "fake_project_cli": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageCommand.test_micropkg_package_nested_module": {
            "name": "test_micropkg_package_nested_module",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "fake_metadata": [],
                "fake_repo_path": [],
                "fake_package_path": []
            }
        },
        "TestMicropkgPackageFromManifest.test_micropkg_package_all": {
            "name": "test_micropkg_package_all",
            "location": 497,
            "return": [],
            "arguments": {
                "self": [],
                "fake_repo_path": [],
                "fake_project_cli": [],
                "fake_metadata": [],
                "tmp_path": [],
                "mocker": []
            }
        },
        "TestMicropkgPackageFromManifest.test_micropkg_package_all_empty_toml": {
            "name": "test_micropkg_package_all_empty_toml",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "fake_repo_path": [],
                "fake_project_cli": [],
                "fake_metadata": [],
                "mocker": []
            }
        },
        "TestMicropkgPackageFromManifest.test_invalid_toml": {
            "name": "test_invalid_toml",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "fake_repo_path": [],
                "fake_project_cli": [],
                "fake_metadata": []
            }
        },
        "TestMicropkgPackageFromManifest.test_micropkg_package_no_arg_provided": {
            "name": "test_micropkg_package_no_arg_provided",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "fake_metadata": []
            }
        }
    },
    "kedro-main/tests/framework/cli/micropkg/test_micropkg_pull.py": {
        "call_pipeline_create": {
            "name": "call_pipeline_create",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "cli": [
                    "str",
                    "Dict[str, str]",
                    "List[Union[str, Any]]"
                ],
                "metadata": [
                    "str",
                    "Dict[str, str]",
                    "List[Union[str, Any]]"
                ],
                "pipeline_name": [
                    "str",
                    "Dict[str, str]",
                    "List[Union[str, Any]]"
                ]
            }
        },
        "call_micropkg_package": {
            "name": "call_micropkg_package",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "cli": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[Tuple[str, str]]"
                ],
                "metadata": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[Tuple[str, str]]"
                ],
                "alias": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[Any]"
                ],
                "destination": [
                    "int",
                    "bytes"
                ],
                "pipeline_name": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[Tuple[str, str]]"
                ]
            }
        },
        "call_pipeline_delete": {
            "name": "call_pipeline_delete",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "cli": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "metadata": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "pipeline_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "TestMicropkgPullCommand.assert_package_files_exist": {
            "name": "assert_package_files_exist",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source_path": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, pathlib.Path]"
                ]
            }
        },
        "TestMicropkgPullCommand.test_pull_local_sdist": {
            "name": "test_pull_local_sdist",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_repo_path": [
                    "str",
                    "Optional[pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "cerulean.Path"
                ],
                "env": [],
                "alias": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "Optional[Dict[str, Any]]"
                ],
                "destination": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "kedro.framework.contexKedroContext"
                ],
                "fake_metadata": [
                    "str"
                ]
            }
        },
        "TestMicropkgPullCommand.test_pull_local_sdist_compare": {
            "name": "test_pull_local_sdist_compare",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_repo_path": [
                    "pathlib.Path",
                    "str",
                    "Tuple[str]",
                    "Union[pathlib.Path, str]",
                    "int"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "cerulean.Path"
                ],
                "env": [],
                "alias": [
                    "str",
                    "cerulean.Path"
                ],
                "destination": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "kedro.framework.contexKedroContext"
                ],
                "fake_metadata": [
                    "str"
                ]
            }
        },
        "TestMicropkgPullCommand.test_micropkg_pull_same_alias_package_name": {
            "name": "test_micropkg_pull_same_alias_package_name",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "path.Path"
                ],
                "fake_repo_path": [
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "path.Path",
                    "pypi2nix.path.Path"
                ],
                "fake_metadata": [
                    "path.Path"
                ]
            }
        },
        "TestMicropkgPullCommand.test_micropkg_pull_nested_destination": {
            "name": "test_micropkg_pull_nested_destination",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_repo_path": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "fake_metadata": [
                    "str"
                ]
            }
        },
        "TestMicropkgPullCommand.test_micropkg_alias_refactors_imports": {
            "name": "test_micropkg_alias_refactors_imports",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "fake_package_path": [
                    "str",
                    "path.Path",
                    "pathlib.Path"
                ],
                "fake_repo_path": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "Path"
                ],
                "fake_metadata": [
                    "pathlib.Path",
                    "str",
                    "dict",
                    "List[List[str]]"
                ]
            }
        },
        "TestMicropkgPullCommand.test_micropkg_pull_from_aliased_pipeline_conflicting_name": {
            "name": "test_micropkg_pull_from_aliased_pipeline_conflicting_name",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "fake_repo_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "fake_metadata": [
                    "str",
                    "Optional['Directory']"
                ]
            }
        },
        "TestMicropkgPullCommand.test_micropkg_pull_as_aliased_pipeline_conflicting_name": {
            "name": "test_micropkg_pull_as_aliased_pipeline_conflicting_name",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "fake_repo_path": [
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "fake_metadata": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestMicropkgPullCommand.test_pull_sdist_fs_args": {
            "name": "test_pull_sdist_fs_args",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "path.Path",
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter"
                ],
                "fake_repo_path": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.PosixPath",
                    "path.Path"
                ],
                "mocker": [],
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "fake_metadata": [
                    "path.Path",
                    "neuromation.cli.printer.StreamPrinter",
                    "neuromation.cli.printer.TTYPrinter"
                ]
            }
        },
        "TestMicropkgPullCommand.test_pull_two_egg_info": {
            "name": "test_pull_two_egg_info",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_repo_path": [
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "mocker": [
                    "Optional[str]",
                    "str",
                    "pathlib2.Path",
                    "List[str]"
                ],
                "tmp_path": [
                    "Callable",
                    "pypi2nix.path.Path",
                    "str"
                ],
                "fake_metadata": [
                    "str"
                ]
            }
        },
        "TestMicropkgPullCommand.test_pull_tests_missing": {
            "name": "test_pull_tests_missing",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_repo_path": [
                    "pathlib.Path",
                    "str",
                    "Tuple[str]",
                    "int",
                    "Union[pathlib.Path, str]",
                    "pathlib.PosixPath"
                ],
                "fake_package_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "cerulean.Path",
                    "int",
                    "bool"
                ],
                "env": [
                    "pathlib.Path"
                ],
                "alias": [
                    "pathlib.Path",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ],
                "fake_metadata": [
                    "str"
                ]
            }
        },
        "TestMicropkgPullCommand.test_pull_config_missing": {
            "name": "test_pull_config_missing",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_repo_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Dict[str, Any]",
                    "Union[pathlib.Path, str]",
                    "TextIO"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[pathlib.Path]",
                    "cerulean.Path"
                ],
                "env": [],
                "alias": [
                    "str",
                    "pathlib.Path"
                ],
                "fake_metadata": [
                    "str"
                ]
            }
        },
        "TestMicropkgPullCommand.test_pull_from_pypi": {
            "name": "test_pull_from_pypi",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "Dict[str, Any]"
                ],
                "fake_repo_path": [
                    "pathlib.Path",
                    "path.Path",
                    "pypi2nix.path.Path",
                    "bool",
                    "pathlib.PosixPath"
                ],
                "mocker": [],
                "tmp_path": [
                    "str",
                    "List[str]",
                    "Optional[pathlib.Path]"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "bool",
                    "pathlib.PosixPath",
                    "pypi2nix.path.Path"
                ],
                "env": [],
                "alias": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, pathlib.Path]]"
                ],
                "fake_metadata": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestMicropkgPullCommand.test_invalid_pull_from_pypi": {
            "name": "test_invalid_pull_from_pypi",
            "location": 667,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "Callable",
                    "str",
                    "neuromation.cli.rooRoot"
                ],
                "mocker": [],
                "tmp_path": [
                    "str"
                ],
                "fake_metadata": [
                    "Callable",
                    "str",
                    "neuromation.cli.rooRoot"
                ]
            }
        },
        "TestMicropkgPullCommand.test_pull_from_pypi_more_than_one_sdist_file": {
            "name": "test_pull_from_pypi_more_than_one_sdist_file",
            "location": 698,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "path.Path"
                ],
                "mocker": [
                    "Optional[str]",
                    "str",
                    "pathlib2.Path",
                    "pathlib.Path"
                ],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "dict",
                    "bool",
                    "path.Path"
                ],
                "fake_metadata": [
                    "path.Path"
                ]
            }
        },
        "TestMicropkgPullCommand.test_pull_unsupported_protocol_by_fsspec": {
            "name": "test_pull_unsupported_protocol_by_fsspec",
            "location": 724,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "dict",
                    "str",
                    "Callable"
                ],
                "fake_metadata": [
                    "dict",
                    "str",
                    "Callable"
                ],
                "tmp_path": [
                    "str"
                ],
                "mocker": []
            }
        },
        "TestMicropkgPullFromManifest.test_micropkg_pull_all": {
            "name": "test_micropkg_pull_all",
            "location": 759,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "pathlib.Path",
                    "str"
                ],
                "fake_project_cli": [
                    "pathlib.Path"
                ],
                "fake_metadata": [
                    "pathlib.Path"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestMicropkgPullFromManifest.test_micropkg_pull_all_empty_toml": {
            "name": "test_micropkg_pull_all_empty_toml",
            "location": 799,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "pathlib.Path",
                    "Optional[List[str]]",
                    "str",
                    "pathlib.PosixPath"
                ],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "mocker": [
                    "pathlib.Path"
                ]
            }
        },
        "TestMicropkgPullFromManifest.test_invalid_toml": {
            "name": "test_invalid_toml",
            "location": 822,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "pathlib.Path",
                    "Optional[List[str]]",
                    "str",
                    "path.Path"
                ],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestMicropkgPullFromManifest.test_micropkg_pull_no_arg_provided": {
            "name": "test_micropkg_pull_no_arg_provided",
            "location": 834,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/micropkg/test_micropkg_requirements.py": {
        "TestMicropkgRequirements.call_pipeline_create": {
            "name": "call_pipeline_create",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cli": [
                    "Type",
                    "BaseException"
                ],
                "metadata": [
                    "Type",
                    "BaseException"
                ]
            }
        },
        "TestMicropkgRequirements.call_micropkg_package": {
            "name": "call_micropkg_package",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cli": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "metadata": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "TestMicropkgRequirements.call_pipeline_delete": {
            "name": "call_pipeline_delete",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cli": [
                    "Type"
                ],
                "metadata": [
                    "Type"
                ]
            }
        },
        "TestMicropkgRequirements.call_micropkg_pull": {
            "name": "call_micropkg_pull",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cli": [
                    "str",
                    "IO[Any]",
                    "Dict[str, str]"
                ],
                "metadata": [
                    "str",
                    "IO[Any]",
                    "Dict[str, str]"
                ],
                "repo_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestMicropkgRequirements.test_existing_complex_project_requirements_txt": {
            "name": "test_existing_complex_project_requirements_txt",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_metadata": [
                    "str"
                ],
                "fake_package_path": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "fake_repo_path": [
                    "bool",
                    "str",
                    "Union[bool, str]",
                    "Optional[str]"
                ]
            }
        },
        "TestMicropkgRequirements.test_existing_project_requirements_txt": {
            "name": "test_existing_project_requirements_txt",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_metadata": [
                    "str"
                ],
                "fake_package_path": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "fake_repo_path": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestMicropkgRequirements.test_missing_project_requirements_txt": {
            "name": "test_missing_project_requirements_txt",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_metadata": [
                    "str"
                ],
                "fake_package_path": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "fake_repo_path": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestMicropkgRequirements.test_no_requirements": {
            "name": "test_no_requirements",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "fake_metadata": [],
                "fake_repo_path": [
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestMicropkgRequirements.test_all_requirements_already_covered": {
            "name": "test_all_requirements_already_covered",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "fake_metadata": [],
                "fake_repo_path": [
                    "bool",
                    "str",
                    "Union[bool, str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ],
                "fake_package_path": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "TestMicropkgRequirements.test_no_pipeline_requirements_txt": {
            "name": "test_no_pipeline_requirements_txt",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [],
                "fake_metadata": [],
                "fake_repo_path": [
                    "Callable",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestMicropkgRequirements.test_empty_pipeline_requirements_txt": {
            "name": "test_empty_pipeline_requirements_txt",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str"
                ],
                "fake_metadata": [
                    "str"
                ],
                "fake_package_path": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "fake_repo_path": [
                    "bool",
                    "str",
                    "type"
                ]
            }
        },
        "TestMicropkgRequirements.test_complex_requirements": {
            "name": "test_complex_requirements",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requirement": [
                    "str"
                ],
                "fake_project_cli": [
                    "str"
                ],
                "fake_metadata": [
                    "str"
                ],
                "fake_package_path": [
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/micropkg/__init__.py": {},
    "kedro-main/tests/framework/cli/pipeline/conftest.py": {
        "cleanup_micropackages": {
            "name": "cleanup_micropackages",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "str",
                    "bool",
                    "int"
                ],
                "fake_package_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "cleanup_pipelines": {
            "name": "cleanup_pipelines",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "str",
                    "Tuple[str]"
                ],
                "fake_package_path": [
                    "str"
                ]
            }
        },
        "cleanup_dist": {
            "name": "cleanup_dist",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "cleanup_pyproject_toml": {
            "name": "cleanup_pyproject_toml",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "fake_repo_path": [
                    "str",
                    "Optional[str]",
                    "list"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/pipeline/test_pipeline.py": {
        "make_pipelines": {
            "name": "make_pipelines",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Optional[bool]",
                    "str"
                ],
                "fake_repo_path": [
                    "str",
                    "Union[str, List[str]]",
                    "pathlib.Path",
                    "sqlalchemy.orm.session.Session",
                    "path.Path"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "IO[Any]"
                ],
                "mocker": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestPipelineCreateCommand.test_create_pipeline": {
            "name": "test_create_pipeline",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "pathlib.Path",
                    "pypi2nix.path.Path",
                    "bool",
                    "int"
                ],
                "fake_project_cli": [
                    "Callable"
                ],
                "fake_metadata": [
                    "Callable"
                ],
                "env": [
                    "Sequence[str]",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "bool",
                    "str"
                ]
            }
        },
        "TestPipelineCreateCommand.test_create_pipeline_skip_config": {
            "name": "test_create_pipeline_skip_config",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "str"
                ],
                "fake_project_cli": [
                    "Callable"
                ],
                "fake_metadata": [
                    "Callable"
                ],
                "env": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "TestPipelineCreateCommand.test_catalog_and_params": {
            "name": "test_catalog_and_params",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "cerulean.Path",
                    "pathlib.Path",
                    "str",
                    "bool",
                    "path.Path"
                ],
                "fake_project_cli": [
                    "Callable"
                ],
                "fake_metadata": [
                    "Callable"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "TestPipelineCreateCommand.test_skip_copy": {
            "name": "test_skip_copy",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ],
                "fake_project_cli": [
                    "str",
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner",
                    "List[str]"
                ],
                "fake_metadata": [
                    "str",
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner",
                    "List[str]"
                ]
            }
        },
        "TestPipelineCreateCommand.test_failed_copy": {
            "name": "test_failed_copy",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "str",
                    "List[str]",
                    "click.testing.CliRunner",
                    "Callable"
                ],
                "fake_metadata": [
                    "str",
                    "List[str]",
                    "click.testing.CliRunner",
                    "Callable"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path"
                ],
                "mocker": [
                    "bool"
                ]
            }
        },
        "TestPipelineCreateCommand.test_no_pipeline_arg_error": {
            "name": "test_no_pipeline_arg_error",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner",
                    "List[str]",
                    "path.Path",
                    "str"
                ],
                "fake_metadata": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner",
                    "List[str]",
                    "path.Path",
                    "str"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path"
                ]
            }
        },
        "TestPipelineCreateCommand.test_bad_pipeline_name": {
            "name": "test_bad_pipeline_name",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "pathlib.Path"
                ],
                "fake_metadata": [
                    "pathlib.Path"
                ],
                "bad_name": [
                    "pathlib.Path"
                ],
                "error_message": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestPipelineCreateCommand.test_duplicate_pipeline_name": {
            "name": "test_duplicate_pipeline_name",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "dict"
                ],
                "fake_metadata": [
                    "dict"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path"
                ]
            }
        },
        "TestPipelineCreateCommand.test_bad_env": {
            "name": "test_bad_env",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestPipelineDeleteCommand.test_delete_pipeline": {
            "name": "test_delete_pipeline",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "str",
                    "simetuc.settings.Settings"
                ],
                "expected_conf": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "fake_repo_path": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "Union[str, pathlib.Path]"
                ],
                "fake_project_cli": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Set[str]",
                    "Callable"
                ],
                "fake_metadata": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Set[str]",
                    "Callable"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "str",
                    "int",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "TestPipelineDeleteCommand.test_delete_pipeline_skip": {
            "name": "test_delete_pipeline_skip",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "str",
                    "path.Path"
                ],
                "fake_project_cli": [
                    "dict",
                    "str",
                    "Callable",
                    "bool"
                ],
                "fake_metadata": [
                    "dict",
                    "str",
                    "Callable",
                    "bool"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "list",
                    "bool",
                    "str"
                ]
            }
        },
        "TestPipelineDeleteCommand.test_delete_pipeline_fail": {
            "name": "test_delete_pipeline_fail",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "Callable",
                    "path.Path",
                    "str"
                ],
                "fake_metadata": [
                    "Callable",
                    "path.Path",
                    "str"
                ],
                "fake_package_path": [
                    "pathlib.Path"
                ],
                "mocker": []
            }
        },
        "TestPipelineDeleteCommand.test_bad_pipeline_name": {
            "name": "test_bad_pipeline_name",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "pathlib.Path"
                ],
                "fake_metadata": [
                    "pathlib.Path"
                ],
                "bad_name": [
                    "pathlib.Path"
                ],
                "error_message": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestPipelineDeleteCommand.test_pipeline_not_found": {
            "name": "test_pipeline_not_found",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ],
                "fake_metadata": [
                    "click.testing.CliRunner",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestPipelineDeleteCommand.test_bad_env": {
            "name": "test_bad_env",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project_cli": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner",
                    "List[str]"
                ],
                "fake_metadata": [
                    "neuromation.cli.rooRoot",
                    "click.testing.CliRunner",
                    "List[str]"
                ]
            }
        },
        "TestPipelineDeleteCommand.test_pipeline_delete_confirmation": {
            "name": "test_pipeline_delete_confirmation",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "str",
                    "path.Path"
                ],
                "fake_project_cli": [
                    "dict",
                    "str",
                    "Callable",
                    "bool"
                ],
                "fake_metadata": [
                    "dict",
                    "str",
                    "Callable",
                    "bool"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "bool",
                    "str"
                ],
                "input_": [
                    "dict",
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestPipelineDeleteCommand.test_pipeline_delete_confirmation_skip": {
            "name": "test_pipeline_delete_confirmation_skip",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_repo_path": [
                    "pathlib.Path",
                    "cerulean.Path",
                    "str",
                    "path.Path"
                ],
                "fake_project_cli": [
                    "dict",
                    "str",
                    "Callable",
                    "bool"
                ],
                "fake_metadata": [
                    "dict",
                    "str",
                    "Callable",
                    "bool"
                ],
                "fake_package_path": [
                    "pathlib.Path",
                    "bool",
                    "str"
                ],
                "input_": [
                    "dict",
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestSyncDirs.mock_click": {
            "name": "mock_click",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "TestSyncDirs.source": {
            "name": "source",
            "location": 478,
            "return": [
                "str",
                "pathlib.Path",
                "Iterable[str]",
                "path.Path"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "List[pathlib.Path]",
                    "bool"
                ]
            }
        },
        "TestSyncDirs.test_sync_target_exists": {
            "name": "test_sync_target_exists",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "pathlib.Path",
                    "str",
                    "List[pathlib.Path]"
                ],
                "tmp_path": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "TestSyncDirs.test_sync_no_target": {
            "name": "test_sync_no_target",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "pathlib.Path",
                    "str",
                    "paradigm.catalog.Path"
                ],
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "kedro-main/tests/framework/cli/pipeline/__init__.py": {},
    "kedro-main/tests/framework/context/test_context.py": {
        "_write_yaml": {
            "name": "_write_yaml",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "_write_toml": {
            "name": "_write_toml",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "str",
                    "lightbus.config.Config",
                    "pyramid.config.Configurator",
                    "backup.config.Config",
                    "routemaster.config.Config"
                ]
            }
        },
        "_write_json": {
            "name": "_write_json",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "Dict[str, util.JSONType]",
                    "dict",
                    "cmk.base.config.ObjectAttributes",
                    "config.Config",
                    "entity_embeddings.config.Config"
                ]
            }
        },
        "_write_dummy_ini": {
            "name": "_write_dummy_ini",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "str",
                    "type"
                ]
            }
        },
        "base_config": {
            "name": "base_config",
            "location": 68,
            "return": [
                "Dict[str, Union[str, Any]]",
                "Set[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "local_config": {
            "name": "local_config",
            "location": 83,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Union[str, Any]]",
                "Dict[str, str]",
                "bool",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path",
                    "Dict[str, Any]"
                ]
            }
        },
        "env": {
            "name": "env",
            "location": 110,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "prepare_project_dir": {
            "name": "prepare_project_dir",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[pathlib.Path, ModuleSummary]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "base_config": [
                    "bool",
                    "str",
                    "List[str]",
                    "Iterable[Tuple[str, dict]]"
                ],
                "local_config": [
                    "dict",
                    "str",
                    "int",
                    "Exception"
                ],
                "env": [
                    "Dict[pathlib.Path, PackageSummary]",
                    "pathlib.Path",
                    "Optional[str]",
                    "Optional[pandas.DataFrame]"
                ]
            }
        },
        "mock_settings_file_bad_data_catalog_class": {
            "name": "mock_settings_file_bad_data_catalog_class",
            "location": 133,
            "return": [
                "Optional[str]",
                "str",
                "List[pathlib.Path]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "mock_settings": {
            "name": "mock_settings",
            "location": 147,
            "return": [
                "bool",
                "pandas.Series",
                "List[str]"
            ],
            "arguments": {
                "mocker": [
                    "Iterable",
                    "List[str]",
                    "int"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 154,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "extra_params": {
            "name": "extra_params",
            "location": 184,
            "return": [
                "int",
                "pandas.DataFrame",
                "list",
                "static_frame.core.util.DepthLevelSpecifier"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "dummy_context": {
            "name": "dummy_context",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "prepare_project_dir": [
                    "bool",
                    "pathlib.Path",
                    "str",
                    "Dict[str, str]"
                ],
                "env": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "extra_params": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_is_relative_path": {
            "name": "test_is_relative_path",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "path_string": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_convert_paths_raises_error_on_relative_project_path": {
            "name": "test_convert_paths_raises_error_on_relative_project_path",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_paths_to_absolute_posix_for_all_known_filepath_keys": {
            "name": "test_convert_paths_to_absolute_posix_for_all_known_filepath_keys",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "project_path": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ],
                "input_conf": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ],
                "expected": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "test_convert_paths_to_absolute_posix_not_changing_non_relative_path": {
            "name": "test_convert_paths_to_absolute_posix_not_changing_non_relative_path",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "project_path": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ],
                "input_conf": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ],
                "expected": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "test_convert_paths_to_absolute_posix_converts_full_windows_path_to_posix": {
            "name": "test_convert_paths_to_absolute_posix_converts_full_windows_path_to_posix",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "project_path": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ],
                "input_conf": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ],
                "expected": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "test_validate_layers": {
            "name": "test_validate_layers",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "layers": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "mocker": []
            }
        },
        "test_validate_layers_error": {
            "name": "test_validate_layers_error",
            "location": 443,
            "return": [
                ""
            ],
            "arguments": {
                "layers": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "conflicting_datasets": [
                    "pathlib.Path",
                    "str"
                ],
                "mocker": []
            }
        },
        "test_update_nested_dict": {
            "name": "test_update_nested_dict",
            "location": 483,
            "return": [
                ""
            ],
            "arguments": {
                "old_dict": [
                    "dict",
                    "List[Tuple[bool, Any]]",
                    "list"
                ],
                "new_dict": [
                    "Optional[Dict]",
                    "OrderedDict",
                    "dict"
                ],
                "expected": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]",
                    "Callable",
                    "list",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "TestKedroContext.test_attributes": {
            "name": "test_attributes",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "dummy_context": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "bool"
                ]
            }
        },
        "TestKedroContext.test_get_catalog_always_using_absolute_path": {
            "name": "test_get_catalog_always_using_absolute_path",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_context": [
                    "pathlib.Path"
                ]
            }
        },
        "TestKedroContext.test_get_catalog_validates_layers": {
            "name": "test_get_catalog_validates_layers",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_context": [
                    "pathlib.Path"
                ],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestKedroContext.test_catalog": {
            "name": "test_catalog",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_context": [],
                "dummy_dataframe": [
                    "pathlib.Path",
                    "path.Path"
                ]
            }
        },
        "TestKedroContext.test_wrong_catalog_type": {
            "name": "test_wrong_catalog_type",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_settings_file_bad_data_catalog_class": []
            }
        },
        "TestKedroContext.test_params": {
            "name": "test_params",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_context": [],
                "extra_params": [
                    "str"
                ]
            }
        },
        "TestKedroContext.test_nested_params": {
            "name": "test_nested_params",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "pathlib.Path"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ],
                "dummy_context": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestKedroContext.test_params_missing": {
            "name": "test_params_missing",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "extra_params": [
                    "str",
                    "float"
                ],
                "dummy_context": [
                    "pathlib.Path"
                ]
            }
        },
        "TestKedroContext.test_custom_env": {
            "name": "test_custom_env",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_context": [],
                "env": []
            }
        },
        "TestKedroContext.test_missing_parameters": {
            "name": "test_missing_parameters",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "str"
                ],
                "dummy_context": [
                    "bool",
                    "path.Path"
                ]
            }
        },
        "TestKedroContext.test_missing_credentials": {
            "name": "test_missing_credentials",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_context": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "kedro-main/tests/framework/context/__init__.py": {},
    "kedro-main/tests/framework/hooks/test_manager.py": {
        "test_hook_manager_can_call_hooks_defined_in_specs": {
            "name": "test_hook_manager_can_call_hooks_defined_in_specs",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "hook_specs": [
                    "str",
                    "bool"
                ],
                "hook_name": [
                    "str"
                ],
                "hook_params": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "test_null_plugin_manager_returns_none_when_called": {
            "name": "test_null_plugin_manager_returns_none_when_called",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kedro-main/tests/framework/hooks/__init__.py": {},
    "kedro-main/tests/framework/project/test_logging.py": {
        "reset_logging": {
            "name": "reset_logging",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_logging_config": {
            "name": "test_default_logging_config",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_configure_logging": {
            "name": "test_configure_logging",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kedro-main/tests/framework/project/test_pipeline_registry.py": {
        "mock_package_name_with_pipelines_file": {
            "name": "mock_package_name_with_pipelines_file",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_pipelines_without_configure_project_is_empty": {
            "name": "test_pipelines_without_configure_project_is_empty",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_package_name_with_unimportable_pipelines_file": {
            "name": "mock_package_name_with_unimportable_pipelines_file",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "float"
                ]
            }
        },
        "test_pipelines_after_configuring_project_shows_updated_values": {
            "name": "test_pipelines_after_configuring_project_shows_updated_values",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "mock_package_name_with_pipelines_file": [
                    "str"
                ]
            }
        },
        "test_configure_project_should_not_raise_for_unimportable_pipelines": {
            "name": "test_configure_project_should_not_raise_for_unimportable_pipelines",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "mock_package_name_with_unimportable_pipelines_file": [
                    "str"
                ]
            }
        }
    },
    "kedro-main/tests/framework/project/test_settings.py": {
        "mock_package_name_with_settings_file": {
            "name": "mock_package_name_with_settings_file",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_settings_without_configure_project_shows_default_values": {
            "name": "test_settings_without_configure_project_shows_default_values",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_settings_after_configuring_project_shows_updated_values": {
            "name": "test_settings_after_configuring_project_shows_updated_values",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "mock_package_name_with_settings_file": [
                    "str"
                ]
            }
        }
    },
    "kedro-main/tests/framework/project/__init__.py": {},
    "kedro-main/tests/framework/session/conftest.py": {
        "mock_package_name": {
            "name": "mock_package_name",
            "location": 32,
            "return": [
                "str",
                "paradigm.catalog.Path",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "_write_yaml": {
            "name": "_write_yaml",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "_write_toml": {
            "name": "_write_toml",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ],
                "config": [
                    "str"
                ]
            }
        },
        "_assert_hook_call_record_has_expected_parameters": {
            "name": "_assert_hook_call_record_has_expected_parameters",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "call_record": [
                    "logging.LogRecord",
                    "str",
                    "Callable",
                    "int",
                    "Dict[int, int]",
                    "float"
                ],
                "expected_parameters": [
                    "List[str]",
                    "bool",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "_assert_pipeline_equal": {
            "name": "_assert_pipeline_equal",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "int",
                    "Callable",
                    "pathpy.core.node.Node"
                ],
                "q": [
                    "int",
                    "Callable",
                    "pathpy.core.node.Node"
                ]
            }
        },
        "local_config": {
            "name": "local_config",
            "location": 61,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Union[str, Any]]",
                "Dict[str, str]",
                "bool",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "pathlib.PurePosixPath",
                    "Union[str, int]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "config_dir": {
            "name": "config_dir",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "list"
                ],
                "local_config": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "identity_node": {
            "name": "identity_node",
            "location": 98,
            "return": [
                "int",
                "List[int]",
                "Optional[Dict]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "assert_exceptions_equal": {
            "name": "assert_exceptions_equal",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "e1": [
                    "Exception",
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "Callable[[str], str]"
                ],
                "e2": [
                    "Exception",
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "Callable[[str], str]"
                ]
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 107,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "mock_pipeline": {
            "name": "mock_pipeline",
            "location": 112,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "logs_listener": {
            "name": "logs_listener",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "project_hooks": {
            "name": "project_hooks",
            "location": 325,
            "return": [
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {}
        },
        "mock_pipelines": {
            "name": "mock_pipelines",
            "location": 331,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "List[str]"
                ],
                "mock_pipeline": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_mock_imported_settings_paths": {
            "name": "_mock_imported_settings_paths",
            "location": 346,
            "return": [
                "pathlib.Path",
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "pathlib.Path",
                    "path.Path",
                    "Tuple[str, str, str]",
                    "Optional[str]"
                ],
                "mock_settings": [
                    "str",
                    "pathlib.Path",
                    "path.Path",
                    "Tuple[str, str, str]",
                    "Optional[str]"
                ]
            }
        },
        "mock_settings": {
            "name": "mock_settings",
            "location": 357,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "pathlib2.Path",
                    "Dict[str, Sequence[str]]",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "project_hooks": [
                    "str",
                    "kata.data.io.file.FileWriter",
                    "bool"
                ]
            }
        },
        "mock_session": {
            "name": "mock_session",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "mock_settings": [
                    "str",
                    "BinaryIO",
                    "dict",
                    "List[pathlib.Path]"
                ],
                "mock_package_name": [
                    "Optional[str]",
                    "str",
                    "Union[Sequence[str], Sequence[int]]"
                ],
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "mock_validate_settings": {
            "name": "mock_validate_settings",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "LogRecorder.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LogRecorder.handle": {
            "name": "handle",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict",
                    "bool",
                    "str",
                    "queue.Queue",
                    "list"
                ]
            }
        },
        "LogsListener.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LogsListener.logs": {
            "name": "logs",
            "location": 149,
            "return": [
                "float",
                "bool",
                "tuple",
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingHooks.after_catalog_created": {
            "name": "after_catalog_created",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "catalog": [
                    "bool",
                    "str"
                ],
                "conf_catalog": [
                    "bool",
                    "str"
                ],
                "conf_creds": [
                    "bool",
                    "str"
                ],
                "feed_dict": [
                    "bool",
                    "str"
                ],
                "save_version": [
                    "bool",
                    "str"
                ],
                "load_versions": [
                    "bool",
                    "str"
                ]
            }
        },
        "LoggingHooks.before_node_run": {
            "name": "before_node_run",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "Dict[int, dict]",
                    "Optional[Dict]"
                ],
                "catalog": [
                    "str",
                    "int",
                    "Dict[int, dict]",
                    "Optional[Dict]"
                ],
                "inputs": [
                    "str",
                    "int",
                    "Dict[int, dict]",
                    "Optional[Dict]"
                ],
                "is_async": [
                    "str",
                    "int",
                    "Dict[int, dict]",
                    "Optional[Dict]"
                ],
                "session_id": [
                    "str",
                    "int",
                    "Dict[int, dict]",
                    "Optional[Dict]"
                ]
            }
        },
        "LoggingHooks.after_node_run": {
            "name": "after_node_run",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "bytes",
                    "dict",
                    "Optional[Dict]",
                    "Dict[int, dict]"
                ],
                "catalog": [
                    "int",
                    "str",
                    "bytes",
                    "dict",
                    "Optional[Dict]",
                    "Dict[int, dict]"
                ],
                "inputs": [
                    "int",
                    "str",
                    "bytes",
                    "dict",
                    "Optional[Dict]",
                    "Dict[int, dict]"
                ],
                "outputs": [
                    "int",
                    "str",
                    "bytes",
                    "dict",
                    "Optional[Dict]",
                    "Dict[int, dict]"
                ],
                "is_async": [
                    "int",
                    "str",
                    "bytes",
                    "dict",
                    "Optional[Dict]",
                    "Dict[int, dict]"
                ],
                "session_id": [
                    "int",
                    "str",
                    "bytes",
                    "dict",
                    "Optional[Dict]",
                    "Dict[int, dict]"
                ]
            }
        },
        "LoggingHooks.on_node_error": {
            "name": "on_node_error",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]",
                    "Callable",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]",
                    "Callable",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ],
                "catalog": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]",
                    "Callable",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ],
                "inputs": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]",
                    "Callable",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ],
                "is_async": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]",
                    "Callable",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ],
                "session_id": [
                    "str",
                    "Optional[str]",
                    "Union[int, str]",
                    "Callable",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "LoggingHooks.before_pipeline_run": {
            "name": "before_pipeline_run",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_params": [
                    "bool",
                    "str",
                    "dict",
                    "MutableMapping[str, Any]"
                ],
                "pipeline": [
                    "bool",
                    "str",
                    "dict",
                    "MutableMapping[str, Any]"
                ],
                "catalog": [
                    "bool",
                    "str",
                    "dict",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "LoggingHooks.after_pipeline_run": {
            "name": "after_pipeline_run",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_params": [
                    "Optional[str]",
                    "MutableMapping[str, Any]",
                    "str",
                    "bool",
                    "bytes"
                ],
                "run_result": [
                    "Optional[str]",
                    "MutableMapping[str, Any]",
                    "str",
                    "bool",
                    "bytes"
                ],
                "pipeline": [
                    "Optional[str]",
                    "MutableMapping[str, Any]",
                    "str",
                    "bool",
                    "bytes"
                ],
                "catalog": [
                    "Optional[str]",
                    "MutableMapping[str, Any]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "LoggingHooks.on_pipeline_error": {
            "name": "on_pipeline_error",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception",
                    "kedro.io.DataCatalog",
                    "kedro.pipeline.Pipeline",
                    "Dict[str, Any]"
                ],
                "run_params": [
                    "Exception",
                    "kedro.io.DataCatalog",
                    "kedro.pipeline.Pipeline",
                    "Dict[str, Any]"
                ],
                "pipeline": [
                    "Exception",
                    "kedro.io.DataCatalog",
                    "kedro.pipeline.Pipeline",
                    "Dict[str, Any]"
                ],
                "catalog": [
                    "Exception",
                    "kedro.io.DataCatalog",
                    "kedro.pipeline.Pipeline",
                    "Dict[str, Any]"
                ]
            }
        },
        "LoggingHooks.before_dataset_loaded": {
            "name": "before_dataset_loaded",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "LoggingHooks.after_dataset_loaded": {
            "name": "after_dataset_loaded",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str",
                    "logging.Logger",
                    "dict",
                    "bytes",
                    "Dict[str, int]"
                ],
                "data": [
                    "str",
                    "logging.Logger",
                    "dict",
                    "bytes",
                    "Dict[str, int]"
                ]
            }
        },
        "LoggingHooks.before_dataset_saved": {
            "name": "before_dataset_saved",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str",
                    "dict",
                    "logging.Logger",
                    "bytes"
                ],
                "data": [
                    "str",
                    "dict",
                    "logging.Logger",
                    "bytes"
                ]
            }
        },
        "LoggingHooks.after_dataset_saved": {
            "name": "after_dataset_saved",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_name": [
                    "str",
                    "dict",
                    "logging.Logger",
                    "bytes"
                ],
                "data": [
                    "str",
                    "dict",
                    "logging.Logger",
                    "bytes"
                ]
            }
        },
        "LoggingHooks.after_context_created": {
            "name": "after_context_created",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "mock_pipelines.mock_register_pipelines": {
            "name": "mock_register_pipelines",
            "location": 332,
            "return": [
                "int",
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "kedro-main/tests/framework/session/test_session.py": {
        "mock_context_class": {
            "name": "mock_context_class",
            "location": 41,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "_mock_imported_settings_paths": {
            "name": "_mock_imported_settings_paths",
            "location": 45,
            "return": [
                "pathlib.Path",
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "pathlib.Path",
                    "path.Path",
                    "Tuple[str, str, str]",
                    "Optional[str]"
                ],
                "mock_settings": [
                    "str",
                    "pathlib.Path",
                    "path.Path",
                    "Tuple[str, str, str]",
                    "Optional[str]"
                ]
            }
        },
        "mock_settings": {
            "name": "mock_settings",
            "location": 55,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "mock_settings_context_class": {
            "name": "mock_settings_context_class",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "pathlib.Path"
                ],
                "mock_context_class": [
                    "int",
                    "str",
                    "bool",
                    "Callable[[int, int], None]"
                ]
            }
        },
        "mock_settings_custom_context_class": {
            "name": "mock_settings_custom_context_class",
            "location": 70,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "static_frame.core.store.StoreConfigMapInitializer",
                "Optional[str]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "mock_settings_custom_config_loader_class": {
            "name": "mock_settings_custom_config_loader_class",
            "location": 81,
            "return": [
                "str",
                "Optional[str]",
                "virgene.config.Config",
                "pathlib.Path",
                "Optional[IO[str]]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Optional[str]",
                    "pathlib2.Path"
                ]
            }
        },
        "mock_settings_file_bad_config_loader_class": {
            "name": "mock_settings_file_bad_config_loader_class",
            "location": 94,
            "return": [
                "List[Tuple[int]]",
                "pathlib.Path",
                "str",
                "List[T]",
                "List[int]",
                "Set[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "mock_settings_file_bad_session_store_class": {
            "name": "mock_settings_file_bad_session_store_class",
            "location": 108,
            "return": [
                "List[Tuple[int]]",
                "pathlib.Path",
                "List[T]",
                "List[int]",
                "Set[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "List[str]",
                    "Union[str, Pattern]"
                ]
            }
        },
        "mock_settings_bad_session_store_args": {
            "name": "mock_settings_bad_session_store_args",
            "location": 122,
            "return": [
                "str",
                "Callable",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "mock_settings_uncaught_session_store_exception": {
            "name": "mock_settings_uncaught_session_store_exception",
            "location": 132,
            "return": [
                "str",
                "int",
                "Iterable[int]",
                "Iterable"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool",
                    "Union[bool, str]"
                ]
            }
        },
        "mock_settings_shelve_session_store": {
            "name": "mock_settings_shelve_session_store",
            "location": 143,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "Optional[int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "mocker": [
                    "Optional[str]",
                    "str",
                    "pathlib2.Path",
                    "pathlib.Path"
                ],
                "fake_project": [
                    "str",
                    "pathlib.Path",
                    "dict",
                    "MutableMapping[str, str]",
                    "bool"
                ]
            }
        },
        "fake_session_id": {
            "name": "fake_session_id",
            "location": 158,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "Iterable[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "fake_project": {
            "name": "fake_project",
            "location": 167,
            "return": [
                "str",
                "Iterable[str]",
                "Union[pathlib.Path, str]",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "mock_package_name": [
                    "str"
                ]
            }
        },
        "fake_username": {
            "name": "fake_username",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "Iterable[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "fake_project_with_logging_file_handler": {
            "name": "fake_project_with_logging_file_handler",
            "location": 837,
            "return": [
                "pyramid.config.Configurator",
                "Path",
                "dict"
            ],
            "arguments": {
                "fake_project": [
                    "str",
                    "IO[bytes]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "test_setup_logging_using_absolute_path": {
            "name": "test_setup_logging_using_absolute_path",
            "location": 848,
            "return": [
                ""
            ],
            "arguments": {
                "fake_project_with_logging_file_handler": [
                    "str",
                    "bool",
                    "virgene.config.Config",
                    "baseplate.lib.config.RawConfig"
                ],
                "mocker": [
                    "str",
                    "List[str]",
                    "List[pathlib.Path]"
                ],
                "mock_package_name": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_create": {
            "name": "test_create",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "mock_context_class": [
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "fake_session_id": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "bool"
                ],
                "env": [
                    "str"
                ],
                "extra_params": [
                    "str"
                ],
                "fake_username": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "pathlib.Path"
                ]
            }
        },
        "TestKedroSession.test_create_multiple_sessions": {
            "name": "test_create_multiple_sessions",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_create_no_env_extra_params": {
            "name": "test_create_no_env_extra_params",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "mock_context_class": [],
                "fake_session_id": [
                    "str",
                    "Optional[str]"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "bool"
                ],
                "fake_username": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "TestKedroSession.test_load_context_with_envvar": {
            "name": "test_load_context_with_envvar",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "monkeypatch": [
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_load_config_loader_with_envvar": {
            "name": "test_load_config_loader_with_envvar",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "monkeypatch": [
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_load_context_custom_context_class": {
            "name": "test_load_context_custom_context_class",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_load_config_loader_custom_config_loader_class": {
            "name": "test_load_config_loader_custom_config_loader_class",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_broken_config_loader": {
            "name": "test_broken_config_loader",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_settings_file_bad_config_loader_class": [
                    "path.Path",
                    "backup.config.Config"
                ]
            }
        },
        "TestKedroSession.test_no_logging_config": {
            "name": "test_no_logging_config",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "caplog": [
                    "logging.RootLogger",
                    "logging.FileHandler",
                    "logging.StreamHandler",
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_default_store": {
            "name": "test_default_store",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "fake_session_id": [
                    "str",
                    "int"
                ],
                "caplog": [
                    "logging.FileHandler",
                    "logging.Formatter",
                    "logging.Logger"
                ],
                "mock_package_name": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_shelve_store": {
            "name": "test_shelve_store",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str",
                    "pathlib.Path"
                ],
                "fake_session_id": [
                    "str",
                    "Optional[str]"
                ],
                "caplog": [
                    "int",
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": []
            }
        },
        "TestKedroSession.test_wrong_store_type": {
            "name": "test_wrong_store_type",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_settings_file_bad_session_store_class": [
                    "backup.config.Config",
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "TestKedroSession.test_wrong_store_args": {
            "name": "test_wrong_store_args",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_store_uncaught_error": {
            "name": "test_store_uncaught_error",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "fake_session_id": [],
                "mock_settings_uncaught_session_store_exception": [],
                "mock_package_name": [
                    "str"
                ]
            }
        },
        "TestKedroSession.test_git_describe": {
            "name": "test_git_describe",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str",
                    "Optional[str]"
                ],
                "fake_commit_hash": [],
                "fake_git_status": [],
                "mock_package_name": [
                    "str",
                    "Optional[str]"
                ],
                "mocker": []
            }
        },
        "TestKedroSession.test_git_describe_error": {
            "name": "test_git_describe_error",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "exception": [
                    "str",
                    "dict",
                    "Tuple[str, str]"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "dict",
                    "Tuple[str, str]"
                ],
                "caplog": [
                    "logging.RootLogger",
                    "logging.FileHandler",
                    "logging.StreamHandler",
                    "logging.Formatter"
                ]
            }
        },
        "TestKedroSession.test_get_username_error": {
            "name": "test_get_username_error",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "pathlib.Path"
                ],
                "caplog": [
                    "logging.FileHandler",
                    "logging.StreamHandler",
                    "logging.Logger"
                ]
            }
        },
        "TestKedroSession.test_log_error": {
            "name": "test_log_error",
            "location": 522,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str",
                    "bool"
                ],
                "mock_package_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestKedroSession.test_run": {
            "name": "test_run",
            "location": 539,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "fake_session_id": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "fake_pipeline_name": [
                    "str"
                ],
                "mock_context_class": [
                    "List[str]",
                    "str",
                    "Union[Literal, str]"
                ],
                "mock_package_name": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "mocker": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestKedroSession.test_run_multiple_times": {
            "name": "test_run_multiple_times",
            "location": 604,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "fake_session_id": [
                    "str",
                    "int"
                ],
                "fake_pipeline_name": [
                    "str",
                    "Optional[str]",
                    "Union[Sequence[str], Sequence[int]]"
                ],
                "mock_context_class": [
                    "List[str]",
                    "bool"
                ],
                "mock_package_name": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "mocker": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestKedroSession.test_run_non_existent_pipeline": {
            "name": "test_run_non_existent_pipeline",
            "location": 674,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestKedroSession.test_run_exception": {
            "name": "test_run_exception",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "fake_session_id": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "fake_pipeline_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "mock_context_class": [
                    "List[str]",
                    "str",
                    "Union[Literal, str]",
                    "bool"
                ],
                "mock_package_name": [
                    "str",
                    "bool",
                    "azure.datalake.store.core.AzureDLFileSystem",
                    "int"
                ],
                "mocker": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestKedroSession.test_run_broken_pipeline_multiple_times": {
            "name": "test_run_broken_pipeline_multiple_times",
            "location": 761,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fake_project": [
                    "str"
                ],
                "fake_session_id": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "fake_pipeline_name": [
                    "str",
                    "Optional[str]"
                ],
                "mock_context_class": [
                    "List[str]",
                    "bool",
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "kedro-main/tests/framework/session/test_session_extension_hooks.py": {
        "broken_node": {
            "name": "broken_node",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "broken_pipeline": {
            "name": "broken_pipeline",
            "location": 40,
            "return": [
                "str",
                "bool",
                "pandas.DataFrame",
                "List[int]"
            ],
            "arguments": {}
        },
        "mock_broken_pipelines": {
            "name": "mock_broken_pipelines",
            "location": 51,
            "return": [
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "bool",
                    "logging.Logger",
                    "str"
                ],
                "broken_pipeline": [
                    "str",
                    "Dict[str, BinaryIO]",
                    "bool",
                    "float"
                ]
            }
        },
        "mock_session_with_before_node_run_hooks": {
            "name": "mock_session_with_before_node_run_hooks",
            "location": 421,
            "return": [
                "str",
                "io.TextIO",
                "Optional[\"permissions_doc\"]"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "project_hooks": [
                    "str",
                    "dict",
                    "bool"
                ],
                "mock_package_name": [
                    "str"
                ],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "mock_session_with_broken_before_node_run_hooks": {
            "name": "mock_session_with_broken_before_node_run_hooks",
            "location": 439,
            "return": [
                "str",
                "Optional[\"permissions_doc\"]",
                "io.TextIO"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "project_hooks": [
                    "str",
                    "dict",
                    "bool"
                ],
                "mock_package_name": [
                    "str"
                ],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "sample_node": {
            "name": "sample_node",
            "location": 521,
            "return": [
                "blib2to3.pytree.Node",
                "int",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "memory_catalog": {
            "name": "memory_catalog",
            "location": 537,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "mock_broken_pipelines.mock_get_pipelines_registry_callable": {
            "name": "mock_get_pipelines_registry_callable",
            "location": 52,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {}
        },
        "TestCatalogHooks.test_after_catalog_created_hook": {
            "name": "test_after_catalog_created_hook",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "caplog": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "TestCatalogHooks.test_after_catalog_created_hook_on_session_run": {
            "name": "test_after_catalog_created_hook_on_session_run",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "mock_session": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "dummy_dataframe": [
                    "io.BytesIO",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "caplog": []
            }
        },
        "TestPipelineHooks.test_before_and_after_pipeline_run_hooks": {
            "name": "test_before_and_after_pipeline_run_hooks",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "Dict[str, Any]",
                    "Dict[str, Sequence[str]]"
                ],
                "mock_session": [],
                "dummy_dataframe": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "io.BytesIO",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestPipelineHooks.test_on_pipeline_error_hook": {
            "name": "test_on_pipeline_error_hook",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": [],
                "mock_session": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestPipelineHooks.test_on_node_error_hook_sequential_runner": {
            "name": "test_on_node_error_hook_sequential_runner",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": [],
                "mock_session": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestNodeHooks.test_before_and_after_node_run_hooks_sequential_runner": {
            "name": "test_before_and_after_node_run_hooks_sequential_runner",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": [],
                "mock_session": [],
                "dummy_dataframe": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestNodeHooks.test_on_node_error_hook_parallel_runner": {
            "name": "test_on_node_error_hook_parallel_runner",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session": [],
                "logs_listener": []
            }
        },
        "TestNodeHooks.test_before_and_after_node_run_hooks_parallel_runner": {
            "name": "test_before_and_after_node_run_hooks_parallel_runner",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session": [],
                "logs_listener": [],
                "dummy_dataframe": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestDataSetHooks.test_before_and_after_dataset_loaded_hooks_sequential_runner": {
            "name": "test_before_and_after_dataset_loaded_hooks_sequential_runner",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session": [],
                "caplog": [
                    "bytes"
                ],
                "dummy_dataframe": []
            }
        },
        "TestDataSetHooks.test_before_and_after_dataset_loaded_hooks_parallel_runner": {
            "name": "test_before_and_after_dataset_loaded_hooks_parallel_runner",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session": [],
                "logs_listener": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str"
                ],
                "dummy_dataframe": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestDataSetHooks.test_before_and_after_dataset_saved_hooks_sequential_runner": {
            "name": "test_before_and_after_dataset_saved_hooks_sequential_runner",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session": [],
                "caplog": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str"
                ],
                "dummy_dataframe": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestDataSetHooks.test_before_and_after_dataset_saved_hooks_parallel_runner": {
            "name": "test_before_and_after_dataset_saved_hooks_parallel_runner",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session": [],
                "logs_listener": [
                    "str"
                ],
                "dummy_dataframe": [
                    "bytes"
                ]
            }
        },
        "TestBeforeNodeRunHookWithInputUpdates.test_correct_input_update": {
            "name": "test_correct_input_update",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_with_before_node_run_hooks": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "dummy_dataframe": [
                    "Dict[str, Sequence[str]]",
                    "io.BytesIO"
                ]
            }
        },
        "TestBeforeNodeRunHookWithInputUpdates.test_correct_input_update_parallel": {
            "name": "test_correct_input_update_parallel",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_with_before_node_run_hooks": [],
                "dummy_dataframe": [
                    "Dict[str, Sequence[str]]",
                    "io.BytesIO"
                ]
            }
        },
        "TestBeforeNodeRunHookWithInputUpdates.test_broken_input_update": {
            "name": "test_broken_input_update",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_with_broken_before_node_run_hooks": [],
                "dummy_dataframe": [
                    "Dict[str, Sequence[str]]",
                    "io.BytesIO",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestBeforeNodeRunHookWithInputUpdates.test_broken_input_update_parallel": {
            "name": "test_broken_input_update_parallel",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_with_broken_before_node_run_hooks": [],
                "dummy_dataframe": [
                    "Dict[str, Sequence[str]]",
                    "io.BytesIO",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "sample_node.wait_and_identity": {
            "name": "wait_and_identity",
            "location": 522,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "LogCatalog.load": {
            "name": "load",
            "location": 530,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Callable[..., T]",
                    "Set[str]"
                ],
                "version": [
                    "str",
                    "bool",
                    "Callable[..., T]",
                    "Set[str]"
                ]
            }
        },
        "TestAsyncNodeDatasetHooks.test_after_dataset_load_hook_async": {
            "name": "test_after_dataset_load_hook_async",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_catalog": [],
                "mock_session": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "sample_node": [],
                "logs_listener": [
                    "int",
                    "str"
                ]
            }
        },
        "TestKedroContextSpecsHook.test_after_context_created_hook": {
            "name": "test_after_context_created_hook",
            "location": 569,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session": [],
                "caplog": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "mock_session_with_before_node_run_hooks.BeforeNodeRunHook.before_node_run": {
            "name": "before_node_run",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "mock_session_with_broken_before_node_run_hooks.BeforeNodeRunHook.before_node_run": {
            "name": "before_node_run",
            "location": 446,
            "return": [
                "tests.basilisp.helpers.CompileFn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/framework/session/test_session_hook_manager.py": {
        "naughty_plugin": {
            "name": "naughty_plugin",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "good_plugin": {
            "name": "good_plugin",
            "location": 21,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "mock_settings_with_disabled_hooks": {
            "name": "mock_settings_with_disabled_hooks",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "Optional[str]"
                ],
                "project_hooks": [
                    "str",
                    "bool"
                ],
                "naughty_plugin": [
                    "str"
                ]
            }
        },
        "TestSessionHookManager.test_assert_register_hooks": {
            "name": "test_assert_register_hooks",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_hooks": [
                    "dict"
                ],
                "mock_session": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestSessionHookManager.test_calling_register_hooks_twice": {
            "name": "test_calling_register_hooks_twice",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_hooks": [
                    "tests.e2e.Helper",
                    "IO[str]"
                ],
                "mock_session": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestSessionHookManager.test_hooks_registered_when_session_created": {
            "name": "test_hooks_registered_when_session_created",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "request": [
                    "str"
                ],
                "caplog": [
                    "logging.RootLogger",
                    "logging.FileHandler",
                    "logging.StreamHandler"
                ],
                "project_hooks": [
                    "str",
                    "Dict[str, Any]"
                ],
                "num_plugins": [
                    "int"
                ]
            }
        },
        "TestSessionHookManager.test_disabling_auto_discovered_hooks": {
            "name": "test_disabling_auto_discovered_hooks",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "list"
                ],
                "caplog": [
                    "str",
                    "logging.RootLogger",
                    "logging.Logger",
                    "logging.FileHandler"
                ],
                "tmp_path": [
                    "str"
                ],
                "mock_package_name": [
                    "str"
                ],
                "naughty_plugin": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "good_plugin": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "kedro-main/tests/framework/session/test_store.py": {
        "shelve_path": {
            "name": "shelve_path",
            "location": 53,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "Optional[str]",
                "Union[str, pathlib.Path]",
                "pathlib.PosixPath"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestBaseStore.test_init": {
            "name": "test_init",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "logging.Logger",
                    "logging.FileHandler"
                ]
            }
        },
        "TestBaseStore.test_save": {
            "name": "test_save",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "TestShelveStore.test_empty": {
            "name": "test_empty",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "shelve_path": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "TestShelveStore.test_save": {
            "name": "test_save",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "shelve_path": [
                    "Dict[str, cerulean.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "TestShelveStore.test_update": {
            "name": "test_update",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "shelve_path": [
                    "pathlib.Path",
                    "Callable",
                    "path.Path"
                ]
            }
        }
    },
    "kedro-main/tests/framework/session/__init__.py": {},
    "kedro-main/tests/io/test_cached_dataset.py": {
        "cached_ds": {
            "name": "cached_ds",
            "location": 38,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "TestCachedDataset.test_load_empty": {
            "name": "test_load_empty",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cached_ds": [
                    "str"
                ]
            }
        },
        "TestCachedDataset.test_save_load": {
            "name": "test_save_load",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cached_ds": [
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "TestCachedDataset.test_save_load_caching": {
            "name": "test_save_load_caching",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "float"
                ]
            }
        },
        "TestCachedDataset.test_load_empty_cache": {
            "name": "test_load_empty_cache",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Dict[str, Sequence[Any]]",
                    "set"
                ]
            }
        },
        "TestCachedDataset.test_from_yaml": {
            "name": "test_from_yaml",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ]
            }
        },
        "TestCachedDataset.test_bad_argument": {
            "name": "test_bad_argument",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachedDataset.test_config_good_version": {
            "name": "test_config_good_version",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachedDataset.test_config_bad_version": {
            "name": "test_config_bad_version",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachedDataset.test_exists": {
            "name": "test_exists",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cached_ds": [
                    "str",
                    "int"
                ]
            }
        },
        "TestCachedDataset.test_pickle": {
            "name": "test_pickle",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cached_ds": [
                    "str",
                    "Final",
                    "Type"
                ],
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "TestCachedDataset.test_str": {
            "name": "test_str",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachedDataset.test_release": {
            "name": "test_release",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cached_ds": [
                    "str",
                    "Union[str, bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestCachedDataset.test_copy_mode": {
            "name": "test_copy_mode",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "kedro-main/tests/io/test_core.py": {
        "MyDataSet.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "var": [
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "MyDataSet._describe": {
            "name": "_describe",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyDataSet._load": {
            "name": "_load",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyDataSet._save": {
            "name": "_save",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "List[Dict]",
                    "List[Tuple]",
                    "int",
                    "bytes"
                ]
            }
        },
        "TestCoreFunctions.test_str_representation": {
            "name": "test_str_representation",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "var": [
                    "Set[int]",
                    "str",
                    "list"
                ]
            }
        },
        "TestCoreFunctions.test_str_representation_none": {
            "name": "test_str_representation_none",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoreFunctions.test_get_filepath_str": {
            "name": "test_get_filepath_str",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoreFunctions.test_parse_filepath": {
            "name": "test_parse_filepath",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "tuple",
                    "dict",
                    "pathpy.core.network.Network",
                    "float"
                ],
                "expected_result": [
                    "int",
                    "tuple",
                    "dict",
                    "pathpy.core.network.Network",
                    "float"
                ]
            }
        }
    },
    "kedro-main/tests/io/test_data_catalog.py": {
        "filepath": {
            "name": "filepath",
            "location": 26,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "sane_config": {
            "name": "sane_config",
            "location": 36,
            "return": [],
            "arguments": {
                "filepath": []
            }
        },
        "sane_config_with_nested_creds": {
            "name": "sane_config_with_nested_creds",
            "location": 54,
            "return": [],
            "arguments": {
                "sane_config": []
            }
        },
        "sane_config_with_tracking_ds": {
            "name": "sane_config_with_tracking_ds",
            "location": 69,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        },
        "data_set": {
            "name": "data_set",
            "location": 85,
            "return": [],
            "arguments": {
                "filepath": []
            }
        },
        "multi_catalog": {
            "name": "multi_catalog",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "memory_catalog": {
            "name": "memory_catalog",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "conflicting_feed_dict": {
            "name": "conflicting_feed_dict",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "bad_config": {
            "name": "bad_config",
            "location": 126,
            "return": [],
            "arguments": {
                "filepath": []
            }
        },
        "data_catalog": {
            "name": "data_catalog",
            "location": 133,
            "return": [],
            "arguments": {
                "data_set": []
            }
        },
        "data_catalog_from_config": {
            "name": "data_catalog_from_config",
            "location": 138,
            "return": [],
            "arguments": {
                "sane_config": []
            }
        },
        "BadDataSet.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "BadDataSet._load": {
            "name": "_load",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadDataSet._save": {
            "name": "_save",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BadDataSet._describe": {
            "name": "_describe",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataCatalog.test_save_and_load": {
            "name": "test_save_and_load",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog": [],
                "dummy_dataframe": []
            }
        },
        "TestDataCatalog.test_add_save_and_load": {
            "name": "test_add_save_and_load",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "data_set": [],
                "dummy_dataframe": []
            }
        },
        "TestDataCatalog.test_add_all_save_and_load": {
            "name": "test_add_all_save_and_load",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "data_set": [],
                "dummy_dataframe": []
            }
        },
        "TestDataCatalog.test_load_error": {
            "name": "test_load_error",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog": []
            }
        },
        "TestDataCatalog.test_add_data_set_twice": {
            "name": "test_add_data_set_twice",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog": [],
                "data_set": []
            }
        },
        "TestDataCatalog.test_load_from_unregistered": {
            "name": "test_load_from_unregistered",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataCatalog.test_save_to_unregistered": {
            "name": "test_save_to_unregistered",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "dummy_dataframe": []
            }
        },
        "TestDataCatalog.test_feed_dict": {
            "name": "test_feed_dict",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "memory_catalog": [],
                "conflicting_feed_dict": []
            }
        },
        "TestDataCatalog.test_exists": {
            "name": "test_exists",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog": [],
                "dummy_dataframe": []
            }
        },
        "TestDataCatalog.test_exists_not_implemented": {
            "name": "test_exists_not_implemented",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "caplog": []
            }
        },
        "TestDataCatalog.test_exists_invalid": {
            "name": "test_exists_invalid",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog": []
            }
        },
        "TestDataCatalog.test_release_unregistered": {
            "name": "test_release_unregistered",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog": []
            }
        },
        "TestDataCatalog.test_release_unregistered_typo": {
            "name": "test_release_unregistered_typo",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog": []
            }
        },
        "TestDataCatalog.test_multi_catalog_list": {
            "name": "test_multi_catalog_list",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "multi_catalog": []
            }
        },
        "TestDataCatalog.test_multi_catalog_list_regex": {
            "name": "test_multi_catalog_list_regex",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "multi_catalog": [],
                "pattern": [],
                "expected": []
            }
        },
        "TestDataCatalog.test_multi_catalog_list_bad_regex": {
            "name": "test_multi_catalog_list_bad_regex",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "multi_catalog": []
            }
        },
        "TestDataCatalog.test_eq": {
            "name": "test_eq",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "multi_catalog": [],
                "data_catalog": []
            }
        },
        "TestDataCatalog.test_datasets_on_init": {
            "name": "test_datasets_on_init",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog_from_config": []
            }
        },
        "TestDataCatalog.test_datasets_on_add": {
            "name": "test_datasets_on_add",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog_from_config": []
            }
        },
        "TestDataCatalog.test_adding_datasets_not_allowed": {
            "name": "test_adding_datasets_not_allowed",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog_from_config": []
            }
        },
        "TestDataCatalog.test_add_feed_dict_should_grow_linearly": {
            "name": "test_add_feed_dict_should_grow_linearly",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": [],
                "data_catalog_from_config": []
            }
        },
        "TestDataCatalog.test_mutating_datasets_not_allowed": {
            "name": "test_mutating_datasets_not_allowed",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog_from_config": []
            }
        },
        "TestDataCatalog.test_confirm": {
            "name": "test_confirm",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": [],
                "caplog": []
            }
        },
        "TestDataCatalog.test_bad_confirm": {
            "name": "test_bad_confirm",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog": [],
                "dataset_name": [],
                "error_pattern": []
            }
        },
        "TestDataCatalog.test_layers": {
            "name": "test_layers",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog": [],
                "data_catalog_from_config": []
            }
        },
        "TestDataCatalogFromConfig.test_from_sane_config": {
            "name": "test_from_sane_config",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "data_catalog_from_config": [],
                "dummy_dataframe": []
            }
        },
        "TestDataCatalogFromConfig.test_config_missing_type": {
            "name": "test_config_missing_type",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogFromConfig.test_config_invalid_module": {
            "name": "test_config_invalid_module",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogFromConfig.test_config_relative_import": {
            "name": "test_config_relative_import",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogFromConfig.test_config_import_extras": {
            "name": "test_config_import_extras",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogFromConfig.test_config_missing_class": {
            "name": "test_config_missing_class",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogFromConfig.test_config_invalid_data_set": {
            "name": "test_config_invalid_data_set",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogFromConfig.test_config_invalid_arguments": {
            "name": "test_config_invalid_arguments",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogFromConfig.test_empty_config": {
            "name": "test_empty_config",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataCatalogFromConfig.test_missing_credentials": {
            "name": "test_missing_credentials",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogFromConfig.test_link_credentials": {
            "name": "test_link_credentials",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": [],
                "mocker": []
            }
        },
        "TestDataCatalogFromConfig.test_nested_credentials": {
            "name": "test_nested_credentials",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config_with_nested_creds": [],
                "mocker": []
            }
        },
        "TestDataCatalogFromConfig.test_missing_nested_credentials": {
            "name": "test_missing_nested_credentials",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config_with_nested_creds": []
            }
        },
        "TestDataCatalogFromConfig.test_missing_dependency": {
            "name": "test_missing_dependency",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": [],
                "mocker": []
            }
        },
        "TestDataCatalogFromConfig.test_idempotent_catalog": {
            "name": "test_idempotent_catalog",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogFromConfig.test_error_dataset_init": {
            "name": "test_error_dataset_init",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "bad_config": []
            }
        },
        "TestDataCatalogFromConfig.test_confirm": {
            "name": "test_confirm",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": [],
                "caplog": [],
                "mocker": []
            }
        },
        "TestDataCatalogFromConfig.test_bad_confirm": {
            "name": "test_bad_confirm",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": [],
                "dataset_name": [],
                "pattern": []
            }
        },
        "TestDataCatalogVersioned.test_from_sane_config_versioned": {
            "name": "test_from_sane_config_versioned",
            "location": 523,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": [],
                "dummy_dataframe": []
            }
        },
        "TestDataCatalogVersioned.test_from_sane_config_versioned_warn": {
            "name": "test_from_sane_config_versioned_warn",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "caplog": [],
                "sane_config": [],
                "versioned": []
            }
        },
        "TestDataCatalogVersioned.test_from_sane_config_load_versions_warn": {
            "name": "test_from_sane_config_load_versions_warn",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": []
            }
        },
        "TestDataCatalogVersioned.test_compare_tracking_and_other_dataset_versioned": {
            "name": "test_compare_tracking_and_other_dataset_versioned",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config_with_tracking_ds": [],
                "dummy_dataframe": []
            }
        },
        "TestDataCatalogVersioned.test_load_version": {
            "name": "test_load_version",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": [],
                "dummy_dataframe": [],
                "mocker": []
            }
        },
        "TestDataCatalogVersioned.test_load_version_on_unversioned_dataset": {
            "name": "test_load_version_on_unversioned_dataset",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "sane_config": [],
                "dummy_dataframe": [],
                "mocker": []
            }
        },
        "TestDataCatalogVersioned.test_replacing_nonword_characters": {
            "name": "test_replacing_nonword_characters",
            "location": 640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataCatalogFromConfig.test_missing_dependency.dummy_load": {
            "name": "dummy_load",
            "location": 464,
            "return": [],
            "arguments": {
                "obj_path": []
            }
        }
    },
    "kedro-main/tests/io/test_incremental_dataset.py": {
        "partitioned_data_pandas": {
            "name": "partitioned_data_pandas",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "local_csvs": {
            "name": "local_csvs",
            "location": 31,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "pathlib.Path"
                ],
                "partitioned_data_pandas": [
                    "dict",
                    "str",
                    "int",
                    "pathlib.Path",
                    "Optional[Dict[str, Any]]",
                    "List[List[str]]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "dummy_gt_func": {
            "name": "dummy_gt_func",
            "location": 56,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "value1": [
                    "str",
                    "Union[str]"
                ],
                "value2": [
                    "str",
                    "Union[str]"
                ]
            }
        },
        "dummy_lt_func": {
            "name": "dummy_lt_func",
            "location": 60,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "value1": [
                    "str",
                    "Union[str]"
                ],
                "value2": [
                    "str",
                    "Union[str]"
                ]
            }
        },
        "mocked_s3_bucket": {
            "name": "mocked_s3_bucket",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mocked_csvs_in_s3": {
            "name": "mocked_csvs_in_s3",
            "location": 362,
            "return": [
                "str",
                "Union[int, str]"
            ],
            "arguments": {
                "mocked_s3_bucket": [
                    "str"
                ],
                "partitioned_data_pandas": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "DummyDataSet.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "DummyDataSet._describe": {
            "name": "_describe",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyDataSet._load": {
            "name": "_load",
            "location": 49,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyDataSet._save": {
            "name": "_save",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pandas.DataFrame",
                    "List[Dict]",
                    "List[Tuple]",
                    "int",
                    "bytes"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_load_and_confirm": {
            "name": "test_load_and_confirm",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "local_csvs": [
                    "Union[str, IO]",
                    "pathlib.Path",
                    "Tuple[int, int]"
                ],
                "partitioned_data_pandas": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_save": {
            "name": "test_save",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "local_csvs": []
            }
        },
        "TestIncrementalDataSetLocal.test_filename_suffix": {
            "name": "test_filename_suffix",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename_suffix": [
                    "int",
                    "str",
                    "Optional[Union[str, pathlib.Path]]"
                ],
                "expected_partitions": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "local_csvs": [
                    "int",
                    "str",
                    "Optional[Union[str, pathlib.Path]]"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_force_checkpoint_no_checkpoint_file": {
            "name": "test_force_checkpoint_no_checkpoint_file",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "forced_checkpoint": [
                    "str",
                    "int",
                    "Optional[Union[str, pathlib.Path]]"
                ],
                "expected_partitions": [
                    "str"
                ],
                "local_csvs": [
                    "pathlib.Path",
                    "str",
                    "Optional[Union[str, pathlib.Path]]"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_force_checkpoint_checkpoint_file_exists": {
            "name": "test_force_checkpoint_checkpoint_file_exists",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "forced_checkpoint": [
                    "str",
                    "int",
                    "Optional[Union[str, pathlib.Path]]"
                ],
                "expected_partitions": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "local_csvs": [
                    "pathlib.Path",
                    "str",
                    "float"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_force_checkpoint_no_partitions": {
            "name": "test_force_checkpoint_no_partitions",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "forced_checkpoint": [
                    "pathlib.Path",
                    "int"
                ],
                "local_csvs": [
                    "pathlib.Path"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_checkpoint_path": {
            "name": "test_checkpoint_path",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "local_csvs": [
                    "pathlib.Path",
                    "TextIO",
                    "Union[pathlib.Path, str]"
                ],
                "partitioned_data_pandas": [
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_checkpoint_type": {
            "name": "test_checkpoint_type",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path"
                ],
                "checkpoint_config": [
                    "pathlib.Path"
                ],
                "expected_checkpoint_class": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Dict[Any, int]"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_version_not_allowed": {
            "name": "test_version_not_allowed",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "checkpoint_config": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "error_pattern": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_credentials": {
            "name": "test_credentials",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pds_config": [
                    "pathlib.Path"
                ],
                "fs_creds": [],
                "dataset_creds": [
                    "backup.util.GlobalInfo"
                ],
                "checkpoint_creds": [
                    "backup.util.GlobalInfo"
                ]
            }
        },
        "TestIncrementalDataSetLocal.test_comparison_func": {
            "name": "test_comparison_func",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "comparison_func": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "expected_partitions": [
                    "str",
                    "OrderedDict",
                    "Dict[str, Any]",
                    "Callable[[str], T]"
                ],
                "local_csvs": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_load_and_confirm": {
            "name": "test_load_and_confirm",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_csvs_in_s3": [
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "experimental.util.alice.alice_pb2.RunRequest",
                    "Dict[str, Any]",
                    "str"
                ],
                "partitioned_data_pandas": [
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "experimental.util.alice.alice_pb2.RunRequest",
                    "bytes",
                    "str"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_load_and_confirm_s3a": {
            "name": "test_load_and_confirm_s3a",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_csvs_in_s3": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "io.BytesIO"
                ],
                "partitioned_data_pandas": [
                    "bytes",
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ],
                "mocker": [
                    "Dict[str, Sequence[Any]]",
                    "pandas.DataFrame"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_force_checkpoint_no_checkpoint_file": {
            "name": "test_force_checkpoint_no_checkpoint_file",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "forced_checkpoint": [
                    "str"
                ],
                "expected_partitions": [
                    "str"
                ],
                "mocked_csvs_in_s3": [
                    "str"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_force_checkpoint_checkpoint_file_exists": {
            "name": "test_force_checkpoint_checkpoint_file_exists",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "forced_checkpoint": [
                    "str"
                ],
                "expected_partitions": [
                    "int",
                    "str"
                ],
                "mocked_csvs_in_s3": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_force_checkpoint_no_partitions": {
            "name": "test_force_checkpoint_no_partitions",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "forced_checkpoint": [
                    "str"
                ],
                "mocked_csvs_in_s3": [
                    "str"
                ]
            }
        }
    },
    "kedro-main/tests/io/test_lambda_dataset.py": {
        "mocked_save": {
            "name": "mocked_save",
            "location": 7,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mocker": [
                    "Callable[[bytes], None]",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "mocked_data_set": {
            "name": "mocked_data_set",
            "location": 12,
            "return": [
                "Callable",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "mocked_save": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_data_set_describe": {
            "name": "test_data_set_describe",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_data_set_describe._dummy_load": {
            "name": "_dummy_load",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_data_set_describe._dummy_save": {
            "name": "_dummy_save",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_data_set_describe._dummy_exists": {
            "name": "_dummy_exists",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_data_set_describe._dummy_release": {
            "name": "_dummy_release",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestLambdaDataSetLoad.test_load_invocation": {
            "name": "test_load_invocation",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestLambdaDataSetLoad.test_load_raises_error": {
            "name": "test_load_raises_error",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaDataSetLoad.test_load_undefined": {
            "name": "test_load_undefined",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaDataSetLoad.test_load_not_callable": {
            "name": "test_load_not_callable",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaDataSetSave.test_save_invocation": {
            "name": "test_save_invocation",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_save": [],
                "mocked_data_set": [
                    "str"
                ]
            }
        },
        "TestLambdaDataSetSave.test_save_raises_error": {
            "name": "test_save_raises_error",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_save": [],
                "mocked_data_set": []
            }
        },
        "TestLambdaDataSetSave.test_save_undefined": {
            "name": "test_save_undefined",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaDataSetSave.test_save_none": {
            "name": "test_save_none",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_save": [],
                "mocked_data_set": [
                    "bytes"
                ]
            }
        },
        "TestLambdaDataSetSave.test_save_not_callable": {
            "name": "test_save_not_callable",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaDataSetExists.test_exists_invocation": {
            "name": "test_exists_invocation",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestLambdaDataSetExists.test_exists_not_implemented": {
            "name": "test_exists_not_implemented",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaDataSetExists.test_exists_raises_error": {
            "name": "test_exists_raises_error",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestLambdaDataSetExists.test_exists_not_callable": {
            "name": "test_exists_not_callable",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaDataSetRelease.test_release_invocation": {
            "name": "test_release_invocation",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestLambdaDataSetRelease.test_release_not_implemented": {
            "name": "test_release_not_implemented",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaDataSetRelease.test_release_raises_error": {
            "name": "test_release_raises_error",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestLambdaDataSetRelease.test_release_not_callable": {
            "name": "test_release_not_callable",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaDataSetLoad.test_load_raises_error.internal_load": {
            "name": "internal_load",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kedro-main/tests/io/test_memory_dataset.py": {
        "_update_data": {
            "name": "_update_data",
            "location": 12,
            "return": [
                "dict",
                "bytes",
                "Dict[str, float]",
                "Dict[str, Union[str, bool]]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bool",
                    "int",
                    "Sequence[str]"
                ],
                "idx": [
                    "dict",
                    "numpy.ndarray",
                    "Callable",
                    "Dict[str, Any]",
                    "Tuple['cirq.Qid']",
                    "bool"
                ],
                "jdx": [
                    "dict",
                    "numpy.ndarray",
                    "Callable",
                    "Dict[str, Any]",
                    "Tuple['cirq.Qid']",
                    "bool"
                ],
                "value": [
                    "dict",
                    "numpy.ndarray",
                    "Callable",
                    "Dict[str, Any]",
                    "Tuple['cirq.Qid']",
                    "bool"
                ]
            }
        },
        "_check_equals": {
            "name": "_check_equals",
            "location": 22,
            "return": [
                "bytes",
                "Optional[float]",
                "IO[bytes]",
                "pandas.DataFrame",
                "dict",
                "str"
            ],
            "arguments": {
                "data1": [
                    "str",
                    "Tuple[int, int]",
                    "Sequence[str]",
                    "int"
                ],
                "data2": [
                    "str",
                    "Tuple[int, int]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "dummy_numpy_array": {
            "name": "dummy_numpy_array",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "dummy_dataframe": {
            "name": "dummy_dataframe",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "input_data": {
            "name": "input_data",
            "location": 41,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "List[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "request": []
            }
        },
        "new_data": {
            "name": "new_data",
            "location": 46,
            "return": [
                "bool",
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {}
        },
        "memory_dataset": {
            "name": "memory_dataset",
            "location": 51,
            "return": [
                "bool",
                "numpy.ndarray",
                "Dict[str, List]",
                "int"
            ],
            "arguments": {
                "input_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Callable[[Any], str]",
                    "bytes"
                ]
            }
        },
        "mocked_infer_mode": {
            "name": "mocked_infer_mode",
            "location": 56,
            "return": [
                "bytes",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "mocked_copy_with_mode": {
            "name": "mocked_copy_with_mode",
            "location": 61,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "test_copy_mode_assign": {
            "name": "test_copy_mode_assign",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "float",
                    "bytes",
                    "Tuple[Any, int]",
                    "dict"
                ]
            }
        },
        "test_copy_mode_copy": {
            "name": "test_copy_mode_copy",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "pandas.core.frame.DataFrame",
                    "bytes",
                    "pandas.DataFrame"
                ]
            }
        },
        "test_copy_mode_deepcopy": {
            "name": "test_copy_mode_deepcopy",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "pandas.core.frame.DataFrame",
                    "bytes",
                    "pandas.DataFrame"
                ]
            }
        },
        "test_copy_mode_invalid_string": {
            "name": "test_copy_mode_invalid_string",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_infer_mode_copy": {
            "name": "test_infer_mode_copy",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "input_data": [
                    "str",
                    "dict",
                    "int",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "test_infer_mode_deepcopy": {
            "name": "test_infer_mode_deepcopy",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "test_infer_mode_assign": {
            "name": "test_infer_mode_assign",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestMemoryDataSet.test_load": {
            "name": "test_load",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_dataset": [
                    "Optional[Union[str, int]]",
                    "Union[int, None]",
                    "io.BytesIO"
                ],
                "input_data": [
                    "bytes"
                ]
            }
        },
        "TestMemoryDataSet.test_load_none": {
            "name": "test_load_none",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMemoryDataSet.test_load_infer_mode": {
            "name": "test_load_infer_mode",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_dataset": [
                    "str"
                ],
                "input_data": [
                    "str"
                ],
                "mocked_infer_mode": [
                    "str"
                ],
                "mocked_copy_with_mode": [
                    "str"
                ]
            }
        },
        "TestMemoryDataSet.test_save": {
            "name": "test_save",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_dataset": [
                    "str",
                    "Optional[List[str]]"
                ],
                "input_data": [],
                "new_data": [
                    "List[Dict[str, Any]]",
                    "numpy.ndarray",
                    "Dict[str, Optional[str]]",
                    "bool"
                ]
            }
        },
        "TestMemoryDataSet.test_save_infer_mode": {
            "name": "test_save_infer_mode",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_dataset": [
                    "str",
                    "Mapping",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "new_data": [
                    "str",
                    "int",
                    "bool"
                ],
                "mocked_infer_mode": [
                    "str"
                ],
                "mocked_copy_with_mode": [
                    "str"
                ]
            }
        },
        "TestMemoryDataSet.test_load_modify_original_data": {
            "name": "test_load_modify_original_data",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_dataset": [
                    "str"
                ],
                "input_data": []
            }
        },
        "TestMemoryDataSet.test_save_modify_original_data": {
            "name": "test_save_modify_original_data",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_dataset": [
                    "int",
                    "bytes",
                    "List[Dict[str, Any]]"
                ],
                "new_data": [
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, dict]"
                ]
            }
        },
        "TestMemoryDataSet.test_load_returns_new_object": {
            "name": "test_load_returns_new_object",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_dataset": [
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "input_data": []
            }
        },
        "TestMemoryDataSet.test_create_without_data": {
            "name": "test_create_without_data",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMemoryDataSet.test_loading_none": {
            "name": "test_loading_none",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMemoryDataSet.test_saving_none": {
            "name": "test_saving_none",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMemoryDataSet.test_str_representation": {
            "name": "test_str_representation",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_dataset": [
                    "str"
                ],
                "input_data": [
                    "bool",
                    "int",
                    "T",
                    "Container[T]",
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestMemoryDataSet.test_exists": {
            "name": "test_exists",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_data": [
                    "Dict[str, Any]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "kedro-main/tests/io/test_partitioned_dataset.py": {
        "partitioned_data_pandas": {
            "name": "partitioned_data_pandas",
            "location": 20,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "local_csvs": {
            "name": "local_csvs",
            "location": 29,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "bool",
                    "Union[pathlib.Path, str]"
                ],
                "partitioned_data_pandas": [
                    "dict",
                    "str",
                    "int",
                    "pathlib.Path",
                    "Optional[Dict[str, Any]]",
                    "List[List[str]]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "mocked_s3_bucket": {
            "name": "mocked_s3_bucket",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mocked_csvs_in_s3": {
            "name": "mocked_csvs_in_s3",
            "location": 429,
            "return": [
                "str",
                "Union[int, str]"
            ],
            "arguments": {
                "mocked_s3_bucket": [
                    "str"
                ],
                "partitioned_data_pandas": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_load": {
            "name": "test_load",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "Set[str]",
                    "Union[Dict[str, Any], List[Any]]",
                    "Dict[str, str]",
                    "str"
                ],
                "local_csvs": [
                    "int",
                    "Set[str]",
                    "Union[Dict[str, Any], List[Any]]",
                    "Dict[str, str]",
                    "str"
                ],
                "partitioned_data_pandas": [
                    "dict",
                    "Set[str]",
                    "pandas.DataFrame"
                ],
                "suffix": [
                    "pathlib.Path",
                    "str",
                    "bytes"
                ],
                "expected_num_parts": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_save": {
            "name": "test_save",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "pathlib.Path",
                    "int",
                    "float"
                ],
                "local_csvs": [
                    "pathlib.Path"
                ],
                "suffix": [
                    "pathlib.Path"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_lazy_save": {
            "name": "test_lazy_save",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "local_csvs": [
                    "pathlib.Path",
                    "str"
                ],
                "suffix": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_save_invalidates_cache": {
            "name": "test_save_invalidates_cache",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "local_csvs": [
                    "pathlib.Path",
                    "int",
                    "float"
                ],
                "mocker": [
                    "pathlib.Path",
                    "str",
                    "int"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_overwrite": {
            "name": "test_overwrite",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "local_csvs": [
                    "str",
                    "Optional[Union[float, str]]",
                    "Iterable[T]",
                    "Iterable[int]",
                    "int"
                ],
                "overwrite": [
                    "str",
                    "Optional[Union[float, str]]",
                    "Iterable[T]",
                    "Iterable[int]",
                    "int"
                ],
                "expected_num_parts": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "pandas.DataFrame",
                    "Iterable[int]"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_release_instance_cache": {
            "name": "test_release_instance_cache",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "local_csvs": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_exists": {
            "name": "test_exists",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "local_csvs": [
                    "pathlib.Path",
                    "dict"
                ],
                "dataset": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_release": {
            "name": "test_release",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "pathlib.Path",
                    "int",
                    "float"
                ],
                "local_csvs": [
                    "pathlib.Path",
                    "int",
                    "float"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_describe": {
            "name": "test_describe",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_load_args": {
            "name": "test_load_args",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pathlib.Path"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_credentials": {
            "name": "test_credentials",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool"
                ],
                "credentials": [
                    "bool",
                    "str",
                    "click.testing.CliRunner",
                    "Union[str, float]",
                    "int"
                ],
                "expected_pds_creds": [
                    "bool"
                ],
                "expected_dataset_creds": [
                    "bool"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_fs_args": {
            "name": "test_fs_args",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_invalid_dataset": {
            "name": "test_invalid_dataset",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "pathlib.Path",
                    "int",
                    "float"
                ],
                "local_csvs": [
                    "pathlib.Path",
                    "int",
                    "float"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_invalid_dataset_config": {
            "name": "test_invalid_dataset_config",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_config": [
                    "pathlib.Path"
                ],
                "error_pattern": [
                    "str",
                    "int",
                    "type"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_versioned_dataset_not_allowed": {
            "name": "test_versioned_dataset_not_allowed",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_config": [
                    "pathlib.Path"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_no_partitions": {
            "name": "test_no_partitions",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_filepath_arg_warning": {
            "name": "test_filepath_arg_warning",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pds_config": [
                    "bool"
                ],
                "filepath_arg": []
            }
        },
        "TestPartitionedDataSetLocal.test_credentials_log_warning": {
            "name": "test_credentials_log_warning",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": []
            }
        },
        "TestPartitionedDataSetLocal.test_fs_args_log_warning": {
            "name": "test_fs_args_log_warning",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": []
            }
        },
        "TestPartitionedDataSetLocal.test_dataset_creds": {
            "name": "test_dataset_creds",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pds_config": [
                    "pathlib.Path",
                    "str",
                    "path.Path",
                    "pypi2nix.path.Path"
                ],
                "expected_ds_creds": [
                    "bool"
                ],
                "global_creds": [
                    "str"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_load": {
            "name": "test_load",
            "location": 445,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str",
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ],
                "mocked_csvs_in_s3": [
                    "str",
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ],
                "partitioned_data_pandas": [
                    "str",
                    "int",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_load_s3a": {
            "name": "test_load_s3a",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_csvs_in_s3": [
                    "str",
                    "Dict[str, Any]",
                    "io.BytesIO",
                    "pathlib.Path"
                ],
                "partitioned_data_pandas": [
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "dict",
                    "bytes"
                ],
                "mocker": [
                    "str",
                    "experimental.util.alice.alice_pb2_grpc.LedgerStub",
                    "experimental.util.alice.alice_pb2.RunRequest"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_save": {
            "name": "test_save",
            "location": 475,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "Dict[str, Any]"
                ],
                "mocked_csvs_in_s3": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_save_s3a": {
            "name": "test_save_s3a",
            "location": 489,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_csvs_in_s3": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "pandas.DataFrame"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_exists": {
            "name": "test_exists",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "dict"
                ],
                "mocked_csvs_in_s3": [
                    "pathlib.Path",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_release": {
            "name": "test_release",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str"
                ],
                "mocked_csvs_in_s3": [
                    "List[str]",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestPartitionedDataSetS3.test_describe": {
            "name": "test_describe",
            "location": 534,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "pathlib.Path",
                    "bytes"
                ]
            }
        },
        "TestPartitionedDataSetLocal.test_lazy_save.original_data": {
            "name": "original_data",
            "location": 90,
            "return": [
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "TestPartitionedDataSetLocal.test_credentials._assert_not_in_repr": {
            "name": "_assert_not_in_repr",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "Union[str, bytes]",
                    "str",
                    "Sequence[str]",
                    "Union[bool, str]",
                    "dict",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "kedro-main/tests/io/__init__.py": {},
    "kedro-main/tests/pipeline/test_modular_pipeline.py": {
        "constant_output": {
            "name": "constant_output",
            "location": 9,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "biconcat": {
            "name": "biconcat",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "triconcat": {
            "name": "triconcat",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input3": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestPipelineHelper.test_transform_dataset_names": {
            "name": "test_transform_dataset_names",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_prefix_dataset_names": {
            "name": "test_prefix_dataset_names",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_prefixing_and_renaming": {
            "name": "test_prefixing_and_renaming",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_prefix_exclude_free_inputs": {
            "name": "test_prefix_exclude_free_inputs",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "list",
                    "Optional[str]",
                    "List[List[Any]]"
                ],
                "outputs": [
                    "str",
                    "list",
                    "Optional[str]",
                    "List[List[Any]]"
                ]
            }
        },
        "TestPipelineHelper.test_transform_params_prefix_and_parameters": {
            "name": "test_transform_params_prefix_and_parameters",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_dataset_transcoding_mapping_base_name": {
            "name": "test_dataset_transcoding_mapping_base_name",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_dataset_transcoding_mapping_full_dataset": {
            "name": "test_dataset_transcoding_mapping_full_dataset",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_empty_input": {
            "name": "test_empty_input",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_empty_output": {
            "name": "test_empty_output",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_missing_dataset_name": {
            "name": "test_missing_dataset_name",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "type",
                    "Callable",
                    "Iterable[str]",
                    "Iterable['cirq.Operation']",
                    "tuple"
                ],
                "inputs": [
                    "str",
                    "bool"
                ],
                "outputs": [
                    "str",
                    "bool"
                ],
                "inputs_map": [
                    "int",
                    "str"
                ],
                "outputs_map": [
                    "int",
                    "str"
                ],
                "expected_missing": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "TestPipelineHelper.test_node_properties_preserved": {
            "name": "test_node_properties_preserved",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_default_node_name_is_namespaced": {
            "name": "test_default_node_name_is_namespaced",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_expose_intermediate_output": {
            "name": "test_expose_intermediate_output",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_parameters_left_intact_when_defined_as_str": {
            "name": "test_parameters_left_intact_when_defined_as_str",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_parameters_left_intact_when_defined_as_": {
            "name": "test_parameters_left_intact_when_defined_as_",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "bool",
                    "Tuple[str, Any]",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "TestPipelineHelper.test_parameters_updated_with_dict": {
            "name": "test_parameters_updated_with_dict",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_parameters_defined_with_params_prefix": {
            "name": "test_parameters_defined_with_params_prefix",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_parameters_specified_under_inputs": {
            "name": "test_parameters_specified_under_inputs",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_non_existent_parameters_mapped": {
            "name": "test_non_existent_parameters_mapped",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_bad_inputs_mapping": {
            "name": "test_bad_inputs_mapping",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_bad_outputs_mapping": {
            "name": "test_bad_outputs_mapping",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_pipeline_always_copies": {
            "name": "test_pipeline_always_copies",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineHelper.test_pipeline_tags": {
            "name": "test_pipeline_tags",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/pipeline/test_node.py": {
        "constant_output": {
            "name": "constant_output",
            "location": 11,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "biconcat": {
            "name": "biconcat",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "triconcat": {
            "name": "triconcat",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input3": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "simple_tuple_node_list": {
            "name": "simple_tuple_node_list",
            "location": 28,
            "return": [
                "str",
                "Callable",
                "int",
                "bytearray"
            ],
            "arguments": {}
        },
        "bad_input_type_node": {
            "name": "bad_input_type_node",
            "location": 227,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "bad_output_type_node": {
            "name": "bad_output_type_node",
            "location": 231,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "bad_function_type_node": {
            "name": "bad_function_type_node",
            "location": 235,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "no_input_or_output_node": {
            "name": "no_input_or_output_node",
            "location": 239,
            "return": [
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {}
        },
        "input_same_as_output_node": {
            "name": "input_same_as_output_node",
            "location": 243,
            "return": [
                "str",
                "float",
                "Set[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "duplicate_output_dict_node": {
            "name": "duplicate_output_dict_node",
            "location": 247,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "AbstractSet[T_co]",
                "MutableSet[T]"
            ],
            "arguments": {}
        },
        "duplicate_output_list_node": {
            "name": "duplicate_output_list_node",
            "location": 251,
            "return": [
                "Dict[str, int]",
                "Callable",
                "bytes",
                "float",
                "dict"
            ],
            "arguments": {}
        },
        "test_bad_node": {
            "name": "test_bad_node",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "List[str]"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "inconsistent_input_size": {
            "name": "inconsistent_input_size",
            "location": 285,
            "return": [
                "int",
                "str",
                "bytearray",
                "bytes",
                "float"
            ],
            "arguments": {}
        },
        "inconsistent_input_args": {
            "name": "inconsistent_input_args",
            "location": 289,
            "return": [
                "dict",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "inconsistent_input_kwargs": {
            "name": "inconsistent_input_kwargs",
            "location": 296,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "lambda_inconsistent_input_size": {
            "name": "lambda_inconsistent_input_size",
            "location": 306,
            "return": [
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {}
        },
        "partial_inconsistent_input_size": {
            "name": "partial_inconsistent_input_size",
            "location": 313,
            "return": [
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {}
        },
        "test_bad_input": {
            "name": "test_bad_input",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "apply_f": {
            "name": "apply_f",
            "location": 347,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "int"
                ]
            }
        },
        "decorated_identity": {
            "name": "decorated_identity",
            "location": 356,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "TestValidNode.test_valid": {
            "name": "test_valid",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_tuple_node_list": []
            }
        },
        "TestValidNode.test_get_node_func": {
            "name": "test_get_node_func",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_set_node_func": {
            "name": "test_set_node_func",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_labelled": {
            "name": "test_labelled",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_call": {
            "name": "test_call",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_call_with_non_keyword_arguments": {
            "name": "test_call_with_non_keyword_arguments",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_run_with_duplicate_inputs_list": {
            "name": "test_run_with_duplicate_inputs_list",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_run_with_duplicate_inputs_dict": {
            "name": "test_run_with_duplicate_inputs_dict",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_no_input": {
            "name": "test_no_input",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_no_output": {
            "name": "test_no_output",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_inputs_none": {
            "name": "test_inputs_none",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_inputs_str": {
            "name": "test_inputs_str",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_inputs_dict": {
            "name": "test_inputs_dict",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_inputs_list": {
            "name": "test_inputs_list",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_outputs_none": {
            "name": "test_outputs_none",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_outputs_str": {
            "name": "test_outputs_str",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_outputs_dict": {
            "name": "test_outputs_dict",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_outputs_list": {
            "name": "test_outputs_list",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidNode.test_confirms": {
            "name": "test_confirms",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "confirms_arg": [
                    "List[int]",
                    "str"
                ],
                "expected": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "TestNodeComparisons.test_node_equals": {
            "name": "test_node_equals",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeComparisons.test_node_less_than": {
            "name": "test_node_less_than",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeComparisons.test_node_invalid_equals": {
            "name": "test_node_invalid_equals",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeComparisons.test_node_invalid_less_than": {
            "name": "test_node_invalid_less_than",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeComparisons.test_different_input_list_order_not_equal": {
            "name": "test_different_input_list_order_not_equal",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeComparisons.test_different_output_list_order_not_equal": {
            "name": "test_different_output_list_order_not_equal",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeComparisons.test_different_input_dict_order_equal": {
            "name": "test_different_input_dict_order_equal",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeComparisons.test_different_output_dict_order_equal": {
            "name": "test_different_output_dict_order_equal",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeComparisons.test_input_dict_list_not_equal": {
            "name": "test_input_dict_list_not_equal",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeComparisons.test_output_dict_list_not_equal": {
            "name": "test_output_dict_list_not_equal",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "inconsistent_input_args.dummy_func_args": {
            "name": "dummy_func_args",
            "location": 290,
            "return": [],
            "arguments": {}
        },
        "inconsistent_input_kwargs.dummy_func_args": {
            "name": "dummy_func_args",
            "location": 297,
            "return": [
                "str",
                "List[Dict]",
                "Optional[Type]",
                "Union[List[float], List[int]]",
                "List[str]"
            ],
            "arguments": {}
        },
        "apply_f.with_f": {
            "name": "with_f",
            "location": 349,
            "return": [
                "List[str]",
                "int",
                "bool",
                "Dict[int, dict]",
                "Dict[str, int]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "TestTag.test_tag_nodes": {
            "name": "test_tag_nodes",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTag.test_tag_nodes_single_tag": {
            "name": "test_tag_nodes_single_tag",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNames.test_named": {
            "name": "test_named",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNames.test_invalid_name": {
            "name": "test_invalid_name",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bad_name": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "TestNames.test_namespaced": {
            "name": "test_namespaced",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNames.test_named_and_namespaced": {
            "name": "test_named_and_namespaced",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNames.test_function": {
            "name": "test_function",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNames.test_lambda": {
            "name": "test_lambda",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNames.test_partial": {
            "name": "test_partial",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNames.test_updated_partial": {
            "name": "test_updated_partial",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNames.test_updated_partial_dict_inputs": {
            "name": "test_updated_partial_dict_inputs",
            "location": 426,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/pipeline/test_node_run.py": {
        "mocked_dataset": {
            "name": "mocked_dataset",
            "location": 10,
            "return": [
                "int",
                "bool",
                "Optional[Callable]",
                "Optional[Exception]"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "one_in_one_out": {
            "name": "one_in_one_out",
            "location": 16,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "arg": [
                    "Iterator[str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "bool",
                    "float",
                    "Set[node.Node]"
                ]
            }
        },
        "one_in_dict_out": {
            "name": "one_in_dict_out",
            "location": 20,
            "return": [
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "int"
                ]
            }
        },
        "two_in_first_out": {
            "name": "two_in_first_out",
            "location": 24,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "arg1": [
                    "Iterator[str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "bool",
                    "float",
                    "Set[node.Node]"
                ],
                "arg2": [
                    "Iterator[str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "bool",
                    "float",
                    "Set[node.Node]"
                ]
            }
        },
        "valid_nodes_with_inputs": {
            "name": "valid_nodes_with_inputs",
            "location": 29,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_valid_nodes": {
            "name": "test_valid_nodes",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "valid_nodes_with_inputs": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "BinaryIO",
                    "Optional[BinaryIO]"
                ]
            }
        },
        "test_run_got_dataframe": {
            "name": "test_run_got_dataframe",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_dataset": [
                    "io.BytesIO"
                ]
            }
        },
        "TestNodeRunInvalidInput.test_unresolved": {
            "name": "test_unresolved",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNodeRunInvalidInput.test_no_inputs_node_error": {
            "name": "test_no_inputs_node_error",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": [
                    "dict",
                    "str"
                ]
            }
        },
        "TestNodeRunInvalidInput.test_one_input_error": {
            "name": "test_one_input_error",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestNodeRunInvalidInput.test_run_diff_size_lists": {
            "name": "test_run_diff_size_lists",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": []
            }
        },
        "TestNodeRunInvalidInput.test_run_diff_size_list_dict": {
            "name": "test_run_diff_size_list_dict",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": []
            }
        },
        "TestNodeRunInvalidInput.test_run_list_dict_unavailable": {
            "name": "test_run_list_dict_unavailable",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": []
            }
        },
        "TestNodeRunInvalidInput.test_run_dict_unavailable": {
            "name": "test_run_dict_unavailable",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": []
            }
        },
        "TestNodeRunInvalidInput.test_run_dict_diff_size": {
            "name": "test_run_dict_diff_size",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestNodeRunInvalidOutput.test_miss_matching_output_types": {
            "name": "test_miss_matching_output_types",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": []
            }
        },
        "TestNodeRunInvalidOutput.test_miss_matching_output_keys": {
            "name": "test_miss_matching_output_keys",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": []
            }
        },
        "TestNodeRunInvalidOutput.test_node_not_list_output": {
            "name": "test_node_not_list_output",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_dataset": []
            }
        },
        "TestNodeRunInvalidOutput.test_node_wrong_num_of_outputs": {
            "name": "test_node_wrong_num_of_outputs",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "mocked_dataset": []
            }
        },
        "TestNodeRunInvalidOutput.test_node_wrong_num_of_outputs.one_in_two_out": {
            "name": "one_in_two_out",
            "location": 133,
            "return": [
                "Optional[Any]",
                "dict",
                "Dict[str, List]"
            ],
            "arguments": {
                "arg": [
                    "Iterator[str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "bool",
                    "float",
                    "Set[node.Node]"
                ]
            }
        }
    },
    "kedro-main/tests/pipeline/test_pipeline.py": {
        "constant_output": {
            "name": "constant_output",
            "location": 33,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "biconcat": {
            "name": "biconcat",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "triconcat": {
            "name": "triconcat",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input3": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "branchless_pipeline": {
            "name": "branchless_pipeline",
            "location": 50,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "pipeline_list_with_lists": {
            "name": "pipeline_list_with_lists",
            "location": 74,
            "return": [
                "str",
                "Optional[Callable]",
                "int"
            ],
            "arguments": {}
        },
        "pipeline_with_dicts": {
            "name": "pipeline_with_dicts",
            "location": 108,
            "return": [
                "str",
                "Optional[Callable]",
                "int"
            ],
            "arguments": {}
        },
        "free_input_needed_pipeline": {
            "name": "free_input_needed_pipeline",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "disjoint_pipeline": {
            "name": "disjoint_pipeline",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "pipeline_input_duplicated": {
            "name": "pipeline_input_duplicated",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "str_node_inputs_list": {
            "name": "str_node_inputs_list",
            "location": 203,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Sequence[str]]",
                "dict",
                "List[str]"
            ],
            "arguments": {}
        },
        "complex_pipeline": {
            "name": "complex_pipeline",
            "location": 219,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pipeline_list_with_lists": [
                    "list",
                    "List[str]",
                    "List[T]",
                    "Iterator"
                ]
            }
        },
        "input_data": {
            "name": "input_data",
            "location": 236,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "List[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "request": []
            }
        },
        "pipeline_with_circle": {
            "name": "pipeline_with_circle",
            "location": 311,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "non_unique_node_outputs": {
            "name": "non_unique_node_outputs",
            "location": 320,
            "return": [
                "bool",
                "str",
                "Coroutine"
            ],
            "arguments": {}
        },
        "nodes_with_tags": {
            "name": "nodes_with_tags",
            "location": 636,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "pipeline_with_namespaces": {
            "name": "pipeline_with_namespaces",
            "location": 662,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "test_pipeline_to_json": {
            "name": "test_pipeline_to_json",
            "location": 876,
            "return": [
                ""
            ],
            "arguments": {
                "input_data": [
                    "dict",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "TestTranscodeHelpers.test_split_no_transcode_part": {
            "name": "test_split_no_transcode_part",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranscodeHelpers.test_split_with_transcode": {
            "name": "test_split_with_transcode",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranscodeHelpers.test_split_too_many_parts": {
            "name": "test_split_too_many_parts",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTranscodeHelpers.test_get_transcode_compatible_name": {
            "name": "test_get_transcode_compatible_name",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidPipeline.test_nodes": {
            "name": "test_nodes",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "str_node_inputs_list": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestValidPipeline.test_grouped_nodes": {
            "name": "test_grouped_nodes",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Optional[Dict]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "TestValidPipeline.test_free_input": {
            "name": "test_free_input",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Dict[str, Any]",
                    "Optional[Exception]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestValidPipeline.test_outputs": {
            "name": "test_outputs",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "dict",
                    "bytes",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "TestValidPipeline.test_empty_case": {
            "name": "test_empty_case",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidPipeline.test_initialized_with_tags": {
            "name": "test_initialized_with_tags",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidPipeline.test_node_dependencies": {
            "name": "test_node_dependencies",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestInvalidPipeline.test_circle_case": {
            "name": "test_circle_case",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pipeline_with_circle": [
                    "str",
                    "float"
                ]
            }
        },
        "TestInvalidPipeline.test_unique_outputs": {
            "name": "test_unique_outputs",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "non_unique_node_outputs": [
                    "str",
                    "bool",
                    "Union[dict, list]",
                    "Callable"
                ]
            }
        },
        "TestInvalidPipeline.test_none_case": {
            "name": "test_none_case",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidPipeline.test_duplicate_free_nodes": {
            "name": "test_duplicate_free_nodes",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidPipeline.test_duplicate_nodes_in_pipelines": {
            "name": "test_duplicate_nodes_in_pipelines",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidPipeline.test_bad_combine_node": {
            "name": "test_bad_combine_node",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidPipeline.test_bad_combine_int": {
            "name": "test_bad_combine_int",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidPipeline.test_conflicting_names": {
            "name": "test_conflicting_names",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidPipeline.test_conflicting_outputs": {
            "name": "test_conflicting_outputs",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidPipeline.test_duplicate_node_confirms": {
            "name": "test_duplicate_node_confirms",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_combine_add": {
            "name": "test_combine_add",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_combine_sum": {
            "name": "test_combine_sum",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_remove": {
            "name": "test_remove",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_remove_with_partial_intersection": {
            "name": "test_remove_with_partial_intersection",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_remove_empty_from_pipeline": {
            "name": "test_remove_empty_from_pipeline",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_remove_from_empty_pipeline": {
            "name": "test_remove_from_empty_pipeline",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_remove_all_nodes": {
            "name": "test_remove_all_nodes",
            "location": 502,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_invalid_remove": {
            "name": "test_invalid_remove",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_combine_same_node": {
            "name": "test_combine_same_node",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_intersection": {
            "name": "test_intersection",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_invalid_intersection": {
            "name": "test_invalid_intersection",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_union": {
            "name": "test_union",
            "location": 549,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_invalid_union": {
            "name": "test_invalid_union",
            "location": 562,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_node_unique_confirms": {
            "name": "test_node_unique_confirms",
            "location": 568,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineOperators.test_connected_pipeline": {
            "name": "test_connected_pipeline",
            "location": 576,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "disjoint_pipeline": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipelineDescribe.test_names_only": {
            "name": "test_names_only",
            "location": 594,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "str_node_inputs_list": [
                    "str",
                    "Optional[Any]",
                    "List[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestPipelineDescribe.test_full": {
            "name": "test_full",
            "location": 614,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "str_node_inputs_list": [
                    "str",
                    "dict",
                    "Type[Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPipelineTags.test_tag_existing_pipeline": {
            "name": "test_tag_existing_pipeline",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branchless_pipeline": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ]
            }
        },
        "TestPipelineTags.test_pipeline_single_tag": {
            "name": "test_pipeline_single_tag",
            "location": 653,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branchless_pipeline": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPipelineFilter.test_no_filters": {
            "name": "test_no_filters",
            "location": 676,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestPipelineFilter.test_one_filter": {
            "name": "test_one_filter",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filter_method": [
                    "Callable",
                    "int",
                    "Dict[str, Any]"
                ],
                "expected_nodes": [
                    "str",
                    "Type[Exception]",
                    "bool",
                    "Sequence[str]"
                ],
                "complex_pipeline": [
                    "Callable",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPipelineFilter.test_namespace_filter": {
            "name": "test_namespace_filter",
            "location": 697,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pipeline_with_namespaces": [
                    "str"
                ]
            }
        },
        "TestPipelineFilter.test_two_filters": {
            "name": "test_two_filters",
            "location": 702,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestPipelineFilter.test_three_filters": {
            "name": "test_three_filters",
            "location": 709,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "dict"
                ]
            }
        },
        "TestPipelineFilter.test_filter_no_nodes": {
            "name": "test_filter_no_nodes",
            "location": 716,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestPipelineFilterHelpers.test_only_nodes_with_tags": {
            "name": "test_only_nodes_with_tags",
            "location": 740,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "List[str]"
                ],
                "expected_nodes": [
                    "str",
                    "List[str]"
                ],
                "nodes_with_tags": [
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "Iterable[Tuple[str, int]]"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_from_nodes": {
            "name": "test_from_nodes",
            "location": 749,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "int",
                    "str"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_from_nodes_unknown": {
            "name": "test_from_nodes_unknown",
            "location": 757,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "int",
                    "str"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_to_nodes": {
            "name": "test_to_nodes",
            "location": 762,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "int"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_to_nodes_unknown": {
            "name": "test_to_nodes_unknown",
            "location": 770,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "int"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_only_nodes": {
            "name": "test_only_nodes",
            "location": 778,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_node_names": [
                    "str",
                    "bool"
                ],
                "pipeline_list_with_lists": [
                    "bool",
                    "List[str]",
                    "str",
                    "int",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_only_nodes_unknown": {
            "name": "test_only_nodes_unknown",
            "location": 788,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pipeline_list_with_lists": [
                    "str",
                    "int"
                ],
                "target_node_names": [
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_from_inputs": {
            "name": "test_from_inputs",
            "location": 794,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_from_inputs_unknown": {
            "name": "test_from_inputs_unknown",
            "location": 802,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_to_outputs": {
            "name": "test_to_outputs",
            "location": 807,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "int",
                    "List[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_to_outputs_unknown": {
            "name": "test_to_outputs_unknown",
            "location": 815,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "int",
                    "List[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_only_nodes_with_namespace": {
            "name": "test_only_nodes_with_namespace",
            "location": 829,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_namespace": [
                    "int",
                    "str"
                ],
                "expected_namespaces": [
                    "list",
                    "int",
                    "str"
                ],
                "pipeline_with_namespaces": [
                    "int",
                    "str"
                ]
            }
        },
        "TestPipelineFilterHelpers.test_only_nodes_with_namespace_unknown": {
            "name": "test_only_nodes_with_namespace_unknown",
            "location": 841,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ]
            }
        },
        "TestPipelineRunnerHelpers.test_only_nodes_with_inputs": {
            "name": "test_only_nodes_with_inputs",
            "location": 851,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipelineRunnerHelpers.test_only_nodes_with_inputs_unknown": {
            "name": "test_only_nodes_with_inputs_unknown",
            "location": 859,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipelineRunnerHelpers.test_only_nodes_with_outputs": {
            "name": "test_only_nodes_with_outputs",
            "location": 863,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestPipelineRunnerHelpers.test_only_nodes_with_outputs_unknown": {
            "name": "test_only_nodes_with_outputs_unknown",
            "location": 871,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestPipelineFilterHelpers.test_only_nodes_with_tags.get_nodes_with_tags": {
            "name": "get_nodes_with_tags",
            "location": 743,
            "return": [
                "str",
                "Set[str]",
                "Pattern",
                "List[Tuple[str, Any]]",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "kedro-main/tests/pipeline/test_pipeline_from_missing.py": {
        "constant_output": {
            "name": "constant_output",
            "location": 12,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "biconcat": {
            "name": "biconcat",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "hook_manager": {
            "name": "hook_manager",
            "location": 25,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {}
        },
        "branched_pipeline": {
            "name": "branched_pipeline",
            "location": 30,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "_make_catalog": {
            "name": "_make_catalog",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "existent": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]",
                    "Optional[Union[int, str]]"
                ],
                "non_existent": [
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "no_exists_method": [
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "feed_dict": [
                    "Dict[str, int]",
                    "bool",
                    "int"
                ]
            }
        },
        "_pipelines_equal": {
            "name": "_pipelines_equal",
            "location": 88,
            "return": [
                "Set[str]",
                "set",
                "list",
                "str",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "pipe1": [
                    "Callable[[VT], bool]",
                    "Union[\"RangeSet[T]\", Iterable[Any]]",
                    "Set[int]",
                    "str"
                ],
                "pipe2": [
                    "Callable[[VT], bool]",
                    "Union[\"RangeSet[T]\", Iterable[Any]]",
                    "Set[int]",
                    "str"
                ]
            }
        },
        "_pipeline_contains": {
            "name": "_pipeline_contains",
            "location": 92,
            "return": [
                "List[str]",
                "int",
                "List[float]"
            ],
            "arguments": {
                "pipe": [
                    "dict"
                ],
                "nodes": [
                    "dict"
                ]
            }
        },
        "_from_missing": {
            "name": "_from_missing",
            "location": 96,
            "return": [
                "set",
                "Iterable",
                "Callable",
                "Sequence[str]"
            ],
            "arguments": {
                "pipeline": [
                    "bool",
                    "int",
                    "Union[dict, list]",
                    "List[Dict]"
                ],
                "catalog": [
                    "bool",
                    "int",
                    "Union[dict, list]",
                    "List[Dict]"
                ],
                "hook_manager": [
                    "bool",
                    "int",
                    "Union[dict, list]",
                    "List[Dict]"
                ]
            }
        },
        "TestPipelineMissing.test_all_missing": {
            "name": "test_all_missing",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [],
                "hook_manager": [
                    "Dict[str, float]",
                    "bool",
                    "str"
                ]
            }
        },
        "TestPipelineMissing.test_none_missing": {
            "name": "test_none_missing",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [
                    "bool",
                    "Dict[str, float]",
                    "Iterable[Any]",
                    "str"
                ],
                "hook_manager": [
                    "bool",
                    "Dict[str, float]",
                    "Iterable[Any]",
                    "str"
                ]
            }
        },
        "TestPipelineMissing.test_none_missing_feeddict_only": {
            "name": "test_none_missing_feeddict_only",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [
                    "bool",
                    "Dict[str, float]",
                    "Iterable[Any]",
                    "str"
                ],
                "hook_manager": [
                    "bool",
                    "Dict[str, float]",
                    "Iterable[Any]",
                    "str"
                ]
            }
        },
        "TestPipelineMissing.test_first_missing": {
            "name": "test_first_missing",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [],
                "hook_manager": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipelineMissing.test_only_left_missing": {
            "name": "test_only_left_missing",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [
                    "str",
                    "float"
                ],
                "hook_manager": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipelineMissing.test_last_missing": {
            "name": "test_last_missing",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ],
                "hook_manager": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ]
            }
        },
        "TestPipelineMissing.test_missing_and_no_exists": {
            "name": "test_missing_and_no_exists",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [],
                "caplog": [],
                "hook_manager": []
            }
        },
        "TestPipelineMissing.test_all_no_exists_method": {
            "name": "test_all_no_exists_method",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [],
                "caplog": [
                    "str"
                ],
                "hook_manager": [
                    "str",
                    "int",
                    "Dict[str, float]",
                    "Type"
                ]
            }
        },
        "TestPipelineMissing.test_catalog_and_feed_dict": {
            "name": "test_catalog_and_feed_dict",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [],
                "hook_manager": []
            }
        },
        "TestPipelineUnregistered.test_propagate_up": {
            "name": "test_propagate_up",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [
                    "str",
                    "float"
                ],
                "hook_manager": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipelineUnregistered.test_propagate_down_then_up": {
            "name": "test_propagate_down_then_up",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [],
                "hook_manager": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipelineUnregistered.test_ignore_unneccessary_unreg": {
            "name": "test_ignore_unneccessary_unreg",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [
                    "str",
                    "float"
                ],
                "hook_manager": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipelineUnregistered.test_partial_propagation": {
            "name": "test_partial_propagation",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [
                    "str",
                    "float"
                ],
                "hook_manager": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPipelineUnregistered.test_partial_non_existent_propagation": {
            "name": "test_partial_non_existent_propagation",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [
                    "dict"
                ],
                "hook_manager": [
                    "dict"
                ]
            }
        },
        "TestPipelineUnregistered.test_free_output": {
            "name": "test_free_output",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "branched_pipeline": [],
                "hook_manager": []
            }
        }
    },
    "kedro-main/tests/pipeline/test_pipeline_integration.py": {
        "defrost": {
            "name": "defrost",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "frozen_meat": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "grill": {
            "name": "grill",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "meat": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "eat": {
            "name": "eat",
            "location": 14,
            "return": [
                "str",
                "List[List[str]]",
                "float",
                "int"
            ],
            "arguments": {
                "food": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestTransformPipelineIntegration.test_connect_existing_pipelines": {
            "name": "test_connect_existing_pipelines",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformPipelineIntegration.test_reuse_same_pipeline": {
            "name": "test_reuse_same_pipeline",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/pipeline/test_pipeline_with_transcoding.py": {
        "constant_output": {
            "name": "constant_output",
            "location": 11,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "biconcat": {
            "name": "biconcat",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "triconcat": {
            "name": "triconcat",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input2": [
                    "int",
                    "Callable",
                    "str"
                ],
                "input3": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_get_node_names": {
            "name": "_get_node_names",
            "location": 27,
            "return": [
                "str",
                "Set[str]",
                "Pattern",
                "List[Tuple[str, Any]]",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "pipeline": [
                    "dict",
                    "Dict[str, Any]",
                    "MutableMapping"
                ]
            }
        },
        "pipeline_with_transcoded_names": {
            "name": "pipeline_with_transcoded_names",
            "location": 32,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {}
        },
        "pipeline_with_transcoded_free_input": {
            "name": "pipeline_with_transcoded_free_input",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "pipeline_with_duplicate_transcoded_inputs": {
            "name": "pipeline_with_duplicate_transcoded_inputs",
            "location": 68,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "complex_pipeline": {
            "name": "complex_pipeline",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "input_data": {
            "name": "input_data",
            "location": 109,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "List[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "request": []
            }
        },
        "TestValidPipeline.test_grouped_nodes": {
            "name": "test_grouped_nodes",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Optional[Dict]",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "TestValidPipeline.test_free_input": {
            "name": "test_free_input",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Dict[str, Any]",
                    "Optional[Exception]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestValidPipeline.test_outputs": {
            "name": "test_outputs",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "dict",
                    "bytes",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "TestValidPipeline.test_pipeline_to_json": {
            "name": "test_pipeline_to_json",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "dict",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "TestInvalidPipeline.test_transcoded_inputs_outputs": {
            "name": "test_transcoded_inputs_outputs",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvalidPipeline.test_duplicates_in_transcoded_outputs": {
            "name": "test_duplicates_in_transcoded_outputs",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComplexPipelineWithTranscoding.test_from_nodes_transcoded_names": {
            "name": "test_from_nodes_transcoded_names",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_to_nodes_transcoded_names": {
            "name": "test_to_nodes_transcoded_names",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "int"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_only_nodes_with_inputs": {
            "name": "test_only_nodes_with_inputs",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "float"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_only_nodes_with_inputs_transcoded_name": {
            "name": "test_only_nodes_with_inputs_transcoded_name",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestComplexPipelineWithTranscoding.test_only_nodes_with_inputs_duplicate_transcoded_names": {
            "name": "test_only_nodes_with_inputs_duplicate_transcoded_names",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestComplexPipelineWithTranscoding.test_only_nodes_with_inputs_inexistent_inputs": {
            "name": "test_only_nodes_with_inputs_inexistent_inputs",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "float"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_from_inputs": {
            "name": "test_from_inputs",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_from_inputs_traverses_transcoded": {
            "name": "test_from_inputs_traverses_transcoded",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_from_inputs_traverses_transcoded_on_correct_branch": {
            "name": "test_from_inputs_traverses_transcoded_on_correct_branch",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_from_inputs_transcode_compatible_name": {
            "name": "test_from_inputs_transcode_compatible_name",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestComplexPipelineWithTranscoding.test_from_inputs_duplicate_transcoded_names": {
            "name": "test_from_inputs_duplicate_transcoded_names",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestComplexPipelineWithTranscoding.test_from_inputs_inexistent_inputs": {
            "name": "test_from_inputs_inexistent_inputs",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_only_nodes_with_outputs": {
            "name": "test_only_nodes_with_outputs",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "Dict[str, Sequence[Any]]",
                    "Callable"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_only_nodes_with_outputs_transcode_compatible_name": {
            "name": "test_only_nodes_with_outputs_transcode_compatible_name",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestComplexPipelineWithTranscoding.test_only_nodes_with_outputs_duplicate_transcoded_names": {
            "name": "test_only_nodes_with_outputs_duplicate_transcoded_names",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "bool",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_only_nodes_with_outputs_inexistent_outputs": {
            "name": "test_only_nodes_with_outputs_inexistent_outputs",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_to_outputs": {
            "name": "test_to_outputs",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_to_outputs_traverses_transcoded": {
            "name": "test_to_outputs_traverses_transcoded",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "int",
                    "List[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_to_outputs_transcoded_name": {
            "name": "test_to_outputs_transcoded_name",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str"
                ]
            }
        },
        "TestComplexPipelineWithTranscoding.test_to_outputs_duplicate_transcoded_names": {
            "name": "test_to_outputs_duplicate_transcoded_names",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": []
            }
        },
        "TestComplexPipelineWithTranscoding.test_to_outputs_inexistent_outputs": {
            "name": "test_to_outputs_inexistent_outputs",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "complex_pipeline": [
                    "str",
                    "int"
                ]
            }
        },
        "TestGetTranscodeCompatibleName.test_get_transcode_compatible_name": {
            "name": "test_get_transcode_compatible_name",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetTranscodeCompatibleName.test_get_transcode_compatible_name_no_separator": {
            "name": "test_get_transcode_compatible_name_no_separator",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetTranscodeCompatibleName.test_get_transcode_compatible_name_multiple_separators": {
            "name": "test_get_transcode_compatible_name_multiple_separators",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/pipeline/__init__.py": {},
    "kedro-main/tests/runner/conftest.py": {
        "source": {
            "name": "source",
            "location": 9,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {}
        },
        "identity": {
            "name": "identity",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "sink": {
            "name": "sink",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "fan_in": {
            "name": "fan_in",
            "location": 21,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Optional[Iterable[str]]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "exception_fn": {
            "name": "exception_fn",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "arg": [
                    "str",
                    "bool",
                    "T",
                    "Mapping[str, Any]"
                ]
            }
        },
        "return_none": {
            "name": "return_none",
            "location": 29,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "arg": [
                    "Callable",
                    "Optional[int]",
                    "Optional[Iterable[Any]]",
                    "List[str]",
                    "Optional[List[Any]]",
                    "Optional[List[Callable]]",
                    "io.TextIO"
                ]
            }
        },
        "return_not_serialisable": {
            "name": "return_not_serialisable",
            "location": 34,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "catalog": {
            "name": "catalog",
            "location": 39,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "fan_out_fan_in": {
            "name": "fan_out_fan_in",
            "location": 44,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "branchless_no_input_pipeline": {
            "name": "branchless_no_input_pipeline",
            "location": 57,
            "return": [
                "bool",
                "BaseException",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "branchless_pipeline": {
            "name": "branchless_pipeline",
            "location": 71,
            "return": [
                "str",
                "bool",
                "Tuple[str, List[str], List[float], List[str], List[float], List[float], List[Any]]"
            ],
            "arguments": {}
        },
        "saving_result_pipeline": {
            "name": "saving_result_pipeline",
            "location": 81,
            "return": [
                "bool",
                "Optional[int]",
                "float",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "saving_none_pipeline": {
            "name": "saving_none_pipeline",
            "location": 86,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "kedro-main/tests/runner/test_parallel_runner.py": {
        "TestValidParallelRunner.test_create_default_data_set": {
            "name": "test_create_default_data_set",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidParallelRunner.test_parallel_run": {
            "name": "test_parallel_run",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bool"
                ],
                "fan_out_fan_in": [
                    "bool"
                ],
                "catalog": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "TestValidParallelRunner.test_parallel_run_with_plugin_manager": {
            "name": "test_parallel_run_with_plugin_manager",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "str",
                    "Dict[str, Any]"
                ],
                "fan_out_fan_in": [
                    "str",
                    "Dict[str, Any]"
                ],
                "catalog": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "TestValidParallelRunner.test_memory_dataset_input": {
            "name": "test_memory_dataset_input",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "str",
                    "bool"
                ],
                "fan_out_fan_in": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "TestMaxWorkers.test_specified_max_workers_bellow_cpu_cores_count": {
            "name": "test_specified_max_workers_bellow_cpu_cores_count",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "tuple"
                ],
                "mocker": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "fan_out_fan_in": [
                    "tuple"
                ],
                "catalog": [
                    "dict"
                ],
                "cpu_cores": [],
                "user_specified_number": [
                    "tuple"
                ],
                "expected_number": []
            }
        },
        "TestMaxWorkers.test_max_worker_windows": {
            "name": "test_max_worker_windows",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "TestInvalidParallelRunner.test_task_validation": {
            "name": "test_task_validation",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "fan_out_fan_in": [
                    "List[int]",
                    "List[str]",
                    "Dict[int, Set[int]]"
                ],
                "catalog": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestInvalidParallelRunner.test_task_exception": {
            "name": "test_task_exception",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "fan_out_fan_in": [
                    "bool"
                ],
                "catalog": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestInvalidParallelRunner.test_memory_dataset_output": {
            "name": "test_memory_dataset_output",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ],
                "fan_out_fan_in": [
                    "List[str]",
                    "float"
                ]
            }
        },
        "TestInvalidParallelRunner.test_node_returning_none": {
            "name": "test_node_returning_none",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bytes",
                    "float",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "TestInvalidParallelRunner.test_data_set_not_serialisable": {
            "name": "test_data_set_not_serialisable",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ],
                "fan_out_fan_in": [
                    "List[str]"
                ]
            }
        },
        "TestInvalidParallelRunner.test_memory_dataset_not_serialisable": {
            "name": "test_memory_dataset_not_serialisable",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "float",
                    "str"
                ],
                "catalog": []
            }
        },
        "TestInvalidParallelRunner.test_unable_to_schedule_all_nodes": {
            "name": "test_unable_to_schedule_all_nodes",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "is_async": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[str, float]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ],
                "fan_out_fan_in": [
                    "str",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ],
                "catalog": [
                    "bool"
                ]
            }
        },
        "LoggingDataSet.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "Union[Set[str], List[str]]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "tuple",
                    "list",
                    "int"
                ]
            }
        },
        "LoggingDataSet._load": {
            "name": "_load",
            "location": 225,
            "return": [
                "str",
                "Union[str, List]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingDataSet._save": {
            "name": "_save",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "LoggingDataSet._release": {
            "name": "_release",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingDataSet._describe": {
            "name": "_describe",
            "location": 236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParallelRunnerRelease.test_dont_release_inputs_and_outputs": {
            "name": "test_dont_release_inputs_and_outputs",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "TestParallelRunnerRelease.test_release_at_earliest_opportunity": {
            "name": "test_release_at_earliest_opportunity",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": []
            }
        },
        "TestParallelRunnerRelease.test_count_multiple_loads": {
            "name": "test_count_multiple_loads",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "TestParallelRunnerRelease.test_release_transcoded": {
            "name": "test_release_transcoded",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": []
            }
        },
        "TestRunNodeSynchronisationHelper.mock_logging": {
            "name": "mock_logging",
            "location": 351,
            "return": [
                "str",
                "int",
                "bool",
                "Mapping[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ]
            }
        },
        "TestRunNodeSynchronisationHelper.mock_run_node": {
            "name": "mock_run_node",
            "location": 355,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "TestRunNodeSynchronisationHelper.mock_configure_project": {
            "name": "mock_configure_project",
            "location": 359,
            "return": [
                "str",
                "set"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "Callable[[bytes], None]",
                    "str"
                ]
            }
        },
        "TestRunNodeSynchronisationHelper.test_package_name_and_logging_provided": {
            "name": "test_package_name_and_logging_provided",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_logging": [],
                "mock_run_node": [],
                "mock_configure_project": [],
                "is_async": [],
                "mocker": []
            }
        },
        "TestRunNodeSynchronisationHelper.test_package_name_not_provided": {
            "name": "test_package_name_not_provided",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_logging": [],
                "mock_run_node": [],
                "is_async": [],
                "mocker": []
            }
        },
        "TestInvalidParallelRunner.test_data_set_not_serialisable._load": {
            "name": "_load",
            "location": 168,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "TestInvalidParallelRunner.test_data_set_not_serialisable._save": {
            "name": "_save",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "arg": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        }
    },
    "kedro-main/tests/runner/test_sequential_runner.py": {
        "memory_catalog": {
            "name": "memory_catalog",
            "location": 20,
            "return": [
                "Optional[float]",
                "dict",
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {}
        },
        "pandas_df_feed_dict": {
            "name": "pandas_df_feed_dict",
            "location": 27,
            "return": [
                "str",
                "Dict[str, bool]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "conflicting_feed_dict": {
            "name": "conflicting_feed_dict",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Union[Dict, Tuple]",
                "int",
                "str"
            ],
            "arguments": {
                "pandas_df_feed_dict": [
                    "bool",
                    "int",
                    "Dict[str, List[str]]",
                    "Callable",
                    "MutableMapping[Any, Any]"
                ]
            }
        },
        "multi_input_list_output": {
            "name": "multi_input_list_output",
            "location": 39,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "arg1": [
                    "str",
                    "List[str]"
                ],
                "arg2": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "unfinished_outputs_pipeline": {
            "name": "unfinished_outputs_pipeline",
            "location": 109,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "TestValidSequentialRunner.test_run_with_plugin_manager": {
            "name": "test_run_with_plugin_manager",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fan_out_fan_in": [
                    "Callable"
                ],
                "catalog": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestValidSequentialRunner.test_run_without_plugin_manager": {
            "name": "test_run_without_plugin_manager",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fan_out_fan_in": [
                    "str",
                    "Dict[str, Any]"
                ],
                "catalog": [
                    "bool"
                ]
            }
        },
        "TestSeqentialRunnerBranchlessPipeline.test_no_input_seq": {
            "name": "test_no_input_seq",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "str",
                    "List[str]"
                ],
                "branchless_no_input_pipeline": [
                    "str",
                    "List[str]"
                ],
                "catalog": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestSeqentialRunnerBranchlessPipeline.test_no_data_sets": {
            "name": "test_no_data_sets",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "str"
                ],
                "branchless_pipeline": [
                    "str"
                ]
            }
        },
        "TestSeqentialRunnerBranchlessPipeline.test_no_feed": {
            "name": "test_no_feed",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [],
                "memory_catalog": [],
                "branchless_pipeline": []
            }
        },
        "TestSeqentialRunnerBranchlessPipeline.test_node_returning_none": {
            "name": "test_node_returning_none",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "str",
                    "Tuple[str, dict]"
                ],
                "saving_none_pipeline": [
                    "str",
                    "Tuple[str, dict]"
                ],
                "catalog": [
                    "str",
                    "Tuple[str, dict]"
                ]
            }
        },
        "TestSeqentialRunnerBranchlessPipeline.test_result_saved_not_returned": {
            "name": "test_result_saved_not_returned",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "str"
                ],
                "saving_result_pipeline": [
                    "str"
                ]
            }
        },
        "TestSeqentialRunnerBranchedPipeline.test_input_seq": {
            "name": "test_input_seq",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "str",
                    "dict",
                    "int"
                ],
                "memory_catalog": [
                    "str",
                    "bytes"
                ],
                "unfinished_outputs_pipeline": [
                    "str",
                    "dict",
                    "int"
                ],
                "pandas_df_feed_dict": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "TestSeqentialRunnerBranchedPipeline.test_conflict_feed_catalog": {
            "name": "test_conflict_feed_catalog",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "str",
                    "dict",
                    "int"
                ],
                "memory_catalog": [
                    "str"
                ],
                "unfinished_outputs_pipeline": [
                    "str",
                    "dict",
                    "int"
                ],
                "conflicting_feed_dict": [
                    "bool",
                    "str",
                    "dict",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestSeqentialRunnerBranchedPipeline.test_unsatisfied_inputs": {
            "name": "test_unsatisfied_inputs",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "Optional[str]"
                ],
                "unfinished_outputs_pipeline": [
                    "Optional[str]"
                ],
                "catalog": [
                    "Optional[str]"
                ]
            }
        },
        "LoggingDataSet.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "Union[Set[str], List[str]]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "tuple",
                    "list",
                    "int"
                ]
            }
        },
        "LoggingDataSet._load": {
            "name": "_load",
            "location": 173,
            "return": [
                "str",
                "Union[str, List]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingDataSet._save": {
            "name": "_save",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "LoggingDataSet._release": {
            "name": "_release",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingDataSet._describe": {
            "name": "_describe",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSequentialRunnerRelease.test_dont_release_inputs_and_outputs": {
            "name": "test_dont_release_inputs_and_outputs",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "float",
                    "str"
                ]
            }
        },
        "TestSequentialRunnerRelease.test_release_at_earliest_opportunity": {
            "name": "test_release_at_earliest_opportunity",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "float",
                    "str"
                ]
            }
        },
        "TestSequentialRunnerRelease.test_count_multiple_loads": {
            "name": "test_count_multiple_loads",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "bytes",
                    "float"
                ]
            }
        },
        "TestSequentialRunnerRelease.test_release_transcoded": {
            "name": "test_release_transcoded",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_async": [
                    "float",
                    "str"
                ]
            }
        },
        "TestSequentialRunnerRelease.test_confirms": {
            "name": "test_confirms",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "pipeline": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "List[str]",
                    "float"
                ],
                "is_async": [
                    "str",
                    "Dict[str, Sequence[Any]]",
                    "List[str]",
                    "float"
                ]
            }
        },
        "TestSeqentialRunnerBranchlessPipeline.test_result_saved_not_returned._load": {
            "name": "_load",
            "location": 89,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {}
        },
        "TestSeqentialRunnerBranchlessPipeline.test_result_saved_not_returned._save": {
            "name": "_save",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "arg": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        }
    },
    "kedro-main/tests/runner/test_thread_runner.py": {
        "TestValidThreadRunner.test_create_default_data_set": {
            "name": "test_create_default_data_set",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidThreadRunner.test_thread_run": {
            "name": "test_thread_run",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fan_out_fan_in": [
                    "Callable",
                    "int"
                ],
                "catalog": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestValidThreadRunner.test_thread_run_with_plugin_manager": {
            "name": "test_thread_run_with_plugin_manager",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fan_out_fan_in": [
                    "bool"
                ],
                "catalog": [
                    "derex.runner.projecProject",
                    "bool"
                ]
            }
        },
        "TestValidThreadRunner.test_memory_dataset_input": {
            "name": "test_memory_dataset_input",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fan_out_fan_in": [
                    "Callable",
                    "int",
                    "bool"
                ]
            }
        },
        "TestMaxWorkers.test_specified_max_workers": {
            "name": "test_specified_max_workers",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "int"
                ],
                "fan_out_fan_in": [
                    "int",
                    "Dict[str, Any]"
                ],
                "catalog": [
                    "Callable[[Dict], None]",
                    "dict"
                ],
                "user_specified_number": [
                    "int",
                    "Dict[str, Any]"
                ],
                "expected_number": []
            }
        },
        "TestMaxWorkers.test_init_with_negative_process_count": {
            "name": "test_init_with_negative_process_count",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAsync.test_thread_run": {
            "name": "test_thread_run",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fan_out_fan_in": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "catalog": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "derex.runner.projecProject",
                    "bool"
                ]
            }
        },
        "TestInvalidThreadRunner.test_task_exception": {
            "name": "test_task_exception",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fan_out_fan_in": [
                    "float",
                    "Optional[int]",
                    "Optional[Any]"
                ],
                "catalog": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "TestInvalidThreadRunner.test_node_returning_none": {
            "name": "test_node_returning_none",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingDataSet.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "Union[Set[str], List[str]]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "tuple",
                    "list",
                    "int"
                ]
            }
        },
        "LoggingDataSet._load": {
            "name": "_load",
            "location": 115,
            "return": [
                "str",
                "Union[str, List]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingDataSet._save": {
            "name": "_save",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "LoggingDataSet._release": {
            "name": "_release",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingDataSet._describe": {
            "name": "_describe",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadRunnerRelease.test_dont_release_inputs_and_outputs": {
            "name": "test_dont_release_inputs_and_outputs",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadRunnerRelease.test_release_at_earliest_opportunity": {
            "name": "test_release_at_earliest_opportunity",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadRunnerRelease.test_count_multiple_loads": {
            "name": "test_count_multiple_loads",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadRunnerRelease.test_release_transcoded": {
            "name": "test_release_transcoded",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kedro-main/tests/runner/__init__.py": {},
    "kedro-main/tests/tools/test_cli.py": {
        "fake_root_dir": {
            "name": "fake_root_dir",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "cerulean.Path",
                    "pathlib.PosixPath",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "fake_metadata": {
            "name": "fake_metadata",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fake_root_dir": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "TestCLITools.test_get_cli_structure_raw": {
            "name": "test_get_cli_structure_raw",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "fake_metadata": []
            }
        },
        "TestCLITools.test_get_cli_structure_depth": {
            "name": "test_get_cli_structure_depth",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "fake_metadata": []
            }
        },
        "TestCLITools.test_get_cli_structure_help": {
            "name": "test_get_cli_structure_help",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str"
                ],
                "fake_metadata": []
            }
        }
    },
    "kedro-main/tools/cli.py": {
        "_recurse_cli": {
            "name": "_recurse_cli",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "cli_element": [
                    "str"
                ],
                "ctx": [
                    "click.Context",
                    "bool"
                ],
                "io_dict": [
                    "Tuple[str]",
                    "Union[str, List[str]]",
                    "str",
                    "int",
                    "type"
                ],
                "get_help": []
            }
        },
        "get_cli_structure": {
            "name": "get_cli_structure",
            "location": 52,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cli_obj": [
                    "bool",
                    "IO"
                ],
                "get_help": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "kedro-main/tools/__init__.py": {},
    "kedro-main/tools/circleci/github_scripts/kedro_version.py": {
        "get_kedro_version": {
            "name": "get_kedro_version",
            "location": 14,
            "return": [
                "str",
                "bool",
                "OrderedDict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "init_file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    }
}
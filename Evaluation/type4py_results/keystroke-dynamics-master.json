{
    "keystroke-dynamics-master/common.py": {
        "get_file_list": {
            "name": "get_file_list",
            "location": 12,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "folder": [
                    "str"
                ],
                "extension": [
                    "str",
                    "os.PathLike",
                    "dict",
                    "List[str]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "get_path": {
            "name": "get_path",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_binary_validation": {
            "name": "get_binary_validation",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Optional[\"Address\"]",
                    "int",
                    "bool"
                ],
                "default": [
                    "str",
                    "Optional[\"Address\"]",
                    "int",
                    "bool"
                ]
            }
        },
        "get_existing_filename": {
            "name": "get_existing_filename",
            "location": 39,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "existing_files": [
                    "List[str]",
                    "str",
                    "TextIO"
                ],
                "multiple": [
                    "str",
                    "TextIO",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "print_report": {
            "name": "print_report",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "report": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_sequence_from_file": {
            "name": "get_sequence_from_file",
            "location": 91,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "keystroke-dynamics-master/evaluator.py": {
        "evaluator": {
            "name": "evaluator",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keystroke-dynamics-master/filter.py": {
        "sanitize_encoding": {
            "name": "sanitize_encoding",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keystroke-dynamics-master/hello.py": {
        "get_binary_validation": {
            "name": "get_binary_validation",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Optional[\"Address\"]",
                    "int",
                    "bool"
                ],
                "default": [
                    "str",
                    "Optional[\"Address\"]",
                    "int",
                    "bool"
                ]
            }
        },
        "program_menu": {
            "name": "program_menu",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "menu": {
            "name": "menu",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keystroke-dynamics-master/keylogger.py": {
        "keylog_session": {
            "name": "keylog_session",
            "location": 8,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Tuple[int, int, int]",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "replay_sample": {
            "name": "replay_sample",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "sample": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "keystroke-dynamics-master/Model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nu": [
                    "int",
                    "bool",
                    "float"
                ],
                "gamma": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Model.makePipeline": {
            "name": "makePipeline",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.scaler": {
            "name": "scaler",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.classifier": {
            "name": "classifier",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.pipeline": {
            "name": "pipeline",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.fit": {
            "name": "fit",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "float"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 68,
            "return": [
                "bool",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "str",
                    "Callable[[None], bool]",
                    "bool",
                    "Union[str, type]",
                    "dict",
                    "int"
                ]
            }
        },
        "Model.score": {
            "name": "score",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "Union[numpy.ndarray, List[numpy.ndarray]]",
                    "Iterable[Iterable[float]]",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "numpy.array"
                ]
            }
        },
        "Model.evaluate": {
            "name": "evaluate",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pipeline": [
                    "Tuple[Literal, Literal]",
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "Callable[[], None]"
                ],
                "train": [
                    "str",
                    "dict",
                    "Tuple[str]",
                    "List[Dict[str, Any]]"
                ],
                "test": [
                    "str",
                    "dict",
                    "Tuple[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Model.report": {
            "name": "report",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pipeline": [
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "train": [
                    "str",
                    "dict",
                    "Tuple[str]",
                    "List[Dict[str, Any]]"
                ],
                "test": [
                    "str",
                    "dict",
                    "Tuple[str]",
                    "List[Dict[str, Any]]"
                ],
                "outliers": [
                    "str",
                    "dict",
                    "Tuple[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Model.findParameters": {
            "name": "findParameters",
            "location": 134,
            "return": [
                "int",
                "Union[tuple, list]",
                "Optional[bool]"
            ],
            "arguments": {
                "pipeline": [
                    "Dict[str, float]",
                    "Dict[str, int]",
                    "float",
                    "Type[T]",
                    "List[str]"
                ],
                "X": [
                    "numpy.array",
                    "Mapping[str, float]",
                    "int"
                ],
                "y": [
                    "numpy.array",
                    "Mapping[str, float]",
                    "int"
                ],
                "returnModel": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "Model.copyParameters": {
            "name": "copyParameters",
            "location": 158,
            "return": [],
            "arguments": {
                "params": [
                    "dict",
                    "List[dict]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "keystroke-dynamics-master/Sample.py": {
        "KbEvt.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KbEvt.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.__len__": {
            "name": "__len__",
            "location": 55,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.__iter__": {
            "name": "__iter__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.string": {
            "name": "string",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[int, float]",
                    "Iterable[Any]"
                ]
            }
        },
        "Sample.impostor": {
            "name": "impostor",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_impostor": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "keystroke-dynamics-master/SampleParser.py": {
        "SampleParser.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "int",
                    "List[List[int]]",
                    "List['cirq.Qid']",
                    "list",
                    "bool"
                ]
            }
        },
        "SampleParser.timings": {
            "name": "timings",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keystroke-dynamics-master/sample_recorder.py": {
        "get_intro_message": {
            "name": "get_intro_message",
            "location": 18,
            "return": [
                "bool",
                "Dict[int, dict]",
                "int"
            ],
            "arguments": {}
        },
        "get_file_list": {
            "name": "get_file_list",
            "location": 24,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_binary_validation": {
            "name": "get_binary_validation",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Optional[\"Address\"]",
                    "int",
                    "bool"
                ],
                "default": [
                    "str",
                    "Optional[\"Address\"]",
                    "int",
                    "bool"
                ]
            }
        },
        "get_existing_filename": {
            "name": "get_existing_filename",
            "location": 44,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "existing_files": [
                    "List[str]",
                    "str",
                    "TextIO"
                ]
            }
        },
        "get_default_filename": {
            "name": "get_default_filename",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_custom_filename": {
            "name": "get_custom_filename",
            "location": 66,
            "return": [
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "existing_files": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "get_single_sample": {
            "name": "get_single_sample",
            "location": 84,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_first_sample": {
            "name": "get_first_sample",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_n_samples": {
            "name": "get_n_samples",
            "location": 121,
            "return": [
                "str",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "reference": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_path": {
            "name": "get_path",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_sequence_from_file": {
            "name": "get_sequence_from_file",
            "location": 148,
            "return": [
                "str",
                "datetime.datetime",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "save_to_file": {
            "name": "save_to_file",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "sequence": [
                    "List[keylogger.Sample]",
                    "str",
                    "List[Tuple[str, str, str]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "sample_recorder": {
            "name": "sample_recorder",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keystroke-dynamics-master/tester.py": {
        "get_single_sample": {
            "name": "get_single_sample",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "tester": {
            "name": "tester",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 92,
            "return": [],
            "arguments": {}
        }
    },
    "keystroke-dynamics-master/trainer.py": {
        "get_custom_filename": {
            "name": "get_custom_filename",
            "location": 29,
            "return": [
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "existing_files": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "get_default_filename": {
            "name": "get_default_filename",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_file_list": {
            "name": "get_file_list",
            "location": 52,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "trainer": {
            "name": "trainer",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "spinner_loop": {
            "name": "spinner_loop",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "spinner": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "keystroke-dynamics-master/research/Data.py": {
        "Data.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.retrieveData": {
            "name": "retrieveData",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.computeHeadersMask": {
            "name": "computeHeadersMask",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.getTargets": {
            "name": "getTargets",
            "location": 81,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.getSamples": {
            "name": "getSamples",
            "location": 84,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.getHeaders": {
            "name": "getHeaders",
            "location": 87,
            "return": [
                "str",
                "List[dict]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.usersCounts": {
            "name": "usersCounts",
            "location": 91,
            "return": [
                "str",
                "bytes",
                "list",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.users": {
            "name": "users",
            "location": 96,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.printUsersCounts": {
            "name": "printUsersCounts",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keystroke-dynamics-master/research/generator.py": {
        "getUserData": {
            "name": "getUserData",
            "location": 11,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "userId": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]"
                ],
                "data": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]"
                ],
                "columns": [
                    "int",
                    "Sequence[int]",
                    "Optional[int]"
                ]
            }
        }
    },
    "keystroke-dynamics-master/research/ResultTable.py": {
        "ResultTable.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultTable.append": {
            "name": "append",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "pandas.DataFrame",
                    "float"
                ],
                "TP": [
                    "pandas.DataFrame",
                    "float"
                ],
                "TN": [
                    "pandas.DataFrame",
                    "float"
                ],
                "FP": [
                    "pandas.DataFrame",
                    "float"
                ],
                "FN": [
                    "pandas.DataFrame",
                    "float"
                ],
                "f1": [
                    "pandas.DataFrame",
                    "float"
                ],
                "accuracy": [
                    "pandas.DataFrame",
                    "float"
                ],
                "precision": [
                    "pandas.DataFrame",
                    "float"
                ],
                "recall": [
                    "pandas.DataFrame",
                    "float"
                ],
                "gamma": [
                    "pandas.DataFrame",
                    "float"
                ],
                "nu": [
                    "pandas.DataFrame",
                    "float"
                ]
            }
        },
        "ResultTable.appendResults": {
            "name": "appendResults",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Callable"
                ],
                "results": [
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Callable"
                ],
                "parameters": [
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "Callable"
                ]
            }
        },
        "ResultTable.format": {
            "name": "format",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultTable.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "float",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultTable._repr_html_": {
            "name": "_repr_html_",
            "location": 68,
            "return": [
                "float",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keystroke-dynamics-master/research/test.py": {
        "getUserData": {
            "name": "getUserData",
            "location": 11,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user": [
                    "Dict[str, Any]",
                    "List[Optional[str]]",
                    "Optional[int]",
                    "int"
                ],
                "data": [
                    "Dict[str, Any]",
                    "List[Optional[str]]",
                    "Optional[int]",
                    "int"
                ],
                "columns": [
                    "Dict[str, Any]",
                    "List[Optional[str]]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "customGridSearch": {
            "name": "customGridSearch",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "int",
                    "Sequence[str]",
                    "bool",
                    "Optional[int]"
                ],
                "data": [
                    "int",
                    "Sequence[str]",
                    "bool",
                    "Optional[int]"
                ],
                "columns": [
                    "int",
                    "Sequence[str]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "gridSearchCV": {
            "name": "gridSearchCV",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "int",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "data": [
                    "int",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "columns": [
                    "int",
                    "Sequence[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "keystroke-dynamics-master/review/paper/textToCsv.py": {},
    "keystroke-dynamics-master/softs/encryption/cryption_pck.py": {
        "string_gen": {
            "name": "string_gen",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "encrypt_parameters": {
            "name": "encrypt_parameters",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "file_dump": {
            "name": "file_dump",
            "location": 37,
            "return": [],
            "arguments": {
                "encrypted": [],
                "file_name": []
            }
        },
        "file_read": {
            "name": "file_read",
            "location": 51,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "aes_gen": {
            "name": "aes_gen",
            "location": 63,
            "return": [],
            "arguments": {
                "init_vector": [],
                "key": []
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 73,
            "return": [],
            "arguments": {
                "message": [],
                "aes": []
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 116,
            "return": [],
            "arguments": {
                "message": [],
                "aes": []
            }
        }
    },
    "keystroke-dynamics-master/softs/encryption/Sample.py": {
        "Sample.__str__": {
            "name": "__str__",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keystroke-dynamics-master/softs/encryption/test.py": {
        "entrypoint": {
            "name": "entrypoint",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "keystroke-dynamics-master/softs/encryption/test_retest.py": {}
}
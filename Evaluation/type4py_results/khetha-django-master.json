{
    "khetha-django-master/setup.py": {},
    "khetha-django-master/src/manage.py": {},
    "khetha-django-master/src/django_missing_bits/missing_utils.py": {
        "enum_choices": {
            "name": "enum_choices",
            "location": 9,
            "return": [
                "bool",
                "str",
                "List[Tuple[Any, str]]",
                "Optional[Union[int, str]]"
            ],
            "arguments": {
                "enum_type": [
                    "Type[enum.Enum]",
                    "type",
                    "Type[Any]",
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]"
                ]
            }
        }
    },
    "khetha-django-master/src/django_missing_bits/__init__.py": {},
    "khetha-django-master/src/khetha/admin.py": {
        "QuestionInline.answer_options": {
            "name": "answer_options",
            "location": 46,
            "return": [
                "str",
                "float",
                "int",
                "Optional[str]",
                "viewer.models.Archive"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "khetha.models.Question",
                    "str"
                ]
            }
        }
    },
    "khetha-django-master/src/khetha/models.py": {
        "Task.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 43,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.questions": {
            "name": "questions",
            "location": 46,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, List[str]]",
                "List[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.get_submission": {
            "name": "get_submission",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_key": [
                    "core.models.User.Key",
                    "str",
                    "core.models.GroupingKey"
                ]
            }
        },
        "Question.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Question.display_type_enum": {
            "name": "display_type_enum",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "Question.answer_options": {
            "name": "answer_options",
            "location": 117,
            "return": [
                "bool",
                "str",
                "bytes",
                "List[Dict[str, Any]]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerOption.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskSubmission.answers": {
            "name": "answers",
            "location": 143,
            "return": [
                "str",
                "dict",
                "list",
                "Union[int, None]",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskSubmission.progress_factor": {
            "name": "progress_factor",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskSubmission.is_completed": {
            "name": "is_completed",
            "location": 158,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskSubmission.get_task_url": {
            "name": "get_task_url",
            "location": 161,
            "return": [
                "str",
                "tracim.models.data.Content",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Answer.__str__": {
            "name": "__str__",
            "location": 178,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserTasks.for_user": {
            "name": "for_user",
            "location": 194,
            "return": [
                "Iterable[str]",
                "models.Station",
                "str",
                "Union['KspNativeControl', int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[int]",
                    "dict",
                    "bool"
                ],
                "user_key": [
                    "str"
                ],
                "tasks": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[int]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "khetha-django-master/src/khetha/settings.py": {},
    "khetha-django-master/src/khetha/urls.py": {},
    "khetha-django-master/src/khetha/views.py": {
        "get_user_key": {
            "name": "get_user_key",
            "location": 21,
            "return": [
                "str",
                "tracim.models.data.Content",
                "lxml.html.HtmlElement",
                "IO[Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "dict"
                ]
            }
        },
        "TaskListView.get_context_data": {
            "name": "get_context_data",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, List[str]]",
                "int",
                "dict",
                "models.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 68,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoMessageErrorsFormMixin.form_invalid": {
            "name": "form_invalid",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "AnswerUpdateView.get_queryset": {
            "name": "get_queryset",
            "location": 104,
            "return": [
                "bool",
                "str",
                "int",
                "bytes",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 114,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerUpdateView.render_to_response": {
            "name": "render_to_response",
            "location": 118,
            "return": [
                "dict",
                "django.http.HttpResponse"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        }
    },
    "khetha-django-master/src/khetha/wsgi.py": {},
    "khetha-django-master/src/khetha/__init__.py": {},
    "khetha-django-master/src/khetha/migrations/0001_initial.py": {},
    "khetha-django-master/src/khetha/migrations/0002_schema_sketch.py": {},
    "khetha-django-master/src/khetha/migrations/0003_add_task_question_ordering.py": {},
    "khetha-django-master/src/khetha/migrations/0004_add_submissions.py": {},
    "khetha-django-master/src/khetha/migrations/0005_question_display_type.py": {},
    "khetha-django-master/src/khetha/migrations/0006_question_display_type_place_field.py": {},
    "khetha-django-master/src/khetha/migrations/__init__.py": {},
    "khetha-django-master/src/khetha/templatetags/khetha_tags.py": {
        "get_submission": {
            "name": "get_submission",
            "location": 13,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "khetha.models.Task",
                    "int"
                ],
                "user_key": [
                    "str",
                    "khetha.models.Task",
                    "int"
                ]
            }
        },
        "google_maps_api_key": {
            "name": "google_maps_api_key",
            "location": 21,
            "return": [
                "str",
                "bool",
                "Sequence[Sequence[Any]]"
            ],
            "arguments": {}
        }
    },
    "khetha-django-master/src/khetha/templatetags/__init__.py": {},
    "khetha-django-master/tests/helpers.py": {
        "TestResponse.check": {
            "name": "check",
            "location": 15,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "response": [
                    "scrapy.http.Response",
                    "scrapy.http.TextResponse"
                ]
            }
        }
    },
    "khetha-django-master/tests/test_khetha_tags.py": {
        "Test_google_maps_api_key.test_missing": {
            "name": "test_missing",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_google_maps_api_key.test_empty": {
            "name": "test_empty",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_google_maps_api_key.test__configured": {
            "name": "test__configured",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "khetha-django-master/tests/test_models.py": {
        "TestUser.test_create": {
            "name": "test_create",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUser.test_str": {
            "name": "test_str",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_create": {
            "name": "test_create",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_str": {
            "name": "test_str",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_get_absolute_url": {
            "name": "test_get_absolute_url",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTask.test_questions": {
            "name": "test_questions",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestion._create": {
            "name": "_create",
            "location": 61,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "TestQuestion.test_create": {
            "name": "test_create",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestion.test_str": {
            "name": "test_str",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestion.test_answer_options": {
            "name": "test_answer_options",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestion.test_display_type": {
            "name": "test_display_type",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuestion.test_display_type_enum": {
            "name": "test_display_type_enum",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerOption._create": {
            "name": "_create",
            "location": 111,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "TestAnswerOption.test_create": {
            "name": "test_create",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerOption.test_str": {
            "name": "test_str",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskSubmission.test_answers": {
            "name": "test_answers",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskSubmission.test_progress_factor_is_completed": {
            "name": "test_progress_factor_is_completed",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskSubmission.test_get_task_url": {
            "name": "test_get_task_url",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserTasks.test_basic": {
            "name": "test_basic",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserTasks.test_mixed": {
            "name": "test_mixed",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "khetha-django-master/tests/test_views.py": {
        "assert_messages": {
            "name": "assert_messages",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "django.http.response.HttpResponse",
                    "int"
                ],
                "expected_messages": [
                    "List[str]",
                    "int",
                    "Counter",
                    "Dict[str, List[str]]",
                    "models.Movie",
                    "str"
                ]
            }
        },
        "_publish_tasks": {
            "name": "_publish_tasks",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_unpublish_tasks": {
            "name": "_unpublish_tasks",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_set_user_key": {
            "name": "_set_user_key",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "user_key": [
                    "str"
                ]
            }
        },
        "TestHome.test_get": {
            "name": "test_get",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskListView._get": {
            "name": "_get",
            "location": 59,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskListView.test_get__not_published": {
            "name": "test_get__not_published",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskListView.test_get__published": {
            "name": "test_get__published",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskDetailView._get": {
            "name": "_get",
            "location": 100,
            "return": [
                "core.models.User",
                "str",
                "int",
                "zerver.models.UserProfile",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskDetailView.test_not_found": {
            "name": "test_not_found",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaskDetailView._get_ok": {
            "name": "_get_ok",
            "location": 114,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "dict",
                    "annofabapi.models.Task",
                    "khetha.models.Task",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TestTaskDetailView.test_get__published": {
            "name": "test_get__published",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdateView.setUpTestData": {
            "name": "setUpTestData",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "TestAnswerUpdateView._create_answers": {
            "name": "_create_answers",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict"
                ],
                "user_key": [
                    "str",
                    "Dict[str, Any]",
                    "excars.models.user.User"
                ]
            }
        },
        "TestAnswerUpdateView.setUp": {
            "name": "setUp",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdateView._get": {
            "name": "_get",
            "location": 154,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdateView._post": {
            "name": "_post",
            "location": 158,
            "return": [
                "Optional[tracim.models.auth.User]",
                "TextIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdateView.test_get__not_found": {
            "name": "test_get__not_found",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdateView.test_get_post__no_access": {
            "name": "test_get_post__no_access",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdateView.test_get": {
            "name": "test_get",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdateView.test_post__empty": {
            "name": "test_post__empty",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdateView.test_post__values": {
            "name": "test_post__values",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnswerUpdateView.test_post__completed": {
            "name": "test_post__completed",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
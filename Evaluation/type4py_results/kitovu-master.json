{
    "kitovu-master/setup.py": {
        "read": {
            "name": "read",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "kitovu-master/ci/appveyor-bootstrap.py": {
        "download_file": {
            "name": "download_file",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "install_python": {
            "name": "install_python",
            "location": 60,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Tuple[str, str]"
                ],
                "arch": [
                    "str",
                    "Tuple[str, str]"
                ],
                "home": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "download_python": {
            "name": "download_python",
            "location": 86,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "version": [
                    "str"
                ],
                "arch": [
                    "str"
                ]
            }
        },
        "install_pip": {
            "name": "install_pip",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "home": [
                    "str"
                ]
            }
        },
        "install_packages": {
            "name": "install_packages",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "home": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "download_file.report": {
            "name": "report",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "count": [
                    "int",
                    "float",
                    "Tuple[float, float]"
                ],
                "size": [
                    "int",
                    "float",
                    "Tuple[float, float]"
                ],
                "total": [
                    "str",
                    "int",
                    "List[Tuple[int, str]]",
                    "bytes"
                ]
            }
        }
    },
    "kitovu-master/ci/appveyor-download.py": {
        "make_auth_headers": {
            "name": "make_auth_headers",
            "location": 18,
            "return": [
                "Dict[str, Union[str, int]]",
                "dict",
                "List[dict]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "download_latest_artifacts": {
            "name": "download_latest_artifacts",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "account_project": [
                    "str",
                    "Optional[str]"
                ],
                "build_id": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ensure_dirs": {
            "name": "ensure_dirs",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "download_url": {
            "name": "download_url",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "filename": [
                    "str",
                    "Callable[[str], None]"
                ],
                "headers": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "unpack_zipfile": {
            "name": "unpack_zipfile",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "kitovu-master/docs/conf.py": {},
    "kitovu-master/misc/debugplugin/kitovu_debug.py": {
        "DebugPlugin.configure": {
            "name": "configure",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "DebugPlugin.connect": {
            "name": "connect",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugPlugin.disconnect": {
            "name": "disconnect",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugPlugin.create_local_digest": {
            "name": "create_local_digest",
            "location": 18,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePath",
                    "pathlib.Path",
                    "str",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "DebugPlugin.create_remote_digest": {
            "name": "create_remote_digest",
            "location": 22,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePath",
                    "pathlib.Path",
                    "str",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "DebugPlugin.list_path": {
            "name": "list_path",
            "location": 27,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePath",
                    "pathlib.Path",
                    "str",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "DebugPlugin.retrieve_file": {
            "name": "retrieve_file",
            "location": 31,
            "return": [
                "typing.Optional[builtins.int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "IO[bytes]",
                    "pathlib.PurePath",
                    "str"
                ],
                "fileobj": [
                    "IO[bytes]",
                    "pathlib.PurePath",
                    "str"
                ]
            }
        }
    },
    "kitovu-master/misc/debugplugin/setup.py": {},
    "kitovu-master/src/kitovu/cli.py": {
        "cli": {
            "name": "cli",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "loglevel": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "list"
                ]
            }
        },
        "gui": {
            "name": "gui",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sync": {
            "name": "sync",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[pathlib.Path]",
                    "float",
                    "Tuple[float, float, float, float]",
                    "Optional[int]",
                    "tuple"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[pathlib.Path]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "fileinfo": {
            "name": "fileinfo",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "edit": {
            "name": "edit",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[pathlib.Path]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "editor": [
                    "Optional[pathlib.Path]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "kitovu-master/src/kitovu/utils.py": {
        "get_password": {
            "name": "get_password",
            "location": 15,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "plugin": [
                    "Optional[str]",
                    "int",
                    "List[List[int]]",
                    "List[str]"
                ],
                "identifier": [
                    "str"
                ],
                "prompt": [
                    "Optional[str]",
                    "int",
                    "List[List[int]]",
                    "List[str]"
                ]
            }
        },
        "sanitize_filename": {
            "name": "sanitize_filename",
            "location": 32,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "name": [
                    "pathlib.PurePath",
                    "str",
                    "List[str]"
                ]
            }
        },
        "SchemaValidator.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abort": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "str",
                    "float"
                ]
            }
        },
        "SchemaValidator.validate": {
            "name": "validate",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Iterable[T]"
                ],
                "schema": [
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "SchemaValidator.raise_error": {
            "name": "raise_error",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator.is_valid": {
            "name": "is_valid",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator.error_message": {
            "name": "error_message",
            "location": 71,
            "return": [
                "str",
                "Iterable[int]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidSettingsError.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "List[str]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        }
    },
    "kitovu-master/src/kitovu/__init__.py": {},
    "kitovu-master/src/kitovu/__main__.py": {},
    "kitovu-master/src/kitovu/gui/app.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "kitovu-master/src/kitovu/gui/confscreen.py": {
        "ConfScreen.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "ConfScreen.load_file": {
            "name": "load_file",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfScreen.save": {
            "name": "save",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "close": []
            }
        }
    },
    "kitovu-master/src/kitovu/gui/mainwindow.py": {
        "CentralWidget.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        },
        "CentralWidget.on_sync_pressed": {
            "name": "on_sync_pressed",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CentralWidget.on_conf_pressed": {
            "name": "on_conf_pressed",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        }
    },
    "kitovu-master/src/kitovu/gui/startscreen.py": {
        "LogoWidget.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtWidgets.QWidget",
                    "Optional[str]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]",
                    "str",
                    "Optional['Directory']"
                ]
            }
        },
        "StartScreen.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "PyQt5.QtWidgets.QWidget",
                    "PyQt5.QtCore.QObject"
                ]
            }
        }
    },
    "kitovu-master/src/kitovu/gui/syncscreen.py": {
        "ProgressBar.show_empty": {
            "name": "show_empty",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProgressBar.show_full": {
            "name": "show_full",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProgressBar.show_pulse": {
            "name": "show_pulse",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncScreen.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "SyncScreen.on_process_started": {
            "name": "on_process_started",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncScreen.on_process_ready_read": {
            "name": "on_process_ready_read",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncScreen.on_process_finished": {
            "name": "on_process_finished",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "exit_code": [],
                "exit_status": []
            }
        },
        "SyncScreen.on_status_message": {
            "name": "on_status_message",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "SyncScreen.on_cancel_clicked": {
            "name": "on_cancel_clicked",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncScreen.start_sync": {
            "name": "start_sync",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kitovu-master/src/kitovu/gui/__init__.py": {},
    "kitovu-master/src/kitovu/sync/filecache.py": {
        "get_path": {
            "name": "get_path",
            "location": 73,
            "return": [
                "pathlib.Path",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "File.to_dict": {
            "name": "to_dict",
            "location": 83,
            "return": [
                "bool",
                "List[int]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileCache.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "FileCache._compare_digests": {
            "name": "_compare_digests",
            "location": 95,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "remote_digest": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[int]",
                    "Dict[int, int]",
                    "Callable"
                ],
                "local_digest": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[int]",
                    "Dict[int, int]",
                    "Callable"
                ],
                "cached_digest": [
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "FileCache.write": {
            "name": "write",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileCache.load": {
            "name": "load",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileCache.modify": {
            "name": "modify",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Set[str]"
                ],
                "plugin": [
                    "str",
                    "kitovu.sync.syncplugin.AbstractSyncPlugin",
                    "Optional[pathlib.Path]",
                    "Optional[str]"
                ],
                "local_digest_at_synctime": [
                    "str",
                    "dict",
                    "Optional[Tuple[str, ...]]",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "FileCache.discover_changes": {
            "name": "discover_changes",
            "location": 152,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "local_full_path": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "kitovu.sync.syncplugin.AbstractSyncPlugin",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[pathlib.Path]"
                ],
                "remote_full_path": [
                    "pathlib.PurePath",
                    "pathlib.Path",
                    "str"
                ],
                "plugin": [
                    "kitovu.sync.syncplugin.AbstractSyncPlugin",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[pathlib.Path]",
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "kitovu-master/src/kitovu/sync/settings.py": {
        "get_config_file_path": {
            "name": "get_config_file_path",
            "location": 21,
            "return": [
                "pathlib.Path",
                "str",
                "Type[List[Any]]"
            ],
            "arguments": {}
        },
        "EditorSpawner.edit": {
            "name": "edit",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "editor": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, object]",
                    "Dict[str, str]"
                ]
            }
        },
        "EditorSpawner._get_editor_path": {
            "name": "_get_editor_path",
            "location": 52,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "editor": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Settings.from_yaml_file": {
            "name": "from_yaml_file",
            "location": 113,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "str",
                "Dict[int, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "path": [
                    "Optional[pathlib.Path]",
                    "str",
                    "Optional[str]",
                    "int",
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "Settings.from_yaml_stream": {
            "name": "from_yaml_stream",
            "location": 127,
            "return": [
                "str",
                "pathlib.Path",
                "dict",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "dict"
                ],
                "stream": [
                    "dict",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Settings._get_connection_settings": {
            "name": "_get_connection_settings",
            "location": 154,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "validator": [
                    "str",
                    "List[str]",
                    "int",
                    "Mapping[str, str]",
                    "Optional[List[str]]"
                ],
                "raw_connections": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "raw_subjects": [
                    "str",
                    "List[str]",
                    "int",
                    "Mapping[str, str]",
                    "Optional[List[str]]"
                ],
                "global_ignore": [
                    "str",
                    "Optional[Callable[..., Any]]",
                    "float",
                    "int"
                ],
                "root_dir": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "kitovu-master/src/kitovu/sync/syncing.py": {
        "_load_plugin": {
            "name": "_load_plugin",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "plugin_settings": [
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "validator": [
                    "Iterable[T]",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "start_all": {
            "name": "start_all",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "Optional[str]",
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "_start": {
            "name": "_start",
            "location": 54,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "connection_settings": [
                    "str",
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "_sync_subject": {
            "name": "_sync_subject",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": [
                    "pathlib.Path",
                    "str",
                    "type",
                    "Union[str, pathlib.Path]"
                ],
                "plugin": [
                    "kitovu.sync.syncplugin.AbstractSyncPlugin",
                    "kitovu.sync.filecache.FileCache",
                    "pathlib.Path",
                    "str",
                    "bytes"
                ],
                "cache": [
                    "kitovu.sync.filecache.FileCache",
                    "str",
                    "bytes",
                    "kitovu.sync.syncplugin.AbstractSyncPlugin",
                    "logging.LogRecord"
                ]
            }
        },
        "_sync_path": {
            "name": "_sync_path",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "remote_full_path": [
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "str",
                    "pathlib.PosixPath",
                    "Optional[pathlib.Path]"
                ],
                "local_dir": [
                    "pathlib.Path"
                ],
                "remote_dir": [
                    "pathlib.PurePath",
                    "pathlib.Path"
                ],
                "plugin": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "kitovu.sync.syncplugin.AbstractSyncPlugin",
                    "Iterable[str]"
                ],
                "cache": [
                    "kitovu.sync.filecache.FileCache",
                    "str",
                    "Union[os.PathLike, str]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "pathlib.Path"
                ]
            }
        },
        "validate_config": {
            "name": "validate_config",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "config_file": [
                    "pathlib.Path",
                    "Optional[str]",
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        }
    },
    "kitovu-master/src/kitovu/sync/syncplugin.py": {
        "AbstractSyncPlugin.configure": {
            "name": "configure",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "AbstractSyncPlugin.connect": {
            "name": "connect",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSyncPlugin.disconnect": {
            "name": "disconnect",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractSyncPlugin.create_local_digest": {
            "name": "create_local_digest",
            "location": 38,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence",
                    "bool",
                    "Union[str, bytes, int]",
                    "List[Tuple[pathlib.PurePosixPath, parso.python.tree.Scope]]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "AbstractSyncPlugin.create_remote_digest": {
            "name": "create_remote_digest",
            "location": 43,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence",
                    "bool",
                    "Union[str, bytes, int]",
                    "List[Tuple[pathlib.PurePosixPath, parso.python.tree.Scope]]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "AbstractSyncPlugin.list_path": {
            "name": "list_path",
            "location": 48,
            "return": [
                "typing.Iterable[pathlib.PurePath]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "str",
                    "raiden.utils.List[str]",
                    "Iterable[pathlib.Path]",
                    "int"
                ]
            }
        },
        "AbstractSyncPlugin.retrieve_file": {
            "name": "retrieve_file",
            "location": 53,
            "return": [
                "typing.Optional[builtins.int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "raiden.utils.List[str]",
                    "bool"
                ],
                "fileobj": [
                    "pathlib.Path",
                    "str",
                    "raiden.utils.List[str]",
                    "bool"
                ]
            }
        },
        "AbstractSyncPlugin.connection_schema": {
            "name": "connection_schema",
            "location": 66,
            "return": [
                "kitovu.utils.JsonType"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kitovu-master/src/kitovu/sync/__init__.py": {},
    "kitovu-master/src/kitovu/sync/plugin/moodle.py": {
        "MoodlePlugin.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MoodlePlugin._request": {
            "name": "_request",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "MoodlePlugin._check_json_answer": {
            "name": "_check_json_answer",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MoodlePlugin.configure": {
            "name": "configure",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "MoodlePlugin.connect": {
            "name": "connect",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MoodlePlugin.disconnect": {
            "name": "disconnect",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MoodlePlugin._create_digest": {
            "name": "_create_digest",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "changed_at": []
            }
        },
        "MoodlePlugin.create_local_digest": {
            "name": "create_local_digest",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "MoodlePlugin.create_remote_digest": {
            "name": "create_remote_digest",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "MoodlePlugin._list_courses": {
            "name": "_list_courses",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MoodlePlugin._list_files_in_course": {
            "name": "_list_files_in_course",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "course_path": []
            }
        },
        "MoodlePlugin.list_path": {
            "name": "list_path",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "MoodlePlugin.retrieve_file": {
            "name": "retrieve_file",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "fileobj": []
            }
        },
        "MoodlePlugin.connection_schema": {
            "name": "connection_schema",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kitovu-master/src/kitovu/sync/plugin/smb.py": {
        "SmbPlugin.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmbPlugin._password_identifier": {
            "name": "_password_identifier",
            "location": 57,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmbPlugin.configure": {
            "name": "configure",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "SmbPlugin.connect": {
            "name": "connect",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmbPlugin.disconnect": {
            "name": "disconnect",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmbPlugin._create_digest": {
            "name": "_create_digest",
            "location": 133,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[str]",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ],
                "mtime": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "SmbPlugin.create_local_digest": {
            "name": "create_local_digest",
            "location": 146,
            "return": [
                "str",
                "Callable",
                "cmk.utils.type_defs.UserId",
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "SmbPlugin.create_remote_digest": {
            "name": "create_remote_digest",
            "location": 150,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "List[pathlib.Path]",
                    "Optional[str]"
                ]
            }
        },
        "SmbPlugin.list_path": {
            "name": "list_path",
            "location": 161,
            "return": [
                "typing.Iterable[pathlib.PurePath]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "Type[pathlib.PurePath]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "SmbPlugin.retrieve_file": {
            "name": "retrieve_file",
            "location": 174,
            "return": [
                "str",
                "List[str]",
                "bool",
                "pathlib.PosixPath",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ],
                "fileobj": [
                    "pathlib.Path",
                    "str",
                    "List[pathlib.Path]",
                    "Sequence[str]"
                ]
            }
        },
        "SmbPlugin.connection_schema": {
            "name": "connection_schema",
            "location": 187,
            "return": [
                "List[Dict[str, Any]]",
                "Type[Any]",
                "type",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kitovu-master/src/kitovu/sync/plugin/__init__.py": {},
    "kitovu-master/tests/conftest.py": {
        "init_keyring": {
            "name": "init_keyring",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "temppath": {
            "name": "temppath",
            "location": 18,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Sequence[str]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "temppath": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "assets_dir": {
            "name": "assets_dir",
            "location": 28,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        }
    },
    "kitovu-master/tests/test_cli.py": {
        "runner": {
            "name": "runner",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_docs": {
            "name": "test_docs",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "click.testing.CliRunner"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_fileinfo": {
            "name": "test_fileinfo",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_sync_invalid": {
            "name": "test_sync_invalid",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [],
                "temppath": []
            }
        },
        "TestValidate.test_valid": {
            "name": "test_valid",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "temppath": []
            }
        },
        "TestValidate.test_invalid": {
            "name": "test_invalid",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "temppath": []
            }
        },
        "TestEdit.clear_env": {
            "name": "clear_env",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestEdit.TestMissing.patch": {
            "name": "patch",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "bool"
                ]
            }
        },
        "TestEdit.TestMissing.test_defaults": {
            "name": "test_defaults",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestEdit.TestMissing.test_from_args": {
            "name": "test_from_args",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "TestEdit.TestMissing.test_from_env": {
            "name": "test_from_env",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "monkeypatch": [
                    "str",
                    "int"
                ]
            }
        },
        "TestEdit.TestMissing._find_executable_patch": {
            "name": "_find_executable_patch",
            "location": 97,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "editor": [
                    "str",
                    "list",
                    "Callable[[], None]",
                    "tuple"
                ]
            }
        },
        "TestEdit.TestAvailable.patch": {
            "name": "patch",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "int",
                    "str"
                ]
            }
        },
        "TestEdit.TestAvailable.test_with_a_missing_config": {
            "name": "test_with_a_missing_config",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "monkeypatch": [
                    "str"
                ],
                "temppath": []
            }
        },
        "TestEdit.TestAvailable.test_with_an_available_editor": {
            "name": "test_with_an_available_editor",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "monkeypatch": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "temppath": []
            }
        },
        "TestEdit.TestAvailable.test_with_an_available_editor_from_the_args": {
            "name": "test_with_an_available_editor_from_the_args",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "Dict[str, Sequence[str]]"
                ],
                "monkeypatch": [],
                "temppath": []
            }
        },
        "TestEdit.TestAvailable.test_with_an_available_editor_from_the_env": {
            "name": "test_with_an_available_editor_from_the_env",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": [],
                "monkeypatch": [
                    "str"
                ],
                "temppath": []
            }
        },
        "TestEdit.TestAvailable._find_executable_patch": {
            "name": "_find_executable_patch",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "editor": [
                    "str",
                    "list",
                    "Callable[[], None]",
                    "tuple"
                ]
            }
        }
    },
    "kitovu-master/tests/test_dummyplugin.py": {
        "test_connection_active": {
            "name": "test_connection_active",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": [
                    "str",
                    "float"
                ]
            }
        },
        "test_connection_inactive": {
            "name": "test_connection_inactive",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "plugin": [
                    "str",
                    "float"
                ]
            }
        },
        "test_local_digest": {
            "name": "test_local_digest",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "str"
                ],
                "temppath": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_local_digest_changed": {
            "name": "test_local_digest_changed",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "str"
                ],
                "temppath": []
            }
        },
        "test_remote_digest": {
            "name": "test_remote_digest",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_remote_digest_changed": {
            "name": "test_remote_digest_changed",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "pathlib.Path"
                ]
            }
        },
        "test_if_list_path_lists_correct_pathnames": {
            "name": "test_if_list_path_lists_correct_pathnames",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "pathlib.Path"
                ]
            }
        },
        "test_if_correct_file_retrieved": {
            "name": "test_if_correct_file_retrieved",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "str",
                    "pathlib.Path"
                ],
                "temppath": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_if_changed_digest_still_retrieves_correct_file": {
            "name": "test_if_changed_digest_still_retrieves_correct_file",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "pathlib.Path"
                ],
                "temppath": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        }
    },
    "kitovu-master/tests/test_filecache.py": {
        "cache": {
            "name": "cache",
            "location": 10,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "temppath": [
                    "str",
                    "float",
                    "int",
                    "Union[float, int]"
                ]
            }
        },
        "TestFile.test_to_dict": {
            "name": "test_to_dict",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "TestLoadWrite.test_write": {
            "name": "test_write",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "str",
                    "float"
                ],
                "cache": [
                    "pathlib.Path",
                    "int"
                ],
                "plugin": []
            }
        },
        "TestLoadWrite.test_load": {
            "name": "test_load",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "str",
                    "Dict[str, Any]"
                ],
                "cache": [
                    "str"
                ],
                "plugin": []
            }
        },
        "TestLoadWrite.test_filecache_not_found": {
            "name": "test_filecache_not_found",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [],
                "cache": [
                    "str"
                ],
                "plugin": []
            }
        },
        "TestChange.test_modify": {
            "name": "test_modify",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "bool",
                    "float"
                ],
                "plugin": [
                    "str",
                    "float"
                ],
                "cache": [
                    "bool",
                    "float"
                ]
            }
        },
        "TestChange.test_not_matching_pluginname": {
            "name": "test_not_matching_pluginname",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [],
                "plugin": [],
                "cache": []
            }
        },
        "TestFileState.test_file_is_new": {
            "name": "test_file_is_new",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "pathlib.Path",
                    "str"
                ],
                "plugin": [],
                "cache": []
            }
        },
        "TestFileState.test_files_changed": {
            "name": "test_files_changed",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "Union[str, float]",
                    "Optional[Dict[str, Any]]"
                ],
                "plugin": [
                    "tuple",
                    "List[str]",
                    "Callable",
                    "str",
                    "Mapping"
                ],
                "cache": [
                    "Dict[str, Any]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "bool"
                ],
                "local_changed": [
                    "List[Tuple[str, str]]",
                    "str"
                ],
                "remote_changed": [
                    "List[Tuple[str, str]]",
                    "str"
                ],
                "expected": [
                    "Union[str, float]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestFileState.test_outdated_cache_and_same_digest": {
            "name": "test_outdated_cache_and_same_digest",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "str",
                    "float"
                ],
                "plugin": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Callable"
                ],
                "cache": []
            }
        },
        "TestFileState.test_outdated_cache_and_different_digest": {
            "name": "test_outdated_cache_and_different_digest",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "str",
                    "float"
                ],
                "plugin": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Callable"
                ],
                "cache": []
            }
        },
        "TestFileState.test_outdated_cache_new_file": {
            "name": "test_outdated_cache_new_file",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "pathlib.Path",
                    "Callable"
                ],
                "plugin": [],
                "cache": [
                    "str",
                    "Tuple[int, int]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "kitovu-master/tests/test_utils.py": {
        "test_password_prompt": {
            "name": "test_password_prompt",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "TestSanitizeFilename.test_santize": {
            "name": "test_santize",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "pathlib.Path",
                    "str",
                    "List[str]",
                    "cmk.utils.type_defs.HostName"
                ],
                "expected": [
                    "pathlib.Path",
                    "str",
                    "List[str]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        }
    },
    "kitovu-master/tests/gui/test_confscreen.py": {
        "kitovu_yaml": {
            "name": "kitovu_yaml",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "pathlib.Path"
                ],
                "temppath": [
                    "str",
                    "List[str]",
                    "Iterable[T]"
                ]
            }
        },
        "screen": {
            "name": "screen",
            "location": 25,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "qtbot": [
                    "int"
                ]
            }
        },
        "test_no_initial_config": {
            "name": "test_no_initial_config",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "screen": [
                    "pathlib.Path",
                    "bool"
                ],
                "kitovu_yaml": [
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "test_reading_config": {
            "name": "test_reading_config",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "screen": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_writing_config": {
            "name": "test_writing_config",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "screen": [
                    "str",
                    "float"
                ],
                "kitovu_yaml": [
                    "pathlib.Path",
                    "str"
                ],
                "qtbot": [],
                "close": [
                    "str"
                ]
            }
        },
        "test_cancel": {
            "name": "test_cancel",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "screen": [
                    "str"
                ],
                "kitovu_yaml": [
                    "pathlib.Path",
                    "str"
                ],
                "qtbot": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "kitovu-master/tests/gui/test_mainwindow.py": {
        "window": {
            "name": "window",
            "location": 7,
            "return": [
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "qtbot": [
                    "int"
                ]
            }
        },
        "test_main_window_status_bar": {
            "name": "test_main_window_status_bar",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "window": [
                    "Dict[str, Any]",
                    "dict",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_switching_to_conf_screen": {
            "name": "test_switching_to_conf_screen",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "window": [
                    "List[dict]"
                ],
                "qtbot": []
            }
        },
        "test_switching_to_sync_screen": {
            "name": "test_switching_to_sync_screen",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "window": [
                    "List[dict]"
                ],
                "monkeypatch": [
                    "dict",
                    "bool"
                ],
                "qtbot": []
            }
        }
    },
    "kitovu-master/tests/gui/test_startscreen.py": {
        "screen": {
            "name": "screen",
            "location": 7,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "qtbot": [
                    "int"
                ]
            }
        },
        "test_logo_exists": {
            "name": "test_logo_exists",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "qtbot": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_press_sync": {
            "name": "test_press_sync",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "screen": [
                    "str",
                    "float"
                ],
                "qtbot": [
                    "str",
                    "float"
                ]
            }
        },
        "test_press_conf": {
            "name": "test_press_conf",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "screen": [
                    "str",
                    "float"
                ],
                "qtbot": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "kitovu-master/tests/gui/test_syncscreen.py": {
        "patcher": {
            "name": "patcher",
            "location": 22,
            "return": [],
            "arguments": {
                "monkeypatch": [],
                "temppath": []
            }
        },
        "screen": {
            "name": "screen",
            "location": 27,
            "return": [],
            "arguments": {
                "qtbot": []
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 33,
            "return": [],
            "arguments": {
                "screen": [],
                "patcher": [],
                "qtbot": []
            }
        },
        "test_nonzero_exit": {
            "name": "test_nonzero_exit",
            "location": 51,
            "return": [],
            "arguments": {
                "screen": [],
                "patcher": [],
                "qtbot": []
            }
        },
        "test_crash_exit": {
            "name": "test_crash_exit",
            "location": 72,
            "return": [],
            "arguments": {
                "screen": [],
                "patcher": [],
                "qtbot": [],
                "cancel": []
            }
        },
        "test_stderr_output": {
            "name": "test_stderr_output",
            "location": 94,
            "return": [],
            "arguments": {
                "screen": [],
                "patcher": [],
                "qtbot": []
            }
        },
        "test_back_button": {
            "name": "test_back_button",
            "location": 113,
            "return": [],
            "arguments": {
                "screen": [],
                "patcher": [],
                "qtbot": []
            }
        },
        "test_partial_read": {
            "name": "test_partial_read",
            "location": 123,
            "return": [],
            "arguments": {
                "screen": [],
                "patcher": [],
                "qtbot": []
            }
        },
        "ProcessPatcher.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "monkeypatch": [],
                "temppath": []
            }
        },
        "ProcessPatcher.patch": {
            "name": "patch",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kitovu-master/tests/helpers/dummyplugin.py": {
        "DummyPlugin.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "int",
                    "bool",
                    "float"
                ],
                "local_digests": [
                    "int",
                    "bool",
                    "float"
                ],
                "remote_digests": [
                    "str",
                    "Iterable",
                    "bool",
                    "pathlib.Path",
                    "int"
                ],
                "connection_schema": [
                    "Union[str, Dict[str, str]]",
                    "dict",
                    "Dict[str, str]",
                    "IO",
                    "str"
                ]
            }
        },
        "DummyPlugin.configure": {
            "name": "configure",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "DummyPlugin.connect": {
            "name": "connect",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyPlugin.disconnect": {
            "name": "disconnect",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyPlugin.create_local_digest": {
            "name": "create_local_digest",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DummyPlugin.create_remote_digest": {
            "name": "create_remote_digest",
            "location": 67,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "DummyPlugin.list_path": {
            "name": "list_path",
            "location": 74,
            "return": [
                "typing.Iterable[pathlib.PurePath]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.PurePath",
                    "str"
                ]
            }
        },
        "DummyPlugin.retrieve_file": {
            "name": "retrieve_file",
            "location": 83,
            "return": [
                "str",
                "List[str]",
                "bool",
                "pathlib.PosixPath",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Iterable[str]"
                ],
                "fileobj": [
                    "pathlib.Path",
                    "IO[bytes]"
                ]
            }
        },
        "DummyPlugin.connection_schema": {
            "name": "connection_schema",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kitovu-master/tests/helpers/in_memory_keyring.py": {
        "InMemoryKeyring.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryKeyring.set_password": {
            "name": "set_password",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "servicename": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "InMemoryKeyring.get_password": {
            "name": "get_password",
            "location": 15,
            "return": [
                "str",
                "Dict[str, Dict]",
                "bool",
                "Union[str, Pattern]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "servicename": [
                    "Optional[str]",
                    "int",
                    "List[List[int]]",
                    "List[str]"
                ],
                "username": [
                    "Optional[str]",
                    "int",
                    "List[List[int]]",
                    "List[str]"
                ]
            }
        },
        "InMemoryKeyring.delete_password": {
            "name": "delete_password",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "servicename": [
                    "int",
                    "deque",
                    "str"
                ],
                "username": [
                    "int",
                    "deque",
                    "str"
                ]
            }
        },
        "InMemoryKeyring.clear": {
            "name": "clear",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kitovu-master/tests/sync/test_moodle.py": {
        "plugin": {
            "name": "plugin",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "moodle_assets_dir": {
            "name": "moodle_assets_dir",
            "location": 28,
            "return": [],
            "arguments": {
                "assets_dir": []
            }
        },
        "credentials": {
            "name": "credentials",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "_patch_request": {
            "name": "_patch_request",
            "location": 39,
            "return": [],
            "arguments": {
                "responses": [],
                "wsfunction": [],
                "body": [],
                "status": []
            }
        },
        "patch_get_site_info": {
            "name": "patch_get_site_info",
            "location": 53,
            "return": [],
            "arguments": {
                "responses": [],
                "moodle_assets_dir": []
            }
        },
        "patch_get_site_info_server_error": {
            "name": "patch_get_site_info_server_error",
            "location": 59,
            "return": [],
            "arguments": {
                "responses": []
            }
        },
        "patch_get_users_courses": {
            "name": "patch_get_users_courses",
            "location": 64,
            "return": [],
            "arguments": {
                "responses": [],
                "moodle_assets_dir": []
            }
        },
        "patch_course_get_contents": {
            "name": "patch_course_get_contents",
            "location": 70,
            "return": [],
            "arguments": {
                "responses": [],
                "moodle_assets_dir": []
            }
        },
        "patch_course_get_contents_no_html": {
            "name": "patch_course_get_contents_no_html",
            "location": 76,
            "return": [],
            "arguments": {
                "responses": [],
                "moodle_assets_dir": []
            }
        },
        "patch_get_site_info_wrong_token": {
            "name": "patch_get_site_info_wrong_token",
            "location": 83,
            "return": [],
            "arguments": {
                "responses": []
            }
        },
        "patch_get_wrong_wsfunction": {
            "name": "patch_get_wrong_wsfunction",
            "location": 95,
            "return": [],
            "arguments": {
                "responses": []
            }
        },
        "patch_generic_moodle_error": {
            "name": "patch_generic_moodle_error",
            "location": 107,
            "return": [],
            "arguments": {
                "responses": []
            }
        },
        "patch_retrieve_file": {
            "name": "patch_retrieve_file",
            "location": 123,
            "return": [],
            "arguments": {
                "responses": []
            }
        },
        "patch_retrieve_file_server_error": {
            "name": "patch_retrieve_file_server_error",
            "location": 129,
            "return": [],
            "arguments": {
                "responses": []
            }
        },
        "patch_retrieve_file_moodle_error": {
            "name": "patch_retrieve_file_moodle_error",
            "location": 135,
            "return": [],
            "arguments": {
                "responses": []
            }
        },
        "connect_and_configure_plugin": {
            "name": "connect_and_configure_plugin",
            "location": 148,
            "return": [],
            "arguments": {
                "plugin": [],
                "patch_get_site_info": [],
                "credentials": []
            }
        },
        "test_configure": {
            "name": "test_configure",
            "location": 160,
            "return": [],
            "arguments": {
                "plugin": [],
                "credentials": [],
                "info": [],
                "expected": []
            }
        },
        "TestConnect.test_connect": {
            "name": "test_connect",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "patch_get_site_info": [],
                "credentials": []
            }
        },
        "TestConnect.test_connect_with_wrong_token": {
            "name": "test_connect_with_wrong_token",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "patch_get_site_info_wrong_token": []
            }
        },
        "TestConnect.test_with_wrong_wsfunction": {
            "name": "test_with_wrong_wsfunction",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "credentials": [],
                "patch_get_wrong_wsfunction": []
            }
        },
        "TestConnect.test_generic_moodle_exception": {
            "name": "test_generic_moodle_exception",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "credentials": [],
                "patch_generic_moodle_error": []
            }
        },
        "TestConnect.test_for_http_error_statuscode": {
            "name": "test_for_http_error_statuscode",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "credentials": [],
                "patch_get_site_info_server_error": []
            }
        },
        "TestValidations.test_validate_config": {
            "name": "test_validate_config",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "temppath": []
            }
        },
        "TestValidations.test_config_with_url": {
            "name": "test_config_with_url",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "temppath": []
            }
        },
        "TestValidations.test_config_with_unexpected_connection_fields": {
            "name": "test_config_with_unexpected_connection_fields",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "temppath": []
            }
        },
        "TestWithConnectedPlugin.test_list_remote_dir_of_courses": {
            "name": "test_list_remote_dir_of_courses",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "connect_and_configure_plugin": [],
                "patch_get_users_courses": []
            }
        },
        "TestWithConnectedPlugin.test_list_remote_dir_of_course_files": {
            "name": "test_list_remote_dir_of_course_files",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "list_courses_first": [],
                "html_filename": [],
                "plugin": [],
                "connect_and_configure_plugin": [],
                "patch_get_users_courses": [],
                "request": []
            }
        },
        "TestWithConnectedPlugin.test_create_local_digest": {
            "name": "test_create_local_digest",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "monkeypatch": [],
                "filename": [],
                "temppath": []
            }
        },
        "TestWithConnectedPlugin.test_create_remote_digest": {
            "name": "test_create_remote_digest",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "connect_and_configure_plugin": [],
                "patch_get_users_courses": [],
                "patch_course_get_contents": []
            }
        },
        "TestWithConnectedPlugin.test_list_path_with_wrong_remote_dir": {
            "name": "test_list_path_with_wrong_remote_dir",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "connect_and_configure_plugin": [],
                "patch_get_users_courses": []
            }
        },
        "TestWithConnectedPlugin.test_retrieve_file": {
            "name": "test_retrieve_file",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "connect_and_configure_plugin": [],
                "patch_get_users_courses": [],
                "patch_course_get_contents": [],
                "patch_retrieve_file": []
            }
        },
        "TestWithConnectedPlugin.test_retrieve_file_server_error": {
            "name": "test_retrieve_file_server_error",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "connect_and_configure_plugin": [],
                "patch_get_users_courses": [],
                "patch_course_get_contents": [],
                "patch_retrieve_file_server_error": []
            }
        },
        "TestWithConnectedPlugin.test_retrieve_file_moodle_error": {
            "name": "test_retrieve_file_moodle_error",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "plugin": [],
                "connect_and_configure_plugin": [],
                "patch_get_users_courses": [],
                "patch_course_get_contents": [],
                "patch_retrieve_file_moodle_error": []
            }
        }
    },
    "kitovu-master/tests/sync/test_settings.py": {
        "default_config": {
            "name": "default_config",
            "location": 13,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "monkeypatch": [
                    "Settings",
                    "Dict[str, Any]",
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "temppath": [
                    "Settings",
                    "Dict[str, Any]",
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "test_creating_default_config": {
            "name": "test_creating_default_config",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "default_config": [],
                "monkeypatch": []
            }
        },
        "test_load_unreadable_file": {
            "name": "test_load_unreadable_file",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "temppath": [
                    "pathlib.Path",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_load_a_sample_yaml_file": {
            "name": "test_load_a_sample_yaml_file",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "assets_dir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_load_default_location": {
            "name": "test_load_default_location",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "default_config": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_invalid_yaml_files": {
            "name": "test_invalid_yaml_files",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "temppath": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        }
    },
    "kitovu-master/tests/sync/test_smb.py": {
        "patch": {
            "name": "patch",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bytes",
                    "int",
                    "Exception",
                    "dict"
                ]
            }
        },
        "SMBConnectionMock.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SMBConnectionMock.connect": {
            "name": "connect",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "int",
                    "Callable",
                    "str"
                ],
                "port": [
                    "str",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Dict[str, int]",
                    "int",
                    "bool"
                ]
            }
        },
        "SMBConnectionMock.close": {
            "name": "close",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SMBConnectionMock.getAttributes": {
            "name": "getAttributes",
            "location": 70,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "share": [
                    "str",
                    "List[str]",
                    "list",
                    "Iterable[str]",
                    "bool"
                ],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "SMBConnectionMock.listPath": {
            "name": "listPath",
            "location": 75,
            "return": [
                "str",
                "Tuple[str]",
                "pathlib.Path",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "share": [
                    "str",
                    "pathlib.Path",
                    "Iterable[str]",
                    "bool"
                ],
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "SMBConnectionMock.retrieveFile": {
            "name": "retrieveFile",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "share": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Iterable[str]"
                ],
                "path": [
                    "pathlib.Path",
                    "Dict[Tuple, float]",
                    "str"
                ],
                "fileobj": [
                    "List[Dict[str, Any]]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "SMBConnectionMock.is_connected": {
            "name": "is_connected",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnect.plugin": {
            "name": "plugin",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnect.info": {
            "name": "info",
            "location": 106,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConnect.test_debug_logging": {
            "name": "test_debug_logging",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Union[str, int]"
                ],
                "info": [
                    "bool",
                    "Optional[str]",
                    "pathlib.Path",
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "debug": [
                    "str",
                    "Callable",
                    "Dict[str, str]",
                    "pathlib.Path"
                ]
            }
        },
        "TestConnect.test_connect_with_default_options": {
            "name": "test_connect_with_default_options",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "str"
                ],
                "info": [
                    "str",
                    "float",
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestConnect.test_connect_with_custom_options": {
            "name": "test_connect_with_custom_options",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "str"
                ],
                "info": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestConnect.test_connect_with_hsr_config": {
            "name": "test_connect_with_hsr_config",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestConnect.test_handles_an_inaccessible_server_correctly": {
            "name": "test_handles_an_inaccessible_server_correctly",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "info": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Union[str, int]"
                ],
                "monkeypatch": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestConnect.test_handles_a_refused_connection": {
            "name": "test_handles_a_refused_connection",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "int"
                ],
                "info": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ],
                "monkeypatch": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "TestConnect.test_handles_invalid_credentials_correctly": {
            "name": "test_handles_invalid_credentials_correctly",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "info": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Union[str, int]"
                ],
                "username": [
                    "bool",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "TestWithConnectedPlugin.plugin": {
            "name": "plugin",
            "location": 219,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithConnectedPlugin.test_disconnect": {
            "name": "test_disconnect",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": []
            }
        },
        "TestWithConnectedPlugin.test_create_local_digest": {
            "name": "test_create_local_digest",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "pathlib.Path"
                ],
                "monkeypatch": [
                    "pathlib.Path"
                ],
                "temppath": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "TestWithConnectedPlugin.test_create_remote_digest": {
            "name": "test_create_remote_digest",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "pathlib.Path"
                ]
            }
        },
        "TestWithConnectedPlugin.test_create_remote_digest_with_an_error": {
            "name": "test_create_remote_digest_with_an_error",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": []
            }
        },
        "TestWithConnectedPlugin.test_list_path": {
            "name": "test_list_path",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "str",
                    "pathlib.Path",
                    "Tuple[pathlib.Path]"
                ]
            }
        },
        "TestWithConnectedPlugin.test_list_path_with_an_error": {
            "name": "test_list_path_with_an_error",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "TestWithConnectedPlugin.test_retrieve_file": {
            "name": "test_retrieve_file",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "TestWithConnectedPlugin.test_retrieve_file_error": {
            "name": "test_retrieve_file_error",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plugin": [
                    "pathlib.Path"
                ]
            }
        },
        "TestValidations.test_configuration_with_the_minimum_required_fields": {
            "name": "test_configuration_with_the_minimum_required_fields",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pytest_mock.plugin.MockFixture"
                ],
                "temppath": [
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "TestValidations.test_configuration_with_the_all_available_fields": {
            "name": "test_configuration_with_the_all_available_fields",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pytest_mock.plugin.MockFixture"
                ],
                "temppath": [
                    "pathlib.Path"
                ]
            }
        },
        "TestValidations.test_configuration_with_unexpected_fields": {
            "name": "test_configuration_with_unexpected_fields",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "temppath": [
                    "pathlib.Path"
                ]
            }
        },
        "TestValidations._get_config_errors": {
            "name": "_get_config_errors",
            "location": 350,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "config_yml": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestConnect.test_handles_an_inaccessible_server_correctly.raise_error": {
            "name": "raise_error",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "_host": [
                    "List[str]",
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "kitovu-master/tests/sync/test_syncing.py": {
        "patch": {
            "name": "patch",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "dict",
                    "int",
                    "Type",
                    "str",
                    "Exception"
                ],
                "temppath": [
                    "dict",
                    "int",
                    "Type",
                    "str",
                    "Exception"
                ]
            }
        },
        "dummy_plugin": {
            "name": "dummy_plugin",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "temppath": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "patch_dummy_plugin": {
            "name": "patch_dummy_plugin",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "dummy_plugin": [
                    "Callable",
                    "Callable[..., Awaitable]",
                    "str",
                    "int",
                    "Union[None, int, str]"
                ],
                "mocker": [
                    "Callable",
                    "Optional[int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "TestFindPlugin.test_load_plugin_builtin": {
            "name": "test_load_plugin_builtin",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindPlugin.test_load_plugin_missing_external": {
            "name": "test_load_plugin_missing_external",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "pathlib.Path"
                ]
            }
        },
        "TestFindPlugin.test_load_plugin_external": {
            "name": "test_load_plugin_external",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Dict[str, Sequence[str]]",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "dummy_plugin": []
            }
        },
        "TestFindPlugin._get_settings": {
            "name": "_get_settings",
            "location": 63,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "plugin_name": [
                    "str",
                    "Sequence[str]",
                    "Iterable[str]"
                ],
                "connection": [
                    "str",
                    "Sequence[str]",
                    "Iterable[str]"
                ],
                "subjects": [
                    "str",
                    "Sequence[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TestSyncAll.configured_dummy_plugin": {
            "name": "configured_dummy_plugin",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "Callable",
                    "Optional[int]",
                    "bytes",
                    "str"
                ],
                "temppath": [
                    "int",
                    "helpers.TraceContext"
                ]
            }
        },
        "TestSyncAll.test_complex_sync_all": {
            "name": "test_complex_sync_all",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mtime": [
                    "pathlib.Path",
                    "bool",
                    "Optional[str]"
                ],
                "temppath": [
                    "pathlib.Path"
                ],
                "configured_dummy_plugin": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ]
            }
        },
        "TestErrorHandling.connection_settings": {
            "name": "connection_settings",
            "location": 150,
            "return": [
                "str",
                "int",
                "MutableSequence[utils.CWLObjectType]"
            ],
            "arguments": {
                "self": [],
                "patch_dummy_plugin": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestErrorHandling.test_connection_error": {
            "name": "test_connection_error",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_plugin": [
                    "str"
                ],
                "connection_settings": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "caplog": [
                    "Type"
                ]
            }
        },
        "TestErrorHandling.test_list_path_error": {
            "name": "test_list_path_error",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_plugin": [
                    "pathlib.Path",
                    "Dict[str, Sequence[str]]"
                ],
                "connection_settings": [
                    "pathlib.Path"
                ],
                "caplog": [
                    "Type"
                ]
            }
        },
        "TestErrorHandling.test_create_remote_digest_error": {
            "name": "test_create_remote_digest_error",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dummy_plugin": [
                    "str",
                    "List[str]"
                ],
                "connection_settings": [
                    "pathlib.Path"
                ],
                "caplog": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "TestConfigError.test_valid_configuration": {
            "name": "test_valid_configuration",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": []
            }
        },
        "TestConfigError.test_configuration_without_a_file": {
            "name": "test_configuration_without_a_file",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "TestConfigError.test_configuration_with_an_empty_file": {
            "name": "test_configuration_with_an_empty_file",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "TestConfigError.test_configuration_with_missing_root_dir": {
            "name": "test_configuration_with_missing_root_dir",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "pathlib.Path",
                    "tests.basilisp.helpers.CompileFn",
                    "bool"
                ]
            }
        },
        "TestConfigError.test_configuration_with_missing_subjects": {
            "name": "test_configuration_with_missing_subjects",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "float"
                ]
            }
        },
        "TestConfigError.test_configuration_with_missing_connections": {
            "name": "test_configuration_with_missing_connections",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "float"
                ]
            }
        },
        "TestConfigError.test_configuration_with_invalid_subjects": {
            "name": "test_configuration_with_invalid_subjects",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "float"
                ]
            }
        },
        "TestConfigError.test_configuration_with_invalid_connections": {
            "name": "test_configuration_with_invalid_connections",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temppath": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "float"
                ],
                "patch_dummy_plugin": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestConfigError.test_configuration_with_an_empty_connection": {
            "name": "test_configuration_with_an_empty_connection",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Mapping[str, Any]"
                ],
                "temppath": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "float"
                ]
            }
        },
        "TestConfigError.test_configuration_with_an_empty_subject": {
            "name": "test_configuration_with_an_empty_subject",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "Mapping[str, Any]"
                ],
                "temppath": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "float"
                ]
            }
        },
        "TestConfigError._get_config_errors": {
            "name": "_get_config_errors",
            "location": 329,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "config_yml": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    }
}
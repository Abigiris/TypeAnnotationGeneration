{
    "kiva-portfolio-tool-master/backend/manage.py": {
        "runserver": {
            "name": "runserver",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "runworker": {
            "name": "runworker",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "recreate_db": {
            "name": "recreate_db",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_mock_pm": {
            "name": "create_mock_pm",
            "location": 191,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "name": [
                    "str",
                    "transfer.models.SiteID",
                    "int"
                ]
            }
        },
        "create_mock_fp": {
            "name": "create_mock_fp",
            "location": 198,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "email": [
                    "str",
                    "int"
                ],
                "org_name": [
                    "str"
                ],
                "app_status": [
                    "str",
                    "int"
                ],
                "pm_id": [
                    "str"
                ],
                "due_date": [
                    "str",
                    "int"
                ]
            }
        },
        "create_mock_docclass": {
            "name": "create_mock_docclass",
            "location": 214,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "docclass_name": [
                    "bool",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Optional[str]"
                ],
                "docclass_description": [
                    "bool",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "Type[Any]",
                    "Optional[Iterable[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "create_mock_document": {
            "name": "create_mock_document",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "clear_db": {
            "name": "clear_db",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kiva-portfolio-tool-master/backend/api/config.py": {},
    "kiva-portfolio-tool-master/backend/api/core.py": {
        "create_response": {
            "name": "create_response",
            "location": 27,
            "return": [],
            "arguments": {
                "data": [],
                "status": [],
                "message": []
            }
        },
        "serialize_list": {
            "name": "serialize_list",
            "location": 53,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "all_exception_handler": {
            "name": "all_exception_handler",
            "location": 66,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "get_pg_url": {
            "name": "get_pg_url",
            "location": 74,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "Mixin.to_dict": {
            "name": "to_dict",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 24,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "test_config": [
                    "Optional[dict]",
                    "Optional[List[str]]",
                    "dict",
                    "flask.Flask",
                    "Optional[type]",
                    "Dict[str, Any]",
                    "neuromation.api.Config"
                ]
            }
        },
        "RequestFormatter.format": {
            "name": "format",
            "location": 17,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/models/base.py": {},
    "kiva-portfolio-tool-master/backend/api/models/Document.py": {
        "Document.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "list",
                    "Optional[bytes]"
                ]
            }
        },
        "Document.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.get_docclass_id": {
            "name": "get_docclass_id",
            "location": 47,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/models/DocumentClass.py": {
        "DocumentClass.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "DocumentClass.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/models/FieldPartner.py": {
        "FieldPartner.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "FieldPartner.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/models/Message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str",
                "dict",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.get_pm_id": {
            "name": "get_pm_id",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.get_fp_id": {
            "name": "get_fp_id",
            "location": 48,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.get_id_bool": {
            "name": "get_id_bool",
            "location": 51,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.get_doc_id": {
            "name": "get_doc_id",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.get_comment": {
            "name": "get_comment",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.set_comment": {
            "name": "set_comment",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "int",
                    "str",
                    "float",
                    "datetime.datetime"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/models/PortfolioManager.py": {
        "PortfolioManager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "Optional[int]",
                    "Union[Dict, None]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "PortfolioManager.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/models/__init__.py": {},
    "kiva-portfolio-tool-master/backend/api/views/auth.py": {
        "register_user": {
            "name": "register_user",
            "location": 13,
            "return": [
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {}
        },
        "login_user": {
            "name": "login_user",
            "location": 82,
            "return": [
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {}
        },
        "verify": {
            "name": "verify",
            "location": 114,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {}
        },
        "get_user_role": {
            "name": "get_user_role",
            "location": 137,
            "return": [
                "core.models.User",
                "int",
                "str",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "verify_email": {
            "name": "verify_email",
            "location": 150,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "resendPIN": {
            "name": "resendPIN",
            "location": 175,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {}
        },
        "create_fp": {
            "name": "create_fp",
            "location": 198,
            "return": [
                "List[Dict[str, Any]]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "randomStringDigits": {
            "name": "randomStringDigits",
            "location": 285,
            "return": [
                "List[str]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "change_password": {
            "name": "change_password",
            "location": 293,
            "return": [
                "bool",
                "core.models.User",
                "medtagger.database.models.Slice",
                "dict"
            ],
            "arguments": {}
        },
        "forgot_password": {
            "name": "forgot_password",
            "location": 332,
            "return": [
                "bool",
                "core.models.User",
                "medtagger.database.models.Slice",
                "dict"
            ],
            "arguments": {}
        },
        "reset_password": {
            "name": "reset_password",
            "location": 367,
            "return": [
                "bool",
                "core.models.User",
                "medtagger.database.models.Slice",
                "dict"
            ],
            "arguments": {}
        },
        "add_security_question": {
            "name": "add_security_question",
            "location": 408,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "update_security_question": {
            "name": "update_security_question",
            "location": 446,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "get_security_questions": {
            "name": "get_security_questions",
            "location": 488,
            "return": [
                "bool",
                "dict",
                "server.models.User"
            ],
            "arguments": {}
        },
        "get_security_question": {
            "name": "get_security_question",
            "location": 510,
            "return": [
                "bool",
                "dict",
                "server.models.User"
            ],
            "arguments": {}
        },
        "resend_verification": {
            "name": "resend_verification",
            "location": 536,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {}
        },
        "verify_token": {
            "name": "verify_token",
            "location": 558,
            "return": [
                "models.User",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Optional[bytes]",
                    "Union[str, Callable[[], str]]",
                    "Dict[int, str]"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/views/box.py": {
        "create_user": {
            "name": "create_user",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "get_user_information": {
            "name": "get_user_information",
            "location": 45,
            "return": [
                "str",
                "OrderedDict",
                "Mapping[int, str]"
            ],
            "arguments": {
                "client": [
                    "int",
                    "str",
                    "zerver.models.UserProfile",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "asgard.backends.base.Interval"
                ],
                "user_id": [
                    "int",
                    "str",
                    "zerver.models.UserProfile",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "asgard.backends.base.Interval"
                ]
            }
        },
        "upload_file": {
            "name": "upload_file",
            "location": 93,
            "return": [
                "Set[str]",
                "Optional[str]",
                "IO",
                "Dict[str, Any]",
                "tuple",
                "str"
            ],
            "arguments": {
                "file": [
                    "Dict[str, Any]",
                    "IO",
                    "str",
                    "Optional[str]"
                ],
                "file_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "folder_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "delete_file": {
            "name": "delete_file",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "file_id": [
                    "str",
                    "int",
                    "bytes",
                    "golem_messages.message.base.Message"
                ]
            }
        },
        "get_file_info": {
            "name": "get_file_info",
            "location": 130,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "client": [
                    "Optional[str]",
                    "str"
                ],
                "file_id": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "download_file": {
            "name": "download_file",
            "location": 140,
            "return": [
                "Dict[str, Any]",
                "Optional[int]",
                "str",
                "dict",
                "bool",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "add_comment": {
            "name": "add_comment",
            "location": 164,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "file_id": [
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_comment": {
            "name": "get_comment",
            "location": 170,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "comment_id": [
                    "str",
                    "int"
                ]
            }
        },
        "update_comment": {
            "name": "update_comment",
            "location": 176,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "comment_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "new_message": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "delete_comment": {
            "name": "delete_comment",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "comment_id": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "create_link": {
            "name": "create_link",
            "location": 186,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_id": [
                    "str"
                ]
            }
        },
        "find_files_by_content": {
            "name": "find_files_by_content",
            "location": 194,
            "return": [
                "str",
                "Optional[str]",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "content_query": [
                    "core_lib.core.models.Event",
                    "Mapping[str, str]",
                    "dict"
                ]
            }
        },
        "clear_box": {
            "name": "clear_box",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_folder": {
            "name": "create_folder",
            "location": 217,
            "return": [
                "bool",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "folder_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/views/docclass.py": {
        "get_document_class": {
            "name": "get_document_class",
            "location": 13,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "get_document_class_by_id": {
            "name": "get_document_class_by_id",
            "location": 20,
            "return": [
                "bool",
                "str",
                "medtagger.database.models.Slice",
                "Dict[str, str]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "order.transfer.models.OrderNumberSequenceID",
                    "Optional[float]",
                    "Optional[str]",
                    "neuromation.api.JobStatus",
                    "Dict[str, Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "add_document_class": {
            "name": "add_document_class",
            "location": 29,
            "return": [
                "bool",
                "dict",
                "neuromation.api.JobDescription",
                "List[str]",
                "Dict[str, Any]",
                "object"
            ],
            "arguments": {}
        },
        "update_document_class": {
            "name": "update_document_class",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "asgard.models.user.User",
                "core_lib.core.models.Event",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "grouper.models.base.session.Session",
                    "Optional[int]"
                ]
            }
        },
        "delete_document_class": {
            "name": "delete_document_class",
            "location": 108,
            "return": [
                "str",
                "models.Token",
                "dict",
                "Dict[str, Any]",
                "List[str]",
                "bool",
                "flask.Response"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/views/document.py": {
        "get_document": {
            "name": "get_document",
            "location": 13,
            "return": [
                "str",
                "bool",
                "zerver.models.UserProfile",
                "server.models.User"
            ],
            "arguments": {}
        },
        "update_document": {
            "name": "update_document",
            "location": 60,
            "return": [
                "bool",
                "List[dict]",
                "int",
                "asgard.models.job.ScheduledJob",
                "str"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "create_new_documents": {
            "name": "create_new_documents",
            "location": 107,
            "return": [
                "str",
                "asgard.models.user.User",
                "django.db.models.query.QuerySet",
                "bool",
                "dict",
                "server.models.User"
            ],
            "arguments": {}
        },
        "delete_document": {
            "name": "delete_document",
            "location": 170,
            "return": [
                "dict",
                "zerver.models.UserProfile",
                "bool",
                "asgard.models.user.User"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "delete_documents_by_fp": {
            "name": "delete_documents_by_fp",
            "location": 195,
            "return": [
                "bool",
                "zerver.models.UserProfile",
                "Optional[zerver.models.UserProfile]",
                "core.models.User",
                "[dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/views/fp.py": {
        "get_field_partner": {
            "name": "get_field_partner",
            "location": 13,
            "return": [
                "str",
                "int",
                "dict",
                "core.models.User",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_fp_by_id": {
            "name": "get_fp_by_id",
            "location": 43,
            "return": [
                "dict",
                "bool",
                "str",
                "Dict[str, str]",
                "medtagger.database.models.Slice"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "transfer.models.ArticleID"
                ]
            }
        },
        "new_fp": {
            "name": "new_fp",
            "location": 50,
            "return": [
                "bool",
                "core_lib.core.models.Event",
                "str"
            ],
            "arguments": {}
        },
        "update_app_status": {
            "name": "update_app_status",
            "location": 83,
            "return": [
                "bool",
                "flask.Response",
                "medtagger.database.models.Slice",
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "transfer.models.Order.ID",
                    "int",
                    "transfer.models.Channel.ID"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/api/views/main.py": {
        "index": {
            "name": "index",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "kiva-portfolio-tool-master/backend/api/views/message.py": {
        "get_messages": {
            "name": "get_messages",
            "location": 27,
            "return": [
                "Dict[str, str]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "add_message": {
            "name": "add_message",
            "location": 52,
            "return": [
                "List[Dict[str, Any]]",
                "Dict[int, dict]",
                "services.shop.order.models.order_evenOrderEvenData",
                "dict"
            ],
            "arguments": {}
        },
        "messageToFP": {
            "name": "messageToFP",
            "location": 154,
            "return": [
                "Dict[str, Any]",
                "str",
                "flask.Response",
                "bool",
                "asgard.models.user.User"
            ],
            "arguments": {}
        }
    },
    "kiva-portfolio-tool-master/backend/api/views/pm.py": {
        "get_portfolio_manager": {
            "name": "get_portfolio_manager",
            "location": 11,
            "return": [
                "bool",
                "server.models.User"
            ],
            "arguments": {}
        },
        "get_pm_by_id": {
            "name": "get_pm_by_id",
            "location": 42,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "new_pm": {
            "name": "new_pm",
            "location": 64,
            "return": [
                "List[Dict[str, Any]]",
                "bool",
                "services.shop.order.models.order_evenOrderEvenData"
            ],
            "arguments": {}
        }
    },
    "kiva-portfolio-tool-master/backend/tests/conftest.py": {
        "postgres": {
            "name": "postgres",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "postgres": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/tests/test_basic.py": {
        "test_index": {
            "name": "test_index",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "kiva-portfolio-tool-master/backend/tests/test_document.py": {
        "add_mock_docclass": {
            "name": "add_mock_docclass",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "className": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "test_index": {
            "name": "test_index",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_document": {
            "name": "test_get_document",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict",
                    "duniterpy.api.clienClient"
                ]
            }
        },
        "test_update_status": {
            "name": "test_update_status",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_create_new_document": {
            "name": "test_create_new_document",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "kiva-portfolio-tool-master/backend/tests/test_document_class.py": {
        "create_docclass": {
            "name": "create_docclass",
            "location": 34,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "test_index": {
            "name": "test_index",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_document_class": {
            "name": "test_get_document_class",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "neuromation.api.Client"
                ]
            }
        },
        "test_get_document_class_by_id": {
            "name": "test_get_document_class_by_id",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_add_document_class": {
            "name": "test_add_document_class",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_update_document_class_by_id": {
            "name": "test_update_document_class_by_id",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "kiva-portfolio-tool-master/backend/tests/test_field_partner.py": {
        "test_index": {
            "name": "test_index",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "create_pm": {
            "name": "create_pm",
            "location": 12,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "create_fp": {
            "name": "create_fp",
            "location": 19,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "helper_portfolio_manager": [
                    "Callable",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_get_field_partner": {
            "name": "test_get_field_partner",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "List[str]",
                    "neuromation.api.Client"
                ]
            }
        },
        "test_get_fp_by_id": {
            "name": "test_get_fp_by_id",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_fp_by_org_name": {
            "name": "test_get_fp_by_org_name",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_fp_by_email": {
            "name": "test_get_fp_by_email",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_fp_by_pm": {
            "name": "test_get_fp_by_pm",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_new_fp": {
            "name": "test_new_fp",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "server.models.User"
                ]
            }
        },
        "test_fp_update_app_status": {
            "name": "test_fp_update_app_status",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "neuromation.api.Client"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/tests/test_message.py": {
        "create_pm": {
            "name": "create_pm",
            "location": 15,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "email": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_fp": {
            "name": "create_fp",
            "location": 21,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "email": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "org_name": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "helper_portfolio_manager": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "app_status": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        },
        "create_docclass": {
            "name": "create_docclass",
            "location": 35,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "create_document": {
            "name": "create_document",
            "location": 43,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "file_id": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "float"
                ],
                "user_id": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "float"
                ],
                "status": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "float"
                ],
                "docclass": [
                    "str",
                    "int",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "create_message": {
            "name": "create_message",
            "location": 61,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "helper_portfolio_manager": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "zerver.models.Realm"
                ],
                "helper_field_partner": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "zerver.models.Realm"
                ],
                "to_fp": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "zerver.models.Realm"
                ],
                "helper_doc": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "zerver.models.Realm"
                ],
                "description": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "zerver.models.Realm"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_index": {
            "name": "test_index",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_messages": {
            "name": "test_get_messages",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "neuromation.api.Client"
                ]
            }
        },
        "test_get_messages_by_fp": {
            "name": "test_get_messages_by_fp",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_messages_by_pm": {
            "name": "test_get_messages_by_pm",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "test_add_message": {
            "name": "test_add_message",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/tests/test_portfolio_manager.py": {
        "test_index": {
            "name": "test_index",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "create_pm": {
            "name": "create_pm",
            "location": 39,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "test_get_portfolio_manager": {
            "name": "test_get_portfolio_manager",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict",
                    "duniterpy.api.clienClient"
                ]
            }
        },
        "test_get_pm_by_id": {
            "name": "test_get_pm_by_id",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_pm_by_email": {
            "name": "test_get_pm_by_email",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_new_pm": {
            "name": "test_new_pm",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "core.models.Recipe"
                ]
            }
        }
    },
    "kiva-portfolio-tool-master/backend/tests/__init__.py": {}
}
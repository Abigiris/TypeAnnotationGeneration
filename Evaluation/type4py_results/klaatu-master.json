{
    "klaatu-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "fixture_server_url": {
            "name": "fixture_server_url",
            "location": 44,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "fixture_pings": {
            "name": "fixture_pings",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "server_url": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "setup_profile": {
            "name": "setup_profile",
            "location": 71,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "pytestconfig": [
                    "aiohttp.web.Request"
                ],
                "request": []
            }
        },
        "firefox_options": {
            "name": "firefox_options",
            "location": 96,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "setup_profile": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "pytestconfig": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bytes]",
                    "str"
                ],
                "firefox_options": [
                    "str",
                    "float",
                    "bytes"
                ],
                "experiment_widget_id": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "int",
                    "Dict[int, dict]",
                    "Optional[Dict]",
                    "Mapping[str, str]"
                ],
                "request": [
                    "Optional[str]",
                    "dict",
                    "Optional[int]",
                    "Optional[bytes]"
                ],
                "pings": [
                    "int",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "firefox_startup_time": {
            "name": "firefox_startup_time",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "firefox": [
                    "float",
                    "str",
                    "int",
                    "Union[str, int, float]"
                ]
            }
        },
        "manifest_id": {
            "name": "manifest_id",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "pytestconfig": [
                    "str",
                    "IO",
                    "Dict[str, str]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "experiment_widget_id": {
            "name": "experiment_widget_id",
            "location": 196,
            "return": [
                "str",
                "int",
                "Union[int, str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "pytestconfig": [
                    "str",
                    "List[Tuple[str, str]]",
                    "int"
                ],
                "request": [
                    "Optional[str]",
                    "bytes",
                    "Optional[dict]",
                    "aiohttp.web.Request",
                    "str"
                ],
                "manifest_id": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ]
            }
        },
        "addon_ids": {
            "name": "addon_ids",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "selenium": {
            "name": "selenium",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pytestconfig": [
                    "str",
                    "bool"
                ],
                "selenium": [
                    "str",
                    "Optional[str]"
                ],
                "addon_ids": [
                    "dict",
                    "Dict[str, Any]",
                    "Set[str]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "variables": [
                    "dict",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "fixture_pings.Pings.get_pings": {
            "name": "get_pings",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "fixture_pings.Pings.delete_pings": {
            "name": "delete_pings",
            "location": 63,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "klaatu-master/tests/expected.py": {
        "firefox_update_banner_is_found.__call__": {
            "name": "__call__",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "driver": []
            }
        },
        "firefox_update_banner_is_invisible.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "driver": []
            }
        }
    },
    "klaatu-master/tests/test_with_browser.py": {
        "test_experiment_does_not_stop_startup": {
            "name": "test_experiment_does_not_stop_startup",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "selenium": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "addon_ids": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "test_private_browsing_disables_experiment": {
            "name": "test_private_browsing_disables_experiment",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "firefox": [
                    "str",
                    "List[str]",
                    "List[Dict]"
                ],
                "selenium": [
                    "int",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "pytestconfig": [
                    "int",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "addon_ids": [
                    "str",
                    "Sequence[Sequence[str]]"
                ]
            }
        },
        "test_experiment_does_not_drastically_slow_firefox": {
            "name": "test_experiment_does_not_drastically_slow_firefox",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "firefox_startup_time": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "selenium": [
                    "str",
                    "int"
                ]
            }
        },
        "test_experiment_shows_on_support_page": {
            "name": "test_experiment_shows_on_support_page",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "selenium": [
                    "str"
                ],
                "addon_ids": [
                    "dict",
                    "str",
                    "Tuple[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "test_experiment_shows_on_studies_page": {
            "name": "test_experiment_shows_on_studies_page",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "selenium": [
                    "str",
                    "Callable",
                    "Mapping[str, Any]"
                ],
                "addon_ids": [
                    "List[str]",
                    "bool",
                    "tests.testmodels.Signals",
                    "str"
                ],
                "variables": [
                    "str"
                ]
            }
        },
        "test_experiment_expires_correctly": {
            "name": "test_experiment_expires_correctly",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "selenium": [
                    "int",
                    "Optional[str]",
                    "dict"
                ],
                "firefox_options": [
                    "bool",
                    "int",
                    "Dict[str, int]",
                    "Iterable[str]",
                    "str"
                ],
                "pings": [
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "manifest_id": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "addon_ids": [
                    "int",
                    "str",
                    "Set[str]",
                    "List[int]",
                    "dict"
                ]
            }
        },
        "test_experiment_remains_disabled_after_user_disables_it": {
            "name": "test_experiment_remains_disabled_after_user_disables_it",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "selenium": [
                    "str",
                    "dict"
                ],
                "addon_ids": [
                    "dict",
                    "List[str]"
                ],
                "pytestconfig": [
                    "str",
                    "Dict[str, str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Optional[Dict[str, Any]]"
                ],
                "pings": [
                    "str",
                    "float"
                ]
            }
        },
        "test_experiment_does_not_stop_update": {
            "name": "test_experiment_does_not_stop_update",
            "location": 278,
            "return": [],
            "arguments": {
                "addon_ids": [
                    "str",
                    "dict",
                    "bytes",
                    "Set[str]"
                ],
                "selenium": [
                    "str",
                    "Callable",
                    "int"
                ],
                "request": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "klaatu-master/tests/toolbar.py": {
        "ToolBar.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selenium": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ToolBar.toolbar_items": {
            "name": "toolbar_items",
            "location": 17,
            "return": [
                "bool",
                "List[int]",
                "str",
                "int",
                "List[Tuple[int, str, str]]",
                "Tuple[int, int]",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolBar.Extension.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Optional[str]",
                    "IO"
                ],
                "selenium": [
                    "Optional[str]",
                    "IO"
                ]
            }
        },
        "ToolBar.Extension._id": {
            "name": "_id",
            "location": 29,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolBar.Extension.widget_id": {
            "name": "widget_id",
            "location": 35,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "klaatu-master/tests/__init__.py": {},
    "klaatu-master/utilities/download_old_firefox.py": {},
    "klaatu-master/utilities/download_release_firefox.py": {},
    "klaatu-master/utilities/telemetry_server.py": {
        "Ping_Manager.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
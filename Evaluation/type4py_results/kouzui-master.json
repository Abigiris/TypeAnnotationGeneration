{
    "kouzui-master/src/bencode.py": {
        "parse_string_length": {
            "name": "parse_string_length",
            "location": 8,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "s": [
                    "int",
                    "bytes",
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "i": [
                    "bytes",
                    "str"
                ]
            }
        },
        "parse_string": {
            "name": "parse_string",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "int",
                    "io.BytesIO",
                    "bool",
                    "str"
                ],
                "n": [
                    "int",
                    "io.BytesIO",
                    "bool",
                    "str"
                ]
            }
        },
        "parse_int": {
            "name": "parse_int",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "parse_list": {
            "name": "parse_list",
            "location": 38,
            "return": [
                "str",
                "List[str]",
                "set",
                "dict",
                "Tuple[type]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "parse_dict": {
            "name": "parse_dict",
            "location": 48,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Exception",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "set"
                ]
            }
        },
        "parse_value": {
            "name": "parse_value",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Union[tuple, list]"
                ]
            }
        },
        "encode_bytes": {
            "name": "encode_bytes",
            "location": 102,
            "return": [
                "bytes",
                "str",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "float",
                    "bytes",
                    "Set[int]"
                ]
            }
        },
        "encode_string": {
            "name": "encode_string",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "Union[str, bytes]"
                ]
            }
        },
        "encode_int": {
            "name": "encode_int",
            "location": 110,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "encode_list": {
            "name": "encode_list",
            "location": 114,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "l": [
                    "list",
                    "Tuple[str, str, int]",
                    "Union[List[str], Tuple[str, ...]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "encode_dict": {
            "name": "encode_dict",
            "location": 119,
            "return": [
                "bytes",
                "BinaryIO",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "d": [
                    "Dict[str, Any]",
                    "MutableMapping"
                ]
            }
        },
        "encode_value": {
            "name": "encode_value",
            "location": 124,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "v": [
                    "dict",
                    "int",
                    "bytes",
                    "Union[bytes, str]"
                ]
            }
        },
        "parse_compact_peers": {
            "name": "parse_compact_peers",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "raw_bytes": [
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "replace_with_localhost": {
            "name": "replace_with_localhost",
            "location": 151,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "tripple": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "parse_peers": {
            "name": "parse_peers",
            "location": 158,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "data": [
                    "int",
                    "Sequence[T]",
                    "dict"
                ],
                "torrent": [
                    "list",
                    "Sequence['cirq.Qid']",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "kouzui-master/src/config.py": {},
    "kouzui-master/src/display.py": {
        "display_piece": {
            "name": "display_piece",
            "location": 12,
            "return": [
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "count": [
                    "int",
                    "float"
                ],
                "display_block": [
                    "int",
                    "float"
                ]
            }
        },
        "pretty_print": {
            "name": "pretty_print",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "width": [
                    "int",
                    "str",
                    "Callable"
                ],
                "p_id": [
                    "Optional[str]",
                    "Union[str, None]",
                    "int",
                    "Optional[Set[int]]",
                    "Optional[int]",
                    "Iterable[str]"
                ],
                "pieces": [
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "Union[str, None]",
                    "str"
                ],
                "received_from": [
                    "Optional[str]",
                    "Union[str, None]",
                    "int",
                    "Optional[Set[int]]",
                    "Optional[int]",
                    "Iterable[str]"
                ],
                "sent_to": [
                    "Optional[str]",
                    "Union[str, None]",
                    "int",
                    "Optional[Set[int]]",
                    "Optional[int]",
                    "Iterable[str]"
                ]
            }
        },
        "print_peers": {
            "name": "print_peers",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "torrent": [
                    "int",
                    "Optional[Callable]",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "peers": [
                    "dict",
                    "Dict[Tuple[int, ...], float]"
                ]
            }
        }
    },
    "kouzui-master/src/engine.py": {
        "_pick_random_one_in_bitarray": {
            "name": "_pick_random_one_in_bitarray",
            "location": 26,
            "return": [
                "List[str]",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "b": [
                    "int",
                    "bytes"
                ]
            }
        },
        "incStats": {
            "name": "incStats",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "field": [
                    "Tuple[str, str]",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "torrent": [
                    "str",
                    "bool"
                ]
            }
        },
        "Engine.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.peer_messages": {
            "name": "peer_messages",
            "location": 87,
            "return": [
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine._blocks_from_index": {
            "name": "_blocks_from_index",
            "location": 202,
            "return": [
                "List[int]",
                "set",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        }
    },
    "kouzui-master/src/file_manager.py": {
        "_create_empty_file": {
            "name": "_create_empty_file",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str, bytes, int]"
                ],
                "torrent": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "FileWrapper.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWrapper.create_file_or_return_hashes": {
            "name": "create_file_or_return_hashes",
            "location": 28,
            "return": [
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWrapper.write_piece": {
            "name": "write_piece",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "piece": [
                    "int",
                    "str",
                    "IO[Any]"
                ]
            }
        },
        "FileWrapper.read_block": {
            "name": "read_block",
            "location": 54,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "Optional[Collection[int]]",
                    "str",
                    "List[int]"
                ],
                "begin": [
                    "int",
                    "Sequence[int]",
                    "Optional[Collection[int]]",
                    "str",
                    "List[int]"
                ],
                "length": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        },
        "FileWrapper.move_file_to_final_location": {
            "name": "move_file_to_final_location",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FileManager.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kouzui-master/src/http_stream.py": {
        "Http_stream.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ],
                "role": [
                    "List[str]",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "kouzui-master/src/main.py": {
        "read_torrent_file": {
            "name": "read_torrent_file",
            "location": 21,
            "return": [
                "int",
                "IO"
            ],
            "arguments": {
                "torrent_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "log_level": [
                    "logging.Logger",
                    "str",
                    "pathlib.Path",
                    "TextIO"
                ],
                "torrent_path": [
                    "str",
                    "pathlib.Path",
                    "Callable[[str], None]"
                ],
                "listening_port": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "download_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "make_test_files": {
            "name": "make_test_files",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "torrent_data": [
                    "bool",
                    "str",
                    "dict",
                    "multiprocessing.Queue",
                    "pathlib.Path"
                ],
                "torrent_info": [
                    "bool",
                    "str",
                    "dict",
                    "multiprocessing.Queue",
                    "pathlib.Path"
                ],
                "download_dir": [
                    "bool",
                    "str",
                    "dict",
                    "multiprocessing.Queue",
                    "pathlib.Path"
                ],
                "number_of_files": [
                    "int",
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "float"
                ]
            }
        },
        "make_test_files_command": {
            "name": "make_test_files_command",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "test": {
            "name": "test",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "test_dir": [
                    "pathlib.Path"
                ],
                "torrent_path": [
                    "str",
                    "Optional[str]"
                ],
                "number_of_clients": [
                    "Callable[[str], None]",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "test_command": {
            "name": "test_command",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kouzui-master/src/messages.py": {
        "parse_have": {
            "name": "parse_have",
            "location": 19,
            "return": [
                "int",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "AnyStr"
                ]
            }
        },
        "parse_bitfield": {
            "name": "parse_bitfield",
            "location": 23,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Set[int]"
                ]
            }
        },
        "parse_request_or_cancel": {
            "name": "parse_request_or_cancel",
            "location": 31,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "parse_piece": {
            "name": "parse_piece",
            "location": 39,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        }
    },
    "kouzui-master/src/peer_connection.py": {
        "make_handler": {
            "name": "make_handler",
            "location": 309,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "engine": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PeerStream.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ],
                "token_bucket": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "PeerStream._parse_msg_data": {
            "name": "_parse_msg_data",
            "location": 49,
            "return": [
                "int",
                "str",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandshakeError.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "Optional[Dict]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping",
                    "bytes",
                    "list"
                ]
            }
        },
        "PeerEngine.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "str"
                ],
                "peer_address": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "expected_peer_id": [
                    "str",
                    "int",
                    "bytearray",
                    "Optional[str]"
                ],
                "stream": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "kouzui-master/src/peer_state.py": {
        "PeerState.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "peer_id": [
                    "str",
                    "int",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "num_pieces": [
                    "int",
                    "float"
                ]
            }
        },
        "PeerState.choke_us": {
            "name": "choke_us",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.unchoke_us": {
            "name": "unchoke_us",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.is_client_choked": {
            "name": "is_client_choked",
            "location": 48,
            "return": [
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.choke_them": {
            "name": "choke_them",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.unchoke_them": {
            "name": "unchoke_them",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.is_peer_choked": {
            "name": "is_peer_choked",
            "location": 66,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.get_pieces": {
            "name": "get_pieces",
            "location": 69,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.set_pieces": {
            "name": "set_pieces",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_pieces": [
                    "float",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "PeerState.first_seen": {
            "name": "first_seen",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.last_seen": {
            "name": "last_seen",
            "location": 83,
            "return": [
                "Optional[Union[str, Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.peer_id": {
            "name": "peer_id",
            "location": 87,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.receive_outgoing_data": {
            "name": "receive_outgoing_data",
            "location": 91,
            "return": [
                "str",
                "Optional[float]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.send_outgoing_data": {
            "name": "send_outgoing_data",
            "location": 95,
            "return": [
                "str",
                "Optional[float]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.inc_download_counters": {
            "name": "inc_download_counters",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.inc_upload_counters": {
            "name": "inc_upload_counters",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.reset_rolling_download_count": {
            "name": "reset_rolling_download_count",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeerState.get_20_second_rolling_download_count": {
            "name": "get_20_second_rolling_download_count",
            "location": 109,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kouzui-master/src/requests.py": {
        "RequestManager.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestManager.size": {
            "name": "size",
            "location": 20,
            "return": [
                "int",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestManager.add_request": {
            "name": "add_request",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "peer_id": [
                    "str",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "datetime.date"
                ],
                "block": [
                    "str",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "datetime.date"
                ]
            }
        },
        "RequestManager.delete_all_for_piece": {
            "name": "delete_all_for_piece",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ]
            }
        },
        "RequestManager.delete_all_for_peer": {
            "name": "delete_all_for_peer",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "peer_id": [
                    "int",
                    "dict"
                ]
            }
        },
        "RequestManager.delete_all": {
            "name": "delete_all",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestManager.delete_older_than": {
            "name": "delete_older_than",
            "location": 39,
            "return": [
                "str",
                "float",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestManager.existing_requests_for_peer": {
            "name": "existing_requests_for_peer",
            "location": 48,
            "return": [
                "str",
                "List[str]",
                "bool",
                "set",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "peer_id": [
                    "int",
                    "Dict[str, Any]",
                    "Iterable[int]"
                ]
            }
        }
    },
    "kouzui-master/src/test_server.py": {},
    "kouzui-master/src/token_bucket.py": {
        "NullBucket.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NullBucket.check_and_decrement": {
            "name": "check_and_decrement",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_packet_size": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        },
        "TokenBucket.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bytes_per_second": [
                    "int",
                    "str",
                    "bool"
                ],
                "max_size_in_bytes": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "updates_per_second": [
                    "str",
                    "bool",
                    "Tuple[int, int, int]",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "TokenBucket.update_period": {
            "name": "update_period",
            "location": 28,
            "return": [
                "int",
                "str",
                "Optional[bool]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenBucket.check_and_decrement": {
            "name": "check_and_decrement",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "packet_size": [
                    "float",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "kouzui-master/src/torrent.py": {
        "_random_char": {
            "name": "_random_char",
            "location": 38,
            "return": [
                "List[str]",
                "str",
                "Optional[bool]",
                "Union[str, List[str]]"
            ],
            "arguments": {}
        },
        "_generate_peer_id": {
            "name": "_generate_peer_id",
            "location": 53,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "_parse_pieces": {
            "name": "_parse_pieces",
            "location": 57,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "bstring": [
                    "bytes",
                    "list",
                    "str",
                    "int",
                    "List[tuple]",
                    "numpy.random.RandomState",
                    "List[List[int]]"
                ]
            }
        },
        "Torrent.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tdict": [
                    "bytes",
                    "bool",
                    "int",
                    "Union[bytes, str, None]",
                    "str"
                ],
                "info_string": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Exception"
                ],
                "directory": [
                    "str",
                    "List[str]"
                ],
                "listening_port": [
                    "bool",
                    "str",
                    "float"
                ],
                "custom_name": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Torrent.listening_port": {
            "name": "listening_port",
            "location": 130,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.file_path": {
            "name": "file_path",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.piece_length": {
            "name": "piece_length",
            "location": 140,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Torrent.info_hash": {
            "name": "info_hash",
            "location": 148,
            "return": [
                "str",
                "dict",
                "List[int]",
                "Mapping[int, str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.peer_id": {
            "name": "peer_id",
            "location": 152,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.interval": {
            "name": "interval",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.tracker_address": {
            "name": "tracker_address",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.tracker_port": {
            "name": "tracker_port",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.tracker_path": {
            "name": "tracker_path",
            "location": 168,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.uploaded": {
            "name": "uploaded",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.downloaded": {
            "name": "downloaded",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.left": {
            "name": "left",
            "location": 182,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Torrent.piece_info": {
            "name": "piece_info",
            "location": 186,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "Torrent.is_piece_complete": {
            "name": "is_piece_complete",
            "location": 189,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "kouzui-master/src/tracker.py": {
        "_int2bytes": {
            "name": "_int2bytes",
            "location": 14,
            "return": [
                "bytes",
                "BinaryIO",
                "Union[Dict, List]",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bool",
                    "slice",
                    "T"
                ]
            }
        },
        "tracker_request": {
            "name": "tracker_request",
            "location": 18,
            "return": [
                "Set[str]",
                "List[Match]",
                "List[str]",
                "Dict[str, str]",
                "bool",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "torrent": [
                    "int",
                    "str",
                    "dict",
                    "bytes"
                ],
                "event": [
                    "List[str]"
                ]
            }
        }
    }
}
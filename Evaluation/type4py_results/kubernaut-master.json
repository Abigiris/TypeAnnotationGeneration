{
    "kubernaut-master/setup.py": {},
    "kubernaut-master/kubernaut/backend.py": {
        "auto_str": {
            "name": "auto_str",
            "location": 7,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bytes",
                    "bool",
                    "Optional[int]",
                    "str",
                    "Callable[[], Any]"
                ]
            }
        },
        "auto_str.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [
                    "Iterable[Sequence[str]]",
                    "str",
                    "Optional[Union[Any, str]]",
                    "bool"
                ]
            }
        },
        "RawBackendResponse.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ],
                "headers": [
                    "Dict[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, str]"
                ],
                "content": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "RawBackendResponse.is_success": {
            "name": "is_success",
            "location": 28,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[int]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Backend.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_many_cluster_groups": {
            "name": "get_many_cluster_groups",
            "location": 46,
            "return": [
                "Counter",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.describe_cluster_group": {
            "name": "describe_cluster_group",
            "location": 55,
            "return": [
                "Tuple[str, int, Dict[str, str]]",
                "Dict[str, Any]",
                "Sequence[Sequence[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Backend.create_claim": {
            "name": "create_claim",
            "location": 68,
            "return": [
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "json_payload": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "Backend.get_claim": {
            "name": "get_claim",
            "location": 78,
            "return": [
                "Counter",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Backend.delete_claim": {
            "name": "delete_claim",
            "location": 85,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]",
                    "Sequence[str]"
                ],
                "all_claims": [
                    "str",
                    "Set[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Backend.get_many_claims": {
            "name": "get_many_claims",
            "location": 92,
            "return": [
                "Counter",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.__fmt_url": {
            "name": "__fmt_url",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "Backend.__init_headers": {
            "name": "__init_headers",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kubernaut-master/kubernaut/cli.py": {
        "cli": {
            "name": "cli",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "kubernaut_backend": [
                    "Optional[str]",
                    "str",
                    "click.Context"
                ],
                "kubernaut_config": [
                    "str",
                    "click.Context",
                    "int"
                ]
            }
        }
    },
    "kubernaut-master/kubernaut/kubeconfig.py": {
        "write_kubeconfig": {
            "name": "write_kubeconfig",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "kubeconfig_data": [
                    "bool",
                    "pathlib.Path",
                    "Dict[str, dict]",
                    "Set[str]"
                ],
                "path": [
                    "pathlib.Path",
                    "dict",
                    "Union[str, pathlib.Path]",
                    "pathlib.PosixPath"
                ]
            }
        },
        "kubeconfig_message": {
            "name": "kubeconfig_message",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "_compaUnion[_compapathlib.Path, str]"
                ]
            }
        }
    },
    "kubernaut-master/kubernaut/model.py": {
        "ClaimSpec.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "cluster_group": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "length": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ClaimSpec.validate": {
            "name": "validate",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClaimSpec.to_json": {
            "name": "to_json",
            "location": 16,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClaimSpec.from_json": {
            "name": "from_json",
            "location": 24,
            "return": [
                "dict",
                "Dict[str, str]",
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "json_string": [
                    "str",
                    "bool"
                ]
            }
        },
        "ClaimSpec.from_yaml": {
            "name": "from_yaml",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "yaml_string": [
                    "str",
                    "dict",
                    "Tuple[str]"
                ]
            }
        },
        "Claim.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "kubeconfig": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Claim.from_json": {
            "name": "from_json",
            "location": 47,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "json_string": [
                    "str",
                    "bool"
                ]
            }
        },
        "ClusterGroup.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "description": [
                    "str",
                    "Tuple[float, float]",
                    "list"
                ]
            }
        },
        "ClusterGroup.from_json": {
            "name": "from_json",
            "location": 59,
            "return": [
                "Tuple[str, int, Dict[str, str]]",
                "dict",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "json_string": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "kubernaut-master/kubernaut/util.py": {
        "get_current_backend": {
            "name": "get_current_backend",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "trezor.wire.Context",
                    "bool"
                ],
                "fail_if_not_found": [
                    "bool",
                    "str",
                    "click.Context",
                    "click.core.Context"
                ]
            }
        },
        "require": {
            "name": "require",
            "location": 31,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "value": [
                    "T",
                    "Optional[bool]",
                    "Optional[T]",
                    "Optional[str]",
                    "Option[T]"
                ]
            }
        },
        "load_resource": {
            "name": "load_resource",
            "location": 38,
            "return": [
                "str",
                "bytes",
                "Tuple[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "random_alphanum": {
            "name": "random_alphanum",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "float",
                    "Union[bool, str, int]"
                ]
            }
        },
        "random_name": {
            "name": "random_name",
            "location": 47,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "suffix_len": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "strip_margin": {
            "name": "strip_margin",
            "location": 58,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "MutexOption.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MutexOption.handle_parse_result": {
            "name": "handle_parse_result",
            "location": 74,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "discord.excommands.Context"
                ],
                "opts": [
                    "discord.excommands.Context",
                    "click.Context"
                ],
                "args": []
            }
        }
    },
    "kubernaut-master/kubernaut/__init__.py": {
        "KubernautContext.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ]
            }
        },
        "KubernautContext.get_backend": {
            "name": "get_backend",
            "location": 32,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]",
                "rflx.model.Refinement"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "fail_if_missing": [
                    "bool",
                    "str",
                    "Callable[[Any], bool]",
                    "Optional[str]"
                ]
            }
        }
    },
    "kubernaut-master/kubernaut/claims/cmd.py": {
        "claims": {
            "name": "claims",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_claim": {
            "name": "create_claim",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Callable"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "cluster_group": [
                    "str",
                    "Optional[str]"
                ],
                "length": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "list_claims": {
            "name": "list_claims",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "delete_claim": {
            "name": "delete_claim",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[str]"
                ],
                "names": [
                    "List[str]",
                    "str"
                ],
                "all_claims": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "get_kubeconfig": {
            "name": "get_kubeconfig",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "describe_claim": {
            "name": "describe_claim",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Callable"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_final_spec": {
            "name": "create_final_spec",
            "location": 165,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "spec": [],
                "overrides": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        },
        "_create_claim": {
            "name": "_create_claim",
            "location": 186,
            "return": [
                "str",
                "int",
                "Optional[Callable]"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "bool",
                    "List[Dict]"
                ],
                "spec": [
                    "str",
                    "bool",
                    "List[Dict]"
                ]
            }
        }
    },
    "kubernaut-master/kubernaut/claims/__init__.py": {},
    "kubernaut-master/kubernaut/clustergroups/cmd.py": {
        "clustergroups": {
            "name": "clustergroups",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "list_claims": {
            "name": "list_claims",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict",
                    "Dict[str, Set[str]]"
                ]
            }
        }
    },
    "kubernaut-master/kubernaut/clustergroups/__init__.py": {},
    "kubernaut-master/kubernaut/config/cmd.py": {
        "config": {
            "name": "config",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "backend": {
            "name": "backend",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_backend": {
            "name": "create_backend",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "Set[str]"
                ],
                "url": [
                    "str",
                    "Set[str]"
                ],
                "activate": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "remove_backend": {
            "name": "remove_backend",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "name_url": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "list_backends": {
            "name": "list_backends",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "Optional[int]",
                    "str",
                    "dict",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "describe_backend": {
            "name": "describe_backend",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_fmt_backend": {
            "name": "_fmt_backend",
            "location": 93,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "be": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "kubernaut-master/kubernaut/config/model.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "load_path": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "current_backend": [
                    "Dict[str, pathlib.Path]",
                    "dict",
                    "str",
                    "int",
                    "pathlib.Path",
                    "Dict[str, dict]",
                    "Optional[str]"
                ],
                "backends": [
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Config.check": {
            "name": "check",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.current_backend": {
            "name": "current_backend",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Config.get_backend": {
            "name": "get_backend",
            "location": 33,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Config.add_backend": {
            "name": "add_backend",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_backend": [
                    "kubernaubackend.Backend",
                    "bool",
                    "static_frame.core.util.UFunc",
                    "str"
                ]
            }
        },
        "Config.remove_backend": {
            "name": "remove_backend",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_or_url": [
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Config.save": {
            "name": "save",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.load": {
            "name": "load",
            "location": 70,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Tuple[str]"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        }
    },
    "kubernaut-master/kubernaut/config/__init__.py": {},
    "kubernaut-master/test/test_nothing.py": {
        "test_nothing": {
            "name": "test_nothing",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    }
}
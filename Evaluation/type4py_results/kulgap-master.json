{
    "kulgap-master/setup.py": {},
    "kulgap-master/kulgap/collection.py": {
        "Collection.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "obs_times": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "float"
                ],
                "obs_seqs": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "normalize": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Collection.obs_times": {
            "name": "obs_times",
            "location": 50,
            "return": [
                "int",
                "Optional[bool]",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.obs_seqs": {
            "name": "obs_seqs",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.obs_seqs_norm": {
            "name": "obs_seqs_norm",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.add_obs_seqs": {
            "name": "add_obs_seqs",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "float",
                    "int"
                ]
            }
        },
        "Collection.create_full_data": {
            "name": "create_full_data",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kulgap-master/kulgap/config.py": {},
    "kulgap-master/kulgap/errors.py": {
        "TimeValidationError.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "UnsupportedMetricError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "UnsupportedScalingError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "kulgap-master/kulgap/metadata.py": {
        "Metadata.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obs_start": [
                    "int",
                    "list",
                    "Callable",
                    "Sequence[str]"
                ],
                "obs_end": [
                    "bool",
                    "int",
                    "list",
                    "str"
                ],
                "gp_start": [
                    "int",
                    "list",
                    "Callable",
                    "Sequence[str]"
                ],
                "notes_dict": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "kulgap-master/kulgap/metrics.py": {
        "Metrics.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Metrics.collection": {
            "name": "collection",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.valid_types": {
            "name": "valid_types",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "Set[str]"
                ],
                "types": [
                    "str",
                    "Dict[str, str]",
                    "Set[str]"
                ]
            }
        },
        "Metrics.calculate": {
            "name": "calculate",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "types": [
                    "list",
                    "str",
                    "bool",
                    "app.models.ModelType",
                    "ForwardRef",
                    "dict"
                ]
            }
        },
        "Metrics._prepare_inputs_for_fitting_gp": {
            "name": "_prepare_inputs_for_fitting_gp",
            "location": 101,
            "return": [
                "models.Credentials",
                "int"
            ],
            "arguments": {
                "x": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "int"
                ],
                "y": [
                    "str",
                    "int",
                    "Sequence[T]",
                    "float",
                    "Union[int, float, str]",
                    "Union[str, float]"
                ]
            }
        },
        "Metrics._fit_gaussian_process": {
            "name": "_fit_gaussian_process",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "kernel": [
                    "int",
                    "float",
                    "models.Payment",
                    "GPy.models.GPRegression"
                ],
                "num_restarts": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Metrics.fit_gaussian_process": {
            "name": "fit_gaussian_process",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics._kl_divergence": {
            "name": "_kl_divergence",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "gp_control": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "gp_case": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "obs_times": [
                    "int"
                ],
                "case_start": [
                    "int"
                ]
            }
        },
        "Metrics.kl_divergence": {
            "name": "kl_divergence",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "other_metrics": [
                    "str",
                    "Exception",
                    "Optional[Exception]"
                ]
            }
        },
        "Metrics.kl_p_value": {
            "name": "kl_p_value",
            "location": 201,
            "return": [
                "int",
                "str",
                "tuple",
                "List[int]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "other_metrics": [
                    "type",
                    "Callable[[numpy.ndarray, numpy.ndarray], numpy.ndarray]",
                    "Type",
                    "Optional[Dict]"
                ]
            }
        },
        "Metrics._randomize_controls_cases_procedural": {
            "name": "_randomize_controls_cases_procedural",
            "location": 262,
            "return": [
                "str",
                "int",
                "zam_repondeur.models.Amendement",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "control_collection": [
                    "list",
                    "List[int]",
                    "Sequence[Any]",
                    "numpy.ndarray",
                    "bytes",
                    "int",
                    "numpy.array"
                ]
            }
        },
        "Metrics._centre_around_start": {
            "name": "_centre_around_start",
            "location": 295,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "y": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "dict"
                ],
                "start_index": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Metrics._relativize_around_start": {
            "name": "_relativize_around_start",
            "location": 305,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "y": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "dict"
                ],
                "start_index": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Metrics._compute_angle": {
            "name": "_compute_angle",
            "location": 315,
            "return": [
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "start_index": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "Metrics.angles": {
            "name": "angles",
            "location": 322,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "start_index": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "Metrics.average_angle": {
            "name": "average_angle",
            "location": 342,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int"
                ],
                "start_index": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "Metrics._calculate_AUC": {
            "name": "_calculate_AUC",
            "location": 371,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Metrics.auc": {
            "name": "auc",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.auc_norm": {
            "name": "auc_norm",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.gp_auc": {
            "name": "gp_auc",
            "location": 393,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "numpy.ndarray",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.mrecist": {
            "name": "mrecist",
            "location": 404,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "start_index": [
                    "int",
                    "bool",
                    "Optional[\"Money\"]"
                ]
            }
        },
        "Metrics.credible_intervals": {
            "name": "credible_intervals",
            "location": 445,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.percent_credible_intervals": {
            "name": "percent_credible_intervals",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.write_metrics": {
            "name": "write_metrics",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "out_path": [
                    "List[str]"
                ]
            }
        },
        "Metrics._kl_divergence.kl_integrand": {
            "name": "kl_integrand",
            "location": 159,
            "return": [
                "bool",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "t": [
                    "int",
                    "T"
                ]
            }
        }
    },
    "kulgap-master/kulgap/plotting.py": {},
    "kulgap-master/kulgap/source.py": {},
    "kulgap-master/kulgap/utils.py": {
        "normalize": {
            "name": "normalize",
            "location": 8,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "y": [
                    "int",
                    "str",
                    "Optional[Callable]"
                ],
                "start": [
                    "int",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "centre": {
            "name": "centre",
            "location": 12,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "y": [
                    "int",
                    "str",
                    "Optional[Callable]"
                ],
                "start": [
                    "int",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "calculate_p_value": {
            "name": "calculate_p_value",
            "location": 16,
            "return": [
                "List[int]",
                "List[List[int]]",
                "Set[str]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "observed": [
                    "dict",
                    "Dict[str, \"Outcome\"]",
                    "float",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, numpy.ndarray]",
                    "int"
                ],
                "empirical": [
                    "dict",
                    "Dict[str, \"Outcome\"]",
                    "float",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, numpy.ndarray]",
                    "int"
                ]
            }
        },
        "find_start_date_index": {
            "name": "find_start_date_index",
            "location": 25,
            "return": [
                "T",
                "str",
                "Optional[str]",
                "Type[T]"
            ],
            "arguments": {
                "obs_times": [
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "drug_start_day": [
                    "int",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "normalize_data": {
            "name": "normalize_data",
            "location": 43,
            "return": [
                "DefaultDict[int, List[Any]]",
                "str",
                "OrderedDict",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "obs_times": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[int]"
                ],
                "obs_seqs": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[int]"
                ],
                "drug_start_day": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "normalize_data.normalize_treatment_start_day_and_log_transform": {
            "name": "normalize_treatment_start_day_and_log_transform",
            "location": 54,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "Optional[numpy.ndarray]",
                    "float"
                ],
                "drug_start_day": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "Optional[numpy.ndarray]",
                    "float"
                ]
            }
        }
    },
    "kulgap-master/kulgap/__init__.py": {},
    "kulgap-master/tests/test_collection.py": {
        "test_raise_timevalidationerror_when_obs_times_not_list": {
            "name": "test_raise_timevalidationerror_when_obs_times_not_list",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "kulgap-master/tests/test_metrics.py": {},
    "kulgap-master/tests/test_utils.py": {
        "test_find_start_date_index": {
            "name": "test_find_start_date_index",
            "location": 1,
            "return": [],
            "arguments": {}
        },
        "test_normalize_data": {
            "name": "test_normalize_data",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "kulgap-master/tests/__init__.py": {}
}
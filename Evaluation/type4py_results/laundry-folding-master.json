{
    "laundry-folding-master/main.py": {},
    "laundry-folding-master/python/abb.py": {
        "check_coordinates": {
            "name": "check_coordinates",
            "location": 348,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "coordinates": [
                    "List[str]",
                    "List[T]",
                    "bool",
                    "Optional[Union[str, Any, Any, Any]]",
                    "dict",
                    "Sequence[Tuple[str, Any]]",
                    "Callable"
                ]
            }
        },
        "Robot.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "int",
                    "bool"
                ],
                "port_motion": [
                    "int",
                    "bool"
                ],
                "port_logger": [
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]"
                ]
            }
        },
        "Robot.connect_motion": {
            "name": "connect_motion",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "remote": [
                    "int",
                    "logging.Logger",
                    "Callable",
                    "str"
                ]
            }
        },
        "Robot.set_units": {
            "name": "set_units",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "linear": [
                    "bool",
                    "float"
                ],
                "angular": [
                    "bool",
                    "float"
                ]
            }
        },
        "Robot.set_cartesian": {
            "name": "set_cartesian",
            "location": 76,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "pose": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Robot.set_joints": {
            "name": "set_joints",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "joints": [
                    "bool",
                    "float"
                ]
            }
        },
        "Robot.get_cartesian": {
            "name": "get_cartesian",
            "location": 97,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.get_joints": {
            "name": "get_joints",
            "location": 106,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.get_external_axis": {
            "name": "get_external_axis",
            "location": 114,
            "return": [
                "bool",
                "List[str]",
                "list",
                "str",
                "List[Dict[str, str]]",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.get_robotinfo": {
            "name": "get_robotinfo",
            "location": 123,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.set_tool": {
            "name": "set_tool",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tool": [
                    "str",
                    "dict",
                    "Optional['Directory']"
                ]
            }
        },
        "Robot.get_tool": {
            "name": "get_tool",
            "location": 154,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.set_workobject": {
            "name": "set_workobject",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "work_obj": [
                    "Dict[str, str]",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "Robot.set_speed": {
            "name": "set_speed",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "speed": [
                    "str"
                ]
            }
        },
        "Robot.set_zone": {
            "name": "set_zone",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "zone_key": [
                    "Dict[str, Any]",
                    "Optional[\"TrackingData\"]",
                    "Callable[[str], bool]",
                    "bytes",
                    "int"
                ],
                "point_motion": [
                    "int",
                    "Optional[int]",
                    "bytes"
                ],
                "manual_zone": [
                    "bool",
                    "int",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "Robot.buffer_add": {
            "name": "buffer_add",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pose": [
                    "BinaryIO",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "Robot.buffer_set": {
            "name": "buffer_set",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pose_list": [
                    "str",
                    "bool",
                    "List[int]",
                    "List[T]",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "Robot.clear_buffer": {
            "name": "clear_buffer",
            "location": 253,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.buffer_len": {
            "name": "buffer_len",
            "location": 261,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.buffer_execute": {
            "name": "buffer_execute",
            "location": 269,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.move_circular": {
            "name": "move_circular",
            "location": 285,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pose_onarc": [
                    "str"
                ],
                "pose_end": [
                    "str"
                ]
            }
        },
        "Robot.set_dio": {
            "name": "set_dio",
            "location": 299,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "id": [
                    "bool",
                    "int",
                    "List[str]",
                    "Dict[str, object]",
                    "str"
                ]
            }
        },
        "Robot.send": {
            "name": "send",
            "location": 309,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes",
                "dict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "Mapping"
                ],
                "wait_for_response": [
                    "bool",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "Robot.format_pose": {
            "name": "format_pose",
            "location": 325,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "pose": [
                    "str",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "Robot.close": {
            "name": "close",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.__enter__": {
            "name": "__enter__",
            "location": 341,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Robot.__exit__": {
            "name": "__exit__",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        }
    },
    "laundry-folding-master/python/constants.py": {},
    "laundry-folding-master/python/controller.py": {
        "Controller.perform_setdown": {
            "name": "perform_setdown",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dest_xy": [
                    "numpy.ndarray"
                ],
                "angle": [
                    "Type",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ],
                "pull_distance": [
                    "bool",
                    "str",
                    "Sequence[Any]",
                    "Union[bytes, str, None]"
                ],
                "lift_height": [
                    "Type",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ],
                "right_side_down": [
                    "Type",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "Controller.generate_laydown_coords": {
            "name": "generate_laydown_coords",
            "location": 44,
            "return": [
                "float",
                "int",
                "FrozenSet[Any]",
                "dict",
                "Callable[[T], bool]",
                "Callable[[int], bool]"
            ],
            "arguments": {
                "self": [],
                "dest_xyz": [
                    "str",
                    "Union[str, bytes]"
                ],
                "angle": [
                    "Mapping",
                    "Callable[..., None]",
                    "dict",
                    "IO[bytes]"
                ],
                "height": [
                    "str",
                    "bool",
                    "Callable",
                    "Callable[[int], float]",
                    "List[int]",
                    "IO[str]"
                ],
                "right_side_down": [
                    "Mapping",
                    "bool",
                    "dict",
                    "deque"
                ]
            }
        },
        "Controller.perform_pickup": {
            "name": "perform_pickup",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item_min_x": [
                    "list",
                    "int",
                    "bool"
                ],
                "slide_dist": [
                    "int",
                    "Callable[[T, T], T]",
                    "T",
                    "str"
                ],
                "lift_height": [
                    "int",
                    "float",
                    "Collection[int]",
                    "str"
                ]
            }
        },
        "Controller.perform_fold__a": {
            "name": "perform_fold__a",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.set_speed": {
            "name": "set_speed",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "speed_proportion": [
                    "Optional[Any]"
                ]
            }
        },
        "Controller.set_quaternion": {
            "name": "set_quaternion",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "quaternion": [
                    "str",
                    "numpy.ndarray",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Controller.set_xyz": {
            "name": "set_xyz",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xyz": [
                    "str",
                    "List[int]",
                    "float",
                    "bytearray",
                    "bytes"
                ],
                "interpolate_steps": [
                    "bool",
                    "float"
                ]
            }
        },
        "Controller.change_xyz": {
            "name": "change_xyz",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[List[float]]",
                    "List[float]",
                    "int"
                ],
                "y": [
                    "List[List[float]]",
                    "List[float]",
                    "int"
                ],
                "z": [
                    "List[List[float]]",
                    "List[float]",
                    "int"
                ],
                "interpolate_steps": [
                    "Optional[str]",
                    "str",
                    "Type",
                    "float",
                    "dict"
                ]
            }
        },
        "Controller.apply_quaternion": {
            "name": "apply_quaternion",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "quaternion": [
                    "str",
                    "int"
                ]
            }
        },
        "Controller.set_joints": {
            "name": "set_joints",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "joint_angles": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "float"
                ]
            }
        },
        "Controller.move_test": {
            "name": "move_test",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "laundry-folding-master/python/helpers.py": {
        "get_robot_controller": {
            "name": "get_robot_controller",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "apply_quaternion": {
            "name": "apply_quaternion",
            "location": 40,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "base": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "adjustment": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "interpolate_movement": {
            "name": "interpolate_movement",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "robot": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Dict[str, Any]",
                    "float"
                ],
                "start": [
                    "int",
                    "Sequence[int]",
                    "float"
                ],
                "end": [
                    "int",
                    "float",
                    "Optional[str]",
                    "str"
                ],
                "steps": [
                    "int",
                    "Sequence[int]",
                    "float"
                ],
                "quaternions": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "change_coords": {
            "name": "change_coords",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "change": [
                    "str",
                    "Dict[str, float]",
                    "numpy.ndarray"
                ],
                "robot": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "direction": {
            "name": "direction",
            "location": 89,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "angle_radians": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "vector_to_angle": {
            "name": "vector_to_angle",
            "location": 95,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "vector": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "within_range": {
            "name": "within_range",
            "location": 100,
            "return": [
                "Callable",
                "int",
                "float",
                "Sequence[str]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "a": [
                    "int"
                ],
                "b": [
                    "int",
                    "List[float]",
                    "float"
                ]
            }
        },
        "fix_angle": {
            "name": "fix_angle",
            "location": 113,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value_radians": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "rotate": {
            "name": "rotate",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "points": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "angle": [
                    "str",
                    "bool",
                    "float",
                    "tuple"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "points": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "dx": [
                    "int",
                    "numpy.random.RandomState",
                    "str",
                    "T"
                ],
                "dy": [
                    "int",
                    "numpy.random.RandomState",
                    "str",
                    "T"
                ]
            }
        },
        "hitbox_of_path": {
            "name": "hitbox_of_path",
            "location": 138,
            "return": [
                "str",
                "Callable[[str], None]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "float",
                    "bool",
                    "int"
                ],
                "buffer": [
                    "int",
                    "Optional[int]",
                    "str",
                    "List[numpy.ndarray]",
                    "float"
                ]
            }
        },
        "rectangle": {
            "name": "rectangle",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "xmin": [
                    "int",
                    "Callable",
                    "str"
                ],
                "xmax": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ymin": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ymax": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "laundry-folding-master/python/main.py": {},
    "laundry-folding-master/python/laydown_planning/fold_instructions.py": {
        "FoldInstructions.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "intercept": [
                    "int",
                    "bool",
                    "float"
                ],
                "fold_angle": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "laundry-folding-master/python/laydown_planning/laydown_config.py": {
        "LaydownConfiguration.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "y": [
                    "float",
                    "int"
                ],
                "ruler_direction": [
                    "int",
                    "bool",
                    "float"
                ],
                "garment_direction": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LaydownConfiguration.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "laundry-folding-master/python/laydown_planning/laydown_path.py": {
        "LaydownPath.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "laydown_config": [
                    "dict"
                ],
                "height": [
                    "int",
                    "bool",
                    "Callable",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]",
                    "float"
                ],
                "pull_dist": [
                    "bool",
                    "dict",
                    "str"
                ],
                "destination_x": [
                    "int",
                    "Union[int, float]",
                    "Type",
                    "tuple"
                ]
            }
        },
        "LaydownPath.shift_x": {
            "name": "shift_x",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float",
                    "numpy.ndarray",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "LaydownPath.get_hitboxes": {
            "name": "get_hitboxes",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LaydownPath.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "laundry-folding-master/python/laydown_planning/laydown_planner.py": {
        "plan": {
            "name": "plan",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fold_instructions": [
                    "Set[str]",
                    "str",
                    "numpy.ndarray",
                    "list",
                    "set"
                ]
            }
        },
        "choose_best": {
            "name": "choose_best",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "paths": [
                    "str",
                    "bool"
                ]
            }
        },
        "within_reach": {
            "name": "within_reach",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "laydown_path": [
                    "str",
                    "laydown_planning.laydown_path.LaydownPath",
                    "Optional[str]"
                ]
            }
        },
        "collisions": {
            "name": "collisions",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "laydown_path": [
                    "laydown_planning.laydown_path.LaydownPath",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "assign_value": {
            "name": "assign_value",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "laydown_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        }
    },
    "laundry-folding-master/python/laydown_planning/testing.py": {
        "example_inputdisplay": {
            "name": "example_inputdisplay",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "example_laydown_config_display": {
            "name": "example_laydown_config_display",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "example_laydown_path_display": {
            "name": "example_laydown_path_display",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "checking_collision_detection": {
            "name": "checking_collision_detection",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "testing_overall_planner": {
            "name": "testing_overall_planner",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "laundry-folding-master/python/laydown_planning/__init__.py": {},
    "laundry-folding-master/python/laydown_planning/gui/input_display.py": {
        "display_input": {
            "name": "display_input",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "instr": [
                    "str",
                    "int",
                    "complex"
                ],
                "filename": [
                    "str",
                    "bool",
                    "int"
                ],
                "fileformat": [
                    "str"
                ]
            }
        }
    },
    "laundry-folding-master/python/laydown_planning/gui/laydown_config_display.py": {
        "display_laydown_config": {
            "name": "display_laydown_config",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, str]",
                    "str"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Exception",
                    "Dict[str, str]"
                ],
                "fileformat": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "laundry-folding-master/python/laydown_planning/gui/laydown_path_display.py": {
        "display_laydown_path": {
            "name": "display_laydown_path",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "list",
                    "laydown_planning.laydown_path.LaydownPath",
                    "Optional[tuple]"
                ],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "fileformat": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "laundry-folding-master/python/laydown_planning/gui/smart_canvas.py": {
        "SmartCanvas.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int",
                    "str"
                ],
                "background": [
                    "int",
                    "float"
                ]
            }
        },
        "SmartCanvas.translation": {
            "name": "translation",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int"
                ],
                "y": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "SmartCanvas.scaling": {
            "name": "scaling",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "float",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "y": [
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "float",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        },
        "SmartCanvas.circle": {
            "name": "circle",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "center": [
                    "int",
                    "float",
                    "str",
                    "List[str]",
                    "Tuple[int, int]"
                ],
                "radius": [
                    "int",
                    "float",
                    "str",
                    "List[str]",
                    "Tuple[int, int]"
                ],
                "fill": [
                    "int",
                    "Optional[float]",
                    "str",
                    "List['cirq.Qid']"
                ]
            }
        },
        "SmartCanvas.line": {
            "name": "line",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "bool",
                    "Callable",
                    "Optional[int]"
                ],
                "end": [
                    "int",
                    "Dict[int, int]",
                    "Sequence[int]"
                ],
                "width": [
                    "int",
                    "Optional[int]"
                ],
                "fill": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "SmartCanvas.polygon": {
            "name": "polygon",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "polygon": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fill": [
                    "int",
                    "dict",
                    "numpy.ndarray",
                    "Tuple[str, str]"
                ]
            }
        },
        "SmartCanvas.show": {
            "name": "show",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartCanvas.save": {
            "name": "save",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "fileformat": [
                    "str"
                ]
            }
        },
        "SmartCanvas._fix_point": {
            "name": "_fix_point",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "numpy.ndarray",
                    "int",
                    "highlevel.util.geometry.vector.Vector2",
                    "str"
                ]
            }
        },
        "SmartCanvas._fix_fill": {
            "name": "_fix_fill",
            "location": 128,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "fill": [
                    "List[\"SqlFile\"]",
                    "Set[str]"
                ]
            }
        }
    },
    "laundry-folding-master/python/laydown_planning/gui/__init__.py": {}
}
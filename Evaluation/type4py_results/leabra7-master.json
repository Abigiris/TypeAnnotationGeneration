{
    "leabra7-master/setup.py": {},
    "leabra7-master/docs/conf.py": {},
    "leabra7-master/leabra7/events.py": {
        "PauseLogging.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freq_name": [
                    "str"
                ]
            }
        },
        "ResumeLogging.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freq_name": [
                    "str"
                ]
            }
        },
        "HardClamp.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "acts": [
                    "Sequence[float]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Unclamp.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Frequency.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable",
                    "Set[str]",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]",
                    "int"
                ],
                "end_event_type": [
                    "str",
                    "Iterable",
                    "Optional[str]"
                ]
            }
        },
        "Frequency.__eq__": {
            "name": "__eq__",
            "location": 153,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "int"
                ]
            }
        },
        "Frequency.names": {
            "name": "names",
            "location": 160,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "Type['Model']",
                    "Exception",
                    "int"
                ]
            }
        },
        "Frequency.from_name": {
            "name": "from_name",
            "location": 165,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]"
                ],
                "freq_name": [
                    "str"
                ]
            }
        },
        "EventListenerMixin.handle": {
            "name": "handle",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        }
    },
    "leabra7-master/leabra7/layer.py": {
        "_parse_unit_attr": {
            "name": "_parse_unit_attr",
            "location": 15,
            "return": [
                "List[str]",
                "int",
                "Dict[str, Any]",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "attr": [
                    "str",
                    "Match[str]"
                ]
            }
        },
        "Layer.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "size": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "spec": [
                    "int",
                    "Optional[int]",
                    "Optional[Union[int, str]]"
                ]
            }
        },
        "Layer.avg_act": {
            "name": "avg_act",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.avg_net": {
            "name": "avg_net",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.name": {
            "name": "name",
            "location": 118,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.spec": {
            "name": "spec",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.add_input": {
            "name": "add_input",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inpt": [
                    "str",
                    "int",
                    "list"
                ],
                "wt_scale_rel": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "Layer.update_net": {
            "name": "update_net",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.calc_fffb_inhibition": {
            "name": "calc_fffb_inhibition",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.calc_kwta_inhibition": {
            "name": "calc_kwta_inhibition",
            "location": 161,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.calc_kwta_avg_inhibition": {
            "name": "calc_kwta_avg_inhibition",
            "location": 171,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.update_inhibition": {
            "name": "update_inhibition",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.activation_cycle": {
            "name": "activation_cycle",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.update_trial_learning_averages": {
            "name": "update_trial_learning_averages",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.avg_s": {
            "name": "avg_s",
            "location": 215,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.avg_m": {
            "name": "avg_m",
            "location": 220,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.avg_l": {
            "name": "avg_l",
            "location": 225,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.hard_clamp": {
            "name": "hard_clamp",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "act_ext": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Layer.unclamp": {
            "name": "unclamp",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.observe_parts_attr": {
            "name": "observe_parts_attr",
            "location": 253,
            "return": [
                "str",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "Layer.handle": {
            "name": "handle",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "events.events_base.EventType",
                    "monitoring_service.events.ScheduledEvent"
                ]
            }
        }
    },
    "leabra7-master/leabra7/log.py": {
        "merge_parts_observations": {
            "name": "merge_parts_observations",
            "location": 196,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "observations": [
                    "dict",
                    "list",
                    "float"
                ]
            }
        },
        "merge_whole_observations": {
            "name": "merge_whole_observations",
            "location": 215,
            "return": [
                "str",
                "dict",
                "List[List[int]]",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "observations": [
                    "dict",
                    "pandas.DataFrame",
                    "Optional[Tuple[str, ...]]",
                    "List[float]",
                    "str"
                ]
            }
        },
        "DataFrameBuffer.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameBuffer.append": {
            "name": "append",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DataFrameBuffer.increment_time": {
            "name": "increment_time",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameBuffer.to_df": {
            "name": "to_df",
            "location": 67,
            "return": [
                "str",
                "bytearray",
                "float",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableMixin.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "whole_attrs": [
                    "float",
                    "list",
                    "str",
                    "set"
                ],
                "parts_attrs": [
                    "float",
                    "list",
                    "str",
                    "set"
                ]
            }
        },
        "ObservableMixin.name": {
            "name": "name",
            "location": 118,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableMixin.spec": {
            "name": "spec",
            "location": 123,
            "return": [
                "leabra7.specs.ObservableSpec"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableMixin.validate_attr": {
            "name": "validate_attr",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "float"
                ]
            }
        },
        "ObservableMixin.observe_whole_attr": {
            "name": "observe_whole_attr",
            "location": 140,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "dict"
                ]
            }
        },
        "ObservableMixin.observe_parts_attr": {
            "name": "observe_parts_attr",
            "location": 159,
            "return": [
                "PartsObs"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "bool",
                    "list",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "ObservableMixin.observe": {
            "name": "observe",
            "location": 174,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "float",
                    "bytes"
                ]
            }
        },
        "Logger.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "float",
                    "Exception",
                    "str",
                    "pandas.DataFrame"
                ],
                "attrs": [
                    "int",
                    "Optional[int]",
                    "Collection[T]"
                ],
                "freq": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Logger.record": {
            "name": "record",
            "location": 274,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logger.to_logs": {
            "name": "to_logs",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Logger.handle": {
            "name": "handle",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "leabra7-master/leabra7/net.py": {
        "Net.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net._validate_obj_name": {
            "name": "_validate_obj_name",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "Net._validate_layer_name": {
            "name": "_validate_layer_name",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "Net._get_layer": {
            "name": "_get_layer",
            "location": 56,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Net._add_loggers": {
            "name": "_add_loggers",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "Exception",
                    "int"
                ]
            }
        },
        "Net.save": {
            "name": "save",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Net.load": {
            "name": "load",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Net.new_layer": {
            "name": "new_layer",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "size": [
                    "str",
                    "bool",
                    "int",
                    "Match[Any]"
                ],
                "spec": [
                    "leabra7.specs.LayerSpec",
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Net.clamp_layer": {
            "name": "clamp_layer",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]",
                    "Dict[str, 'LabwareDefinition']",
                    "Optional[str]",
                    "List[str]"
                ],
                "acts": [
                    "str",
                    "List[str]",
                    "Union[bytes, str]",
                    "Exception"
                ]
            }
        },
        "Net.unclamp_layer": {
            "name": "unclamp_layer",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]",
                    "Dict[str, 'LabwareDefinition']",
                    "Optional[str]",
                    "Callable[[str], str]"
                ]
            }
        },
        "Net.new_projn": {
            "name": "new_projn",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Iterable[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, List[bytes]]"
                ],
                "pre": [
                    "str",
                    "Callable"
                ],
                "post": [
                    "str",
                    "Callable"
                ],
                "spec": [
                    "leabra7.specs.ProjnSpec",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable[[str], None]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Net._cycle": {
            "name": "_cycle",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.cycle": {
            "name": "cycle",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.minus_phase_cycle": {
            "name": "minus_phase_cycle",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_cycles": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Net.plus_phase_cycle": {
            "name": "plus_phase_cycle",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_cycles": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Net.end_epoch": {
            "name": "end_epoch",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.end_batch": {
            "name": "end_batch",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.pause_logging": {
            "name": "pause_logging",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freq": [
                    "str",
                    "Any",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Optional[Any]"
                ]
            }
        },
        "Net.resume_logging": {
            "name": "resume_logging",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freq": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Net.learn": {
            "name": "learn",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Net.observe": {
            "name": "observe",
            "location": 295,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "attr": [
                    "str",
                    "bool",
                    "int",
                    "Sequence",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "Net.logs": {
            "name": "logs",
            "location": 325,
            "return": [
                "dict",
                "Optional[T]",
                "Tuple[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "freq": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Net.handle": {
            "name": "handle",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "leabra7.events.Event",
                    "dict",
                    "events.Event",
                    "Dict[str, Any]",
                    "float",
                    "list"
                ]
            }
        }
    },
    "leabra7-master/leabra7/projn.py": {
        "tile": {
            "name": "tile",
            "location": 19,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "length": [
                    "Iterable[T]",
                    "int",
                    "float",
                    "torch.Tensor"
                ],
                "xs": [
                    "Iterable[T]",
                    "int",
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "expand_layer_mask_full": {
            "name": "expand_layer_mask_full",
            "location": 34,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "pre_mask": [
                    "List[bool]",
                    "int",
                    "str"
                ],
                "post_mask": [
                    "List[bool]",
                    "int",
                    "str"
                ]
            }
        },
        "expand_layer_mask_one_to_one": {
            "name": "expand_layer_mask_one_to_one",
            "location": 58,
            "return": [
                "float",
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "pre_mask": [
                    "List[bool]",
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "post_mask": [
                    "List[bool]",
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "sparsify": {
            "name": "sparsify",
            "location": 100,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "List[int]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "sparsity": [
                    "int",
                    "str",
                    "torch.Tensor"
                ],
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "xcal": {
            "name": "xcal",
            "location": 129,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "torch.Tensor"
                ],
                "thr": [
                    "float",
                    "torch.FloatTensor",
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "sig": {
            "name": "sig",
            "location": 154,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "gain": [
                    "float",
                    "torch.Tensor"
                ],
                "offset": [
                    "float",
                    "torch.Tensor"
                ],
                "x": [
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "Projn.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ],
                "pre": [
                    "bytes",
                    "int",
                    "leabra7.layer.Layer"
                ],
                "post": [
                    "Optional[int]"
                ],
                "spec": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "Projn.name": {
            "name": "name",
            "location": 235,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projn.spec": {
            "name": "spec",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projn.netin_scale": {
            "name": "netin_scale",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projn.flush": {
            "name": "flush",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projn.learn": {
            "name": "learn",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projn.observe_parts_attr": {
            "name": "observe_parts_attr",
            "location": 333,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "Projn.handle": {
            "name": "handle",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "leabra7.events.Event",
                    "events.Event",
                    "Dict[str, Any]",
                    "list",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "leabra7-master/leabra7/rand.py": {
        "Distribution.fill": {
            "name": "fill",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Scalar.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Scalar.fill": {
            "name": "fill",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Uniform.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "str",
                    "dict"
                ],
                "high": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Uniform.fill": {
            "name": "fill",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "str",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Gaussian.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "str",
                    "int"
                ],
                "var": [
                    "Callable[[], Any]",
                    "List[Tuple[int, str]]",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Gaussian.fill": {
            "name": "fill",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LogNormal.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean": [
                    "str",
                    "int"
                ],
                "var": [
                    "Callable[[], Any]",
                    "List[Tuple[int, str]]",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "LogNormal.fill": {
            "name": "fill",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "bool",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "Exponential.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lambd": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Exponential.fill": {
            "name": "fill",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "leabra7-master/leabra7/specs.py": {
        "Spec.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spec.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Spec.assert_in_range": {
            "name": "assert_in_range",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ],
                "low": [
                    "str"
                ],
                "high": [
                    "str"
                ]
            }
        },
        "Spec.assert_sane_float": {
            "name": "assert_sane_float",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "bool"
                ]
            }
        },
        "Spec.validate": {
            "name": "validate",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableSpec._valid_attrs_to_log": {
            "name": "_valid_attrs_to_log",
            "location": 115,
            "return": [
                "typing.Iterable[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableSpec.attrs_to_log": {
            "name": "attrs_to_log",
            "location": 118,
            "return": [
                "str",
                "Tuple[str, str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "freq": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "List[dict]"
                ]
            }
        },
        "ObservableSpec.validate_attrs_to_log": {
            "name": "validate_attrs_to_log",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservableSpec.validate": {
            "name": "validate",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitSpec.validate": {
            "name": "validate",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerSpec._valid_attrs_to_log": {
            "name": "_valid_attrs_to_log",
            "location": 251,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerSpec.validate": {
            "name": "validate",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjnSpec._valid_attrs_to_log": {
            "name": "_valid_attrs_to_log",
            "location": 319,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjnSpec.validate": {
            "name": "validate",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leabra7-master/leabra7/unit.py": {
        "gaussian": {
            "name": "gaussian",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "res": [
                    "float",
                    "Iterable[T]"
                ],
                "std": [
                    "float",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "xx1": {
            "name": "xx1",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "res": [
                    "Callable"
                ],
                "xmin": [
                    "Callable"
                ],
                "xmax": [
                    "Callable"
                ]
            }
        },
        "nxx1_table": {
            "name": "nxx1_table",
            "location": 65,
            "return": [
                "bool",
                "Dict[str, Any]",
                "OrderedDict[str, Any]"
            ],
            "arguments": {}
        },
        "clip": {
            "name": "clip",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vals": [
                    "int",
                    "Callable",
                    "str"
                ],
                "minimum": [
                    "int",
                    "Callable",
                    "str"
                ],
                "maximum": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UnitGroup.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Tuple[int]",
                    "bool",
                    "numpy.ndarray",
                    "dict"
                ],
                "spec": [
                    "Optional[int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "UnitGroup.g_i_thr": {
            "name": "g_i_thr",
            "location": 164,
            "return": [
                "Optional[str]",
                "str",
                "torch.LongTensor"
            ],
            "arguments": {
                "self": [],
                "unit_idx": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "UnitGroup.group_g_i_thr": {
            "name": "group_g_i_thr",
            "location": 179,
            "return": [
                "str",
                "Optional[str]",
                "torch.LongTensor",
                "torch.BoolTensor"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitGroup.add_input": {
            "name": "add_input",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inpt": [
                    "torch.Tensor",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "UnitGroup.update_net": {
            "name": "update_net",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitGroup.update_inhibition": {
            "name": "update_inhibition",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gc_i": [
                    "int",
                    "torch.Tensor",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "UnitGroup.update_membrane_potential": {
            "name": "update_membrane_potential",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitGroup.nxx1": {
            "name": "nxx1",
            "location": 233,
            "return": [
                "numpy.ndarray",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "UnitGroup.update_activation": {
            "name": "update_activation",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitGroup.hard_clamp": {
            "name": "hard_clamp",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "act_ext": [
                    "Iterable[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "UnitGroup.update_cycle_learning_averages": {
            "name": "update_cycle_learning_averages",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitGroup.update_trial_learning_averages": {
            "name": "update_trial_learning_averages",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "acts_p_avg_eff": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "UnitGroup.top_k_net_indices": {
            "name": "top_k_net_indices",
            "location": 316,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "UnitGroup.observe": {
            "name": "observe",
            "location": 330,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "Union[int, slice]",
                    "dict",
                    "T",
                    "str"
                ]
            }
        }
    },
    "leabra7-master/leabra7/utils.py": {
        "clip_float": {
            "name": "clip_float",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "low": [
                    "float",
                    "int"
                ],
                "high": [
                    "float",
                    "int"
                ],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "clip_iterable": {
            "name": "clip_iterable",
            "location": 19,
            "return": [
                "str",
                "float",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "low": [
                    "float",
                    "Iterable[float]"
                ],
                "high": [
                    "float",
                    "Iterable[float]"
                ],
                "xs": [
                    "float",
                    "Iterable[float]"
                ]
            }
        }
    },
    "leabra7-master/leabra7/__init__.py": {},
    "leabra7-master/notebooks/without_learning.py": {
        "plot_by_unit": {
            "name": "plot_by_unit",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "axes": [
                    "str",
                    "Optional[str]"
                ],
                "log": [
                    "str",
                    "Union[Set[str], List[str]]"
                ],
                "attr_name": [
                    "str",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "Optional[str]"
                ],
                "location": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "leabra7-master/scripts/notebook_to_python.py": {},
    "leabra7-master/scripts/python_to_notebook.py": {
        "break_cells": {
            "name": "break_cells",
            "location": 11,
            "return": [
                "Union[str, List[str]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "data": [
                    "List[str]",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "build_cell_list": {
            "name": "build_cell_list",
            "location": 40,
            "return": [
                "str",
                "Sequence[str]",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "cells": [
                    "List[List[str]]",
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "cell_code": [
                    "List[bool]",
                    "List[str]",
                    "dict",
                    "str",
                    "T",
                    "Iterable[dict]"
                ]
            }
        },
        "build_notebook_dict": {
            "name": "build_notebook_dict",
            "location": 73,
            "return": [
                "dict",
                "str",
                "Callable[[Any], None]"
            ],
            "arguments": {
                "out_cells": [
                    "List[Dict[str, Any]]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "leabra7-master/tests/test_events.py": {
        "test_clamp_checks_if_acts_contains_values_outside_0_1": {
            "name": "test_clamp_checks_if_acts_contains_values_outside_0_1",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pause_logging_checks_for_valid_frequency_name": {
            "name": "test_pause_logging_checks_for_valid_frequency_name",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resume_logging_checks_for_valid_frequency_name": {
            "name": "test_resume_logging_checks_for_valid_frequency_name",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initializing_frequency_with_incorrect_type_raises_error": {
            "name": "test_initializing_frequency_with_incorrect_type_raises_error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_get_the_names_of_all_defined_frequencies": {
            "name": "test_you_can_get_the_names_of_all_defined_frequencies",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_get_frequency_objects_by_name": {
            "name": "test_you_can_get_frequency_objects_by_name",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getting_a_frequency_with_undefined_name_raises_error": {
            "name": "test_getting_a_frequency_with_undefined_name_raises_error",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_equality_check_for_frequencies": {
            "name": "test_equality_check_for_frequencies",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "BinaryIO",
                    "Optional[BinaryIO]"
                ]
            }
        },
        "test_non_equality_for_non_frequencies": {
            "name": "test_non_equality_for_non_frequencies",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "List[str]"
                ]
            }
        }
    },
    "leabra7-master/tests/test_kwta.py": {
        "test_kwta_suppresses_all_but_k_units": {
            "name": "test_kwta_suppresses_all_but_k_units",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kwta_avg_suppresses_all_but_k_units": {
            "name": "test_kwta_avg_suppresses_all_but_k_units",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "leabra7-master/tests/test_layer.py": {
        "test_parse_unit_attribute_strips_the_unit_prefix": {
            "name": "test_parse_unit_attribute_strips_the_unit_prefix",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_init_uses_the_spec_you_pass_it": {
            "name": "test_layer_init_uses_the_spec_you_pass_it",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_has_a_name": {
            "name": "test_layer_has_a_name",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_has_a_size": {
            "name": "test_layer_has_a_size",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_should_be_able_to_compute_its_average_activation": {
            "name": "test_layer_should_be_able_to_compute_its_average_activation",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_should_be_able_to_compute_its_average_net_input": {
            "name": "test_layer_should_be_able_to_compute_its_average_net_input",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_can_add_input": {
            "name": "test_layer_can_add_input",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "List[List[Any]]"
                ],
                "d": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_layer_should_be_able_to_update_its_units_net_input": {
            "name": "test_layer_should_be_able_to_update_its_units_net_input",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_layer_should_be_able_to_update_its_units_fffb_inhibition": {
            "name": "test_layer_should_be_able_to_update_its_units_fffb_inhibition",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_should_be_able_to_update_its_units_kwta_inhibition": {
            "name": "test_layer_should_be_able_to_update_its_units_kwta_inhibition",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_should_be_able_to_update_its_units_kwta_avg_inhibition": {
            "name": "test_layer_should_be_able_to_update_its_units_kwta_avg_inhibition",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_should_be_able_to_do_an_activation_cycle": {
            "name": "test_layer_should_be_able_to_do_an_activation_cycle",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_should_be_able_to_observe_whole_attributes": {
            "name": "test_layer_should_be_able_to_observe_whole_attributes",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_should_be_able_to_observe_parts_attributes": {
            "name": "test_layer_should_be_able_to_observe_parts_attributes",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observing_invalid_parts_attribute_should_raise_error": {
            "name": "test_observing_invalid_parts_attribute_should_raise_error",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_can_update_learning_averages_when_hard_clamped": {
            "name": "test_layer_can_update_learning_averages_when_hard_clamped",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_layer_hard_clamping_should_change_the_unit_activations": {
            "name": "test_layer_hard_clamping_should_change_the_unit_activations",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_set_hard_clamp": {
            "name": "test_layer_set_hard_clamp",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_hard_clamping_respects_clamp_max": {
            "name": "test_layer_hard_clamping_respects_clamp_max",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_layer_can_unclamp": {
            "name": "test_layer_can_unclamp",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hard_clamp_event_hard_clamps_a_layer_if_the_names_match": {
            "name": "test_hard_clamp_event_hard_clamps_a_layer_if_the_names_match",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hard_clamp_event_does_nothing_if_the_names_do_not_match": {
            "name": "test_hard_clamp_event_does_nothing_if_the_names_do_not_match",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hard_clamp_event_marks_layer_as_not_hidden": {
            "name": "test_hard_clamp_event_marks_layer_as_not_hidden",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_end_plus_phase_event_saves_activations": {
            "name": "test_end_plus_phase_event_saves_activations",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_end_minus_phase_event_saves_activations": {
            "name": "test_end_minus_phase_event_saves_activations",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "leabra7-master/tests/test_log.py": {
        "test_dataframebuffer_can_record_observations": {
            "name": "test_dataframebuffer_can_record_observations",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataframebuffer_can_increment_time": {
            "name": "test_dataframebuffer_can_increment_time",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observable_has_whole_attrs": {
            "name": "test_observable_has_whole_attrs",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observable_has_parts_attrs": {
            "name": "test_observable_has_parts_attrs",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observable_can_validate_attributes": {
            "name": "test_observable_can_validate_attributes",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observing_whole_attrs_raises_error_if_invalid_attr": {
            "name": "test_observing_whole_attrs_raises_error_if_invalid_attr",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_observe_whole_attributes": {
            "name": "test_you_can_observe_whole_attributes",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observing_parts_attrs_raises_error_if_invalid_attr": {
            "name": "test_observing_parts_attrs_raises_error_if_invalid_attr",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_observe_parts_attributes": {
            "name": "test_you_can_observe_parts_attributes",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_observe_part_attributes_without_specifying_part": {
            "name": "test_you_can_observe_part_attributes_without_specifying_part",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_observe_whole_attrs_without_specifying_whole": {
            "name": "test_you_can_observe_whole_attrs_without_specifying_whole",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observing_an_invalid_attribute_raises_value_error": {
            "name": "test_observing_an_invalid_attribute_raises_value_error",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_merge_parts_observations": {
            "name": "test_you_can_merge_parts_observations",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_merge_whole_observations": {
            "name": "test_you_can_merge_whole_observations",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logger_can_record_attributes_from_an_object": {
            "name": "test_logger_can_record_attributes_from_an_object",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logger_has_a_name_property": {
            "name": "test_logger_has_a_name_property",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_logger_can_pause_logging": {
            "name": "test_logger_can_pause_logging",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ObjToLog.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "ObjToLog.spec": {
            "name": "spec",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjToLog.name": {
            "name": "name",
            "location": 49,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjToLog.observe_parts_attr": {
            "name": "observe_parts_attr",
            "location": 52,
            "return": [
                "str",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        }
    },
    "leabra7-master/tests/test_net.py": {
        "test_network_can_be_saved": {
            "name": "test_network_can_be_saved",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_network_can_be_retrieved_and_continue_logging": {
            "name": "test_network_can_be_retrieved_and_continue_logging",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_the_network_can_check_if_an_object_exists_within_it": {
            "name": "test_the_network_can_check_if_an_object_exists_within_it",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_the_network_can_get_a_layer_by_name": {
            "name": "test_the_network_can_get_a_layer_by_name",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_the_network_can_validate_layer_names": {
            "name": "test_the_network_can_validate_layer_names",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getting_an_invalid_layer_name_raises_value_error": {
            "name": "test_getting_an_invalid_layer_name_raises_value_error",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_a_new_layer_validates_its_spec": {
            "name": "test_a_new_layer_validates_its_spec",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_create_a_layer_with_a_default_spec": {
            "name": "test_you_can_create_a_layer_with_a_default_spec",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_hard_clamp_a_layer": {
            "name": "test_you_can_hard_clamp_a_layer",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_unclamp_a_layer": {
            "name": "test_you_can_unclamp_a_layer",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clamping_a_layer_validates_its_name": {
            "name": "test_clamping_a_layer_validates_its_name",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unclamping_a_layer_validates_its_name": {
            "name": "test_unclamping_a_layer_validates_its_name",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_a_new_projn_validates_its_spec": {
            "name": "test_a_new_projn_validates_its_spec",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_create_a_projn_with_a_default_spec": {
            "name": "test_you_can_create_a_projn_with_a_default_spec",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_checks_if_the_sending_layer_name_is_valid": {
            "name": "test_projn_checks_if_the_sending_layer_name_is_valid",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_checks_if_the_receiving_layer_name_is_valid": {
            "name": "test_projn_checks_if_the_receiving_layer_name_is_valid",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_running_a_minus_phase_raises_error_if_num_cycles_less_than_one": {
            "name": "test_running_a_minus_phase_raises_error_if_num_cycles_less_than_one",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_running_a_minus_phase_broadcasts_minus_phase_event_markers": {
            "name": "test_running_a_minus_phase_broadcasts_minus_phase_event_markers",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_running_a_minus_phase_runs_the_correct_number_of_cycles": {
            "name": "test_running_a_minus_phase_runs_the_correct_number_of_cycles",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Type"
                ]
            }
        },
        "test_running_a_plus_phase_raises_error_if_num_cycles_less_than_one": {
            "name": "test_running_a_plus_phase_raises_error_if_num_cycles_less_than_one",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_running_a_plus_phase_broadcasts_plus_phase_event_markers": {
            "name": "test_running_a_plus_phase_broadcasts_plus_phase_event_markers",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_running_a_plus_phase_runs_the_correct_number_of_cycles": {
            "name": "test_running_a_plus_phase_runs_the_correct_number_of_cycles",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Type"
                ]
            }
        },
        "test_you_can_observe_unlogged_attributes": {
            "name": "test_you_can_observe_unlogged_attributes",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observing_unlogged_attr_raises_error_if_obj_not_observable": {
            "name": "test_observing_unlogged_attr_raises_error_if_obj_not_observable",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observing_unlogged_attr_checks_whether_attr_is_invalid": {
            "name": "test_observing_unlogged_attr_checks_whether_attr_is_invalid",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observing_unlogged_attr_checks_whether_obj_exists": {
            "name": "test_observing_unlogged_attr_checks_whether_obj_exists",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_net_logs_checks_whether_the_frequency_name_is_valid": {
            "name": "test_net_logs_checks_whether_the_frequency_name_is_valid",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_net_logs_checks_whether_the_object_name_is_valid": {
            "name": "test_net_logs_checks_whether_the_object_name_is_valid",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_retrieve_the_logs_for_a_layer": {
            "name": "test_you_can_retrieve_the_logs_for_a_layer",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_net_can_pause_and_resume_logging": {
            "name": "test_net_can_pause_and_resume_logging",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_net_trial_log_pausing_and_resuming": {
            "name": "test_net_trial_log_pausing_and_resuming",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_net_epoch_log_pausing_and_resuming": {
            "name": "test_net_epoch_log_pausing_and_resuming",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_net_batch_log_pausing_and_resuming": {
            "name": "test_net_batch_log_pausing_and_resuming",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_network_triggers_cycle_on_cycle_event": {
            "name": "test_network_triggers_cycle_on_cycle_event",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_network_passes_non_cycle_events_to_every_object": {
            "name": "test_network_passes_non_cycle_events_to_every_object",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "dict"
                ]
            }
        },
        "test_learn_broadcasts_learn_events_to_each_object": {
            "name": "test_learn_broadcasts_learn_events_to_each_object",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_you_can_signal_the_end_of_an_epoch": {
            "name": "test_you_can_signal_the_end_of_an_epoch",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "dict"
                ]
            }
        },
        "test_you_can_signal_the_end_of_a_batch": {
            "name": "test_you_can_signal_the_end_of_a_batch",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "dict",
                    "Type"
                ]
            }
        }
    },
    "leabra7-master/tests/test_projn.py": {
        "test_projn_has_a_name": {
            "name": "test_projn_has_a_name",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_has_a_sending_layer": {
            "name": "test_projn_has_a_sending_layer",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_has_a_receiving_layer": {
            "name": "test_projn_has_a_receiving_layer",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_can_specify_its_weight_distribution": {
            "name": "test_projn_can_specify_its_weight_distribution",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_can_flush": {
            "name": "test_projn_can_flush",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_can_mask_pre_layer_units": {
            "name": "test_projn_can_mask_pre_layer_units",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_pre_mask_tiles_if_it_is_too_short": {
            "name": "test_projn_pre_mask_tiles_if_it_is_too_short",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_pre_mask_truncates_if_it_is_too_long": {
            "name": "test_projn_pre_mask_truncates_if_it_is_too_long",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_can_mask_post_layer_units": {
            "name": "test_projn_can_mask_post_layer_units",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tile_can_tile_an_iterable": {
            "name": "test_tile_can_tile_an_iterable",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expand_layer_mask_full_has_the_correct_connectivity_pattern": {
            "name": "test_expand_layer_mask_full_has_the_correct_connectivity_pattern",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expand_layer_mask_one_to_one_tests_unit_count": {
            "name": "test_expand_layer_mask_one_to_one_tests_unit_count",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expand_layer_mask_one_to_one_has_the_correct_connectivity_pattern": {
            "name": "test_expand_layer_mask_one_to_one_has_the_correct_connectivity_pattern",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_one_to_one_connectivity_pattern_is_correct": {
            "name": "test_projn_one_to_one_connectivity_pattern_is_correct",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sparsify_can_make_a_matrix_sparse": {
            "name": "test_sparsify_can_make_a_matrix_sparse",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_post_mask_tiles_if_it_is_too_short": {
            "name": "test_projn_post_mask_tiles_if_it_is_too_short",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_post_mask_truncates_if_it_is_too_long": {
            "name": "test_projn_post_mask_truncates_if_it_is_too_long",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_can_calculate_netin_scale_with_full_connectivity": {
            "name": "test_projn_can_calculate_netin_scale_with_full_connectivity",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Callable",
                    "str",
                    "Sequence['cirq.Qid']",
                    "bytes"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "z": [
                    "int",
                    "float"
                ],
                "f": [
                    "torch.Tensor",
                    "float",
                    "List[List[T]]",
                    "int",
                    "str"
                ]
            }
        },
        "test_projn_can_calculate_netin_scale_with_partial_connectivity": {
            "name": "test_projn_can_calculate_netin_scale_with_partial_connectivity",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "z": [
                    "int",
                    "float"
                ],
                "m": [],
                "n": [],
                "f": [
                    "bool",
                    "Type['Frame']",
                    "float",
                    "int"
                ]
            }
        },
        "test_projns_can_be_sparse": {
            "name": "test_projns_can_be_sparse",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_can_learn": {
            "name": "test_projn_can_learn",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_can_handle_learn_events": {
            "name": "test_projn_can_handle_learn_events",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_you_can_log_projection_weights": {
            "name": "test_you_can_log_projection_weights",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_log_projection_fast_weights": {
            "name": "test_you_can_log_projection_fast_weights",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observing_invalid_parts_attr_raises_value_error": {
            "name": "test_observing_invalid_parts_attr_raises_value_error",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "leabra7-master/tests/test_projn_logging.py": {
        "trial": {
            "name": "trial",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "leabra7.Net",
                    "int",
                    "float",
                    "dict"
                ],
                "input_pattern": [
                    "Iterable[float]",
                    "List[T]",
                    "str",
                    "int"
                ],
                "output_pattern": [
                    "Iterable[Iterable[float]]",
                    "Iterable[float]",
                    "int"
                ]
            }
        },
        "test_you_can_log_projection_weights": {
            "name": "test_you_can_log_projection_weights",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "leabra7-master/tests/test_rand.py": {
        "test_distribution_cannot_be_instantiated": {
            "name": "test_distribution_cannot_be_instantiated",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_is_always_equal_to_its_value": {
            "name": "test_scalar_is_always_equal_to_its_value",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uniform_is_always_within_its_range": {
            "name": "test_uniform_is_always_within_its_range",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uniform_checks_low_is_less_than_high": {
            "name": "test_uniform_checks_low_is_less_than_high",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gaussian_can_be_used": {
            "name": "test_gaussian_can_be_used",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gaussian_checks_variance_is_positive": {
            "name": "test_gaussian_checks_variance_is_positive",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lognormal_is_always_postiive": {
            "name": "test_lognormal_is_always_postiive",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lognormal_checks_variance_is_positive": {
            "name": "test_lognormal_checks_variance_is_positive",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_can_be_used": {
            "name": "test_exponential_can_be_used",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "leabra7-master/tests/test_spec.py": {
        "test_spec_sets_attributes_from_the_constructor": {
            "name": "test_spec_sets_attributes_from_the_constructor",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spec_throws_an_error_if_you_set_a_nonexistent_attribute": {
            "name": "test_spec_throws_an_error_if_you_set_a_nonexistent_attribute",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spec_supports_equality_comparison": {
            "name": "test_spec_supports_equality_comparison",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spec_can_check_if_an_attribute_is_in_range": {
            "name": "test_spec_can_check_if_an_attribute_is_in_range",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spec_assert_in_range_checks_the_bounds_make_sense": {
            "name": "test_spec_assert_in_range_checks_the_bounds_make_sense",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spec_can_check_if_an_attribute_is_nan": {
            "name": "test_spec_can_check_if_an_attribute_is_nan",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spec_can_check_if_an_attribute_is_inf": {
            "name": "test_spec_can_check_if_an_attribute_is_inf",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spec_can_check_if_an_attribute_is_negative_inf": {
            "name": "test_spec_can_check_if_an_attribute_is_negative_inf",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "float_outside_range": {
            "name": "float_outside_range",
            "location": 76,
            "return": [
                "int",
                "IO[str]",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "low": [
                    "float"
                ],
                "high": [
                    "float"
                ]
            }
        },
        "test_unit_spec_validates_integ": {
            "name": "test_unit_spec_validates_integ",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_it_should_validate_e_rev_e_for_insane_floats": {
            "name": "test_it_should_validate_e_rev_e_for_insane_floats",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "test_it_should_validate_e_rev_i_for_insane_floats": {
            "name": "test_it_should_validate_e_rev_i_for_insane_floats",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_it_should_validate_e_rev_l_for_insane_floats": {
            "name": "test_it_should_validate_e_rev_l_for_insane_floats",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "test_it_should_validate_gc_l_for_insane_floats": {
            "name": "test_it_should_validate_gc_l_for_insane_floats",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_it_should_validate_spk_thr_for_insane_floats": {
            "name": "test_it_should_validate_spk_thr_for_insane_floats",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_it_should_validate_v_m_r_for_insane_floats": {
            "name": "test_it_should_validate_v_m_r_for_insane_floats",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "str"
                ]
            }
        },
        "test_it_should_validate_v_m_r_is_less_than_spk_thr": {
            "name": "test_it_should_validate_v_m_r_is_less_than_spk_thr",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_should_validate_spike_gain_for_insane_floats": {
            "name": "test_it_should_validate_spike_gain_for_insane_floats",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_it_should_validate_net_dt": {
            "name": "test_it_should_validate_net_dt",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_it_should_validate_vm_dt": {
            "name": "test_it_should_validate_vm_dt",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_it_should_validate_adapt_dt": {
            "name": "test_it_should_validate_adapt_dt",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_it_should_validate_syn_tr": {
            "name": "test_it_should_validate_syn_tr",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_it_should_validate_act_gain_positive": {
            "name": "test_it_should_validate_act_gain_positive",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_it_should_validate_ss_dt": {
            "name": "test_it_should_validate_ss_dt",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_it_should_validate_s_dt": {
            "name": "test_it_should_validate_s_dt",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_it_should_validate_m_dt": {
            "name": "test_it_should_validate_m_dt",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int",
                    "BinaryIO"
                ]
            }
        },
        "test_it_should_validate_l_dn_dt": {
            "name": "test_it_should_validate_l_dn_dt",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int",
                    "str"
                ]
            }
        },
        "test_it_should_validate_l_up_inc": {
            "name": "test_it_should_validate_l_up_inc",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_layer_spec_validates_inhibition_type": {
            "name": "test_layer_spec_validates_inhibition_type",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "Dict[str, List[float]]"
                ]
            }
        },
        "test_layer_spec_validates_kwta_pct": {
            "name": "test_layer_spec_validates_kwta_pct",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_layer_spec_validates_kwta_pt": {
            "name": "test_layer_spec_validates_kwta_pt",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_layer_spec_validates_integ": {
            "name": "test_layer_spec_validates_integ",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_it_should_validate_feedforward_inhibition_multiplier": {
            "name": "test_it_should_validate_feedforward_inhibition_multiplier",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_it_should_validate_feedback_inhibition_multiplier": {
            "name": "test_it_should_validate_feedback_inhibition_multiplier",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_it_should_validate_feedback_integration_constant": {
            "name": "test_it_should_validate_feedback_integration_constant",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_it_should_validate_global_inhibition_multiplier": {
            "name": "test_it_should_validate_global_inhibition_multiplier",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_it_should_validate_the_unit_spec": {
            "name": "test_it_should_validate_the_unit_spec",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_every_valid_log_on_cycle_attribute_can_be_logged": {
            "name": "test_every_valid_log_on_cycle_attribute_can_be_logged",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_should_check_for_invalid_log_on_cycle_attrs": {
            "name": "test_it_should_check_for_invalid_log_on_cycle_attrs",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_should_check_for_invalid_log_on_trial_attrs": {
            "name": "test_it_should_check_for_invalid_log_on_trial_attrs",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_should_check_for_invalid_log_on_epoch_attrs": {
            "name": "test_it_should_check_for_invalid_log_on_epoch_attrs",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_should_check_for_invalid_log_on_batch_attrs": {
            "name": "test_it_should_check_for_invalid_log_on_batch_attrs",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_should_check_for_invalid_clamp_max": {
            "name": "test_it_should_check_for_invalid_clamp_max",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_projn_spec_validates_integ": {
            "name": "test_projn_spec_validates_integ",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_projn_spec_validates_the_distribution": {
            "name": "test_projn_spec_validates_the_distribution",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_projn_spec_validates_sparsity": {
            "name": "test_projn_spec_validates_sparsity",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_projn_spec_validates_projn_type": {
            "name": "test_projn_spec_validates_projn_type",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "dict",
                    "Dict[str, List[float]]"
                ]
            }
        },
        "test_projn_spec_validates_wt_scale_abs": {
            "name": "test_projn_spec_validates_wt_scale_abs",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "test_projn_spec_validates_wt_scale_rel": {
            "name": "test_projn_spec_validates_wt_scale_rel",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "test_projn_spec_validates_lrate": {
            "name": "test_projn_spec_validates_lrate",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "test_projn_spec_validates_sig_gain": {
            "name": "test_projn_spec_validates_sig_gain",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_projn_spec_validates_sig_offset": {
            "name": "test_projn_spec_validates_sig_offset",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_projn_spec_validates_thr_l_mix": {
            "name": "test_projn_spec_validates_thr_l_mix",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "Sequence[str]",
                    "int",
                    "str"
                ]
            }
        },
        "test_projn_spec_validates_attrs_to_log": {
            "name": "test_projn_spec_validates_attrs_to_log",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attrs_to_log_gets_the_attrs_to_log_by_frequency": {
            "name": "test_attrs_to_log_gets_the_attrs_to_log_by_frequency",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Foo.validate": {
            "name": "validate",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leabra7-master/tests/test_unit.py": {
        "test_gaussian_returns_a_probability_density": {
            "name": "test_gaussian_returns_a_probability_density",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gaussian_raises_an_error_if_std_is_too_small": {
            "name": "test_gaussian_raises_an_error_if_std_is_too_small",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gaussian_raises_an_error_if_res_is_too_big": {
            "name": "test_gaussian_raises_an_error_if_res_is_too_big",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_xx1_returns_the_correct_array": {
            "name": "test_xx1_returns_the_correct_array",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "nxx1_table_fixture": {
            "name": "nxx1_table_fixture",
            "location": 38,
            "return": [
                "bool",
                "Callable",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_nxx1_table_returns_the_correct_arrays": {
            "name": "test_nxx1_table_returns_the_correct_arrays",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "nxx1_table": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_nxx1_equals_the_lookup_table": {
            "name": "test_nxx1_equals_the_lookup_table",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "nxx1_table": [
                    "str"
                ]
            }
        },
        "test_nxx1_equals_the_min_value_outside_the_min_bound": {
            "name": "test_nxx1_equals_the_min_value_outside_the_min_bound",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "nxx1_table": [
                    "str"
                ]
            }
        },
        "test_nxx1_equals_the_max_value_outside_the_max_bound": {
            "name": "test_nxx1_equals_the_max_value_outside_the_max_bound",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "nxx1_table": [
                    "str"
                ]
            }
        },
        "test_clip_method": {
            "name": "test_clip_method",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "vals": [],
                "minimum": [
                    "bool",
                    "str"
                ],
                "maximum": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_unitgroup_init_checks_that_size_is_positive": {
            "name": "test_unitgroup_init_checks_that_size_is_positive",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unitgroup_update_net_checks_input_dimensions": {
            "name": "test_unitgroup_update_net_checks_input_dimensions",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unitgroup_update_inhibition_checks_input_dimensions": {
            "name": "test_unitgroup_update_inhibition_checks_input_dimensions",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_you_can_observe_parts_attrs_from_the_unit_group": {
            "name": "test_you_can_observe_parts_attrs_from_the_unit_group",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_observing_an_invalid_attr_raises_an_error": {
            "name": "test_observing_an_invalid_attr_raises_an_error",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unitgroup_can_calculate_the_threshold_inhibition": {
            "name": "test_unitgroup_can_calculate_the_threshold_inhibition",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unitgroup_can_calculate_each_units_threshold_inhibition": {
            "name": "test_unitgroup_can_calculate_each_units_threshold_inhibition",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unitgroup_uses_the_default_spec_if_none_is_provided": {
            "name": "test_unitgroup_uses_the_default_spec_if_none_is_provided",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unitgroup_sets_the_spec_you_provide": {
            "name": "test_unitgroup_sets_the_spec_you_provide",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unitgroup_can_return_the_top_k_net_input_values": {
            "name": "test_unitgroup_can_return_the_top_k_net_input_values",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "leabra7-master/tests/test_util.py": {
        "test_clip_float_returns_x_if_it_is_within_the_range": {
            "name": "test_clip_float_returns_x_if_it_is_within_the_range",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_clip_float_returns_the_lower_bound_if_x_is_below_it": {
            "name": "test_clip_float_returns_the_lower_bound_if_x_is_below_it",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_clip_float_returns_the_upper_bound_if_x_is_above_it": {
            "name": "test_clip_float_returns_the_upper_bound_if_x_is_above_it",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_clip_iterable_clips_iterables_to_range": {
            "name": "test_clip_iterable_clips_iterables_to_range",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "leabra7-master/tests/test_xcal.py": {
        "trial": {
            "name": "trial",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "leabra7.Net",
                    "int",
                    "float",
                    "dict"
                ],
                "input_pattern": [
                    "Iterable[float]",
                    "List[T]",
                    "str",
                    "int"
                ],
                "output_pattern": [
                    "Iterable[Iterable[float]]",
                    "Iterable[float]",
                    "int"
                ]
            }
        },
        "epoch": {
            "name": "epoch",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "leabra7.Net",
                    "str",
                    "bool",
                    "Match"
                ],
                "input_patterns": [
                    "Iterable[Iterable[float]]",
                    "Iterable[float]",
                    "int"
                ],
                "output_patterns": [
                    "Iterable[Iterable[float]]",
                    "Iterable[float]",
                    "int"
                ]
            }
        },
        "batch": {
            "name": "batch",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "network": [
                    "leabra7.Net",
                    "int",
                    "Iterable[Iterable[float]]",
                    "float",
                    "str"
                ],
                "input_patterns": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "leabra7.Net",
                    "Union[str, float]"
                ],
                "output_patterns": [
                    "Iterable[Iterable[float]]",
                    "int",
                    "leabra7.Net",
                    "Union[str, float]"
                ]
            }
        },
        "output": {
            "name": "output",
            "location": 38,
            "return": [
                "List[str]",
                "Optional[List[str]]",
                "Union[List, Tuple]",
                "List[float]",
                "list"
            ],
            "arguments": {
                "network": [
                    "str",
                    "Optional[Tuple[str, int]]",
                    "Iterable[int]",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Iterable[str]"
                ],
                "pattern": [
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "test_a_simple_network_can_learn_simple_things": {
            "name": "test_a_simple_network_can_learn_simple_things",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
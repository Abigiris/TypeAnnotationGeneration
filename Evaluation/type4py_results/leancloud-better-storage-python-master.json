{
    "leancloud-better-storage-python-master/setup.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/__init__.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/cursor.py": {
        "Cursor.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "model": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "Cursor.lc_cursor": {
            "name": "lc_cursor",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursor.__iter__": {
            "name": "__iter__",
            "location": 11,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursor.__next__": {
            "name": "__next__",
            "location": 14,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/err.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/meta.py": {
        "ModelMetaInfo.fields": {
            "name": "fields",
            "location": 10,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMetaInfo.inherit_fields": {
            "name": "inherit_fields",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMetaInfo.required_fields": {
            "name": "required_fields",
            "location": 18,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMetaInfo.attributes_default": {
            "name": "attributes_default",
            "location": 22,
            "return": [
                "list",
                "Dict[str, Dict[str, int]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMetaInfo.leancloud_class": {
            "name": "leancloud_class",
            "location": 26,
            "return": [
                "Callable[..., T]",
                "str",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelMetaInfo.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "leancloud_class": [
                    "bool",
                    "Union[int, float]",
                    "Optional[int]",
                    "list"
                ],
                "fields": [
                    "type",
                    "bool",
                    "Mapping[Any, Any]",
                    "str",
                    "int"
                ],
                "inherit_fields": [
                    "bool",
                    "int",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "required_fields": [
                    "bool",
                    "int",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "attributes_default": [
                    "bool",
                    "int",
                    "Tuple[int, int, int]",
                    "str"
                ]
            }
        },
        "ModelMeta.__new__": {
            "name": "__new__",
            "location": 45,
            "return": [
                "Tuple[int, int]",
                "str",
                "T"
            ],
            "arguments": {
                "mcs": [
                    "str"
                ],
                "name": [],
                "bases": [
                    "str"
                ],
                "attr": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/models.py": {
        "Model.register_pre_create_hook": {
            "name": "register_pre_create_hook",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [],
                "fn": []
            }
        },
        "Model.register_pre_update_hook": {
            "name": "register_pre_update_hook",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": [],
                "fn": []
            }
        },
        "Model.register_pre_delete_hook": {
            "name": "register_pre_delete_hook",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [],
                "fn": []
            }
        },
        "Model._do_life_cycle_hook": {
            "name": "_do_life_cycle_hook",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "life_cycle": []
            }
        },
        "Model.lc_object": {
            "name": "lc_object",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "lc_obj": []
            }
        },
        "Model.create": {
            "name": "create",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.commit": {
            "name": "commit",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "where": [],
                "fetch_when_save": []
            }
        },
        "Model.commit_all": {
            "name": "commit_all",
            "location": 139,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.drop": {
            "name": "drop",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.drop_all": {
            "name": "drop_all",
            "location": 169,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.query": {
            "name": "query",
            "location": 188,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/objectid.py": {
        "ObjectId.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "str"
                ],
                "model_cls": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ObjectId.id": {
            "name": "id",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectId.lc_object": {
            "name": "lc_object",
            "location": 18,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectId.fetch": {
            "name": "fetch",
            "location": 21,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectId.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [
                "bool",
                "Tuple[str]",
                "Union[int, float, complex]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ObjectId.__ne__": {
            "name": "__ne__",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/order.py": {
        "OrderBy.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "bool",
                    "Sequence[int]"
                ],
                "field": [
                    "int",
                    "str",
                    "AbstractSet[str]",
                    "Container[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "OrderBy.order": {
            "name": "order",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderBy.field": {
            "name": "field",
            "location": 20,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/pages.py": {
        "Pages.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "Union[Callable, str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "page": [
                    "bool",
                    "Union[Callable, str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "size": [
                    "bool",
                    "Union[Callable, str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "Pages.element_offset": {
            "name": "element_offset",
            "location": 25,
            "return": [
                "int",
                "float",
                "bytes",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pages.items": {
            "name": "items",
            "location": 30,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pages.total_pages": {
            "name": "total_pages",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pages.__iter__": {
            "name": "__iter__",
            "location": 42,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pages.__next__": {
            "name": "__next__",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/query.py": {
        "Condition.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "operand_left": [],
                "operator": [],
                "operand_right": []
            }
        },
        "Condition.operand_left": {
            "name": "operand_left",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Condition.operand_right": {
            "name": "operand_right",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Condition.operator": {
            "name": "operator",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Condition.apply": {
            "name": "apply",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "query": []
            }
        },
        "Query.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "Query._merge_conditions": {
            "name": "_merge_conditions",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query._logical_fn": {
            "name": "_logical_fn",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.filter": {
            "name": "filter",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.filter_by": {
            "name": "filter_by",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.and_": {
            "name": "and_",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.or_": {
            "name": "or_",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.includes": {
            "name": "includes",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.skip": {
            "name": "skip",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Query.limit": {
            "name": "limit",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Query.order_by": {
            "name": "order_by",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.build_query": {
            "name": "build_query",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.leancloud_query": {
            "name": "leancloud_query",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.find": {
            "name": "find",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "skip": [],
                "limit": []
            }
        },
        "Query.scan": {
            "name": "scan",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "scan_key": []
            }
        },
        "Query.first": {
            "name": "first",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.count": {
            "name": "count",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Query.paginate": {
            "name": "paginate",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "page": [],
                "size": []
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/_util.py": {
        "cache_result": {
            "name": "cache_result",
            "location": 27,
            "return": [],
            "arguments": {
                "cache_location": []
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 65,
            "return": [],
            "arguments": {
                "additional_message": []
            }
        },
        "ThreadSafeDict.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "from_dictionary": []
            }
        },
        "ThreadSafeDict.__setitem__": {
            "name": "__setitem__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "item": []
            }
        },
        "ThreadSafeDict.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "cache_result.wrapper": {
            "name": "wrapper",
            "location": 42,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "deprecated.wrapper": {
            "name": "wrapper",
            "location": 68,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "cache_result.wrapper.wrapped": {
            "name": "wrapped",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "deprecated.wrapper.wrapped": {
            "name": "wrapped",
            "location": 70,
            "return": [],
            "arguments": {}
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/__init__.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/any_field.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/array_field.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/boolean_field.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/datetime_field.py": {
        "DateTimeField.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[bool]",
                    "str",
                    "Optional[Any]"
                ],
                "nullable": [
                    "Optional[bool]",
                    "str",
                    "Optional[Any]"
                ],
                "default": [
                    "Optional[bool]",
                    "str",
                    "Optional[Any]"
                ],
                "auto_now": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple[int, int, int]"
                ],
                "auto_now_add": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple[int, int, int]"
                ],
                "now_fn": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "DateTimeField._after_model_created": {
            "name": "_after_model_created",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "DateTimeField._after_model_created.hook_fn": {
            "name": "hook_fn",
            "location": 19,
            "return": [
                "str",
                "T",
                "int",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "i": [
                    "str",
                    "Iterable[int]",
                    "Tuple[str]",
                    "datetime.datetime",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/defaults.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/field.py": {
        "Field.field_name": {
            "name": "field_name",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.attr_name": {
            "name": "attr_name",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Field.nullable": {
            "name": "nullable",
            "location": 26,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.field_type": {
            "name": "field_type",
            "location": 31,
            "return": [
                "Tuple[Type]",
                "List[str]",
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.model": {
            "name": "model",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.default": {
            "name": "default",
            "location": 39,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.desc": {
            "name": "desc",
            "location": 43,
            "return": [
                "str",
                "Iterable[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.asc": {
            "name": "asc",
            "location": 47,
            "return": [
                "str",
                "Iterable[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Callable"
                ],
                "nullable": [
                    "int",
                    "Sequence",
                    "bool",
                    "str"
                ],
                "default": [
                    "Optional[Tuple[float, float, float]]",
                    "bool",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Field.__eq__": {
            "name": "__eq__",
            "location": 57,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int]"
                ]
            }
        },
        "Field.__ne__": {
            "name": "__ne__",
            "location": 60,
            "return": [
                "float",
                "Dict[str, Any]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int]"
                ]
            }
        },
        "Field.__lt__": {
            "name": "__lt__",
            "location": 63,
            "return": [
                "float",
                "Dict[str, Any]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int]"
                ]
            }
        },
        "Field.__le__": {
            "name": "__le__",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[List[T]]",
                    "bool"
                ]
            }
        },
        "Field.__ge__": {
            "name": "__ge__",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[List[T]]",
                    "bool"
                ]
            }
        },
        "Field.__gt__": {
            "name": "__gt__",
            "location": 72,
            "return": [
                "float",
                "Dict[str, Any]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int]"
                ]
            }
        },
        "Field.in_": {
            "name": "in_",
            "location": 75,
            "return": [
                "str",
                "bool",
                "Sequence[Union[str, Any]]",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "Field.__get__": {
            "name": "__get__",
            "location": 78,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "Field.__set__": {
            "name": "__set__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bytes",
                    "Dict[str, float]",
                    "str",
                    "bool",
                    "float",
                    "int"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Field._after_model_created": {
            "name": "_after_model_created",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Field.contains": {
            "name": "contains",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sub": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Field.regex": {
            "name": "regex",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Field.startswith": {
            "name": "startswith",
            "location": 105,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "list",
                    "dict",
                    "List[int]"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/file_field.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/geo_point_field.py": {
        "GeoPointField.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "nullable": [],
                "default": []
            }
        },
        "GeoPointField.near": {
            "name": "near",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "geo_point": []
            }
        },
        "GeoPointField.within_kilometers": {
            "name": "within_kilometers",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "geo_point": [],
                "kilometers": []
            }
        },
        "GeoPointField.__set__": {
            "name": "__set__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/meta.py": {
        "MetaField.__new__": {
            "name": "__new__",
            "location": 3,
            "return": [
                "Tuple[int, int]",
                "str",
                "T"
            ],
            "arguments": {
                "mcs": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "str"
                ],
                "attributes": [
                    "str"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/number_field.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/object_field.py": {},
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/ref_field.py": {
        "RefField.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "nullable": [
                    "str"
                ],
                "default": [
                    "str"
                ],
                "ref_cls": [
                    "bool",
                    "str",
                    "Sequence",
                    "int",
                    "Optional[int]"
                ],
                "lazy": [
                    "bool",
                    "str",
                    "Sequence",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "RefField.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [
                "List['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RefField.__ne__": {
            "name": "__ne__",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RefField.__lt__": {
            "name": "__lt__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "RefField.__gt__": {
            "name": "__gt__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "RefField.__get__": {
            "name": "__get__",
            "location": 34,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "zerver.models.Realm",
                    "int",
                    "Optional[\"permissions_doc\"]",
                    "grouper.models.base.session.Session"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "RefField.__set__": {
            "name": "__set__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Dict[str, Any]",
                    "peewee.Model"
                ],
                "value": [
                    "Union[type, Tuple[type, ...]]",
                    "Optional[List]",
                    "Dict[str, Union[str, Any]]",
                    "Iterable",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "RefField.ref_cls": {
            "name": "ref_cls",
            "location": 64,
            "return": [
                "bool",
                "zam_repondeur.models.Lecture",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/string_field.py": {
        "StringField.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "nullable": [
                    "str",
                    "float"
                ],
                "default": [
                    "str",
                    "float"
                ],
                "max_length": [
                    "Union[float, int]",
                    "int",
                    "float"
                ]
            }
        },
        "StringField.__set__": {
            "name": "__set__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "list",
                    "dict"
                ],
                "value": [
                    "Dict[str, Dict[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Dict[int, str]",
                    "List[str]",
                    "List[int]",
                    "Tuple[str, str]"
                ]
            }
        },
        "StringField.contains": {
            "name": "contains",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sub": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StringField.regex": {
            "name": "regex",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StringField.startswith": {
            "name": "startswith",
            "location": 23,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "list",
                    "dict",
                    "List[int]"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/leancloud_better_storage/storage/fields/__init__.py": {},
    "leancloud-better-storage-python-master/tests/conftest.py": {
        "leancloud_init": {
            "name": "leancloud_init",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock": {
            "name": "mock",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock.clear": {
            "name": "clear",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Type[T]",
                    "Type",
                    "str"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/tests/__init__.py": {},
    "leancloud-better-storage-python-master/tests/__main__.py": {},
    "leancloud-better-storage-python-master/tests/test_fields/test_access.py": {
        "TestAccess.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccess.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccess.test_simple_access": {
            "name": "test_simple_access",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccess.test_inherit_field_access": {
            "name": "test_inherit_field_access",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccess.test_multi_inherit_overwrite_field": {
            "name": "test_multi_inherit_overwrite_field",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccess.test_commit_change": {
            "name": "test_commit_change",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_fields/test_datetime_field.py": {
        "TestDateTimeField.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateTimeField.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateTimeField.test_auto_fill_created_at": {
            "name": "test_auto_fill_created_at",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateTimeField.test_auto_now_add": {
            "name": "test_auto_now_add",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateTimeField.test_auto_now": {
            "name": "test_auto_now",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_fields/test_ref_field.py": {
        "model_cls": {
            "name": "model_cls",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_initialize_ref_field": {
            "name": "test_initialize_ref_field",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str"
                ]
            }
        },
        "test_assign_ref_field": {
            "name": "test_assign_ref_field",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str",
                    "salon.models.Stylist",
                    "bool"
                ]
            }
        },
        "test_get_null_ref_field": {
            "name": "test_get_null_ref_field",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str",
                    "bytes",
                    "Union[str, int]"
                ]
            }
        },
        "test_get_included_ref_field": {
            "name": "test_get_included_ref_field",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str",
                    "salon.models.Stylist"
                ]
            }
        },
        "test_get_not_included_ref_field": {
            "name": "test_get_not_included_ref_field",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str",
                    "excars.models.user.User"
                ]
            }
        },
        "test_get_not_included_lazy_load_ref_field": {
            "name": "test_get_not_included_lazy_load_ref_field",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str",
                    "Optional[zerver.models.Realm]"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_fields/test_string_field.py": {
        "model_cls": {
            "name": "model_cls",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_break_maximum_when_assign": {
            "name": "test_break_maximum_when_assign",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "int",
                    "Callable[[T], bool]",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ]
            }
        },
        "test_break_maximum_when_create": {
            "name": "test_break_maximum_when_create",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str",
                    "bool",
                    "paradigm.models.Plain",
                    "float"
                ]
            }
        },
        "test_contains": {
            "name": "test_contains",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str",
                    "Dict[str, Any]",
                    "fastapi.dependencies.models.Dependant"
                ]
            }
        },
        "test_startswith": {
            "name": "test_startswith",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str",
                    "Dict[str, Any]",
                    "fastapi.dependencies.models.Dependant"
                ]
            }
        },
        "test_regex": {
            "name": "test_regex",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "model_cls": [
                    "str",
                    "Dict[str, Any]",
                    "fastapi.dependencies.models.Dependant"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_fields/__init__.py": {},
    "leancloud-better-storage-python-master/tests/test_model/test_declaration.py": {
        "TestDeclaration.test_declare_model": {
            "name": "test_declare_model",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeclaration.test_declare_inherit_model": {
            "name": "test_declare_inherit_model",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeclaration.test_declare_multiple_inherit_model": {
            "name": "test_declare_multiple_inherit_model",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_model/test_drop.py": {
        "TestDrop.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrop.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrop.test_drop_without_exception": {
            "name": "test_drop_without_exception",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrop.test_drop_all_without_exception": {
            "name": "test_drop_all_without_exception",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_model/test_instantiate.py": {
        "TestInstantiate.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.tearDown": {
            "name": "tearDown",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_simple_create": {
            "name": "test_simple_create",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_create_miss_required": {
            "name": "test_create_miss_required",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_create_unknown_field": {
            "name": "test_create_unknown_field",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_simple_create_inherit": {
            "name": "test_simple_create_inherit",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_simple_commit": {
            "name": "test_simple_commit",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_bulk_commit": {
            "name": "test_bulk_commit",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_create_with_default": {
            "name": "test_create_with_default",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_create_with_default_initializer": {
            "name": "test_create_with_default_initializer",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_create_named_field_with_default": {
            "name": "test_create_named_field_with_default",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstantiate.test_initialize_field_with_undefined": {
            "name": "test_initialize_field_with_undefined",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_model/test_life_cycle.py": {
        "TestLifeCycleHook.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLifeCycleHook.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLifeCycleHook.test_created_hook": {
            "name": "test_created_hook",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLifeCycleHook.test_updated_hook": {
            "name": "test_updated_hook",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLifeCycleHook.test_deleted_hook": {
            "name": "test_deleted_hook",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLifeCycleHook.test_declared_callback": {
            "name": "test_declared_callback",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLifeCycleHook.test_inherit_created_hook": {
            "name": "test_inherit_created_hook",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLifeCycleHook.test_inherit_updated_hook": {
            "name": "test_inherit_updated_hook",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLifeCycleHook.test_inherit_deleted_hook": {
            "name": "test_inherit_deleted_hook",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLifeCycleHook.test_created_hook.fn": {
            "name": "fn",
            "location": 25,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "TestLifeCycleHook.test_updated_hook.fn": {
            "name": "fn",
            "location": 41,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "TestLifeCycleHook.test_deleted_hook.fn": {
            "name": "fn",
            "location": 58,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "TestLifeCycleHook.test_inherit_created_hook.fn": {
            "name": "fn",
            "location": 88,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "TestLifeCycleHook.test_inherit_updated_hook.fn": {
            "name": "fn",
            "location": 107,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "TestLifeCycleHook.test_inherit_deleted_hook.fn": {
            "name": "fn",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "instance": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestLifeCycleHook.test_declared_callback.CustomField._after_model_created": {
            "name": "_after_model_created",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "lms.lmsdb.models.Comment",
                    "Optional[List[str]]",
                    "Type[django.db.models.Model]"
                ],
                "name": [
                    "str",
                    "lms.lmsdb.models.Comment",
                    "Optional[List[str]]",
                    "Type[django.db.models.Model]"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_model/__init__.py": {},
    "leancloud-better-storage-python-master/tests/test_query/test_cursor.py": {
        "fill_table": {
            "name": "fill_table",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan": {
            "name": "test_scan",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "fill_table": [
                    "Callable[..., None]",
                    "bool"
                ]
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_query/test_pages.py": {
        "TestModelQuery.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelQuery.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelQuery.test_one_page": {
            "name": "test_one_page",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelQuery.test_ten_pages": {
            "name": "test_ten_pages",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelQuery.test_total_pages": {
            "name": "test_total_pages",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_query/test_query.py": {
        "TestQuery.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.tearDown": {
            "name": "tearDown",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_by_equation": {
            "name": "test_query_by_equation",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_by_less_than": {
            "name": "test_query_by_less_than",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_by_less_than_or_equal_to": {
            "name": "test_query_by_less_than_or_equal_to",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_by_greater_than": {
            "name": "test_query_by_greater_than",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_by_greater_than_or_equal_to": {
            "name": "test_query_by_greater_than_or_equal_to",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_by_less_and_greater": {
            "name": "test_query_by_less_and_greater",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_by_less_or_greater": {
            "name": "test_query_by_less_or_greater",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_by_not_equal": {
            "name": "test_query_by_not_equal",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_single_field_multi_condition": {
            "name": "test_query_single_field_multi_condition",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_by_contains": {
            "name": "test_query_by_contains",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_no_conditions": {
            "name": "test_no_conditions",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_count": {
            "name": "test_count",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_sort_result_order_by_ascending": {
            "name": "test_sort_result_order_by_ascending",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_sort_result_order_by_descending": {
            "name": "test_sort_result_order_by_descending",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_condition_in": {
            "name": "test_condition_in",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_startswith_condition": {
            "name": "test_startswith_condition",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_regex_condition": {
            "name": "test_regex_condition",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_with_includes": {
            "name": "test_query_with_includes",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_unknown_field": {
            "name": "test_query_unknown_field",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_count_unknown_collection": {
            "name": "test_query_count_unknown_collection",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_find_unknown_collection": {
            "name": "test_query_find_unknown_collection",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_invalid_connected_logical_ops": {
            "name": "test_invalid_connected_logical_ops",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_get_leancloud_query": {
            "name": "test_get_leancloud_query",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_limit": {
            "name": "test_query_limit",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuery.test_query_skip": {
            "name": "test_query_skip",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_query/__init__.py": {},
    "leancloud-better-storage-python-master/tests/test_util/test_cache_result.py": {
        "test_cache_result": {
            "name": "test_cache_result",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cache_result.gen": {
            "name": "gen",
            "location": 7,
            "return": [
                "float",
                "int"
            ],
            "arguments": {}
        },
        "test_cache_result.fn": {
            "name": "fn",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_cache_result.SomeCls.fn": {
            "name": "fn",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "leancloud-better-storage-python-master/tests/test_util/__init__.py": {}
}
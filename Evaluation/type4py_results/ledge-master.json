{
    "ledge-master/setup.py": {},
    "ledge-master/ledge/datatypes.py": {},
    "ledge-master/ledge/fill.py": {
        "window_linear": {
            "name": "window_linear",
            "location": 14,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Optional[Sequence[int]]",
                    "FrozenSet[int]"
                ],
                "alpha": [
                    "int",
                    "Optional[Sequence[int]]",
                    "FrozenSet[int]"
                ]
            }
        },
        "window_geometric": {
            "name": "window_geometric",
            "location": 23,
            "return": [
                "numpy.ndarray",
                "Dict[str, Any]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "gamma": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "window_uniform": {
            "name": "window_uniform",
            "location": 31,
            "return": [
                "str",
                "bool",
                "Union[List, Dict]",
                "bytes",
                "float"
            ],
            "arguments": {
                "size": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "lookback": {
            "name": "lookback",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "window_size": [
                    "bool",
                    "List[str]",
                    "int",
                    "tuple"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "window_fn": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "List[Dict]"
                ]
            }
        },
        "diff_window": {
            "name": "diff_window",
            "location": 69,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "eth_keys.datatypes.PrivateKey",
                "bytes"
            ],
            "arguments": {
                "series_list": [
                    "int",
                    "Iterable[str]",
                    "Union[str, List[str]]",
                    "List[List[Any]]",
                    "numpy.ndarray",
                    "List[Dict[Any, str]]",
                    "List[TextIO]"
                ],
                "window_fn": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "Union[Sequence[int], Sequence[dict]]"
                ],
                "inc": [
                    "int",
                    "bool",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "diff_geometric": {
            "name": "diff_geometric",
            "location": 99,
            "return": [
                "bytes",
                "bool"
            ],
            "arguments": {
                "series_list": [
                    "Iterable[Iterable[str]]",
                    "list",
                    "List[dict]",
                    "List[Dict[str, Any]]"
                ],
                "gamma": [
                    "int",
                    "numpy.ndarray",
                    "List[List[T]]",
                    "float"
                ],
                "inc": [
                    "Iterable[Iterable[str]]",
                    "list",
                    "List[dict]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "lookback.lookback_dec": {
            "name": "lookback_dec",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "window_fn": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "List[Dict]"
                ]
            }
        },
        "normalize._wrapper": {
            "name": "_wrapper",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "lookback.lookback_dec._wrapper": {
            "name": "_wrapper",
            "location": 45,
            "return": [],
            "arguments": {
                "size": []
            }
        }
    },
    "ledge-master/ledge/merge.py": {
        "_get_right_envelope": {
            "name": "_get_right_envelope",
            "location": 15,
            "return": [
                "int",
                "str",
                "myaku.datatypes.JpnArticle"
            ],
            "arguments": {
                "ds": [
                    "int",
                    "Type[object]",
                    "Mapping",
                    "MutableMapping",
                    "str",
                    "bool"
                ]
            }
        },
        "_merge_lags": {
            "name": "_merge_lags",
            "location": 27,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "series_list": [
                    "float",
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "latest": {
            "name": "latest",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "series_list": [
                    "list",
                    "numpy.ndarray",
                    "Callable",
                    "List[List[T]]"
                ],
                "sort_fn": [
                    "list",
                    "numpy.ndarray",
                    "Callable",
                    "List[List[T]]"
                ]
            }
        }
    },
    "ledge-master/ledge/update.py": {
        "noop": {
            "name": "noop",
            "location": 15,
            "return": [
                "numpy.ndarray",
                "int",
                "Optional[int]",
                "Tuple[Tuple[int, Any]]",
                "List[int]"
            ],
            "arguments": {
                "losses": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ],
                "init_weights": [
                    "str",
                    "bool",
                    "list",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[List[Callable]]"
                ]
            }
        },
        "create_mixer": {
            "name": "create_mixer",
            "location": 26,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "update_fns": [
                    "numpy.ndarray",
                    "List[Callable]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "mixing_weights": [
                    "numpy.ndarray",
                    "List[Callable]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "pick": {
            "name": "pick",
            "location": 44,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "losses": [
                    "str",
                    "List[str]",
                    "raiden.utils.signer.Signer",
                    "Dict[str, Any]"
                ],
                "index": [
                    "str",
                    "int",
                    "float",
                    "Callable",
                    "Optional[numpy.ndarray]",
                    "Union[astropy.units.quantity.Quantity, numpy.ndarray]"
                ],
                "init_weights": [
                    "Iterable[Any]",
                    "bool",
                    "Callable",
                    "Union[str, bool, None]",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "ftl": {
            "name": "ftl",
            "location": 55,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "losses": [
                    "str",
                    "bool"
                ],
                "k": [
                    "str",
                    "int",
                    "float",
                    "Callable[[T], None]"
                ],
                "lookback": [
                    "Optional[float]",
                    "Optional[str]",
                    "int",
                    "Optional[Tuple[float, float]]",
                    "float"
                ],
                "init_weights": [
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool",
                    "int"
                ]
            }
        },
        "ftpl": {
            "name": "ftpl",
            "location": 73,
            "return": [
                "ledge.datatypes.Weight"
            ],
            "arguments": {
                "losses": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "fixed_share": {
            "name": "fixed_share",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "losses": [
                    "List[int]",
                    "list",
                    "numpy.ndarray",
                    "str",
                    "int",
                    "bool"
                ],
                "eta": [
                    "Optional[Union[str, Any]]",
                    "Dict[str, T]",
                    "int",
                    "List[int]"
                ],
                "alpha": [
                    "float",
                    "numpy.ndarray"
                ],
                "init_weights": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "variable_share": {
            "name": "variable_share",
            "location": 101,
            "return": [
                "ledge.datatypes.Weight"
            ],
            "arguments": {
                "losses": [
                    "List[ledge.datatypes.Loss]",
                    "bool",
                    "dict",
                    "Iterable[\"DefTypeMember\"]"
                ]
            }
        },
        "mw": {
            "name": "mw",
            "location": 108,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "losses": [
                    "Dict[str, Any]",
                    "bytes",
                    "Mapping[str, Any]",
                    "int",
                    "list"
                ],
                "eta": [
                    "str",
                    "int",
                    "float",
                    "Callable",
                    "Optional[numpy.ndarray]",
                    "Union[astropy.units.quantity.Quantity, numpy.ndarray]"
                ],
                "init_weights": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "hedge": {
            "name": "hedge",
            "location": 122,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "losses": [
                    "Dict[str, Any]",
                    "bytes",
                    "Mapping[str, Any]",
                    "int",
                    "list"
                ],
                "eta": [
                    "str",
                    "int",
                    "float",
                    "Callable",
                    "Optional[numpy.ndarray]",
                    "Union[astropy.units.quantity.Quantity, numpy.ndarray]"
                ],
                "init_weights": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "create_mixer._mix_update": {
            "name": "_mix_update",
            "location": 31,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "losses": [
                    "List[ledge.datatypes.Loss]",
                    "numpy.ndarray",
                    "list",
                    "str",
                    "int",
                    "dict"
                ],
                "init_weights": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Callable[[Mapping], Awaitable]",
                    "Callable[[], Awaitable[Mapping]]",
                    "Callable"
                ]
            }
        }
    },
    "ledge-master/ledge/utils.py": {
        "get_lag": {
            "name": "get_lag",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "series": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "uniform_weights": {
            "name": "uniform_weights",
            "location": 23,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "models": [
                    "int",
                    "numpy.ndarray"
                ],
                "ones": [
                    "numpy.array",
                    "numpy.ndarray",
                    "str"
                ]
            }
        }
    },
    "ledge-master/ledge/viz.py": {
        "c_profile": {
            "name": "c_profile",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "ax": [
                    "str",
                    "bytes"
                ],
                "losses": [
                    "Set[str]",
                    "bool",
                    "Tuple['cirq.Qid']",
                    "Hashable"
                ],
                "xlabel": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "ylabel": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "title": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "ledge-master/ledge/__about__.py": {},
    "ledge-master/ledge/__init__.py": {},
    "ledge-master/tests/test_fill.py": {
        "test_diff_mean_noninc": {
            "name": "test_diff_mean_noninc",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diff_mean_inc": {
            "name": "test_diff_mean_inc",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diff_linear_noninc": {
            "name": "test_diff_linear_noninc",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diff_linear_inc": {
            "name": "test_diff_linear_inc",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ledge-master/tests/test_merge.py": {
        "test_latest": {
            "name": "test_latest",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_earliest": {
            "name": "test_earliest",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ledge-master/tests/test_update.py": {
        "test_mixer": {
            "name": "test_mixer",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ledge-master/tests/utils.py": {
        "make_series": {
            "name": "make_series",
            "location": 8,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "values": [
                    "T",
                    "bool",
                    "Sequence[Any]",
                    "str"
                ],
                "timepoints": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ],
                "lag": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "List[int]"
                ],
                "extra_attrs": [
                    "Optional[dict]",
                    "Union[None, int, float]",
                    "T",
                    "Optional[Union[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "make_weights": {
            "name": "make_weights",
            "location": 22,
            "return": [
                "List[List[int]]",
                "int",
                "dict"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ],
                "models": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    }
}
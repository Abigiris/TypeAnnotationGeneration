{
    "lexicorm-master/setup.py": {},
    "lexicorm-master/lexicorm/conversion.py": {
        "python_dict_to_json_dict": {
            "name": "python_dict_to_json_dict",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "input": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, type.JSONType]",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, float]",
                    "float"
                ]
            }
        },
        "json_dict_to_python_dict": {
            "name": "json_dict_to_python_dict",
            "location": 16,
            "return": [
                "Dict[str, Any]",
                "Union[None, bool]",
                "str",
                "Dict[str, Type[Any]]",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "input": [
                    "Mapping[str, type.JSONType]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "lexicorm-master/lexicorm/model_to_dict.py": {
        "model_to_dict": {
            "name": "model_to_dict",
            "location": 9,
            "return": [
                "dict",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "sqlalchemy_model": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ],
                "get_lazy": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ],
                "return_immediately": [
                    "bool",
                    "str"
                ]
            }
        },
        "_model_to_dict": {
            "name": "_model_to_dict",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "sqlalchemy.orm.state.InstanceState",
                    "str",
                    "bool",
                    "dict",
                    "MutableMapping[str, Any]"
                ],
                "lazy_keys": [
                    "List[str]",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "List[object]",
                    "str",
                    "list"
                ],
                "get_lazy": [
                    "List[str]",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "List[object]",
                    "str",
                    "list"
                ]
            }
        },
        "_get_eager_relationships": {
            "name": "_get_eager_relationships",
            "location": 66,
            "return": [
                "int",
                "float",
                "str",
                "List[Dict[str, str]]",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "sqlalchemy.orm.state.InstanceState",
                    "int",
                    "List[recidiviz.persistence.entity.state.entities.StateAssessment]"
                ]
            }
        },
        "_get_lazy_relationships": {
            "name": "_get_lazy_relationships",
            "location": 76,
            "return": [
                "int",
                "float",
                "str",
                "List[Dict[str, str]]",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "sqlalchemy.orm.state.InstanceState",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_convert_model_list_to_dicts": {
            "name": "_convert_model_list_to_dicts",
            "location": 86,
            "return": [
                "bool",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "model_list": [
                    "Dict[str, Any]",
                    "Iterable['Event']",
                    "dict",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "_hydrate_eager_relationships": {
            "name": "_hydrate_eager_relationships",
            "location": 92,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "sqlalchemy.orm.state.InstanceState",
                    "List[str]",
                    "str",
                    "float"
                ],
                "eager_relationships": [
                    "List[str]",
                    "str",
                    "Dict[str, List[Any]]",
                    "Exception",
                    "dict"
                ]
            }
        },
        "_hydrate_lazy_relationships": {
            "name": "_hydrate_lazy_relationships",
            "location": 104,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "sqlalchemy.orm.state.InstanceState",
                    "Type[T]",
                    "bytes"
                ],
                "lazy_relationships": [
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "lexicorm-master/lexicorm/type.py": {},
    "lexicorm-master/lexicorm/__init__.py": {},
    "lexicorm-master/test/fixtures.py": {
        "create_tables": {
            "name": "create_tables",
            "location": 36,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "get_fixtures": {
            "name": "get_fixtures",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_fixtures_with_relationship": {
            "name": "get_fixtures_with_relationship",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "lexicorm-master/test/__init__.py": {},
    "lexicorm-master/test/e2e/steps/steps.py": {
        "no_model": {
            "name": "no_model",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ]
            }
        },
        "model_dict_on_model": {
            "name": "model_dict_on_model",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "type",
                    "dict"
                ],
                "model_name": [
                    "str",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "empty_dict": {
            "name": "empty_dict",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "behave.runner.Context",
                    "Optional[str]"
                ]
            }
        },
        "musician": {
            "name": "musician",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_dictionary_with_key": {
            "name": "get_dictionary_with_key",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict",
                    "bool",
                    "bytes",
                    "Dict[Any, list]"
                ],
                "key": [
                    "str",
                    "dict",
                    "bool",
                    "bytes",
                    "Dict[Any, list]"
                ],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "bytes",
                    "Dict[Any, list]"
                ]
            }
        },
        "have_musician": {
            "name": "have_musician",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "behave.runner.Context"
                ]
            }
        },
        "get_dictionary": {
            "name": "get_dictionary",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "key": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "test_type": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "find_dict": {
            "name": "find_dict",
            "location": 66,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ],
                "object_name": [
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ],
                "key": [
                    "dict",
                    "bytes",
                    "bool",
                    "str"
                ],
                "value": [
                    "Optional[str]",
                    "dict",
                    "Optional[Dict[str, dict]]",
                    "str"
                ]
            }
        },
        "step_impl": {
            "name": "step_impl",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "object_name": [
                    "str",
                    "Iterable[Tuple[int, int]]"
                ],
                "key": [
                    "str",
                    "list",
                    "List[str]",
                    "bool",
                    "dict"
                ],
                "value": [
                    "str",
                    "list",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "lexicorm-master/test/unit/test_conversion.py": {
        "test_python_dict_to_json_dict": {
            "name": "test_python_dict_to_json_dict",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_dict_to_python_dict": {
            "name": "test_json_dict_to_python_dict",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lexicorm-master/test/unit/__init__.py": {}
}
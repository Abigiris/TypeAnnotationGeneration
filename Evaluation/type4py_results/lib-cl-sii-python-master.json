{
    "lib-cl-sii-python-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 9,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "List[\"libkol.Item\"]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "lib-cl-sii-python-master/cl_sii/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/base/constants.py": {},
    "lib-cl-sii-python-master/cl_sii/base/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/contribuyente/constants.py": {},
    "lib-cl-sii-python-master/cl_sii/contribuyente/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/cte/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/cte/f29/data_models.py": {
        "validate_field_type": {
            "name": "validate_field_type",
            "location": 316,
            "return": [],
            "arguments": {
                "obj": [],
                "field_name": [],
                "valid_types": []
            }
        },
        "CteForm29.__post_init__": {
            "name": "__post_init__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CteForm29.get_field_name": {
            "name": "get_field_name",
            "location": 234,
            "return": [],
            "arguments": {
                "cls": [],
                "code": [],
                "strict": []
            }
        },
        "CteForm29.natural_key": {
            "name": "natural_key",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CteForm29.get_all_codes": {
            "name": "get_all_codes",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "strict": []
            }
        },
        "CteForm29.as_codes_dict": {
            "name": "as_codes_dict",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "include_none": [],
                "strict": []
            }
        },
        "CteForm29.__getitem__": {
            "name": "__getitem__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CteForm29.__iter__": {
            "name": "__iter__",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/cte/f29/parse_datos_obj.py": {
        "parse_sii_cte_f29_datos_obj": {
            "name": "parse_sii_cte_f29_datos_obj",
            "location": 27,
            "return": [
                "int",
                "Iterable[Iterable[T]]",
                "pathlib.Path",
                "float"
            ],
            "arguments": {
                "datos_obj": [
                    "bytes",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "schema_validator": [
                    "Optional[int]"
                ],
                "campo_deserializer": [
                    "Optional[int]"
                ]
            }
        },
        "_parse_sii_cte_f29_datos_obj_to_dict": {
            "name": "_parse_sii_cte_f29_datos_obj_to_dict",
            "location": 56,
            "return": [
                "Dict[str, Any]",
                "Dict[str, float]",
                "Dict[str, bool]"
            ],
            "arguments": {
                "datos_obj": [],
                "schema_validator": [
                    "int",
                    "str",
                    "Union[int, float]"
                ],
                "campo_deserializer": [
                    "float",
                    "str",
                    "dict"
                ]
            }
        },
        "cte_f29_datos_obj_campo_default_deserializer": {
            "name": "cte_f29_datos_obj_campo_default_deserializer",
            "location": 110,
            "return": [
                "int",
                "List[int]",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "campo_value": [
                    "datetime.datetime",
                    "str"
                ],
                "tipo": [
                    "int",
                    "str"
                ]
            }
        },
        "cte_f29_datos_obj_campo_best_effort_deserializer": {
            "name": "cte_f29_datos_obj_campo_best_effort_deserializer",
            "location": 140,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "campo_value": [
                    "int",
                    "List[str]",
                    "dict",
                    "Union[int, Tuple[int, ...]]"
                ],
                "tipo": [
                    "int",
                    "Optional[float]",
                    "Union[int, Tuple[int, ...]]",
                    "float"
                ]
            }
        },
        "cte_f29_datos_schema_default_validator": {
            "name": "cte_f29_datos_schema_default_validator",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "datos_obj": [
                    "Optional[Any]",
                    "str"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/cte/f29/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/dte/constants.py": {
        "TipoDte.is_factura": {
            "name": "is_factura",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TipoDte.is_factura_venta": {
            "name": "is_factura_venta",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TipoDte.is_factura_compra": {
            "name": "is_factura_compra",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TipoDte.is_nota": {
            "name": "is_nota",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TipoDte.emisor_is_vendedor": {
            "name": "emisor_is_vendedor",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TipoDte.receptor_is_vendedor": {
            "name": "receptor_is_vendedor",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/dte/data_models.py": {
        "validate_dte_folio": {
            "name": "validate_dte_folio",
            "location": 33,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_dte_monto_total": {
            "name": "validate_dte_monto_total",
            "location": 45,
            "return": [],
            "arguments": {
                "value": [],
                "tipo_dte": []
            }
        },
        "validate_contribuyente_razon_social": {
            "name": "validate_contribuyente_razon_social",
            "location": 63,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_clean_str": {
            "name": "validate_clean_str",
            "location": 81,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_non_empty_str": {
            "name": "validate_non_empty_str",
            "location": 86,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_non_empty_bytes": {
            "name": "validate_non_empty_bytes",
            "location": 91,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "DteNaturalKey.as_dict": {
            "name": "as_dict",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteNaturalKey.slug": {
            "name": "slug",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteNaturalKey.validate_folio": {
            "name": "validate_folio",
            "location": 167,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteDataL0.natural_key": {
            "name": "natural_key",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL1.vendedor_rut": {
            "name": "vendedor_rut",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL1.comprador_rut": {
            "name": "comprador_rut",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL1.deudor_rut": {
            "name": "deudor_rut",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL1.validate_monto_total": {
            "name": "validate_monto_total",
            "location": 324,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "DteDataL2.as_dte_data_l1": {
            "name": "as_dte_data_l1",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2.validate_contribuyente_razon_social": {
            "name": "validate_contribuyente_razon_social",
            "location": 435,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteDataL2.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 441,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteDataL2.validate_non_empty_bytes": {
            "name": "validate_non_empty_bytes",
            "location": 447,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteDataL2.validate_no_leading_or_trailing_whitespace_characters": {
            "name": "validate_no_leading_or_trailing_whitespace_characters",
            "location": 453,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteDataL2.validate_non_empty_stripped_str": {
            "name": "validate_non_empty_stripped_str",
            "location": 459,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteXmlData.as_dte_data_l1": {
            "name": "as_dte_data_l1",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlData.as_dte_data_l2": {
            "name": "as_dte_data_l2",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlData.validate_contribuyente_razon_social": {
            "name": "validate_contribuyente_razon_social",
            "location": 586,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteXmlData.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 592,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteXmlData.validate_non_empty_bytes": {
            "name": "validate_non_empty_bytes",
            "location": 598,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteXmlData.validate_no_leading_or_trailing_whitespace_characters": {
            "name": "validate_no_leading_or_trailing_whitespace_characters",
            "location": 604,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "DteXmlData.validate_non_empty_stripped_str": {
            "name": "validate_non_empty_stripped_str",
            "location": 610,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/dte/parse.py": {
        "clean_dte_xml": {
            "name": "clean_dte_xml",
            "location": 72,
            "return": [],
            "arguments": {
                "xml_doc": [],
                "set_missing_xmlns": [],
                "remove_doc_personalizado": []
            }
        },
        "validate_dte_xml": {
            "name": "validate_dte_xml",
            "location": 104,
            "return": [],
            "arguments": {
                "xml_doc": []
            }
        },
        "parse_dte_xml": {
            "name": "parse_dte_xml",
            "location": 115,
            "return": [],
            "arguments": {
                "xml_doc": []
            }
        },
        "_text_strip_or_none": {
            "name": "_text_strip_or_none",
            "location": 508,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_text_strip_or_raise": {
            "name": "_text_strip_or_raise",
            "location": 524,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_set_dte_xml_missing_xmlns": {
            "name": "_set_dte_xml_missing_xmlns",
            "location": 546,
            "return": [],
            "arguments": {
                "xml_doc": []
            }
        },
        "_remove_dte_xml_doc_personalizado": {
            "name": "_remove_dte_xml_doc_personalizado",
            "location": 580,
            "return": [],
            "arguments": {
                "xml_doc": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/dte/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/extras/dj_form_fields.py": {
        "RutField.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutField.to_python": {
            "name": "to_python",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/extras/dj_model_fields.py": {
        "RutField.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutField.deconstruct": {
            "name": "deconstruct",
            "location": 67,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutField.get_internal_type": {
            "name": "get_internal_type",
            "location": 78,
            "return": [
                "Optional[Type]",
                "bool",
                "Set[str]",
                "Type[T]",
                "Dict[str, Type]",
                "type",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutField.from_db_value": {
            "name": "from_db_value",
            "location": 83,
            "return": [
                "float",
                "Dict[str, int]",
                "int",
                "Generator",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "dict",
                    "Type[Any]"
                ],
                "expression": [
                    "int",
                    "str",
                    "Optional[Type[BaseException]]",
                    "Optional[BaseException]"
                ],
                "connection": [
                    "int",
                    "str",
                    "Optional[Type[BaseException]]",
                    "Optional[BaseException]"
                ]
            }
        },
        "RutField.get_prep_value": {
            "name": "get_prep_value",
            "location": 108,
            "return": [
                "T",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[object]",
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[T]",
                    "float"
                ]
            }
        },
        "RutField.to_python": {
            "name": "to_python",
            "location": 126,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[object]",
                    "float",
                    "Optional[Union[str, Any]]",
                    "T",
                    "Union[None, str, Pattern[str]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "RutField.value_to_string": {
            "name": "value_to_string",
            "location": 157,
            "return": [
                "bool",
                "Optional[str]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Sequence[str]"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/extras/drf_fields.py": {
        "RutField.to_internal_value": {
            "name": "to_internal_value",
            "location": 46,
            "return": [
                "Dict[str, Any]",
                "str",
                "OrderedDict",
                "dict",
                "Type[object]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Iterable[str]",
                    "bytes",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        },
        "RutField.to_representation": {
            "name": "to_representation",
            "location": 69,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "cl_sii.ruRut",
                    "float",
                    "T",
                    "str"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/extras/mm_fields.py": {
        "RutField._serialize": {
            "name": "_serialize",
            "location": 51,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]",
                "List[str]",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "RutField._deserialize": {
            "name": "_deserialize",
            "location": 55,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "Union[int, float, str]",
                    "int",
                    "str"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "RutField._validated": {
            "name": "_validated",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[object]",
                    "Optional[str]",
                    "float",
                    "T",
                    "str",
                    "Optional[Union[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "TipoDteField._serialize": {
            "name": "_serialize",
            "location": 94,
            "return": [
                "int",
                "Dict[str, int]",
                "Optional[int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[object]",
                    "Union[None, str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "TipoDteField._deserialize": {
            "name": "_deserialize",
            "location": 98,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "Union[int, float, str]",
                    "int",
                    "str"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "TipoDteField._validated": {
            "name": "_validated",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "float",
                    "Optional[object]",
                    "bool",
                    "Union[type, Tuple[type, ...]]",
                    "Hashable"
                ]
            }
        },
        "RcvTipoDoctoField._serialize": {
            "name": "_serialize",
            "location": 147,
            "return": [
                "int",
                "Dict[str, int]",
                "Optional[int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[object]",
                    "Union[None, str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "RcvTipoDoctoField._deserialize": {
            "name": "_deserialize",
            "location": 151,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "Union[int, float, str]",
                    "int",
                    "str"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "RcvTipoDoctoField._validated": {
            "name": "_validated",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Optional[object]",
                    "float",
                    "bool",
                    "Union[type, Tuple[type, ...]]",
                    "Hashable"
                ]
            }
        },
        "RcvPeriodoTributarioField._serialize": {
            "name": "_serialize",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[object]",
                    "Optional[str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "RcvPeriodoTributarioField._deserialize": {
            "name": "_deserialize",
            "location": 196,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "Union[int, float, str]",
                    "int",
                    "str"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "RcvPeriodoTributarioField._validated": {
            "name": "_validated",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[object]",
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "bool",
                    "Optional[datetime.date]"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/extras/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/libs/crypto_utils.py": {
        "load_der_x509_cert": {
            "name": "load_der_x509_cert",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "der_value": [
                    "bytes",
                    "Iterable[bytes]",
                    "bool",
                    "int"
                ]
            }
        },
        "load_pem_x509_cert": {
            "name": "load_pem_x509_cert",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "pem_value": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "x509_cert_der_to_pem": {
            "name": "x509_cert_der_to_pem",
            "location": 109,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "tuple",
                "Optional[str]",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "der_value": [
                    "bytes",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "x509_cert_pem_to_der": {
            "name": "x509_cert_pem_to_der",
            "location": 128,
            "return": [
                "str",
                "int",
                "tuple",
                "dict",
                "List[int]",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "pem_value": [
                    "bytes",
                    "str"
                ]
            }
        },
        "add_pem_cert_header_footer": {
            "name": "add_pem_cert_header_footer",
            "location": 148,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "pem_cert": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "remove_pem_cert_header_footer": {
            "name": "remove_pem_cert_header_footer",
            "location": 159,
            "return": [
                "str",
                "dict",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int"
            ],
            "arguments": {
                "pem_cert": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/csv_utils.py": {
        "create_csv_dict_reader": {
            "name": "create_csv_dict_reader",
            "location": 5,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "text_stream": [
                    "Optional[str]",
                    "str",
                    "List[dict]",
                    "Optional[dict]"
                ],
                "csv_dialect": [
                    "Optional[str]",
                    "str",
                    "List[dict]",
                    "Optional[dict]"
                ],
                "row_dict_extra_fields_key": [
                    "Optional[str]",
                    "str",
                    "List[dict]",
                    "Optional[dict]"
                ],
                "expected_fields_strict": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "expected_field_names": [
                    "Sequence[str]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/dataclass_utils.py": {
        "dc_deep_compare": {
            "name": "dc_deep_compare",
            "location": 75,
            "return": [
                "str",
                "bytes",
                "Awaitable[None]",
                "int",
                "Dict[str, Any]",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "value_a": [
                    "int",
                    "Union[Sequence, 'SweepFixedValues']",
                    "bool",
                    "str"
                ],
                "value_b": [
                    "int",
                    "Union[Sequence, 'SweepFixedValues']",
                    "bool",
                    "str"
                ]
            }
        },
        "_dc_deep_compare_to": {
            "name": "_dc_deep_compare_to",
            "location": 86,
            "return": [
                "float",
                "str",
                "Tuple[int]"
            ],
            "arguments": {
                "value_a": [
                    "float",
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "value_b": [
                    "int",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "Callable"
                ]
            }
        },
        "DcDeepCompareMixin.deep_compare_to": {
            "name": "deep_compare_to",
            "location": 58,
            "return": [
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, \"Outcome\"]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/encoding_utils.py": {
        "clean_base64": {
            "name": "clean_base64",
            "location": 6,
            "return": [
                "str",
                "bool",
                "list",
                "int",
                "Callable"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "Union[None, str, bytes]",
                    "Union[str, bytes]"
                ]
            }
        },
        "decode_base64_strict": {
            "name": "decode_base64_strict",
            "location": 39,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Union[bytes, bytearray, str]"
                ]
            }
        },
        "validate_base64": {
            "name": "validate_base64",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[Iterable]",
                    "Tuple[float]",
                    "Callable"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/io_utils.py": {
        "with_mode_binary": {
            "name": "with_mode_binary",
            "location": 14,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Union[int, float, complex]",
                "Dict[str, Callable[[], Any]]"
            ],
            "arguments": {
                "stream": [
                    "IO",
                    "str",
                    "Union[str, IO]",
                    "io.StringIO",
                    "IO[Any]"
                ]
            }
        },
        "with_mode_text": {
            "name": "with_mode_text",
            "location": 28,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "int",
                "\"Parameter\"",
                "str",
                "bool",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "stream": [
                    "IO",
                    "io.StringIO",
                    "IO[bytes]",
                    "str"
                ]
            }
        },
        "with_encoding_utf8": {
            "name": "with_encoding_utf8",
            "location": 42,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "text_stream": [
                    "IO[str]",
                    "str",
                    "Union[object, str]"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/json_utils.py": {
        "read_json_schema": {
            "name": "read_json_schema",
            "location": 26,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "file_path": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/mm_utils.py": {
        "validate_no_unexpected_input_fields": {
            "name": "validate_no_unexpected_input_fields",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "List[Tuple[str, str, str]]",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "data": [
                    "dict",
                    "bool",
                    "Optional[List[Dict]]",
                    "Optional[Any]",
                    "str"
                ],
                "original_data": [
                    "bool",
                    "dict",
                    "Dict[str, str]",
                    "Tuple[int, dict]"
                ]
            }
        },
        "CustomMarshmallowDateField.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[Dict[str, str]]",
                    "MutableMapping[str, Any]",
                    "List[List[str]]"
                ]
            }
        },
        "CustomMarshmallowDateField._add_to_schema": {
            "name": "_add_to_schema",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "Optional[str]"
                ],
                "schema": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CustomMarshmallowDateField._serialize": {
            "name": "_serialize",
            "location": 105,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "int",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[object]",
                    "Optional[datetime.timedelta]",
                    "Optional[datetime.datetime]",
                    "bytes",
                    "float"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "CustomMarshmallowDateField._deserialize": {
            "name": "_deserialize",
            "location": 120,
            "return": [
                "str",
                "Optional[datetime.datetime]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.datetime",
                    "bool",
                    "datetime.date",
                    "dict",
                    "\"Date\""
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/rows_processing.py": {
        "csv_rows_mm_deserialization_iterator": {
            "name": "csv_rows_mm_deserialization_iterator",
            "location": 23,
            "return": [
                "typing.Iterable[typing.Tuple[builtins.int, typing.Dict[builtins.str, builtins.object], typing.Dict[builtins.str, builtins.object], builtins.dict]]"
            ],
            "arguments": {
                "csv_reader": [
                    "csv.DictReader",
                    "Set[str]",
                    "List[str]",
                    "Union[int, str]",
                    "Set[int]",
                    "Dict[str, int]"
                ],
                "row_schema": [
                    "int",
                    "float"
                ],
                "n_rows_offset": [
                    "int",
                    "float"
                ],
                "max_n_rows": [
                    "int",
                    "float"
                ],
                "fields_to_remove_names": [
                    "int",
                    "float"
                ]
            }
        },
        "rows_mm_deserialization_iterator": {
            "name": "rows_mm_deserialization_iterator",
            "location": 77,
            "return": [
                "typing.Iterable[typing.Tuple[builtins.int, typing.Dict[builtins.str, builtins.object], typing.Dict[builtins.str, builtins.object], builtins.dict]]"
            ],
            "arguments": {
                "rows_iterator": [
                    "int",
                    "Optional[int]"
                ],
                "row_schema": [
                    "marshmallow.Schema",
                    "int"
                ],
                "n_rows_offset": [
                    "int"
                ],
                "max_n_rows": [
                    "int",
                    "Optional[int]"
                ],
                "fields_to_remove_names": [
                    "int",
                    "Set[str]",
                    "List[Tuple[str, str]]",
                    "str",
                    "Type[bytes]",
                    "Tuple[str, Any]"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/tz_utils.py": {
        "get_now_tz_aware": {
            "name": "get_now_tz_aware",
            "location": 33,
            "return": [
                "Optional[str]",
                "str",
                "Callable",
                "int",
                "Sequence[str]",
                "datetime.date",
                "datetime.timedelta"
            ],
            "arguments": {}
        },
        "convert_naive_dt_to_tz_aware": {
            "name": "convert_naive_dt_to_tz_aware",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dt": [
                    "str",
                    "Sequence[MutableMapping]"
                ],
                "tz": [
                    "str",
                    "Sequence[MutableMapping]"
                ]
            }
        },
        "convert_tz_aware_dt_to_naive": {
            "name": "convert_tz_aware_dt_to_naive",
            "location": 88,
            "return": [
                "datetime.datetime",
                "Optional[str]",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "dt": [
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "tz": [
                    "str",
                    "Optional[Union[Any, Any]]",
                    "Optional[Callable]",
                    "bool"
                ]
            }
        },
        "dt_is_aware": {
            "name": "dt_is_aware",
            "location": 125,
            "return": [
                "bool",
                "str",
                "list",
                "float",
                "Optional[float]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "float",
                    "datetime.tzinfo",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "dt_is_naive": {
            "name": "dt_is_naive",
            "location": 144,
            "return": [
                "bool",
                "Optional[int]",
                "list",
                "int",
                "str",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "float",
                    "datetime.tzinfo",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "validate_dt_tz": {
            "name": "validate_dt_tz",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, List]",
                    "Callable"
                ],
                "tz": [
                    "str"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/xml_utils.py": {
        "parse_untrusted_xml": {
            "name": "parse_untrusted_xml",
            "location": 149,
            "return": [
                "bytes"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[bytes, str, None]",
                    "Optional[str]",
                    "Union[str, bytes]",
                    "bytes",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "read_xml_schema": {
            "name": "read_xml_schema",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "validate_xml_doc": {
            "name": "validate_xml_doc",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "xml_schema": [
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "Tuple[cl_sii.libs.xml_utils.XmlElement, bool]",
                    "FrozenSet[str]",
                    "IO[Any]"
                ],
                "xml_doc": [
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "Tuple[cl_sii.libs.xml_utils.XmlElement, bool]",
                    "FrozenSet[str]",
                    "IO[Any]"
                ]
            }
        },
        "write_xml_doc": {
            "name": "write_xml_doc",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "xml_doc": [
                    "str"
                ],
                "output": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "verify_xml_signature": {
            "name": "verify_xml_signature",
            "location": 363,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "xml_doc": [
                    "set",
                    "str",
                    "List[str]",
                    "IO",
                    "Iterable[str]",
                    "IO[str]"
                ],
                "trusted_x509_cert": [
                    "int",
                    "bool",
                    "Optional[\"ShippingRateInputType\"]",
                    "Collection[str]"
                ],
                "xml_verifier": [
                    "str",
                    "cl_sii.libs.xml_utils.XmlElement",
                    "Optional[str]"
                ],
                "xml_verifier_supports_multiple_signatures": [
                    "str",
                    "Optional[Callable[[None], None]]",
                    "Type['GenericList']",
                    "Type['Declared']",
                    "BinaryIO",
                    "Sequence[str]"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/libs/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/rcv/constants.py": {
        "RcvKind.is_estado_contable_compatible": {
            "name": "is_estado_contable_compatible",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RcvTipoDocto.as_tipo_dte": {
            "name": "as_tipo_dte",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/rcv/data_models.py": {
        "PeriodoTributario.validate_year": {
            "name": "validate_year",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "PeriodoTributario.validate_month": {
            "name": "validate_month",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "PeriodoTributario.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodoTributario.__lt__": {
            "name": "__lt__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PeriodoTributario.__le__": {
            "name": "__le__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PeriodoTributario.is_in_the_future": {
            "name": "is_in_the_future",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodoTributario.from_date": {
            "name": "from_date",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "PeriodoTributario.from_datetime": {
            "name": "from_datetime",
            "location": 86,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "PeriodoTributario.as_date": {
            "name": "as_date",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodoTributario.as_datetime": {
            "name": "as_datetime",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RcvDetalleEntry.validate_folio": {
            "name": "validate_folio",
            "location": 166,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "RcvDetalleEntry.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 172,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "RcvDetalleEntry.validate_rcv_kind_is_consistent_with_rc_estado_contable": {
            "name": "validate_rcv_kind_is_consistent_with_rc_estado_contable",
            "location": 178,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "RcvDetalleEntry.is_dte": {
            "name": "is_dte",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RcvDetalleEntry.as_dte_data_l2": {
            "name": "as_dte_data_l2",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RvDetalleEntry.validate_contribuyente_razon_social": {
            "name": "validate_contribuyente_razon_social",
            "location": 279,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "RvDetalleEntry.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 285,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "RcRegistroDetalleEntry.validate_contribuyente_razon_social": {
            "name": "validate_contribuyente_razon_social",
            "location": 330,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "RcRegistroDetalleEntry.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 336,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "RcReclamadoDetalleEntry.validate_contribuyente_razon_social": {
            "name": "validate_contribuyente_razon_social",
            "location": 405,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "RcReclamadoDetalleEntry.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 411,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "RcPendienteDetalleEntry.validate_contribuyente_razon_social": {
            "name": "validate_contribuyente_razon_social",
            "location": 446,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/rcv/parse_csv.py": {
        "get_rcv_csv_file_parser": {
            "name": "get_rcv_csv_file_parser",
            "location": 45,
            "return": [
                "str",
                "int",
                "dict",
                "Any"
            ],
            "arguments": {
                "rcv_kind": [
                    "str",
                    "Optional[str]"
                ],
                "estado_contable": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "parse_rcv_venta_csv_file": {
            "name": "parse_rcv_venta_csv_file",
            "location": 86,
            "return": [
                "typing.Iterable[typing.Tuple[typing.Optional[data_models.RvDetalleEntry], builtins.int, typing.Dict[builtins.str, builtins.object], typing.Dict[builtins.str, builtins.object]]]"
            ],
            "arguments": {
                "rut": [
                    "str",
                    "Set[str]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "dict",
                    "ValuesView[str]",
                    "Tuple[List[int], List[int]]"
                ],
                "input_file_path": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "n_rows_offset": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "max_n_rows": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "parse_rcv_compra_registro_csv_file": {
            "name": "parse_rcv_compra_registro_csv_file",
            "location": 198,
            "return": [
                "typing.Iterable[typing.Tuple[typing.Optional[data_models.RcRegistroDetalleEntry], builtins.int, typing.Dict[builtins.str, builtins.object], typing.Dict[builtins.str, builtins.object]]]"
            ],
            "arguments": {
                "rut": [
                    "str",
                    "Set[str]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "dict",
                    "Tuple[List[int], List[int]]",
                    "ValuesView[str]"
                ],
                "input_file_path": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "n_rows_offset": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "max_n_rows": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "parse_rcv_compra_no_incluir_csv_file": {
            "name": "parse_rcv_compra_no_incluir_csv_file",
            "location": 279,
            "return": [
                "typing.Iterable[typing.Tuple[typing.Optional[data_models.RcNoIncluirDetalleEntry], builtins.int, typing.Dict[builtins.str, builtins.object], typing.Dict[builtins.str, builtins.object]]]"
            ],
            "arguments": {
                "rut": [
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Tuple[bool]",
                    "List[str]"
                ],
                "input_file_path": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "n_rows_offset": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "max_n_rows": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "parse_rcv_compra_reclamado_csv_file": {
            "name": "parse_rcv_compra_reclamado_csv_file",
            "location": 354,
            "return": [
                "typing.Iterable[typing.Tuple[typing.Optional[data_models.RcReclamadoDetalleEntry], builtins.int, typing.Dict[builtins.str, builtins.object], typing.Dict[builtins.str, builtins.object]]]"
            ],
            "arguments": {
                "rut": [
                    "str",
                    "Set[str]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "dict",
                    "Tuple[List[int], List[int]]",
                    "ValuesView[str]"
                ],
                "input_file_path": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "n_rows_offset": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "max_n_rows": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "parse_rcv_compra_pendiente_csv_file": {
            "name": "parse_rcv_compra_pendiente_csv_file",
            "location": 429,
            "return": [
                "typing.Iterable[typing.Tuple[typing.Optional[data_models.RcPendienteDetalleEntry], builtins.int, typing.Dict[builtins.str, builtins.object], typing.Dict[builtins.str, builtins.object]]]"
            ],
            "arguments": {
                "rut": [
                    "str",
                    "Set[str]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "dict",
                    "Tuple[List[int], List[int]]",
                    "ValuesView[str]"
                ],
                "input_file_path": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "n_rows_offset": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "max_n_rows": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "_parse_rcv_csv_file": {
            "name": "_parse_rcv_csv_file",
            "location": 1128,
            "return": [
                "typing.Iterable[typing.Tuple[typing.Optional[data_models.RcvDetalleEntry], builtins.int, typing.Dict[builtins.str, builtins.object], typing.Dict[builtins.str, builtins.object]]]"
            ],
            "arguments": {
                "input_csv_row_schema": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bool",
                    "bytes",
                    "Union[str, int]"
                ],
                "expected_input_field_names": [
                    "str",
                    "bool"
                ],
                "fields_to_remove_names": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                    "Dict[str, Any]"
                ],
                "input_file_path": [
                    "str",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "n_rows_offset": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bool",
                    "bytes",
                    "Union[str, int]"
                ],
                "max_n_rows": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bool",
                    "bytes",
                    "Union[str, int]"
                ]
            }
        },
        "_RcvCsvRowSchemaBase.validate_schema": {
            "name": "validate_schema",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "original_data": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_RcvCsvRowSchemaBase.to_detalle_entry": {
            "name": "to_detalle_entry",
            "location": 517,
            "return": [
                "data_models.RcvDetalleEntry"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "list",
                    "memoryview",
                    "bool"
                ]
            }
        },
        "RcvVentaCsvRowSchema.preprocess": {
            "name": "preprocess",
            "location": 591,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "dict",
                    "str",
                    "Dict[str, Optional[str]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[dict]",
                    "Optional[Type[Any]]"
                ]
            }
        },
        "RcvVentaCsvRowSchema.postprocess": {
            "name": "postprocess",
            "location": 609,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "RcvVentaCsvRowSchema.to_detalle_entry": {
            "name": "to_detalle_entry",
            "location": 637,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "RcvCompraRegistroCsvRowSchema.preprocess": {
            "name": "preprocess",
            "location": 734,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "RcvCompraRegistroCsvRowSchema.postprocess": {
            "name": "postprocess",
            "location": 749,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "defaultdict",
                    "int"
                ]
            }
        },
        "RcvCompraRegistroCsvRowSchema.to_detalle_entry": {
            "name": "to_detalle_entry",
            "location": 773,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "RcvCompraNoIncluirCsvRowSchema.to_detalle_entry": {
            "name": "to_detalle_entry",
            "location": 806,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "RcvCompraReclamadoCsvRowSchema.preprocess": {
            "name": "preprocess",
            "location": 904,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "RcvCompraReclamadoCsvRowSchema.postprocess": {
            "name": "postprocess",
            "location": 922,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "defaultdict",
                    "int"
                ]
            }
        },
        "RcvCompraReclamadoCsvRowSchema.to_detalle_entry": {
            "name": "to_detalle_entry",
            "location": 946,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "RcvCompraPendienteCsvRowSchema.preprocess": {
            "name": "preprocess",
            "location": 1035,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "in_data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "RcvCompraPendienteCsvRowSchema.postprocess": {
            "name": "postprocess",
            "location": 1050,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int"
                ]
            }
        },
        "RcvCompraPendienteCsvRowSchema.to_detalle_entry": {
            "name": "to_detalle_entry",
            "location": 1069,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/rcv/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/rtc/constants.py": {},
    "lib-cl-sii-python-master/cl_sii/rtc/data_models.py": {
        "validate_cesion_seq": {
            "name": "validate_cesion_seq",
            "location": 36,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_cesion_monto": {
            "name": "validate_cesion_monto",
            "location": 49,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_cesion_dte_tipo_dte": {
            "name": "validate_cesion_dte_tipo_dte",
            "location": 62,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_cesion_and_dte_montos": {
            "name": "validate_cesion_and_dte_montos",
            "location": 72,
            "return": [],
            "arguments": {
                "cesion_value": [],
                "dte_value": []
            }
        },
        "CesionNaturalKey.slug": {
            "name": "slug",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionNaturalKey.as_dict": {
            "name": "as_dict",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionNaturalKey.validate_dte_tipo_dte": {
            "name": "validate_dte_tipo_dte",
            "location": 144,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionNaturalKey.validate_seq": {
            "name": "validate_seq",
            "location": 150,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionAltNaturalKey.slug": {
            "name": "slug",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKey.as_dict": {
            "name": "as_dict",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKey.validate_dte_tipo_dte": {
            "name": "validate_dte_tipo_dte",
            "location": 249,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionAltNaturalKey.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 255,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionAltNaturalKey.truncate_fecha_cesion_dt_to_minutes": {
            "name": "truncate_fecha_cesion_dt_to_minutes",
            "location": 261,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionL0.natural_key": {
            "name": "natural_key",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0.alt_natural_key": {
            "name": "alt_natural_key",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0.slug": {
            "name": "slug",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0.dte_emisor_rut": {
            "name": "dte_emisor_rut",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0.dte_tipo_dte": {
            "name": "dte_tipo_dte",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0.dte_folio": {
            "name": "dte_folio",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0.as_dict": {
            "name": "as_dict",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0.validate_dte_tipo_dte": {
            "name": "validate_dte_tipo_dte",
            "location": 394,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionL0.validate_seq": {
            "name": "validate_seq",
            "location": 400,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionL0.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 406,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionL1.dte_vendedor_rut": {
            "name": "dte_vendedor_rut",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1.dte_deudor_rut": {
            "name": "dte_deudor_rut",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1.as_cesion_l0": {
            "name": "as_cesion_l0",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1.as_dte_data_l1": {
            "name": "as_dte_data_l1",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1.validate_monto_cedido": {
            "name": "validate_monto_cedido",
            "location": 512,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionL1.validate_monto_cedido_does_not_exceed_dte_monto_total": {
            "name": "validate_monto_cedido_does_not_exceed_dte_monto_total",
            "location": 518,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "CesionL2.as_cesion_l1": {
            "name": "as_cesion_l1",
            "location": 664,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2.as_dte_data_l2": {
            "name": "as_dte_data_l2",
            "location": 678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 703,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionL2.validate_contribuyente_razon_social": {
            "name": "validate_contribuyente_razon_social",
            "location": 714,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionL2.validate_dte_data_l2": {
            "name": "validate_dte_data_l2",
            "location": 720,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/rtc/data_models_aec.py": {
        "CesionAecXml.natural_key": {
            "name": "natural_key",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAecXml.alt_natural_key": {
            "name": "alt_natural_key",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAecXml.as_cesion_l2": {
            "name": "as_cesion_l2",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAecXml.validate_dte_tipo_dte": {
            "name": "validate_dte_tipo_dte",
            "location": 311,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionAecXml.validate_seq": {
            "name": "validate_seq",
            "location": 317,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionAecXml.validate_monto_cesion": {
            "name": "validate_monto_cesion",
            "location": 323,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionAecXml.validate_contribuyente_razon_social": {
            "name": "validate_contribuyente_razon_social",
            "location": 332,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionAecXml.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 338,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "CesionAecXml.validate_fecha_cesion_dt_is_consistent_with_dte": {
            "name": "validate_fecha_cesion_dt_is_consistent_with_dte",
            "location": 344,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "CesionAecXml.validate_monto_cesion_does_not_exceed_dte_monto_total": {
            "name": "validate_monto_cesion_does_not_exceed_dte_monto_total",
            "location": 357,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "CesionAecXml.validate_fecha_ultimo_vencimiento_is_consistent_with_dte": {
            "name": "validate_fecha_ultimo_vencimiento_is_consistent_with_dte",
            "location": 373,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "AecXml._last_cesion": {
            "name": "_last_cesion",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.seq": {
            "name": "seq",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.monto_cesion": {
            "name": "monto_cesion",
            "location": 574,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.fecha_cesion_dt": {
            "name": "fecha_cesion_dt",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.fecha_ultimo_vencimiento": {
            "name": "fecha_ultimo_vencimiento",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.cedente_razon_social": {
            "name": "cedente_razon_social",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.cedente_direccion": {
            "name": "cedente_direccion",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.cedente_email": {
            "name": "cedente_email",
            "location": 604,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.cesionario_razon_social": {
            "name": "cesionario_razon_social",
            "location": 608,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.cesionario_direccion": {
            "name": "cesionario_direccion",
            "location": 612,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.cesionario_email": {
            "name": "cesionario_email",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.dte_emisor_email": {
            "name": "dte_emisor_email",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.dte_receptor_email": {
            "name": "dte_receptor_email",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.dte_deudor_email": {
            "name": "dte_deudor_email",
            "location": 628,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.cedente_declaracion_jurada": {
            "name": "cedente_declaracion_jurada",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.natural_key": {
            "name": "natural_key",
            "location": 636,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.alt_natural_key": {
            "name": "alt_natural_key",
            "location": 640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.slug": {
            "name": "slug",
            "location": 649,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.as_dict": {
            "name": "as_dict",
            "location": 660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.as_cesion_l2": {
            "name": "as_cesion_l2",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXml.validate_dte_tipo_dte": {
            "name": "validate_dte_tipo_dte",
            "location": 697,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "AecXml.validate_datetime_tz": {
            "name": "validate_datetime_tz",
            "location": 703,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "AecXml.validate_cesiones_min_items": {
            "name": "validate_cesiones_min_items",
            "location": 709,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "AecXml.validate_cesiones_seq_order": {
            "name": "validate_cesiones_seq_order",
            "location": 716,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "AecXml.validate_dte_matches_cesiones_dtes": {
            "name": "validate_dte_matches_cesiones_dtes",
            "location": 743,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "AecXml.validate_last_cesion_matches_some_fields": {
            "name": "validate_last_cesion_matches_some_fields",
            "location": 765,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "AecXml.validate_signature_value_and_signature_x509_cert_der_may_only_be_none_together": {
            "name": "validate_signature_value_and_signature_x509_cert_der_may_only_be_none_together",
            "location": 799,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/rtc/data_models_cesiones_periodo.py": {
        "CesionesPeriodoEntry.__post_init__": {
            "name": "__post_init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntry.monto_cedido_eq_dte_monto_total": {
            "name": "monto_cedido_eq_dte_monto_total",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntry.as_dte_data_l1": {
            "name": "as_dte_data_l1",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntry.as_cesion_l2": {
            "name": "as_cesion_l2",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/rtc/parse_aec.py": {
        "validate_aec_xml": {
            "name": "validate_aec_xml",
            "location": 62,
            "return": [],
            "arguments": {
                "xml_doc": []
            }
        },
        "parse_aec_xml": {
            "name": "parse_aec_xml",
            "location": 72,
            "return": [],
            "arguments": {
                "xml_doc": []
            }
        },
        "_empty_str_to_none": {
            "name": "_empty_str_to_none",
            "location": 88,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "_validate_rut": {
            "name": "_validate_rut",
            "location": 98,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "_XmlSignature.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 130,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_XmlSignature.validate_base64": {
            "name": "validate_base64",
            "location": 166,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "_Cesionario.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 207,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_RutAutorizado.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 254,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_Cedente.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 309,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_Cedente.validate_rut": {
            "name": "validate_rut",
            "location": 342,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "_Cedente.validate_ruts_autorizados_item_count": {
            "name": "validate_ruts_autorizados_item_count",
            "location": 348,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "_IdDte.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 383,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_IdDte.as_dte_data_l1": {
            "name": "as_dte_data_l1",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_IdDte.validate_tipo_dte": {
            "name": "validate_tipo_dte",
            "location": 424,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "_DocumentoCesion.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 465,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_DocumentoCesion.validate_datetime": {
            "name": "validate_datetime",
            "location": 502,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "_Cesion.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 535,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_Cesion.as_cesion_aec_xml": {
            "name": "as_cesion_aec_xml",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DocumentoDteCedido.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 616,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_DocumentoDteCedido.validate_dte": {
            "name": "validate_dte",
            "location": 635,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "_DteCedido.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 675,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_Caratula.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 733,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_Caratula.validate_datetime": {
            "name": "validate_datetime",
            "location": 772,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "_DocumentoAec.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 812,
            "return": [],
            "arguments": {
                "xml_em": []
            }
        },
        "_DocumentoAec.validate_cesiones_cesion_min_items": {
            "name": "validate_cesiones_cesion_min_items",
            "location": 848,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "_Aec.parse_xml": {
            "name": "parse_xml",
            "location": 876,
            "return": [],
            "arguments": {
                "cls": [],
                "xml_doc": []
            }
        },
        "_Aec.as_aec_xml": {
            "name": "as_aec_xml",
            "location": 880,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Aec.parse_xml_to_dict": {
            "name": "parse_xml_to_dict",
            "location": 907,
            "return": [],
            "arguments": {
                "xml_doc": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/rtc/xml_utils.py": {
        "verify_aec_signature": {
            "name": "verify_aec_signature",
            "location": 43,
            "return": [],
            "arguments": {
                "aec_xml_doc": [],
                "aec_xml": []
            }
        },
        "AecXMLVerifier._get_signature": {
            "name": "_get_signature",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/rtc/__init__.py": {},
    "lib-cl-sii-python-master/cl_sii/rut/constants.py": {},
    "lib-cl-sii-python-master/cl_sii/rut/crypto_utils.py": {
        "get_subject_rut_from_certificate_pfx": {
            "name": "get_subject_rut_from_certificate_pfx",
            "location": 11,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "pfx_file_bytes": [
                    "str",
                    "IO[bytes]",
                    "bytes"
                ],
                "password": [
                    "str",
                    "IO[bytes]",
                    "bytes"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/cl_sii/rut/__init__.py": {
        "Rut.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "validate_dv": []
            }
        },
        "Rut.canonical": {
            "name": "canonical",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rut.verbose": {
            "name": "verbose",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rut.digits": {
            "name": "digits",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rut.digits_with_dots": {
            "name": "digits_with_dots",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rut.dv": {
            "name": "dv",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rut.__str__": {
            "name": "__str__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rut.__repr__": {
            "name": "__repr__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rut.__lt__": {
            "name": "__lt__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Rut.__le__": {
            "name": "__le__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Rut.__eq__": {
            "name": "__eq__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Rut.__hash__": {
            "name": "__hash__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rut.clean_str": {
            "name": "clean_str",
            "location": 145,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "Rut.calc_dv": {
            "name": "calc_dv",
            "location": 154,
            "return": [],
            "arguments": {
                "cls": [],
                "rut_digits": []
            }
        },
        "Rut.random": {
            "name": "random",
            "location": 182,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "lib-cl-sii-python-master/scripts/canonicalize_xml_file.py": {
        "canonicalize_xml_file": {
            "name": "canonicalize_xml_file",
            "location": 43,
            "return": [],
            "arguments": {
                "input_file_path": [],
                "output_file_path": []
            }
        },
        "main_single_file": {
            "name": "main_single_file",
            "location": 72,
            "return": [],
            "arguments": {
                "input_file_path": [],
                "output_file_path": []
            }
        },
        "main_dir_files": {
            "name": "main_dir_files",
            "location": 82,
            "return": [],
            "arguments": {
                "input_files_dir_path": []
            }
        }
    },
    "lib-cl-sii-python-master/scripts/clean_dte_xml_file.py": {
        "clean_dte_xml_file": {
            "name": "clean_dte_xml_file",
            "location": 41,
            "return": [
                "AbstractSet[str]",
                "str",
                "List[str]",
                "Callable[[str], str]",
                "bool"
            ],
            "arguments": {
                "input_file_path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "output_file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "main_single_file": {
            "name": "main_single_file",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "input_file_path": [
                    "pathlib.Path",
                    "str",
                    "Callable",
                    "Iterable[pathlib.Path]"
                ],
                "output_file_path": [
                    "pathlib.Path",
                    "str",
                    "Callable",
                    "Iterable[pathlib.Path]"
                ]
            }
        },
        "main_dir_files": {
            "name": "main_dir_files",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "input_files_dir_path": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/scripts/example.py": {
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/cte_f29_factories.py": {
        "create_CteForm29": {
            "name": "create_CteForm29",
            "location": 11,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "lib-cl-sii-python-master/tests/test_contribuyente.py": {},
    "lib-cl-sii-python-master/tests/test_cte_f29_data_models.py": {
        "CteForm29Test.test___str__": {
            "name": "test___str__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test___repr__": {
            "name": "test___repr__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test_code_field_mapping_class_attributes": {
            "name": "test_code_field_mapping_class_attributes",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test_code_field_mapping_value_uniqueness": {
            "name": "test_code_field_mapping_value_uniqueness",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test_strict_codes": {
            "name": "test_strict_codes",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test_get_field_name": {
            "name": "test_get_field_name",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test_natural_key": {
            "name": "test_natural_key",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test_get_all_codes": {
            "name": "test_get_all_codes",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test_as_codes_dict": {
            "name": "test_as_codes_dict",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test___getitem__": {
            "name": "test___getitem__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CteForm29Test.test___iter__": {
            "name": "test___iter__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_cte_f29_parse_datos_obj.py": {
        "FunctionsTest.test_full": {
            "name": "test_full",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_full_2": {
            "name": "test_full_2",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_dte.py": {},
    "lib-cl-sii-python-master/tests/test_dte_constants.py": {
        "TipoDteTest.test_members": {
            "name": "test_members",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteTest.test_FACTURA_ELECTRONICA": {
            "name": "test_FACTURA_ELECTRONICA",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteTest.test_FACTURA_NO_AFECTA_O_EXENTA_ELECTRONICA": {
            "name": "test_FACTURA_NO_AFECTA_O_EXENTA_ELECTRONICA",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteTest.test_LIQUIDACION_FACTURA_ELECTRONICA": {
            "name": "test_LIQUIDACION_FACTURA_ELECTRONICA",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteTest.test_FACTURA_COMPRA_ELECTRONICA": {
            "name": "test_FACTURA_COMPRA_ELECTRONICA",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteTest.test_GUIA_DESPACHO_ELECTRONICA": {
            "name": "test_GUIA_DESPACHO_ELECTRONICA",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteTest.test_NOTA_DEBITO_ELECTRONICA": {
            "name": "test_NOTA_DEBITO_ELECTRONICA",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteTest.test_NOTA_CREDITO_ELECTRONICA": {
            "name": "test_NOTA_CREDITO_ELECTRONICA",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_dte_data_models.py": {
        "DteNaturalKeyTest.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteNaturalKeyTest.test_validate_folio_range": {
            "name": "test_validate_folio_range",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteNaturalKeyTest.test_as_dict": {
            "name": "test_as_dict",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteNaturalKeyTest.test_slug": {
            "name": "test_slug",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL0Test.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL0Test.test_as_dict": {
            "name": "test_as_dict",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL0Test.test_natural_key": {
            "name": "test_natural_key",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL1Test.setUp": {
            "name": "setUp",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL1Test.test_is_ok_negative_monto_total_in_tipo_dte_liquidacion_factura": {
            "name": "test_is_ok_negative_monto_total_in_tipo_dte_liquidacion_factura",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL1Test.test_validate_monto_total_range": {
            "name": "test_validate_monto_total_range",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL1Test.test_as_dict": {
            "name": "test_as_dict",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL1Test.test_vendedor_rut_comprador_rut": {
            "name": "test_vendedor_rut_comprador_rut",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.setUpClass": {
            "name": "setUpClass",
            "location": 256,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DteDataL2Test.setUp": {
            "name": "setUp",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_constants_match": {
            "name": "test_constants_match",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_ok_razon_social_none": {
            "name": "test_ok_razon_social_none",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_emisor_razon_social_empty": {
            "name": "test_validate_emisor_razon_social_empty",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_receptor_razon_social_empty": {
            "name": "test_validate_receptor_razon_social_empty",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_init_fail_regression_signature_value_bytes_with_x20": {
            "name": "test_init_fail_regression_signature_value_bytes_with_x20",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_non_empty_bytes_signature_value": {
            "name": "test_validate_non_empty_bytes_signature_value",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_init_fail_regression_signature_cert_der_bytes_with_x20": {
            "name": "test_init_fail_regression_signature_cert_der_bytes_with_x20",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_non_empty_bytes_signature_x509_cert_der": {
            "name": "test_validate_non_empty_bytes_signature_x509_cert_der",
            "location": 489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_no_leading_or_trailing_whitespace_characters_emisor_giro": {
            "name": "test_validate_no_leading_or_trailing_whitespace_characters_emisor_giro",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_no_leading_or_trailing_whitespace_characters_emisor_email": {
            "name": "test_validate_no_leading_or_trailing_whitespace_characters_emisor_email",
            "location": 529,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_no_leading_or_trailing_whitespace_characters_receptor_email": {
            "name": "test_validate_no_leading_or_trailing_whitespace_characters_receptor_email",
            "location": 554,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_non_empty_stripped_str_emisor_giro": {
            "name": "test_validate_non_empty_stripped_str_emisor_giro",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_non_empty_stripped_str_emisor_email": {
            "name": "test_validate_non_empty_stripped_str_emisor_email",
            "location": 599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_validate_non_empty_stripped_str_receptor_email": {
            "name": "test_validate_non_empty_stripped_str_receptor_email",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_as_dict": {
            "name": "test_as_dict",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteDataL2Test.test_as_dte_data_l1": {
            "name": "test_as_dte_data_l1",
            "location": 687,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.setUpClass": {
            "name": "setUpClass",
            "location": 714,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "DteXmlDataTest.setUp": {
            "name": "setUp",
            "location": 734,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_constants_match": {
            "name": "test_constants_match",
            "location": 778,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_emisor_razon_social_empty": {
            "name": "test_validate_emisor_razon_social_empty",
            "location": 784,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_receptor_razon_social_empty": {
            "name": "test_validate_receptor_razon_social_empty",
            "location": 804,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_emisor_razon_social_none": {
            "name": "test_validate_emisor_razon_social_none",
            "location": 824,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_receptor_razon_social_none": {
            "name": "test_validate_receptor_razon_social_none",
            "location": 844,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 864,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_init_fail_regression_signature_value_bytes_with_x20": {
            "name": "test_init_fail_regression_signature_value_bytes_with_x20",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_non_empty_bytes_signature_value": {
            "name": "test_validate_non_empty_bytes_signature_value",
            "location": 936,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_init_fail_regression_signature_cert_der_bytes_with_x20": {
            "name": "test_init_fail_regression_signature_cert_der_bytes_with_x20",
            "location": 956,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_non_empty_bytes_signature_x509_cert_der": {
            "name": "test_validate_non_empty_bytes_signature_x509_cert_der",
            "location": 977,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_no_leading_or_trailing_whitespace_characters_emisor_giro": {
            "name": "test_validate_no_leading_or_trailing_whitespace_characters_emisor_giro",
            "location": 997,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_no_leading_or_trailing_whitespace_characters_emisor_email": {
            "name": "test_validate_no_leading_or_trailing_whitespace_characters_emisor_email",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_no_leading_or_trailing_whitespace_characters_receptor_email": {
            "name": "test_validate_no_leading_or_trailing_whitespace_characters_receptor_email",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_non_empty_stripped_str_emisor_giro": {
            "name": "test_validate_non_empty_stripped_str_emisor_giro",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_non_empty_stripped_str_emisor_email": {
            "name": "test_validate_non_empty_stripped_str_emisor_email",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_validate_non_empty_stripped_str_receptor_email": {
            "name": "test_validate_non_empty_stripped_str_receptor_email",
            "location": 1107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_as_dict": {
            "name": "test_as_dict",
            "location": 1127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_as_dte_data_l1": {
            "name": "test_as_dte_data_l1",
            "location": 1175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DteXmlDataTest.test_as_dte_data_l2": {
            "name": "test_as_dte_data_l2",
            "location": 1199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_contribuyente_razon_social": {
            "name": "test_validate_contribuyente_razon_social",
            "location": 1249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_dte_folio": {
            "name": "test_validate_dte_folio",
            "location": 1253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_dte_monto_total_with_valid_values": {
            "name": "test_validate_dte_monto_total_with_valid_values",
            "location": 1257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_dte_monto_total_with_invalid_values": {
            "name": "test_validate_dte_monto_total_with_invalid_values",
            "location": 1299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_clean_str": {
            "name": "test_validate_clean_str",
            "location": 1321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_clean_bytes": {
            "name": "test_validate_clean_bytes",
            "location": 1325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_non_empty_str": {
            "name": "test_validate_non_empty_str",
            "location": 1329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_non_empty_bytes": {
            "name": "test_validate_non_empty_bytes",
            "location": 1333,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_dte_parse.py": {
        "OthersTest.test_DTE_XML_SCHEMA_OBJ": {
            "name": "test_DTE_XML_SCHEMA_OBJ",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionValidateDteXmlTest.setUpClass": {
            "name": "setUpClass",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FunctionValidateDteXmlTest.test_validate_dte_xml_ok_dte_1": {
            "name": "test_validate_dte_xml_ok_dte_1",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionValidateDteXmlTest.test_validate_dte_xml_ok_dte_2": {
            "name": "test_validate_dte_xml_ok_dte_2",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionValidateDteXmlTest.test_validate_dte_xml_ok_dte_3": {
            "name": "test_validate_dte_xml_ok_dte_3",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionValidateDteXmlTest.test_validate_dte_xml_fail_x": {
            "name": "test_validate_dte_xml_fail_x",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionValidateDteXmlTest.test_validate_dte_xml_fail_dte_1": {
            "name": "test_validate_dte_xml_fail_dte_1",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionValidateDteXmlTest.test_validate_dte_xml_fail_dte_2": {
            "name": "test_validate_dte_xml_fail_dte_2",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionValidateDteXmlTest.test_validate_dte_xml_fail_dte_3": {
            "name": "test_validate_dte_xml_fail_dte_3",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCleanDteXmlTest.setUpClass": {
            "name": "setUpClass",
            "location": 127,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FunctionCleanDteXmlTest.test_clean_dte_xml_ok_1": {
            "name": "test_clean_dte_xml_ok_1",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCleanDteXmlTest.test_clean_dte_xml_ok_2": {
            "name": "test_clean_dte_xml_ok_2",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCleanDteXmlTest.test_clean_dte_xml_ok_3": {
            "name": "test_clean_dte_xml_ok_3",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCleanDteXmlTest.test_clean_dte_xml_fail": {
            "name": "test_clean_dte_xml_fail",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCleanDteXmlTest.test__set_dte_xml_missing_xmlns_ok": {
            "name": "test__set_dte_xml_missing_xmlns_ok",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCleanDteXmlTest.test__set_dte_xml_missing_xmlns_fail": {
            "name": "test__set_dte_xml_missing_xmlns_fail",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCleanDteXmlTest.test__remove_dte_xml_doc_personalizado_ok": {
            "name": "test__remove_dte_xml_doc_personalizado_ok",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCleanDteXmlTest.test__remove_dte_xml_doc_personalizado_fail": {
            "name": "test__remove_dte_xml_doc_personalizado_fail",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseDteXmlTest.setUpClass": {
            "name": "setUpClass",
            "location": 368,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FunctionParseDteXmlTest.test_data": {
            "name": "test_data",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseDteXmlTest.test_parse_dte_xml_ok_1": {
            "name": "test_parse_dte_xml_ok_1",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseDteXmlTest.test_parse_dte_xml_ok_3": {
            "name": "test_parse_dte_xml_ok_3",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseDteXmlTest.test_parse_dte_xml_ok_1b": {
            "name": "test_parse_dte_xml_ok_1b",
            "location": 540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseDteXmlTest.test_parse_dte_xml_ok_2": {
            "name": "test_parse_dte_xml_ok_2",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseDteXmlTest.test_parse_dte_xml_fail_x": {
            "name": "test_parse_dte_xml_fail_x",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseDteXmlTest.test_parse_dte_xml_fail_1": {
            "name": "test_parse_dte_xml_fail_1",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseDteXmlTest.test_parse_dte_xml_fail_2": {
            "name": "test_parse_dte_xml_fail_2",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseDteXmlTest.test_parse_dte_xml_fail_3": {
            "name": "test_parse_dte_xml_fail_3",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_extras_dj_form_fields.py": {
        "RutFieldTest.setUpClass": {
            "name": "setUpClass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Callable",
                    "type",
                    "Exception"
                ]
            }
        },
        "RutFieldTest.test_clean_value_of_invalid_canonical_str": {
            "name": "test_clean_value_of_invalid_canonical_str",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_clean_value_of_canonical_str": {
            "name": "test_clean_value_of_canonical_str",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_clean_value_of_non_canonical_str": {
            "name": "test_clean_value_of_non_canonical_str",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_clean_value_of_Rut": {
            "name": "test_clean_value_of_Rut",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_clean_value_of_rut_str_with_invalid_dv_if_validated": {
            "name": "test_clean_value_of_rut_str_with_invalid_dv_if_validated",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_clean_value_of_rut_str_with_invalid_dv_if_not_validated": {
            "name": "test_clean_value_of_rut_str_with_invalid_dv_if_not_validated",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_clean_of_empty_value_if_not_required": {
            "name": "test_clean_of_empty_value_if_not_required",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_clean_of_empty_value_if_required": {
            "name": "test_clean_of_empty_value_if_required",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_extras_dj_model_fields.py": {
        "RutFieldTest.setUpClass": {
            "name": "setUpClass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[List[Any]]",
                    "type"
                ]
            }
        },
        "RutFieldTest.test_get_prep_value_of_canonical_str": {
            "name": "test_get_prep_value_of_canonical_str",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_get_prep_value_of_non_canonical_str": {
            "name": "test_get_prep_value_of_non_canonical_str",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_get_prep_value_of_Rut": {
            "name": "test_get_prep_value_of_Rut",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_get_prep_value_of_None": {
            "name": "test_get_prep_value_of_None",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_extras_drf_fields.py": {},
    "lib-cl-sii-python-master/tests/test_extras_mm_fields.py": {
        "RutFieldTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_load_ok_valid": {
            "name": "test_load_ok_valid",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_dump_ok_valid": {
            "name": "test_dump_ok_valid",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_dump_ok_strange": {
            "name": "test_dump_ok_strange",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_load_fail": {
            "name": "test_load_fail",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.test_dump_fail": {
            "name": "test_dump_fail",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteFieldTest.setUp": {
            "name": "setUp",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteFieldTest.test_load_ok_valid": {
            "name": "test_load_ok_valid",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteFieldTest.test_dump_ok_valid": {
            "name": "test_dump_ok_valid",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteFieldTest.test_dump_ok_strange": {
            "name": "test_dump_ok_strange",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteFieldTest.test_load_fail": {
            "name": "test_load_fail",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TipoDteFieldTest.test_dump_fail": {
            "name": "test_dump_fail",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoFieldTest.setUp": {
            "name": "setUp",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoFieldTest.test_load_ok_valid": {
            "name": "test_load_ok_valid",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoFieldTest.test_dump_ok_valid": {
            "name": "test_dump_ok_valid",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoFieldTest.test_dump_ok_strange": {
            "name": "test_dump_ok_strange",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoFieldTest.test_load_fail": {
            "name": "test_load_fail",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoFieldTest.test_dump_fail": {
            "name": "test_dump_fail",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvPeriodoTributarioFieldTest.setUp": {
            "name": "setUp",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvPeriodoTributarioFieldTest.test_load_ok_valid": {
            "name": "test_load_ok_valid",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvPeriodoTributarioFieldTest.test_dump_ok_valid": {
            "name": "test_dump_ok_valid",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvPeriodoTributarioFieldTest.test_dump_ok_strange": {
            "name": "test_dump_ok_strange",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvPeriodoTributarioFieldTest.test_load_fail": {
            "name": "test_load_fail",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvPeriodoTributarioFieldTest.test_dump_fail": {
            "name": "test_dump_fail",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutFieldTest.setUp.MyObj.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "emisor_rut": [],
                "other_field": []
            }
        },
        "RutFieldTest.setUp.MyBadObj.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "some_field": []
            }
        },
        "TipoDteFieldTest.setUp.MyObj.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "tipo_dte": [],
                "other_field": []
            }
        },
        "TipoDteFieldTest.setUp.MyBadObj.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "some_field": []
            }
        },
        "RcvTipoDoctoFieldTest.setUp.MyObj.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "tipo_docto": [],
                "other_field": []
            }
        },
        "RcvTipoDoctoFieldTest.setUp.MyBadObj.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "some_field": []
            }
        },
        "RcvPeriodoTributarioFieldTest.setUp.MyObj.__init__": {
            "name": "__init__",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "periodo_tributario": [
                    "bool",
                    "int",
                    "List[str]",
                    "float"
                ],
                "other_field": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "list",
                    "set"
                ]
            }
        },
        "RcvPeriodoTributarioFieldTest.setUp.MyBadObj.__init__": {
            "name": "__init__",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "some_field": [
                    "int",
                    "str",
                    "AbstractSet[str]",
                    "Container[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Set[str]"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_libs_crypto_utils.py": {
        "FunctionsTest.test_add_pem_cert_header_footer": {
            "name": "test_add_pem_cert_header_footer",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_remove_pem_cert_header_footer": {
            "name": "test_remove_pem_cert_header_footer",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_der_x509_cert_ok": {
            "name": "test_load_der_x509_cert_ok",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_der_x509_cert_ok_cert_real_dte_1": {
            "name": "test_load_der_x509_cert_ok_cert_real_dte_1",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_der_x509_cert_ok_cert_real_dte_3": {
            "name": "test_load_der_x509_cert_ok_cert_real_dte_3",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_der_x509_cert_ok_prueba_sii": {
            "name": "test_load_der_x509_cert_ok_prueba_sii",
            "location": 719,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_der_x509_cert_fail_type_error": {
            "name": "test_load_der_x509_cert_fail_type_error",
            "location": 910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_der_x509_cert_fail_value_error": {
            "name": "test_load_der_x509_cert_fail_value_error",
            "location": 915,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_pem_x509_cert_ok": {
            "name": "test_load_pem_x509_cert_ok",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_pem_x509_cert_ok_cert_real_dte_1": {
            "name": "test_load_pem_x509_cert_ok_cert_real_dte_1",
            "location": 934,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_pem_x509_cert_ok_cert_real_dte_3": {
            "name": "test_load_pem_x509_cert_ok_cert_real_dte_3",
            "location": 948,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_pem_x509_cert_ok_prueba_sii": {
            "name": "test_load_pem_x509_cert_ok_prueba_sii",
            "location": 962,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_pem_x509_cert_ok_str_ascii": {
            "name": "test_load_pem_x509_cert_ok_str_ascii",
            "location": 976,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_pem_x509_cert_ok_str_utf8": {
            "name": "test_load_pem_x509_cert_ok_str_utf8",
            "location": 984,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_pem_x509_cert_fail_type_error": {
            "name": "test_load_pem_x509_cert_fail_type_error",
            "location": 992,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_load_pem_x509_cert_fail_value_error": {
            "name": "test_load_pem_x509_cert_fail_value_error",
            "location": 997,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_x509_cert_der_to_pem_pem_to_der_ok_1": {
            "name": "test_x509_cert_der_to_pem_pem_to_der_ok_1",
            "location": 1009,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_x509_cert_der_to_pem_pem_to_der_ok_cert_real_dte_1": {
            "name": "test_x509_cert_der_to_pem_pem_to_der_ok_cert_real_dte_1",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_x509_cert_der_to_pem_pem_to_der_ok_cert_real_dte_3": {
            "name": "test_x509_cert_der_to_pem_pem_to_der_ok_cert_real_dte_3",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_x509_cert_der_to_pem_pem_to_der_ok_prueba_sii": {
            "name": "test_x509_cert_der_to_pem_pem_to_der_ok_prueba_sii",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_x509_cert_der_to_pem_type_error": {
            "name": "test_x509_cert_der_to_pem_type_error",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_x509_cert_pem_to_der_type_error": {
            "name": "test_x509_cert_pem_to_der_type_error",
            "location": 1074,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_x509_cert_pem_to_der_valuetype_error": {
            "name": "test_x509_cert_pem_to_der_valuetype_error",
            "location": 1079,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_add_pem_cert_header_footer": {
            "name": "test_add_pem_cert_header_footer",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadPemX509CertTest.test_remove_pem_cert_header_footer": {
            "name": "test_remove_pem_cert_header_footer",
            "location": 1095,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_libs_csv_utils.py": {
        "FunctionsTest.test_create_csv_dict_reader": {
            "name": "test_create_csv_dict_reader",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_libs_dataclass_utils.py": {
        "NotADataclassWithMixin.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DcDeepCompareTest.test__dc_deep_compare_ok": {
            "name": "test__dc_deep_compare_ok",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DcDeepCompareTest.test_func_ok": {
            "name": "test_func_ok",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DcDeepCompareTest.test_mixin_ok": {
            "name": "test_mixin_ok",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DcDeepCompareTest.test__dc_deep_compare_type_mismatch": {
            "name": "test__dc_deep_compare_type_mismatch",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DcDeepCompareTest.test_func_not_a_dataclass": {
            "name": "test_func_not_a_dataclass",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DcDeepCompareTest.test_mixin_self_not_a_dataclass": {
            "name": "test_mixin_self_not_a_dataclass",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DcDeepCompareTest.test_mixin_value_not_a_dataclass": {
            "name": "test_mixin_value_not_a_dataclass",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_libs_encoding_utils.py": {
        "FunctionsTest.test_clean_base64": {
            "name": "test_clean_base64",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_decode_base64_strict": {
            "name": "test_decode_base64_strict",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_base64": {
            "name": "test_validate_base64",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_libs_io_utils.py": {
        "FunctionsTest.test_with_encoding_utf8": {
            "name": "test_with_encoding_utf8",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_with_mode_x": {
            "name": "test_with_mode_x",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_libs_json_utils.py": {},
    "lib-cl-sii-python-master/tests/test_libs_mm_utils.py": {
        "CustomMarshmallowDateFieldTest.test_x": {
            "name": "test_x",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_no_unexpected_input_fields": {
            "name": "test_validate_no_unexpected_input_fields",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_libs_rows_processing.py": {
        "FunctionsTest.test_csv_rows_mm_deserialization_iterator": {
            "name": "test_csv_rows_mm_deserialization_iterator",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_rows_mm_deserialization_iterator": {
            "name": "test_rows_mm_deserialization_iterator",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_libs_tz_utils.py": {
        "FunctionsTest.test_get_now_tz_aware": {
            "name": "test_get_now_tz_aware",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_convert_naive_dt_to_tz_aware": {
            "name": "test_convert_naive_dt_to_tz_aware",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_convert_tz_aware_dt_to_naive": {
            "name": "test_convert_tz_aware_dt_to_naive",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_dt_is_aware": {
            "name": "test_dt_is_aware",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_dt_is_naive": {
            "name": "test_dt_is_naive",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_dt_tz": {
            "name": "test_validate_dt_tz",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_validate_dt_tz_tzinfo_zone_attribute_check": {
            "name": "test_validate_dt_tz_tzinfo_zone_attribute_check",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_libs_xml_utils.py": {
        "FunctionParseUntrustedXmlTests.test_parse_untrusted_xml_valid": {
            "name": "test_parse_untrusted_xml_valid",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseUntrustedXmlTests.test_bytes_text": {
            "name": "test_bytes_text",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseUntrustedXmlTests.test_attack_billion_laughs_1": {
            "name": "test_attack_billion_laughs_1",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseUntrustedXmlTests.test_attack_billion_laughs_2": {
            "name": "test_attack_billion_laughs_2",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseUntrustedXmlTests.test_attack_quadratic_blowup": {
            "name": "test_attack_quadratic_blowup",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseUntrustedXmlTests.test_attack_external_entity_expansion_remote": {
            "name": "test_attack_external_entity_expansion_remote",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionParseUntrustedXmlTests.test_type_error": {
            "name": "test_type_error",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.setUpClass": {
            "name": "setUpClass",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "Callable",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "FunctionVerifyXmlSignatureTest.test_ok_external_trusted_cert": {
            "name": "test_ok_external_trusted_cert",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_ok_cert_in_signature": {
            "name": "test_ok_cert_in_signature",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_cert_type_error": {
            "name": "test_fail_cert_type_error",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_xml_doc_type_error": {
            "name": "test_fail_xml_doc_type_error",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_verify_with_other_cert": {
            "name": "test_fail_verify_with_other_cert",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_bad_cert_included": {
            "name": "test_bad_cert_included",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_replaced_cert": {
            "name": "test_fail_replaced_cert",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_included_cert_not_from_a_known_ca": {
            "name": "test_fail_included_cert_not_from_a_known_ca",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_signed_data_modified": {
            "name": "test_fail_signed_data_modified",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_xml_doc_without_signature_1": {
            "name": "test_xml_doc_without_signature_1",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_xml_doc_without_signature_2": {
            "name": "test_fail_xml_doc_without_signature_2",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_xml_doc_with_too_many_signatures": {
            "name": "test_fail_xml_doc_with_too_many_signatures",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_xml_doc_with_too_many_signatures_force_verification": {
            "name": "test_fail_xml_doc_with_too_many_signatures_force_verification",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyXmlSignatureTest.test_fail_custom_xml_verifier_invalid_class": {
            "name": "test_fail_custom_xml_verifier_invalid_class",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rcv_constants.py": {
        "RcvKindTest.test_members": {
            "name": "test_members",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvKindTest.test_values_type": {
            "name": "test_values_type",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvKindTest.test_is_estado_contable_compatible": {
            "name": "test_is_estado_contable_compatible",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcEstadoContableTest.test_members": {
            "name": "test_members",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcEstadoContableTest.test_values_type": {
            "name": "test_values_type",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoTest.test_members": {
            "name": "test_members",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoTest.test_values_type": {
            "name": "test_values_type",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoTest.test_of_some_member": {
            "name": "test_of_some_member",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvTipoDoctoTest.test_as_tipo_dte": {
            "name": "test_as_tipo_dte",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rcv_data_models.py": {
        "PeriodoTributarioTest.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodoTributarioTest.test_validate_year_range": {
            "name": "test_validate_year_range",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodoTributarioTest.test_validate_month_range": {
            "name": "test_validate_month_range",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvDetalleEntryTest.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvDetalleEntryTest.test_validate_folio_range": {
            "name": "test_validate_folio_range",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcvDetalleEntryTest.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RvDetalleEntryTest.setUp": {
            "name": "setUp",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RvDetalleEntryTest.test_constants_match": {
            "name": "test_constants_match",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RvDetalleEntryTest.test_validate_receptor_razon_social_empty": {
            "name": "test_validate_receptor_razon_social_empty",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RvDetalleEntryTest.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcRegistroDetalleEntryTest.setUp": {
            "name": "setUp",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcRegistroDetalleEntryTest.test_constants_match": {
            "name": "test_constants_match",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcRegistroDetalleEntryTest.test_validate_emisor_razon_social_empty": {
            "name": "test_validate_emisor_razon_social_empty",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcRegistroDetalleEntryTest.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcNoIncluirDetalleEntryTest.setUp": {
            "name": "setUp",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcReclamadoDetalleEntryTest.setUp": {
            "name": "setUp",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcReclamadoDetalleEntryTest.test_constants_match": {
            "name": "test_constants_match",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RcReclamadoDetalleEntryTest.test_validate_emisor_razon_social_empty": {
            "name": "test_validate_emisor_razon_social_empty",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcReclamadoDetalleEntryTest.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcPendienteDetalleEntryTest.setUp": {
            "name": "setUp",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcPendienteDetalleEntryTest.test_validate_emisor_razon_social_empty": {
            "name": "test_validate_emisor_razon_social_empty",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rcv_parse_csv.py": {
        "FunctionsTest.test_parse_rcv_venta_csv_file": {
            "name": "test_parse_rcv_venta_csv_file",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_parse_rcv_venta_csv_file_receptor_rz_leading_trailing_whitespace": {
            "name": "test_parse_rcv_venta_csv_file_receptor_rz_leading_trailing_whitespace",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest._test_parse_rcv_compra_csv_file_emisor_rz_leading_trailing_whitespace": {
            "name": "_test_parse_rcv_compra_csv_file_emisor_rz_leading_trailing_whitespace",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parse_rcv_compra_csv_file_function": [
                    "bool",
                    "BinaryIO"
                ],
                "rcv_file_path": []
            }
        },
        "FunctionsTest.test_parse_rcv_compra_registro_csv_file": {
            "name": "test_parse_rcv_compra_registro_csv_file",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_parse_rcv_compra_registro_csv_file_emisor_rz_leading_trailing_whitespace": {
            "name": "test_parse_rcv_compra_registro_csv_file_emisor_rz_leading_trailing_whitespace",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_parse_rcv_compra_no_incluir_csv_file": {
            "name": "test_parse_rcv_compra_no_incluir_csv_file",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_parse_rcv_compra_no_incluir_csv_file_emisor_rz_leading_trailing_whitespace": {
            "name": "test_parse_rcv_compra_no_incluir_csv_file_emisor_rz_leading_trailing_whitespace",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_parse_rcv_compra_reclamado_csv_file": {
            "name": "test_parse_rcv_compra_reclamado_csv_file",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_parse_rcv_compra_reclamado_csv_file_emisor_rz_leading_trailing_whitespace": {
            "name": "test_parse_rcv_compra_reclamado_csv_file_emisor_rz_leading_trailing_whitespace",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_parse_rcv_compra_pendiente_csv_file": {
            "name": "test_parse_rcv_compra_pendiente_csv_file",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_parse_rcv_compra_pendiente_csv_file_emisor_rz_leading_trailing_whitespace": {
            "name": "test_parse_rcv_compra_pendiente_csv_file_emisor_rz_leading_trailing_whitespace",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test__parse_rcv_csv_file": {
            "name": "test__parse_rcv_csv_file",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rtc_constants.py": {
        "TipoDteCediblesTest.test_all_are_factura": {
            "name": "test_all_are_factura",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rtc_data_models.py": {
        "CesionNaturalKeyTest._set_obj_1": {
            "name": "_set_obj_1",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionNaturalKeyTest.test_create_new_empty_instance": {
            "name": "test_create_new_empty_instance",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionNaturalKeyTest.test_str_and_repr": {
            "name": "test_str_and_repr",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionNaturalKeyTest.test_as_dict": {
            "name": "test_as_dict",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionNaturalKeyTest.test_slug": {
            "name": "test_slug",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionNaturalKeyTest.test_validate_dte_tipo_dte": {
            "name": "test_validate_dte_tipo_dte",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionNaturalKeyTest.test_validate_seq": {
            "name": "test_validate_seq",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKeyTest._set_obj_1": {
            "name": "_set_obj_1",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKeyTest.test_create_new_empty_instance": {
            "name": "test_create_new_empty_instance",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKeyTest.test_str_and_repr": {
            "name": "test_str_and_repr",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKeyTest.test_as_dict": {
            "name": "test_as_dict",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKeyTest.test_slug": {
            "name": "test_slug",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKeyTest.test_validate_dte_tipo_dte": {
            "name": "test_validate_dte_tipo_dte",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKeyTest.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAltNaturalKeyTest.test_truncate_fecha_cesion_dt_to_minutes": {
            "name": "test_truncate_fecha_cesion_dt_to_minutes",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test._set_obj_1": {
            "name": "_set_obj_1",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test.test_create_new_empty_instance": {
            "name": "test_create_new_empty_instance",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test.test_str_and_repr": {
            "name": "test_str_and_repr",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test.test_as_dict": {
            "name": "test_as_dict",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test.test_slug": {
            "name": "test_slug",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test.test_natural_key": {
            "name": "test_natural_key",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test.test_alt_natural_key": {
            "name": "test_alt_natural_key",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test.test_validate_dte_tipo_dte": {
            "name": "test_validate_dte_tipo_dte",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test.test_validate_seq": {
            "name": "test_validate_seq",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL0Test.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1Test._set_obj_1": {
            "name": "_set_obj_1",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1Test.test_create_new_empty_instance": {
            "name": "test_create_new_empty_instance",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1Test.test_str_and_repr": {
            "name": "test_str_and_repr",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1Test.test_as_dict": {
            "name": "test_as_dict",
            "location": 595,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1Test.test_as_cesion_l0": {
            "name": "test_as_cesion_l0",
            "location": 617,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1Test.test_as_dte_data_l1": {
            "name": "test_as_dte_data_l1",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1Test.test_validate_monto_cedido": {
            "name": "test_validate_monto_cedido",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL1Test.test_validate_monto_cedido_does_not_exceed_dte_monto_total": {
            "name": "test_validate_monto_cedido_does_not_exceed_dte_monto_total",
            "location": 677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2Test._set_obj_1": {
            "name": "_set_obj_1",
            "location": 707,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2Test.test_create_new_empty_instance": {
            "name": "test_create_new_empty_instance",
            "location": 755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2Test.test_str_and_repr": {
            "name": "test_str_and_repr",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2Test.test_as_dict": {
            "name": "test_as_dict",
            "location": 793,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2Test.test_as_cesion_l1": {
            "name": "test_as_cesion_l1",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2Test.test_as_dte_data_l2": {
            "name": "test_as_dte_data_l2",
            "location": 861,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2Test.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 878,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionL2Test.test_validate_contribuyente_razon_social": {
            "name": "test_validate_contribuyente_razon_social",
            "location": 953,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rtc_data_models_aec.py": {
        "CesionAecXmlTest._set_obj_1": {
            "name": "_set_obj_1",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAecXmlTest._set_obj_2": {
            "name": "_set_obj_2",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAecXmlTest.test_create_new_empty_instance": {
            "name": "test_create_new_empty_instance",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAecXmlTest.test_natural_key": {
            "name": "test_natural_key",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAecXmlTest.test_alt_natural_key": {
            "name": "test_alt_natural_key",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionAecXmlTest.test_as_cesion_l2": {
            "name": "test_as_cesion_l2",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest._set_obj_1": {
            "name": "_set_obj_1",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_create_new_empty_instance": {
            "name": "test_create_new_empty_instance",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_natural_key": {
            "name": "test_natural_key",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_alt_natural_key": {
            "name": "test_alt_natural_key",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_slug": {
            "name": "test_slug",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_last_cesion": {
            "name": "test_last_cesion",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_as_cesion_l2": {
            "name": "test_as_cesion_l2",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_validate_dte_tipo_dte": {
            "name": "test_validate_dte_tipo_dte",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_validate_datetime_tz": {
            "name": "test_validate_datetime_tz",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_validate_cesiones_min_items": {
            "name": "test_validate_cesiones_min_items",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_validate_cesiones_seq_order": {
            "name": "test_validate_cesiones_seq_order",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_validate_dte_matches_cesiones_dtes": {
            "name": "test_validate_dte_matches_cesiones_dtes",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlTest.test_validate_last_cesion_matches_some_fields": {
            "name": "test_validate_last_cesion_matches_some_fields",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rtc_data_models_cesiones_periodo.py": {
        "CesionesPeriodoEntryTest.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntryTest.test_init_ok_1": {
            "name": "test_init_ok_1",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntryTest.test_init_ok_2": {
            "name": "test_init_ok_2",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntryTest.test_init_error_monto_cedido_1": {
            "name": "test_init_error_monto_cedido_1",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntryTest.test_init_error_monto_cedido_2": {
            "name": "test_init_error_monto_cedido_2",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntryTest.test_init_error_dte_tipo_dte_1": {
            "name": "test_init_error_dte_tipo_dte_1",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntryTest.test_as_dte_data_l1_ok_1": {
            "name": "test_as_dte_data_l1_ok_1",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntryTest.test_as_dte_data_l1_ok_2": {
            "name": "test_as_dte_data_l1_ok_2",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntryTest.test_as_cesion_l2_ok_1": {
            "name": "test_as_cesion_l2_ok_1",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CesionesPeriodoEntryTest.test_as_cesion_l2_ok_2": {
            "name": "test_as_cesion_l2_ok_2",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rtc_parse_aec.py": {
        "AecXmlSchemaTest.test_AEC_XML_SCHEMA_OBJ": {
            "name": "test_AEC_XML_SCHEMA_OBJ",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlValidatorTest._set_obj_1": {
            "name": "_set_obj_1",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlValidatorTest._set_obj_2": {
            "name": "_set_obj_2",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlValidatorTest.test_validate_aec_xml_ok_1": {
            "name": "test_validate_aec_xml_ok_1",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlValidatorTest.test_validate_aec_xml_ok_2": {
            "name": "test_validate_aec_xml_ok_2",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlValidatorTest.test_validate_aec_xml_fail": {
            "name": "test_validate_aec_xml_fail",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlParserTest._set_obj_1": {
            "name": "_set_obj_1",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlParserTest._set_obj_2": {
            "name": "_set_obj_2",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlParserTest.test_parse_aec_xml_ok_1": {
            "name": "test_parse_aec_xml_ok_1",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AecXmlParserTest.test_parse_aec_xml_ok_2": {
            "name": "test_parse_aec_xml_ok_2",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rtc_xml_utils.py": {
        "AecXmlValidatorTest.setUpClass": {
            "name": "setUpClass",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Iterable[bytes]",
                    "str"
                ]
            }
        },
        "AecXmlValidatorTest.test_xml_utils_verify_xml_signature_ok_external_trusted_cert": {
            "name": "test_xml_utils_verify_xml_signature_ok_external_trusted_cert",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyAecSignatureTest.setUpClass": {
            "name": "setUpClass",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Iterable[bytes]",
                    "str"
                ]
            }
        },
        "FunctionVerifyAecSignatureTest.test_ok_external_trusted_cert": {
            "name": "test_ok_external_trusted_cert",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyAecSignatureTest.test_ok_for_bad_certificate_value": {
            "name": "test_ok_for_bad_certificate_value",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionVerifyAecSignatureTest.test_fail_for_missing_certificate_value": {
            "name": "test_fail_for_missing_certificate_value",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rut.py": {
        "RutTest.setUpClass": {
            "name": "setUpClass",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[List[Any]]",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "RutTest.test_fail_type_error": {
            "name": "test_fail_type_error",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_ok_same_type": {
            "name": "test_ok_same_type",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_instance_empty_string": {
            "name": "test_instance_empty_string",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_instance_invalid_rut_format": {
            "name": "test_instance_invalid_rut_format",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_instance_short_rut": {
            "name": "test_instance_short_rut",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_instance_long_rut": {
            "name": "test_instance_long_rut",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_instance_validate_dv_ok": {
            "name": "test_instance_validate_dv_ok",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_instance_validate_dv_in_lowercase": {
            "name": "test_instance_validate_dv_in_lowercase",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_instance_validate_dv_raise_exception": {
            "name": "test_instance_validate_dv_raise_exception",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_canonical": {
            "name": "test_canonical",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_verbose": {
            "name": "test_verbose",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_digits": {
            "name": "test_digits",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_digits_with_dots": {
            "name": "test_digits_with_dots",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_dv": {
            "name": "test_dv",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_dv_upper": {
            "name": "test_dv_upper",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__str__": {
            "name": "test__str__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__repr__": {
            "name": "test__repr__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__lt__true": {
            "name": "test__lt__true",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__lt__false": {
            "name": "test__lt__false",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__lt__not_rut_instance": {
            "name": "test__lt__not_rut_instance",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__le__true": {
            "name": "test__le__true",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__le__false": {
            "name": "test__le__false",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__le__not_rut_instance": {
            "name": "test__le__not_rut_instance",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__eq__true": {
            "name": "test__eq__true",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__eq__false": {
            "name": "test__eq__false",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__eq__not_rut_instance": {
            "name": "test__eq__not_rut_instance",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__gt__true": {
            "name": "test__gt__true",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__gt__false": {
            "name": "test__gt__false",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__gt__not_rut_instance": {
            "name": "test__gt__not_rut_instance",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__ge__true": {
            "name": "test__ge__true",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__ge__false": {
            "name": "test__ge__false",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__ge__not_rut_instance": {
            "name": "test__ge__not_rut_instance",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test__hash__": {
            "name": "test__hash__",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_clean_str_lowercase": {
            "name": "test_clean_str_lowercase",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_clean_type_error": {
            "name": "test_clean_type_error",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_clean_str_leading_zeros": {
            "name": "test_clean_str_leading_zeros",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_calc_dv_ok": {
            "name": "test_calc_dv_ok",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_calc_dv_string_uppercase": {
            "name": "test_calc_dv_string_uppercase",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_calc_dv_string_lowercase": {
            "name": "test_calc_dv_string_lowercase",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RutTest.test_random": {
            "name": "test_random",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_rut_crypto_utils.py": {
        "FunctionsTest.test_get_subject_rut_from_certificate_pfx_ok": {
            "name": "test_get_subject_rut_from_certificate_pfx_ok",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_get_subject_rut_from_certificate_pfx_fails_if_rut_info_is_missing": {
            "name": "test_get_subject_rut_from_certificate_pfx_fails_if_rut_info_is_missing",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionsTest.test_get_subject_rut_from_certificate_pfx_does_not_throw_attribute_error_if_has_object_without_type_id": {
            "name": "test_get_subject_rut_from_certificate_pfx_does_not_throw_attribute_error_if_has_object_without_type_id",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lib-cl-sii-python-master/tests/test_scripts_canonicalize_xml_file.py": {},
    "lib-cl-sii-python-master/tests/test_scripts_clean_dte_xml_file.py": {},
    "lib-cl-sii-python-master/tests/utils.py": {
        "get_test_file_path": {
            "name": "get_test_file_path",
            "location": 9,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "read_test_file_bytes": {
            "name": "read_test_file_bytes",
            "location": 17,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "read_test_file_str_ascii": {
            "name": "read_test_file_str_ascii",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "read_test_file_str_utf8": {
            "name": "read_test_file_str_utf8",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "read_test_file_json_dict": {
            "name": "read_test_file_json_dict",
            "location": 50,
            "return": [
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "lib-cl-sii-python-master/tests/__init__.py": {}
}
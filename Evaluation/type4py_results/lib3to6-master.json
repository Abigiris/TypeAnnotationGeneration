{
    "lib3to6-master/example.py": {
        "hello": {
            "name": "hello",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "who": [
                    "str",
                    "bool",
                    "float",
                    "bytes"
                ]
            }
        }
    },
    "lib3to6-master/setup.py": {
        "project_path": {
            "name": "project_path",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "lib3to6-master/my-module/setup.py": {},
    "lib3to6-master/my-module/my_module/__init__.py": {
        "hello": {
            "name": "hello",
            "location": 4,
            "return": [],
            "arguments": {
                "who": []
            }
        }
    },
    "lib3to6-master/scratch/pep563.py": {
        "bar": {
            "name": "bar",
            "location": 48,
            "return": [
                "Bar"
            ],
            "arguments": {
                "b": [
                    "str",
                    "float",
                    "int"
                ],
                "s": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "baz": {
            "name": "baz",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "before_foo": {
            "name": "before_foo",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "foo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "after_foo": {
            "name": "after_foo",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "foo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Foo.doer": {
            "name": "doer",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "foo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Foo.doer.nested_doer": {
            "name": "nested_doer",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "foo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "lib3to6-master/scratch/pep563_debug.py": {
        "bar": {
            "name": "bar",
            "location": 22,
            "return": [
                "Bar"
            ],
            "arguments": {
                "b": [
                    "str",
                    "float",
                    "int"
                ],
                "s": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Foo.doer": {
            "name": "doer",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "foo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Foo.doer.nested_doer": {
            "name": "nested_doer",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "foo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "lib3to6-master/scripts/exit_0_if_empty.py": {},
    "lib3to6-master/src/lib3to6/checkers.py": {
        "_iter_scope_names": {
            "name": "_iter_scope_names",
            "location": 27,
            "return": [
                "typing.Iterable[typing.Tuple[builtins.str, ast.AST]]"
            ],
            "arguments": {
                "tree": []
            }
        },
        "_raise_if_complex_named_tuple": {
            "name": "_raise_if_complex_named_tuple",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "dict",
                    "str"
                ]
            }
        },
        "NoStarImports.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "common.BuildContext"
                ],
                "tree": []
            }
        },
        "NoOverriddenFixerImportsChecker.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "common.BuildContext"
                ],
                "tree": [
                    "bool"
                ]
            }
        },
        "NoOverriddenBuiltinsChecker.__call__": {
            "name": "__call__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "common.BuildContext"
                ],
                "tree": [
                    "bool"
                ]
            }
        },
        "NoOpenWithEncodingChecker.__call__": {
            "name": "__call__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": []
            }
        },
        "NoAsyncAwait.__call__": {
            "name": "__call__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "dict"
                ],
                "tree": []
            }
        },
        "NoYieldFromChecker.__call__": {
            "name": "__call__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": []
            }
        },
        "NoMatMultOpChecker.__call__": {
            "name": "__call__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "common.BuildContext"
                ],
                "tree": []
            }
        },
        "NoComplexNamedTuple.__call__": {
            "name": "__call__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "common.BuildContext"
                ],
                "tree": []
            }
        }
    },
    "lib3to6-master/src/lib3to6/checkers_backports.py": {
        "parse_version": {
            "name": "parse_version",
            "location": 33,
            "return": [
                "Optional[float]",
                "dict"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "_iter_module_names": {
            "name": "_iter_module_names",
            "location": 67,
            "return": [
                "typing.Iterable[builtins.str]"
            ],
            "arguments": {
                "node": [
                    "Tuple[object]"
                ]
            }
        },
        "_iter_maybe_unusable_modules": {
            "name": "_iter_maybe_unusable_modules",
            "location": 77,
            "return": [
                "typing.Iterable[typing.Tuple[builtins.str, ModuleVersionInfo]]"
            ],
            "arguments": {
                "node": [
                    "Container[str]",
                    "List[str]"
                ]
            }
        },
        "NoUnusableImportsChecker.__call__": {
            "name": "__call__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Optional[List[Any]]",
                    "Optional[Set[str]]",
                    "Optional[list]"
                ],
                "tree": []
            }
        }
    },
    "lib3to6-master/src/lib3to6/checker_base.py": {
        "CheckerBase.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "common.BuildContext"
                ],
                "tree": [
                    "common.BuildContext"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/common.py": {
        "init_build_context": {
            "name": "init_build_context",
            "location": 58,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "float",
                "bool"
            ],
            "arguments": {
                "target_version": [
                    "bool"
                ],
                "cache_enabled": [
                    "bool"
                ],
                "default_mode": [
                    "bool"
                ],
                "fixers": [
                    "bool"
                ],
                "checkers": [
                    "bool"
                ],
                "install_requires": [
                    "bool"
                ],
                "filepath": [
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, Dict]"
                ]
            }
        },
        "get_node_lineno": {
            "name": "get_node_lineno",
            "location": 86,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Tuple[type]",
                "int",
                "bytes"
            ],
            "arguments": {
                "node": [
                    "int"
                ],
                "parent": []
            }
        },
        "CheckError.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Type[MutableMapping]",
                    "Callable",
                    "Set[str]"
                ],
                "node": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[Type]",
                    "Iterable[Dict[str, Any]]",
                    "List[str]"
                ],
                "parent": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[Type]",
                    "Iterable[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "FixerError.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Optional[str]",
                    "str"
                ],
                "node": [
                    "Callable",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "parent": [
                    "bool",
                    "type"
                ],
                "filepath": [
                    "Callable",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "FixerError.__str__": {
            "name": "__str__",
            "location": 126,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apply_since": [
                    "int",
                    "List[int]",
                    "dict"
                ],
                "apply_until": [
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "works_since": [
                    "Optional[bool]",
                    "Optional[float]",
                    "Any",
                    "Optional[str]"
                ],
                "works_until": [
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "VersionInfo.is_required_for": {
            "name": "is_required_for",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Union[Set[int], List[int], Dict[int, Any]]"
                ]
            }
        },
        "VersionInfo.is_compatible_with": {
            "name": "is_compatible_with",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Optional[Callable[[Any, Any], None]]",
                    "Optional[int]"
                ]
            }
        },
        "VersionInfo.is_applicable_to": {
            "name": "is_applicable_to",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source_version": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ],
                "target_version": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/fixers.py": {
        "is_const_node": {
            "name": "is_const_node",
            "location": 70,
            "return": [
                "bool",
                "Callable[..., None]",
                "Optional[str]"
            ],
            "arguments": {
                "node": []
            }
        },
        "_FRAFContext.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_classes": [
                    "bool",
                    "type",
                    "set",
                    "Optional[str]",
                    "int",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "_FRAFContext.is_forward_ref": {
            "name": "is_forward_ref",
            "location": 90,
            "return": [
                "bool",
                "Tuple[bool, str]",
                "Dict[str, str]",
                "Tuple[str, bool]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type",
                    "dict"
                ]
            }
        },
        "_FRAFContext.update_index_elts": {
            "name": "update_index_elts",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elts": [
                    "str",
                    "int",
                    "List[Tuple[str, int, int]]",
                    "list"
                ]
            }
        },
        "_FRAFContext.update_subscript": {
            "name": "update_subscript",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool"
                ]
            }
        },
        "_FRAFContext.update_index": {
            "name": "update_index",
            "location": 131,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "Dict[str, str]",
                    "Iterable[Iterable[T]]",
                    "Union[int, float]"
                ]
            }
        },
        "_FRAFContext.update_annotation_refs": {
            "name": "update_annotation_refs",
            "location": 147,
            "return": [
                "str",
                "Callable",
                "Sequence[str]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "attrname": [
                    "str"
                ]
            }
        },
        "_FRAFContext.remove_forward_references": {
            "name": "remove_forward_references",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "list",
                    "bytes"
                ]
            }
        },
        "ForwardReferenceAnnotationsFixer.apply_fix": {
            "name": "apply_fix",
            "location": 191,
            "return": [
                "str",
                "nevergrad.common.Any"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": [
                    "dict"
                ]
            }
        },
        "RemoveFunctionDefAnnotationsFixer.apply_fix": {
            "name": "apply_fix",
            "location": 206,
            "return": [
                "str",
                "nevergrad.common.Any"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": []
            }
        },
        "RemoveAnnAssignFixer.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 228,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "ShortToLongFormSuperFixer.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 246,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "InlineKWOnlyArgsFixer.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 282,
            "return": [],
            "arguments": {
                "node": [
                    "List[Type]",
                    "Callable[..., None]"
                ]
            }
        },
        "NewStyleClassesFixer.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ItertoolsBuiltinsFixer.apply_fix": {
            "name": "apply_fix",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": [
                    "Exception"
                ]
            }
        },
        "ItertoolsBuiltinsFixer.visit_Name": {
            "name": "visit_Name",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NamedTupleClassToAssignFixer.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedTupleClassToAssignFixer.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NamedTupleClassToAssignFixer.visit_Import": {
            "name": "visit_Import",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NamedTupleClassToAssignFixer.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 399,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[str]"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/fixers_builtin_rename.py": {
        "BuiltinsRenameFixerBase.apply_fix": {
            "name": "apply_fix",
            "location": 18,
            "return": [
                "str",
                "nevergrad.common.Any"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "tuple"
                ],
                "tree": []
            }
        }
    },
    "lib3to6-master/src/lib3to6/fixers_fstring.py": {
        "FStringToStrFormatFixer._formatted_value_str": {
            "name": "_formatted_value_str",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fmt_val_node": [
                    "bool",
                    "List[Dict]",
                    "List[Dict[str, Any]]"
                ],
                "arg_nodes": [
                    "List[str]",
                    "int",
                    "list",
                    "List[object]",
                    "Set[str]"
                ]
            }
        },
        "FStringToStrFormatFixer._joined_str_str": {
            "name": "_joined_str_str",
            "location": 34,
            "return": [
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "joined_str_node": [
                    "str",
                    "Dict[str, dict]",
                    "Optional[dict]",
                    "int"
                ],
                "arg_nodes": [
                    "str",
                    "float"
                ]
            }
        },
        "FStringToStrFormatFixer.visit_JoinedStr": {
            "name": "visit_JoinedStr",
            "location": 45,
            "return": [
                "str",
                "Union[str, List[Any]]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/fixers_future.py": {
        "FutureImportFixerBase.apply_fix": {
            "name": "apply_fix",
            "location": 17,
            "return": [
                "str",
                "nevergrad.common.Any"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": []
            }
        },
        "RemoveUnsupportedFuturesFixer.apply_fix": {
            "name": "apply_fix",
            "location": 89,
            "return": [
                "str",
                "nevergrad.common.Any"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": [
                    "str"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/fixers_import_fallback.py": {
        "_try_fallback": {
            "name": "_try_fallback",
            "location": 13,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "node": [
                    "str"
                ],
                "fallback_node": [
                    "str"
                ]
            }
        },
        "ModuleImportFallbackFixerBase.visit_Import": {
            "name": "visit_Import",
            "location": 31,
            "return": [
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ModuleImportFallbackFixerBase.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 53,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "lib3to6-master/src/lib3to6/fixers_namedexpr.py": {
        "NamedExprFixer._extract_and_replace_named_exprs": {
            "name": "_extract_and_replace_named_exprs",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "NamedExprFixer._update": {
            "name": "_update",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodelist": [
                    "int",
                    "str",
                    "bytes",
                    "List[List[int]]",
                    "List[Tuple[str, int, int]]"
                ],
                "indent": [
                    "float",
                    "str",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "int",
                    "bool"
                ]
            }
        },
        "NamedExprFixer.apply_fix": {
            "name": "apply_fix",
            "location": 100,
            "return": [
                "str",
                "nevergrad.common.Any"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": []
            }
        }
    },
    "lib3to6-master/src/lib3to6/fixers_unpacking_generalization.py": {
        "_is_dict_call": {
            "name": "_is_dict_call",
            "location": 19,
            "return": [
                "bool",
                "Tuple[float, float, float]",
                "float",
                "Type[BaseException]"
            ],
            "arguments": {
                "node": []
            }
        },
        "_has_stararg_g12n": {
            "name": "_has_stararg_g12n",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": []
            }
        },
        "_has_starstarargs_g12n": {
            "name": "_has_starstarargs_g12n",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": []
            }
        },
        "_node_with_elts": {
            "name": "_node_with_elts",
            "location": 61,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "node": [],
                "new_elts": [
                    "str"
                ]
            }
        },
        "_node_with_binop": {
            "name": "_node_with_binop",
            "location": 75,
            "return": [
                "Optional[str]",
                "List[Callable]",
                "bool"
            ],
            "arguments": {
                "node": [],
                "binop": []
            }
        },
        "_is_stmtlist": {
            "name": "_is_stmtlist",
            "location": 90,
            "return": [
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "List[str]"
            ],
            "arguments": {
                "nodelist": []
            }
        },
        "_iter_walkable_fields": {
            "name": "_iter_walkable_fields",
            "location": 94,
            "return": [
                "typing.Iterable[typing.Any]"
            ],
            "arguments": {
                "node": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "_expand_stararg_g12n": {
            "name": "_expand_stararg_g12n",
            "location": 106,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "node": []
            }
        },
        "UnpackingGeneralizationsFixer.expand_starstararg_g12n": {
            "name": "expand_starstararg_g12n",
            "location": 183,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "UnpackingGeneralizationsFixer.visit_expr": {
            "name": "visit_expr",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "UnpackingGeneralizationsFixer.walk_stmtlist": {
            "name": "walk_stmtlist",
            "location": 292,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "stmtlist": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UnpackingGeneralizationsFixer.walk_node": {
            "name": "walk_node",
            "location": 301,
            "return": [
                "str",
                "Callable[..., T]",
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict"
                ]
            }
        },
        "UnpackingGeneralizationsFixer.walk_stmt": {
            "name": "walk_stmt",
            "location": 342,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "UnpackingGeneralizationsFixer.apply_fix": {
            "name": "apply_fix",
            "location": 374,
            "return": [
                "str",
                "nevergrad.common.Any"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": [
                    "str",
                    "Type"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/fixer_base.py": {
        "FixerBase.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixerBase.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": []
            }
        },
        "FixerBase.apply_fix": {
            "name": "apply_fix",
            "location": 36,
            "return": [
                "ast.Module"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": []
            }
        },
        "TransformerFixerBase.apply_fix": {
            "name": "apply_fix",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "tree": [
                    "Exception"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/packaging.py": {
        "eval_build_config": {
            "name": "eval_build_config",
            "location": 38,
            "return": [
                "str",
                "Callable",
                "list"
            ],
            "arguments": {}
        },
        "_ignore_tmp_files": {
            "name": "_ignore_tmp_files",
            "location": 70,
            "return": [
                "str",
                "Callable[..., str]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "names": [
                    "List[str]",
                    "str",
                    "Union[str, None]"
                ]
            }
        },
        "init_build_package_dir": {
            "name": "init_build_package_dir",
            "location": 92,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "local_package_dir": [
                    "common.PackageDir",
                    "Pattern[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "transpile_path": {
            "name": "transpile_path",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "IO",
                    "bool"
                ],
                "filepath": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "build_package": {
            "name": "build_package",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "cfg": [
                    "common.BuildConfig",
                    "str"
                ],
                "package": [
                    "str",
                    "bool",
                    "Union[Dict[str, Any], List[Any]]",
                    "Callable"
                ],
                "build_dir": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "build_packages": {
            "name": "build_packages",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "cfg": [
                    "common.BuildConfig",
                    "str",
                    "list"
                ],
                "build_package_dir": [
                    "common.PackageDir",
                    "Tuple[str, str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "fix": {
            "name": "fix",
            "location": 166,
            "return": [
                "str",
                "os.PathLike",
                "Optional[str]"
            ],
            "arguments": {
                "package_dir": [
                    "bool",
                    "list",
                    "str",
                    "Optional[str]"
                ],
                "target_version": [
                    "bool",
                    "str",
                    "Callable[[str, str], None]",
                    "Optional[str]"
                ],
                "install_requires": [
                    "bool",
                    "str",
                    "Callable[[str, str], None]",
                    "Optional[str]"
                ],
                "default_mode": [
                    "bool",
                    "str",
                    "Callable[[str, str], None]",
                    "Optional[str]"
                ]
            }
        },
        "build_py._get_outputs": {
            "name": "_get_outputs",
            "location": 191,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "build_py.run_3to6": {
            "name": "run_3to6",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "build_py.run": {
            "name": "run",
            "location": 220,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Distribution.get_command_class": {
            "name": "get_command_class",
            "location": 253,
            "return": [
                "str",
                "Dict[str, Type]",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/transpile.py": {
        "_parse_header_line": {
            "name": "_parse_header_line",
            "location": 49,
            "return": [
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "line_data": [
                    "str",
                    "bytes",
                    "Optional[Any]",
                    "Optional[dict]",
                    "Optional[float]",
                    "bool"
                ],
                "coding": [
                    "bool",
                    "str",
                    "List[Dict]",
                    "List[str]"
                ]
            }
        },
        "parse_module_header": {
            "name": "parse_module_header",
            "location": 61,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "module_source": [
                    "str",
                    "Dict[str, Dict]"
                ],
                "target_version": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "list",
                    "Iterable[bytes]",
                    "Callable"
                ]
            }
        },
        "normalize_name": {
            "name": "normalize_name",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "get_available_classes": {
            "name": "get_available_classes",
            "location": 114,
            "return": [
                "str",
                "Tuple[str]",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Dict[str, type]",
                    "type",
                    "Mapping[str, Any]"
                ],
                "clazz": [
                    "str",
                    "dict"
                ]
            }
        },
        "get_selected_names": {
            "name": "get_selected_names",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "names": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "available_names": [
                    "str",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "iter_fuzzy_selected_checkers": {
            "name": "iter_fuzzy_selected_checkers",
            "location": 154,
            "return": [
                "typing.Iterable[checker_base.CheckerBase]"
            ],
            "arguments": {
                "names": [
                    "str",
                    "type",
                    "Sequence[type]",
                    "Optional[str]"
                ]
            }
        },
        "iter_fuzzy_selected_fixers": {
            "name": "iter_fuzzy_selected_fixers",
            "location": 162,
            "return": [
                "typing.Iterable[fixer_base.FixerBase]"
            ],
            "arguments": {
                "names": [
                    "str",
                    "type",
                    "Sequence[type]",
                    "Optional[str]"
                ]
            }
        },
        "find_import_decls": {
            "name": "find_import_decls",
            "location": 170,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "node": [
                    "Optional[Any]"
                ]
            }
        },
        "parse_imports": {
            "name": "parse_imports",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tree": []
            }
        },
        "add_required_imports": {
            "name": "add_required_imports",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "int",
                    "Dict[str, Any]"
                ],
                "required_imports": [
                    "Dict[str, Any]",
                    "dict",
                    "OrderedDict"
                ]
            }
        },
        "add_module_declarations": {
            "name": "add_module_declarations",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "int",
                    "bool",
                    "str",
                    "Type[object]"
                ],
                "module_declarations": [
                    "T"
                ]
            }
        },
        "transpile_module": {
            "name": "transpile_module",
            "location": 334,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginName.Str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "module_source": [
                    "str",
                    "int",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "transpile_module_data": {
            "name": "transpile_module_data",
            "location": 379,
            "return": [
                "List[bytes]",
                "List[Dict[str, Any]]",
                "Set[int]",
                "int"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "bytes"
                ],
                "module_source_data": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/utils.py": {
        "dump_ast": {
            "name": "dump_ast",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [],
                "annotate_fields": [
                    "str"
                ],
                "include_attributes": [
                    "str"
                ],
                "indent": [
                    "str"
                ]
            }
        },
        "clean_whitespace": {
            "name": "clean_whitespace",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "fixture_str": [
                    "str"
                ]
            }
        },
        "parse_stmt": {
            "name": "parse_stmt",
            "location": 95,
            "return": [
                "bool",
                "int",
                "str",
                "Tuple[int, int]",
                "\"State\"",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "parsedump_ast": {
            "name": "parsedump_ast",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "code": [
                    "str",
                    "Dict[str, Dict[str, str]]"
                ],
                "mode": [
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "parsedump_source": {
            "name": "parsedump_source",
            "location": 107,
            "return": [
                "str",
                "Mapping[str, List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "code": [
                    "str",
                    "bytes"
                ],
                "mode": [
                    "str",
                    "bytes"
                ]
            }
        },
        "transpile_and_dump": {
            "name": "transpile_and_dump",
            "location": 112,
            "return": [
                "int",
                "Dict[str, str]",
                "bool",
                "List[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "ctx": [
                    "float",
                    "bool"
                ],
                "module_str": [
                    "str",
                    "bytes"
                ]
            }
        },
        "has_base_class": {
            "name": "has_base_class",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls_node": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "module_name": [
                    "str",
                    "Callable"
                ],
                "base_class_name": [
                    "str"
                ]
            }
        },
        "dump_ast._format": {
            "name": "_format",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "dict"
                ],
                "level": [
                    "str"
                ]
            }
        }
    },
    "lib3to6-master/src/lib3to6/__init__.py": {},
    "lib3to6-master/src/lib3to6/__main__.py": {
        "_configure_logging": {
            "name": "_configure_logging",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "bool",
                    "Match[Any]",
                    "List[dict]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_print_diff": {
            "name": "_print_diff",
            "location": 50,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "source_text": [
                    "str",
                    "type",
                    "Optional[str]",
                    "bool"
                ],
                "fixed_source_text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "target_version": [
                    "str",
                    "int"
                ],
                "diff": [
                    "bool",
                    "str"
                ],
                "in_place": [
                    "bool",
                    "str"
                ],
                "install_requires": [
                    "str",
                    "Sequence[str]"
                ],
                "source_files": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "default_mode": [
                    "str",
                    "Optional[str]"
                ],
                "verbose": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, int]",
                    "Optional[int]",
                    "List[List[int]]"
                ]
            }
        }
    },
    "lib3to6-master/stubs/ast.py": {
        "parse": {
            "name": "parse",
            "location": 15,
            "return": [],
            "arguments": {
                "source": [],
                "filename": [],
                "mode": []
            }
        },
        "copy_location": {
            "name": "copy_location",
            "location": 16,
            "return": [],
            "arguments": {
                "new_node": [],
                "old_node": []
            }
        },
        "dump": {
            "name": "dump",
            "location": 17,
            "return": [],
            "arguments": {
                "node": [],
                "annotate_fields": [],
                "include_attributes": []
            }
        },
        "fix_missing_locations": {
            "name": "fix_missing_locations",
            "location": 18,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "get_docstring": {
            "name": "get_docstring",
            "location": 19,
            "return": [],
            "arguments": {
                "node": [],
                "clean": []
            }
        },
        "increment_lineno": {
            "name": "increment_lineno",
            "location": 20,
            "return": [],
            "arguments": {
                "node": [],
                "n": []
            }
        },
        "iter_child_nodes": {
            "name": "iter_child_nodes",
            "location": 21,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "iter_fields": {
            "name": "iter_fields",
            "location": 22,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "literal_eval": {
            "name": "literal_eval",
            "location": 23,
            "return": [],
            "arguments": {
                "node_or_string": []
            }
        },
        "walk": {
            "name": "walk",
            "location": 24,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "NodeVisitor.visit": {
            "name": "visit",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NodeVisitor.generic_visit": {
            "name": "generic_visit",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NodeTransformer.generic_visit": {
            "name": "generic_visit",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "lib3to6-master/stubs/astor.py": {
        "to_source": {
            "name": "to_source",
            "location": 4,
            "return": [],
            "arguments": {
                "m": []
            }
        }
    },
    "lib3to6-master/stubs/pathlib2.py": {
        "PurePath.__hash__": {
            "name": "__hash__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.__lt__": {
            "name": "__lt__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PurePath.__le__": {
            "name": "__le__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PurePath.__gt__": {
            "name": "__gt__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PurePath.__ge__": {
            "name": "__ge__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PurePath.__truediv__": {
            "name": "__truediv__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PurePath.__bytes__": {
            "name": "__bytes__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.as_posix": {
            "name": "as_posix",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.as_uri": {
            "name": "as_uri",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.is_absolute": {
            "name": "is_absolute",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.is_reserved": {
            "name": "is_reserved",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.match": {
            "name": "match",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "path_pattern": []
            }
        },
        "PurePath.relative_to": {
            "name": "relative_to",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.with_name": {
            "name": "with_name",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PurePath.with_suffix": {
            "name": "with_suffix",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": []
            }
        },
        "PurePath.joinpath": {
            "name": "joinpath",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.parents": {
            "name": "parents",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.parent": {
            "name": "parent",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.__enter__": {
            "name": "__enter__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.__exit__": {
            "name": "__exit__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "Path.cwd": {
            "name": "cwd",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Path.stat": {
            "name": "stat",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.chmod": {
            "name": "chmod",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "Path.exists": {
            "name": "exists",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.glob": {
            "name": "glob",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Path.group": {
            "name": "group",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.is_dir": {
            "name": "is_dir",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.is_file": {
            "name": "is_file",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.is_symlink": {
            "name": "is_symlink",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.is_socket": {
            "name": "is_socket",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.is_fifo": {
            "name": "is_fifo",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.is_block_device": {
            "name": "is_block_device",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.is_char_device": {
            "name": "is_char_device",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.iterdir": {
            "name": "iterdir",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.lchmod": {
            "name": "lchmod",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "Path.lstat": {
            "name": "lstat",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.open": {
            "name": "open",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [],
                "buffering": [],
                "encoding": [],
                "errors": [],
                "newline": []
            }
        },
        "Path.owner": {
            "name": "owner",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.rename": {
            "name": "rename",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "Path.replace": {
            "name": "replace",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "Path.rglob": {
            "name": "rglob",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Path.rmdir": {
            "name": "rmdir",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.symlink_to": {
            "name": "symlink_to",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "target_is_directory": []
            }
        },
        "Path.touch": {
            "name": "touch",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [],
                "exist_ok": []
            }
        },
        "Path.unlink": {
            "name": "unlink",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PurePath.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.mkdir": {
            "name": "mkdir",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [],
                "parents": [],
                "exist_ok": []
            }
        },
        "Path.resolve": {
            "name": "resolve",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "strict": []
            }
        },
        "Path.home": {
            "name": "home",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Path.absolute": {
            "name": "absolute",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.expanduser": {
            "name": "expanduser",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.read_bytes": {
            "name": "read_bytes",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.read_text": {
            "name": "read_text",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "errors": []
            }
        },
        "Path.samefile": {
            "name": "samefile",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "other_path": []
            }
        },
        "Path.write_bytes": {
            "name": "write_bytes",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Path.write_text": {
            "name": "write_text",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "encoding": [],
                "errors": []
            }
        },
        "PurePath.__new__": {
            "name": "__new__",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Path.__new__": {
            "name": "__new__",
            "location": 107,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "lib3to6-master/stubs/_ast.py": {
        "AST.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lib3to6-master/test/test_checkers.py": {
        "make_fixture": {
            "name": "make_fixture",
            "location": 11,
            "return": [
                "dict",
                "Callable[..., None]",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "names": [
                    "str",
                    "Dict[str, Any]"
                ],
                "test_source": [
                    "str",
                    "Container",
                    "dict",
                    "type",
                    "bool"
                ],
                "expected_error_msg": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_checkers": {
            "name": "test_checkers",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "fixture": [
                    "dict"
                ]
            }
        },
        "_test_unusable_imports": {
            "name": "_test_unusable_imports",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "source": [],
                "ver": [
                    "str"
                ],
                "req": [
                    "str"
                ]
            }
        },
        "test_backport_checker_warning": {
            "name": "test_backport_checker_warning",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_backport_checker_nowarning": {
            "name": "test_backport_checker_nowarning",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "int"
                ]
            }
        },
        "test_backport_checker_errors": {
            "name": "test_backport_checker_errors",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "lib3to6-master/test/test_error_messages.py": {},
    "lib3to6-master/test/test_fixers.py": {
        "make_fixture": {
            "name": "make_fixture",
            "location": 14,
            "return": [
                "str",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason"
            ],
            "arguments": {
                "names": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "target_version": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "test_source": [
                    "str"
                ],
                "expected_source": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_numeric_literals_with_underscore": {
            "name": "test_numeric_literals_with_underscore",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_header_preserved": {
            "name": "test_header_preserved",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_normalized_source": {
            "name": "_normalized_source",
            "location": 1212,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "in_source": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "_debug_ast": {
            "name": "_debug_ast",
            "location": 1223,
            "return": [
                ""
            ],
            "arguments": {
                "casename": [
                    "str",
                    "List[int]",
                    "list"
                ],
                "source": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "test_fixers": {
            "name": "test_fixers",
            "location": 1236,
            "return": [
                ""
            ],
            "arguments": {
                "fixture": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "lib3to6-master/test/test_transpile.py": {
        "test_parse_header_simple": {
            "name": "test_parse_header_simple",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_parse_header_coding": {
            "name": "test_parse_header_coding",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "lib3to6-master/test/__init__.py": {},
    "lib3to6-master/test_project/setup.py": {},
    "lib3to6-master/test_project/test_module/mysix.py": {},
    "lib3to6-master/test_project/test_module/__init__.py": {
        "test_unpacking_generalization": {
            "name": "test_unpacking_generalization",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "kwonly_func": {
            "name": "kwonly_func",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "Foo.foo": {
            "name": "foo",
            "location": 37,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "lib3to6-master/test_project/test_module/submodule/__init__.py": {}
}
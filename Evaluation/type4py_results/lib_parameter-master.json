{
    "lib_parameter-master/conftest.py": {
        "pytest_load_initial_conftests": {
            "name": "pytest_load_initial_conftests",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "early_config": [
                    "dict",
                    "Exception"
                ],
                "parser": [
                    "dict",
                    "Exception"
                ],
                "args": []
            }
        }
    },
    "lib_parameter-master/setup.py": {
        "is_travis_deploy": {
            "name": "is_travis_deploy",
            "location": 12,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "is_tagged_commit": {
            "name": "is_tagged_commit",
            "location": 19,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "strip_links_from_required": {
            "name": "strip_links_from_required",
            "location": 26,
            "return": [
                "Set[str]",
                "List[Match]",
                "List[str]",
                "Dict[str, str]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "l_required": [
                    "List[str]",
                    "int",
                    "list"
                ]
            }
        },
        "get_requirements_from_file": {
            "name": "get_requirements_from_file",
            "location": 52,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "bool",
                "List[str]",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "requirements_filename": [
                    "str",
                    "pathlib.Path",
                    "Union[str, os.PathLike]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_line_data": {
            "name": "get_line_data",
            "location": 68,
            "return": [
                "str",
                "Optional[Set[str]]",
                "List[str]",
                "float"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        }
    },
    "lib_parameter-master/lib_parameter/lib_parameter.py": {
        "get_default_if_none": {
            "name": "get_default_if_none",
            "location": 6,
            "return": [
                "int",
                "Dict[str, Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "parameter": [
                    "Optional[T]",
                    "Optional[str]",
                    "Optional[Any]",
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "default": [
                    "List[str]",
                    "int",
                    "bool",
                    "Type[T]",
                    "str"
                ]
            }
        }
    },
    "lib_parameter-master/lib_parameter/lib_parameter_cli.py": {
        "info": {
            "name": "info",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli_main": {
            "name": "cli_main",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "traceback": [
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "cli_info": {
            "name": "cli_info",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lib_parameter-master/lib_parameter/__init__.py": {},
    "lib_parameter-master/lib_parameter/__init__conf__.py": {
        "print_info": {
            "name": "print_info",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lib_parameter-master/tests/test_cli.py": {
        "call_cli_command": {
            "name": "call_cli_command",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "commandline_args": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_cli_commands": {
            "name": "test_cli_commands",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lib_parameter-master/tests/local_testscripts/testing_tools.py": {
        "append_subdirs_to_mypy_paths": {
            "name": "append_subdirs_to_mypy_paths",
            "location": 15,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "root_directory": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "append_directory_to_env_path_variable": {
            "name": "append_directory_to_env_path_variable",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "env_variable": [
                    "logging.Logger",
                    "dict",
                    "str"
                ],
                "directory": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "get_env_data": {
            "name": "get_env_data",
            "location": 83,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "env_variable": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "set_env_data": {
            "name": "set_env_data",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "env_variable": [
                    "str"
                ],
                "env_str": [
                    "str"
                ]
            }
        },
        "cli_main": {
            "name": "cli_main",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli_append_immediate_subdirs_to_mypy_path": {
            "name": "cli_append_immediate_subdirs_to_mypy_path",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "root_directory": [
                    "str",
                    "List[str]",
                    "Optional[List]"
                ]
            }
        },
        "cli_append_directory_to_mypy_path": {
            "name": "cli_append_directory_to_mypy_path",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "pathlib.Path",
                    "TextIO",
                    "BinaryIO",
                    "Type['GenericList']",
                    "Type['Declared']"
                ]
            }
        },
        "cli_append_directory_to_python_path": {
            "name": "cli_append_directory_to_python_path",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "pathlib.Path",
                    "TextIO",
                    "BinaryIO",
                    "Type['GenericList']",
                    "Type['Declared']"
                ]
            }
        }
    }
}
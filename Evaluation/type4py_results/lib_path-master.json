{
    "lib_path-master/conftest.py": {
        "pytest_cmdline_preparse": {
            "name": "pytest_cmdline_preparse",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "lib_path-master/setup.py": {
        "is_travis_deploy": {
            "name": "is_travis_deploy",
            "location": 12,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "is_tagged_commit": {
            "name": "is_tagged_commit",
            "location": 19,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "strip_links_from_required": {
            "name": "strip_links_from_required",
            "location": 26,
            "return": [
                "Set[str]",
                "List[Match]",
                "List[str]",
                "Dict[str, str]",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "l_required": [
                    "List[str]",
                    "int",
                    "list"
                ]
            }
        },
        "get_requirements_from_file": {
            "name": "get_requirements_from_file",
            "location": 52,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "bool",
                "List[str]",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "requirements_filename": [
                    "str",
                    "pathlib.Path",
                    "Union[str, os.PathLike]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_line_data": {
            "name": "get_line_data",
            "location": 70,
            "return": [
                "str",
                "Optional[Set[str]]",
                "List[str]",
                "float"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        }
    },
    "lib_path-master/lib_path/lib_path.py": {
        "log_and_raise_if_path_does_not_exist": {
            "name": "log_and_raise_if_path_does_not_exist",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike",
                    "pathlib.Path"
                ]
            }
        },
        "log_and_raise_if_not_isdir": {
            "name": "log_and_raise_if_not_isdir",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "path_dir": [
                    "pathlib.Path",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "log_and_raise_if_target_directory_within_source_directory": {
            "name": "log_and_raise_if_target_directory_within_source_directory",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "path_source_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "path_target_dir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "is_target_directory_within_source_directory": {
            "name": "is_target_directory_within_source_directory",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "path_source_dir": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ],
                "path_target_dir": [
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "log_and_raise_if_not_isfile": {
            "name": "log_and_raise_if_not_isfile",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "path_file": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "path_join_posix": {
            "name": "path_join_posix",
            "location": 125,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ]
            }
        },
        "path_remove_trailing_slashes": {
            "name": "path_remove_trailing_slashes",
            "location": 163,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[pathlib.Path]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_basename_without_extension": {
            "name": "get_basename_without_extension",
            "location": 178,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path_file": [
                    "str"
                ]
            }
        },
        "strip_and_replace_backslashes": {
            "name": "strip_and_replace_backslashes",
            "location": 197,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "Iterable[str]",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "get_current_dir": {
            "name": "get_current_dir",
            "location": 208,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {}
        },
        "get_current_dir_and_change_to_home": {
            "name": "get_current_dir_and_change_to_home",
            "location": 215,
            "return": [
                "pathlib.Path",
                "str",
                "List[str]",
                "Union[pathlib.Path, str]"
            ],
            "arguments": {}
        },
        "is_windows_network_unc": {
            "name": "is_windows_network_unc",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "List[str]"
                ]
            }
        },
        "substract_windows_drive_letter": {
            "name": "substract_windows_drive_letter",
            "location": 237,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "path_starts_with_windows_drive_letter": {
            "name": "path_starts_with_windows_drive_letter",
            "location": 252,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "chdir": {
            "name": "chdir",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "get_l_path_sub_directories": {
            "name": "get_l_path_sub_directories",
            "location": 272,
            "return": [
                "pathlib.Path",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "path_base_directory": [
                    "pathlib.Path",
                    "pathlib.PurePosixPath",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "get_windows_system_drive_letter": {
            "name": "get_windows_system_drive_letter",
            "location": 298,
            "return": [
                "str",
                "List[List[int]]",
                "tuple",
                "List[pathlib.Path]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "has_subdirs": {
            "name": "has_subdirs",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "path_dir": [
                    "pathlib.Path",
                    "str",
                    "int"
                ]
            }
        },
        "is_directory_empty": {
            "name": "is_directory_empty",
            "location": 335,
            "return": [
                "bool"
            ],
            "arguments": {
                "path_directory": [
                    "str",
                    "pathlib.PurePath"
                ]
            }
        },
        "is_directory_writable": {
            "name": "is_directory_writable",
            "location": 354,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_test_directory_path": {
            "name": "get_test_directory_path",
            "location": 388,
            "return": [
                "pathlib.Path",
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[pathlib.Path, str]",
                    "Union[str, pathlib.Path]"
                ],
                "test_directory_name": [
                    "str"
                ]
            }
        },
        "make_test_directory_and_subdirs_fully_accessible_by_current_user": {
            "name": "make_test_directory_and_subdirs_fully_accessible_by_current_user",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "path_directory_name": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "lib_path-master/lib_path/lib_path_cli.py": {
        "info": {
            "name": "info",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli_main": {
            "name": "cli_main",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "traceback": [
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "cli_info": {
            "name": "cli_info",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lib_path-master/lib_path/__init__.py": {},
    "lib_path-master/lib_path/__init__conf__.py": {
        "print_info": {
            "name": "print_info",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lib_path-master/tests/test_cli.py": {
        "call_cli_command": {
            "name": "call_cli_command",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "commandline_args": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_cli_commands": {
            "name": "test_cli_commands",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lib_path-master/tests/local_testscripts/testing_tools.py": {
        "append_subdirs_to_mypy_paths": {
            "name": "append_subdirs_to_mypy_paths",
            "location": 15,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "root_directory": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "append_directory_to_env_path_variable": {
            "name": "append_directory_to_env_path_variable",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "env_variable": [
                    "logging.Logger",
                    "dict",
                    "str"
                ],
                "directory": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "get_env_data": {
            "name": "get_env_data",
            "location": 83,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "env_variable": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "set_env_data": {
            "name": "set_env_data",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "env_variable": [
                    "str"
                ],
                "env_str": [
                    "str"
                ]
            }
        },
        "cli_main": {
            "name": "cli_main",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli_append_immediate_subdirs_to_mypy_path": {
            "name": "cli_append_immediate_subdirs_to_mypy_path",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "root_directory": [
                    "str",
                    "List[str]",
                    "Optional[List]"
                ]
            }
        },
        "cli_append_directory_to_mypy_path": {
            "name": "cli_append_directory_to_mypy_path",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "pathlib.Path",
                    "TextIO",
                    "BinaryIO",
                    "Type['GenericList']",
                    "Type['Declared']"
                ]
            }
        },
        "cli_append_directory_to_python_path": {
            "name": "cli_append_directory_to_python_path",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "pathlib.Path",
                    "TextIO",
                    "BinaryIO",
                    "Type['GenericList']",
                    "Type['Declared']"
                ]
            }
        }
    }
}
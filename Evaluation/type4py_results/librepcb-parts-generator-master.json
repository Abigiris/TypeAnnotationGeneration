{
    "librepcb-parts-generator-master/common.py": {
        "init_cache": {
            "name": "init_cache",
            "location": 16,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "uuid_cache_file": [
                    "TextIO",
                    "str"
                ]
            }
        },
        "save_cache": {
            "name": "save_cache",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "uuid_cache_file": [],
                "uuid_cache": [
                    "Sequence[str]",
                    "bool",
                    "TextIO",
                    "IO[str]"
                ]
            }
        },
        "now": {
            "name": "now",
            "location": 38,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {}
        },
        "format_float": {
            "name": "format_float",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "format_ipc_dimension": {
            "name": "format_ipc_dimension",
            "location": 59,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "number": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "decimal_places": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "indent": {
            "name": "indent",
            "location": 68,
            "return": [
                "Set[str]",
                "Sequence[str]",
                "Tuple[int]"
            ],
            "arguments": {
                "level": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ],
                "lines": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "generate_courtyard": {
            "name": "generate_courtyard",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "uuid": [
                    "int",
                    "str"
                ],
                "max_x": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "datetime.timedelta"
                ],
                "max_y": [
                    "int",
                    "Optional[float]"
                ],
                "excess_x": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "datetime.timedelta"
                ],
                "excess_y": [
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "val": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_pad_uuids": {
            "name": "get_pad_uuids",
            "location": 122,
            "return": [
                "str",
                "bool",
                "dict",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "base_lib_path": [
                    "str"
                ],
                "pkg_uuid": [
                    "str"
                ]
            }
        },
        "human_sort_key": {
            "name": "human_sort_key",
            "location": 142,
            "return": [
                "List[str]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "set"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "human_sort_key._convert": {
            "name": "_convert",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/dfn_configs.py": {
        "draw_circle": {
            "name": "draw_circle",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "diameter": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DfnConfig.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "width": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "pitch": [
                    "int",
                    "float"
                ],
                "pin_count": [
                    "int",
                    "List[int]",
                    "Tuple[int, int]"
                ],
                "height_nominal": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "height_max": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "lead_length": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "exposed_width": [
                    "float",
                    "int"
                ],
                "exposed_length": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "keywords": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "no_exp": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "print_pad": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "lead_width": [
                    "int",
                    "float"
                ],
                "name": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "create_date": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "pin1_corner_dx_dy": [
                    "Optional[float]",
                    "bool",
                    "Iterable[T]",
                    "int"
                ],
                "extended_doc_fn": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ]
            }
        },
        "draw_circle._draw": {
            "name": "_draw",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, str]",
                    "Type[T]",
                    "List[dict]",
                    "bool"
                ],
                "uuid": [
                    "Callable[[str], str]",
                    "str"
                ],
                "lines": [
                    "List[str]",
                    "str",
                    "List[Tuple[str, int]]"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/generate_capacitor_radial_tht.py": {
        "uuid": {
            "name": "uuid",
            "location": 37,
            "return": [],
            "arguments": {
                "category": [],
                "full_name": [],
                "identifier": []
            }
        },
        "get_variant": {
            "name": "get_variant",
            "location": 55,
            "return": [],
            "arguments": {
                "diameter": [],
                "height": [],
                "pitch": [],
                "lead_width": []
            }
        },
        "generate_pkg": {
            "name": "generate_pkg",
            "location": 64,
            "return": [],
            "arguments": {
                "dirpath": [],
                "diameter": [],
                "height": [],
                "pitch": [],
                "lead_width": [],
                "author": [],
                "version": [],
                "create_date": []
            }
        },
        "generate_dev": {
            "name": "generate_dev",
            "location": 263,
            "return": [],
            "arguments": {
                "dirpath": [],
                "diameter": [],
                "height": [],
                "pitch": [],
                "lead_width": [],
                "author": [],
                "version": [],
                "create_date": []
            }
        },
        "generate_pkg._pkg_uuid": {
            "name": "_pkg_uuid",
            "location": 81,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "generate_pkg._create_footprint": {
            "name": "_create_footprint",
            "location": 84,
            "return": [],
            "arguments": {
                "footprint_identifier": [],
                "name": []
            }
        },
        "generate_dev._uuid": {
            "name": "_uuid",
            "location": 276,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "generate_pkg._create_footprint._fpt_uuid": {
            "name": "_fpt_uuid",
            "location": 86,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "generate_pkg._create_footprint._generate_fill_polygon": {
            "name": "_generate_fill_polygon",
            "location": 95,
            "return": [],
            "arguments": {
                "identifier": [],
                "layer": []
            }
        }
    },
    "librepcb-parts-generator-master/generate_chip.py": {
        "get_by_density": {
            "name": "get_by_density",
            "location": 44,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Optional[Callable]"
            ],
            "arguments": {
                "length": [
                    "float",
                    "Iterable[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "level": [
                    "str",
                    "Pattern[bytes]"
                ],
                "key": [
                    "str",
                    "Pattern[bytes]"
                ]
            }
        },
        "uuid": {
            "name": "uuid",
            "location": 57,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "category": [
                    "str"
                ],
                "full_name": [
                    "str"
                ],
                "identifier": [
                    "str"
                ],
                "create": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "generate_pkg": {
            "name": "generate_pkg",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "dirpath": [
                    "str",
                    "int"
                ],
                "author": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "description": [
                    "str",
                    "Optional[str]"
                ],
                "polarization": [
                    "str",
                    "Optional[str]"
                ],
                "configs": [
                    "str",
                    "Optional[str]"
                ],
                "pkgcat": [
                    "str",
                    "Optional[str]"
                ],
                "keywords": [
                    "str",
                    "Optional[str]"
                ],
                "version": [
                    "str",
                    "Optional[str]"
                ],
                "create_date": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "generate_dev": {
            "name": "generate_dev",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "dirpath": [
                    "str",
                    "Optional[str]"
                ],
                "author": [
                    "str"
                ],
                "name": [
                    "str",
                    "Iterable[Tuple[str, str, str]]",
                    "bool"
                ],
                "description": [
                    "str",
                    "Iterable[Tuple[str, str, str]]",
                    "bool"
                ],
                "packages": [
                    "str",
                    "Iterable[Tuple[str, str, str]]",
                    "bool"
                ],
                "cmp": [
                    "str"
                ],
                "cat": [
                    "str"
                ],
                "signals": [
                    "Iterable[str]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "keywords": [
                    "str",
                    "List[str]"
                ],
                "version": [
                    "str"
                ],
                "create_date": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "BodyDimensions.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "float",
                    "tuple"
                ],
                "width": [
                    "int",
                    "float",
                    "tuple"
                ],
                "height": [
                    "int",
                    "float",
                    "tuple"
                ],
                "lead_length": [
                    "int",
                    "float",
                    "tuple"
                ],
                "lead_width": [
                    "int",
                    "float"
                ]
            }
        },
        "BodyDimensions.gap": {
            "name": "gap",
            "location": 96,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FootprintDimensions.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pad_length": [
                    "int",
                    "float",
                    "Optional[List[Any]]",
                    "apps.common.coininfo.CoinInfo",
                    "bytes"
                ],
                "pad_width": [
                    "int",
                    "float"
                ],
                "pad_gap": [
                    "int",
                    "float",
                    "Optional[List[Any]]",
                    "apps.common.coininfo.CoinInfo",
                    "bytes"
                ]
            }
        },
        "ChipConfig.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size_imperial": [
                    "int",
                    "dict",
                    "bytes",
                    "str"
                ],
                "body": [
                    "int",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "ChipConfig.size_metric": {
            "name": "size_metric",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChipConfig.size_imperial": {
            "name": "size_imperial",
            "location": 154,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolarizationConfig.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_make": {
            "name": "_make",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ]
            }
        },
        "generate_pkg._uuid": {
            "name": "_uuid",
            "location": 212,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "generate_pkg.add_footprint_variant": {
            "name": "add_footprint_variant",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str"
                ],
                "density_level": [
                    "str",
                    "Type['Declared']",
                    "IO"
                ]
            }
        },
        "generate_dev._uuid": {
            "name": "_uuid",
            "location": 517,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/generate_connectors.py": {
        "uuid": {
            "name": "uuid",
            "location": 53,
            "return": [],
            "arguments": {
                "category": [],
                "kind": [],
                "variant": [],
                "identifier": []
            }
        },
        "get_y": {
            "name": "get_y",
            "location": 73,
            "return": [],
            "arguments": {
                "pin_number": [],
                "pin_count": [],
                "rows": [],
                "spacing": [],
                "grid_align": []
            }
        },
        "get_rectangle_bounds": {
            "name": "get_rectangle_bounds",
            "location": 96,
            "return": [],
            "arguments": {
                "pin_count": [],
                "rows": [],
                "spacing": [],
                "top_offset": [],
                "grid_align": []
            }
        },
        "generate_pkg": {
            "name": "generate_pkg",
            "location": 116,
            "return": [],
            "arguments": {
                "dirpath": [],
                "author": [],
                "name": [],
                "name_lower": [],
                "kind": [],
                "pkgcat": [],
                "keywords": [],
                "rows": [],
                "min_pads": [],
                "max_pads": [],
                "pad_drills": [],
                "generate_silkscreen": [],
                "version": [],
                "create_date": []
            }
        },
        "generate_silkscreen_female": {
            "name": "generate_silkscreen_female",
            "location": 221,
            "return": [],
            "arguments": {
                "lines": [],
                "category": [],
                "kind": [],
                "variant": [],
                "pin_count": [],
                "rows": []
            }
        },
        "generate_silkscreen_male": {
            "name": "generate_silkscreen_male",
            "location": 245,
            "return": [],
            "arguments": {
                "lines": [],
                "category": [],
                "kind": [],
                "variant": [],
                "pin_count": [],
                "rows": []
            }
        },
        "generate_sym": {
            "name": "generate_sym",
            "location": 287,
            "return": [],
            "arguments": {
                "dirpath": [],
                "author": [],
                "name": [],
                "name_lower": [],
                "kind": [],
                "cmpcat": [],
                "keywords": [],
                "rows": [],
                "min_pads": [],
                "max_pads": [],
                "version": [],
                "create_date": []
            }
        },
        "generate_cmp": {
            "name": "generate_cmp",
            "location": 419,
            "return": [],
            "arguments": {
                "dirpath": [],
                "author": [],
                "name": [],
                "name_lower": [],
                "kind": [],
                "cmpcat": [],
                "keywords": [],
                "default_value": [],
                "rows": [],
                "min_pads": [],
                "max_pads": [],
                "version": [],
                "create_date": []
            }
        },
        "generate_dev": {
            "name": "generate_dev",
            "location": 500,
            "return": [],
            "arguments": {
                "dirpath": [],
                "author": [],
                "name": [],
                "name_lower": [],
                "kind": [],
                "cmpcat": [],
                "keywords": [],
                "rows": [],
                "min_pads": [],
                "max_pads": [],
                "pad_drills": [],
                "create_date": []
            }
        },
        "_make": {
            "name": "_make",
            "location": 566,
            "return": [],
            "arguments": {
                "dirpath": []
            }
        },
        "generate_sym._uuid": {
            "name": "_uuid",
            "location": 309,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "generate_cmp._uuid": {
            "name": "_uuid",
            "location": 440,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "generate_pkg._uuid": {
            "name": "_uuid",
            "location": 143,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "generate_dev._uuid": {
            "name": "_uuid",
            "location": 524,
            "return": [],
            "arguments": {
                "identifier": []
            }
        }
    },
    "librepcb-parts-generator-master/generate_dfn.py": {
        "uuid": {
            "name": "uuid",
            "location": 33,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "category": [
                    "str",
                    "Optional[str]"
                ],
                "full_name": [
                    "str",
                    "Optional[str]"
                ],
                "identifier": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_y": {
            "name": "get_y",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pin_number": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "List[str]",
                    "float"
                ],
                "pin_count": [
                    "int",
                    "Tuple[int]",
                    "float"
                ],
                "spacing": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "List[str]",
                    "float"
                ],
                "grid_align": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "generate_pkg": {
            "name": "generate_pkg",
            "location": 69,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "dirpath": [
                    "str",
                    "Optional[str]"
                ],
                "author": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "description": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "pkgcat": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "keywords": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "config": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "make_exposed": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "create_date": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "generate_pkg._uuid": {
            "name": "_uuid",
            "location": 118,
            "return": [
                "str",
                "int",
                "numpy.dtype"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "generate_pkg._generate_footprint": {
            "name": "_generate_footprint",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "pad_extension": [
                    "float",
                    "str"
                ]
            }
        },
        "_make": {
            "name": "_make",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/generate_dip.py": {
        "uuid": {
            "name": "uuid",
            "location": 27,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "category": [
                    "str",
                    "List[str]",
                    "bytearray",
                    "int",
                    "bool"
                ],
                "width": [
                    "str",
                    "List[str]",
                    "bytearray",
                    "int",
                    "bool"
                ],
                "variant": [
                    "str",
                    "List[str]",
                    "bytearray",
                    "int",
                    "bool"
                ],
                "identifier": [
                    "str",
                    "List[str]",
                    "bytearray",
                    "int",
                    "bool"
                ]
            }
        },
        "get_y": {
            "name": "get_y",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pin_number": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "List[str]",
                    "float"
                ],
                "pin_count": [
                    "int",
                    "Tuple[int]",
                    "float"
                ],
                "spacing": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "List[str]",
                    "float"
                ],
                "grid_align": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_rectangle_bounds": {
            "name": "get_rectangle_bounds",
            "location": 65,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "pin_count": [
                    "int"
                ],
                "spacing": [
                    "int",
                    "str",
                    "list"
                ],
                "top_offset": [
                    "list",
                    "int",
                    "float"
                ],
                "grid_align": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "generate_pkg": {
            "name": "generate_pkg",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ],
                "author": [
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "float"
                ],
                "name": [
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "float"
                ],
                "name_lower": [
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "float"
                ],
                "width": [
                    "str",
                    "int",
                    "float",
                    "Mapping[str, Any]",
                    "Union[str, int]"
                ],
                "pkgcat": [
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "float"
                ],
                "keywords": [
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "float"
                ],
                "pins": [
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "float"
                ],
                "top_offset": [
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "float"
                ],
                "create_date": [
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "_make": {
            "name": "_make",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ]
            }
        },
        "generate_pkg._uuid": {
            "name": "_uuid",
            "location": 101,
            "return": [
                "str",
                "List[float]",
                "bool",
                "int"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int"
                ]
            }
        },
        "generate_pkg.add_footprint_variant": {
            "name": "add_footprint_variant",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int",
                    "Set[str]",
                    "Callable[[float], bool]"
                ],
                "pad_size": [
                    "Tuple[float, float]",
                    "int"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/generate_idc.py": {
        "uuid": {
            "name": "uuid",
            "location": 34,
            "return": [],
            "arguments": {
                "category": [],
                "kind": [],
                "variant": [],
                "identifier": []
            }
        },
        "get_coords": {
            "name": "get_coords",
            "location": 68,
            "return": [],
            "arguments": {
                "pin_number": [],
                "pin_count": [],
                "row_count": [],
                "pitch": [],
                "row_spacing": []
            }
        },
        "generate_pkg": {
            "name": "generate_pkg",
            "location": 104,
            "return": [],
            "arguments": {
                "dirpath": [],
                "author": [],
                "name": [],
                "description": [],
                "pins": [],
                "pitch": [],
                "row_spacing": [],
                "pad_size": [],
                "pad_x_offset": [],
                "body_offset_x": [],
                "body_offset_y": [],
                "body_gap": [],
                "lead_width": [],
                "lead_span": [],
                "pkgcats": [],
                "keywords": [],
                "version": [],
                "create_date": []
            }
        },
        "Coord.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "round_values": []
            }
        },
        "_make": {
            "name": "_make",
            "location": 316,
            "return": [],
            "arguments": {
                "dirpath": []
            }
        },
        "generate_pkg._uuid": {
            "name": "_uuid",
            "location": 131,
            "return": [],
            "arguments": {
                "identifier": []
            }
        }
    },
    "librepcb-parts-generator-master/generate_mosfet_dual.py": {
        "uuid": {
            "name": "uuid",
            "location": 18,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "category": [
                    "str",
                    "Optional[str]"
                ],
                "full_name": [
                    "str",
                    "Optional[str]"
                ],
                "identifier": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "generate_dev": {
            "name": "generate_dev",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "author": [
                    "str"
                ],
                "description": [
                    "str",
                    "List[str]"
                ],
                "version": [
                    "str"
                ],
                "keywords": [
                    "str"
                ],
                "create_date": [
                    "Optional[str]",
                    "str"
                ],
                "uuid_cat": [
                    "str"
                ],
                "uuid_cmp": [
                    "str"
                ],
                "configs": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PackageConfig.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid_pkg": [
                    "int",
                    "bool",
                    "float"
                ],
                "uuid_pads": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FetConfig.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "max_voltage": [
                    "int",
                    "Union[float, int]",
                    "float"
                ],
                "package": [
                    "bool",
                    "str",
                    "Sequence",
                    "int"
                ],
                "signals": [
                    "bool",
                    "str",
                    "Sequence",
                    "int"
                ],
                "datasheets": [
                    "bool",
                    "str",
                    "Sequence",
                    "int"
                ]
            }
        },
        "_make": {
            "name": "_make",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "dirpath": [
                    "str"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/generate_qfp.py": {
        "uuid": {
            "name": "uuid",
            "location": 236,
            "return": [],
            "arguments": {
                "category": [],
                "full_name": [],
                "identifier": []
            }
        },
        "get_pad_coords": {
            "name": "get_pad_coords",
            "location": 261,
            "return": [],
            "arguments": {
                "pad_number": [],
                "pad_count": [],
                "pitch": [],
                "pad_offset": []
            }
        },
        "generate_pkg": {
            "name": "generate_pkg",
            "location": 325,
            "return": [],
            "arguments": {
                "dirpath": [],
                "author": [],
                "configs": [],
                "pkgcat": [],
                "version": [],
                "create_date": []
            }
        },
        "QfpConfig.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "body_size_x": [],
                "body_size_y": [],
                "height_nom": [],
                "height_max": [],
                "pitch": [],
                "lead_count": [],
                "lead_span_x": [],
                "lead_span_y": [],
                "lead_width": [],
                "keywords": [],
                "name_prefix": []
            }
        },
        "QfpConfig.get_configs": {
            "name": "get_configs",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QfpConfig.ipc_name": {
            "name": "ipc_name",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QfpConfig.description": {
            "name": "description",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QfpConfig.excess_by_density": {
            "name": "excess_by_density",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "density": []
            }
        },
        "QfpConfig.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QfpConfig.__repr__": {
            "name": "__repr__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LTQfpConfig.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "base_config": [],
                "variation_t": [],
                "variation_l": []
            }
        },
        "LTQfpConfig.get_configs": {
            "name": "get_configs",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pad.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "orientation": []
            }
        },
        "_make": {
            "name": "_make",
            "location": 554,
            "return": [],
            "arguments": {
                "dirpath": []
            }
        },
        "generate_pkg._uuid": {
            "name": "_uuid",
            "location": 340,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "generate_pkg.add_footprint_variant": {
            "name": "add_footprint_variant",
            "location": 363,
            "return": [],
            "arguments": {
                "key": [],
                "name": [],
                "density_level": []
            }
        }
    },
    "librepcb-parts-generator-master/generate_so.py": {
        "uuid": {
            "name": "uuid",
            "location": 46,
            "return": [],
            "arguments": {
                "category": [],
                "full_name": [],
                "identifier": []
            }
        },
        "get_by_density": {
            "name": "get_by_density",
            "location": 64,
            "return": [],
            "arguments": {
                "pitch": [],
                "level": [],
                "key": []
            }
        },
        "get_y": {
            "name": "get_y",
            "location": 72,
            "return": [],
            "arguments": {
                "pin_number": [],
                "pin_count": [],
                "spacing": [],
                "grid_align": []
            }
        },
        "generate_pkg": {
            "name": "generate_pkg",
            "location": 112,
            "return": [],
            "arguments": {
                "dirpath": [],
                "author": [],
                "name": [],
                "description": [],
                "configs": [],
                "lead_width_lookup": [],
                "lead_contact_length": [],
                "pkgcat": [],
                "keywords": [],
                "version": [],
                "create_date": []
            }
        },
        "SoConfig.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "pin_count": [],
                "pitch": [],
                "body_length": [],
                "body_width": [],
                "total_width": [],
                "height": [],
                "variation": []
            }
        },
        "_make": {
            "name": "_make",
            "location": 347,
            "return": [],
            "arguments": {
                "dirpath": []
            }
        },
        "generate_pkg._uuid": {
            "name": "_uuid",
            "location": 159,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "generate_pkg.add_footprint_variant": {
            "name": "add_footprint_variant",
            "location": 182,
            "return": [],
            "arguments": {
                "key": [],
                "name": [],
                "density_level": []
            }
        }
    },
    "librepcb-parts-generator-master/generate_stm_mcu.py": {
        "uuid": {
            "name": "uuid",
            "location": 66,
            "return": [],
            "arguments": {
                "category": [],
                "full_name": [],
                "identifier": []
            }
        },
        "generate_sym": {
            "name": "generate_sym",
            "location": 575,
            "return": [],
            "arguments": {
                "mcus": [],
                "symbol_map": [],
                "debug": []
            }
        },
        "generate_cmp": {
            "name": "generate_cmp",
            "location": 670,
            "return": [],
            "arguments": {
                "name": [],
                "mcus": [],
                "symbol_map": [],
                "debug": []
            }
        },
        "generate_dev": {
            "name": "generate_dev",
            "location": 764,
            "return": [],
            "arguments": {
                "mcu": [],
                "symbol_map": [],
                "base_lib_path": [],
                "debug": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 819,
            "return": [],
            "arguments": {
                "data": [],
                "base_lib_path": [],
                "debug": []
            }
        },
        "Pin.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "number": [],
                "name": [],
                "pin_type": []
            }
        },
        "SymbolPinPlacement.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolPinPlacement.add_left_pin": {
            "name": "add_left_pin",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "pin_name": [],
                "y_pos": []
            }
        },
        "SymbolPinPlacement.add_right_pin": {
            "name": "add_right_pin",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "pin_name": [],
                "y_pos": []
            }
        },
        "SymbolPinPlacement.sort": {
            "name": "sort",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymbolPinPlacement.pins": {
            "name": "pins",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "grid": []
            }
        },
        "SymbolPinPlacement.maxmin_y": {
            "name": "maxmin_y",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "grid": []
            }
        },
        "SymbolPinPlacement.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PinName.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "generic": [],
                "concrete": []
            }
        },
        "PinName.__str__": {
            "name": "__str__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "info": [],
                "pins": []
            }
        },
        "MCU._cleanup_type": {
            "name": "_cleanup_type",
            "location": 199,
            "return": [],
            "arguments": {
                "pin_type": []
            }
        },
        "MCU._cleanup_pin_name": {
            "name": "_cleanup_pin_name",
            "location": 203,
            "return": [],
            "arguments": {
                "pin_name": []
            }
        },
        "MCU.from_json": {
            "name": "from_json",
            "location": 227,
            "return": [],
            "arguments": {
                "cls": [],
                "ref": [],
                "info": []
            }
        },
        "MCU.pin_types": {
            "name": "pin_types",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.get_pins_by_type": {
            "name": "get_pins_by_type",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "pin_type": []
            }
        },
        "MCU.get_pin_names_by_type": {
            "name": "get_pin_names_by_type",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "pin_type": []
            }
        },
        "MCU.flash_size_offset": {
            "name": "flash_size_offset",
            "location": 296,
            "return": [],
            "arguments": {
                "ref": []
            }
        },
        "MCU.ref_without_flash": {
            "name": "ref_without_flash",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.ref_for_flash_variants": {
            "name": "ref_for_flash_variants",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "variants": []
            }
        },
        "MCU.symbol_name": {
            "name": "symbol_name",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.symbol_identifier": {
            "name": "symbol_identifier",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.symbol_description": {
            "name": "symbol_description",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.component_identifier": {
            "name": "component_identifier",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.component_description": {
            "name": "component_description",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.description": {
            "name": "description",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.generate_placement_data": {
            "name": "generate_placement_data",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "debug": []
            }
        },
        "MCU.__repr__": {
            "name": "__repr__",
            "location": 571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "generate._make": {
            "name": "_make",
            "location": 821,
            "return": [],
            "arguments": {
                "dirpath": []
            }
        },
        "MCU.generate_placement_data.PinGroup.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pins": []
            }
        },
        "MCU.generate_placement_data.PinGroup.__len__": {
            "name": "__len__",
            "location": 489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MCU.generate_placement_data.PinGroup.__iter__": {
            "name": "__iter__",
            "location": 492,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "librepcb-parts-generator-master/test_common.py": {
        "test_format_float": {
            "name": "test_format_float",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "inval": [
                    "str",
                    "float"
                ],
                "outval": [
                    "str",
                    "float"
                ]
            }
        },
        "test_format_ipc_dimension": {
            "name": "test_format_ipc_dimension",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "inval": [
                    "str",
                    "float"
                ],
                "outval": [
                    "str",
                    "float"
                ]
            }
        },
        "test_sign": {
            "name": "test_sign",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "inval": [
                    "str",
                    "float"
                ],
                "outval": [
                    "str",
                    "float"
                ]
            }
        },
        "test_human_sort_key": {
            "name": "test_human_sort_key",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "inval": [
                    "str"
                ],
                "outval": [
                    "str"
                ]
            }
        },
        "test_human_sort_key_list": {
            "name": "test_human_sort_key_list",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "inlist": [],
                "sortedlist": []
            }
        }
    },
    "librepcb-parts-generator-master/test_entities.py": {
        "test_name": {
            "name": "test_name",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_description": {
            "name": "test_description",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_position": {
            "name": "test_position",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_rotation": {
            "name": "test_rotation",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_length": {
            "name": "test_length",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_symbol_pin": {
            "name": "test_symbol_pin",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_vertex": {
            "name": "test_vertex",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_polygon": {
            "name": "test_polygon",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_text": {
            "name": "test_text",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "test_symbol": {
            "name": "test_symbol",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_component_role": {
            "name": "test_component_role",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_component_signal": {
            "name": "test_component_signal",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_component_pin_signal_map": {
            "name": "test_component_pin_signal_map",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_component_gate": {
            "name": "test_component_gate",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "test_component_variant": {
            "name": "test_component_variant",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "test_component": {
            "name": "test_component",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_package_pad": {
            "name": "test_package_pad",
            "location": 202,
            "return": [],
            "arguments": {}
        },
        "test_footprint_pad": {
            "name": "test_footprint_pad",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "test_stroke_text": {
            "name": "test_stroke_text",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "create_footprint": {
            "name": "create_footprint",
            "location": 223,
            "return": [],
            "arguments": {}
        },
        "test_footprint": {
            "name": "test_footprint",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_package": {
            "name": "test_package",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "test_component_pad": {
            "name": "test_component_pad",
            "location": 310,
            "return": [],
            "arguments": {}
        },
        "test_device": {
            "name": "test_device",
            "location": 315,
            "return": [],
            "arguments": {}
        }
    },
    "librepcb-parts-generator-master/test_generate_connectors.py": {
        "test_get_y_grid_align": {
            "name": "test_get_y_grid_align",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "pin_number": [
                    "int"
                ],
                "pin_count": [
                    "int"
                ],
                "rows": [
                    "int"
                ],
                "spacing": [
                    "int"
                ],
                "y": [
                    "Callable[[T], List[T]]",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_get_rectangle_bounds": {
            "name": "test_get_rectangle_bounds",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "pin_count": [
                    "int",
                    "bool"
                ],
                "rows": [
                    "int",
                    "bool"
                ],
                "spacing": [
                    "int",
                    "bool"
                ],
                "top": [
                    "int",
                    "bool"
                ],
                "grid": [
                    "int",
                    "bool"
                ],
                "expected": [
                    "Union[int, slice]"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/test_generate_idc.py": {
        "test_get_coords": {
            "name": "test_get_coords",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "pin_number": [
                    "int",
                    "bool"
                ],
                "pin_count": [
                    "int",
                    "bool"
                ],
                "row_count": [
                    "int",
                    "bool"
                ],
                "pitch": [
                    "int",
                    "bool"
                ],
                "row_spacing": [
                    "int",
                    "bool"
                ],
                "x": [
                    "int",
                    "bytes",
                    "float",
                    "bool"
                ],
                "y": [
                    "bool",
                    "int",
                    "str",
                    "IO"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/test_generate_qfn.py": {
        "test_get_pad_coords": {
            "name": "test_get_pad_coords",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "pad_number": [
                    "int",
                    "str",
                    "Callable"
                ],
                "pad_count": [
                    "int",
                    "str",
                    "Callable"
                ],
                "pitch": [
                    "int",
                    "str",
                    "Callable"
                ],
                "offset": [
                    "int",
                    "str",
                    "Callable"
                ],
                "x": [
                    "str",
                    "Type[Exception]",
                    "Iterable[str]",
                    "float",
                    "Callable",
                    "int"
                ],
                "y": [
                    "bool"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/test_generate_stm_mcu.py": {
        "_make_empty_info": {
            "name": "_make_empty_info",
            "location": 8,
            "return": [
                "dict"
            ],
            "arguments": {
                "flash_size": [
                    "int",
                    "List[dict]",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        },
        "test_mcu_ref_without_flash": {
            "name": "test_mcu_ref_without_flash",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "mcu_ref": [
                    "str",
                    "Tuple[Any, Any, Any, Any, Any]",
                    "tuple",
                    "bool",
                    "Optional[str]"
                ],
                "expected": [
                    "str"
                ],
                "flash_size": [
                    "str",
                    "Tuple[Any, Any, Any, Any, Any]",
                    "tuple",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_mcu_ref_for_flash_variants_multiple": {
            "name": "test_mcu_ref_for_flash_variants_multiple",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mcu_ref_for_flash_variants_single": {
            "name": "test_mcu_ref_for_flash_variants_single",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cleanup_pin_name": {
            "name": "test_cleanup_pin_name",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "pin_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_signal_name_validation": {
            "name": "test_signal_name_validation",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "librepcb-parts-generator-master/entities/common.py": {
        "EnumValue.get_name": {
            "name": "get_name",
            "location": 16,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateValue.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "date": [
                    "float",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DateValue.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUIDValue.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "uuid": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "UUIDValue.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolValue.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "BoolValue.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringValue.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "StringValue.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatValue.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "FloatValue.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Description.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "Keywords.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "keywords": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Author.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "author": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Version.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Created.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "created": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Deprecated.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "deprecated": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Category.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "category": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Position.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Position.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rotation.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rotation": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Length.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "length": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Width.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "float",
                    "List[str]",
                    "Sequence[str]",
                    "int",
                    "type"
                ]
            }
        },
        "Height.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "height": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Angle.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Fill.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fill": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "GrabArea.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grab_area": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Vertex.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "bool",
                    "float"
                ],
                "angle": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Vertex.__str__": {
            "name": "__str__",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Layer.__str__": {
            "name": "__str__",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polygon.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "layer": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "width": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "fill": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "grab_area": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Polygon.add_vertex": {
            "name": "add_vertex",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertex": [
                    "float",
                    "int"
                ]
            }
        },
        "Polygon.__str__": {
            "name": "__str__",
            "location": 186,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diameter.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "diameter": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Circle.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "layer": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "width": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "fill": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "grab_area": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "diameter": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ],
                "position": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Circle.__str__": {
            "name": "__str__",
            "location": 210,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Align.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "align": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Align.__str__": {
            "name": "__str__",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Text.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "layer": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "value": [
                    "int",
                    "T",
                    "str",
                    "bool"
                ],
                "align": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "height": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "position": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "rotation": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "Text.__str__": {
            "name": "__str__",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "librepcb-parts-generator-master/entities/component.py": {
        "DefaultValue.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default_value": [
                    "str",
                    "dict",
                    "Sequence",
                    "Dict[str, Any]",
                    "type",
                    "bool"
                ]
            }
        },
        "Prefix.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "SchematicOnly.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schematic_only": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Role.get_name": {
            "name": "get_name",
            "location": 30,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Required.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "required": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Negated.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "negated": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Clock.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "clock": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "ForcedNet.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "forced_net": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Signal.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ],
                "role": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "required": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "negated": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "clock": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "forced_net": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Signal.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolUUID.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbol_uuid": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SignalUUID.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "signal_uuid": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "TextDesignator.get_name": {
            "name": "get_name",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PinSignalMap.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pin_uuid": [
                    "Any",
                    "int",
                    "Dict[str, List[str]]",
                    "bool",
                    "str"
                ],
                "signal_uuid": [
                    "Any",
                    "int",
                    "Dict[str, List[str]]",
                    "bool",
                    "str"
                ],
                "text_designator": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "PinSignalMap.__str__": {
            "name": "__str__",
            "location": 97,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Suffix.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Gate.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "symbol_uuid": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[bytes]"
                ],
                "position": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "rotation": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "required": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "suffix": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "Gate.add_pin_signal_map": {
            "name": "add_pin_signal_map",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin_signal_map": [
                    "float",
                    "int"
                ]
            }
        },
        "Gate.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Norm.get_name": {
            "name": "get_name",
            "location": 137,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variant.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ],
                "norm": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Optional[Sequence[Any]]"
                ],
                "description": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ],
                "gate": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Variant.add_gate": {
            "name": "add_gate",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gate_map": [
                    "float",
                    "int"
                ]
            }
        },
        "Variant.__str__": {
            "name": "__str__",
            "location": 152,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "description": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "keywords": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "author": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "version": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "created": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "category": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "schematic_only": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "default_value": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "prefix": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ]
            }
        },
        "Component.__str__": {
            "name": "__str__",
            "location": 182,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component.add_signal": {
            "name": "add_signal",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "float",
                    "int"
                ]
            }
        },
        "Component.add_variant": {
            "name": "add_variant",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variant": [
                    "float",
                    "int"
                ]
            }
        },
        "Component.serialize": {
            "name": "serialize",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_directory": [
                    "str",
                    "TextIO"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/entities/device.py": {
        "ComponentUUID.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "component_uuid": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "PackageUUID.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package_uuid": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ComponentPad.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pad_uuid": [
                    "str",
                    "Exception"
                ],
                "signal": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ComponentPad.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "description": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "keywords": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "author": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "version": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "created": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "category": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "component_uuid": [
                    "str",
                    "List[str]",
                    "Optional[Any]",
                    "Tuple[int]",
                    "Optional[List[str]]"
                ],
                "package_uuid": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Device.add_pad": {
            "name": "add_pad",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pad": [
                    "float",
                    "int"
                ]
            }
        },
        "Device.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.serialize": {
            "name": "serialize",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_directory": [
                    "str",
                    "TextIO"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/entities/helper.py": {
        "indent_entity": {
            "name": "indent_entity",
            "location": 6,
            "return": [
                "dict",
                "bool",
                "List[object]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "entity": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "indent_entities": {
            "name": "indent_entities",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "entities": [
                    "Iterable[Any]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "librepcb-parts-generator-master/entities/package.py": {
        "PackagePad.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "PackagePad.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrokeWidth.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stroke_width": [
                    "List[float]",
                    "int",
                    "Union[Sequence[Any], Tuple[float, float]]",
                    "str"
                ]
            }
        },
        "LetterSpacing.get_name": {
            "name": "get_name",
            "location": 29,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineSpacing.get_name": {
            "name": "get_name",
            "location": 36,
            "return": [
                "Sequence[str]",
                "str",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoRotate.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auto_rotate": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Mirror.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mirror": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "StrokeText.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "layer": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "height": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "stroke_width": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "letter_spacing": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "line_spacing": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "align": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "position": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "rotation": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "auto_rotate": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "mirror": [
                    "Optional[dict]",
                    "Callable",
                    "int"
                ],
                "value": [
                    "float",
                    "bool",
                    "str",
                    "dict",
                    "Sequence[str]",
                    "Union[str, Iterable[str]]",
                    "int",
                    "list"
                ]
            }
        },
        "StrokeText.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Side.get_name": {
            "name": "get_name",
            "location": 82,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.get_name": {
            "name": "get_name",
            "location": 91,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Size.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "int"
                ],
                "height": [
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "Size.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drill.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "drill": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "FootprintPad.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "bool",
                    "float"
                ],
                "side": [
                    "bool",
                    "float"
                ],
                "shape": [
                    "bool",
                    "float"
                ],
                "position": [
                    "bool",
                    "float"
                ],
                "rotation": [
                    "bool",
                    "float"
                ],
                "size": [
                    "bool",
                    "float"
                ],
                "drill": [
                    "bool",
                    "float"
                ]
            }
        },
        "FootprintPad.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Footprint.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[List[str]]"
                ],
                "description": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Footprint.add_pad": {
            "name": "add_pad",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pad": [
                    "float",
                    "int"
                ]
            }
        },
        "Footprint.add_polygon": {
            "name": "add_polygon",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "polygon": [
                    "float",
                    "int"
                ]
            }
        },
        "Footprint.add_circle": {
            "name": "add_circle",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "circle": [
                    "float",
                    "int"
                ]
            }
        },
        "Footprint.add_text": {
            "name": "add_text",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "Footprint.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "description": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "keywords": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "author": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "version": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "created": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "category": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ]
            }
        },
        "Package.add_pad": {
            "name": "add_pad",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pad": [
                    "float",
                    "int"
                ]
            }
        },
        "Package.add_footprint": {
            "name": "add_footprint",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "footprint": [
                    "float",
                    "int"
                ]
            }
        },
        "Package.__str__": {
            "name": "__str__",
            "location": 182,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "librepcb-parts-generator-master/entities/symbol.py": {
        "Pin.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ],
                "position": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "rotation": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "length": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Pin.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Symbol.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "description": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "keywords": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "author": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "version": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "created": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "category": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ],
                "deprecated": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[bool]",
                    "list",
                    "int"
                ]
            }
        },
        "Symbol.add_pin": {
            "name": "add_pin",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pin": [
                    "float",
                    "int"
                ]
            }
        },
        "Symbol.add_polygon": {
            "name": "add_polygon",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "polygon": [
                    "float",
                    "int"
                ]
            }
        },
        "Symbol.add_circle": {
            "name": "add_circle",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "circle": [
                    "float",
                    "int"
                ]
            }
        },
        "Symbol.add_text": {
            "name": "add_text",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "Symbol.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "librepcb-parts-generator-master/entities/__init__.py": {}
}
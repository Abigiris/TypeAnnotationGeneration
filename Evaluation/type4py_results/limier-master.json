{
    "limier-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 17,
            "return": [
                "str",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {}
        }
    },
    "limier-master/docs/conf.py": {},
    "limier-master/limier/aliases.py": {},
    "limier-master/limier/converters.py": {
        "Converter.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                "typevars.V"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typevars.T",
                    "int",
                    "float"
                ]
            }
        },
        "Filter.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Filter.get_failure_message": {
            "name": "get_failure_message",
            "location": 67,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[Any]",
                    "bool",
                    "Type"
                ]
            }
        },
        "Filter.__call__": {
            "name": "__call__",
            "location": 74,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[None, str, bytes]",
                    "typevars.T",
                    "list",
                    "dict"
                ]
            }
        },
        "Transform.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transformation": [
                    "int",
                    "bool",
                    "float"
                ],
                "raised_if_invalid": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Transform.__call__": {
            "name": "__call__",
            "location": 113,
            "return": [
                "str",
                "int",
                "Union[List[str], List[Any]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Callable",
                    "Callable[[object], Any]"
                ]
            }
        },
        "OneOf.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OneOf.get_failure_message": {
            "name": "get_failure_message",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typevars.T",
                    "str",
                    "float"
                ]
            }
        },
        "Equiv.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Set[str]",
                    "str",
                    "T",
                    "Dict[str, float]"
                ]
            }
        },
        "Equiv.__call__": {
            "name": "__call__",
            "location": 199,
            "return": [
                "str",
                "int",
                "Union[List[str], List[Any]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "type",
                    "str",
                    "typevars.T",
                    "dict",
                    "Union[None, str, bytes]",
                    "list"
                ]
            }
        },
        "Regex.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Regex.pattern": {
            "name": "pattern",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Regex.convert": {
            "name": "convert",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Match",
                    "str",
                    "List[List[str]]",
                    "type"
                ]
            }
        },
        "Regex.__call__": {
            "name": "__call__",
            "location": 243,
            "return": [
                "dict",
                "Iterable[str]",
                "bool",
                "str",
                "Optional[int]",
                "Callable[[T], None]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "Range.convert": {
            "name": "convert",
            "location": 264,
            "return": [
                "Union[int, float, complex]",
                "List[Dict[str, Any]]",
                "Dict[str, int]",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "Match",
                    "bytes",
                    "str",
                    "Set[str]",
                    "int",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "OneOf.__init__.test": {
            "name": "test",
            "location": 142,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list",
                    "float"
                ]
            }
        }
    },
    "limier-master/limier/decorators.py": {
        "converted": {
            "name": "converted",
            "location": 11,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "func": [
                    "str",
                    "bool",
                    "list"
                ],
                "registry": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "converted.wrapper": {
            "name": "wrapper",
            "location": 39,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "limier-master/limier/exceptions.py": {
        "ConversionError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConversionError.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "limier-master/limier/registry.py": {
        "Registry.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.default": {
            "name": "default",
            "location": 18,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "Registry.converter": {
            "name": "converter",
            "location": 32,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Iterable[str]",
                    "Optional[\"TreeNode\"]",
                    "Callable[[], Coroutine]"
                ],
                "alias": [
                    "Callable"
                ]
            }
        },
        "Registry.get": {
            "name": "get",
            "location": 53,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "alias": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Registry.chain": {
            "name": "chain",
            "location": 68,
            "return": [
                "str",
                "bytearray",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.chain.convert": {
            "name": "convert",
            "location": 87,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Tuple[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "limier-master/limier/typevars.py": {},
    "limier-master/limier/__init__.py": {},
    "limier-master/tests/test_basic.py": {
        "add": {
            "name": "add",
            "location": 6,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "output": [
                    "str",
                    "int"
                ],
                "typ": [
                    "bytes",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "test_conversion_errors": {
            "name": "test_conversion_errors",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[float]"
                ],
                "y": [
                    "float",
                    "List[float]"
                ]
            }
        }
    },
    "limier-master/tests/__init__.py": {}
}
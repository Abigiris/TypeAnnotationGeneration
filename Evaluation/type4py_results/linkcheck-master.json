{
    "linkcheck-master/linkcheck.py": {
        "positive_int": {
            "name": "positive_int",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "raw": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 30,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "Domain.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default_scheme": [
                    "int",
                    "tuple",
                    "float",
                    "bool"
                ],
                "netloc": [
                    "int",
                    "tuple",
                    "float",
                    "bool"
                ]
            }
        },
        "Domain.from_url": {
            "name": "from_url",
            "location": 73,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Pattern[str]",
                    "bytes",
                    "Union[str, Dict[str, Any]]",
                    "int"
                ],
                "url": [
                    "List[Tuple[int, int]]",
                    "str",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "Domain.url_in_domain": {
            "name": "url_in_domain",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Links.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Links.unchecked": {
            "name": "unchecked",
            "location": 86,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Links.pop": {
            "name": "pop",
            "location": 88,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "tuple",
                "requests.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "Links.add": {
            "name": "add",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link": [
                    "Tuple[float, float]",
                    "bool",
                    "Union[AsyncIterable[Any], Iterable[Any]]"
                ]
            }
        },
        "Links.add_many": {
            "name": "add_many",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "links": [
                    "Iterator[str]",
                    "List[str]",
                    "Iterable[Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Links.empty": {
            "name": "empty",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page._post__init__": {
            "name": "_post__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.url_is_valid": {
            "name": "url_is_valid",
            "location": 114,
            "return": [
                "str",
                "int",
                "Set[int]",
                "Union[None, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.urls": {
            "name": "urls",
            "location": 117,
            "return": [
                "typing.Generator[builtins.str, None, None]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "Optional[Exception]",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Page.normalize_url": {
            "name": "normalize_url",
            "location": 121,
            "return": [
                "int",
                "Dict[str, int]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "href": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "int"
                ]
            }
        },
        "Page.extract_urls": {
            "name": "extract_urls",
            "location": 150,
            "return": [
                "typing.Generator[builtins.str, None, None]"
            ],
            "arguments": {
                "self": [],
                "hrefs": [
                    "bool",
                    "Iterator[str]",
                    "int",
                    "Tuple[int, int]",
                    "T"
                ]
            }
        },
        "Page.is_full_url": {
            "name": "is_full_url",
            "location": 163,
            "return": [
                "str",
                "Tuple[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "Page.extract_hrefs": {
            "name": "extract_hrefs",
            "location": 167,
            "return": [
                "typing.Generator[builtins.str, None, None]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Report.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "links": [
                    "str",
                    "Optional[Callable]",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "Report.add_bad": {
            "name": "add_bad",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[\"libkol.Item\"]",
                    "int"
                ]
            }
        },
        "Report.add_good": {
            "name": "add_good",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[\"libkol.Item\"]",
                    "int"
                ]
            }
        },
        "Report.print": {
            "name": "print",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Report._print_quiet": {
            "name": "_print_quiet",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Report._print_verbose": {
            "name": "_print_verbose",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyRenderSorted.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "coll": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LazyRenderSorted.__str__": {
            "name": "__str__",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineBase.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root_url": [
                    "str",
                    "BinaryIO",
                    "dict",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "limit": [
                    "Callable[[Any, Any], Any]",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Exception",
                    "Dict[int, int]"
                ]
            }
        },
        "EngineBase.run": {
            "name": "run",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineBase.mk_page": {
            "name": "mk_page",
            "location": 226,
            "return": [
                "Page"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "Optional[bytes]"
                ],
                "response": [
                    "str",
                    "dict",
                    "Optional[bytes]"
                ]
            }
        },
        "EngineBase.exit_code": {
            "name": "exit_code",
            "location": 229,
            "return": [
                "str",
                "IO[Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequentialEngine.mk_page": {
            "name": "mk_page",
            "location": 233,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "requests.Response",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ],
                "response": [
                    "str",
                    "requests.Response",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "SequentialEngine.run": {
            "name": "run",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequentialEngine.fetch_url": {
            "name": "fetch_url",
            "location": 254,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "bool",
                    "bytes"
                ],
                "domain": [
                    "Sequence[str]",
                    "bool",
                    "Tuple[Sequence[Any], Sequence[str], Sequence[Any]]",
                    "Tuple[str, Sequence[str], Sequence[str]]",
                    "int",
                    "str"
                ]
            }
        },
        "AsyncEngine.run": {
            "name": "run",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.normalize_url.is_skippable": {
            "name": "is_skippable",
            "location": 129,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "Page.normalize_url.drop_fragment": {
            "name": "drop_fragment",
            "location": 131,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        }
    },
    "linkcheck-master/test_linkcheck.py": {
        "TestLinks.test_main": {
            "name": "test_main",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDomain.test_main": {
            "name": "test_main",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPage.test_extract_hrefs": {
            "name": "test_extract_hrefs",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPage.test_extract_urls": {
            "name": "test_extract_urls",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPage.test_normalize_url": {
            "name": "test_normalize_url",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
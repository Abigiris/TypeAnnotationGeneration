{
    "literate-lamp-master/literate_lamp/args.py": {
        "list_models": {
            "name": "list_models",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "models": [
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 19,
            "return": [
                "str",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "arguments": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "T",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "get_args.preprocessed_name": {
            "name": "preprocessed_name",
            "location": 138,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "split_type": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/common.py": {
        "set_args": {
            "name": "set_args",
            "location": 30,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "get_seq2seq": {
            "name": "get_seq2seq",
            "location": 35,
            "return": [],
            "arguments": {
                "encoder_type": []
            }
        },
        "get_encoder": {
            "name": "get_encoder",
            "location": 48,
            "return": [],
            "arguments": {
                "encoder_type": []
            }
        },
        "get_word_embeddings": {
            "name": "get_word_embeddings",
            "location": 64,
            "return": [],
            "arguments": {
                "vocabulary": []
            }
        },
        "build_dmn": {
            "name": "build_dmn",
            "location": 81,
            "return": [],
            "arguments": {
                "vocabulary": []
            }
        },
        "build_relational_xl": {
            "name": "build_relational_xl",
            "location": 115,
            "return": [],
            "arguments": {
                "vocabulary": []
            }
        },
        "build_advanced_xlnet": {
            "name": "build_advanced_xlnet",
            "location": 167,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_simple_xlnet": {
            "name": "build_simple_xlnet",
            "location": 210,
            "return": [],
            "arguments": {
                "vocabulary": []
            }
        },
        "build_dcmn": {
            "name": "build_dcmn",
            "location": 219,
            "return": [],
            "arguments": {
                "vocabulary": []
            }
        },
        "build_rel_han": {
            "name": "build_rel_han",
            "location": 242,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_relational_transformer": {
            "name": "build_relational_transformer",
            "location": 341,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_hierarchical_attn_net": {
            "name": "build_hierarchical_attn_net",
            "location": 427,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_advanced_attn_bert": {
            "name": "build_advanced_attn_bert",
            "location": 499,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_hierarchical_bert": {
            "name": "build_hierarchical_bert",
            "location": 554,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_zero_trian": {
            "name": "build_zero_trian",
            "location": 605,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_simple_trian": {
            "name": "build_simple_trian",
            "location": 694,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_advanced_bert": {
            "name": "build_advanced_bert",
            "location": 785,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_simple_bert": {
            "name": "build_simple_bert",
            "location": 830,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_baseline": {
            "name": "build_baseline",
            "location": 846,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_attentive_reader": {
            "name": "build_attentive_reader",
            "location": 869,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "build_trian": {
            "name": "build_trian",
            "location": 898,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "create_reader": {
            "name": "create_reader",
            "location": 998,
            "return": [],
            "arguments": {
                "reader_type": []
            }
        },
        "get_modelfn_reader": {
            "name": "get_modelfn_reader",
            "location": 1063,
            "return": [],
            "arguments": {}
        },
        "split_list": {
            "name": "split_list",
            "location": 1071,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 1081,
            "return": [],
            "arguments": {
                "model": [],
                "reader": [],
                "test_data": []
            }
        },
        "print_dmn_instance": {
            "name": "print_dmn_instance",
            "location": 1111,
            "return": [],
            "arguments": {
                "instance": [],
                "prediction": []
            }
        },
        "print_base_instance": {
            "name": "print_base_instance",
            "location": 1124,
            "return": [],
            "arguments": {
                "instance": [],
                "prediction": []
            }
        },
        "process_dmn_list": {
            "name": "process_dmn_list",
            "location": 1137,
            "return": [],
            "arguments": {
                "fields": []
            }
        },
        "print_xlnet_instance": {
            "name": "print_xlnet_instance",
            "location": 1143,
            "return": [],
            "arguments": {
                "instance": [],
                "probability": []
            }
        },
        "process_bert_list": {
            "name": "process_bert_list",
            "location": 1168,
            "return": [],
            "arguments": {
                "fields": []
            }
        },
        "print_bert_instance": {
            "name": "print_bert_instance",
            "location": 1181,
            "return": [],
            "arguments": {
                "instance": [],
                "prediction": []
            }
        },
        "error_analysis": {
            "name": "error_analysis",
            "location": 1195,
            "return": [],
            "arguments": {
                "model": [],
                "test_data": [],
                "sample_size": []
            }
        },
        "print_instance": {
            "name": "print_instance",
            "location": 1231,
            "return": [],
            "arguments": {
                "passage_id": [],
                "question_id": [],
                "question_type": [],
                "passage": [],
                "question": [],
                "answer1": [],
                "answer2": [],
                "probability": [],
                "label": []
            }
        },
        "print_xlnet_instance.clean": {
            "name": "clean",
            "location": 1146,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "literate-lamp-master/literate_lamp/conceptnet.py": {
        "triple_as_sentence": {
            "name": "triple_as_sentence",
            "location": 95,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "triple": [
                    "tuple",
                    "Tuple[str, str, str]",
                    "float",
                    "pathlib.Path"
                ]
            }
        },
        "ConceptNet.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "conceptnet_path": [
                    "Optional[pathlib.Path]",
                    "Optional[str]",
                    "str",
                    "Union[str, List[str]]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "ConceptNet.get_relation": {
            "name": "get_relation",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "word1": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "word2": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "ConceptNet.get_all_text_query_triples": {
            "name": "get_all_text_query_triples",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "Sequence[str]",
                    "int",
                    "Optional[int]",
                    "KT",
                    "bool",
                    "Tuple[Type[Exception]]"
                ],
                "query": [
                    "Sequence[str]",
                    "int",
                    "Optional[int]",
                    "KT",
                    "bool",
                    "Tuple[Type[Exception]]"
                ]
            }
        },
        "ConceptNet.get_text_query_relations": {
            "name": "get_text_query_relations",
            "location": 73,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ],
                "query": [
                    "Set[T]",
                    "List[Dict]",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/graph.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "literate-lamp-master/literate_lamp/layers.py": {
        "learned_embeddings": {
            "name": "learned_embeddings",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vocab": [
                    "str",
                    "torch.Tensor",
                    "int"
                ],
                "dimension": [
                    "str",
                    "torch.Tensor",
                    "int"
                ],
                "namespace": [
                    "int",
                    "list"
                ]
            }
        },
        "bert_embeddings": {
            "name": "bert_embeddings",
            "location": 253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pretrained_model": [
                    "IO[str]",
                    "dict",
                    "set",
                    "bool",
                    "List[str]",
                    "str",
                    "torch.nn.Module"
                ],
                "training": [
                    "IO[str]",
                    "dict",
                    "set",
                    "bool",
                    "List[str]",
                    "str",
                    "torch.nn.Module"
                ],
                "top_layer_only": [
                    "IO[str]",
                    "dict",
                    "set",
                    "bool",
                    "List[str]",
                    "str",
                    "torch.nn.Module"
                ]
            }
        },
        "xlnet_embeddings": {
            "name": "xlnet_embeddings",
            "location": 269,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "Optional[Union[Any, str]]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "model_path": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "Optional[Union[Any, str]]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "window_size": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "Optional[Union[Any, str]]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "training": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "Optional[Union[Any, str]]",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ],
                "top_layer_only": [
                    "bool",
                    "Callable[[], None]"
                ]
            }
        },
        "glove_embeddings": {
            "name": "glove_embeddings",
            "location": 289,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vocab": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "pathlib2.Path"
                ],
                "file_path": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "pathlib2.Path"
                ],
                "dimension": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "pathlib2.Path"
                ],
                "training": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path",
                    "pathlib2.Path"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "lstm_seq2seq": {
            "name": "lstm_seq2seq",
            "location": 303,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "output_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "num_layers": [
                    "int",
                    "bool",
                    "float"
                ],
                "bidirectional": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "gru_seq2seq": {
            "name": "gru_seq2seq",
            "location": 315,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "output_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "num_layers": [
                    "int",
                    "bool",
                    "float"
                ],
                "bidirectional": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "transformer_seq2seq": {
            "name": "transformer_seq2seq",
            "location": 327,
            "return": [
                "str"
            ],
            "arguments": {
                "input_dim": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "model_dim": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "feedforward_hidden_dim": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "num_layers": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "projection_dim": [
                    "int",
                    "float",
                    "tuple"
                ],
                "num_attention_heads": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "ttype": [
                    "str",
                    "int"
                ],
                "dropout": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "lstm_encoder": {
            "name": "lstm_encoder",
            "location": 358,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "output_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "num_layers": [
                    "int",
                    "bool",
                    "float"
                ],
                "bidirectional": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "gru_encoder": {
            "name": "gru_encoder",
            "location": 370,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "input_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "output_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "num_layers": [
                    "int",
                    "bool",
                    "float"
                ],
                "bidirectional": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "cnn_encoder": {
            "name": "cnn_encoder",
            "location": 382,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "input_dim": [
                    "int",
                    "Tuple[int]",
                    "Union[None, int]",
                    "bool"
                ],
                "output_dim": [
                    "int",
                    "Tuple[int]",
                    "Union[None, int]",
                    "bool"
                ],
                "num_filters": [
                    "int",
                    "Tuple[int]",
                    "Union[None, int]",
                    "bool"
                ],
                "ngram_filter_sizes": [
                    "int",
                    "Tuple[int]",
                    "Union[None, int]",
                    "bool"
                ]
            }
        },
        "BilinearMatrixAttention.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matrix1_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "matrix2_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "normalise": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BilinearMatrixAttention._forward_internal": {
            "name": "_forward_internal",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "matrix1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "matrix2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LinearAttention.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "bias": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LinearAttention.forward": {
            "name": "forward",
            "location": 85,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "busboy.util.Maybe[psycopg2.extensions.connection]",
                    "float",
                    "Optional[str]"
                ],
                "mask": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "LinearAttention.get_input_dim": {
            "name": "get_input_dim",
            "location": 116,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearAttention.get_output_dim": {
            "name": "get_output_dim",
            "location": 120,
            "return": [
                "str",
                "Optional[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearSelfAttention.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "normalise": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "bias": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LinearSelfAttention._forward_internal": {
            "name": "_forward_internal",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "int",
                    "Callable",
                    "str"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BilinearAttention.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vector_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "matrix_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "normalise": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BilinearAttention._forward_internal": {
            "name": "_forward_internal",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "vector": [
                    "int",
                    "Callable",
                    "str"
                ],
                "matrix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SequenceAttention.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "activation": [
                    "bool",
                    "str"
                ],
                "normalise": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "SequenceAttention._forward_internal": {
            "name": "_forward_internal",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int"
                ],
                "v": [
                    "int"
                ]
            }
        },
        "MultiHeadAttention.__init__": {
            "name": "__init__",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_heads": [
                    "int",
                    "str",
                    "float"
                ],
                "query_input_dim": [
                    "Optional[dict]",
                    "allennlp.nn.decoding.decoder_state.DecoderState",
                    "List['cirq.Circuit']",
                    "bool",
                    "Optional[\"GraphLogger\"]",
                    "int"
                ],
                "key_input_dim": [
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "Dict[str, List[str]]"
                ],
                "value_input_dim": [
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "attention_dim": [
                    "int",
                    "float",
                    "Optional[Union[int, float]]",
                    "Union[int, float]"
                ],
                "values_dim": [
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "output_projection_dim": [
                    "int",
                    "str",
                    "bool",
                    "Optional[float]",
                    "Optional[str]",
                    "float"
                ],
                "attention_dropout_prob": [
                    "Optional[dict]",
                    "allennlp.nn.decoding.decoder_state.DecoderState",
                    "List['cirq.Circuit']",
                    "bool",
                    "Optional[\"GraphLogger\"]",
                    "int"
                ]
            }
        },
        "MultiHeadAttention.get_input_dim": {
            "name": "get_input_dim",
            "location": 471,
            "return": [
                "str",
                "bool",
                "denite.util.UserContext",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.get_output_dim": {
            "name": "get_output_dim",
            "location": 474,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 478,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.forward": {
            "name": "forward",
            "location": 482,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "Sequence[Any]",
                    "float",
                    "str",
                    "list"
                ],
                "queries": [
                    "int",
                    "torch.Tensor",
                    "Union[int, float]",
                    "str",
                    "Dict[str, torch.LongTensor]"
                ],
                "values": [
                    "torch.Tensor",
                    "bytes",
                    "int",
                    "Dict[str, str]"
                ],
                "mask": [
                    "torch.Tensor",
                    "Optional[gluonts.model.common.Tensor]",
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Optional[Sequence[Any]]",
                    "List[Set[int]]"
                ]
            }
        },
        "HeterogenousSequenceAttention.__init__": {
            "name": "__init__",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u_input_dim": [
                    "int",
                    "Callable"
                ],
                "v_input_dim": [
                    "int",
                    "Callable"
                ],
                "projection_dim": [
                    "str",
                    "Optional[str]",
                    "float",
                    "Set[str]"
                ],
                "activation": [
                    "str",
                    "bool",
                    "Tuple[float, float]",
                    "Union[torch.Tensor, float]"
                ]
            }
        },
        "HeterogenousSequenceAttention.get_input_dim": {
            "name": "get_input_dim",
            "location": 612,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeterogenousSequenceAttention.get_output_dim": {
            "name": "get_output_dim",
            "location": 615,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeterogenousSequenceAttention.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 619,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeterogenousSequenceAttention.forward": {
            "name": "forward",
            "location": 623,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "torch.Tensor"
                ],
                "v": [
                    "torch.Tensor"
                ],
                "v_mask": [
                    "object",
                    "Tuple[int, int]",
                    "Optional[str]"
                ]
            }
        },
        "MultiHeadAttentionV2.__init__": {
            "name": "__init__",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_heads": [
                    "int",
                    "str"
                ],
                "u_input_dim": [
                    "Dict[str, int]",
                    "bool",
                    "allennlp.data.fields.sequence_field.SequenceField",
                    "str",
                    "int"
                ],
                "v_input_dim": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Union[str, float]"
                ],
                "attention_dim": [
                    "int",
                    "Optional[int]",
                    "Union[int, float]",
                    "Optional[float]"
                ],
                "output_projection_dim": [
                    "int",
                    "Dict[int, int]",
                    "float"
                ],
                "attention_dropout_prob": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Union[str, float]"
                ]
            }
        },
        "MultiHeadAttentionV2.get_input_dim": {
            "name": "get_input_dim",
            "location": 696,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttentionV2.get_output_dim": {
            "name": "get_output_dim",
            "location": 699,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttentionV2.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 703,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttentionV2._reshape_outputs": {
            "name": "_reshape_outputs",
            "location": 706,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "torch.FloatTensor",
                    "bytes",
                    "str"
                ]
            }
        },
        "MultiHeadAttentionV2._reshape_heads": {
            "name": "_reshape_heads",
            "location": 724,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "torch.tensor"
                ]
            }
        },
        "MultiHeadAttentionV2._multiply_and_mask": {
            "name": "_multiply_and_mask",
            "location": 737,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "str",
                    "Callable[[T], None]",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "k": [
                    "int",
                    "gluonts.model.common.Tensor",
                    "torch.Tensor",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "k_mask": [
                    "torch.Tensor",
                    "int",
                    "gluonts.model.common.Tensor",
                    "bool"
                ]
            }
        },
        "MultiHeadAttentionV2.forward": {
            "name": "forward",
            "location": 754,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "Union[float, List[float]]",
                    "float",
                    "gluonts.model.common.Tensor"
                ],
                "v": [
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "u_mask": [
                    "torch.LongTensor",
                    "Optional[int]",
                    "Union[int, None]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[gluonts.model.common.Tensor]"
                ],
                "v_mask": [
                    "Optional[bool]",
                    "Optional[Dict[str, str]]",
                    "Optional[int]",
                    "Optional[Dict]"
                ]
            }
        },
        "TransformerEncoderBlock.__init__": {
            "name": "__init__",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_dim": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "attention_dim": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "num_heads": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "feedforward_dim": [
                    "Optional[float]",
                    "float",
                    "int"
                ],
                "dropout": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "TransformerEncoderBlock.forward": {
            "name": "forward",
            "location": 856,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "Optional[str]",
                    "torch.Tensor",
                    "Optional[Dict]"
                ],
                "src_mask": [
                    "str",
                    "torch.Tensor",
                    "pathlib.Path",
                    "dict",
                    "int"
                ]
            }
        },
        "RelationTransformerEncoderBlock.__init__": {
            "name": "__init__",
            "location": 871,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_dim": [
                    "Tuple[int, int]",
                    "int",
                    "float",
                    "bool"
                ],
                "attention_dim": [
                    "Tuple[int, int]",
                    "int",
                    "float",
                    "bool"
                ],
                "num_heads": [
                    "Tuple[int, int]",
                    "int",
                    "float",
                    "bool"
                ],
                "feedforward_dim": [
                    "Optional[float]",
                    "float",
                    "int"
                ],
                "dropout": [
                    "Tuple[int, int]",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "RelationTransformerEncoderBlock._second_stage": {
            "name": "_second_stage",
            "location": 899,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "util.ArrayLike",
                    "float",
                    "gluonts.model.common.Tensor"
                ],
                "attn": [
                    "int",
                    "float"
                ]
            }
        },
        "RelationTransformerEncoderBlock.forward": {
            "name": "forward",
            "location": 909,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "torch.Tensor",
                    "float",
                    "int",
                    "pathlib.Path"
                ],
                "aux": [
                    "float",
                    "torch.Tensor",
                    "pathlib.Path",
                    "IO[bytes]",
                    "str",
                    "int"
                ],
                "src_mask": [
                    "float",
                    "str",
                    "torch.Tensor",
                    "pathlib.Path"
                ],
                "aux_mask": [
                    "float",
                    "str",
                    "torch.Tensor",
                    "pathlib.Path"
                ]
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "model_dim": [
                    "Optional[List[str]]",
                    "str",
                    "Dict[str, int]"
                ],
                "feedforward_hidden_dim": [
                    "int",
                    "float",
                    "Callable"
                ],
                "num_layers": [
                    "int",
                    "bool",
                    "Union[float, int]",
                    "str",
                    "float"
                ],
                "num_attention_heads": [
                    "int",
                    "float",
                    "Callable"
                ],
                "dropout_prob": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "TransformerEncoder._reset_parameters": {
            "name": "_reset_parameters",
            "location": 984,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 990,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 994,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 998,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.forward": {
            "name": "forward",
            "location": 1002,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int"
                ],
                "mask": [
                    "int",
                    "Optional[Callable[[str], bool]]",
                    "float"
                ]
            }
        },
        "RelationalTransformerEncoder.__init__": {
            "name": "__init__",
            "location": 1057,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_input_dim": [
                    "bytes",
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "kb_input_dim": [
                    "int",
                    "Iterator[int]",
                    "apps.common.coininfo.CoinInfo",
                    "Optional[bool]",
                    "str",
                    "float",
                    "Tuple[int]"
                ],
                "model_dim": [
                    "str",
                    "bool",
                    "int",
                    "IO[str]",
                    "bytes"
                ],
                "feedforward_hidden_dim": [
                    "int",
                    "float",
                    "allennlp.data.Vocabulary"
                ],
                "num_layers": [
                    "int",
                    "torch.Tensor",
                    "str",
                    "float"
                ],
                "num_attention_heads": [
                    "int",
                    "float",
                    "allennlp.data.Vocabulary"
                ],
                "dropout_prob": [
                    "int",
                    "float",
                    "allennlp.data.Vocabulary"
                ],
                "return_kb": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "RelationalTransformerEncoder._reset_parameters": {
            "name": "_reset_parameters",
            "location": 1099,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationalTransformerEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 1105,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationalTransformerEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 1109,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationalTransformerEncoder.is_bidirectional": {
            "name": "is_bidirectional",
            "location": 1113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationalTransformerEncoder.forward": {
            "name": "forward",
            "location": 1117,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "Optional[str]",
                    "str"
                ],
                "kb": [
                    "torch.Tensor",
                    "float",
                    "int"
                ],
                "src_mask": [
                    "Optional[torch.Tensor]",
                    "markdown.util.etree.Element",
                    "int",
                    "str"
                ],
                "kb_mask": [
                    "int",
                    "Optional[torch.Tensor]",
                    "bool"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/play.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "literate-lamp-master/literate_lamp/predictor.py": {
        "score_questions": {
            "name": "score_questions",
            "location": 58,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "str",
                "List[int]",
                "Callable[..., None]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "allennlp.models.Model",
                    "lms.lmsdb.models.User"
                ],
                "output_file": [
                    "TextIO",
                    "str",
                    "List[str]",
                    "Optional[int]"
                ],
                "testset": [
                    "Optional[BinaryIO]"
                ]
            }
        },
        "McScriptPredictor.predict": {
            "name": "predict",
            "location": 19,
            "return": [
                "dict",
                "bool",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "passage": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "question": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "answer0": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "answer1": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "McScriptPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 43,
            "return": [
                "str",
                "Iterable[str]",
                "salon.models.Stylist",
                "int"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "str",
                    "Exception",
                    "tartare.core.models.Job",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/preprocess.py": {
        "clean_word": {
            "name": "clean_word",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int"
                ]
            }
        },
        "process_file": {
            "name": "process_file",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "input_file": [
                    "TextIO",
                    "str",
                    "pathlib.Path"
                ],
                "output_file": [
                    "TextIO",
                    "str"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/stats.py": {
        "flatten": {
            "name": "flatten",
            "location": 18,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "l": [
                    "int",
                    "Dict[str, Set[str]]",
                    "List[List[str]]"
                ]
            }
        },
        "extract_field": {
            "name": "extract_field",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "str",
                    "float"
                ],
                "instances": [
                    "str",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TextStats.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance_texts": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TextStats.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetStats.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instances": [
                    "str",
                    "bool"
                ]
            }
        },
        "DatasetStats.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "literate-lamp-master/literate_lamp/train.py": {
        "make_prediction": {
            "name": "make_prediction",
            "location": 36,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "model": [
                    "dict",
                    "jumeaux.models.FinalAddOnPayload",
                    "models.seat_group.SeatGroup"
                ],
                "reader": [
                    "int",
                    "Type[T]",
                    "Set[int]"
                ],
                "verbose": [
                    "allennlp.models.model.Model",
                    "bool",
                    "Model",
                    "str"
                ]
            }
        },
        "test_load": {
            "name": "test_load",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "build_model_fn": [
                    "MutableMapping[str, Any]",
                    "tuple",
                    "str",
                    "List[dict]"
                ],
                "reader": [
                    "Mapping[str, Any]",
                    "model.Model",
                    "Dict[str, Any]",
                    "keras.Model",
                    "keanu.Model"
                ],
                "save_path": [
                    "pathlib.Path",
                    "list",
                    "int"
                ],
                "original_prediction": [
                    "allennlp.common.JsonDict",
                    "str",
                    "nevergrad.common.List[int]",
                    "numpy.ndarray",
                    "dict",
                    "List[int]",
                    "float"
                ],
                "cuda_device": [
                    "int",
                    "str",
                    "kata.data.repos.HardCoded.ConfigRepo"
                ]
            }
        },
        "run_model": {
            "name": "run_model",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_model.optimiser": {
            "name": "optimiser",
            "location": 109,
            "return": [
                "str",
                "numpy.ndarray",
                "bool"
            ],
            "arguments": {
                "model": [
                    "allennlp.models.Model",
                    "Type[T]",
                    "str",
                    "torch.nn.Module",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "List[Tuple[int, int, float]]",
                    "Model"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/util.py": {
        "visualise_model": {
            "name": "visualise_model",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "TestModule.Model",
                    "Set[int]",
                    "int"
                ]
            }
        },
        "example_input": {
            "name": "example_input",
            "location": 90,
            "return": [
                "Dict[str, Any]",
                "apps.common.coininfo.CoinInfo",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "index": [
                    "int",
                    "list",
                    "Optional[Union[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "is_cuda": {
            "name": "is_cuda",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "model": [
                    "Model",
                    "models.Model"
                ]
            }
        },
        "train_val_test_split": {
            "name": "train_val_test_split",
            "location": 108,
            "return": [
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "dataset": [
                    "int",
                    "list"
                ],
                "train_size": [
                    "int",
                    "list"
                ]
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 128,
            "return": [
                "bool",
                "str",
                "Optional[pathlib.Path]",
                "List[str]",
                "Generator"
            ],
            "arguments": {
                "reader": [
                    "Optional[str]",
                    "Optional[TextIO]",
                    "str",
                    "Optional[pathlib.Path]",
                    "Path",
                    "Union[str, pathlib.Path]",
                    "Union[str, List[str]]"
                ],
                "data_path": [
                    "Optional[str]",
                    "Optional[TextIO]",
                    "Path",
                    "Optional[pathlib.Path]",
                    "Optional[Union[str, pathlib.Path]]"
                ],
                "pre_processed_path": [
                    "str",
                    "Optional[pathlib.Path]",
                    "Path",
                    "Union[str, pathlib.Path]",
                    "Optional[str]",
                    "pathlib.Path",
                    "Union[str, List[str]]"
                ]
            }
        },
        "train_model": {
            "name": "train_model",
            "location": 168,
            "return": [
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "build_model_fn": [
                    "Dict[str, Any]",
                    "Set[str]",
                    "tuple",
                    "bool",
                    "List[dict]"
                ],
                "train_data": [
                    "Mapping[str, Any]",
                    "str",
                    "app.models.dto.ClientInfo"
                ],
                "val_data": [
                    "Mapping[str, Any]",
                    "str",
                    "app.models.dto.ClientInfo"
                ],
                "test_data": [
                    "salon.models.Stylist",
                    "bool",
                    "Sequence[int]",
                    "int"
                ],
                "save_path": [
                    "bytes",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "batch_size": [
                    "bytes",
                    "Callable",
                    "Hashable"
                ],
                "num_epochs": [
                    "bytes",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "optimiser_fn": [
                    "Optional[Iterable[str]]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[Any]",
                    "mxnegluon.Trainer"
                ],
                "grad_norm_clip": [
                    "bytes",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "sorting_keys": [
                    "int",
                    "dict",
                    "bytes",
                    "bool",
                    "Tuple[pathlib.Path, asyncpg_migrate.model.Config, int]",
                    "Optional[str]",
                    "tartare.core.models.Contributor"
                ],
                "cuda_device": [
                    "int",
                    "bool"
                ]
            }
        },
        "get_preprocessed_name": {
            "name": "get_preprocessed_name",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "split_name": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[dict]"
                ],
                "model": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[dict]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[dict]"
                ],
                "embedding": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[dict]"
                ]
            }
        },
        "get_experiment_name": {
            "name": "get_experiment_name",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "model": [
                    "str",
                    "dict"
                ],
                "config": [
                    "str",
                    "dict"
                ],
                "embedding": [
                    "str",
                    "dict"
                ],
                "name": [
                    "Optional[str]",
                    "Optional[float]",
                    "Dict[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "is_stopword": {
            "name": "is_stopword",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "is_punctuation": {
            "name": "is_punctuation",
            "location": 299,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Type"
                ]
            }
        },
        "get_term_frequency": {
            "name": "get_term_frequency",
            "location": 306,
            "return": [
                "str",
                "Tuple[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "word": [
                    "str",
                    "dict",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "clone_module": {
            "name": "clone_module",
            "location": 323,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "module": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Callable",
                    "List[Tuple[int, int]]"
                ],
                "num_clones": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Callable",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "parse_cuda": {
            "name": "parse_cuda",
            "location": 331,
            "return": [
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "cuda_str": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "tf2str": {
            "name": "tf2str",
            "location": 341,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        },
        "split_list": {
            "name": "split_list",
            "location": 350,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "list": [
                    "List[T]",
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "element": [
                    "List[Tuple[str, ...]]",
                    "List[float]",
                    "List[dict]",
                    "list",
                    "List[object]"
                ]
            }
        },
        "print_args": {
            "name": "print_args",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "DotDict.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotDict.__getattr__": {
            "name": "__getattr__",
            "location": 59,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list",
                    "List[gluonts.model.common.Tensor]"
                ]
            }
        },
        "DotDict.__setattr__": {
            "name": "__setattr__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "DotDict.__setitem__": {
            "name": "__setitem__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "set",
                    "T",
                    "bool",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "set",
                    "T",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "DotDict.__delattr__": {
            "name": "__delattr__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "DotDict.__delitem__": {
            "name": "__delitem__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/__init__.py": {},
    "literate-lamp-master/literate_lamp/models/advanced_attention_bert.py": {
        "AdvancedAttentionBertClassifier.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bert_path": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable[[Any], None]]",
                    "zerver.models.Realm",
                    "Iterable[str]"
                ],
                "encoder": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "programl.models.lstm.lstm.Lstm",
                    "Optional[str]"
                ],
                "vocab": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "Optional[List[str]]"
                ],
                "hidden_dim": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "int",
                    "path.Path"
                ],
                "encoder_dropout": [
                    "int",
                    "str",
                    "pathlib.Path",
                    "zerver.models.Realm",
                    "List[str]"
                ],
                "train_bert": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "zerver.models.Realm",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "AdvancedAttentionBertClassifier.forward": {
            "name": "forward",
            "location": 61,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "int",
                    "Mapping"
                ],
                "bert0": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "str",
                    "Collection[int]",
                    "List[Tuple[str, str]]",
                    "Sequence[T]"
                ],
                "bert1": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "str",
                    "Collection[int]",
                    "List[Tuple[str, str]]",
                    "Sequence[T]"
                ],
                "label": [
                    "str",
                    "Optional[List[str]]",
                    "bytes",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/advanced_bert.py": {
        "AdvancedBertClassifier.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bert_path": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable[[Any], None]]",
                    "zerver.models.Realm",
                    "Iterable[str]"
                ],
                "encoder": [
                    "str",
                    "bool",
                    "int",
                    "pathlib.Path"
                ],
                "vocab": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "Optional[List[str]]"
                ],
                "hidden_dim": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "int",
                    "path.Path"
                ],
                "encoder_dropout": [
                    "int",
                    "str",
                    "pathlib.Path",
                    "zerver.models.Realm",
                    "List[str]"
                ],
                "train_bert": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "zerver.models.Realm",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "AdvancedBertClassifier.forward": {
            "name": "forward",
            "location": 55,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "int",
                    "Mapping"
                ],
                "bert0": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "str",
                    "Collection[int]",
                    "List[Tuple[str, str]]",
                    "Sequence[T]"
                ],
                "bert1": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "str",
                    "Collection[int]",
                    "List[Tuple[str, str]]",
                    "Sequence[T]"
                ],
                "label": [
                    "str",
                    "Optional[List[str]]",
                    "bytes",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/advanced_xlnet.py": {
        "AdvancedXLNetClassifier.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "word_embeddings": [
                    "int",
                    "float",
                    "List[allennlp.data.Instance]"
                ],
                "encoder": [
                    "int",
                    "str",
                    "salon.models.Stylist"
                ],
                "encoder_dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "train_xlnet": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "AdvancedXLNetClassifier.forward": {
            "name": "forward",
            "location": 45,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "Callable[[], bool]",
                    "bool"
                ],
                "string0": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Tuple[str, str]"
                ],
                "string1": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Tuple[str, str]"
                ],
                "label": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "Optional[Iterable[str]]",
                    "bool"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/attentive_reader.py": {
        "AttentiveReader.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "float",
                    "int",
                    "List[float]",
                    "type"
                ],
                "p_encoder": [
                    "bool",
                    "allennlp.modules.seq2vec_encoders.Seq2VecEncoder",
                    "type",
                    "Optional[Mapping]",
                    "int"
                ],
                "q_encoder": [
                    "float",
                    "str"
                ],
                "a_encoder": [
                    "Mapping[str, Tuple[float, float, float]]"
                ],
                "vocab": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "torch.optim.Optimizer"
                ]
            }
        },
        "AttentiveReader.forward": {
            "name": "forward",
            "location": 67,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "int",
                    "str",
                    "Any",
                    "bool"
                ],
                "passage": [
                    "Optional[str]"
                ],
                "question": [
                    "int",
                    "list"
                ],
                "answer0": [
                    "bytes",
                    "bool",
                    "Optional[Type[Exception]]",
                    "str"
                ],
                "answer1": [
                    "bytes",
                    "bool",
                    "Optional[Type[Exception]]",
                    "str"
                ],
                "label": [
                    "Optional[Set[int]]",
                    "str"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/baseline.py": {
        "BaselineClassifier.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "float",
                    "List[allennlp.data.Instance]"
                ],
                "encoder": [
                    "int",
                    "bool",
                    "float"
                ],
                "vocab": [
                    "bool",
                    "models.LTI1p3Provider",
                    "str"
                ]
            }
        },
        "BaselineClassifier.forward": {
            "name": "forward",
            "location": 58,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "int",
                    "str",
                    "Any",
                    "bool"
                ],
                "passage": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "question": [
                    "int"
                ],
                "answer0": [
                    "int",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "answer1": [
                    "int",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "label": [
                    "Optional[Set[int]]",
                    "str"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/base_model.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BaseModel.get_metrics": {
            "name": "get_metrics",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "str",
                    "models.Telegram_Chat",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/dcmn.py": {
        "Dcmn.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "list",
                    "int",
                    "bool",
                    "List[int]",
                    "Callable"
                ],
                "vocab": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "embedding_dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Dcmn._forward_internal": {
            "name": "_forward_internal",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "int",
                    "bytes"
                ],
                "question": [
                    "int",
                    "bytes"
                ],
                "answer": [
                    "int",
                    "bytearray"
                ]
            }
        },
        "Dcmn.forward": {
            "name": "forward",
            "location": 107,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "int",
                    "str",
                    "Any",
                    "bool"
                ],
                "passage": [
                    "str",
                    "bool"
                ],
                "question": [
                    "str",
                    "bool"
                ],
                "answer0": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Sequence[str]",
                    "Optional[Mapping]"
                ],
                "answer1": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Sequence[str]",
                    "Optional[Mapping]"
                ],
                "label": [
                    "Optional[Set[int]]",
                    "str"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/hierarchical_attention_network.py": {
        "HierarchicalAttentionNetwork.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "float",
                    "List[allennlp.data.Instance]"
                ],
                "sentence_encoder": [
                    "zam_repondeur.models.Lecture",
                    "str",
                    "torch.Tensor"
                ],
                "document_encoder": [
                    "zam_repondeur.models.Lecture",
                    "bool"
                ],
                "vocab": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "encoder_dropout": [
                    "float",
                    "bool",
                    "str",
                    "audiopyle.lib.models.file_meta.AudioFileMeta"
                ]
            }
        },
        "HierarchicalAttentionNetwork.forward": {
            "name": "forward",
            "location": 63,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "int",
                    "Mapping"
                ],
                "bert0": [],
                "bert1": [],
                "label": [
                    "str",
                    "Optional[List[str]]",
                    "bytes",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/hierarchical_bert.py": {
        "HierarchicalBert.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bert_path": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "zerver.models.Realm",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ],
                "sentence_encoder": [
                    "dict",
                    "bool"
                ],
                "document_encoder": [
                    "str",
                    "allennlp.common.util.JsonDict",
                    "Dict[str, allennlp.commands.subcommand.Subcommand]",
                    "bool"
                ],
                "vocab": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "Optional[List[str]]"
                ],
                "encoder_dropout": [
                    "str",
                    "int",
                    "bytes",
                    "dict",
                    "float"
                ],
                "train_bert": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "zerver.models.Realm",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "HierarchicalBert.forward": {
            "name": "forward",
            "location": 50,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "int",
                    "Mapping"
                ],
                "bert0": [
                    "bool",
                    "list",
                    "str"
                ],
                "bert1": [
                    "bool",
                    "list",
                    "str"
                ],
                "label": [
                    "str",
                    "Optional[List[str]]",
                    "bytes",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/relational_han.py": {
        "RelationalHan.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "float",
                    "List[allennlp.data.Instance]"
                ],
                "sentence_encoder": [
                    "float"
                ],
                "document_encoder": [
                    "zam_repondeur.models.Lecture",
                    "torch.Tensor",
                    "Sequence['cirq.Qid']",
                    "float"
                ],
                "relation_encoder": [
                    "float"
                ],
                "document_relation_encoder": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "vocab": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "encoder_dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "ffn_dropout": [
                    "float",
                    "models.scenes.scenes_base.Scene",
                    "str"
                ]
            }
        },
        "RelationalHan._forward_internal": {
            "name": "_forward_internal",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "bert": [
                    "lunch_buddies.models.polls.Poll",
                    "int",
                    "Optional[List[int]]"
                ],
                "relations": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RelationalHan.forward": {
            "name": "forward",
            "location": 103,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "static_frame.core.util.UFunc"
                ],
                "bert0": [
                    "Dict[str, torch.Tensor]",
                    "bool",
                    "Optional[torch.Tensor]",
                    "int",
                    "str"
                ],
                "bert1": [
                    "Dict[str, torch.Tensor]",
                    "bool",
                    "Optional[torch.Tensor]",
                    "int",
                    "str"
                ],
                "p_a0_rel": [
                    "Dict[str, torch.Tensor]",
                    "bool",
                    "Optional[torch.Tensor]",
                    "int",
                    "str"
                ],
                "p_a1_rel": [
                    "Dict[str, torch.Tensor]",
                    "bool",
                    "Optional[torch.Tensor]",
                    "int",
                    "str"
                ],
                "label": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Callable[[str], bool]]",
                    "Optional[Sequence[Any]]",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/relational_transformer_model.py": {
        "RelationalTransformerModel.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "float",
                    "List[allennlp.data.Instance]"
                ],
                "sentence_encoder": [
                    "float"
                ],
                "relation_sentence_encoder": [
                    "int",
                    "bool",
                    "float"
                ],
                "relational_encoder": [
                    "zam_repondeur.models.Lecture",
                    "bool"
                ],
                "rel_embeddings": [
                    "int",
                    "bool",
                    "float"
                ],
                "vocab": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "encoder_dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RelationalTransformerModel.forward": {
            "name": "forward",
            "location": 64,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "static_frame.core.util.UFunc"
                ],
                "bert0": [
                    "float",
                    "Optional[int]",
                    "Dict[str, torch.LongTensor]",
                    "int",
                    "Optional[float]"
                ],
                "bert1": [
                    "float",
                    "Optional[int]",
                    "Dict[str, torch.LongTensor]",
                    "int",
                    "Optional[float]"
                ],
                "p_a0_rel": [
                    "Optional[int]",
                    "Optional[Union[int, float]]",
                    "Optional[float]",
                    "float",
                    "int"
                ],
                "p_a1_rel": [
                    "Optional[int]",
                    "Optional[Union[int, float]]",
                    "Optional[float]",
                    "float",
                    "int"
                ],
                "label": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Callable[[str], bool]]",
                    "Optional[Sequence[Any]]",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/relational_xlnet.py": {
        "RelationalXL.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "str",
                    "Container[str]",
                    "bool"
                ],
                "text_encoder": [
                    "str",
                    "int",
                    "TextIO"
                ],
                "relation_encoder": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "vocab": [
                    "str"
                ],
                "encoder_dropout": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "RelationalXL._forward_internal": {
            "name": "_forward_internal",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict",
                    "int",
                    "Optional[str]"
                ],
                "relations": [
                    "int",
                    "str",
                    "models.Name"
                ]
            }
        },
        "RelationalXL.forward": {
            "name": "forward",
            "location": 89,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "string0": [
                    "str"
                ],
                "string1": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "rel0": [
                    "str",
                    "bool"
                ],
                "rel1": [
                    "str",
                    "bool"
                ],
                "label": [
                    "bytes",
                    "Optional[Set[int]]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/simple_bert.py": {
        "SimpleBertClassifier.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bert_path": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable[[Any], None]]",
                    "zerver.models.Realm",
                    "Iterable[str]"
                ],
                "vocab": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "Optional[List[str]]"
                ],
                "train_bert": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "zerver.models.Realm",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "SimpleBertClassifier.forward": {
            "name": "forward",
            "location": 43,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "int",
                    "Mapping"
                ],
                "bert0": [
                    "bool",
                    "list",
                    "str"
                ],
                "bert1": [
                    "bool",
                    "list",
                    "str"
                ],
                "label": [
                    "str",
                    "Optional[List[str]]",
                    "bytes",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/simple_trian.py": {
        "SimpleTrian.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "List[int]"
                ],
                "rel_embeddings": [
                    "float",
                    "static_frame.core.util.UFunc",
                    "bool",
                    "int"
                ],
                "p_encoder": [
                    "float",
                    "int",
                    "str",
                    "allennlp.modules.seq2vec_encoders.Seq2VecEncoder",
                    "type"
                ],
                "q_encoder": [
                    "float",
                    "Optional[Union[float, Any]]",
                    "Optional[Iterable[\"Outcome\"]]",
                    "str"
                ],
                "a_encoder": [
                    "int",
                    "Mapping[str, Tuple[float, float, float]]"
                ],
                "vocab": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "bool",
                    "str",
                    "int"
                ],
                "embedding_dropout": [
                    "float",
                    "str",
                    "int"
                ],
                "encoder_dropout": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "SimpleTrian.forward": {
            "name": "forward",
            "location": 97,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "int",
                    "Mapping[str, Any]"
                ],
                "passage": [
                    "float",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "question": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "answer0": [
                    "float",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "answer1": [
                    "float",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "p_q_rel": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "p_a0_rel": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "str"
                ],
                "p_a1_rel": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "str"
                ],
                "label": [
                    "Optional[str]",
                    "str",
                    "Optional[Union[str, Any]]",
                    "Optional[bool]",
                    "Optional[Set[int]]",
                    "Optional[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/simple_xlnet.py": {
        "SimpleXLNetClassifier.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "Optional[List[str]]"
                ],
                "config_path": [
                    "str",
                    "pathlib.Path"
                ],
                "model_path": [
                    "str",
                    "pathlib.Path"
                ],
                "train_xlnet": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "SimpleXLNetClassifier.forward": {
            "name": "forward",
            "location": 45,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "Callable[[], bool]",
                    "bool"
                ],
                "string0": [
                    "str"
                ],
                "string1": [
                    "str"
                ],
                "label": [
                    "Optional[str]",
                    "str",
                    "Dict[str, str]",
                    "Optional[Iterable[str]]",
                    "bool"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/trian.py": {
        "Trian.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "list",
                    "int",
                    "bool",
                    "List[int]",
                    "Callable"
                ],
                "pos_embeddings": [
                    "int",
                    "bool",
                    "float"
                ],
                "ner_embeddings": [
                    "int",
                    "bool",
                    "float"
                ],
                "rel_embeddings": [
                    "int",
                    "bool",
                    "float"
                ],
                "p_encoder": [
                    "int",
                    "float",
                    "allennlp.modules.seq2seq_encoders.Seq2SeqEncoder",
                    "bool"
                ],
                "q_encoder": [
                    "str",
                    "int"
                ],
                "a_encoder": [
                    "int"
                ],
                "vocab": [
                    "denite.util.Nvim",
                    "bool",
                    "deoplete.util.Nvim",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "embedding_dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "encoder_dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Trian.forward": {
            "name": "forward",
            "location": 94,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool"
                ],
                "passage": [
                    "bool",
                    "dict",
                    "Optional[int]"
                ],
                "question": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "answer0": [
                    "bool",
                    "str"
                ],
                "answer1": [
                    "bool",
                    "str"
                ],
                "passage_pos": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "passage_ner": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "question_pos": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "p_q_rel": [
                    "bool",
                    "allennlp.common.util.JsonDict",
                    "bytes"
                ],
                "p_a0_rel": [
                    "bool",
                    "allennlp.common.util.JsonDict",
                    "bytes",
                    "float"
                ],
                "p_a1_rel": [
                    "bool",
                    "allennlp.common.util.JsonDict",
                    "bytes",
                    "float"
                ],
                "hc_feat": [
                    "Optional[float]",
                    "str",
                    "List[str]",
                    "Dict[int, Set[int]]"
                ],
                "label": [
                    "Optional[Set[int]]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/util.py": {
        "seq_over_seq": {
            "name": "seq_over_seq",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "encoder": [
                    "str",
                    "float",
                    "int"
                ],
                "sentences": [
                    "bool",
                    "float"
                ],
                "masks": [
                    "int",
                    "torch.Tensor",
                    "Optional[str]"
                ]
            }
        },
        "hierarchical_seq_over_seq": {
            "name": "hierarchical_seq_over_seq",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "encoder": [
                    "str",
                    "float",
                    "int"
                ],
                "sentences": [
                    "int"
                ],
                "masks": [
                    "list",
                    "OrderedDict",
                    "Tuple[int, int, int]",
                    "List[str]"
                ]
            }
        },
        "attention_over_sequence": {
            "name": "attention_over_sequence",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "attention": [
                    "int",
                    "list",
                    "str",
                    "torch.Tensor"
                ],
                "sequence": [
                    "str",
                    "list",
                    "int"
                ],
                "vector": [
                    "int",
                    "list",
                    "str",
                    "torch.Tensor"
                ]
            }
        },
        "initalise_weights": {
            "name": "initalise_weights",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "init": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "module": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/zero_trian.py": {
        "ZeroTrian.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int"
                ],
                "p_encoder": [
                    "bool",
                    "allennlp.modules.seq2vec_encoders.Seq2VecEncoder",
                    "type",
                    "Optional[Mapping]",
                    "int"
                ],
                "q_encoder": [
                    "float",
                    "str"
                ],
                "a_encoder": [
                    "Mapping[str, Tuple[float, float, float]]",
                    "Union[\"SAONegotiator\", Collection[\"SAONegotiator\"]]"
                ],
                "vocab": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "torch.optim.Optimizer"
                ],
                "embedding_dropout": [
                    "float",
                    "Union[int, float]"
                ],
                "encoder_dropout": [
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "ZeroTrian.forward": {
            "name": "forward",
            "location": 96,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "int",
                    "str",
                    "Any",
                    "bool"
                ],
                "passage": [
                    "Optional[str]"
                ],
                "question": [
                    "int",
                    "list"
                ],
                "answer0": [
                    "bytes",
                    "bool",
                    "Optional[Type[Exception]]",
                    "str"
                ],
                "answer1": [
                    "bytes",
                    "bool",
                    "Optional[Type[Exception]]",
                    "str"
                ],
                "label": [
                    "Optional[Set[int]]",
                    "str"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/__init__.py": {},
    "literate-lamp-master/literate_lamp/models/dmn/answer_module.py": {
        "AnswerModule.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "float",
                    "List[allennlp.data.Instance]"
                ],
                "encoder": [
                    "int",
                    "bool",
                    "float"
                ],
                "embedding_dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "encoder_dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AnswerModule.get_output_dim": {
            "name": "get_output_dim",
            "location": 28,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerModule.forward": {
            "name": "forward",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "answer": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "models.Movie",
                    "paradigm.models.Base",
                    "List[str]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/dmn/input_module.py": {
        "InputModule.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "float",
                    "List[allennlp.data.Instance]"
                ],
                "sentence_encoder": [
                    "int",
                    "bool",
                    "float"
                ],
                "document_encoder": [
                    "int",
                    "bool",
                    "float"
                ],
                "embedding_dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "encoder_dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "InputModule.get_output_dim": {
            "name": "get_output_dim",
            "location": 32,
            "return": [
                "str",
                "models.Profile",
                "bool",
                "dict",
                "Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputModule.forward": {
            "name": "forward",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "float",
                    "Optional[float]",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/dmn/memory_module.py": {
        "MemoryModule.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hidden_dim": [
                    "int",
                    "Dict[str, Any]",
                    "pynn.nn.NeuralNetwork",
                    "float",
                    "bytes"
                ],
                "num_hops": [
                    "str",
                    "int",
                    "Optional[int]",
                    "models.LTI1p3Provider"
                ],
                "dropout": [
                    "int",
                    "Dict[str, Any]",
                    "pynn.nn.NeuralNetwork",
                    "float",
                    "bytes"
                ]
            }
        },
        "MemoryModule.get_output_dim": {
            "name": "get_output_dim",
            "location": 39,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryModule.get_gate": {
            "name": "get_gate",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "facts": [
                    "list",
                    "List[Tuple[int, int]]",
                    "float",
                    "str",
                    "List[Dict]"
                ],
                "question": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "answer": [
                    "str",
                    "int",
                    "static_frame.core.util.DepthLevelSpecifier",
                    "Optional[Callable[[str], bool]]"
                ],
                "prev_mem": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "MemoryModule.forward": {
            "name": "forward",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "facts": [
                    "dict",
                    "models.User",
                    "List[str]",
                    "bool",
                    "int",
                    "bytes",
                    "str",
                    "IO"
                ],
                "question": [
                    "str",
                    "x509_pki.models.Certificate",
                    "List[torch.Tensor]",
                    "dict"
                ],
                "answer": [
                    "str",
                    "x509_pki.models.Certificate",
                    "List[torch.Tensor]",
                    "dict"
                ],
                "prev_mem": [
                    "str",
                    "x509_pki.models.Certificate",
                    "List[torch.Tensor]",
                    "dict"
                ],
                "hop": [
                    "complex",
                    "bytes",
                    "float",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/dmn/model.py": {
        "_assert_equal": {
            "name": "_assert_equal",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "torch.nn.Module",
                    "torch.Tensor"
                ],
                "b": [
                    "int",
                    "Callable[[T], None]"
                ]
            }
        },
        "Dmn.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "float",
                    "bool"
                ],
                "sentence_encoder": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "allennlp.modules.seq2vec_encoders.Seq2VecEncoder"
                ],
                "document_encoder": [
                    "int",
                    "float",
                    "bool"
                ],
                "question_encoder": [
                    "int",
                    "float",
                    "bool"
                ],
                "answer_encoder": [
                    "int",
                    "float",
                    "bool"
                ],
                "passes": [
                    "str",
                    "bool"
                ],
                "vocab": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "int",
                    "bool",
                    "torch.optim.Optimizer"
                ],
                "embedding_dropout": [
                    "int",
                    "float",
                    "bool"
                ],
                "encoder_dropout": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Dmn.forward": {
            "name": "forward",
            "location": 88,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "int",
                    "str",
                    "Any",
                    "bool"
                ],
                "sentences": [
                    "str",
                    "tuple",
                    "Tuple[str, str, int, int]"
                ],
                "question": [
                    "str",
                    "tuple",
                    "Tuple[str, str, int, int]"
                ],
                "answer0": [
                    "str",
                    "tuple",
                    "Tuple[str, str, int, int]"
                ],
                "answer1": [
                    "str",
                    "tuple",
                    "Tuple[str, str, int, int]"
                ],
                "label": [
                    "Optional[Set[int]]",
                    "str"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/dmn/output_module.py": {
        "OutputModule.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "memory_size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float"
                ],
                "answer_size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float"
                ],
                "num_labels": [
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "OutputModule.get_input_dim": {
            "name": "get_input_dim",
            "location": 22,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputModule.get_output_dim": {
            "name": "get_output_dim",
            "location": 25,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputModule.forward": {
            "name": "forward",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "str",
                    "Dict[str, int]"
                ],
                "answer": [
                    "str",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/dmn/question_module.py": {
        "QuestionModule.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word_embeddings": [
                    "int",
                    "float",
                    "List[allennlp.data.Instance]"
                ],
                "encoder": [
                    "int",
                    "bool",
                    "float"
                ],
                "embedding_dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "encoder_dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "QuestionModule.get_output_dim": {
            "name": "get_output_dim",
            "location": 28,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionModule.forward": {
            "name": "forward",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "Any"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/models/dmn/__init__.py": {},
    "literate-lamp-master/literate_lamp/modules/attention_gru.py": {
        "attention_gru": {
            "name": "attention_gru",
            "location": 87,
            "return": [
                "int",
                "List[int]",
                "float",
                "List[dict]",
                "dict"
            ],
            "arguments": {
                "input_dim": [
                    "int",
                    "torch.Tensor",
                    "Tuple[int]",
                    "str"
                ],
                "output_dim": [
                    "int",
                    "torch.Tensor",
                    "Tuple[int]",
                    "str"
                ],
                "num_layers": [
                    "int",
                    "bool",
                    "float"
                ],
                "bidirectional": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AttentionGRUCell.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "Optional[int]"
                ],
                "hidden_size": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "AttentionGRUCell.forward": {
            "name": "forward",
            "location": 22,
            "return": [
                "int",
                "torch.Tensor",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "previous_state": [],
                "gate": []
            }
        },
        "AttentionGRU.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "str",
                    "Callable",
                    "torch.Tensor",
                    "float"
                ],
                "output_dim": [
                    "int",
                    "bytes",
                    "str",
                    "bytearray"
                ]
            }
        },
        "AttentionGRU.forward": {
            "name": "forward",
            "location": 53,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "torch.Tensor",
                    "List[torch.Tensor]"
                ],
                "gate": [
                    "BaseException"
                ]
            }
        },
        "AttentionGRU.get_input_dim": {
            "name": "get_input_dim",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttentionGRU.get_output_dim": {
            "name": "get_output_dim",
            "location": 83,
            "return": [
                "str",
                "Set[str]",
                "Sequence[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "literate-lamp-master/literate_lamp/modules/position_encoder.py": {
        "position_encoder": {
            "name": "position_encoder",
            "location": 59,
            "return": [
                "int",
                "List[int]",
                "float",
                "List[dict]",
                "dict"
            ],
            "arguments": {
                "input_dim": [
                    "int",
                    "torch.Tensor",
                    "Tuple[int]",
                    "str"
                ],
                "output_dim": [
                    "int",
                    "torch.Tensor",
                    "Tuple[int]",
                    "str"
                ],
                "num_layers": [
                    "int",
                    "bool",
                    "float"
                ],
                "bidirectional": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PositionEncoder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "str",
                    "torch.Tensor",
                    "float",
                    "Callable"
                ],
                "output_dim": [
                    "int",
                    "allennlp.data.Vocabulary"
                ]
            }
        },
        "PositionEncoder.position_matrix": {
            "name": "position_matrix",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "seq_len": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "PositionEncoder.forward": {
            "name": "forward",
            "location": 24,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "torch.Tensor",
                    "int",
                    "torch.ByteTensor",
                    "Optional[torch.Tensor]"
                ],
                "mask": [
                    "Optional[int]",
                    "float",
                    "Optional[Any]",
                    "Optional[Mapping[int, complex]]",
                    "str",
                    "int"
                ]
            }
        },
        "PositionEncoder.get_input_dim": {
            "name": "get_input_dim",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionEncoder.get_output_dim": {
            "name": "get_output_dim",
            "location": 55,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "literate-lamp-master/literate_lamp/modules/xlnet_embedder.py": {
        "PretrainedXLNetModel.load": {
            "name": "load",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "pathlib.Path",
                    "dict",
                    "Union[pathlib.Path, str]",
                    "int",
                    "Optional[str]"
                ],
                "config_path": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ],
                "model_path": [
                    "paradigm.catalog.Path",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "Dict[str, float]",
                    "str",
                    "pathlib.Path",
                    "Optional[Callable]"
                ],
                "cache_model": [
                    "bool",
                    "List[int]",
                    "pathlib.Path",
                    "str",
                    "List[pathlib.Path]"
                ]
            }
        },
        "XLNetEmbedder.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xlnet_model": [
                    "str",
                    "bool",
                    "dict"
                ],
                "window_size": [
                    "int",
                    "bool",
                    "List[str]",
                    "Tuple[int, int]",
                    "Optional[bool]"
                ]
            }
        },
        "XLNetEmbedder.get_output_dim": {
            "name": "get_output_dim",
            "location": 66,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "XLNetEmbedder.forward": {
            "name": "forward",
            "location": 69,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "Optional[torch.BoolTensor]"
                ],
                "cls_indexes": [
                    "Optional[torch.Tensor]",
                    "torch.BoolTensor",
                    "bool",
                    "int",
                    "str"
                ],
                "token_type_ids": [
                    "Optional[torch.LongTensor]",
                    "torch.BoolTensor",
                    "torch.LongTensor",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "PretrainedXLNetEmbedder.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_path": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "model_path": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "window_size": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Callable[[None], None]",
                    "bool"
                ],
                "requires_grad": [
                    "bool",
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/modules/xlnet_indexer.py": {
        "XLNetIndexer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "vocab_file": [
                    "str",
                    "int",
                    "list",
                    "Union[str, Iterable[str]]"
                ],
                "sep_token": [
                    "str",
                    "int",
                    "bool"
                ],
                "cls_token": [
                    "str",
                    "int",
                    "bool"
                ],
                "pad_token": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "token_min_padding_length": [
                    "int",
                    "str"
                ]
            }
        },
        "XLNetIndexer.count_vocab_items": {
            "name": "count_vocab_items",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "allennlp.data.tokenizers.token.Token",
                    "Dict[str, Dict[str, int]]"
                ],
                "counter": [
                    "allennlp.data.tokenizers.token.Token",
                    "Dict[str, Dict[str, int]]"
                ]
            }
        },
        "XLNetIndexer.tokens_to_indices": {
            "name": "tokens_to_indices",
            "location": 66,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "vocabulary": [
                    "allennlp.data.vocabulary.Vocabulary",
                    "str",
                    "List[allennlp.data.tokenizers.token.Token]"
                ],
                "index_name": [
                    "str"
                ]
            }
        },
        "XLNetIndexer.get_padding_token": {
            "name": "get_padding_token",
            "location": 104,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XLNetIndexer.get_padding_lengths": {
            "name": "get_padding_lengths",
            "location": 108,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "XLNetIndexer.pad_token_sequence": {
            "name": "pad_token_sequence",
            "location": 112,
            "return": [
                "dict",
                "Callable",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Dict[str, List[int]]",
                    "Dict[str, int]"
                ],
                "desired_num_tokens": [
                    "Dict[str, List[int]]",
                    "Dict[str, int]"
                ],
                "padding_lengths": [
                    "Dict[str, int]",
                    "int"
                ]
            }
        },
        "XLNetIndexer.get_keys": {
            "name": "get_keys",
            "location": 121,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "index_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/modules/xlnet_pooler.py": {
        "XLNetPooler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "XLNetPooler.get_input_dim": {
            "name": "get_input_dim",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XLNetPooler.get_output_dim": {
            "name": "get_output_dim",
            "location": 20,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XLNetPooler.forward": {
            "name": "forward",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "hidden_states": [
                    "torch.Tensor",
                    "float",
                    "Dict[str, torch.Tensor]"
                ],
                "cls_index": [
                    "Optional[Tuple[torch.Tensor, torch.Tensor]]",
                    "Optional[torch.Tensor]",
                    "Dict[str, torch.LongTensor]",
                    "Union[int, None]",
                    "torch.LongTensor",
                    "torch.Tensor",
                    "Callable[[str], int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/modules/xlnet_word_splitter.py": {
        "PretrainedXLNetTokenizer.load": {
            "name": "load",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bytes",
                    "str"
                ],
                "vocab_file": [
                    "str",
                    "bool"
                ],
                "cache_model": [
                    "bool",
                    "BinaryIO",
                    "Iterable[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "XLNetWordSplitter.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_file": [
                    "Optional[int]",
                    "bool",
                    "int",
                    "list"
                ],
                "do_lower_case": [
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "XLNetWordSplitter.split_words": {
            "name": "split_words",
            "location": 42,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "list",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "float",
                    "List[str]",
                    "List[Tuple[float, str]]",
                    "int"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/modules/__init__.py": {},
    "literate-lamp-master/literate_lamp/readers/base_reader.py": {
        "BaseReader._read": {
            "name": "_read",
            "location": 20,
            "return": [
                "typing.Iterator[allennlp.data.Instance]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/extended_xlnet_reader.py": {
        "ExtendedXLNetReader.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vocab_file": [
                    "pathlib.Path",
                    "str"
                ],
                "conceptnet_path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "word_indexer": [
                    "Optional[str]",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "ExtendedXLNetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 66,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "passage": [
                    "str",
                    "bool",
                    "int"
                ],
                "question": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "answer0": [
                    "str",
                    "int"
                ],
                "answer1": [
                    "str",
                    "int"
                ],
                "label0": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]"
                ]
            }
        },
        "ExtendedXLNetReader.extend_passage": {
            "name": "extend_passage",
            "location": 109,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "List[pydantic.fields.ModelField]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "str",
                    "int"
                ],
                "question": [
                    "complex",
                    "bytes",
                    "float",
                    "bool",
                    "Optional[str]"
                ],
                "answer": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/full_trian_reader.py": {
        "FullTrianReader.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word_indexer": [
                    "float",
                    "bool",
                    "int",
                    "list"
                ],
                "is_bert": [
                    "bool",
                    "str"
                ],
                "conceptnet_path": [
                    "str",
                    "Iterable[Any]",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "FullTrianReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 94,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "passage": [
                    "str",
                    "list",
                    "List[str]",
                    "dict"
                ],
                "question": [
                    "str",
                    "list",
                    "List[str]",
                    "dict"
                ],
                "answer0": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[Any, Any]]",
                    "list",
                    "Dict[str, str]",
                    "Pattern[str]"
                ],
                "answer1": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[Any, Any]]",
                    "list",
                    "Dict[str, str]",
                    "Pattern[str]"
                ],
                "label0": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/relation_bert_reader.py": {
        "RelationBertReader.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "is_bert": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ],
                "conceptnet_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "word_indexer": [
                    "Optional[allennlp.data.token_indexers.TokenIndexer]",
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "RelationBertReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 72,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "passage": [
                    "str",
                    "Optional[str]"
                ],
                "question": [
                    "str",
                    "Optional[str]"
                ],
                "answer0": [
                    "str"
                ],
                "answer1": [
                    "str"
                ],
                "label0": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/relation_xlnet_reader.py": {
        "RelationXLNetReader.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vocab_file": [
                    "pathlib.Path",
                    "str"
                ],
                "conceptnet_path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "word_indexer": [
                    "Optional[str]",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "RelationXLNetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 62,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "passage": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "Optional[Any]"
                ],
                "question": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "Optional[Any]"
                ],
                "answer0": [
                    "int",
                    "str",
                    "Optional[Any]"
                ],
                "answer1": [
                    "int",
                    "str",
                    "Optional[Any]"
                ],
                "label0": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/sentence_reader.py": {
        "SentenceReader.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "embedding_type": [
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "int"
                ],
                "xlnet_vocab_file": [
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "int"
                ],
                "word_indexer": [
                    "Optional[str]",
                    "Optional[allennlp.data.token_indexers.TokenIndexer]"
                ]
            }
        },
        "SentenceReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 70,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "passage": [
                    "str",
                    "Optional[str]"
                ],
                "question": [
                    "str",
                    "bool"
                ],
                "answer0": [
                    "str",
                    "bool"
                ],
                "answer1": [
                    "str",
                    "bool"
                ],
                "label0": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/simple_bert_reader.py": {
        "SimpleBertReader.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word_indexer": [
                    "Optional[allennlp.data.token_indexers.TokenIndexer]",
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        },
        "SimpleBertReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 56,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "passage": [
                    "str",
                    "Optional[str]"
                ],
                "question": [
                    "str",
                    "Optional[str]"
                ],
                "answer0": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Optional[Set[int]]"
                ],
                "answer1": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Optional[Set[int]]"
                ],
                "label0": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/simple_mc_script_reader.py": {
        "SimpleMcScriptReader.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_type": [
                    "str",
                    "pathlib3x.Path",
                    "pathlib.Path",
                    "Union[str, BinaryIO]"
                ],
                "xlnet_vocab_file": [
                    "str",
                    "pathlib3x.Path",
                    "pathlib.Path",
                    "Union[str, BinaryIO]"
                ],
                "word_indexer": [
                    "Optional[str]",
                    "Optional[allennlp.data.token_indexers.TokenIndexer]",
                    "Sequence",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "SimpleMcScriptReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 56,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "passage": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "question": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "answer0": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "answer1": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "label0": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/simple_trian_reader.py": {
        "SimpleTrianReader.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word_indexer": [
                    "Optional[allennlp.data.token_indexers.TokenIndexer]",
                    "Optional[str]",
                    "str"
                ],
                "xlnet_vocab_file": [
                    "str",
                    "pathlib.Path",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "embedding_type": [
                    "str",
                    "pathlib.Path",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "conceptnet_path": [
                    "str",
                    "Optional[pathlib.Path]",
                    "Callable[[str, str], None]",
                    "Union[str, pathlib.Path]",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "SimpleTrianReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 62,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "passage": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "question": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "answer0": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "answer1": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "label0": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/simple_xlnet_reader.py": {
        "SimpleXLNetReader.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vocab_file": [
                    "pathlib.Path",
                    "bool"
                ],
                "word_indexer": [
                    "pathlib.Path",
                    "str",
                    "Union[str, List[str]]",
                    "Optional[Dict[str, str]]",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "SimpleXLNetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 65,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "str",
                "Set[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "passage_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_id": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "question_type": [
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "passage": [
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "question": [
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "answer0": [
                    "str"
                ],
                "answer1": [
                    "str"
                ],
                "label0": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/util.py": {
        "strs2toks": {
            "name": "strs2toks",
            "location": 20,
            "return": [
                "List[str]",
                "str",
                "bool",
                "pathlib.Path",
                "Sequence[dict]"
            ],
            "arguments": {
                "strings": [
                    "str",
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        },
        "toks2strs": {
            "name": "toks2strs",
            "location": 25,
            "return": [
                "str",
                "set",
                "Dict[str, Any]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "tokens": [
                    "str"
                ]
            }
        },
        "pieces2strs": {
            "name": "pieces2strs",
            "location": 30,
            "return": [
                "str",
                "set",
                "Dict[str, Any]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "tokens": [
                    "str"
                ]
            }
        },
        "compute_handcrafted_features": {
            "name": "compute_handcrafted_features",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "passage": [
                    "bool",
                    "Optional[Collection[str]]"
                ],
                "question": [
                    "int",
                    "str",
                    "List[str]",
                    "dict",
                    "list"
                ],
                "answer0": [
                    "str",
                    "Optional[float]"
                ],
                "answer1": [
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "bert_sliding_window": {
            "name": "bert_sliding_window",
            "location": 83,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "question": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[Union[int, slice], Union[int, slice]]"
                ],
                "answer": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[Union[int, slice], Union[int, slice]]"
                ],
                "passage": [
                    "bytes",
                    "Sequence['cirq.Qid']",
                    "int",
                    "List[Tuple]",
                    "str",
                    "List[str]",
                    "float"
                ],
                "max_wordpieces": [
                    "bool",
                    "Union[Dict, List]",
                    "allennlp.models.Model",
                    "int",
                    "Iterable[str]"
                ],
                "stride": [
                    "int",
                    "Iterable[Any]",
                    "Type[Exception]",
                    "str",
                    "bool"
                ]
            }
        },
        "xlnet_input_string": {
            "name": "xlnet_input_string",
            "location": 101,
            "return": [
                "str",
                "Optional[str]",
                "denite.util.UserContext",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "question": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "dict"
                ],
                "answer": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "dict"
                ],
                "passage": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "relation_sentences": {
            "name": "relation_sentences",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "conceptnet": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "util.k8s.k8s_info.PodStatus"
                ],
                "text": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "util.k8s.k8s_info.PodStatus"
                ],
                "query": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "util.k8s.k8s_info.PodStatus"
                ]
            }
        },
        "get_tokenizer": {
            "name": "get_tokenizer",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "embedding_type": [
                    "str"
                ],
                "xlnet_vocab_file": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "int"
                ]
            }
        },
        "get_indexer": {
            "name": "get_indexer",
            "location": 124,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "embedding_type": [
                    "str",
                    "List[str]",
                    "float",
                    "int"
                ],
                "xlnet_vocab_file": [
                    "bytes",
                    "Optional[Union[float, str]]",
                    "int",
                    "TextIO",
                    "str"
                ]
            }
        },
        "split_sentences": {
            "name": "split_sentences",
            "location": 137,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "nlp": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "get_sentencizer": {
            "name": "get_sentencizer",
            "location": 143,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "compute_handcrafted_features.is_valid": {
            "name": "is_valid",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": [
                    "ebl.transliteration.domain.tokens.Token",
                    "bytes",
                    "List[str]",
                    "oj.tokens.Token",
                    "List[List[str]]",
                    "str"
                ]
            }
        },
        "compute_handcrafted_features.co_occurrence": {
            "name": "co_occurrence",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "int",
                    "bytes",
                    "Tuple[int, int]",
                    "str",
                    "float"
                ],
                "query": [
                    "List[str]",
                    "str",
                    "Set[str]",
                    "Dict[int, Dict[str, Any]]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "literate-lamp-master/literate_lamp/readers/__init__.py": {}
}
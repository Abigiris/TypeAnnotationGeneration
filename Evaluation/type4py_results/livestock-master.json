{
    "livestock-master/setup.py": {},
    "livestock-master/archive/geometry_old.py": {
        "fix_mesh": {
            "name": "fix_mesh",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mesh": [
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "tuple"
                ],
                "detail": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "livestock-master/archive/hydrology_old.py": {
        "CMFModel.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CMFModel.load_cmf_files": {
            "name": "load_cmf_files",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "delete_after_load": [
                    "Dict[str, Any]",
                    "str",
                    "Union[int, float]",
                    "int"
                ]
            }
        },
        "CMFModel.mesh_to_cells": {
            "name": "mesh_to_cells",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "int",
                    "str",
                    "Union[str, int]"
                ],
                "mesh_path": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "delete_after_load": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ]
            }
        },
        "CMFModel.add_tree": {
            "name": "add_tree",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "int"
                ],
                "cell_index": [
                    "List[str]",
                    "Tuple[List[Any], List[Any]]",
                    "bool",
                    "int"
                ],
                "property_dict": [
                    "dict"
                ]
            }
        },
        "CMFModel.set_vegetation_properties": {
            "name": "set_vegetation_properties",
            "location": 296,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "cell_": [
                    "dict"
                ],
                "property_dict": [
                    "dict"
                ]
            }
        },
        "CMFModel.configure_cells": {
            "name": "configure_cells",
            "location": 321,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "bool",
                    "float",
                    "Optional[Dict]",
                    "str"
                ],
                "cell_properties_dict": [
                    "str",
                    "Optional[str]",
                    "Iterable[Tuple[str, dict]]",
                    "dict"
                ]
            }
        },
        "CMFModel.create_weather": {
            "name": "create_weather",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "CMFModel.create_boundary_conditions": {
            "name": "create_boundary_conditions",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "int",
                    "Optional[str]",
                    "dict",
                    "Dict[Any, int]"
                ]
            }
        },
        "CMFModel.config_outputs": {
            "name": "config_outputs",
            "location": 593,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "list",
                    "int",
                    "List[Tuple[str, str]]",
                    "Union[int, str]",
                    "List[Optional[str]]",
                    "List[str]"
                ]
            }
        },
        "CMFModel.gather_results": {
            "name": "gather_results",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "bytes"
                ],
                "time": [
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "CMFModel.print_solver_time": {
            "name": "print_solver_time",
            "location": 724,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "solver_time": [
                    "int",
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "float"
                ],
                "start_time": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "last_time": [
                    "float",
                    "Iterable[int]",
                    "int",
                    "str",
                    "Optional[float]",
                    "bool",
                    "Optional[int]"
                ],
                "step": [
                    "List[int]",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "CMFModel.solve": {
            "name": "solve",
            "location": 770,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "List[deque]",
                    "Callable[[], None]"
                ],
                "tolerance": [
                    "str",
                    "float",
                    "Dict[str, int]",
                    "bool",
                    "int"
                ]
            }
        },
        "CMFModel.save_results": {
            "name": "save_results",
            "location": 798,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[Dict[str, str]]",
                "List[str]",
                "Dict[str, Optional[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMFModel.run_model": {
            "name": "run_model",
            "location": 828,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMFModel.load_cmf_files.load_weather": {
            "name": "load_weather",
            "location": 45,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "delete": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "BinaryIO",
                    "str",
                    "int"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_tree": {
            "name": "load_tree",
            "location": 76,
            "return": [
                "int",
                "float",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Union[float, str]",
                    "bool",
                    "Optional[str]"
                ],
                "delete": [
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[Callable]",
                    "Optional[int]"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_ground": {
            "name": "load_ground",
            "location": 106,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "delete": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "BinaryIO",
                    "str",
                    "int"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_mesh": {
            "name": "load_mesh",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_outputs": {
            "name": "load_outputs",
            "location": 145,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "folder": [
                    "str"
                ],
                "delete": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_solver_info": {
            "name": "load_solver_info",
            "location": 168,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "delete": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "BinaryIO"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_boundary": {
            "name": "load_boundary",
            "location": 191,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Union[float, str]"
                ],
                "delete": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "BinaryIO",
                    "str",
                    "int"
                ]
            }
        },
        "CMFModel.configure_cells.install_connections": {
            "name": "install_connections",
            "location": 334,
            "return": [
                "bool"
            ],
            "arguments": {
                "cell_": [
                    "int",
                    "str",
                    "Iterable[int]"
                ],
                "evapotranspiration_method": [
                    "str",
                    "bool"
                ]
            }
        },
        "CMFModel.configure_cells.retention_curve": {
            "name": "retention_curve",
            "location": 356,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "r_curve_": [
                    "int",
                    "float",
                    "Sized",
                    "str"
                ]
            }
        },
        "CMFModel.configure_cells.build_cell": {
            "name": "build_cell",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "cell_id": [
                    "str",
                    "int",
                    "Dict[int, str]"
                ],
                "cmf_project_": [
                    "str",
                    "int",
                    "Dict[int, str]"
                ],
                "cell_property_dict": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ],
                "r_curve_": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CMFModel.configure_cells.flux_connections": {
            "name": "flux_connections",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_project_": [
                    "Container[T]",
                    "bool"
                ],
                "cell_property_dict": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CMFModel.create_weather.create_time_series": {
            "name": "create_time_series",
            "location": 421,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "int",
                "dict"
            ],
            "arguments": {
                "analysis_length": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "time_step": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "CMFModel.create_weather.weather_to_time_series": {
            "name": "weather_to_time_series",
            "location": 430,
            "return": [
                "str"
            ],
            "arguments": {
                "weather": [
                    "str",
                    "List[str]",
                    "List[Dict]",
                    "float"
                ]
            }
        },
        "CMFModel.create_weather.get_weather_for_cell": {
            "name": "get_weather_for_cell",
            "location": 454,
            "return": [
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "cell_id": [
                    "int",
                    "bool",
                    "Union[int, str]",
                    "str"
                ],
                "project_weather_dict": [
                    "dict",
                    "Type[str]",
                    "Dict[str, str]",
                    "complex",
                    "str"
                ]
            }
        },
        "CMFModel.create_weather.create_weather_station": {
            "name": "create_weather_station",
            "location": 478,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cmf_project_": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "cell_id": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "weather": [
                    "str",
                    "int"
                ],
                "location": [
                    "str"
                ]
            }
        },
        "CMFModel.create_weather.connect_weather_to_cells": {
            "name": "connect_weather_to_cells",
            "location": 502,
            "return": [
                ""
            ],
            "arguments": {
                "cell_": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "rain_station": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "meteo_station": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "CMFModel.create_boundary_conditions.set_inlet": {
            "name": "set_inlet",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "boundary_condition_": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "cmf_project_": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CMFModel.create_boundary_conditions.set_outlet": {
            "name": "set_outlet",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "boundary_condition_": [
                    "str",
                    "dict",
                    "Tuple[str, int]"
                ],
                "index_": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "cmf_project_": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "CMFModel.create_boundary_conditions.set_boundary_condition": {
            "name": "set_boundary_condition",
            "location": 580,
            "return": [
                ""
            ],
            "arguments": {
                "boundary_condition_": [
                    "bool",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Iterable[str]",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "bc_index": [
                    "float",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "cmf_project_": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ]
            }
        }
    },
    "livestock-master/archive/rain.py": {
        "drain_mesh_paths": {
            "name": "drain_mesh_paths",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "files_path": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "drain_pools": {
            "name": "drain_pools",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "topographic_index": {
            "name": "topographic_index",
            "location": 845,
            "return": [
                ""
            ],
            "arguments": {
                "meshPath": [
                    "bool",
                    "List[int]",
                    "List[Dict[str, Any]]"
                ],
                "drainCurvesPath": [
                    "bool",
                    "List[int]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "drain_mesh_paths.face_vertices": {
            "name": "face_vertices",
            "location": 57,
            "return": [
                "bool",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {
                "face_index_": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "drain_mesh_paths.over_edge": {
            "name": "over_edge",
            "location": 64,
            "return": [
                "Callable",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "point": [
                    "DefaultDict[int, List[Any]]",
                    "List[str]",
                    "OrderedDict",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "drain_mesh_paths.drain_path": {
            "name": "drain_path",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "drain_pools.pool": {
            "name": "pool",
            "location": 290,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "faceIndex": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ],
                "point": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "volume": [
                    "str",
                    "int",
                    "Tuple['cirq.Qid']",
                    "numpy.ma.MaskedArray"
                ]
            }
        },
        "simple_rain.__init__": {
            "name": "__init__",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cpus": [
                    "int",
                    "Callable[[], float]",
                    "Optional[int]"
                ],
                "precipitation": [
                    "Tuple[float, float, float, float]",
                    "threading.Event",
                    "int",
                    "bool",
                    "Callable[..., None]",
                    "Callable"
                ],
                "windSpeed": [
                    "Tuple[float, float, float, float]",
                    "threading.Event",
                    "int",
                    "bool",
                    "Callable[..., None]",
                    "Callable"
                ],
                "windDirection": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Set[str]"
                ],
                "testPoints": [
                    "Tuple[int]",
                    "bool",
                    "int"
                ],
                "testVectors": [
                    "Tuple[int]",
                    "bool",
                    "int"
                ],
                "context": [
                    "Tuple[float, float, float, float]",
                    "threading.Event",
                    "int",
                    "bool",
                    "Callable[..., None]",
                    "Callable"
                ],
                "temperature": [
                    "Tuple[float, float, float, float]",
                    "threading.Event",
                    "int",
                    "bool",
                    "Callable[..., None]",
                    "Callable"
                ],
                "k": [
                    "bool",
                    "int",
                    "numpy.dtype",
                    "Callable",
                    "str"
                ]
            }
        },
        "simple_rain.rainHits": {
            "name": "rainHits",
            "location": 657,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "simple_rain.computeAngles": {
            "name": "computeAngles",
            "location": 815,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "topographic_index.topoIndex": {
            "name": "topoIndex",
            "location": 871,
            "return": [
                "int",
                "str",
                "List[Dict[str, Any]]",
                "Optional[float]"
            ],
            "arguments": {
                "a": [
                    "Pattern"
                ],
                "beta": [
                    "Pattern"
                ]
            }
        },
        "topographic_index.computeBeta": {
            "name": "computeBeta",
            "location": 874,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "normal": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "topographic_index.processDrainCurve": {
            "name": "processDrainCurve",
            "location": 878,
            "return": [
                "bool"
            ],
            "arguments": {
                "curveIndex": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "drain_pools.pool.createBbox": {
            "name": "createBbox",
            "location": 381,
            "return": [
                "str",
                "multiprocessing.Queue",
                "bool",
                "bytes"
            ],
            "arguments": {
                "z": [
                    "Sequence[int]",
                    "Optional[numpy.dtype]",
                    "List[List[int]]",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "drain_pools.pool.getVolMesh": {
            "name": "getVolMesh",
            "location": 428,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "newMesh": [
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "bottomFaces": [
                    "str",
                    "bool",
                    "BinaryIO",
                    "List[str]",
                    "Union[str, List[str]]",
                    "bytes"
                ],
                "z": [
                    "int",
                    "dict",
                    "List[Tuple[int, int]]",
                    "numpy.ndarray",
                    "List[mxnend.array]"
                ]
            }
        },
        "drain_pools.pool.intersectAndBottomFaces": {
            "name": "intersectAndBottomFaces",
            "location": 468,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "bMesh": [
                    "List[float]",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "Union[str, IO[bytes]]"
                ],
                "z": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "drain_pools.pool.findHeight": {
            "name": "findHeight",
            "location": 511,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "z": [
                    "Dict[str, Any]"
                ]
            }
        },
        "drain_pools.pool.finalMesh": {
            "name": "finalMesh",
            "location": 545,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "z": [
                    "numpy.array",
                    "str",
                    "float"
                ]
            }
        },
        "simple_rain.rainHits.rain_vector": {
            "name": "rain_vector",
            "location": 667,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Vw": [
                    "str",
                    "Union[Callable, None]",
                    "int",
                    "float"
                ],
                "regn": [
                    "int",
                    "Callable",
                    "str",
                    "Callable[[], None]",
                    "Hashable"
                ]
            }
        },
        "simple_rain.rainHits.rotate_yz": {
            "name": "rotate_yz",
            "location": 698,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "angle": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "simple_rain.rainHits.rotate_xy": {
            "name": "rotate_xy",
            "location": 701,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "angle": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "simple_rain.rainHits.B_wind": {
            "name": "B_wind",
            "location": 705,
            "return": [
                "multiprocessing.Queue",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "angle": [
                    "str",
                    "float",
                    "int"
                ],
                "direction": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "simple_rain.rainHits.rayShoot": {
            "name": "rayShoot",
            "location": 717,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "simple_rain.rainHits.rain_vector.f_a": {
            "name": "f_a",
            "location": 677,
            "return": [
                "str",
                "Union[int, float, complex]",
                "Mapping[Any, Any]",
                "Dict[str, int]",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "I": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "livestock-master/build/lib/livestock/air.py": {
        "new_temperature_and_relative_humidity": {
            "name": "new_temperature_and_relative_humidity",
            "location": 17,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "max_possible_vapour_flux": {
            "name": "max_possible_vapour_flux",
            "location": 102,
            "return": [],
            "arguments": {
                "vapour_mass_flux": [],
                "volume": [],
                "temperature_in_kelvin": [],
                "vapour_pressure": []
            }
        },
        "compute_temperature_relative_humidity": {
            "name": "compute_temperature_relative_humidity",
            "location": 130,
            "return": [],
            "arguments": {
                "temperature_in_k": [],
                "relative_humidity": [],
                "vapour_mass_flux": [],
                "volume": []
            }
        },
        "run_row": {
            "name": "run_row",
            "location": 192,
            "return": [],
            "arguments": {
                "input_package": []
            }
        },
        "latent_heat_flux": {
            "name": "latent_heat_flux",
            "location": 239,
            "return": [],
            "arguments": {
                "vapour_mass_flux": []
            }
        },
        "convert_vapour_flux_to_kgh": {
            "name": "convert_vapour_flux_to_kgh",
            "location": 259,
            "return": [],
            "arguments": {
                "vapour_flux": []
            }
        },
        "convert_relative_humidity_to_unitless": {
            "name": "convert_relative_humidity_to_unitless",
            "location": 275,
            "return": [],
            "arguments": {
                "rh": []
            }
        },
        "convert_relative_humidity_to_percentage": {
            "name": "convert_relative_humidity_to_percentage",
            "location": 288,
            "return": [],
            "arguments": {
                "rh": []
            }
        },
        "new_mean_relative_humidity": {
            "name": "new_mean_relative_humidity",
            "location": 301,
            "return": [],
            "arguments": {
                "volume": [],
                "temperature_internal": [],
                "vapour_pressure_external": [],
                "vapour_production": []
            }
        },
        "new_mean_vapour_pressure": {
            "name": "new_mean_vapour_pressure",
            "location": 327,
            "return": [],
            "arguments": {
                "volume": [],
                "temperature": [],
                "vapour_pressure_external": [],
                "vapour_production": []
            }
        },
        "new_mean_temperature": {
            "name": "new_mean_temperature",
            "location": 356,
            "return": [],
            "arguments": {
                "volume": [],
                "temperature": [],
                "heat": []
            }
        },
        "celsius_to_kelvin": {
            "name": "celsius_to_kelvin",
            "location": 383,
            "return": [],
            "arguments": {
                "celsius": []
            }
        },
        "kelvin_to_celsius": {
            "name": "kelvin_to_celsius",
            "location": 400,
            "return": [],
            "arguments": {
                "kelvin": []
            }
        },
        "vapour_pressure_to_relative_humidity": {
            "name": "vapour_pressure_to_relative_humidity",
            "location": 416,
            "return": [],
            "arguments": {
                "vapour_pressure": [],
                "temperature": []
            }
        },
        "relative_humidity_to_vapour_pressure": {
            "name": "relative_humidity_to_vapour_pressure",
            "location": 434,
            "return": [],
            "arguments": {
                "relative_humidity": [],
                "temperature": []
            }
        },
        "stratification": {
            "name": "stratification",
            "location": 452,
            "return": [],
            "arguments": {
                "height": [],
                "value_mean": [],
                "height_top": [],
                "value_top": []
            }
        },
        "saturated_vapour_pressure": {
            "name": "saturated_vapour_pressure",
            "location": 471,
            "return": [],
            "arguments": {
                "temperature": []
            }
        },
        "wind_speed_to_hour_flux": {
            "name": "wind_speed_to_hour_flux",
            "location": 489,
            "return": [],
            "arguments": {
                "wind_speed": []
            }
        },
        "diameter_from_area": {
            "name": "diameter_from_area",
            "location": 505,
            "return": [],
            "arguments": {
                "area": []
            }
        },
        "wind_speed_to_flux": {
            "name": "wind_speed_to_flux",
            "location": 520,
            "return": [],
            "arguments": {
                "wind_speed": [],
                "height": [],
                "cross_section": []
            }
        },
        "new_temperature_and_relative_humidity.get_files": {
            "name": "get_files",
            "location": 28,
            "return": [],
            "arguments": {
                "folder_": []
            }
        },
        "new_temperature_and_relative_humidity.reconstruct_results": {
            "name": "reconstruct_results",
            "location": 47,
            "return": [],
            "arguments": {
                "folder_": [],
                "processed_rows_": []
            }
        }
    },
    "livestock-master/build/lib/livestock/blender.py": {
        "clean": {
            "name": "clean",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/build/lib/livestock/flow.py": {
        "get_curve_points": {
            "name": "get_curve_points",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "start_point": [
                    "int",
                    "float"
                ],
                "start_index": [
                    "int",
                    "float"
                ],
                "point_list": [
                    "int",
                    "list",
                    "List[str]",
                    "bytes",
                    "float"
                ]
            }
        },
        "flow_from_centers": {
            "name": "flow_from_centers",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "livestock-master/build/lib/livestock/geometry.py": {
        "ray_triangle_intersection": {
            "name": "ray_triangle_intersection",
            "location": 23,
            "return": [],
            "arguments": {
                "ray_near": [],
                "ray_dir": [],
                "V": []
            }
        },
        "lowest_face_vertex": {
            "name": "lowest_face_vertex",
            "location": 57,
            "return": [],
            "arguments": {
                "v0": [],
                "v1": [],
                "v2": []
            }
        },
        "angle_between_vectors": {
            "name": "angle_between_vectors",
            "location": 96,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": [],
                "force_angle": []
            }
        },
        "line_intersection": {
            "name": "line_intersection",
            "location": 144,
            "return": [],
            "arguments": {
                "p1": [],
                "p2": [],
                "p3": [],
                "p4": []
            }
        },
        "obj_to_lists": {
            "name": "obj_to_lists",
            "location": 166,
            "return": [],
            "arguments": {
                "obj_file": []
            }
        },
        "centroid_z": {
            "name": "centroid_z",
            "location": 217,
            "return": [],
            "arguments": {
                "polygon": []
            }
        },
        "obj_to_polygons": {
            "name": "obj_to_polygons",
            "location": 236,
            "return": [],
            "arguments": {
                "obj_file": []
            }
        },
        "shapely_to_pyshp": {
            "name": "shapely_to_pyshp",
            "location": 260,
            "return": [],
            "arguments": {
                "shapely_geometry": []
            }
        },
        "obj_to_shp": {
            "name": "obj_to_shp",
            "location": 322,
            "return": [],
            "arguments": {
                "obj_file": [],
                "shp_file": []
            }
        }
    },
    "livestock-master/build/lib/livestock/hydrology.py": {
        "mesh_to_cells": {
            "name": "mesh_to_cells",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "cmf_project": [
                    "int",
                    "str"
                ],
                "mesh_paths": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "delete_after_load": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ]
            }
        },
        "set_vegetation_properties": {
            "name": "set_vegetation_properties",
            "location": 73,
            "return": [
                "int",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cell_": [
                    "numpy.ndarray",
                    "dict"
                ],
                "property_dict": [
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "add_tree_to_project": {
            "name": "add_tree_to_project",
            "location": 101,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "cmf_project": [
                    "int",
                    "List[List[int]]"
                ],
                "cell_index": [
                    "int",
                    "bool",
                    "Optional[Exception]"
                ],
                "property_dict": [
                    "dict",
                    "\"LineageBuilder\"",
                    "Callable[[Callable], Callable[..., Any]]",
                    "bool"
                ]
            }
        },
        "load_cmf_files": {
            "name": "load_cmf_files",
            "location": 130,
            "return": [
                "str",
                "Sequence[str]",
                "List[str]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "delete_after_load": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "load_input_data": {
            "name": "load_input_data",
            "location": 161,
            "return": [
                "str",
                "Optional['User']",
                "bool",
                "Tuple[List[Any], int]",
                "dict"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "delete": [
                    "int",
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "List[str]"
                ]
            }
        },
        "load_ground": {
            "name": "load_ground",
            "location": 180,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool",
                    "int"
                ],
                "delete": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "BinaryIO",
                    "str",
                    "int"
                ]
            }
        },
        "load_meshes": {
            "name": "load_meshes",
            "location": 201,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "int",
                    "os.DirEntry",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "create_retention_curve": {
            "name": "create_retention_curve",
            "location": 217,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "retention_curve": [
                    "bool",
                    "float"
                ]
            }
        },
        "install_cell_connections": {
            "name": "install_cell_connections",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cell": [
                    "int",
                    "str",
                    "Iterable[int]"
                ],
                "evapotranspiration_method": [
                    "str",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "install_flux_connections": {
            "name": "install_flux_connections",
            "location": 273,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "cmf_project": [
                    "str",
                    "int",
                    "Union[bytes, str]",
                    "bool"
                ],
                "cell_properties": [
                    "bool",
                    "Callable",
                    "str",
                    "IO"
                ]
            }
        },
        "build_cell": {
            "name": "build_cell",
            "location": 290,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cell_id": [
                    "str",
                    "List[Tuple[str, int]]",
                    "Dict[str, str]",
                    "Optional[dict]"
                ],
                "cmf_project": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ],
                "cell_properties": [
                    "List[int]",
                    "int",
                    "bool",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "Optional[Sequence[str]]",
                    "str"
                ],
                "r_curve": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "configure_cells": {
            "name": "configure_cells",
            "location": 332,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "cmf_project": [
                    "Optional[Dict]",
                    "bool",
                    "str",
                    "dict"
                ],
                "cell_properties_dict": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "mesh_info": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "config_outputs": {
            "name": "config_outputs",
            "location": 359,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "cmf_project": [
                    "list",
                    "int",
                    "bool",
                    "str",
                    "List[Optional[str]]"
                ],
                "output_configuration": [
                    "str",
                    "list",
                    "List[str]",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "gather_results": {
            "name": "gather_results",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_project": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "list",
                    "Sequence[int]"
                ],
                "results": [
                    "List[str]",
                    "Mapping",
                    "Callable",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "List['PydanticModelField']"
                ],
                "time": [
                    "int",
                    "bool",
                    "float",
                    "Optional[float]",
                    "Set[str]"
                ]
            }
        },
        "get_analysis_length": {
            "name": "get_analysis_length",
            "location": 483,
            "return": [
                "str",
                "datetime.date",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "analysis_length": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_time_step": {
            "name": "get_time_step",
            "location": 508,
            "return": [
                "int",
                "str",
                "datetime.datetime",
                "datetime.timedelta"
            ],
            "arguments": {
                "time_step": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Counter",
                    "Optional[int]"
                ]
            }
        },
        "solve_project": {
            "name": "solve_project",
            "location": 532,
            "return": [
                "list",
                "set",
                "List[object]",
                "str"
            ],
            "arguments": {
                "cmf_project": [
                    "int",
                    "Collection[str]",
                    "str",
                    "float"
                ],
                "solver_settings": [
                    "int",
                    "List[int]"
                ],
                "outputs": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "save_results": {
            "name": "save_results",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "results": [
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "str",
                    "Optional[Any]",
                    "bool",
                    "List[str]"
                ],
                "folder": [
                    "str",
                    "int"
                ]
            }
        },
        "create_weather": {
            "name": "create_weather",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_project": [
                    "Optional[\"Game\"]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "create_boundary_conditions": {
            "name": "create_boundary_conditions",
            "location": 588,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_project": [
                    "Optional[\"Game\"]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "run_model": {
            "name": "run_model",
            "location": 592,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "List[str]",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "cmf_results": {
            "name": "cmf_results",
            "location": 1484,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "cell_results": {
            "name": "cell_results",
            "location": 1518,
            "return": [
                "bool"
            ],
            "arguments": {
                "looking_for": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "result_file": [
                    "str"
                ],
                "folder": [
                    "str",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "layer_results": {
            "name": "layer_results",
            "location": 1567,
            "return": [
                "bool"
            ],
            "arguments": {
                "looking_for": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "result_file": [
                    "str"
                ],
                "folder": [
                    "str",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "convert_cmf_points": {
            "name": "convert_cmf_points",
            "location": 1614,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "points": [
                    "Optional[List[Dict]]",
                    "numpy.ndarray",
                    "Sequence[int]",
                    "Dict[int, int]",
                    "float"
                ]
            }
        },
        "surface_flux_results": {
            "name": "surface_flux_results",
            "location": 1638,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "CMFModel.__init__": {
            "name": "__init__",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CMFModel.load_cmf_files": {
            "name": "load_cmf_files",
            "location": 651,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "delete_after_load": [
                    "Dict[str, Any]",
                    "str",
                    "Union[int, float]",
                    "int"
                ]
            }
        },
        "CMFModel.mesh_to_cells": {
            "name": "mesh_to_cells",
            "location": 854,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "int",
                    "str",
                    "Union[str, int]"
                ],
                "mesh_path": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "delete_after_load": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ]
            }
        },
        "CMFModel.add_tree": {
            "name": "add_tree",
            "location": 886,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "int"
                ],
                "cell_index": [
                    "List[str]",
                    "Tuple[List[Any], List[Any]]",
                    "bool",
                    "int"
                ],
                "property_dict": [
                    "dict"
                ]
            }
        },
        "CMFModel.set_vegetation_properties": {
            "name": "set_vegetation_properties",
            "location": 912,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "cell_": [
                    "numpy.ndarray",
                    "dict"
                ],
                "property_dict": [
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "CMFModel.configure_cells": {
            "name": "configure_cells",
            "location": 937,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "bool",
                    "float",
                    "Optional[Dict]",
                    "str"
                ],
                "cell_properties_dict": [
                    "str",
                    "Optional[str]",
                    "Iterable[Tuple[str, dict]]",
                    "dict"
                ]
            }
        },
        "CMFModel.create_weather": {
            "name": "create_weather",
            "location": 1028,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "CMFModel.create_boundary_conditions": {
            "name": "create_boundary_conditions",
            "location": 1130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "int",
                    "Optional[str]",
                    "dict",
                    "Dict[Any, int]"
                ]
            }
        },
        "CMFModel.config_outputs": {
            "name": "config_outputs",
            "location": 1209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "list",
                    "int",
                    "List[Tuple[str, str]]",
                    "Union[int, str]",
                    "List[Optional[str]]",
                    "List[str]"
                ]
            }
        },
        "CMFModel.gather_results": {
            "name": "gather_results",
            "location": 1239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[str]",
                    "bytes"
                ],
                "time": [
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "CMFModel.print_solver_time": {
            "name": "print_solver_time",
            "location": 1340,
            "return": [
                "int",
                "float",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "self": [],
                "solver_time": [
                    "int",
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "float"
                ],
                "start_time": [
                    "bool",
                    "int",
                    "django.utils.timezone.datetime",
                    "Optional[int]",
                    "datetime.datetime"
                ],
                "last_time": [
                    "float",
                    "Iterable[int]",
                    "int",
                    "str",
                    "Optional[float]",
                    "bool",
                    "Optional[int]"
                ],
                "step": [
                    "datetime.date",
                    "List[int]",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "CMFModel.solve": {
            "name": "solve",
            "location": 1386,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmf_project": [
                    "List[deque]",
                    "Callable[[], None]"
                ],
                "tolerance": [
                    "str",
                    "float",
                    "Dict[str, int]",
                    "bool",
                    "int"
                ]
            }
        },
        "CMFModel.save_results": {
            "name": "save_results",
            "location": 1414,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[Dict[str, str]]",
                "List[str]",
                "Dict[str, Optional[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMFModel.run_model": {
            "name": "run_model",
            "location": 1444,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "surface_flux_results.read_files": {
            "name": "read_files",
            "location": 1649,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path_": [
                    "str"
                ]
            }
        },
        "surface_flux_results.get_flux_result": {
            "name": "get_flux_result",
            "location": 1686,
            "return": [
                "Dict[str, str]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "path_": [
                    "str"
                ]
            }
        },
        "surface_flux_results.process_flux": {
            "name": "process_flux",
            "location": 1735,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "flux_dict_": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "flux_config_": [
                    "str",
                    "List[Dict[str, Any]]",
                    "float"
                ],
                "center_points_": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_weather": {
            "name": "load_weather",
            "location": 661,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "delete": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "BinaryIO",
                    "str",
                    "int"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_tree": {
            "name": "load_tree",
            "location": 692,
            "return": [
                "int",
                "float",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Union[float, str]",
                    "bool",
                    "Optional[str]"
                ],
                "delete": [
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[Callable]",
                    "Optional[int]"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_ground": {
            "name": "load_ground",
            "location": 722,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "delete": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "BinaryIO",
                    "str",
                    "int"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_mesh": {
            "name": "load_mesh",
            "location": 751,
            "return": [
                "str"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_outputs": {
            "name": "load_outputs",
            "location": 761,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "folder": [
                    "str"
                ],
                "delete": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_solver_info": {
            "name": "load_solver_info",
            "location": 784,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "delete": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "BinaryIO"
                ]
            }
        },
        "CMFModel.load_cmf_files.load_boundary": {
            "name": "load_boundary",
            "location": 807,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Union[float, str]"
                ],
                "delete": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "BinaryIO",
                    "str",
                    "int"
                ]
            }
        },
        "CMFModel.configure_cells.install_connections": {
            "name": "install_connections",
            "location": 950,
            "return": [
                "bool"
            ],
            "arguments": {
                "cell_": [
                    "int",
                    "str",
                    "Iterable[int]"
                ],
                "evapotranspiration_method": [
                    "str",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "CMFModel.configure_cells.retention_curve": {
            "name": "retention_curve",
            "location": 972,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "r_curve_": [
                    "int",
                    "float",
                    "Sized",
                    "str"
                ]
            }
        },
        "CMFModel.configure_cells.build_cell": {
            "name": "build_cell",
            "location": 985,
            "return": [
                ""
            ],
            "arguments": {
                "cell_id": [
                    "str",
                    "int",
                    "Dict[int, str]"
                ],
                "cmf_project_": [
                    "str",
                    "int",
                    "Dict[int, str]"
                ],
                "cell_property_dict": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ],
                "r_curve_": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CMFModel.configure_cells.flux_connections": {
            "name": "flux_connections",
            "location": 1008,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_project_": [
                    "Container[T]",
                    "bool"
                ],
                "cell_property_dict": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CMFModel.create_weather.create_time_series": {
            "name": "create_time_series",
            "location": 1037,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "int",
                "dict"
            ],
            "arguments": {
                "analysis_length": [
                    "str",
                    "int",
                    "Sequence[util.datetime.range.DateTimeRange]",
                    "Optional[str]"
                ],
                "time_step": [
                    "str",
                    "datetime.datetime",
                    "float",
                    "int",
                    "datetime.date.time"
                ]
            }
        },
        "CMFModel.create_weather.weather_to_time_series": {
            "name": "weather_to_time_series",
            "location": 1046,
            "return": [
                "str"
            ],
            "arguments": {
                "weather": [
                    "str",
                    "List[str]",
                    "List[Dict]",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "CMFModel.create_weather.get_weather_for_cell": {
            "name": "get_weather_for_cell",
            "location": 1070,
            "return": [
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "cell_id": [
                    "int",
                    "bool",
                    "Union[int, str]",
                    "str"
                ],
                "project_weather_dict": [
                    "dict",
                    "Type[str]",
                    "Dict[str, str]",
                    "complex",
                    "str"
                ]
            }
        },
        "CMFModel.create_weather.create_weather_station": {
            "name": "create_weather_station",
            "location": 1094,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cmf_project_": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "cell_id": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "weather": [
                    "str",
                    "int"
                ],
                "location": [
                    "str"
                ]
            }
        },
        "CMFModel.create_weather.connect_weather_to_cells": {
            "name": "connect_weather_to_cells",
            "location": 1118,
            "return": [
                ""
            ],
            "arguments": {
                "cell_": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "rain_station": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "meteo_station": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "CMFModel.create_boundary_conditions.set_inlet": {
            "name": "set_inlet",
            "location": 1139,
            "return": [
                ""
            ],
            "arguments": {
                "boundary_condition_": [
                    "bool",
                    "str",
                    "float",
                    "int"
                ],
                "cmf_project_": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CMFModel.create_boundary_conditions.set_outlet": {
            "name": "set_outlet",
            "location": 1161,
            "return": [
                ""
            ],
            "arguments": {
                "boundary_condition_": [
                    "str",
                    "dict",
                    "Tuple[str, int]"
                ],
                "index_": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "cmf_project_": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "CMFModel.create_boundary_conditions.set_boundary_condition": {
            "name": "set_boundary_condition",
            "location": 1196,
            "return": [
                ""
            ],
            "arguments": {
                "boundary_condition_": [
                    "bool",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Iterable[str]",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "bc_index": [
                    "float",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "cmf_project_": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "surface_flux_results.get_flux_result.convert_to_list": {
            "name": "convert_to_list",
            "location": 1689,
            "return": [
                "str",
                "bool",
                "Optional[datetime.timedelta]",
                "float",
                "int",
                "List[float]",
                "List[Tuple[Any, str, int]]"
            ],
            "arguments": {
                "string_": [
                    "str"
                ]
            }
        },
        "surface_flux_results.process_flux.get_wanted_fluxes": {
            "name": "get_wanted_fluxes",
            "location": 1738,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "flux_tuple": [
                    "str",
                    "float"
                ],
                "center_points__": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "livestock-master/build/lib/livestock/log.py": {
        "log_path": {
            "name": "log_path",
            "location": 18,
            "return": [
                "Dict[str, str]",
                "dict",
                "str",
                "bool",
                "MutableMapping[str, Any]"
            ],
            "arguments": {}
        },
        "livestock_logger": {
            "name": "livestock_logger",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "livestock-master/build/lib/livestock/misc.py": {
        "run_cfd": {
            "name": "run_cfd",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "files_path": [
                    "str"
                ]
            }
        }
    },
    "livestock-master/build/lib/livestock/ssh.py": {
        "check_for_remote_folder": {
            "name": "check_for_remote_folder",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "sftp_connect": [
                    "str",
                    "Exception",
                    "Optional[List[str]]"
                ],
                "folder_to_check": [
                    "str",
                    "Exception",
                    "Optional[List[str]]"
                ],
                "check_for": [
                    "str",
                    "Exception",
                    "Optional[List[str]]"
                ]
            }
        },
        "ssh_connection": {
            "name": "ssh_connection",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/build/lib/livestock/__init__.py": {},
    "livestock-master/build/lib/livestock/test/helper_functions.py": {
        "unpack": {
            "name": "unpack",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "livestock-master/build/lib/livestock/test/__init__.py": {},
    "livestock-master/build/lib/livestock/test/test/test_air.py": {},
    "livestock-master/build/lib/livestock/test/test/test_air_2.py": {},
    "livestock-master/build/lib/livestock/test/test/test_boundary_conditions.py": {
        "unpack": {
            "name": "unpack",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "load_results": {
            "name": "load_results",
            "location": 15,
            "return": [
                "str",
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool"
                ]
            }
        },
        "plot_inlet": {
            "name": "plot_inlet",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "bool",
                    "List['cirq.Qid']",
                    "Callable",
                    "numpy.ndarray"
                ]
            }
        },
        "test_inlet": {
            "name": "test_inlet",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/build/lib/livestock/test/test/test_inlet.py": {
        "load_results": {
            "name": "load_results",
            "location": 11,
            "return": [
                "str",
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool"
                ]
            }
        },
        "plot_inlet": {
            "name": "plot_inlet",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "bool",
                    "List['cirq.Qid']",
                    "Callable",
                    "numpy.ndarray"
                ]
            }
        },
        "test_inlet": {
            "name": "test_inlet",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/build/lib/livestock/test/test/test_model_slope.py": {},
    "livestock-master/build/lib/livestock/test/test/test_outlet.py": {
        "load_results": {
            "name": "load_results",
            "location": 11,
            "return": [
                "str",
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool"
                ]
            }
        },
        "plot_outlet": {
            "name": "plot_outlet",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "bool",
                    "List['cirq.Qid']",
                    "Callable",
                    "numpy.ndarray"
                ]
            }
        },
        "test_inlet": {
            "name": "test_inlet",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/build/lib/livestock/test/test/test_weather.py": {
        "unpack": {
            "name": "unpack",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_ylabel": {
            "name": "get_ylabel",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "weather_type": [
                    "str",
                    "type"
                ]
            }
        },
        "plot_weather": {
            "name": "plot_weather",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "weather": [
                    "List[int]",
                    "list",
                    "List[str]",
                    "List[List[int]]",
                    "Union[List[float], List[int]]"
                ],
                "weather_type": [
                    "str",
                    "bool"
                ],
                "test_type": [
                    "str",
                    "bool",
                    "Type",
                    "Optional[List[str]]"
                ]
            }
        },
        "plot_weather_double": {
            "name": "plot_weather_double",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "weather_double": [
                    "List[int]",
                    "Sequence[int]",
                    "List[str]",
                    "Sequence[Sequence[float]]"
                ],
                "weather_type": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "test_type": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Type"
                ]
            }
        },
        "test_constant": {
            "name": "test_constant",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sinus": {
            "name": "test_sinus",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_double": {
            "name": "test_double",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/build/lib/livestock/test/test/__init__.py": {},
    "livestock-master/config_livestock/release_alpha.py": {
        "edit_version": {
            "name": "edit_version",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "make_wheel": {
            "name": "make_wheel",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/config_livestock/upload_to_pypi.py": {
        "delete_old_files": {
            "name": "delete_old_files",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "edit_version": {
            "name": "edit_version",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "call_upload": {
            "name": "call_upload",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/livestock/air.py": {
        "new_temperature_and_relative_humidity": {
            "name": "new_temperature_and_relative_humidity",
            "location": 19,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "max_possible_vapour_flux": {
            "name": "max_possible_vapour_flux",
            "location": 104,
            "return": [],
            "arguments": {
                "vapour_mass_flux": [],
                "volume": [],
                "temperature_in_kelvin": [],
                "vapour_pressure": []
            }
        },
        "compute_temperature_relative_humidity": {
            "name": "compute_temperature_relative_humidity",
            "location": 133,
            "return": [],
            "arguments": {
                "temperature_in_k": [],
                "relative_humidity": [],
                "vapour_mass_flux": [],
                "volume": []
            }
        },
        "run_row": {
            "name": "run_row",
            "location": 196,
            "return": [],
            "arguments": {
                "input_package": []
            }
        },
        "latent_heat_flux": {
            "name": "latent_heat_flux",
            "location": 243,
            "return": [],
            "arguments": {
                "vapour_mass_flux": []
            }
        },
        "convert_vapour_flux_to_kgh": {
            "name": "convert_vapour_flux_to_kgh",
            "location": 263,
            "return": [],
            "arguments": {
                "vapour_flux": []
            }
        },
        "convert_relative_humidity_to_unitless": {
            "name": "convert_relative_humidity_to_unitless",
            "location": 279,
            "return": [],
            "arguments": {
                "rh": []
            }
        },
        "convert_relative_humidity_to_percentage": {
            "name": "convert_relative_humidity_to_percentage",
            "location": 292,
            "return": [],
            "arguments": {
                "rh": []
            }
        },
        "new_mean_relative_humidity": {
            "name": "new_mean_relative_humidity",
            "location": 305,
            "return": [],
            "arguments": {
                "volume": [],
                "temperature_internal": [],
                "vapour_pressure_external": [],
                "vapour_production": []
            }
        },
        "new_mean_vapour_pressure": {
            "name": "new_mean_vapour_pressure",
            "location": 331,
            "return": [],
            "arguments": {
                "volume": [],
                "temperature": [],
                "vapour_pressure_external": [],
                "vapour_production": []
            }
        },
        "new_mean_temperature": {
            "name": "new_mean_temperature",
            "location": 360,
            "return": [],
            "arguments": {
                "volume": [],
                "temperature": [],
                "heat": []
            }
        },
        "celsius_to_kelvin": {
            "name": "celsius_to_kelvin",
            "location": 387,
            "return": [],
            "arguments": {
                "celsius": []
            }
        },
        "kelvin_to_celsius": {
            "name": "kelvin_to_celsius",
            "location": 404,
            "return": [],
            "arguments": {
                "kelvin": []
            }
        },
        "vapour_pressure_to_relative_humidity": {
            "name": "vapour_pressure_to_relative_humidity",
            "location": 420,
            "return": [],
            "arguments": {
                "vapour_pressure": [],
                "temperature": []
            }
        },
        "relative_humidity_to_vapour_pressure": {
            "name": "relative_humidity_to_vapour_pressure",
            "location": 438,
            "return": [],
            "arguments": {
                "relative_humidity": [],
                "temperature": []
            }
        },
        "stratification": {
            "name": "stratification",
            "location": 456,
            "return": [],
            "arguments": {
                "height": [],
                "value_mean": [],
                "height_top": [],
                "value_top": []
            }
        },
        "saturated_vapour_pressure": {
            "name": "saturated_vapour_pressure",
            "location": 475,
            "return": [],
            "arguments": {
                "temperature": []
            }
        },
        "wind_speed_to_hour_flux": {
            "name": "wind_speed_to_hour_flux",
            "location": 493,
            "return": [],
            "arguments": {
                "wind_speed": []
            }
        },
        "diameter_from_area": {
            "name": "diameter_from_area",
            "location": 509,
            "return": [],
            "arguments": {
                "area": []
            }
        },
        "wind_speed_to_flux": {
            "name": "wind_speed_to_flux",
            "location": 524,
            "return": [],
            "arguments": {
                "wind_speed": [],
                "height": [],
                "cross_section": []
            }
        },
        "new_temperature_and_relative_humidity.get_files": {
            "name": "get_files",
            "location": 30,
            "return": [],
            "arguments": {
                "folder_": []
            }
        },
        "new_temperature_and_relative_humidity.reconstruct_results": {
            "name": "reconstruct_results",
            "location": 49,
            "return": [],
            "arguments": {
                "folder_": [],
                "processed_rows_": []
            }
        }
    },
    "livestock-master/livestock/blender.py": {
        "clean": {
            "name": "clean",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/livestock/flow.py": {
        "get_curve_points": {
            "name": "get_curve_points",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "start_point": [
                    "int",
                    "float"
                ],
                "start_index": [
                    "int",
                    "float"
                ],
                "point_list": [
                    "int",
                    "list",
                    "List[str]",
                    "bytes",
                    "float"
                ]
            }
        },
        "flow_from_centers": {
            "name": "flow_from_centers",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "livestock-master/livestock/geometry.py": {
        "ray_triangle_intersection": {
            "name": "ray_triangle_intersection",
            "location": 23,
            "return": [],
            "arguments": {
                "ray_near": [],
                "ray_dir": [],
                "V": []
            }
        },
        "lowest_face_vertex": {
            "name": "lowest_face_vertex",
            "location": 57,
            "return": [],
            "arguments": {
                "v0": [],
                "v1": [],
                "v2": []
            }
        },
        "angle_between_vectors": {
            "name": "angle_between_vectors",
            "location": 96,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": [],
                "force_angle": []
            }
        },
        "line_intersection": {
            "name": "line_intersection",
            "location": 144,
            "return": [],
            "arguments": {
                "p1": [],
                "p2": [],
                "p3": [],
                "p4": []
            }
        },
        "obj_to_lists": {
            "name": "obj_to_lists",
            "location": 166,
            "return": [],
            "arguments": {
                "obj_file": []
            }
        },
        "centroid_z": {
            "name": "centroid_z",
            "location": 217,
            "return": [],
            "arguments": {
                "polygon": []
            }
        },
        "obj_to_polygons": {
            "name": "obj_to_polygons",
            "location": 236,
            "return": [],
            "arguments": {
                "obj_file": []
            }
        },
        "shapely_to_pyshp": {
            "name": "shapely_to_pyshp",
            "location": 260,
            "return": [],
            "arguments": {
                "shapely_geometry": []
            }
        },
        "obj_to_shp": {
            "name": "obj_to_shp",
            "location": 322,
            "return": [],
            "arguments": {
                "obj_file": [],
                "shp_file": []
            }
        }
    },
    "livestock-master/livestock/hydrology.py": {
        "mesh_to_cells": {
            "name": "mesh_to_cells",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "cmf_project": [
                    "int",
                    "str"
                ],
                "mesh_paths": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "delete_after_load": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ]
            }
        },
        "set_vegetation_properties": {
            "name": "set_vegetation_properties",
            "location": 74,
            "return": [
                "int",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cell_": [
                    "numpy.ndarray",
                    "dict"
                ],
                "property_dict": [
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "add_tree_to_project": {
            "name": "add_tree_to_project",
            "location": 102,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "cmf_project": [
                    "int",
                    "List[List[int]]"
                ],
                "cell_index": [
                    "int",
                    "bool",
                    "Optional[Exception]"
                ],
                "property_dict": [
                    "dict",
                    "\"LineageBuilder\"",
                    "Callable[[Callable], Callable[..., Any]]",
                    "bool"
                ]
            }
        },
        "load_cmf_files": {
            "name": "load_cmf_files",
            "location": 131,
            "return": [
                "str",
                "Sequence[str]",
                "List[str]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ],
                "delete_after_load": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "load_input_data": {
            "name": "load_input_data",
            "location": 162,
            "return": [
                "str",
                "Optional['User']",
                "bool",
                "Tuple[List[Any], int]",
                "dict"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "delete": [
                    "int",
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "List[str]"
                ]
            }
        },
        "load_ground": {
            "name": "load_ground",
            "location": 180,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool",
                    "int"
                ],
                "delete": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "BinaryIO",
                    "str",
                    "int"
                ]
            }
        },
        "load_meshes": {
            "name": "load_meshes",
            "location": 200,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "int",
                    "os.DirEntry",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "create_retention_curve": {
            "name": "create_retention_curve",
            "location": 215,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "retention_curve": [
                    "bool",
                    "float"
                ]
            }
        },
        "install_cell_connections": {
            "name": "install_cell_connections",
            "location": 236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cell": [
                    "int",
                    "str",
                    "Iterable[int]"
                ],
                "evapotranspiration_method": [
                    "str",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "install_flux_connections": {
            "name": "install_flux_connections",
            "location": 270,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "cmf_project": [
                    "str",
                    "int",
                    "Union[bytes, str]",
                    "bool"
                ],
                "cell_properties": [
                    "bool",
                    "Callable",
                    "str",
                    "IO"
                ]
            }
        },
        "build_cell": {
            "name": "build_cell",
            "location": 286,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cell_id": [
                    "str",
                    "List[Tuple[str, int]]",
                    "Dict[str, str]",
                    "Optional[dict]"
                ],
                "cmf_project": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ],
                "cell_properties": [
                    "List[int]",
                    "int",
                    "bool",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "Optional[Sequence[str]]",
                    "str"
                ],
                "r_curve": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "configure_cells": {
            "name": "configure_cells",
            "location": 318,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "cmf_project": [
                    "Optional[Dict]",
                    "bool",
                    "str",
                    "dict"
                ],
                "cell_properties_dict": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "mesh_info": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "config_outputs": {
            "name": "config_outputs",
            "location": 344,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "cmf_project": [
                    "list",
                    "int",
                    "bool",
                    "str",
                    "List[Optional[str]]"
                ],
                "output_configuration": [
                    "str",
                    "list",
                    "List[str]",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "gather_results": {
            "name": "gather_results",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_project": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "list",
                    "Sequence[int]"
                ],
                "results": [
                    "List[str]",
                    "Mapping",
                    "Callable",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "List['PydanticModelField']"
                ],
                "time": [
                    "int",
                    "bool",
                    "float",
                    "Optional[float]",
                    "Set[str]"
                ]
            }
        },
        "get_analysis_length": {
            "name": "get_analysis_length",
            "location": 468,
            "return": [
                "str",
                "datetime.date",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "analysis_length": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_time_step": {
            "name": "get_time_step",
            "location": 492,
            "return": [
                "int",
                "str",
                "datetime.datetime",
                "datetime.timedelta"
            ],
            "arguments": {
                "time_step": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Counter",
                    "Optional[int]"
                ]
            }
        },
        "solve_project": {
            "name": "solve_project",
            "location": 516,
            "return": [
                "list",
                "set",
                "List[object]",
                "str"
            ],
            "arguments": {
                "cmf_project": [
                    "int",
                    "Collection[str]",
                    "str",
                    "float"
                ],
                "solver_settings": [
                    "int",
                    "List[int]"
                ],
                "outputs": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "save_results": {
            "name": "save_results",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "results": [
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "str",
                    "Optional[Any]",
                    "bool",
                    "List[str]"
                ],
                "folder": [
                    "str",
                    "int"
                ]
            }
        },
        "create_weather": {
            "name": "create_weather",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_project": [
                    "Optional[\"Game\"]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "create_boundary_conditions": {
            "name": "create_boundary_conditions",
            "location": 571,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_project": [
                    "Optional[\"Game\"]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "run_model": {
            "name": "run_model",
            "location": 575,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "List[str]",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "cmf_results": {
            "name": "cmf_results",
            "location": 617,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "cell_results": {
            "name": "cell_results",
            "location": 651,
            "return": [
                "bool"
            ],
            "arguments": {
                "looking_for": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "result_file": [
                    "str"
                ],
                "folder": [
                    "str",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "layer_results": {
            "name": "layer_results",
            "location": 700,
            "return": [
                "bool"
            ],
            "arguments": {
                "looking_for": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "result_file": [
                    "str"
                ],
                "folder": [
                    "str",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "convert_cmf_points": {
            "name": "convert_cmf_points",
            "location": 747,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "points": [
                    "Optional[List[Dict]]",
                    "numpy.ndarray",
                    "Sequence[int]",
                    "Dict[int, int]",
                    "float"
                ]
            }
        },
        "surface_flux_results": {
            "name": "surface_flux_results",
            "location": 771,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "surface_flux_results.read_files": {
            "name": "read_files",
            "location": 782,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path_": [
                    "str"
                ]
            }
        },
        "surface_flux_results.get_flux_result": {
            "name": "get_flux_result",
            "location": 819,
            "return": [
                "Dict[str, str]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "path_": [
                    "str"
                ]
            }
        },
        "surface_flux_results.process_flux": {
            "name": "process_flux",
            "location": 868,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "flux_dict_": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "flux_config_": [
                    "str",
                    "List[Dict[str, Any]]",
                    "float"
                ],
                "center_points_": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "surface_flux_results.get_flux_result.convert_to_list": {
            "name": "convert_to_list",
            "location": 822,
            "return": [
                "str",
                "bool",
                "Optional[datetime.timedelta]",
                "float",
                "int",
                "List[float]",
                "List[Tuple[Any, str, int]]"
            ],
            "arguments": {
                "string_": [
                    "str"
                ]
            }
        },
        "surface_flux_results.process_flux.get_wanted_fluxes": {
            "name": "get_wanted_fluxes",
            "location": 871,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "flux_tuple": [
                    "str",
                    "float"
                ],
                "center_points__": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "livestock-master/livestock/log.py": {
        "log_path": {
            "name": "log_path",
            "location": 19,
            "return": [
                "Dict[str, str]",
                "dict",
                "str",
                "bool",
                "MutableMapping[str, Any]"
            ],
            "arguments": {}
        },
        "livestock_logger": {
            "name": "livestock_logger",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "livestock-master/livestock/misc.py": {
        "run_cfd": {
            "name": "run_cfd",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "files_path": [
                    "str"
                ]
            }
        }
    },
    "livestock-master/livestock/ssh.py": {
        "check_for_remote_folder": {
            "name": "check_for_remote_folder",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "sftp_connect": [
                    "str",
                    "Exception",
                    "Optional[List[str]]"
                ],
                "folder_to_check": [
                    "str",
                    "Exception",
                    "Optional[List[str]]"
                ],
                "check_for": [
                    "str",
                    "Exception",
                    "Optional[List[str]]"
                ]
            }
        },
        "ssh_connection": {
            "name": "ssh_connection",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/livestock/__init__.py": {},
    "livestock-master/sphinx/conf.py": {},
    "livestock-master/tests/conftest.py": {
        "data_folder": {
            "name": "data_folder",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "obj_file_paths": {
            "name": "obj_file_paths",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "data_folder": [
                    "str"
                ],
                "request": [
                    "str"
                ]
            }
        },
        "shapely_polygons": {
            "name": "shapely_polygons",
            "location": 36,
            "return": [
                "IO",
                "str",
                "bytes",
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {
                "obj_file_paths": [
                    "str"
                ]
            }
        },
        "input_files": {
            "name": "input_files",
            "location": 41,
            "return": [
                "str",
                "List[str]",
                "set",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "MutableMapping[str, str]",
                    "Optional[List[str]]"
                ],
                "data_folder": [
                    "str",
                    "Optional[str]"
                ],
                "request": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "cmf_data": {
            "name": "cmf_data",
            "location": 54,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "input_files": [
                    "str",
                    "Union[slice, List[slice], List[int]]",
                    "List[str]"
                ]
            }
        },
        "project_with_cells": {
            "name": "project_with_cells",
            "location": 59,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "cmf_data": [
                    "bool",
                    "list",
                    "dict",
                    "Dict[str, str]",
                    "List[dict]"
                ]
            }
        },
        "retention_curve": {
            "name": "retention_curve",
            "location": 69,
            "return": [
                "float",
                "Tuple[float, float]"
            ],
            "arguments": {
                "cmf_data": [
                    "list",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "solve_ready_project": {
            "name": "solve_ready_project",
            "location": 78,
            "return": [
                "str",
                "bool",
                "BinaryIO"
            ],
            "arguments": {
                "cmf_data": [
                    "list",
                    "dict",
                    "List[dict]",
                    "Dict[str, str]"
                ]
            }
        },
        "drain_mesh": {
            "name": "drain_mesh",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "data_folder": [
                    "str",
                    "bytes"
                ]
            }
        },
        "mock_solver": {
            "name": "mock_solver",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "int"
                ]
            }
        },
        "mock_gather_results": {
            "name": "mock_gather_results",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Mapping[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "disable_logger": {
            "name": "disable_logger",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "Union[str, List[str]]"
                ]
            }
        },
        "mock_gather_results.mock_return": {
            "name": "mock_return",
            "location": 134,
            "return": [],
            "arguments": {
                "cmf_project": [],
                "results": [],
                "time": []
            }
        },
        "disable_logger.mock_return": {
            "name": "mock_return",
            "location": 143,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "mock_solver.MockClass.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project": [
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "tolerance": [
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "mock_solver.MockClass.run": {
            "name": "run",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_time": [
                    "float",
                    "int"
                ],
                "end_time": [
                    "int",
                    "float"
                ],
                "time_step": [
                    "int",
                    "float"
                ]
            }
        },
        "disable_logger.mock_return.MockLog.debug": {
            "name": "debug",
            "location": 147,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "disable_logger.mock_return.MockLog.info": {
            "name": "info",
            "location": 150,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "disable_logger.mock_return.MockLog.warning": {
            "name": "warning",
            "location": 153,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "disable_logger.mock_return.MockLog.error": {
            "name": "error",
            "location": 156,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[object]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "livestock-master/tests/test_flow.py": {
        "test_flow_from_centers": {
            "name": "test_flow_from_centers",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "drain_mesh": [
                    "str"
                ]
            }
        }
    },
    "livestock-master/tests/test_geometry.py": {
        "test_shapely_to_pyshp": {
            "name": "test_shapely_to_pyshp",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "shapely_polygons": []
            }
        },
        "test_obj_to_polygons": {
            "name": "test_obj_to_polygons",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "obj_file_paths": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "test_centroid_z": {
            "name": "test_centroid_z",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "shapely_polygons": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_obj_to_shp": {
            "name": "test_obj_to_shp",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "obj_file_paths": [
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "livestock-master/tests/test_hydrology.py": {
        "test_load_cmf_files": {
            "name": "test_load_cmf_files",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "input_files": [
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_mesh_to_cells": {
            "name": "test_mesh_to_cells",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "obj_file_paths": [
                    "str",
                    "int"
                ]
            }
        },
        "test_create_retention_curve": {
            "name": "test_create_retention_curve",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_data": [
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "test_install_cell_connections": {
            "name": "test_install_cell_connections",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_data": [
                    "Callable"
                ],
                "project_with_cells": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_build_cell": {
            "name": "test_build_cell",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_data": [
                    "Callable",
                    "list",
                    "str"
                ],
                "project_with_cells": [
                    "Dict[str, str]",
                    "str",
                    "TextIO"
                ],
                "retention_curve": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_install_flux_connections": {
            "name": "test_install_flux_connections",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_data": [
                    "Callable"
                ],
                "project_with_cells": []
            }
        },
        "test_configure_cells": {
            "name": "test_configure_cells",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "cmf_data": [
                    "Callable"
                ],
                "project_with_cells": []
            }
        },
        "test_add_tree_to_project": {
            "name": "test_add_tree_to_project",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_weather": {
            "name": "test_create_weather",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_boundary_conditions": {
            "name": "test_create_boundary_conditions",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_config_outputs": {
            "name": "test_config_outputs",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gather_results": {
            "name": "test_gather_results",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_analysis_length": {
            "name": "test_get_analysis_length",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_time_step": {
            "name": "test_get_time_step",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_solve_project": {
            "name": "test_solve_project",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "solve_ready_project": [
                    "Callable",
                    "Iterable[Tuple[int, int]]"
                ],
                "mock_solver": [
                    "bool"
                ],
                "mock_gather_results": [
                    "bool"
                ]
            }
        },
        "test_save_project": {
            "name": "test_save_project",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_run_off": {
            "name": "test_run_off",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "data_folder": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "bytes"
                ]
            }
        }
    },
    "livestock-master/tests/__init__.py": {},
    "livestock-master/tests/archive/helper_functions.py": {
        "unpack": {
            "name": "unpack",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "livestock-master/tests/archive/__init__.py": {},
    "livestock-master/tests/archive/local_test/blender_drainge_mesh.py": {
        "clean": {
            "name": "clean",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_curve_points": {
            "name": "get_curve_points",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "start_index": [
                    "int",
                    "Sequence[int]"
                ],
                "point_list": [
                    "int",
                    "list",
                    "Sequence[Sequence[float]]",
                    "float"
                ]
            }
        }
    },
    "livestock-master/tests/archive/local_test/decorator.py": {
        "file_as_input": {
            "name": "file_as_input",
            "location": 6,
            "return": [
                "str",
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "function_": [
                    "Callable",
                    "bool",
                    "float",
                    "Callable[..., T]"
                ]
            }
        },
        "poly_list": {
            "name": "poly_list",
            "location": 23,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "List[str]",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "poly_file": {
            "name": "poly_file",
            "location": 28,
            "return": [
                "str",
                "bool",
                "int",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "file_as_input.wrapper": {
            "name": "wrapper",
            "location": 9,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "livestock-master/tests/archive/local_test/shape_to_numpy.py": {
        "centroid_z": {
            "name": "centroid_z",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "polygon": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "livestock-master/tests/archive/local_test/test_shapefiles.py": {},
    "livestock-master/tests/archive/local_test/__init__.py": {},
    "livestock-master/tests/archive/local_test/archive/test_cell_results.py": {},
    "livestock-master/tests/archive/local_test/archive/test_cmf_model.py": {
        "unpack": {
            "name": "unpack",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "livestock-master/tests/archive/local_test/archive/test_cmf_read_shapefile.py": {},
    "livestock-master/tests/archive/local_test/archive/test_layer_results.py": {},
    "livestock-master/tests/archive/local_test/archive/test_multiproc.py": {
        "doubler": {
            "name": "doubler",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "livestock-master/tests/archive/local_test/archive/test_read_shp.py": {},
    "livestock-master/tests/archive/local_test/archive/test_surface_flux.py": {},
    "livestock-master/tests/archive/local_test/archive/__init__.py": {},
    "livestock-master/tests/archive/local_test/cmf_tutorials/test_hill_slope.py": {
        "z": {
            "name": "z",
            "location": 11,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "frame": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "livestock-master/tests/archive/local_test/cmf_tutorials/test_inlet.py": {},
    "livestock-master/tests/archive/local_test/cmf_tutorials/test_outlet.py": {},
    "livestock-master/tests/archive/local_test/cmf_tutorials/__init__.py": {},
    "livestock-master/tests/archive/pytest/test_geometry.py": {
        "test_obj_to_shapefile": {
            "name": "test_obj_to_shapefile",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "livestock-master/tests/archive/pytest/test_weather.py": {
        "unpack": {
            "name": "unpack",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "finished_project": {
            "name": "finished_project",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "folder": [
                    "int"
                ]
            }
        },
        "test_constant": {
            "name": "test_constant",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/tests/archive/pytest/__init__.py": {},
    "livestock-master/tests/archive/test/test_air.py": {},
    "livestock-master/tests/archive/test/test_air_2.py": {},
    "livestock-master/tests/archive/test/test_inlet.py": {
        "load_results": {
            "name": "load_results",
            "location": 11,
            "return": [
                "str",
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool"
                ]
            }
        },
        "plot_inlet": {
            "name": "plot_inlet",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "bool",
                    "List['cirq.Qid']",
                    "Callable",
                    "numpy.ndarray"
                ]
            }
        },
        "test_inlet": {
            "name": "test_inlet",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/tests/archive/test/test_model_slope.py": {},
    "livestock-master/tests/archive/test/test_outlet.py": {
        "load_results": {
            "name": "load_results",
            "location": 11,
            "return": [
                "str",
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "bool"
                ]
            }
        },
        "plot_outlet": {
            "name": "plot_outlet",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "bool",
                    "List['cirq.Qid']",
                    "Callable",
                    "numpy.ndarray"
                ]
            }
        },
        "test_inlet": {
            "name": "test_inlet",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/tests/archive/test/test_progressbar.py": {
        "format_custom_text": {
            "name": "format_custom_text",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "format_label": {
            "name": "format_label",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "print_output": {
            "name": "print_output",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "cmf_bar": {
            "name": "cmf_bar",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/tests/archive/test/test_weather.py": {
        "unpack": {
            "name": "unpack",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_ylabel": {
            "name": "get_ylabel",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "weather_type": [
                    "str",
                    "type"
                ]
            }
        },
        "plot_weather": {
            "name": "plot_weather",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "weather": [
                    "List[int]",
                    "list",
                    "List[str]",
                    "List[List[int]]",
                    "Union[List[float], List[int]]"
                ],
                "weather_type": [
                    "str",
                    "bool"
                ],
                "test_type": [
                    "str",
                    "bool",
                    "Type",
                    "Optional[List[str]]"
                ]
            }
        },
        "plot_weather_double": {
            "name": "plot_weather_double",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "weather_double": [
                    "List[int]",
                    "Sequence[int]",
                    "List[str]",
                    "Sequence[Sequence[float]]"
                ],
                "weather_type": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "test_type": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Type"
                ]
            }
        },
        "test_constant": {
            "name": "test_constant",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sinus": {
            "name": "test_sinus",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_double": {
            "name": "test_double",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "livestock-master/tests/archive/test/__init__.py": {},
    "livestock-master/tests/test_data/__init__.py": {},
    "livestock-master/tests/test_data/cmf_boundary_conditions/__init__.py": {},
    "livestock-master/tests/test_data/cmf_boundary_conditions/inlet/cmf_template.py": {},
    "livestock-master/tests/test_data/cmf_boundary_conditions/inlet/__init__.py": {},
    "livestock-master/tests/test_data/cmf_boundary_conditions/outlet/cmf_template.py": {},
    "livestock-master/tests/test_data/cmf_boundary_conditions/outlet/__init__.py": {},
    "livestock-master/tests/test_data/new_air_conditions/new_air_conditions_template.py": {},
    "livestock-master/tests/test_data/new_air_conditions/__init__.py": {},
    "livestock-master/tests/test_data/run_off_0/cmf_template.py": {},
    "livestock-master/tests/test_data/run_off_1/cmf_template.py": {}
}
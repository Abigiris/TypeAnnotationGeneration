{
    "lkml-master/setup.py": {},
    "lkml-master/docs/source/conf.py": {},
    "lkml-master/lkml/keys.py": {
        "pluralize": {
            "name": "pluralize",
            "location": 135,
            "return": [
                "str",
                "Dict[str, str]",
                "Mapping",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "singularize": {
            "name": "singularize",
            "location": 145,
            "return": [
                "str",
                "int",
                "Mapping"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Iterable[Hashable]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "lkml-master/lkml/lexer.py": {
        "Lexer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "Mapping[str, List[str]]"
                ]
            }
        },
        "Lexer.peek": {
            "name": "peek",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.peek_multiple": {
            "name": "peek_multiple",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "list",
                    "List[float]"
                ]
            }
        },
        "Lexer.advance": {
            "name": "advance",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Lexer.consume": {
            "name": "consume",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.scan": {
            "name": "scan",
            "location": 59,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.check_for_expression_block": {
            "name": "check_for_expression_block",
            "location": 101,
            "return": [
                "Match",
                "Callable",
                "int",
                "Set[str]",
                "bytes",
                "Tuple[Union[int, str]]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Type[T]",
                    "Optional[str]"
                ]
            }
        },
        "Lexer.scan_whitespace": {
            "name": "scan_whitespace",
            "location": 105,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.scan_comment": {
            "name": "scan_comment",
            "location": 121,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.scan_expression_block": {
            "name": "scan_expression_block",
            "location": 141,
            "return": [
                "Dict[str, Any]",
                "Type",
                "int",
                "Tuple[Type[Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.scan_literal": {
            "name": "scan_literal",
            "location": 160,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.scan_quoted_literal": {
            "name": "scan_quoted_literal",
            "location": 174,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lkml-master/lkml/parser.py": {
        "backtrack_if_none": {
            "name": "backtrack_if_none",
            "location": 19,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "backtrack_if_none.wrapper": {
            "name": "wrapper",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommaSeparatedValues.append": {
            "name": "append",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CommaSeparatedValues.values": {
            "name": "values",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "Parser.jump_to_index": {
            "name": "jump_to_index",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Parser.peek": {
            "name": "peek",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.advance": {
            "name": "advance",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Parser.consume": {
            "name": "consume",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.consume_token_value": {
            "name": "consume_token_value",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.consume_trivia": {
            "name": "consume_trivia",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.check": {
            "name": "check",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_container": {
            "name": "parse_container",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_block": {
            "name": "parse_block",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_pair": {
            "name": "parse_pair",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_key": {
            "name": "parse_key",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_value": {
            "name": "parse_value",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "parse_prefix": [],
                "parse_suffix": []
            }
        },
        "Parser.parse_list": {
            "name": "parse_list",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_csv": {
            "name": "parse_csv",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_comma": {
            "name": "parse_comma",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lkml-master/lkml/simple.py": {
        "flatten": {
            "name": "flatten",
            "location": 41,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DictVisitor.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DictVisitor.update_tree": {
            "name": "update_tree",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ],
                "update": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "Dict[str, bool]"
                ]
            }
        },
        "DictVisitor.visit": {
            "name": "visit",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "document": [
                    "dict"
                ]
            }
        },
        "DictVisitor.visit_container": {
            "name": "visit_container",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "DictVisitor.visit_block": {
            "name": "visit_block",
            "location": 126,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DictVisitor.visit_list": {
            "name": "visit_list",
            "location": 133,
            "return": [
                "bool",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DictVisitor.visit_pair": {
            "name": "visit_pair",
            "location": 137,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DictVisitor.visit_token": {
            "name": "visit_token",
            "location": 141,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Optional[str]",
                    "Tuple[object]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "DictParser.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DictParser.increase_level": {
            "name": "increase_level",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictParser.decrease_level": {
            "name": "decrease_level",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictParser.indent": {
            "name": "indent",
            "location": 181,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictParser.newline_indent": {
            "name": "newline_indent",
            "location": 189,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictParser.prefix": {
            "name": "prefix",
            "location": 194,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictParser.is_plural_key": {
            "name": "is_plural_key",
            "location": 205,
            "return": [
                "bool",
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable]"
                ]
            }
        },
        "DictParser.resolve_filters": {
            "name": "resolve_filters",
            "location": 231,
            "return": [
                "Optional[Dict[str, str]]",
                "bool",
                "List[str]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "Union[str, bytes]",
                    "Optional[bool]",
                    "Union[int, float]"
                ]
            }
        },
        "DictParser.parse": {
            "name": "parse",
            "location": 263,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DictParser.expand_list": {
            "name": "expand_list",
            "location": 269,
            "return": [
                "int",
                "tuple",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "bytes",
                    "Optional[Callable]"
                ],
                "values": [
                    "str",
                    "dict",
                    "list"
                ]
            }
        },
        "DictParser.parse_any": {
            "name": "parse_any",
            "location": 291,
            "return": [
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Union[tuple, list]"
                ]
            }
        },
        "DictParser.parse_block": {
            "name": "parse_block",
            "location": 325,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "dict",
                    "Iterable",
                    "str"
                ],
                "items": [
                    "str",
                    "dict"
                ],
                "name": [
                    "str",
                    "Sequence[str]",
                    "Sequence[List[Any]]"
                ]
            }
        },
        "DictParser.parse_list": {
            "name": "parse_list",
            "location": 367,
            "return": [
                "Optional[int]",
                "Iterable[str]",
                "int",
                "Set[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]",
                    "dict",
                    "bool"
                ],
                "values": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "DictParser.parse_pair": {
            "name": "parse_pair",
            "location": 439,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Hashable",
                    "Dict[str, Union[str, int, bool]]"
                ],
                "value": [
                    "str",
                    "Type",
                    "SupportsFloat",
                    "bytes"
                ]
            }
        },
        "DictParser.parse_token": {
            "name": "parse_token",
            "location": 459,
            "return": [
                "int",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "KT",
                    "Optional[Callable]"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int"
                ],
                "force_quote": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "prefix": [
                    "str",
                    "bytes",
                    "int"
                ],
                "suffix": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "lkml-master/lkml/tokens.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line_number": [
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        },
        "Token.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "str",
                "Callable",
                "Union"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentToken.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[int, str]",
                    "Exception"
                ],
                "line_number": [
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "ContentToken.__eq__": {
            "name": "__eq__",
            "location": 61,
            "return": [
                "Dict[str, str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "WhitespaceToken.__repr__": {
            "name": "__repr__",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lkml-master/lkml/tree.py": {
        "items_to_str": {
            "name": "items_to_str",
            "location": 12,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "SyntaxToken.format_value": {
            "name": "format_value",
            "location": 38,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxToken.accept": {
            "name": "accept",
            "location": 42,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "bool",
                    "T",
                    "List[str]"
                ]
            }
        },
        "SyntaxToken.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "Mapping",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]"
                ]
            }
        },
        "SyntaxToken.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuotedSyntaxToken.format_value": {
            "name": "format_value",
            "location": 94,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionSyntaxToken.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxNode.children": {
            "name": "children",
            "location": 115,
            "return": [
                "typing.Optional[typing.Tuple[SyntaxNode, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxNode.line_number": {
            "name": "line_number",
            "location": 121,
            "return": [
                "typing.Optional[builtins.int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxNode.accept": {
            "name": "accept",
            "location": 126,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PairNode.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairNode.children": {
            "name": "children",
            "location": 159,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairNode.line_number": {
            "name": "line_number",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairNode.accept": {
            "name": "accept",
            "location": 166,
            "return": [
                "Sequence['cirq.Qid']",
                "SupportsFloat"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "bool",
                    "T",
                    "List[str]"
                ]
            }
        },
        "PairNode.__str__": {
            "name": "__str__",
            "location": 170,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListNode.__repr__": {
            "name": "__repr__",
            "location": 197,
            "return": [
                "type",
                "str",
                "int",
                "Dict[str, Any]",
                "Dict[str, Iterable[Any]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListNode.children": {
            "name": "children",
            "location": 201,
            "return": [
                "Dict[str, int]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListNode.line_number": {
            "name": "line_number",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListNode.accept": {
            "name": "accept",
            "location": 212,
            "return": [
                "Sequence['cirq.Qid']",
                "SupportsFloat"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "bool",
                    "T",
                    "List[str]"
                ]
            }
        },
        "ListNode.__str__": {
            "name": "__str__",
            "location": 216,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerNode.__repr__": {
            "name": "__repr__",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerNode.__post_init__": {
            "name": "__post_init__",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerNode.children": {
            "name": "children",
            "location": 257,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerNode.line_number": {
            "name": "line_number",
            "location": 260,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerNode.accept": {
            "name": "accept",
            "location": 268,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "bool",
                    "T",
                    "List[str]"
                ]
            }
        },
        "ContainerNode.__str__": {
            "name": "__str__",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockNode.__repr__": {
            "name": "__repr__",
            "location": 300,
            "return": [
                "type",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockNode.children": {
            "name": "children",
            "location": 305,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockNode.line_number": {
            "name": "line_number",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockNode.accept": {
            "name": "accept",
            "location": 312,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "bool",
                    "dict"
                ]
            }
        },
        "BlockNode.__str__": {
            "name": "__str__",
            "location": 316,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentNode.children": {
            "name": "children",
            "location": 340,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentNode.line_number": {
            "name": "line_number",
            "location": 344,
            "return": [
                "int",
                "float",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentNode.accept": {
            "name": "accept",
            "location": 347,
            "return": [
                "Sequence['cirq.Qid']",
                "SupportsFloat"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DocumentNode.__str__": {
            "name": "__str__",
            "location": 351,
            "return": [
                "bool",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Visitor.visit": {
            "name": "visit",
            "location": 359,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "dict"
                ]
            }
        },
        "Visitor.visit_container": {
            "name": "visit_container",
            "location": 363,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Visitor.visit_block": {
            "name": "visit_block",
            "location": 367,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Visitor.visit_list": {
            "name": "visit_list",
            "location": 371,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Visitor.visit_pair": {
            "name": "visit_pair",
            "location": 375,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Visitor.visit_token": {
            "name": "visit_token",
            "location": 379,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Iterable[str]"
                ]
            }
        }
    },
    "lkml-master/lkml/utils.py": {
        "strip": {
            "name": "strip",
            "location": 4,
            "return": [
                "bool",
                "Optional[Any]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        }
    },
    "lkml-master/lkml/visitors.py": {
        "BasicVisitor._visit": {
            "name": "_visit",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BasicVisitor.visit": {
            "name": "visit",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "document": [
                    "dict"
                ]
            }
        },
        "BasicVisitor.visit_container": {
            "name": "visit_container",
            "location": 40,
            "return": [
                "Set[str]",
                "set"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "BasicVisitor.visit_block": {
            "name": "visit_block",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "BasicVisitor.visit_list": {
            "name": "visit_list",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "BasicVisitor.visit_pair": {
            "name": "visit_pair",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "BasicVisitor.visit_token": {
            "name": "visit_token",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Optional[str]",
                    "float",
                    "dict",
                    "Tuple[str]"
                ]
            }
        },
        "LookMlVisitor._visit": {
            "name": "_visit",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "BasicTransformer._visit_items": {
            "name": "_visit_items",
            "location": 75,
            "return": [
                "Optional[List[\"custom_index\"]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BasicTransformer._visit_container": {
            "name": "_visit_container",
            "location": 91,
            "return": [
                "Tuple[str]",
                "bool",
                "bytes",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "BasicTransformer.visit": {
            "name": "visit",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BasicTransformer.visit_container": {
            "name": "visit_container",
            "location": 102,
            "return": [
                "Set[str]",
                "List[str]",
                "set"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "BasicTransformer.visit_list": {
            "name": "visit_list",
            "location": 105,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "BasicTransformer.visit_block": {
            "name": "visit_block",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BasicTransformer.visit_pair": {
            "name": "visit_pair",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BasicTransformer.visit_token": {
            "name": "visit_token",
            "location": 114,
            "return": [
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Iterable[str]"
                ]
            }
        }
    },
    "lkml-master/lkml/__init__.py": {
        "parse": {
            "name": "parse",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 33,
            "return": [
                "str",
                "Sequence",
                "Optional[str]",
                "type",
                "dict"
            ],
            "arguments": {
                "stream": [
                    "Union[str, IO]",
                    "TextIO",
                    "IO",
                    "int",
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 56,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "AsyncGenerator",
                    "Coroutine"
                ],
                "file_object": [
                    "IO",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 77,
            "return": [
                "argparse.ArgumentParser",
                "Type[Parser]"
            ],
            "arguments": {
                "args": []
            }
        },
        "cli": {
            "name": "cli",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "lkml-master/lkml/__main__.py": {},
    "lkml-master/scripts/benchmark.py": {},
    "lkml-master/scripts/download_lookml.py": {},
    "lkml-master/tests/test_cli.py": {
        "lookml_path": {
            "name": "lookml_path",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_debug_flag_is_parsed_to_log_level_debug": {
            "name": "test_debug_flag_is_parsed_to_log_level_debug",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "lookml_path": [
                    "str",
                    "Tuple[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "test_absence_of_debug_flag_is_parsed_to_log_level_warn": {
            "name": "test_absence_of_debug_flag_is_parsed_to_log_level_warn",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "lookml_path": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        },
        "test_run_cli": {
            "name": "test_run_cli",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "mock_parse_args": [],
                "mock_load": [
                    "mock.Mock"
                ],
                "lookml_path": [
                    "pathlib.Path",
                    "mock.MagicMock",
                    "kata.data.io.network.GithubApi"
                ]
            }
        },
        "test_load_with_bad_argument_raises_type_error": {
            "name": "test_load_with_bad_argument_raises_type_error",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "lkml-master/tests/test_functional.py": {
        "load": {
            "name": "load",
            "location": 8,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "norfs.fs.base.Path",
                    "int",
                    "Union[str, pathlib.Path]",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "test_block_with_single_quoted_field": {
            "name": "test_block_with_single_quoted_field",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_block_with_multiple_quoted_fields": {
            "name": "test_block_with_multiple_quoted_fields",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_block_with_nested_block": {
            "name": "test_block_with_nested_block",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_removing_item_from_list_serializes_sensibly": {
            "name": "test_removing_item_from_list_serializes_sensibly",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_view_with_all_fields": {
            "name": "test_view_with_all_fields",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_model_with_all_fields": {
            "name": "test_model_with_all_fields",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_duplicate_top_level_keys": {
            "name": "test_duplicate_top_level_keys",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_duplicate_non_top_level_keys": {
            "name": "test_duplicate_non_top_level_keys",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lists_with_comma_configurations": {
            "name": "test_lists_with_comma_configurations",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reserved_dimension_names": {
            "name": "test_reserved_dimension_names",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "lkml-master/tests/test_github.py": {
        "lookml": {
            "name": "lookml",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "request": []
            }
        },
        "test_round_trip_should_work": {
            "name": "test_round_trip_should_work",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "lookml": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "lkml-master/tests/test_lexer.py": {
        "lexer": {
            "name": "lexer",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_peek_does_not_advance_index": {
            "name": "test_peek_does_not_advance_index",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "float"
                ]
            }
        },
        "test_peek_default_returns_one_character": {
            "name": "test_peek_default_returns_one_character",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "Callable"
                ]
            }
        },
        "test_peek_multiple_with_more_than_one_returns_correct_characters": {
            "name": "test_peek_multiple_with_more_than_one_returns_correct_characters",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": []
            }
        },
        "test_advance_does_not_return_a_character": {
            "name": "test_advance_does_not_return_a_character",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_advance_increases_index_by_length": {
            "name": "test_advance_increases_index_by_length",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "int"
                ]
            }
        },
        "test_consume_advances_index_by_one": {
            "name": "test_consume_advances_index_by_one",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "int"
                ]
            }
        },
        "test_consume_returns_current_character": {
            "name": "test_consume_returns_current_character",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "lexer": [
                    "int",
                    "str"
                ]
            }
        },
        "test_scan_all_simple_tokens": {
            "name": "test_scan_all_simple_tokens",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "bool",
                    "str",
                    "Union[str, int]"
                ],
                "expected": [
                    "str",
                    "Callable[..., Awaitable]",
                    "int",
                    "dict"
                ]
            }
        },
        "test_scan_whitespace": {
            "name": "test_scan_whitespace",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_comment": {
            "name": "test_scan_comment",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_comment_with_surrounding_whitespace": {
            "name": "test_scan_comment_with_surrounding_whitespace",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_quoted_literal": {
            "name": "test_scan_quoted_literal",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_quoted_literal_with_otherwise_illegal_chars": {
            "name": "test_scan_quoted_literal_with_otherwise_illegal_chars",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_quoted_literal_with_escaped_quotes": {
            "name": "test_scan_quoted_literal_with_escaped_quotes",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_literal": {
            "name": "test_scan_literal",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_literal_with_following_whitespace": {
            "name": "test_scan_literal_with_following_whitespace",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_expression_block_with_complex_sql_block": {
            "name": "test_scan_expression_block_with_complex_sql_block",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_with_complex_sql_block": {
            "name": "test_scan_with_complex_sql_block",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_with_non_expression_block_starting_with_sql": {
            "name": "test_scan_with_non_expression_block_starting_with_sql",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scan_with_non_expression_block_starting_with_html": {
            "name": "test_scan_with_non_expression_block_starting_with_html",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "lkml-master/tests/test_parser.py": {
        "parser": {
            "name": "parser",
            "location": 24,
            "return": [
                "parser.Parser"
            ],
            "arguments": {}
        },
        "test_tokens__repr__": {
            "name": "test_tokens__repr__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_parser_index_starts_at_zero": {
            "name": "test_init_parser_index_starts_at_zero",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "List[str]"
                ]
            }
        },
        "test_init_parser_has_tokens": {
            "name": "test_init_parser_has_tokens",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_init_all_tokens_must_be_tokens": {
            "name": "test_init_all_tokens_must_be_tokens",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_peek_does_not_advance_index": {
            "name": "test_peek_does_not_advance_index",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_peek_default_returns_one_token": {
            "name": "test_peek_default_returns_one_token",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_advance_does_not_return_a_token": {
            "name": "test_advance_does_not_return_a_token",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "bool"
                ]
            }
        },
        "test_advance_increases_index_by_length": {
            "name": "test_advance_increases_index_by_length",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_consume_advances_index_by_one": {
            "name": "test_consume_advances_index_by_one",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_consume_returns_current_token": {
            "name": "test_consume_returns_current_token",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "bool"
                ]
            }
        },
        "test_consume_token_value_does_not_return_token": {
            "name": "test_consume_token_value_does_not_return_token",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Optional[str]"
                ]
            }
        },
        "test_consume_token_value_raises_error_if_not_found": {
            "name": "test_consume_token_value_raises_error_if_not_found",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_check_returns_true_for_single_valid_type": {
            "name": "test_check_returns_true_for_single_valid_type",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_check_returns_false_for_single_invalid_type": {
            "name": "test_check_returns_false_for_single_invalid_type",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "List[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_check_returns_true_for_mix_of_valid_and_invalid_types": {
            "name": "test_check_returns_true_for_mix_of_valid_and_invalid_types",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Optional[str]"
                ]
            }
        },
        "test_check_returns_false_for_all_invalid_types": {
            "name": "test_check_returns_false_for_all_invalid_types",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Optional[str]"
                ]
            }
        },
        "test_check_raises_if_token_types_arg_is_not_a_token": {
            "name": "test_check_raises_if_token_types_arg_is_not_a_token",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_parse_value_quoted_literal": {
            "name": "test_parse_value_quoted_literal",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_value_literal": {
            "name": "test_parse_value_literal",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_value_literal_with_sql_block": {
            "name": "test_parse_value_literal_with_sql_block",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_value_invalid_tokens": {
            "name": "test_parse_value_invalid_tokens",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_value_quoted_literal_with_leftovers": {
            "name": "test_parse_value_quoted_literal_with_leftovers",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_value_without_closing_double_semicolons": {
            "name": "test_parse_value_without_closing_double_semicolons",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_key_normal_returns_token_value": {
            "name": "test_parse_key_normal_returns_token_value",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_key_without_literal_token": {
            "name": "test_parse_key_without_literal_token",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_key_without_value_token": {
            "name": "test_parse_key_without_value_token",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_debug_logging_statements_execute_successfully": {
            "name": "test_debug_logging_statements_execute_successfully",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_parse_block_without_closing_curly_brace": {
            "name": "test_parse_block_without_closing_curly_brace",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_nonmatching_container_raises_syntax_error": {
            "name": "test_parse_nonmatching_container_raises_syntax_error",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_pair_with_literal": {
            "name": "test_parse_pair_with_literal",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_pair_with_quoted_literal": {
            "name": "test_parse_pair_with_quoted_literal",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_pair_with_sql_block": {
            "name": "test_parse_pair_with_sql_block",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_pair_with_bad_key": {
            "name": "test_parse_pair_with_bad_key",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_pair_without_value_token": {
            "name": "test_parse_pair_without_value_token",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_literals": {
            "name": "test_parse_list_with_literals",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_pairs": {
            "name": "test_parse_list_with_pairs",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_trailing_comma": {
            "name": "test_parse_list_with_trailing_comma",
            "location": 429,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_leading_comma": {
            "name": "test_parse_list_with_leading_comma",
            "location": 476,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_missing_comma": {
            "name": "test_parse_list_with_missing_comma",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_no_contents": {
            "name": "test_parse_list_with_no_contents",
            "location": 516,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_no_opening_bracket": {
            "name": "test_parse_list_with_no_opening_bracket",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_bad_token": {
            "name": "test_parse_list_with_bad_token",
            "location": 571,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_only_commas": {
            "name": "test_parse_list_with_only_commas",
            "location": 589,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_trailing_comment": {
            "name": "test_parse_list_with_trailing_comment",
            "location": 605,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_inner_comment": {
            "name": "test_parse_list_with_inner_comment",
            "location": 633,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_list_with_only_comment": {
            "name": "test_parse_list_with_only_comment",
            "location": 666,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_block_with_no_expression": {
            "name": "test_parse_block_with_no_expression",
            "location": 689,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "lkml-master/tests/test_simple.py": {
        "parser": {
            "name": "parser",
            "location": 6,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "test_parse_token_with_unquoted_literal": {
            "name": "test_parse_token_with_unquoted_literal",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "List[str]"
                ]
            }
        },
        "test_parse_token_with_quoted_literal": {
            "name": "test_parse_token_with_quoted_literal",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "List[str]"
                ]
            }
        },
        "test_parse_pair_with_unquoted_literal": {
            "name": "test_parse_pair_with_unquoted_literal",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_parse_pair_with_quoted_literal": {
            "name": "test_parse_pair_with_quoted_literal",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_parse_list_with_unquoted_literals": {
            "name": "test_parse_list_with_unquoted_literals",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_parse_list_with_quoted_literals": {
            "name": "test_parse_list_with_quoted_literals",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_parse_list_with_many_values": {
            "name": "test_parse_list_with_many_values",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_parse_list_with_no_values": {
            "name": "test_parse_list_with_no_values",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_parse_block_with_unquoted_literals": {
            "name": "test_parse_block_with_unquoted_literals",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_parse_block_with_quoted_literals": {
            "name": "test_parse_block_with_quoted_literals",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_parse_block_with_name": {
            "name": "test_parse_block_with_name",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Callable"
                ]
            }
        },
        "test_parse_block_with_no_fields_and_name": {
            "name": "test_parse_block_with_no_fields_and_name",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Callable",
                    "dict"
                ]
            }
        },
        "test_parse_block_with_no_fields_and_no_name": {
            "name": "test_parse_block_with_no_fields_and_no_name",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_parse_nested_block": {
            "name": "test_parse_nested_block",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_parse_any_with_str_value": {
            "name": "test_parse_any_with_str_value",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_parse_any_with_list_value": {
            "name": "test_parse_any_with_list_value",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_parse_any_with_dict_value_and_name": {
            "name": "test_parse_any_with_dict_value_and_name",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_parse_any_with_dict_value_and_no_name": {
            "name": "test_parse_any_with_dict_value_and_no_name",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_parse_any_raises_with_bad_type": {
            "name": "test_parse_any_raises_with_bad_type",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "Container",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_expand_list_with_blocks": {
            "name": "test_expand_list_with_blocks",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str",
                    "int"
                ]
            }
        },
        "test_expand_list_with_pairs": {
            "name": "test_expand_list_with_pairs",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str",
                    "int"
                ]
            }
        },
        "test_parse_top_level_pairs": {
            "name": "test_parse_top_level_pairs",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_parse_query": {
            "name": "test_parse_query",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_resolve_filters_filter_only_field": {
            "name": "test_resolve_filters_filter_only_field",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_resolve_filters_legacy_filters": {
            "name": "test_resolve_filters_legacy_filters",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "bool"
                ]
            }
        },
        "test_resolve_filters_new_filters": {
            "name": "test_resolve_filters_new_filters",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        }
    },
    "lkml-master/tests/test_tree.py": {
        "test_syntax_token_str_should_return_formatted": {
            "name": "test_syntax_token_str_should_return_formatted",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "token_class": [
                    "bool",
                    "int"
                ],
                "expected": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_quoted_syntax_token_quotes_double_quotes": {
            "name": "test_quoted_syntax_token_quotes_double_quotes",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_expression_syntax_token_with_expression_suffix": {
            "name": "test_expression_syntax_token_with_expression_suffix",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pair_node_str_should_return_formatted": {
            "name": "test_pair_node_str_should_return_formatted",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pair_node_should_not_have_children": {
            "name": "test_pair_node_should_not_have_children",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_list_node_str_should_return_formatted": {
            "name": "test_list_node_str_should_return_formatted",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_block_node_str_should_return_formatted": {
            "name": "test_block_node_str_should_return_formatted",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_container_node_str_should_return_formatted": {
            "name": "test_container_node_str_should_return_formatted",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "syntax_token_with_trivia_str_should_render": {
            "name": "syntax_token_with_trivia_str_should_render",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookml_visitor_should_visit_syntax_token_correctly": {
            "name": "test_lookml_visitor_should_visit_syntax_token_correctly",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "lkml-master/tests/__init__.py": {}
}
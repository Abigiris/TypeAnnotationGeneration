{
    "loggo2-master/setup.py": {
        "read": {
            "name": "read",
            "location": 27,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        }
    },
    "loggo2-master/loggo2/_loggo2.py": {
        "LocalLogFormatter.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalLogFormatter.format": {
            "name": "format",
            "location": 91,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict",
                    "Mapping[str, Any]",
                    "logging.LogRecord",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "JsonLogFormatter.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonLogFormatter.get_json": {
            "name": "get_json",
            "location": 129,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Tuple[str, int]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "JsonLogFormatter.format": {
            "name": "format",
            "location": 142,
            "return": [
                "float",
                "Optional[bool]",
                "Optional[int]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "Loggo.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loggo.__call__": {
            "name": "__call__",
            "location": 233,
            "return": [
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "class_or_func": [
                    "bool",
                    "str",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "Loggo._get_timestamp": {
            "name": "_get_timestamp",
            "location": 246,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "Loggo._best_returned_none": {
            "name": "_best_returned_none",
            "location": 254,
            "return": [
                "type",
                "Optional[Callable[[bool], None]]"
            ],
            "arguments": {
                "returned": [
                    "type",
                    "List[List[int]]",
                    "bool",
                    "float",
                    "int"
                ],
                "returned_none": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "Loggo._can_decorate": {
            "name": "_can_decorate",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "candidate": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "dict",
                    "List[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Loggo._decorate_all_methods": {
            "name": "_decorate_all_methods",
            "location": 286,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str"
                ],
                "just_errors": [
                    "List[str]",
                    "int",
                    "float",
                    "Callable[[Any, Any], bool]",
                    "str",
                    "Callable"
                ]
            }
        },
        "Loggo.pause": {
            "name": "pause",
            "location": 305,
            "return": [
                "typing.Generator[None, None, None]"
            ],
            "arguments": {
                "self": [],
                "allow_errors": [
                    "str",
                    "int"
                ]
            }
        },
        "Loggo.stop": {
            "name": "stop",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allow_errors": [
                    "str",
                    "int"
                ]
            }
        },
        "Loggo.start": {
            "name": "start",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allow_errors": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "Loggo.ignore": {
            "name": "ignore",
            "location": 333,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "function": [
                    "str"
                ]
            }
        },
        "Loggo.errors": {
            "name": "errors",
            "location": 342,
            "return": [
                "bool",
                "Type",
                "float"
            ],
            "arguments": {
                "self": [],
                "class_or_func": [
                    "str",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "Loggo._logme": {
            "name": "_logme",
            "location": 350,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "Callable",
                    "List[str]",
                    "Callable[..., T]"
                ],
                "just_errors": [
                    "Callable",
                    "List[str]",
                    "Callable[..., T]"
                ]
            }
        },
        "Loggo._string_params": {
            "name": "_string_params",
            "location": 410,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "non_private_params": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, bool]"
                ],
                "use_repr": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Loggo._make_call_signature": {
            "name": "_make_call_signature",
            "location": 424,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "function": [
                    "str"
                ],
                "param_strings": [
                    "str",
                    "Union[List[str], str]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "Loggo.listen_to": {
            "name": "listen_to",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "loggo_self": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ],
                "facility": [
                    "str",
                    "int",
                    "logging.Logger",
                    "Exception"
                ]
            }
        },
        "Loggo._params_to_dict": {
            "name": "_params_to_dict",
            "location": 458,
            "return": [
                "Optional[int]",
                "Optional[float]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "function": [
                    "str",
                    "int",
                    "Callable[[str], bool]"
                ]
            }
        },
        "Loggo._obscure_private_keys": {
            "name": "_obscure_private_keys",
            "location": 483,
            "return": [
                "str",
                "dict",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, Dict[str, str]]",
                "Callable",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "log_data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Tuple[Any, Any]]",
                    "bool",
                    "str"
                ],
                "dict_depth": [
                    "bool",
                    "Dict[str, Tuple[Any, Any]]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Loggo._represent_return_value": {
            "name": "_represent_return_value",
            "location": 496,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Loggo._generate_log": {
            "name": "_generate_log",
            "location": 504,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "where": [
                    "str",
                    "bool",
                    "bytes",
                    "pathlib.Path"
                ],
                "returned": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "formatters": [
                    "str",
                    "type"
                ],
                "safe_log_data": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Loggo.add_custom_log_data": {
            "name": "add_custom_log_data",
            "location": 561,
            "return": [
                "Dict[int, Dict[str, Any]]",
                "dict",
                "str",
                "List[Dict]",
                "pathlib.Path",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loggo._add_graylog_handler": {
            "name": "_add_graylog_handler",
            "location": 565,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Dict[str, Any]",
                    "str",
                    "memoryview",
                    "Dict[int, dict]",
                    "Callable"
                ],
                "log_if_disabled": [
                    "int",
                    "Optional[dict]",
                    "bool",
                    "str"
                ]
            }
        },
        "Loggo._force_string_and_truncate": {
            "name": "_force_string_and_truncate",
            "location": 579,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "truncate": [
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "List[Tuple[pathlib.Path, str]]"
                ],
                "use_repr": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Loggo._truncate": {
            "name": "_truncate",
            "location": 595,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "string_to_truncate": [
                    "int",
                    "float",
                    "bytes",
                    "T",
                    "T_co"
                ],
                "max_len": [
                    "Callable",
                    "Optional[str]",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "Loggo._rename_protected_keys": {
            "name": "_rename_protected_keys",
            "location": 614,
            "return": [
                "str",
                "bool",
                "Union[str, pathlib.Path]",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "log_data": [
                    "Callable[[Any], None]",
                    "dict",
                    "Mapping",
                    "bytes",
                    "Union[Dict, List]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Loggo.sanitise": {
            "name": "sanitise",
            "location": 630,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "unsafe_dict": [
                    "str",
                    "int"
                ],
                "use_repr": [
                    "float",
                    "bool"
                ]
            }
        },
        "Loggo.sanitise_msg": {
            "name": "sanitise_msg",
            "location": 641,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Dict[str, str]",
                    "Sequence",
                    "bool"
                ]
            }
        },
        "Loggo.log": {
            "name": "log",
            "location": 645,
            "return": [
                "Generator[Tuple[int, Any], None, None]",
                "Iterator[Dict[str, Any]]",
                "Generator",
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "Union[None, str, List[str]]",
                    "Tuple[str, int]"
                ],
                "msg": [
                    "int",
                    "list",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "extra": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "safe": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Loggo.debug": {
            "name": "debug",
            "location": 679,
            "return": [
                "Dict[str, str]",
                "int",
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loggo.info": {
            "name": "info",
            "location": 682,
            "return": [
                "float",
                "Tuple[int, int]",
                "BaseException",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loggo.warning": {
            "name": "warning",
            "location": 685,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loggo.error": {
            "name": "error",
            "location": 688,
            "return": [
                "bool",
                "int",
                "List[str]",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loggo.critical": {
            "name": "critical",
            "location": 691,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loggo._logme.full_decoration": {
            "name": "full_decoration",
            "location": 362,
            "return": [
                "Type",
                "logging.LogRecord",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {}
        },
        "Loggo.listen_to.LoggoHandler.emit": {
            "name": "emit",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "handler_self": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "record": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "loggo2-master/loggo2/__init__.py": {},
    "loggo2-master/tests/test_basics.py": {
        "function_with_private_arg": {
            "name": "function_with_private_arg",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "priv": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "str",
                    "dict"
                ],
                "acceptable": [
                    "int",
                    "Callable[[], None]",
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "function_with_private_kwarg": {
            "name": "function_with_private_kwarg",
            "location": 26,
            "return": [],
            "arguments": {
                "number": [
                    "str",
                    "IO[bytes]"
                ],
                "a_float": [
                    "str",
                    "IO[bytes]"
                ],
                "mnemonic": [
                    "bool",
                    "Callable[..., T]",
                    "int",
                    "Type"
                ]
            }
        },
        "may_or_may_not_error_test": {
            "name": "may_or_may_not_error_test",
            "location": 32,
            "return": [
                "str",
                "bool",
                "int",
                "List[int]"
            ],
            "arguments": {
                "first": [
                    "str",
                    "Callable[..., T]",
                    "dict",
                    "bool"
                ],
                "other": [
                    "str",
                    "Callable[..., T]",
                    "dict",
                    "bool"
                ],
                "kwargs": []
            }
        },
        "aaa": {
            "name": "aaa",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "first_test_func": {
            "name": "first_test_func",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "number": [
                    "Callable",
                    "int",
                    "list",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "func_with_recursive_data_beyond": {
            "name": "func_with_recursive_data_beyond",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "List[str]",
                    "dict",
                    "List[dict]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Tuple[str]",
                    "bool",
                    "List[List[Any]]",
                    "bytes"
                ]
            }
        },
        "func_with_recursive_data_within": {
            "name": "func_with_recursive_data_within",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "List[str]",
                    "dict",
                    "List[dict]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Tuple[str]",
                    "bool",
                    "List[List[Any]]",
                    "bytes"
                ]
            }
        },
        "AllMethodTypes.__secret__": {
            "name": "__secret__",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllMethodTypes.public": {
            "name": "public",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllMethodTypes.cl": {
            "name": "cl",
            "location": 56,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ]
            }
        },
        "AllMethodTypes.st": {
            "name": "st",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "AllMethodTypes.doubled": {
            "name": "doubled",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoRepr.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyClass.add": {
            "name": "add",
            "location": 87,
            "return": [
                "float",
                "T",
                "Tuple[float, float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "DummyClass.add_and_maybe_subtract": {
            "name": "add_and_maybe_subtract",
            "location": 90,
            "return": [
                "Sequence[Callable]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "Iterable",
                    "float",
                    "int",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "float",
                    "int",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "c": [
                    "int"
                ]
            }
        },
        "DummyClass.static_method": {
            "name": "static_method",
            "location": 97,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "DummyClass.optional_provided": {
            "name": "optional_provided",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kw": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DummyClass.hopefully_ignored": {
            "name": "hopefully_ignored",
            "location": 105,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "DummyClass.hopefully_only_errors": {
            "name": "hopefully_only_errors",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "DummyClass2.add": {
            "name": "add",
            "location": 114,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "dict"
                ],
                "b": [
                    "int",
                    "dict"
                ],
                "c": [
                    "int",
                    "dict"
                ]
            }
        },
        "ForErrors.one": {
            "name": "one",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ForErrors.two": {
            "name": "two",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_inheritance_signature_change": {
            "name": "test_inheritance_signature_change",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_errors_on_func": {
            "name": "test_errors_on_func",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_one": {
            "name": "test_one",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_logme_0": {
            "name": "test_logme_0",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_logme_1": {
            "name": "test_logme_1",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_everything_0": {
            "name": "test_everything_0",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_everything_1": {
            "name": "test_everything_1",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_everything_3": {
            "name": "test_everything_3",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_everything_4": {
            "name": "test_everything_4",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_loggo_ignore": {
            "name": "test_loggo_ignore",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_loggo_errors": {
            "name": "test_loggo_errors",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_error_deco": {
            "name": "test_error_deco",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_private_keyword_removal": {
            "name": "test_private_keyword_removal",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_private_positional_removal": {
            "name": "test_private_positional_removal",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_private_beyond": {
            "name": "test_private_beyond",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoration.test_private_within": {
            "name": "test_private_within",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.setup_method": {
            "name": "setup_method",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_protected_keys": {
            "name": "test_protected_keys",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_can_log": {
            "name": "test_can_log",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_write_to_file": {
            "name": "test_write_to_file",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_int_truncation": {
            "name": "test_int_truncation",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_string_truncation_fail": {
            "name": "test_string_truncation_fail",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_msg_truncation": {
            "name": "test_msg_truncation",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_trace_truncation": {
            "name": "test_trace_truncation",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_fail_to_add_entry": {
            "name": "test_fail_to_add_entry",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_log_fail": {
            "name": "test_log_fail",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_loggo_pause": {
            "name": "test_loggo_pause",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_loggo_pause_error": {
            "name": "test_loggo_pause_error",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_loggo_error_suppressed": {
            "name": "test_loggo_error_suppressed",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_see_below": {
            "name": "test_see_below",
            "location": 436,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_compat": {
            "name": "test_compat",
            "location": 443,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_bad_args": {
            "name": "test_bad_args",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog._working_normally": {
            "name": "_working_normally",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog._not_logging": {
            "name": "_not_logging",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_stop_and_start": {
            "name": "test_stop_and_start",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_debug": {
            "name": "test_debug",
            "location": 489,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_info": {
            "name": "test_info",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_warning": {
            "name": "test_warning",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_error": {
            "name": "test_error",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_critical": {
            "name": "test_critical",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_listen_to": {
            "name": "test_listen_to",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLog.test_bad_args.dummy": {
            "name": "dummy",
            "location": 458,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "needed": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "loggo2-master/tests/test_custom_strings.py": {
        "custom_success": {
            "name": "custom_success",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "custom_none_user_returned": {
            "name": "custom_none_user_returned",
            "location": 37,
            "return": [
                "str",
                "Iterator[Dict[str, str]]",
                "Dict[str, Any]",
                "Iterable[Mapping[str, Any]]"
            ],
            "arguments": {}
        },
        "custom_fail": {
            "name": "custom_fail",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "custom_none_default": {
            "name": "custom_none_default",
            "location": 47,
            "return": [
                "int",
                "Union[int, slice]"
            ],
            "arguments": {}
        },
        "custom_without_return": {
            "name": "custom_without_return",
            "location": 52,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "TestCustomStrings.test_pass": {
            "name": "test_pass",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomStrings.test_user_default_none": {
            "name": "test_user_default_none",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomStrings.custom_none_default": {
            "name": "custom_none_default",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomStrings.test_fail": {
            "name": "test_fail",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomStrings.test_no_return_string": {
            "name": "test_no_return_string",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "loggo2-master/tests/test_import.py": {
        "TestWithoutGraypy.setup_method": {
            "name": "setup_method",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithoutGraypy.teardown_method": {
            "name": "teardown_method",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithoutGraypy.tests_using_graypy": {
            "name": "tests_using_graypy",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithoutGraypy.setup_method.mocked_import": {
            "name": "mocked_import",
            "location": 9,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "loggo2-master/tests/test_method_types.py": {
        "AllMethodTypes.__secret__": {
            "name": "__secret__",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllMethodTypes.public": {
            "name": "public",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllMethodTypes.cl": {
            "name": "cl",
            "location": 19,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Type",
                    "List[dict]"
                ]
            }
        },
        "AllMethodTypes.st": {
            "name": "st",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "AllMethodTypes.doubled": {
            "name": "doubled",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethods.test_methods_secret_not_called": {
            "name": "test_methods_secret_not_called",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethods.test_methods_public_instance": {
            "name": "test_methods_public_instance",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethods.test_methods_classmethod_instance": {
            "name": "test_methods_classmethod_instance",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethods.test_methods_classmethod_class": {
            "name": "test_methods_classmethod_class",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethods.test_methods_staticmethod_instance": {
            "name": "test_methods_staticmethod_instance",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethods.test_methods_staticmethod_class": {
            "name": "test_methods_staticmethod_class",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMethods.test_methods_double_logged_instance": {
            "name": "test_methods_double_logged_instance",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "loggo2-master/tests/__init__.py": {}
}
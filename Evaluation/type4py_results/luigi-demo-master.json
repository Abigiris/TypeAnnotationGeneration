{
    "luigi-demo-master/luigi/demo/advanced.py": {
        "CompanyEngineerSalary.output": {
            "name": "output",
            "location": 22,
            "return": [
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompanyEngineerSalary.requires": {
            "name": "requires",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompanyEngineerSalary.run": {
            "name": "run",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDFDemo.requires": {
            "name": "requires",
            "location": 58,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDFDemo.output": {
            "name": "output",
            "location": 61,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PandasDFDemo.run": {
            "name": "run",
            "location": 64,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomerSalaries.output": {
            "name": "output",
            "location": 83,
            "return": [
                "str",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomerSalaries.requires": {
            "name": "requires",
            "location": 86,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomerSalaries.run": {
            "name": "run",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "luigi-demo-master/luigi/demo/news.py": {
        "NewsTopicTask._key": {
            "name": "_key",
            "location": 25,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsTopicTask.params": {
            "name": "params",
            "location": 29,
            "return": [
                "datetime.datetime",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadArticles.output": {
            "name": "output",
            "location": 42,
            "return": [
                "T",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadArticles.run": {
            "name": "run",
            "location": 45,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadArticles.table": {
            "name": "table",
            "location": 83,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadArticles.requires": {
            "name": "requires",
            "location": 86,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadArticles.rows": {
            "name": "rows",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseArticles.output": {
            "name": "output",
            "location": 109,
            "return": [
                "T",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseArticles.requires": {
            "name": "requires",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseArticles.run": {
            "name": "run",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CountTopicSources.output": {
            "name": "output",
            "location": 135,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountTopicSources.requires": {
            "name": "requires",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountTopicSources.mapper": {
            "name": "mapper",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "row": [
                    "list",
                    "dict",
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "CountTopicSources.reducer": {
            "name": "reducer",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ],
                "values": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ]
            }
        },
        "CountMultiTopicSources.output": {
            "name": "output",
            "location": 155,
            "return": [
                "Optional[int]",
                "Callable",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountMultiTopicSources.requires": {
            "name": "requires",
            "location": 160,
            "return": [
                "Generator",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountMultiTopicSources.mapper": {
            "name": "mapper",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "row": [
                    "str",
                    "IO[str]",
                    "type",
                    "dict",
                    "bytes"
                ]
            }
        },
        "CountMultiTopicSources.reducer": {
            "name": "reducer",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ],
                "values": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ]
            }
        }
    },
    "luigi-demo-master/luigi/demo/simple.py": {
        "GenerateCustomers.output": {
            "name": "output",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateCustomers.run": {
            "name": "run",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregatePositions.output": {
            "name": "output",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregatePositions.requires": {
            "name": "requires",
            "location": 49,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregatePositions.mapper": {
            "name": "mapper",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Sequence[MutableMapping]"
                ]
            }
        },
        "AggregatePositions.reducer": {
            "name": "reducer",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ],
                "values": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ]
            }
        },
        "ProfessionEmployers.output": {
            "name": "output",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfessionEmployers.requires": {
            "name": "requires",
            "location": 70,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfessionEmployers.mapper": {
            "name": "mapper",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Sequence[MutableMapping]"
                ]
            }
        },
        "ProfessionEmployers.reducer": {
            "name": "reducer",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ],
                "values": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ]
            }
        },
        "ScientistEmployers.output": {
            "name": "output",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScientistEmployers.requires": {
            "name": "requires",
            "location": 96,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScientistEmployers.mapper": {
            "name": "mapper",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "row": [
                    "Dict[str, Any]",
                    "Dict[str, Tuple[Any, Any]]",
                    "Mapping[int, str]",
                    "int"
                ]
            }
        },
        "ScientistEmployers.reducer": {
            "name": "reducer",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ],
                "values": [
                    "str",
                    "Optional[Callable]",
                    "Iterator[str]"
                ]
            }
        }
    },
    "luigi-demo-master/luigi/demo/__init__.py": {}
}
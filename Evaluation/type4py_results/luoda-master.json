{
    "luoda-master/setup.py": {},
    "luoda-master/luoda/cli.py": {
        "cli": {
            "name": "cli",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "click.Context",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "click.Context",
                    "bool"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "serve": {
            "name": "serve",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "serve.builder": {
            "name": "builder",
            "location": 43,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[KT], VT]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "luoda-master/luoda/config.py": {
        "read": {
            "name": "read",
            "location": 52,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Union[bool, str]]",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "luoda-master/luoda/item.py": {},
    "luoda-master/luoda/pipeline.py": {
        "build": {
            "name": "build",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "Dict[str, Any]"
                ]
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "package": [
                    "str",
                    "Optional[List[str]]",
                    "bytes"
                ],
                "searchpath": [
                    "str",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "Pipeline.load": {
            "name": "load",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plugins": [
                    "str",
                    "List[Tuple[int, int]]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "Pipeline.run": {
            "name": "run",
            "location": 48,
            "return": [
                "str",
                "int",
                "Union[bool, str, None]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "luoda-master/luoda/utils.py": {
        "flatten": {
            "name": "flatten",
            "location": 10,
            "return": [
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "lglobs": {
            "name": "lglobs",
            "location": 17,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]",
                    "cerulean.path.Path",
                    "str"
                ],
                "globs": [
                    "str",
                    "pathlib.Path",
                    "list"
                ],
                "ignore_globs": [
                    "str",
                    "Union[pathlib.Path, str]"
                ]
            }
        }
    },
    "luoda-master/luoda/watch.py": {
        "Watch.watch": {
            "name": "watch",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "func": [
                    "dict",
                    "List[str]",
                    "OrderedDict",
                    "str",
                    "Iterable[Any]"
                ],
                "delay": [
                    "str",
                    "Optional[str]"
                ],
                "ignore": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Watch.examine": {
            "name": "examine",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "luoda-master/luoda/__init__.py": {},
    "luoda-master/luoda/__main__.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "luoda-master/luoda/plugins/highlight.py": {
        "available": {
            "name": "available",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 20,
            "return": [
                "bool",
                "type",
                "str"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "bool",
                    "list"
                ],
                "config": [
                    "Dict[str, Any]",
                    "Sequence"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/markdown.py": {
        "available": {
            "name": "available",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 36,
            "return": [
                "bool",
                "type",
                "str"
            ],
            "arguments": {
                "item": [
                    "list",
                    "IO",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "Render.header": {
            "name": "header",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "level": [
                    "str"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "Render.block_code": {
            "name": "block_code",
            "location": 26,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Optional[str]",
                "Union[str]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "dict"
                ],
                "lang": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/metadata.py": {
        "available": {
            "name": "available",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 24,
            "return": [
                "str",
                "Sequence[str]",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "item": [
                    "TextIO",
                    "IO[bytes]"
                ]
            }
        },
        "find_git": {
            "name": "find_git",
            "location": 44,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "pathlib.PurePath"
                ]
            }
        },
        "get_commit": {
            "name": "get_commit",
            "location": 52,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "repo": [
                    "str"
                ],
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "str",
                    "pathlib.PurePath"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/minimize.py": {
        "available": {
            "name": "available",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 15,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "item": [
                    "Callable",
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/org.py": {
        "available": {
            "name": "available",
            "location": 26,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 30,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "item": [
                    "Union[pathlib3x.Path, IO[str]]",
                    "List[str]"
                ]
            }
        },
        "parse_date": {
            "name": "parse_date",
            "location": 72,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "date": [
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "highlight": {
            "name": "highlight",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "insert_refs": {
            "name": "insert_refs",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": [
                    "bs4.BeautifulSoup",
                    "str",
                    "dict"
                ]
            }
        },
        "strip_js": {
            "name": "strip_js",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": [
                    "bs4.BeautifulSoup",
                    "int",
                    "str"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/render.py": {
        "available": {
            "name": "available",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 27,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "item": [],
                "items": [
                    "bytes",
                    "NamedTuple"
                ],
                "config": [
                    "dict",
                    "str"
                ]
            }
        },
        "_strftime": {
            "name": "_strftime",
            "location": 43,
            "return": [
                "Optional[str]",
                "str",
                "datetime.datetime",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "timestamp": [
                    "Union[int, float]",
                    "str",
                    "List[str]",
                    "int"
                ],
                "fmt": [
                    "Union[int, float]",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Sandbox.is_safe_callable": {
            "name": "is_safe_callable",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/static.py": {
        "available": {
            "name": "available",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "item": [
                    "dict"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/tap.py": {
        "available": {
            "name": "available",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 17,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "state": [
                    "List[str]",
                    "T",
                    "List[int]",
                    "Sequence[T]",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/write.py": {
        "available": {
            "name": "available",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 22,
            "return": [
                "bool",
                "type",
                "str"
            ],
            "arguments": {
                "item": [
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/_exceptions.py": {},
    "luoda-master/luoda/plugins/_utils.py": {
        "colorize": {
            "name": "colorize",
            "location": 13,
            "return": [
                "int",
                "List[str]",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "lang": [
                    "str"
                ]
            }
        }
    },
    "luoda-master/luoda/plugins/__init__.py": {},
    "luoda-master/tests/fixtures.py": {
        "tmpdir": {
            "name": "tmpdir",
            "location": 14,
            "return": [
                "typing.Iterator[pathlib.Path]"
            ],
            "arguments": {}
        }
    },
    "luoda-master/tests/test_cli.py": {
        "invoke": {
            "name": "invoke",
            "location": 22,
            "return": [
                "typing.Iterator[typing.Callable]"
            ],
            "arguments": {}
        },
        "test_missing_config": {
            "name": "test_missing_config",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "invoke": [
                    "Callable",
                    "float"
                ]
            }
        },
        "test_invalid_config": {
            "name": "test_invalid_config",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "invoke": [
                    "Callable",
                    "float"
                ]
            }
        },
        "test_valid_config": {
            "name": "test_valid_config",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "invoke": [
                    "Callable",
                    "str",
                    "pytest_mock.MockFixture"
                ]
            }
        },
        "test_failed_build": {
            "name": "test_failed_build",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "invoke": [
                    "Callable",
                    "float"
                ]
            }
        },
        "test_successful_build": {
            "name": "test_successful_build",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "invoke": [
                    "Callable",
                    "str",
                    "pytest_mock.MockFixture",
                    "bool"
                ],
                "mocker": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_successful_serve": {
            "name": "test_successful_serve",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "invoke": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "test_failed_serve": {
            "name": "test_failed_serve",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "invoke": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "test_missing_config.missing_config": {
            "name": "missing_config",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "_ctx": [
                    "click.Context",
                    "bool"
                ]
            }
        },
        "test_invalid_config.invalid_config": {
            "name": "invalid_config",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "click.core.Context",
                    "bool",
                    "homeassistant_cli.config.Configuration"
                ]
            }
        },
        "test_valid_config.valid_config": {
            "name": "valid_config",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "click.core.Context",
                    "bool",
                    "homeassistant_cli.config.Configuration"
                ]
            }
        }
    },
    "luoda-master/tests/test_config.py": {
        "test_missing_build": {
            "name": "test_missing_build",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_invalid_type": {
            "name": "test_invalid_type",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_invalid_build_dir": {
            "name": "test_invalid_build_dir",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_invalid_highlight": {
            "name": "test_invalid_highlight",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_extra": {
            "name": "test_extra",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "luoda-master/tests/test_pipeline.py": {
        "test_unknown_plugins": {
            "name": "test_unknown_plugins",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_ignored_plugins": {
            "name": "test_ignored_plugins",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_plugins": {
            "name": "test_plugins",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_unknown_run": {
            "name": "test_unknown_run",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "test_invalid_glob": {
            "name": "test_invalid_glob",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_cleanup": {
            "name": "test_cleanup",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ],
                "mocker": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "luoda-master/tests/test_utils.py": {
        "test_flatten": {
            "name": "test_flatten",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lglobs": {
            "name": "test_lglobs",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "luoda-master/tests/test_watch.py": {
        "test_watch": {
            "name": "test_watch",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "luoda-master/tests/__init__.py": {},
    "luoda-master/tests/plugins/test_highlight.py": {
        "test_available": {
            "name": "test_available",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run": {
            "name": "test_run",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "luoda-master/tests/plugins/test_markdown.py": {
        "test_available": {
            "name": "test_available",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_markdown": {
            "name": "test_not_markdown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_title": {
            "name": "test_no_title",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_title": {
            "name": "test_title",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_code": {
            "name": "test_code",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "luoda-master/tests/plugins/test_metadata.py": {
        "test_available": {
            "name": "test_available",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_without_git": {
            "name": "test_without_git",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_with_git_in_cwd": {
            "name": "test_with_git_in_cwd",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_with_git_in_subdir": {
            "name": "test_with_git_in_subdir",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "dict",
                    "pathlib.Path"
                ]
            }
        },
        "test_date": {
            "name": "test_date",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_mtime": {
            "name": "test_mtime",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "luoda-master/tests/plugins/test_minimize.py": {
        "test_available": {
            "name": "test_available",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run": {
            "name": "test_run",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str",
                    "pypi2nix.path.Path"
                ]
            }
        }
    },
    "luoda-master/tests/plugins/test_org.py": {
        "test_available": {
            "name": "test_available",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "test_parse_date": {
            "name": "test_parse_date",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_not_org": {
            "name": "test_run_not_org",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_run_invalid_process": {
            "name": "test_run_invalid_process",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ],
                "mocker": [
                    "Item",
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_run_with_options": {
            "name": "test_run_with_options",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_run_without_options": {
            "name": "test_run_without_options",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_run_without_options_or_fallback": {
            "name": "test_run_without_options_or_fallback",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "test_coderef": {
            "name": "test_coderef",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "luoda-master/tests/plugins/test_render.py": {
        "test_sandbox": {
            "name": "test_sandbox",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "float"
                ]
            }
        },
        "test_available": {
            "name": "test_available",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render": {
            "name": "test_render",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_no_template": {
            "name": "test_no_template",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_template_not_found": {
            "name": "test_template_not_found",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_strftime": {
            "name": "test_strftime",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "luoda-master/tests/plugins/test_static.py": {
        "test_run": {
            "name": "test_run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_available": {
            "name": "test_available",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "luoda-master/tests/plugins/test_tap.py": {
        "test_available": {
            "name": "test_available",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run": {
            "name": "test_run",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "Type",
                    "str"
                ]
            }
        }
    },
    "luoda-master/tests/plugins/test_write.py": {
        "test_available": {
            "name": "test_available",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_relative": {
            "name": "test_run_relative",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_run_absolute": {
            "name": "test_run_absolute",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "IO[str]",
                    "Callable"
                ]
            }
        },
        "test_run_bytes": {
            "name": "test_run_bytes",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "luoda-master/tests/plugins/__init__.py": {}
}
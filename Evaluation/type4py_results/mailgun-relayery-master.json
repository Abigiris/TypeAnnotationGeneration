{
    "mailgun-relayery-master/example.py": {
        "run": {
            "name": "run",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "release_dir": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "List[str]",
                    "str"
                ],
                "database_dir": [
                    "pathlib.Path",
                    "str",
                    "Type[pathlib.PurePath]"
                ],
                "domain": [
                    "str",
                    "dict"
                ],
                "api_key_path": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "recipients": [
                    "str",
                    "dict"
                ],
                "cc": [
                    "str",
                    "dict"
                ],
                "bcc": [
                    "str",
                    "dict"
                ],
                "quiet": [
                    "str",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "params_from_command_line": {
            "name": "params_from_command_line",
            "location": 138,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 178,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "Params.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mailgun-relayery-master/precommit.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "mailgun-relayery-master/release.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "mailgun-relayery-master/tests/authentication_test.py": {
        "run_test": {
            "name": "run_test",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "release_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "operation_dir": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "quiet": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 150,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "mailgun-relayery-master/tests/component_test.py": {
        "start_mock_server": {
            "name": "start_mock_server",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "port": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "quiet": [
                    "bool",
                    "str",
                    "List[dict]",
                    "int",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "run_test_control": {
            "name": "run_test_control",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "release_dir": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "operation_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "quiet": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "run_test_relay": {
            "name": "run_test_relay",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "release_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "operation_dir": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "quiet": [
                    "str",
                    "bytes"
                ]
            }
        },
        "run_test_relay_errors": {
            "name": "run_test_relay_errors",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "release_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "operation_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "quiet": [
                    "str"
                ]
            }
        },
        "find_free_port": {
            "name": "find_free_port",
            "location": 495,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {}
        },
        "params_from_command_line": {
            "name": "params_from_command_line",
            "location": 519,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 545,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "MockServerRequestHandler.log_message": {
            "name": "log_message",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "Optional[str]",
                    "Union[str, int]"
                ]
            }
        },
        "MockServerRequestHandler.do_POST": {
            "name": "do_POST",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Params.__init__": {
            "name": "__init__",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mailgun-relayery-master/tests/control.py": {
        "from_obj": {
            "name": "from_obj",
            "location": 15,
            "return": [
                "str",
                "Callable[[None, None], bool]",
                "dict"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "to_jsonable": {
            "name": "to_jsonable",
            "location": 74,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "new_entity": {
            "name": "new_entity",
            "location": 161,
            "return": [
                "bool",
                "int",
                "list",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {}
        },
        "entity_from_obj": {
            "name": "entity_from_obj",
            "location": 166,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "entity_to_jsonable": {
            "name": "entity_to_jsonable",
            "location": 191,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "entity": [
                    "Optional[str]",
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "new_channel": {
            "name": "new_channel",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "channel_from_obj": {
            "name": "channel_from_obj",
            "location": 258,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "channel_to_jsonable": {
            "name": "channel_to_jsonable",
            "location": 310,
            "return": [
                "str",
                "Iterable[T]",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "channel": [
                    "str",
                    "bool",
                    "dict"
                ],
                "path": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "new_channels_page": {
            "name": "new_channels_page",
            "location": 369,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "channels_page_from_obj": {
            "name": "channels_page_from_obj",
            "location": 374,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "channels_page_to_jsonable": {
            "name": "channels_page_to_jsonable",
            "location": 402,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "channels_page": [
                    "int",
                    "Hashable",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Entity.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Entity.to_jsonable": {
            "name": "to_jsonable",
            "location": 152,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "bool",
                    "str",
                    "int"
                ],
                "token": [
                    "str"
                ],
                "sender": [
                    "bool",
                    "str",
                    "int"
                ],
                "recipients": [
                    "bool",
                    "str",
                    "int"
                ],
                "domain": [
                    "bool",
                    "str",
                    "int"
                ],
                "min_period": [
                    "bool",
                    "str",
                    "int"
                ],
                "max_size": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "cc": [
                    "bool",
                    "str",
                    "int"
                ],
                "bcc": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Channel.to_jsonable": {
            "name": "to_jsonable",
            "location": 244,
            "return": [
                "str",
                "Union[int, None]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelsPage.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "bool",
                    "int",
                    "tuple",
                    "Optional[int]"
                ],
                "page_count": [
                    "int",
                    "Set[Tuple[str, ...]]",
                    "str",
                    "Mapping"
                ],
                "per_page": [
                    "bool",
                    "int",
                    "tuple",
                    "Optional[int]"
                ],
                "channels": [
                    "bool",
                    "int",
                    "tuple",
                    "Optional[int]"
                ]
            }
        },
        "ChannelsPage.to_jsonable": {
            "name": "to_jsonable",
            "location": 360,
            "return": [
                "MutableMapping[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteCaller.__init__": {
            "name": "__init__",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_prefix": [
                    "bool",
                    "Dict[str, Type[Any]]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]"
                ],
                "auth": [
                    "str",
                    "List[Dict]",
                    "Callable",
                    "float",
                    "bool"
                ]
            }
        },
        "RemoteCaller.put_channel": {
            "name": "put_channel",
            "location": 430,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "List[Tuple[bool, Any]]",
                    "set"
                ]
            }
        },
        "RemoteCaller.delete_channel": {
            "name": "delete_channel",
            "location": 454,
            "return": [
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "str",
                    "IO",
                    "bool"
                ]
            }
        },
        "RemoteCaller.list_channels": {
            "name": "list_channels",
            "location": 472,
            "return": [
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int",
                    "str",
                    "bytes"
                ],
                "per_page": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "mailgun-relayery-master/tests/database.py": {
        "initialize_environment": {
            "name": "initialize_environment",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "database_dir": [
                    "pathlib.Path",
                    "int",
                    "str",
                    "List[str]",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "mailgun-relayery-master/tests/precommit.py": {
        "check": {
            "name": "check",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "py_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "overwrite": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "mailgun-relayery-master/tests/proc.py": {
        "sleep_while_process": {
            "name": "sleep_while_process",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "proc": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "subprocess.Popen",
                    "Optional[int]"
                ],
                "seconds": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "subprocess.Popen",
                    "Optional[int]"
                ]
            }
        },
        "terminate_or_kill": {
            "name": "terminate_or_kill",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "proc": [
                    "subprocess.Popen",
                    "Optional[Dict]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "timeout": [
                    "Optional[int]",
                    "float",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "sleep_for": {
            "name": "sleep_for",
            "location": 63,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "float"
                ]
            }
        },
        "terminating.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proc": [
                    "int",
                    "float",
                    "str"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "terminating.__enter__": {
            "name": "__enter__",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "terminating.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "mailgun-relayery-master/tests/relay.py": {
        "from_obj": {
            "name": "from_obj",
            "location": 16,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "to_jsonable": {
            "name": "to_jsonable",
            "location": 69,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "new_message": {
            "name": "new_message",
            "location": 155,
            "return": [
                "str",
                "Mapping[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "message_from_obj": {
            "name": "message_from_obj",
            "location": 160,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "path": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "message_to_jsonable": {
            "name": "message_to_jsonable",
            "location": 187,
            "return": [
                "List[int]",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "path": [
                    "str",
                    "List[str]",
                    "list",
                    "Optional[str]",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "bool"
                ],
                "content": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "bytes"
                ],
                "html": [
                    "str",
                    "bool"
                ]
            }
        },
        "Message.to_jsonable": {
            "name": "to_jsonable",
            "location": 146,
            "return": [
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteCaller.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_prefix": [
                    "bool",
                    "Dict[str, Type[Any]]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]"
                ],
                "auth": [
                    "str",
                    "List[Dict]",
                    "Callable",
                    "float",
                    "bool"
                ]
            }
        },
        "RemoteCaller.put_message": {
            "name": "put_message",
            "location": 214,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x_descriptor": [
                    "str",
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "int"
                ],
                "x_token": [
                    "str",
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "int"
                ],
                "message": [
                    "Dict[str, object]",
                    "IO[str]",
                    "str"
                ]
            }
        }
    },
    "mailgun-relayery-master/tests/siger.py": {
        "Siger.initialize_signal_handlers": {
            "name": "initialize_signal_handlers",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Siger.signal_handler": {
            "name": "signal_handler",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "signalnum": [
                    "str"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Siger.done": {
            "name": "done",
            "location": 31,
            "return": [
                "str",
                "List[List[str]]",
                "int",
                "float"
            ],
            "arguments": {}
        }
    },
    "mailgun-relayery-master/tests/__init__.py": {}
}
{
    "mathematical-modelling-master/glacier/accumulation.py": {
        "simple_model": {
            "name": "simple_model",
            "location": 10,
            "return": [
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "start": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int"
                ],
                "stop": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int"
                ],
                "permanent_snow_line": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "slope": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "num": [
                    "float",
                    "int"
                ],
                "permanent_snow_rate": [
                    "float",
                    "int",
                    "Tuple[float, float, float]",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        }
    },
    "mathematical-modelling-master/glacier/flow_field.py": {
        "stationary_internal_flow_field": {
            "name": "stationary_internal_flow_field",
            "location": 10,
            "return": [
                "Callable[[KT], VT]",
                "str"
            ],
            "arguments": {
                "xs": [
                    "numpy.ndarray",
                    "Union[numpy.ndarray, numpy.void]",
                    "int",
                    "matplotlib.axes.Axes"
                ],
                "h_0": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "angle": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "production": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "plot_internal_flow_field": {
            "name": "plot_internal_flow_field",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "glacier": [
                    "numpy.array",
                    "int",
                    "set",
                    "float",
                    "bool"
                ],
                "zs": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "U": [
                    "int",
                    "str"
                ],
                "V": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "stationary_internal_flow_field.v": {
            "name": "v",
            "location": 50,
            "return": [
                "str",
                "List[int]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "float",
                    "bytes"
                ],
                "z": [
                    "int",
                    "float",
                    "bytes"
                ],
                "dx": [
                    "int",
                    "float",
                    "Collection[\"Issue\"]"
                ],
                "N": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "mathematical-modelling-master/glacier/main.py": {},
    "mathematical-modelling-master/glacier/physics.py": {
        "GlacierParameters.__post_init__": {
            "name": "__post_init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlacierParameters.generate_steady_state_height": {
            "name": "generate_steady_state_height",
            "location": 103,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlacierParameters.create_simple_accumulation_model": {
            "name": "create_simple_accumulation_model",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GlacierParameters.plot": {
            "name": "plot",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "show": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mathematical-modelling-master/glacier/plot.py": {
        "animate_glacier": {
            "name": "animate_glacier",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "solver": [
                    "bool",
                    "Solver",
                    "Iterable[str]",
                    "List[dict]",
                    "Mapping[str, Any]"
                ],
                "interval": [
                    "float",
                    "int",
                    "bool",
                    "List[int]",
                    "Mapping[Any, Any]",
                    "Optional[\"GraphLogger\"]"
                ],
                "plot_interval": [
                    "float",
                    "int",
                    "bool",
                    "List[int]",
                    "Mapping[Any, Any]",
                    "Optional[\"GraphLogger\"]"
                ],
                "show": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "float",
                    "str",
                    "List[\"Outcome\"]"
                ],
                "save_to": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Mapping",
                    "Optional[Callable[..., Any]]"
                ],
                "flow_field": [
                    "bool",
                    "Solver",
                    "Iterable[str]",
                    "List[dict]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "animate_glacier.init": {
            "name": "init",
            "location": 92,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {}
        },
        "animate_glacier.update": {
            "name": "update",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "step": []
            }
        }
    },
    "mathematical-modelling-master/glacier/solvers.py": {
        "Solver.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "glacier": [
                    "Tuple[type]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "dict",
                    "bool",
                    "[str]"
                ]
            }
        },
        "Solver.plot": {
            "name": "plot",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "time_steps": [
                    "int",
                    "Sequence[Any]",
                    "float",
                    "Tuple[int, int]"
                ],
                "show": [
                    "numpy.array",
                    "int",
                    "float"
                ]
            }
        },
        "Solver.save": {
            "name": "save",
            "location": 119,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.load": {
            "name": "load",
            "location": 127,
            "return": [
                "str",
                "Callable",
                "Callable[[KT, VT], bool]",
                "dict",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.get_filepath": {
            "name": "get_filepath",
            "location": 134,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Solver.on_disk": {
            "name": "on_disk",
            "location": 140,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.calculate_flow_fields": {
            "name": "calculate_flow_fields",
            "location": 143,
            "return": [
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "save_every": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "Optional[numpy.dtype]",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Solver.solve": {
            "name": "solve",
            "location": 172,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "t_end": [
                    "int",
                    "numpy.ndarray",
                    "Optional[T]",
                    "Sequence[T]",
                    "Tuple[int, int]",
                    "List[int]",
                    "list",
                    "List[str]"
                ],
                "delta_t": [
                    "int",
                    "bool"
                ],
                "method": [
                    "int",
                    "bool",
                    "dict",
                    "List[str]",
                    "float",
                    "Optional[bool]",
                    "Optional[Set[str]]"
                ],
                "save_every": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Solver.animate": {
            "name": "animate",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "show": [
                    "str",
                    "int"
                ],
                "plot_step": [
                    "str",
                    "int"
                ],
                "frame_delay": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "mathematical-modelling-master/glacier/__init__.py": {},
    "mathematical-modelling-master/tests/test_accumulation.py": {
        "test_permanent_snow_line": {
            "name": "test_permanent_snow_line",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mathematical-modelling-master/tests/test_plot.py": {
        "test_animate_glacier": {
            "name": "test_animate_glacier",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mathematical-modelling-master/tests/test_solvers.py": {
        "finite_volume_solver": {
            "name": "finite_volume_solver",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_plotting_initial_conditions": {
            "name": "test_plotting_initial_conditions",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_finite_volume_solver": {
            "name": "test_finite_volume_solver",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "finite_volume_solver": [
                    "float",
                    "bool"
                ]
            }
        },
        "test_solving_with_finite_volume_method": {
            "name": "test_solving_with_finite_volume_method",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "finite_volume_solver": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "test_glacier_parameters": {
            "name": "test_glacier_parameters",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_generate_steady_state_height_of_glacier": {
            "name": "test_generate_steady_state_height_of_glacier",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_calculation_of_steady_state": {
            "name": "test_calculation_of_steady_state",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "glacier": {
            "name": "glacier",
            "location": 100,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_generation_of_steady_state_height": {
            "name": "test_generation_of_steady_state_height",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "glacier": []
            }
        },
        "test_plotting_final_result_of_solver": {
            "name": "test_plotting_final_result_of_solver",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "glacier": []
            }
        }
    }
}
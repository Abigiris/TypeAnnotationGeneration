{
    "mathtools-main/setup.py": {},
    "mathtools-main/mathtools/combinatorics.py": {
        "recurrence": {
            "name": "recurrence",
            "location": 9,
            "return": [
                "typing.Iterator[_T]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "float"
                ],
                "func": [
                    "dict",
                    "int",
                    "float"
                ]
            }
        },
        "fibonacci_numbers": {
            "name": "fibonacci_numbers",
            "location": 31,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "binomial_coefficient": {
            "name": "binomial_coefficient",
            "location": 42,
            "return": [
                "Set[str]",
                "List[str]",
                "Set[int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "k": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "mathtools-main/mathtools/functional.py": {
        "_is_iterable": {
            "name": "_is_iterable",
            "location": 6,
            "return": [
                "IO",
                "Callable[[List], None]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 13,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "f": [],
                "g": []
            }
        },
        "tuple_params": {
            "name": "tuple_params",
            "location": 26,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "_map_with_args": {
            "name": "_map_with_args",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "f": [
                    "str",
                    "tuple",
                    "List[str]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "args": []
            }
        },
        "argmin": {
            "name": "argmin",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "T",
                    "IO",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "args": []
            }
        },
        "argmax": {
            "name": "argmax",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "T",
                    "IO",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "args": []
            }
        },
        "tuple_params.tupled_f": {
            "name": "tupled_f",
            "location": 28,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "mathtools-main/mathtools/iterable.py": {
        "take": {
            "name": "take",
            "location": 6,
            "return": [
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "List[str]",
                "str",
                "Tuple[int]",
                "list",
                "Union[List[float], List[int]]",
                "float"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "iterable": [
                    "int"
                ]
            }
        },
        "unzip": {
            "name": "unzip",
            "location": 10,
            "return": [
                "List[str]",
                "List[\"Variable\"]",
                "Set[str]"
            ],
            "arguments": {
                "tuples": [
                    "List[str]",
                    "[[]]",
                    "str",
                    "Tuple[FrozenSet[int]]",
                    "int"
                ]
            }
        }
    },
    "mathtools-main/mathtools/number_theory.py": {
        "assert_natural": {
            "name": "assert_natural",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Sequence[Optional[str]]",
                    "str"
                ]
            }
        },
        "divides": {
            "name": "divides",
            "location": 10,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "even": {
            "name": "even",
            "location": 14,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "odd": {
            "name": "odd",
            "location": 18,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "factor_pairs": {
            "name": "factor_pairs",
            "location": 22,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "factors": {
            "name": "factors",
            "location": 27,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "proper_divisors": {
            "name": "proper_divisors",
            "location": 31,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "is_prime": {
            "name": "is_prime",
            "location": 35,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "_prime_factorization": {
            "name": "_prime_factorization",
            "location": 39,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "prime_factorization": {
            "name": "prime_factorization",
            "location": 46,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "eratosthenes": {
            "name": "eratosthenes",
            "location": 60,
            "return": [
                "str",
                "dict",
                "list",
                "List[str]",
                "Union[int, None]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "lcm": {
            "name": "lcm",
            "location": 70,
            "return": [
                "str",
                "bytearray",
                "Union[bytes, bytearray]",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        }
    },
    "mathtools-main/mathtools/__init__.py": {
        "product": {
            "name": "product",
            "location": 16,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "xs": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "mathtools-main/tests/test_combinatorics.py": {
        "test_recurrence": {
            "name": "test_recurrence",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binomial_coefficient": {
            "name": "test_binomial_coefficient",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recurrence.plus1": {
            "name": "plus1",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_recurrence.concat": {
            "name": "concat",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ],
                "z": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "mathtools-main/tests/test_functional.py": {
        "f": {
            "name": "f",
            "location": 8,
            "return": [
                "int",
                "List[int]",
                "bool",
                "Union[str, bool, None]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str"
                ],
                "z": [
                    "int",
                    "str"
                ]
            }
        },
        "test_argmax": {
            "name": "test_argmax",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_argmin": {
            "name": "test_argmin",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mathtools-main/tests/test_iterable.py": {
        "test_take": {
            "name": "test_take",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unzip": {
            "name": "test_unzip",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mathtools-main/tests/test_mathtools.py": {
        "test_product": {
            "name": "test_product",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    },
    "mathtools-main/tests/test_number_theory.py": {
        "test_divides": {
            "name": "test_divides",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_even_odd": {
            "name": "test_even_odd",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_prime": {
            "name": "test_is_prime",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_factors": {
            "name": "test_factors",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prime_factorization": {
            "name": "test_prime_factorization",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lcm": {
            "name": "test_lcm",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mathtools-main/tests/__init__.py": {}
}
{
    "meditate-master/setup.py": {},
    "meditate-master/test_meditate.py": {
        "maybe_integers": {
            "name": "maybe_integers",
            "location": 10,
            "return": [
                "list",
                "type",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "test_parse_duration_input": {
            "name": "test_parse_duration_input",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "hours": [
                    "Optional[str]"
                ],
                "minutes": [
                    "Optional[str]"
                ],
                "seconds": [
                    "Optional[str]"
                ]
            }
        }
    },
    "meditate-master/meditate/__init__.py": {
        "validate_path_exists": {
            "name": "validate_path_exists",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "attribute": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "value": [
                    "pathlib.Path",
                    "str",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "convert_to_path": {
            "name": "convert_to_path",
            "location": 103,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "os.PathLike",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[str]",
                    "Union[List, str]",
                    "str"
                ]
            }
        },
        "convert_to_float": {
            "name": "convert_to_float",
            "location": 110,
            "return": [
                "Union[str, int, float]",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "number": [
                    "Union[str, int, float]",
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "parse_duration_input": {
            "name": "parse_duration_input",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "load_user_configuration_file": {
            "name": "load_user_configuration_file",
            "location": 249,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "first_not_none": {
            "name": "first_not_none",
            "location": 270,
            "return": [
                "str",
                "float",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 278,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Session.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
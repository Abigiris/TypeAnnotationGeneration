{
    "melinda-master/setup.py": {},
    "melinda-master/metaswitch_tinder/app.py": {},
    "melinda-master/metaswitch_tinder/app_config.py": {},
    "melinda-master/metaswitch_tinder/app_globals.py": {},
    "melinda-master/metaswitch_tinder/app_structure.py": {
        "if_logged_in_else": {
            "name": "if_logged_in_else",
            "location": 12,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "logged_in_target": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "other_target": [
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "module_href": {
            "name": "module_href",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "module": [
                    "str",
                    "bool"
                ]
            }
        },
        "href": {
            "name": "href",
            "location": 28,
            "return": [
                "int",
                "bool",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "ref": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "generate_structure": {
            "name": "generate_structure",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "if_logged_in_else.decide_later": {
            "name": "decide_later",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/config_model.py": {},
    "melinda-master/metaswitch_tinder/index.py": {
        "configure_logging": {
            "name": "configure_logging",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "display_page": {
            "name": "display_page",
            "location": 61,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "pathname": [
                    "str",
                    "bool"
                ]
            }
        },
        "serve_script": {
            "name": "serve_script",
            "location": 89,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/matches.py": {
        "handle_mentee_reject_match": {
            "name": "handle_mentee_reject_match",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "matched_user": [
                    "metaswitch_tinder.database.Request",
                    "metaswitch_tinder.database.User",
                    "dict"
                ],
                "request": [
                    "metaswitch_tinder.database.Request",
                    "metaswitch_tinder.database.User",
                    "dict"
                ]
            }
        },
        "handle_mentee_accept_match": {
            "name": "handle_mentee_accept_match",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "matched_user": [
                    "metaswitch_tinder.database.Request",
                    "metaswitch_tinder.database.User",
                    "dict"
                ],
                "request": [
                    "metaswitch_tinder.database.Request",
                    "metaswitch_tinder.database.User",
                    "dict"
                ]
            }
        },
        "handle_mentor_reject_match": {
            "name": "handle_mentor_reject_match",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "matched_user": [
                    "metaswitch_tinder.database.User",
                    "str",
                    "bool"
                ],
                "request": [
                    "metaswitch_tinder.database.Request",
                    "Dict[str, Any]",
                    "int",
                    "Collection[Any]",
                    "bool"
                ]
            }
        },
        "handle_mentor_accept_match": {
            "name": "handle_mentor_accept_match",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "matched_user": [
                    "str",
                    "FrozenSet[bytes]",
                    "int",
                    "dict",
                    "lms.lmsdb.models.User",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "request": [
                    "metaswitch_tinder.database.Request",
                    "metaswitch_tinder.database.User",
                    "dict",
                    "Request"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/review_app_database.py": {
        "populate": {
            "name": "populate",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "clear": {
            "name": "clear",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/tinder_email.py": {
        "send_email": {
            "name": "send_email",
            "location": 16,
            "return": [
                "Iterator[object]",
                "Union[tuple, list]",
                "bool",
                "DefaultDict"
            ],
            "arguments": {
                "recipients": [
                    "str",
                    "Mapping[str, str]",
                    "List[str]"
                ],
                "email_text": [
                    "str"
                ],
                "subject": [
                    "str",
                    "Exception",
                    "Optional[str]"
                ]
            }
        },
        "send_match_email": {
            "name": "send_match_email",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "recipients": [
                    "str",
                    "List[str]",
                    "bool",
                    "Tuple[str, int]"
                ],
                "email_text": [
                    "str",
                    "List[str]",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "send_report_email": {
            "name": "send_report_email",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "email_text": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/__init__.py": {},
    "melinda-master/metaswitch_tinder/components/about.py": {
        "about_div": {
            "name": "about_div",
            "location": 17,
            "return": [
                "dict",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "about_button": {
            "name": "about_button",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "about_text": {
            "name": "about_text",
            "location": 27,
            "return": [
                "int",
                "dict",
                "Optional[str]",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "handle_about_button_click": {
            "name": "handle_about_button_click",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/components/auth.py": {
        "authenticated_login_is_enabled": {
            "name": "authenticated_login_is_enabled",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "handle_login": {
            "name": "handle_login",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "username": [
                    "str",
                    "Exception",
                    "logging.Logger",
                    "dict",
                    "Union[Callable, str]",
                    "Type[abilian.core.models.Model]"
                ],
                "email": [
                    "str",
                    "Exception"
                ]
            }
        },
        "authorized_by_google": {
            "name": "authorized_by_google",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 106,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "login_with_google": {
            "name": "login_with_google",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "handle_logout": {
            "name": "handle_logout",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "layout": {
            "name": "layout",
            "location": 127,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "get_access_token": {
            "name": "get_access_token",
            "location": 101,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "Optional[str]",
                "bool",
                "Dict[str, Any]",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/components/debug_login.py": {
        "layout": {
            "name": "layout",
            "location": 23,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "submit_debug_login": {
            "name": "submit_debug_login",
            "location": 59,
            "return": [
                "list",
                "Optional[str]",
                "int",
                "Hashable",
                "str",
                "Optional[Sequence[Any]]",
                "Iterable[T]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "logging.Logger",
                    "int"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/components/grid.py": {
        "create_equal_grid": {
            "name": "create_equal_grid",
            "location": 4,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "elements": [
                    "List[str]",
                    "list",
                    "List[T]",
                    "List[Union[int, float]]"
                ]
            }
        },
        "create_equal_row": {
            "name": "create_equal_row",
            "location": 36,
            "return": [
                "str",
                "Iterable[T]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "elements": [
                    "str",
                    "Sized"
                ]
            }
        },
        "create_magic_three_grid": {
            "name": "create_magic_three_grid",
            "location": 40,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "elements": [
                    "List[str]",
                    "list",
                    "List[T]",
                    "List[Union[int, float]]"
                ]
            }
        },
        "create_magic_three_row": {
            "name": "create_magic_three_row",
            "location": 79,
            "return": [
                "Dict[str, Any]",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "elements": [
                    "str",
                    "Sized",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/components/inputs.py": {
        "tags_dropdown_with_add_new_entry_box": {
            "name": "tags_dropdown_with_add_new_entry_box",
            "location": 22,
            "return": [
                "int",
                "salon.models.Stylist",
                "str",
                "app.domains.Usergroup",
                "list",
                "Callable[[], Iterable[Any]]"
            ],
            "arguments": {
                "_id": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "init_selection": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "handle_new_tag_creation": {
            "name": "handle_new_tag_creation",
            "location": 44,
            "return": [
                "str",
                "List[str]",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "new_tag_str": [
                    "str",
                    "int"
                ]
            }
        },
        "handle_new_tag_creation_input_field": {
            "name": "handle_new_tag_creation_input_field",
            "location": 78,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "List[str]",
                "Type[T]"
            ],
            "arguments": {
                "new_tag_str": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/components/session.py": {
        "current_user_email": {
            "name": "current_user_email",
            "location": 24,
            "return": [
                "amundsen_application.models.user.User",
                "Dict[str, str]",
                "bool",
                "arxiv.users.domain.User"
            ],
            "arguments": {}
        },
        "get_current_user": {
            "name": "get_current_user",
            "location": 31,
            "return": [
                "tracim.models.auth.User",
                "Iterable[str]",
                "metaswitch_tinder.database.models.User",
                "set"
            ],
            "arguments": {}
        },
        "set_current_user_email": {
            "name": "set_current_user_email",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "email": [
                    "str",
                    "medtagger.database.models.User"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "email": [
                    "str",
                    "int",
                    "FrozenSet[str]",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "is_logged_in": {
            "name": "is_logged_in",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "set_post_login_redirect": {
            "name": "set_post_login_redirect",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "href": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "store_signup_information": {
            "name": "store_signup_information",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "biography": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Dict[str, str]"
                ],
                "request_categories": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Dict[str, str]"
                ],
                "request_details": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Dict[str, str]"
                ],
                "mentor_categories": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Dict[str, str]"
                ],
                "mentor_details": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "get_signup_information": {
            "name": "get_signup_information",
            "location": 85,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "clear_signup_information": {
            "name": "clear_signup_information",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wait_for_login": {
            "name": "wait_for_login",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "on_mentee_tab": {
            "name": "on_mentee_tab",
            "location": 101,
            "return": [
                "bool",
                "tuple",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "set_on_mentee_tab": {
            "name": "set_on_mentee_tab",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "status": [
                    "bool",
                    "str",
                    "dict",
                    "List[str]",
                    "raiden.utils.Optional[str]"
                ]
            }
        },
        "get_last_tab_on": {
            "name": "get_last_tab_on",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "page": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "set_last_tab_on": {
            "name": "set_last_tab_on",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "page": [
                    "str",
                    "float"
                ],
                "last_tab": [
                    "str",
                    "float"
                ]
            }
        },
        "set_current_request": {
            "name": "set_current_request",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "request_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_current_request": {
            "name": "get_current_request",
            "location": 125,
            "return": [
                "dict",
                "int",
                "Exception",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/components/tabs.py": {
        "generate_tabs": {
            "name": "generate_tabs",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "tabs": [
                    "Optional[str]",
                    "str",
                    "Dict[Optional[str], str]",
                    "Optional[Callable[[dict], None]]"
                ],
                "default_tab": [
                    "str",
                    "dash_html_components.Div",
                    "int",
                    "dict"
                ],
                "tabs_id": [
                    "str",
                    "dash_html_components.Div",
                    "int",
                    "dict"
                ],
                "display_id": [
                    "str",
                    "dash_html_components.Div",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/components/utils.py": {
        "wait_for": {
            "name": "wait_for",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "condition": [
                    "bool",
                    "int",
                    "Sequence[str]",
                    "float"
                ],
                "timeout": [
                    "int",
                    "float",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/components/widgets.py": {
        "logout_button": {
            "name": "logout_button",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "set_page_content": {
            "name": "set_page_content",
            "location": 21,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "set_hidden_information": {
            "name": "set_hidden_information",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "list"
                ],
                "value": [
                    "str",
                    "bytes",
                    "list"
                ]
            }
        },
        "get_hidden_information": {
            "name": "get_hidden_information",
            "location": 30,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[float]",
                "Dict[int, str]",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Type[RuntimeError]",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "get_num_button_clicks": {
            "name": "get_num_button_clicks",
            "location": 39,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "button_id": [
                    "str",
                    "int"
                ]
            }
        },
        "choose_page": {
            "name": "choose_page",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "btn_click_list": [
                    "List[Tuple[int, str]]",
                    "Callable[[], Any]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/components/__init__.py": {},
    "melinda-master/metaswitch_tinder/database/manage.py": {
        "purge_table": {
            "name": "purge_table",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "table": [
                    "Callable[[], T]",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "delete_table": {
            "name": "delete_table",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "table": [
                    "str",
                    "Sequence[object]",
                    "deeplearning.deepsmith.db.session_t"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/database/models.py": {
        "list_all_requests": {
            "name": "list_all_requests",
            "location": 482,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "get_request_by_id": {
            "name": "get_request_by_id",
            "location": 486,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "request_id": [
                    "int"
                ]
            }
        },
        "get_requests_by_ids": {
            "name": "get_requests_by_ids",
            "location": 490,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict",
                "Optional[Mapping[str, Any]]",
                "bool",
                "str"
            ],
            "arguments": {
                "request_ids": [
                    "int",
                    "bool",
                    "Dict[str, AsyncGenerator]",
                    "Optional[int]"
                ]
            }
        },
        "list_all_users": {
            "name": "list_all_users",
            "location": 496,
            "return": [
                "\"Task\"",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "get_user": {
            "name": "get_user",
            "location": 500,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "user_email": [
                    "str"
                ]
            }
        },
        "get_users": {
            "name": "get_users",
            "location": 504,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "emails": [
                    "str",
                    "float"
                ]
            }
        },
        "list_all_tags": {
            "name": "list_all_tags",
            "location": 510,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "handle_signup_submit": {
            "name": "handle_signup_submit",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "username": [
                    "str",
                    "int"
                ],
                "email": [
                    "str",
                    "int"
                ],
                "biography": [
                    "str",
                    "int"
                ],
                "categories": [
                    "str",
                    "rotkehlchen.db.utils.BlockchainAccounts"
                ],
                "details": [
                    "str",
                    "rotkehlchen.db.utils.BlockchainAccounts"
                ]
            }
        },
        "user_already_exists": {
            "name": "user_already_exists",
            "location": 526,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "user_email": [
                    "str"
                ]
            }
        },
        "create_request": {
            "name": "create_request",
            "location": 536,
            "return": [
                ""
            ],
            "arguments": {
                "user_email": [
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "bool"
                ],
                "categories": [
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "bool"
                ],
                "details": [
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Tag.name": {
            "name": "name",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, List[Any]]",
                    "Optional[str]",
                    "Optional[BaseException]"
                ]
            }
        },
        "Tag.add": {
            "name": "add",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.commit": {
            "name": "commit",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.normalise_tag": {
            "name": "normalise_tag",
            "location": 42,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maker_email_or_user": [
                    "str",
                    "Optional[bool]",
                    "Callable[[str], str]"
                ],
                "tags": [
                    "dict",
                    "Iterable[str]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "list"
                ],
                "comment": [
                    "int",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[str]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "Request.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "str",
                "dict",
                "Callable",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.add": {
            "name": "add",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.commit": {
            "name": "commit",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.delete": {
            "name": "delete",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.handle_user_deletion": {
            "name": "handle_user_deletion",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Callable",
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Exception"
                ]
            }
        },
        "Request.maker": {
            "name": "maker",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "bool",
                    "T"
                ]
            }
        },
        "Request.get_maker": {
            "name": "get_maker",
            "location": 161,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.accepted_mentors": {
            "name": "accepted_mentors",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Request.get_accepted_mentors": {
            "name": "get_accepted_mentors",
            "location": 185,
            "return": [
                "Optional[str]",
                "str",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.possible_mentors": {
            "name": "possible_mentors",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Request.get_possible_mentors": {
            "name": "get_possible_mentors",
            "location": 204,
            "return": [
                "Optional[str]",
                "str",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.remove_possible_mentor": {
            "name": "remove_possible_mentor",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mentor": [
                    "dict",
                    "Mapping[str, Any]",
                    "bytes"
                ]
            }
        },
        "Request.rejected_mentors": {
            "name": "rejected_mentors",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Request.get_rejected_mentors": {
            "name": "get_rejected_mentors",
            "location": 235,
            "return": [
                "Optional[str]",
                "str",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.all_involved_users": {
            "name": "all_involved_users",
            "location": 239,
            "return": [
                "int",
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.get_all_involved_users": {
            "name": "get_all_involved_users",
            "location": 248,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.populate_initial_possible_mentors": {
            "name": "populate_initial_possible_mentors",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.handle_mentee_accept_mentor": {
            "name": "handle_mentee_accept_mentor",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mentor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Request.handle_mentee_reject_mentor": {
            "name": "handle_mentee_reject_mentor",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mentor": [
                    "str",
                    "int"
                ]
            }
        },
        "Request.handle_mentor_accept_mentee": {
            "name": "handle_mentor_accept_mentee",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mentor": [
                    "str"
                ]
            }
        },
        "Request.handle_mentor_reject_mentee": {
            "name": "handle_mentor_reject_mentee",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mentor": [
                    "str",
                    "int"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "email": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "bio": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "tags": [
                    "Optional[str]",
                    "Iterable[str]",
                    "Sequence[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "mentoring_details": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 341,
            "return": [
                "bool",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.add": {
            "name": "add",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.commit": {
            "name": "commit",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.delete": {
            "name": "delete",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.handle_request_deletion": {
            "name": "handle_request_deletion",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict"
                ]
            }
        },
        "User.tags": {
            "name": "tags",
            "location": 373,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.set_tags": {
            "name": "set_tags",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "list",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "User.requests": {
            "name": "requests",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int"
                ]
            }
        },
        "User.get_requests": {
            "name": "get_requests",
            "location": 399,
            "return": [
                "Optional[str]",
                "Dict[str, Union[str, Set]]",
                "Dict[str, Type[Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.remove_request": {
            "name": "remove_request",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict"
                ]
            }
        },
        "User.remove_match": {
            "name": "remove_match",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "match": [
                    "type",
                    "List[str]",
                    "Type[T]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "User.get_requests_as_mentee": {
            "name": "get_requests_as_mentee",
            "location": 414,
            "return": [
                "Set[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_requests_as_mentor": {
            "name": "get_requests_as_mentor",
            "location": 418,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.matches": {
            "name": "matches",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Tuple[Union[str, int]]",
                    "list"
                ]
            }
        },
        "User.get_matches": {
            "name": "get_matches",
            "location": 442,
            "return": [
                "str",
                "List[str]",
                "Optional[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.populate_all_possible_requests_to_mentor": {
            "name": "populate_all_possible_requests_to_mentor",
            "location": 445,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.could_mentor_for_request": {
            "name": "could_mentor_for_request",
            "location": 474,
            "return": [
                "List[str]",
                "List[Tuple[str, Any]]",
                "Sequence[str]",
                "Generator[str, None, None]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/database/__init__.py": {},
    "melinda-master/metaswitch_tinder/pages/easter.py": {
        "layout": {
            "name": "layout",
            "location": 8,
            "return": [
                "str",
                "bytearray",
                "bool"
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/pages/home.py": {
        "layout": {
            "name": "layout",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "submit_signup_information": {
            "name": "submit_signup_information",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/pages/mentee_landing_page.py": {
        "layout": {
            "name": "layout",
            "location": 18,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "submit_mentee_information": {
            "name": "submit_mentee_information",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "submit_signup_information": {
            "name": "submit_signup_information",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/pages/mentee_request.py": {
        "layout": {
            "name": "layout",
            "location": 26,
            "return": [
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "submit_mentee_information": {
            "name": "submit_mentee_information",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "categories": [
                    "bool",
                    "Union[object, type]",
                    "str",
                    "MutableMapping[str, Any]"
                ],
                "details": [
                    "bool",
                    "Union[object, type]",
                    "str",
                    "MutableMapping[str, Any]"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/pages/report.py": {
        "layout": {
            "name": "layout",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "report_email": {
            "name": "report_email",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "report_text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "report_button": {
            "name": "report_button",
            "location": 68,
            "return": [
                "int",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/pages/signin_or_signup.py": {
        "layout": {
            "name": "layout",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "submit_signup_information": {
            "name": "submit_signup_information",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/pages/signup.py": {
        "layout": {
            "name": "layout",
            "location": 20,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "submit_signup_information": {
            "name": "submit_signup_information",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "biography": [
                    "str",
                    "Pattern",
                    "float"
                ],
                "categories": [
                    "str",
                    "Pattern",
                    "float"
                ],
                "details": [
                    "str",
                    "Pattern",
                    "float"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/pages/user_menu.py": {
        "layout": {
            "name": "layout",
            "location": 19,
            "return": [
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {}
        },
        "display_tab": {
            "name": "display_tab",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "tab_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/pages/__init__.py": {},
    "melinda-master/metaswitch_tinder/tabs/completed_matches.py": {
        "children_no_matches": {
            "name": "children_no_matches",
            "location": 13,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {}
        },
        "children_matches": {
            "name": "children_matches",
            "location": 19,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "completed_matches": [
                    "str",
                    "Callable[[Any], T]",
                    "int",
                    "bytes",
                    "Iterator[Tuple[str, str]]",
                    "bool"
                ]
            }
        },
        "layout": {
            "name": "layout",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/tabs/matches.py": {
        "children_no_matches": {
            "name": "children_no_matches",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "children_for_match": {
            "name": "children_for_match",
            "location": 48,
            "return": [],
            "arguments": {
                "match": [],
                "skipped_requests": []
            }
        },
        "get_matches_children": {
            "name": "get_matches_children",
            "location": 115,
            "return": [],
            "arguments": {
                "skipped_requests": []
            }
        },
        "get_matches_for_mentor": {
            "name": "get_matches_for_mentor",
            "location": 127,
            "return": [],
            "arguments": {
                "mentor": [],
                "skipped_matches": []
            }
        },
        "get_matches_for_mentee": {
            "name": "get_matches_for_mentee",
            "location": 147,
            "return": [],
            "arguments": {
                "mentee": [],
                "skipped_matches": []
            }
        },
        "get_matches_for_current_user_role": {
            "name": "get_matches_for_current_user_role",
            "location": 170,
            "return": [],
            "arguments": {
                "skipped_matches": []
            }
        },
        "layout": {
            "name": "layout",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "handle_submit": {
            "name": "handle_submit",
            "location": 191,
            "return": [],
            "arguments": {
                "match_request_id": [],
                "other_user_email": [],
                "accepted": []
            }
        },
        "handle_skipped": {
            "name": "handle_skipped",
            "location": 213,
            "return": [],
            "arguments": {
                "user_email": [],
                "request_id": [],
                "skipped_matches": []
            }
        },
        "submit_mentee_information": {
            "name": "submit_mentee_information",
            "location": 242,
            "return": [],
            "arguments": {
                "other_user_email": [],
                "n_accept_clicked": [],
                "n_reject_clicked": [],
                "n_skip_clicked": [],
                "skipped_requests": [],
                "match_request_id": []
            }
        }
    },
    "melinda-master/metaswitch_tinder/tabs/mentee.py": {
        "layout": {
            "name": "layout",
            "location": 18,
            "return": [
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {}
        },
        "display_tab": {
            "name": "display_tab",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "tab_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/tabs/mentor.py": {
        "layout": {
            "name": "layout",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "display_tab": {
            "name": "display_tab",
            "location": 33,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "tab_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/tabs/mentor_skills.py": {
        "layout": {
            "name": "layout",
            "location": 20,
            "return": [
                "Iterable[str]",
                "str",
                "dict",
                "IO[str]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "set_mentor_tags": {
            "name": "set_mentor_tags",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "tags": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/tabs/open_requests.py": {
        "children_no_requests": {
            "name": "children_no_requests",
            "location": 36,
            "return": [
                "salon.models.Stylist",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "children_requests": {
            "name": "children_requests",
            "location": 44,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "requests": [
                    "dict",
                    "starlette.requests.Request",
                    "base.Request",
                    "aiohttp.web.Request",
                    "fastapi.Request"
                ]
            }
        },
        "layout": {
            "name": "layout",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "edit_request_layout": {
            "name": "edit_request_layout",
            "location": 111,
            "return": [
                "dict",
                "Iterable[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "request": [
                    "metaswitch_tinder.database.models.Request",
                    "dict",
                    "faaspact_verifier.definitions.Request",
                    "starlette.requests.Request",
                    "Callable"
                ]
            }
        },
        "get_request_id_by_index": {
            "name": "get_request_id_by_index",
            "location": 154,
            "return": [
                "Dict[str, Any]",
                "dict",
                "[dict]",
                "asgard.clients.chronos.models.job.ChronosJob",
                "app.models.GameMember",
                "app.models.course.Course"
            ],
            "arguments": {
                "index": [
                    "int",
                    "str",
                    "pathfinding_service.database.PFSDatabase"
                ]
            }
        },
        "handle_edit_button_press": {
            "name": "handle_edit_button_press",
            "location": 165,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "handle_save_and_delete": {
            "name": "handle_save_and_delete",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "request_id": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "tags": [
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "details": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "n_save_clicked": [
                    "str",
                    "bool",
                    "int",
                    "Final",
                    "logging.Logger"
                ],
                "n_delete_clicked": [
                    "str",
                    "bool",
                    "int",
                    "Final",
                    "logging.Logger"
                ]
            }
        }
    },
    "melinda-master/metaswitch_tinder/tabs/settings.py": {
        "layout": {
            "name": "layout",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "set_mentor_tags": {
            "name": "set_mentor_tags",
            "location": 88,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "bio": [
                    "str",
                    "logging.Logger",
                    "float"
                ]
            }
        },
        "delete_account": {
            "name": "delete_account",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "melinda-master/metaswitch_tinder/tabs/__init__.py": {},
    "melinda-master/tests/test_matches.py": {
        "TestModels.setup_method": {
            "name": "setup_method",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestModels.teardown_method": {
            "name": "teardown_method",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestModels.create_user": {
            "name": "create_user",
            "location": 18,
            "return": [
                "set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        },
        "TestModels.create_request": {
            "name": "create_request",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Sequence[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "metaswitch_tinder.database.User",
                    "List[str]"
                ],
                "tags": [
                    "str",
                    "metaswitch_tinder.database.User",
                    "List[str]"
                ]
            }
        },
        "TestModels.create_matching_pair": {
            "name": "create_matching_pair",
            "location": 28,
            "return": [
                "bool",
                "models.User",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_match_mentee_accept_mentor_accept": {
            "name": "test_match_mentee_accept_mentor_accept",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_match_mentee_accept_mentor_reject": {
            "name": "test_match_mentee_accept_mentor_reject",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_match_mentee_reject": {
            "name": "test_match_mentee_reject",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "melinda-master/tests/test_models.py": {
        "TestModels.setup_method": {
            "name": "setup_method",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestModels.teardown_method": {
            "name": "teardown_method",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestModels.create_user": {
            "name": "create_user",
            "location": 14,
            "return": [
                "set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        },
        "TestModels.create_request": {
            "name": "create_request",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Sequence[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "metaswitch_tinder.database.User",
                    "List[str]"
                ],
                "tags": [
                    "str",
                    "metaswitch_tinder.database.User",
                    "List[str]"
                ]
            }
        },
        "TestModels.test_basic_user_creation": {
            "name": "test_basic_user_creation",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_user_tags": {
            "name": "test_user_tags",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_request_creation": {
            "name": "test_request_creation",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_populate_initial_possible_mentors": {
            "name": "test_populate_initial_possible_mentors",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_populate_all_possible_requests_to_mentor": {
            "name": "test_populate_all_possible_requests_to_mentor",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_match_requests_when_mentor_updates_tags": {
            "name": "test_match_requests_when_mentor_updates_tags",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_get_requests_as_mentee": {
            "name": "test_get_requests_as_mentee",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_get_requests_as_mentor": {
            "name": "test_get_requests_as_mentor",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModels.test_delete_user": {
            "name": "test_delete_user",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "melinda-master/tests/__init__.py": {}
}
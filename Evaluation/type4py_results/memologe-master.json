{
    "memologe-master/Memologe_Test.py": {
        "start_bot": {
            "name": "start_bot",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "memologe-master/app/config.py": {},
    "memologe-master/app/main.py": {},
    "memologe-master/app/objects.py": {
        "DataBase.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataBase.reload": {
            "name": "reload",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataBase.check_mysql_connection": {
            "name": "check_mysql_connection",
            "location": 43,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "memologe-master/app/db_models/__init__.py": {
        "User.create": {
            "name": "create",
            "location": 18,
            "return": [],
            "arguments": {
                "platform": [
                    "bool",
                    "float"
                ],
                "username": [
                    "bool",
                    "float"
                ]
            }
        },
        "User.new_post": {
            "name": "new_post",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Memes.create": {
            "name": "create",
            "location": 40,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "link": [
                    "Optional[str]",
                    "str"
                ],
                "path": [
                    "Optional[str]",
                    "str"
                ],
                "stealer": [
                    "Optional[str]",
                    "str"
                ],
                "post_time": [
                    "Optional[str]",
                    "str",
                    "Optional[datetime.date]",
                    "datetime.datetime"
                ]
            }
        },
        "Tags.create": {
            "name": "create",
            "location": 59,
            "return": [
                "str",
                "Set[str]",
                "Type[T]",
                "List[str]"
            ],
            "arguments": {
                "a_tag": [
                    "Optional[Tuple[bytes, Any]]",
                    "dict"
                ]
            }
        },
        "Association.create": {
            "name": "create",
            "location": 76,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "meme_id": [
                    "str",
                    "Optional[str]"
                ],
                "tag_id": [
                    "str",
                    "Optional[str]"
                ],
                "user": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Ratings.create": {
            "name": "create",
            "location": 93,
            "return": [
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "user": [
                    "dict"
                ],
                "meme": [
                    "dict"
                ],
                "vote": [
                    "dict"
                ]
            }
        }
    },
    "memologe-master/app/func/essentials.py": {
        "prep4post": {
            "name": "prep4post",
            "location": 16,
            "return": [
                "Optional[Type]",
                "dict",
                "float",
                "str"
            ],
            "arguments": {
                "meme": [
                    "db_models.Memes",
                    "app.models.User"
                ]
            }
        },
        "query_tags": {
            "name": "query_tags",
            "location": 27,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "meme_id": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "str"
                ]
            }
        },
        "parse_amount": {
            "name": "parse_amount",
            "location": 36,
            "return": [
                "float",
                "bool",
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "random_meme": {
            "name": "random_meme",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "yield_random_meme": {
            "name": "yield_random_meme",
            "location": 61,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "count": [
                    "int",
                    "bool",
                    "str",
                    "starlette.requests.Request",
                    "Tuple[str]"
                ]
            }
        },
        "add_meme": {
            "name": "add_meme",
            "location": 67,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "link": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "tags": [
                    "str",
                    "List[str]",
                    "list",
                    "bool"
                ],
                "author": [
                    "str",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "platform": [
                    "str",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "posted_at": [
                    "datetime.datetime",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "create_tag": {
            "name": "create_tag",
            "location": 91,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "daylighdb.models.User",
                    "Dict[str, List[bytes]]",
                    "Iterable[str]"
                ]
            }
        },
        "create_association": {
            "name": "create_association",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "tag_id": [
                    "int",
                    "Optional[str]",
                    "Optional[datetime.time]",
                    "uuid.UUID"
                ],
                "meme_id": [
                    "int",
                    "Optional[str]",
                    "Optional[datetime.time]",
                    "uuid.UUID"
                ],
                "user": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 110,
            "return": [
                "str"
            ],
            "arguments": {
                "link": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "check_existens": {
            "name": "check_existens",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "link": [
                    "str",
                    "Optional[str]",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "check_for_link": {
            "name": "check_for_link",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "link": [
                    "\"Pipeline\"",
                    "bool",
                    "dict",
                    "int",
                    "str"
                ]
            }
        },
        "find_link": {
            "name": "find_link",
            "location": 145,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "post": [
                    "str",
                    "int"
                ]
            }
        },
        "check_auther_registerd": {
            "name": "check_auther_registerd",
            "location": 154,
            "return": [
                "bool",
                "sqlalchemy.orm.query.Query",
                "List[str]"
            ],
            "arguments": {
                "author_name": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "platform": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "categorise_meme": {
            "name": "categorise_meme",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "meme_id": [
                    "int",
                    "bytes",
                    "str"
                ],
                "tags": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Set[str]"
                ],
                "author": [
                    "int",
                    "str",
                    "Sequence[Sequence[int]]",
                    "Optional[str]"
                ],
                "platform": [
                    "int",
                    "str",
                    "Sequence[Sequence[int]]",
                    "Optional[str]"
                ]
            }
        },
        "list_tags": {
            "name": "list_tags",
            "location": 182,
            "return": [
                "str",
                "Dict[str, 'LabwareDefinition']"
            ],
            "arguments": {}
        },
        "list_users": {
            "name": "list_users",
            "location": 189,
            "return": [
                "bool",
                "Union[bytes, str]",
                "object",
                "str"
            ],
            "arguments": {}
        },
        "history": {
            "name": "history",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "meme_id": [
                    "int",
                    "dict",
                    "Set[Tuple[int, int]]",
                    "list",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "merge_time_line": {
            "name": "merge_time_line",
            "location": 240,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "time_line": [
                    "List[Union[Any, Any]]",
                    "str",
                    "Pattern[str]",
                    "Sequence[str]",
                    "list"
                ]
            }
        },
        "rate_to_text": {
            "name": "rate_to_text",
            "location": 271,
            "return": [
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "vote": [
                    "int",
                    "bool",
                    "Callable[[], Awaitable[Mapping]]",
                    "Callable[[Mapping], Awaitable]",
                    "Mapping"
                ]
            }
        },
        "sort_by_data": {
            "name": "sort_by_data",
            "location": 280,
            "return": [
                "Dict[str, List[int]]",
                "Optional[float]",
                "dict",
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "bytes",
                "float"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "bool"
                ],
                "rating": [
                    "str",
                    "int",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "rate_meme": {
            "name": "rate_meme",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "meme_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "rate": [
                    "int",
                    "str",
                    "sqlalchemy.orm.Session",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "user": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[int]"
                ],
                "platform": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "sum_ratings": {
            "name": "sum_ratings",
            "location": 301,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "meme_id": [
                    "int"
                ]
            }
        },
        "id_to_user": {
            "name": "id_to_user",
            "location": 308,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "id_to_meme": {
            "name": "id_to_meme",
            "location": 312,
            "return": [
                "bool",
                "Dict[str, bool]",
                "int",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "meme_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "memologe-master/app/func/search.py": {
        "strict_search": {
            "name": "strict_search",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "tags": [
                    "list",
                    "int",
                    "Iterable[str]",
                    "str",
                    "bool"
                ],
                "amount": [
                    "list",
                    "int",
                    "Iterable[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "soft_search": {
            "name": "soft_search",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Tuple[float, float]"
            ],
            "arguments": {
                "tags": [
                    "list",
                    "int",
                    "Iterable[str]",
                    "str",
                    "bool"
                ],
                "amount": [
                    "int",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "yield_search": {
            "name": "yield_search",
            "location": 35,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "List[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "count": [
                    "int",
                    "List[str]",
                    "list",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "memologe-master/app/func/static.py": {
        "show_help": {
            "name": "show_help",
            "location": 9,
            "return": [
                "dict",
                "int",
                "str",
                "Union[str, dict]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {}
        },
        "translate": {
            "name": "translate",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "language": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "str"
                ]
            }
        }
    },
    "memologe-master/app/func/__init__.py": {},
    "memologe-master/app/handler/Discord.py": {
        "DiscordAPI.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "memologe-master/app/handler/Telegram.py": {
        "parse_count": {
            "name": "parse_count",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "position": [
                    "List[float]",
                    "Dict[str, Any]",
                    "Optional[List[Any]]",
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "default": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "post_meme": {
            "name": "post_meme",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot"
                ],
                "update": [
                    "telegram.Update",
                    "dict"
                ],
                "args": []
            }
        },
        "random": {
            "name": "random",
            "location": 64,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.Update",
                    "dict"
                ],
                "args": []
            }
        },
        "userhelp": {
            "name": "userhelp",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.Update",
                    "Dict[str, Any]",
                    "memoryview",
                    "dict",
                    "telegram.update.Update"
                ],
                "args": []
            }
        },
        "_size": {
            "name": "_size",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "str",
                    "List[str]",
                    "bool",
                    "list",
                    "bytes"
                ],
                "update": [
                    "Optional[str]",
                    "bool",
                    "telegram.Bot",
                    "int"
                ],
                "args": []
            }
        },
        "search": {
            "name": "search",
            "location": 91,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "Iterator[object]"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "bool",
                    "str",
                    "telegram.boBot"
                ],
                "update": [
                    "dict",
                    "telegram.Update",
                    "telegram.exUpdater"
                ],
                "args": []
            }
        },
        "_tags": {
            "name": "_tags",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "str",
                    "telegram.boBot",
                    "int"
                ],
                "update": [
                    "telegram.Update",
                    "dict",
                    "telegram.exUpdater"
                ],
                "args": []
            }
        },
        "posters": {
            "name": "posters",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.Update",
                    "dict"
                ],
                "args": []
            }
        },
        "idtomeme": {
            "name": "idtomeme",
            "location": 134,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.Update",
                    "dict"
                ],
                "args": []
            }
        },
        "category": {
            "name": "category",
            "location": 149,
            "return": [],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.Update",
                    "dict"
                ],
                "args": []
            }
        },
        "_info": {
            "name": "_info",
            "location": 175,
            "return": [
                "Callable"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "telegram.Update",
                    "int",
                    "list",
                    "Iterator[Dict[str, Any]]"
                ],
                "update": [
                    "dict",
                    "telegram.exUpdater",
                    "telegram.Update"
                ],
                "args": []
            }
        },
        "vote": {
            "name": "vote",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "telebotypes.Message",
                    "discord.Message"
                ],
                "rating": [
                    "dict",
                    "golem_messages.message.tasks.WantToComputeTask",
                    "int",
                    "can.message.Message"
                ],
                "username": [
                    "dict",
                    "golem_messages.message.tasks.WantToComputeTask",
                    "int",
                    "can.message.Message"
                ]
            }
        },
        "upvote": {
            "name": "upvote",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.update.Update",
                    "telegram.exCallbackContext",
                    "dict"
                ]
            }
        },
        "downvote": {
            "name": "downvote",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "telegram.Update",
                    "telegram.boBot",
                    "telegram.Bot",
                    "bool"
                ],
                "update": [
                    "telegram.update.Update",
                    "telegram.exCallbackContext",
                    "dict"
                ]
            }
        },
        "error_handler": {
            "name": "error_handler",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "bot": [
                    "telegram.update.Update",
                    "telegram.boBot",
                    "Sequence[Any]",
                    "str",
                    "float",
                    "Optional[Callable[[], None]]",
                    "Callable[[int], None]",
                    "set"
                ],
                "updater": [
                    "telegram.update.Update",
                    "telegram.boBot",
                    "Sequence[Any]",
                    "str",
                    "float",
                    "Optional[Callable[[], None]]",
                    "Callable[[int], None]",
                    "set"
                ],
                "error": [
                    "str",
                    "telegram.update.Update",
                    "Tuple[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "init_telegram": {
            "name": "init_telegram",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "memologe-master/app/handler/__init__.py": {}
}
{
    "mew-master/setup.py": {},
    "mew-master/mew/convert_case.py": {
        "to_pascal_case": {
            "name": "to_pascal_case",
            "location": 7,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Tuple[str, int]"
                ]
            }
        },
        "from_pascal_case": {
            "name": "from_pascal_case",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "to_camel_case": {
            "name": "to_camel_case",
            "location": 21,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "from_camel_case": {
            "name": "from_camel_case",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "mew-master/mew/decorator.py": {
        "is_namedtuple": {
            "name": "is_namedtuple",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": []
            }
        },
        "find_unsupported": {
            "name": "find_unsupported",
            "location": 30,
            "return": [
                "List[str]",
                "list",
                "Set[str]",
                "Dict[str, Dict[str, Any]]",
                "Set[int]",
                "List[List[str]]"
            ],
            "arguments": {
                "t": []
            }
        },
        "serializable": {
            "name": "serializable",
            "location": 61,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "t": [
                    "Type",
                    "int"
                ]
            }
        },
        "NotSupported.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "types": [
                    "str",
                    "int"
                ],
                "message": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "mew-master/mew/serializer.py": {
        "dumps": {
            "name": "dumps",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 266,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "t": [
                    "str",
                    "dict",
                    "int"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ],
                "format": [
                    "str",
                    "Optional[str]"
                ],
                "convert_key": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "ScalarTypeSerializer.type": {
            "name": "type",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "bool",
                    "Type[T]",
                    "Callable"
                ]
            }
        },
        "ScalarTypeSerializer.serialize": {
            "name": "serialize",
            "location": 37,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ScalarTypeSerializer.deserialize": {
            "name": "deserialize",
            "location": 42,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "StringSerializer.serialize": {
            "name": "serialize",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StringSerializer.deserialize": {
            "name": "deserialize",
            "location": 55,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "IntSerializer.serialize": {
            "name": "serialize",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IntSerializer.deserialize": {
            "name": "deserialize",
            "location": 68,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "FloatSerializer.serialize": {
            "name": "serialize",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FloatSerializer.deserialize": {
            "name": "deserialize",
            "location": 81,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "BooleanSerializer.serialize": {
            "name": "serialize",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BooleanSerializer.deserialize": {
            "name": "deserialize",
            "location": 94,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "NoneTypeSerializer.serialize": {
            "name": "serialize",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NoneTypeSerializer.deserialize": {
            "name": "deserialize",
            "location": 107,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "UUIDSerializer.serialize": {
            "name": "serialize",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UUIDSerializer.deserialize": {
            "name": "deserialize",
            "location": 120,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[bytes, bytearray, str]",
                    "Union[str, bytes, int]",
                    "int"
                ]
            }
        },
        "DateTimeSerializer.serialize": {
            "name": "serialize",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DateTimeSerializer.deserialize": {
            "name": "deserialize",
            "location": 133,
            "return": [
                "int",
                "datetime.datetime",
                "datetime.timedelta",
                "float"
            ],
            "arguments": {
                "value": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "DateSerializer.serialize": {
            "name": "serialize",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DateSerializer.deserialize": {
            "name": "deserialize",
            "location": 147,
            "return": [
                "datetime.datetime",
                "str",
                "Optional[datetime.tzinfo]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "datetime.time",
                    "datetime.date",
                    "datetime.timedelta"
                ]
            }
        },
        "TimeSerializer.serialize": {
            "name": "serialize",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TimeSerializer.deserialize": {
            "name": "deserialize",
            "location": 161,
            "return": [
                "int",
                "float",
                "Optional[datetime.timedelta]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "MultiTypeSerializer.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiTypeSerializer.serialize": {
            "name": "serialize",
            "location": 184,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Sequence[Any]",
                    "Optional[str]",
                    "int"
                ],
                "convert_key": [
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "MultiTypeSerializer.deserialize": {
            "name": "deserialize",
            "location": 211,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "str",
                    "float",
                    "bool",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']"
                ],
                "value": [
                    "bytes",
                    "str"
                ],
                "convert_key": [
                    "List[str]",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "mew-master/mew/__init__.py": {},
    "mew-master/mew/__version__.py": {},
    "mew-master/tests/pokemon.py": {},
    "mew-master/tests/test_convert_case.py": {
        "test_pascal_and_snake_case_conversion": {
            "name": "test_pascal_and_snake_case_conversion",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "pascal": [
                    "str",
                    "float"
                ],
                "snake": [
                    "str",
                    "float"
                ]
            }
        },
        "test_camel_and_snake_case_conversion": {
            "name": "test_camel_and_snake_case_conversion",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "camel": [
                    "str",
                    "float"
                ],
                "snake": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "mew-master/tests/test_serializable.py": {
        "test_not_supported": {
            "name": "test_not_supported",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "geo_positions": {
            "name": "geo_positions",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "Callable",
                    "str"
                ],
                "latitude": [
                    "int",
                    "Callable",
                    "str"
                ],
                "longitude": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "address": {
            "name": "address",
            "location": 88,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "draw": [
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "id": [
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "door_number": [
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "house_name": [
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "street_name": [
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "geo_position": [
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "teacher": {
            "name": "teacher",
            "location": 106,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "address": [
                    "str",
                    "int"
                ]
            }
        },
        "lecture": {
            "name": "lecture",
            "location": 111,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "timestamp": [
                    "str",
                    "int"
                ],
                "teacher": [
                    "str",
                    "int"
                ],
                "subject": [
                    "str",
                    "int"
                ]
            }
        },
        "student": {
            "name": "student",
            "location": 123,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "Dict[str, int]",
                    "bytes",
                    "int",
                    "datetime.date"
                ],
                "id": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "address": [
                    "str"
                ],
                "lecture": [
                    "str"
                ]
            }
        },
        "test_address": {
            "name": "test_address",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "address": []
            }
        },
        "test_teacher": {
            "name": "test_teacher",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "teacher": []
            }
        },
        "test_lecture": {
            "name": "test_lecture",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "lecture": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_student": {
            "name": "test_student",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "student": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "mew-master/tests/test_serializer.py": {
        "test_string_serializer": {
            "name": "test_string_serializer",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "test_int_serializer": {
            "name": "test_int_serializer",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_dumps_yaml": {
            "name": "test_dumps_yaml",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mew-master/tests/test_version.py": {
        "test_version": {
            "name": "test_version",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copyright": {
            "name": "test_copyright",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
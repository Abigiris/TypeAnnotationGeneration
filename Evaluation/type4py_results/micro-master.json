{
    "micro-master/setup.py": {},
    "micro-master/boilerplate/doc/conf.py": {},
    "micro-master/hello/hello.py": {
        "make_server": {
            "name": "make_server",
            "location": 105,
            "return": [
                "float",
                "int",
                "Union[str, List[str]]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 133,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        },
        "Hello.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "redis_url": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "smtp_url": [
                    "str"
                ],
                "render_email_auth_message": [
                    "str"
                ]
            }
        },
        "Hello.create_settings": {
            "name": "create_settings",
            "location": 70,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "bytes",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Greeting.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Greeting.json": {
            "name": "json",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "include": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "micro-master/micro/analytics.py": {
        "Analytics.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Analytics.collect_statistics": {
            "name": "collect_statistics",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Analytics.start_collect_statistics": {
            "name": "start_collect_statistics",
            "location": 83,
            "return": [
                "Iterable[T]",
                "str",
                "logging.LogRecord",
                "dict",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Analytics._count_users": {
            "name": "_count_users",
            "location": 94,
            "return": [
                "Mapping[str, Any]",
                "str",
                "purplship.core.utils.xml.Element"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "int",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Analytics._count_users_actual": {
            "name": "_count_users_actual",
            "location": 98,
            "return": [
                "int",
                "List[int]",
                "Tuple[int, int]",
                "List[Dict[str, str]]",
                "str",
                "List[Tuple[int, int]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "int",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Analytics._count_users_active": {
            "name": "_count_users_active",
            "location": 102,
            "return": [
                "int",
                "List[int]",
                "Tuple[int, int]",
                "List[Dict[str, str]]",
                "str",
                "List[Tuple[int, int]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "str",
                    "float",
                    "Optional[datetime.date]",
                    "dict"
                ]
            }
        },
        "Analytics._actual_users": {
            "name": "_actual_users",
            "location": 106,
            "return": [
                "List[str]",
                "List[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statistic.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "Statistic.get": {
            "name": "get",
            "location": 127,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statistic.json": {
            "name": "json",
            "location": 134,
            "return": [
                "bool",
                "models.User",
                "tartare.core.models.Job",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statistic._add": {
            "name": "_add",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "p": [
                    "dict",
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "List[str]",
                    "bytes",
                    "float",
                    "bool"
                ],
                "v": [
                    "int",
                    "bool",
                    "str",
                    "tuple"
                ]
            }
        },
        "Point.parse": {
            "name": "parse",
            "location": 149,
            "return": [
                "str",
                "List[int]",
                "int",
                "core.models.Recipe",
                "List[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Point.json": {
            "name": "json",
            "location": 156,
            "return": [
                "int",
                "tuple",
                "List[int]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int]",
                    "str",
                    "int",
                    "float",
                    "T"
                ]
            }
        },
        "Referral.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Referral.json": {
            "name": "json",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "list",
                    "Callable[[str], T]"
                ],
                "include": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "list",
                    "Callable[[str], T]"
                ]
            }
        },
        "Referrals.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Referrals.add": {
            "name": "add",
            "location": 186,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "Referrals.summarize": {
            "name": "summarize",
            "location": 196,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "core.models.Grouping",
                    "type"
                ]
            }
        }
    },
    "micro-master/micro/core.py": {
        "Object.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ],
                "app": [
                    "str",
                    "aiohttp.web.Application",
                    "Callable[[Dict], None]",
                    "Optional[str]"
                ]
            }
        },
        "Object.json": {
            "name": "json",
            "location": 72,
            "return": [
                "float",
                "Dict[str, Set[str]]",
                "Dict[str, Any]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "include": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Object.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__eq__": {
            "name": "__eq__",
            "location": 85,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Match",
                    "dict",
                    "type"
                ]
            }
        },
        "Object.__hash__": {
            "name": "__hash__",
            "location": 88,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.user": {
            "name": "user",
            "location": 102,
            "return": [
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.disable_notifications": {
            "name": "disable_notifications",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.abort_notifications": {
            "name": "abort_notifications",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.json": {
            "name": "json",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "Dict[str, Dict[str, int]]",
                    "str"
                ],
                "include": [
                    "Dict[str, Dict[str, int]]",
                    "str"
                ]
            }
        },
        "Devices.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application"
                ]
            }
        },
        "Devices.__getitem__": {
            "name": "__getitem__",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Union[str, int]"
                ]
            }
        },
        "Devices.authenticate": {
            "name": "authenticate",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "str",
                    "frozenset[bytes]"
                ]
            }
        },
        "Devices.sign_in": {
            "name": "sign_in",
            "location": 180,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/error.py": {
        "Error.json": {
            "name": "json",
            "location": 23,
            "return": [
                "str",
                "List[str]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/jsonredis.py": {
        "script": {
            "name": "script",
            "location": 426,
            "return": [],
            "arguments": {
                "r": [],
                "code": []
            }
        },
        "zpoptimed": {
            "name": "zpoptimed",
            "location": 439,
            "return": [],
            "arguments": {
                "r": [],
                "key": []
            }
        },
        "bzpoptimed": {
            "name": "bzpoptimed",
            "location": 477,
            "return": [],
            "arguments": {
                "r": [],
                "key": []
            }
        },
        "redis_range": {
            "name": "redis_range",
            "location": 505,
            "return": [],
            "arguments": {
                "slc": []
            }
        },
        "lexical_value": {
            "name": "lexical_value",
            "location": 514,
            "return": [],
            "arguments": {
                "value": [],
                "key": []
            }
        },
        "expect_type": {
            "name": "expect_type",
            "location": 524,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "JSONRedis.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "r": [],
                "encode": [],
                "decode": [],
                "caching": []
            }
        },
        "JSONRedis.oget": {
            "name": "oget",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": [],
                "expect": []
            }
        },
        "JSONRedis.oset": {
            "name": "oset",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "object": []
            }
        },
        "JSONRedis.omget": {
            "name": "omget",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [],
                "default": [],
                "expect": []
            }
        },
        "JSONRedis.omset": {
            "name": "omset",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "JSONRedis.__getattr__": {
            "name": "__getattr__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "RedisSequence.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "r": []
            }
        },
        "RedisList.index": {
            "name": "index",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "start": [],
                "stop": []
            }
        },
        "RedisList.__len__": {
            "name": "__len__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisList.__getitem__": {
            "name": "__getitem__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RedisList.__iter__": {
            "name": "__iter__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSortedSet.index": {
            "name": "index",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "start": [],
                "stop": []
            }
        },
        "RedisSortedSet.count": {
            "name": "count",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RedisSortedSet.__len__": {
            "name": "__len__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSortedSet.__getitem__": {
            "name": "__getitem__",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RedisSortedSet.__iter__": {
            "name": "__iter__",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSortedSet.__reversed__": {
            "name": "__reversed__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSortedSet.__contains__": {
            "name": "__contains__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "LexicalRedisSortedSet.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "lexical_values_key": [],
                "r": []
            }
        },
        "LexicalRedisSortedSet.index": {
            "name": "index",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "start": [],
                "stop": []
            }
        },
        "LexicalRedisSortedSet.__getitem__": {
            "name": "__getitem__",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JSONRedisSequence.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "r": [],
                "list_key": [],
                "pre": []
            }
        },
        "JSONRedisSequence.__getitem__": {
            "name": "__getitem__",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JSONRedisSequence.__len__": {
            "name": "__len__",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisMapping.__init__": {
            "name": "__init__",
            "location": 406,
            "return": [],
            "arguments": {
                "self": [],
                "r": [],
                "map_key": [],
                "expect": []
            }
        },
        "JSONRedisMapping.__getitem__": {
            "name": "__getitem__",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JSONRedisMapping.__iter__": {
            "name": "__iter__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisMapping.__len__": {
            "name": "__len__",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisMapping.__repr__": {
            "name": "__repr__",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "expect_type._f": {
            "name": "_f",
            "location": 526,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "micro-master/micro/micro.py": {
        "JSONifiable.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONifiable.json": {
            "name": "json",
            "location": 68,
            "return": [
                "typing.Dict[builtins.str, builtins.object]"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "include": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "JSONifiableWithParse.parse": {
            "name": "parse",
            "location": 85,
            "return": [
                "JSONifiable"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis_url": [
                    "str"
                ],
                "email": [
                    "str",
                    "Optional[str]"
                ],
                "smtp_url": [
                    "str",
                    "bool"
                ],
                "render_email_auth_message": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "Application.settings": {
            "name": "settings",
            "location": 200,
            "return": [
                "str",
                "bool",
                "tartare.core.models.Job",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.activity": {
            "name": "activity",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.now": {
            "name": "now",
            "location": 212,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {}
        },
        "Application.do_update": {
            "name": "do_update",
            "location": 300,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.create_user": {
            "name": "create_user",
            "location": 312,
            "return": [
                "bool",
                "List[\"TaskNode\"]",
                "Counter",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Iterable[T]",
                    "Iterable",
                    "T",
                    "str"
                ]
            }
        },
        "Application.create_settings": {
            "name": "create_settings",
            "location": 323,
            "return": [
                "'Settings'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.get_object": {
            "name": "get_object",
            "location": 332,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "default": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Application.check_user_is_staff": {
            "name": "check_user_is_staff",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.start_garbage_collect_files": {
            "name": "start_garbage_collect_files",
            "location": 351,
            "return": [
                "Dict[str, Any]",
                "abilian.core.models.subjects.User",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.start_empty_trash": {
            "name": "start_empty_trash",
            "location": 362,
            "return": [
                "Optional[str]",
                "dict",
                "bool",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.file_references": {
            "name": "file_references",
            "location": 395,
            "return": [
                "bool",
                "str",
                "set",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._encode": {
            "name": "_encode",
            "location": 441,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "object": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Application._decode": {
            "name": "_decode",
            "location": 444,
            "return": [
                "List['cirq.Qid']",
                "bool",
                "asyncio.BaseEventLoop",
                "asyncio.AbstractEventLoop"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "str",
                    "Union[str, Dict]"
                ]
            }
        },
        "Application._scan_objects": {
            "name": "_scan_objects",
            "location": 455,
            "return": [
                "typing.Iterator[builtins.dict[builtins.str, builtins.object]]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "bytes",
                    "Match[bytes]",
                    "int",
                    "str"
                ],
                "cls": [
                    "str",
                    "Dict[str, int]",
                    "Iterable[str]"
                ]
            }
        },
        "Application._generate_push_vapid_keys": {
            "name": "_generate_push_vapid_keys",
            "location": 468,
            "return": [
                "str",
                "denite.util.UserContext",
                "bytes",
                "IO[str]"
            ],
            "arguments": {}
        },
        "Gone.json": {
            "name": "json",
            "location": 477,
            "return": [
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "include": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Editable.__init__": {
            "name": "__init__",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authors": [
                    "int",
                    "bool",
                    "float"
                ],
                "activity": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Editable.authors": {
            "name": "authors",
            "location": 496,
            "return": [
                "bool",
                "Callable",
                "core.track.Track",
                "str",
                "datetime.datetime",
                "util.freefocus.sql.Group",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Editable.do_edit": {
            "name": "do_edit",
            "location": 518,
            "return": [
                "typing.Optional[typing.Awaitable[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Editable.json": {
            "name": "json",
            "location": 528,
            "return": [
                "str",
                "float",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "str",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "pywirelessmbus.utils.WMbusMessage"
                ],
                "include": [
                    "str",
                    "Dict[str, str]",
                    "Iterable[str]",
                    "pywirelessmbus.utils.WMbusMessage"
                ]
            }
        },
        "Trashable.__init__": {
            "name": "__init__",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trashed": [
                    "int",
                    "bool",
                    "float"
                ],
                "activity": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Trashable.delete": {
            "name": "delete",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trashable.trash": {
            "name": "trash",
            "location": 558,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trashable.restore": {
            "name": "restore",
            "location": 574,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trashable.json": {
            "name": "json",
            "location": 588,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "include": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WithContent.__init__": {
            "name": "__init__",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithContent.do_edit": {
            "name": "do_edit",
            "location": 625,
            "return": [
                "typing.Optional[typing.Awaitable[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithContent.json": {
            "name": "json",
            "location": 632,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "include": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Collection.__init__": {
            "name": "__init__",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Collection.index": {
            "name": "index",
            "location": 683,
            "return": [
                "core.LazyNS",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "Tuple[type]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Optional[int]"
                ],
                "start": [
                    "int",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ],
                "stop": [
                    "int",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Collection.__len__": {
            "name": "__len__",
            "location": 693,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.__getitem__": {
            "name": "__getitem__",
            "location": 704,
            "return": [
                "bool",
                "List[str]",
                "str",
                "list",
                "List[cmk.utils.type_defs.HostName]",
                "core_lib.core.repositories.EventRepository"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Collection.__iter__": {
            "name": "__iter__",
            "location": 718,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Collection.__contains__": {
            "name": "__contains__",
            "location": 722,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T",
                    "str"
                ]
            }
        },
        "Collection.json": {
            "name": "json",
            "location": 727,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "Mapping[str, str]",
                    "bool"
                ],
                "include": [
                    "Mapping[str, str]",
                    "bool"
                ]
            }
        },
        "Orderable.move": {
            "name": "move",
            "location": 757,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "bool",
                    "T",
                    "str",
                    "Dict[int, Dict[str, Any]]",
                    "dict"
                ],
                "to": [
                    "Union[str, pathpy.core.node.Node]",
                    "str",
                    "List['OverloadPart']",
                    "Sequence[Dict[str, Any]]",
                    "Iterable[T_co]",
                    "Optional[dict]"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.store_email": {
            "name": "store_email",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "dict",
                    "BinaryIO",
                    "raiden.utils.Any",
                    "Dict[str, Any]"
                ]
            }
        },
        "User.set_email": {
            "name": "set_email",
            "location": 803,
            "return": [
                "dict",
                "int",
                "bytes",
                "bool",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "dict"
                ]
            }
        },
        "User.finish_set_email": {
            "name": "finish_set_email",
            "location": 818,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_request": [
                    "utils.clienClient",
                    "requests.Request",
                    "str"
                ],
                "auth": [
                    "bool",
                    "dict",
                    "core_lib.core.processing_chain.DatabaseSink"
                ]
            }
        },
        "User.remove_email": {
            "name": "remove_email",
            "location": 827,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.send_email": {
            "name": "send_email",
            "location": 838,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "str",
                    "Callable",
                    "core.models.Grouping",
                    "core.models.Registration",
                    "dict",
                    "bool"
                ]
            }
        },
        "User.notify": {
            "name": "notify",
            "location": 851,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "User.do_edit": {
            "name": "do_edit",
            "location": 863,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "User.json": {
            "name": "json",
            "location": 875,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "dict",
                    "Dict[str, Any]",
                    "message.Message",
                    "str"
                ],
                "include": [
                    "dict",
                    "Dict[str, Any]",
                    "message.Message",
                    "str"
                ]
            }
        },
        "User._send_email": {
            "name": "_send_email",
            "location": 890,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "str",
                    "int"
                ],
                "msg": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Sequence[util.datetime.range.DateTimeRange]"
                ]
            }
        },
        "User._check_user": {
            "name": "_check_user",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "dict",
                    "str"
                ]
            }
        },
        "Users.__init__": {
            "name": "__init__",
            "location": 928,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Users.__len__": {
            "name": "__len__",
            "location": 932,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Users.__getitem__": {
            "name": "__getitem__",
            "location": 935,
            "return": [
                "List[str]",
                "list",
                "Union[List, Dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Users.__iter__": {
            "name": "__iter__",
            "location": 940,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 953,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.staff": {
            "name": "staff",
            "location": 974,
            "return": [
                "bool",
                "Callable",
                "core.track.Track",
                "str",
                "datetime.datetime",
                "util.freefocus.sql.Group",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.do_edit": {
            "name": "do_edit",
            "location": 978,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.json": {
            "name": "json",
            "location": 1004,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ],
                "include": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "Activity.__init__": {
            "name": "__init__",
            "location": 1072,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.subscribers": {
            "name": "subscribers",
            "location": 1082,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.publish": {
            "name": "publish",
            "location": 1087,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "Activity.subscribe": {
            "name": "subscribe",
            "location": 1104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.unsubscribe": {
            "name": "unsubscribe",
            "location": 1112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.stream": {
            "name": "stream",
            "location": 1122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.json": {
            "name": "json",
            "location": 1126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "include": [
                    "str",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "Event.create": {
            "name": "create",
            "location": 1145,
            "return": [
                "bool",
                "Optional[str]",
                "Type[T]",
                "str"
            ],
            "arguments": {
                "type": [
                    "Tuple[Type]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Type[\"SerializationDialect\"]",
                    "Union[None, str, Iterable[str]]"
                ],
                "object": [
                    "Type[T]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[cmk.utils.tags.TagGroup]",
                    "Optional[str]",
                    "List[int]",
                    "Dict[str, str]",
                    "str"
                ],
                "detail": [
                    "Tuple[Type]",
                    "Union[Type[Any], Tuple[Any, ...]]",
                    "Type[T]",
                    "Iterable[str]",
                    "list",
                    "str"
                ],
                "app": [
                    "bool",
                    "Iterator[\"pytesmark.structures.ParameterSet[CaseInfo]\"]",
                    "boucanpy.core.dns_record.DnsRecordRepo",
                    "boucanpy.core.SortQS",
                    "dict",
                    "int"
                ]
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 1166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "datetime.datetime"
                ],
                "type": [
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "object": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Sequence[Iterable[Any]]",
                    "Iterable[Any]",
                    "Set[str]"
                ],
                "user": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Sequence[Iterable[Any]]",
                    "Iterable[Any]",
                    "Set[str]"
                ],
                "time": [
                    "datetime.datetime",
                    "datetime.timedelta",
                    "str",
                    "int"
                ],
                "detail": [
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "app": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "datetime.datetime"
                ]
            }
        },
        "Event.object": {
            "name": "object",
            "location": 1176,
            "return": [
                "bool",
                "datetime.datetime",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.user": {
            "name": "user",
            "location": 1183,
            "return": [
                "Optional[str]",
                "float",
                "pathlib.Path",
                "pypi2nix.path.Path",
                "path.Path",
                "pathlib2.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.detail": {
            "name": "detail",
            "location": 1188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.json": {
            "name": "json",
            "location": 1199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "bytes",
                    "raiden.utils.Any"
                ],
                "include": [
                    "bytes",
                    "raiden.utils.Any"
                ]
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 1220,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthRequest.__init__": {
            "name": "__init__",
            "location": 1228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "app": [
                    "int"
                ],
                "email": [
                    "str",
                    "bool",
                    "int",
                    "List[int]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "code": [
                    "str",
                    "bool",
                    "int",
                    "List[int]",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "AuthRequest.verify": {
            "name": "verify",
            "location": 1233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "AuthRequest.json": {
            "name": "json",
            "location": 1240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "pathlib.Path"
                ],
                "include": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "pathlib.Path"
                ]
            }
        },
        "Location.__init__": {
            "name": "__init__",
            "location": 1250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "coords": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "Location.parse": {
            "name": "parse",
            "location": 1259,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "Location.json": {
            "name": "json",
            "location": 1270,
            "return": [
                "bool",
                "str",
                "int",
                "Type",
                "golem_messages.message.base.Message"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputError.__init__": {
            "name": "__init__",
            "location": 1287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "dict",
                    "Type['Declared']",
                    "Union[SimpleITK.Image, SimpleITK.ImageFileReader]"
                ]
            }
        },
        "InputError.trigger": {
            "name": "trigger",
            "location": 1291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Activity.Stream.__init__": {
            "name": "__init__",
            "location": 1047,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "streams": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "micro-master/micro/ratelimit.py": {
        "RateLimit.__post_init__": {
            "name": "__post_init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimiter.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimiter.count": {
            "name": "count",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Dict[str, Union[int, str]]"
                ],
                "client": [
                    "dict"
                ]
            }
        }
    },
    "micro-master/micro/resource.py": {
        "handle_youtube": {
            "name": "handle_youtube",
            "location": 402,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[float, int]",
                    "static_frame.core.util.GetItemKeyType"
                ]
            }
        },
        "Resource.parse": {
            "name": "parse",
            "location": 88,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Resource.__post__init__": {
            "name": "__post__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.json": {
            "name": "json",
            "location": 104,
            "return": [
                "Optional[Dict[str, str]]",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "include": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Image.parse": {
            "name": "parse",
            "location": 123,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, object]",
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "Video.parse": {
            "name": "parse",
            "location": 133,
            "return": [
                "tuple"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, object]",
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "Analyzer.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Analyzer._get_cache": {
            "name": "_get_cache",
            "location": 270,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "Analyzer._set_cache": {
            "name": "_set_cache",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "Optional[static_frame.core.store_filter.StoreFilter]"
                ],
                "resource": [
                    "str",
                    "Union[str, datetime.datetime, None]"
                ]
            }
        },
        "Files.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "int",
                    "bool"
                ]
            }
        },
        "_MetaParser.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetaParser.handle_starttag": {
            "name": "handle_starttag",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]"
                ],
                "attrs": [
                    "str",
                    "List[str]",
                    "bool",
                    "dict",
                    "Dict[Any, list]",
                    "Set[str]"
                ]
            }
        },
        "_MetaParser.handle_endtag": {
            "name": "handle_endtag",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_MetaParser.handle_data": {
            "name": "handle_data",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[MutableMapping]",
                    "Dict[str, str]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "Resource.Thumbnail.parse": {
            "name": "parse",
            "location": 79,
            "return": [
                "Iterable[str]",
                "Callable",
                "str",
                "core.models.Step",
                "int"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "Resource.Thumbnail.json": {
            "name": "json",
            "location": 83,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Files._load._f": {
            "name": "_f",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "Files._dump._f": {
            "name": "_f",
            "location": 353,
            "return": [],
            "arguments": {}
        },
        "Files._unlink._f": {
            "name": "_f",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "micro-master/micro/server.py": {
        "make_list_endpoints": {
            "name": "make_list_endpoints",
            "location": 498,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "url": [
                    "datetime.datetime",
                    "bool"
                ],
                "get_list": [
                    "datetime.datetime",
                    "bool"
                ]
            }
        },
        "make_trashable_endpoints": {
            "name": "make_trashable_endpoints",
            "location": 509,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "eth.abc.BlockHeaderAPI",
                    "List[str]",
                    "Callable",
                    "memoryview"
                ],
                "get_object": [
                    "str",
                    "eth.abc.BlockHeaderAPI",
                    "List[str]",
                    "Callable",
                    "memoryview"
                ]
            }
        },
        "make_orderable_endpoints": {
            "name": "make_orderable_endpoints",
            "location": 522,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "abc.Mapping"
                ],
                "get_collection": [
                    "abc.Mapping"
                ]
            }
        },
        "make_activity_endpoints": {
            "name": "make_activity_endpoints",
            "location": 529,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Any]"
                ],
                "get_activity": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "Dict[str, Any]"
                ],
                "handlers": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Server.run": {
            "name": "run",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.rewrite": {
            "name": "rewrite",
            "location": 271,
            "return": [
                "dict",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "Server._render_email_auth_message": {
            "name": "_render_email_auth_message",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[str]"
                ],
                "auth_request": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[str]"
                ],
                "auth": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[str]"
                ]
            }
        },
        "Endpoint.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "Exception",
                    "aiohttp.web.Response",
                    "aiohttp.web.Request",
                    "Mapping",
                    "scrapy.http.Request",
                    "tornado.httputil.HTTPServerRequest",
                    "apistar.http.RequestData"
                ],
                "request": [
                    "Exception",
                    "aiohttp.web.Response",
                    "aiohttp.web.Request",
                    "Mapping",
                    "scrapy.http.Request",
                    "tornado.httputil.HTTPServerRequest",
                    "apistar.http.RequestData"
                ]
            }
        },
        "Endpoint.initialize": {
            "name": "initialize",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.prepare": {
            "name": "prepare",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.patch": {
            "name": "patch",
            "location": 339,
            "return": [
                "str",
                "bool",
                "dict",
                "float",
                "Dict[str, int]",
                "prosodia.core.grammar.Language"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.write_error": {
            "name": "write_error",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "Endpoint.log_exception": {
            "name": "log_exception",
            "location": 381,
            "return": [
                "str",
                "Iterable[Hashable]",
                "int"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "Dict[str, str]",
                    "Optional[BaseException]",
                    "int"
                ],
                "value": [
                    "float",
                    "str",
                    "List[float]",
                    "Union[int, float]"
                ],
                "tb": [
                    "float",
                    "str",
                    "List[float]",
                    "Union[int, float]"
                ]
            }
        },
        "Endpoint.get_arg": {
            "name": "get_arg",
            "location": 387,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "List[dict]",
                    "bool"
                ],
                "expect": [
                    "str"
                ]
            }
        },
        "Endpoint.check_args": {
            "name": "check_args",
            "location": 402,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "type_info": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CollectionEndpoint.initialize": {
            "name": "initialize",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionEndpoint.get": {
            "name": "get",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityStreamEndpoint.initialize": {
            "name": "initialize",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityStreamEndpoint.on_connection_close": {
            "name": "on_connection_close",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Static.set_extra_headers": {
            "name": "set_extra_headers",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "path.Path",
                    "os.PathLike",
                    "List[str]",
                    "tracim.lib.core.workspace.WorkspaceApi",
                    "pathlib.Path"
                ]
            }
        },
        "UI.__init__": {
            "name": "__init__",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [
                    "Exception",
                    "aiohttp.web.Response",
                    "aiohttp.web.Request",
                    "Mapping",
                    "scrapy.http.Request",
                    "tornado.httputil.HTTPServerRequest",
                    "apistar.http.RequestData"
                ],
                "request": [
                    "Exception",
                    "aiohttp.web.Response",
                    "aiohttp.web.Request",
                    "Mapping",
                    "scrapy.http.Request",
                    "tornado.httputil.HTTPServerRequest",
                    "apistar.http.RequestData"
                ]
            }
        },
        "UI.initialize": {
            "name": "initialize",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UI.get_meta": {
            "name": "get_meta",
            "location": 574,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "UI.get": {
            "name": "get",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UI._render_micro_dependencies": {
            "name": "_render_micro_dependencies",
            "location": 638,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "UI._render_micro_boot": {
            "name": "_render_micro_boot",
            "location": 641,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "UI._render_micro_templates": {
            "name": "_render_micro_templates",
            "location": 644,
            "return": [
                "str",
                "Dict[str, Any]",
                "core.models.Recipe",
                "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "_Index.get_meta": {
            "name": "get_meta",
            "location": 648,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WebManifest.initialize": {
            "name": "initialize",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_WebManifest.get": {
            "name": "get",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BuildManifest.initialize": {
            "name": "initialize",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Service.initialize": {
            "name": "initialize",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_LogClientErrorEndpoint.post": {
            "name": "post",
            "location": 764,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_ListEndpoint.initialize": {
            "name": "initialize",
            "location": 789,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_list": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[Callable[[Type, Dict], Any]]"
                ]
            }
        },
        "_ListEndpoint.get": {
            "name": "get",
            "location": 793,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrashableTrashEndpoint.initialize": {
            "name": "initialize",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrashableTrashEndpoint.post": {
            "name": "post",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrashableRestoreEndpoint.initialize": {
            "name": "initialize",
            "location": 814,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TrashableRestoreEndpoint.post": {
            "name": "post",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OrderableMoveEndpoint.initialize": {
            "name": "initialize",
            "location": 827,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_collection": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "models.User",
                    "django.utils.timezone.datetime"
                ]
            }
        },
        "_OrderableMoveEndpoint.post": {
            "name": "post",
            "location": 831,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_UserEndpoint.get": {
            "name": "get",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool",
                    "Optional[datetime.datetime]",
                    "int"
                ]
            }
        },
        "_UserSetEmailEndpoint.post": {
            "name": "post",
            "location": 859,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "_UserFinishSetEmailEndpoint.post": {
            "name": "post",
            "location": 866,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "_UserRemoveEmailEndpoint.post": {
            "name": "post",
            "location": 876,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "_DevicesEndpoint.post": {
            "name": "post",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DeviceEndpoint.get": {
            "name": "get",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_DeviceEndpoint.patch_disable_notifications": {
            "name": "patch_disable_notifications",
            "location": 908,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "_SettingsEndpoint.get": {
            "name": "get",
            "location": 915,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_ActivityEndpoint.initialize": {
            "name": "initialize",
            "location": 941,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_activity": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "models.User",
                    "django.utils.timezone.datetime"
                ]
            }
        },
        "_ActivityEndpoint.get": {
            "name": "get",
            "location": 945,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_ActivityEndpoint.patch_subscribe": {
            "name": "patch_subscribe",
            "location": 951,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_ActivityEndpoint.patch_unsubscribe": {
            "name": "patch_unsubscribe",
            "location": 957,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_StatisticEndpoint.get": {
            "name": "get",
            "location": 964,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str",
                    "bool",
                    "aiohttp.web.Application",
                    "Callable"
                ]
            }
        },
        "_ReferralsEndpoint.initialize": {
            "name": "initialize",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ReferralsEndpoint.post": {
            "name": "post",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ReferralSummaryEndpoint.get": {
            "name": "get",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FilesEndpoint.initialize": {
            "name": "initialize",
            "location": 1002,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FileEndpoint.initialize": {
            "name": "initialize",
            "location": 1014,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.__init__.get_activity": {
            "name": "get_activity",
            "location": 191,
            "return": [
                "app.executor.Application",
                "aiohttp.web.Application"
            ],
            "arguments": {}
        },
        "Server.run._on_sigint": {
            "name": "_on_sigint",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "micro-master/micro/templates.py": {},
    "micro-master/micro/test.py": {
        "ServerTestCase.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatApp.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis_url": [
                    "str"
                ]
            }
        },
        "CatApp.create_settings": {
            "name": "create_settings",
            "location": 89,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "bytes",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cat.make": {
            "name": "make",
            "location": 103,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {}
        },
        "Cat.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cat.delete": {
            "name": "delete",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cat.json": {
            "name": "json",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "include": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "CatApp.Cats.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatApp.Cats.create": {
            "name": "create",
            "location": 77,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "micro-master/micro/util.py": {
        "str_or_none": {
            "name": "str_or_none",
            "location": 55,
            "return": [],
            "arguments": {
                "str": []
            }
        },
        "randstr": {
            "name": "randstr",
            "location": 62,
            "return": [],
            "arguments": {
                "length": [],
                "charset": []
            }
        },
        "parse_isotime": {
            "name": "parse_isotime",
            "location": 69,
            "return": [],
            "arguments": {
                "isotime": []
            }
        },
        "parse_slice": {
            "name": "parse_slice",
            "location": 84,
            "return": [],
            "arguments": {
                "str": [],
                "limit": []
            }
        },
        "check_polyglot": {
            "name": "check_polyglot",
            "location": 102,
            "return": [],
            "arguments": {
                "polyglot": []
            }
        },
        "check_email": {
            "name": "check_email",
            "location": 110,
            "return": [],
            "arguments": {
                "email": []
            }
        },
        "look_up_files": {
            "name": "look_up_files",
            "location": 117,
            "return": [],
            "arguments": {
                "paths": []
            }
        },
        "make_command_line_parser": {
            "name": "make_command_line_parser",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 179,
            "return": [],
            "arguments": {
                "debug": []
            }
        },
        "run_instant": {
            "name": "run_instant",
            "location": 201,
            "return": [],
            "arguments": {
                "coro": []
            }
        },
        "expect_opt_type": {
            "name": "expect_opt_type",
            "location": 212,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "version": {
            "name": "version",
            "location": 220,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "expect_opt_type._f": {
            "name": "_f",
            "location": 214,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "version._wrapper": {
            "name": "_wrapper",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "version._version": {
            "name": "_version",
            "location": 240,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "version._decorator": {
            "name": "_decorator",
            "location": 247,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Expect.list": {
            "name": "list",
            "location": 268,
            "return": [],
            "arguments": {
                "expect_item": []
            }
        },
        "Expect.dict": {
            "name": "dict",
            "location": 298,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "Expect.opt": {
            "name": "opt",
            "location": 320,
            "return": [],
            "arguments": {
                "expect": []
            }
        },
        "version._version._decorator": {
            "name": "_decorator",
            "location": 241,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Expect.list._f": {
            "name": "_f",
            "location": 273,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "Expect.dict.f": {
            "name": "f",
            "location": 305,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "Expect.opt._f": {
            "name": "_f",
            "location": 322,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "micro-master/micro/webapi.py": {
        "WebAPIError.error": {
            "name": "error",
            "location": 22,
            "return": [
                "str",
                "List[str]",
                "Optional[Iterable[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebAPIError.status": {
            "name": "status",
            "location": 27,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebAPIError.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebAPI.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        }
    },
    "micro-master/micro/__init__.py": {},
    "micro-master/micro/tests/ext_test_email.py": {
        "EmailTest.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.tearDown": {
            "name": "tearDown",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_store_email": {
            "name": "test_user_store_email",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_store_email_email_duplicate": {
            "name": "test_user_store_email_email_duplicate",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_store_email_email_same": {
            "name": "test_user_store_email_email_same",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_store_email_email_removed": {
            "name": "test_user_store_email_email_removed",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_store_email_email_overwritten": {
            "name": "test_user_store_email_email_overwritten",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_set_email": {
            "name": "test_user_set_email",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_set_email_auth_invalid": {
            "name": "test_user_set_email_auth_invalid",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_remove_email": {
            "name": "test_user_remove_email",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_remove_email_user_no_email": {
            "name": "test_user_remove_email_user_no_email",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_send_email": {
            "name": "test_user_send_email",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_send_email_msg_invalid": {
            "name": "test_user_send_email_msg_invalid",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_send_email_user_no_email": {
            "name": "test_user_send_email_user_no_email",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailTest.test_user_send_email_no_smtpd": {
            "name": "test_user_send_email_no_smtpd",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscardingSMTPServer.process_message": {
            "name": "process_message",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "peer": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[bytes]",
                    "str"
                ],
                "mailfrom": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[bytes]",
                    "str"
                ],
                "rcpttos": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[bytes]",
                    "str"
                ],
                "data": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "EmailTest.test_user_set_email._render_email_auth_message": {
            "name": "_render_email_auth_message",
            "location": 66,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "email": [
                    "str",
                    "List[Tuple[str, str]]",
                    "bytes",
                    "bool"
                ],
                "auth_request": [
                    "str",
                    "List[Tuple[str, str]]",
                    "bytes",
                    "bool"
                ],
                "auth": [
                    "str",
                    "bool",
                    "Callable",
                    "float",
                    "int"
                ]
            }
        }
    },
    "micro-master/micro/tests/ext_test_notification.py": {
        "main": {
            "name": "main",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NotificationTestCase.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceNotificationTest.setUp": {
            "name": "setUp",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/tests/ext_test_resource.py": {},
    "micro-master/micro/tests/test_analytics.py": {
        "AnalyticsTest._now": {
            "name": "_now",
            "location": 27,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "AnalyticsTest.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "int",
                    "bool",
                    "float",
                    "datetime.datetime"
                ]
            }
        },
        "AnalyticsTest.test_collect_statistics": {
            "name": "test_collect_statistics",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "Union[int, float]",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "ReferralsTest.test_add": {
            "name": "test_add",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferralsTest.test_summarize": {
            "name": "test_summarize",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferralsTest.test_summarize_period": {
            "name": "test_summarize_period",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/tests/test_core.py": {
        "DevicesTest.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicesTest.test_getitem_as_user": {
            "name": "test_getitem_as_user",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicesTest.test_authenticate": {
            "name": "test_authenticate",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicesTest.test_authenticate_secret_invalid": {
            "name": "test_authenticate_secret_invalid",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicesTest.test_sign_in": {
            "name": "test_sign_in",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/tests/test_jsonredis.py": {
        "JSONRedisTestCase.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.setup_data": {
            "name": "setup_data",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "cache": []
            }
        },
        "JSONRedisTest.test_oset_oget": {
            "name": "test_oset_oget",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_oset_oget_caching_disabled": {
            "name": "test_oset_oget_caching_disabled",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_oget_object_destroyed": {
            "name": "test_oget_object_destroyed",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_oget_cache_empty": {
            "name": "test_oget_cache_empty",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_oget_cache_empty_caching_disabled": {
            "name": "test_oget_cache_empty_caching_disabled",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_oget_key_nonexistant": {
            "name": "test_oget_key_nonexistant",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_oget_value_not_json": {
            "name": "test_oget_value_not_json",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_oget_default": {
            "name": "test_oget_default",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_oget_default_missing_key": {
            "name": "test_oget_default_missing_key",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_oget_default_exception_missing_key": {
            "name": "test_oget_default_exception_missing_key",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisTest.test_omget_omset": {
            "name": "test_omget_omset",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseProtocol.setUp": {
            "name": "setUp",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseProtocol.assertEqual": {
            "name": "assertEqual",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "first": [],
                "second": []
            }
        },
        "TestCaseProtocol.assertTrue": {
            "name": "assertTrue",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "TestCaseProtocol.assertFalse": {
            "name": "assertFalse",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "RedisSequenceTest.setUp": {
            "name": "setUp",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_index": {
            "name": "test_index",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_index_missing_x": {
            "name": "test_index_missing_x",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_count": {
            "name": "test_count",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_len": {
            "name": "test_len",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem": {
            "name": "test_getitem",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem_key_negative": {
            "name": "test_getitem_key_negative",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem_key_out_of_range": {
            "name": "test_getitem_key_out_of_range",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem_key_slice": {
            "name": "test_getitem_key_slice",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem_key_no_start": {
            "name": "test_getitem_key_no_start",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem_key_no_stop": {
            "name": "test_getitem_key_no_stop",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem_key_stop_zero": {
            "name": "test_getitem_key_stop_zero",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem_key_stop_lt_start": {
            "name": "test_getitem_key_stop_lt_start",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem_key_stop_negative": {
            "name": "test_getitem_key_stop_negative",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_getitem_key_stop_out_of_range": {
            "name": "test_getitem_key_stop_out_of_range",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_iter": {
            "name": "test_iter",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_reversed": {
            "name": "test_reversed",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_contains": {
            "name": "test_contains",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSequenceTest.test_contains_missing_item": {
            "name": "test_contains_missing_item",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisListTest.setUp": {
            "name": "setUp",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisSortedSetTest.setUp": {
            "name": "setUp",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexicalRedisSortedSetTest.setUp": {
            "name": "setUp",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisSequenceTest.setUp": {
            "name": "setUp",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisSequenceTest.test_getitem": {
            "name": "test_getitem",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisSequenceTest.test_getitem_key_slice": {
            "name": "test_getitem_key_slice",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisSequenceTest.test_getitem_pre": {
            "name": "test_getitem_pre",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisSequenceTest.test_len": {
            "name": "test_len",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisMappingTest.setUp": {
            "name": "setUp",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisMappingTest.test_getitem": {
            "name": "test_getitem",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisMappingTest.test_iter": {
            "name": "test_iter",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisMappingTest.test_len": {
            "name": "test_len",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRedisMappingTest.test_contains": {
            "name": "test_contains",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScriptTest.test_script": {
            "name": "test_script",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScriptTest.test_script_cached": {
            "name": "test_script_cached",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPopTimedTest.make_queue": {
            "name": "make_queue",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "ZPopTimedTest.test_zpoptimed": {
            "name": "test_zpoptimed",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPopTimedTest.test_zpoptimed_future_member": {
            "name": "test_zpoptimed_future_member",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPopTimedTest.test_zpoptimed_empty_set": {
            "name": "test_zpoptimed_empty_set",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPopTimedTest.test_bzpoptimed": {
            "name": "test_bzpoptimed",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPopTimedTest.test_bzpoptimed_future_member": {
            "name": "test_bzpoptimed_future_member",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPopTimedTest.test_bzpoptimed_empty_set": {
            "name": "test_bzpoptimed_empty_set",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZPopTimedTest.test_bzpoptimed_on_set_update": {
            "name": "test_bzpoptimed_on_set_update",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexicalValueTest.test_lexical_value": {
            "name": "test_lexical_value",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cat.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "name": []
            }
        },
        "Cat.__eq__": {
            "name": "__eq__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cat.encode": {
            "name": "encode",
            "location": 334,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "Cat.decode": {
            "name": "decode",
            "location": 338,
            "return": [],
            "arguments": {
                "json": []
            }
        },
        "ZPopTimedTest.test_bzpoptimed_on_set_update._add": {
            "name": "_add",
            "location": 305,
            "return": [],
            "arguments": {}
        }
    },
    "micro-master/micro/tests/test_micro.py": {
        "MicroTestCase.setUp": {
            "name": "setUp",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicationTest.test_init_redis_url_invalid": {
            "name": "test_init_redis_url_invalid",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicationUpdateTest.setup_db": {
            "name": "setup_db",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "Dict[int, List[int]]",
                    "Set[str]"
                ]
            }
        },
        "EditableTest.setUp": {
            "name": "setUp",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrashableTest.setUp": {
            "name": "setUp",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrashableTest.test_trash_trashed": {
            "name": "test_trash_trashed",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delete": [
                    "unittesmock.Mock",
                    "List[int]",
                    "Dict[str, Any]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "CollectionTest.make_cats": {
            "name": "make_cats",
            "location": 258,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_index": {
            "name": "test_index",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_len": {
            "name": "test_len",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_getitem": {
            "name": "test_getitem",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_getitem_slice": {
            "name": "test_getitem_slice",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_getitem_id": {
            "name": "test_getitem_id",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_getitem_missing_id": {
            "name": "test_getitem_missing_id",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_getitem_check": {
            "name": "test_getitem_check",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_iter": {
            "name": "test_iter",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_contains": {
            "name": "test_contains",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionTest.test_contains_missing_item": {
            "name": "test_contains_missing_item",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderableTest.make_cats": {
            "name": "make_cats",
            "location": 315,
            "return": [
                "bool",
                "asyncio.Queue",
                "Dict[int, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderableTest.test_move": {
            "name": "test_move",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderableTest.test_move_to_none": {
            "name": "test_move_to_none",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderableTest.test_move_to_item": {
            "name": "test_move_to_item",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderableTest.test_move_item_external": {
            "name": "test_move_item_external",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderableTest.test_move_to_external": {
            "name": "test_move_to_external",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDevicesTest.test_getitem_as_user": {
            "name": "test_getitem_as_user",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityTest.make_activity": {
            "name": "make_activity",
            "location": 359,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityTest.test_publish": {
            "name": "test_publish",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "notify": []
            }
        },
        "ActivityTest.test_subscribe": {
            "name": "test_subscribe",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivityTest.test_unsubscribe": {
            "name": "test_unsubscribe",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EventTest.make_event": {
            "name": "make_event",
            "location": 416,
            "return": [
                "dict",
                "int",
                "tornado.web.Application"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventTest.test_get_object": {
            "name": "test_get_object",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventTest.test_get_object_deleted": {
            "name": "test_get_object_deleted",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationTest.test_parse": {
            "name": "test_parse",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/tests/test_ratelimit.py": {
        "RateLimiterTest.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimiterTest.test_count": {
            "name": "test_count",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/tests/test_resource.py": {
        "AnalyzerTestCase.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzerTestCase.get_app": {
            "name": "get_app",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilesTest.setUp": {
            "name": "setUp",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeEndpoint.get": {
            "name": "get",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "micro-master/micro/tests/test_server.py": {
        "ServerTest.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTest.test_endpoint_request": {
            "name": "test_endpoint_request",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTest.test_endpoint_request_invalid_body": {
            "name": "test_endpoint_request_invalid_body",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTest.test_endpoint_request_key_error": {
            "name": "test_endpoint_request_key_error",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTest.test_endpoint_request_input_error": {
            "name": "test_endpoint_request_input_error",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTest.test_endpoint_request_value_error": {
            "name": "test_endpoint_request_value_error",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/tests/test_util.py": {
        "ParseIsotimeTest.test_parse_isotime": {
            "name": "test_parse_isotime",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseIsotimeTest.test_parse_isotime_date": {
            "name": "test_parse_isotime_date",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookUpFilesTest.test_call": {
            "name": "test_call",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LookUpFilesTest.test_call_no_file": {
            "name": "test_call_no_file",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionTest.echo": {
            "name": "echo",
            "location": 48,
            "return": [
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "a": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "VersionTest.test_call": {
            "name": "test_call",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionTest.test_call_v_1": {
            "name": "test_call_v_1",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionTest.test_call_v_2": {
            "name": "test_call_v_2",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionTest.test_call_v_unknown": {
            "name": "test_call_v_unknown",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/tests/test_webapi.py": {
        "EchoEndpoint.respond": {
            "name": "respond",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str"
                ]
            }
        },
        "WebAPITest.get_app": {
            "name": "get_app",
            "location": 31,
            "return": [
                "str",
                "Any",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "micro-master/micro/tests/__init__.py": {},
    "micro-master/stubs/pywebpush.py": {},
    "micro-master/stubs/redis/client.py": {
        "Redis.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "db": []
            }
        },
        "Redis.from_url": {
            "name": "from_url",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [],
                "url": [],
                "db": []
            }
        },
        "Redis.config_get": {
            "name": "config_get",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Redis.config_set": {
            "name": "config_set",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Redis.delete": {
            "name": "delete",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Redis.get": {
            "name": "get",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Redis.hget": {
            "name": "hget",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "key": []
            }
        },
        "Redis.hset": {
            "name": "hset",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "key": [],
                "value": []
            }
        },
        "Redis.lindex": {
            "name": "lindex",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "index": []
            }
        },
        "Redis.llen": {
            "name": "llen",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Redis.lrange": {
            "name": "lrange",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "start": [],
                "end": []
            }
        },
        "Redis.lrem": {
            "name": "lrem",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "count": [],
                "value": []
            }
        },
        "Redis.pubsub": {
            "name": "pubsub",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Redis.register_script": {
            "name": "register_script",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "script": []
            }
        },
        "Redis.rpush": {
            "name": "rpush",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Redis.sismember": {
            "name": "sismember",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Redis.zadd": {
            "name": "zadd",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "mapping": []
            }
        },
        "Redis.zcard": {
            "name": "zcard",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Redis.zrange": {
            "name": "zrange",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "start": [],
                "end": []
            }
        },
        "Redis.zrangebyscore": {
            "name": "zrangebyscore",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "min": [],
                "max": []
            }
        },
        "Redis.zrank": {
            "name": "zrank",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Redis.zrem": {
            "name": "zrem",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Redis.zscore": {
            "name": "zscore",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "PubSub.close": {
            "name": "close",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSub.subscribe": {
            "name": "subscribe",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PubSub.get_message": {
            "name": "get_message",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "ignore_subscribe_messages": [],
                "timeout": []
            }
        },
        "Script.__call__": {
            "name": "__call__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [],
                "args": []
            }
        }
    },
    "micro-master/stubs/redis/connection.py": {},
    "micro-master/stubs/redis/exceptions.py": {},
    "micro-master/stubs/redis/__init__.py": {}
}
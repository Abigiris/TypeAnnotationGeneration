{
    "midi-mapper-master/midi_mapper/app.py": {
        "signal_handler": {
            "name": "signal_handler",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "midi-mapper-master/midi_mapper/constants.py": {},
    "midi-mapper-master/midi_mapper/mappings.py": {
        "import_mappings": {
            "name": "import_mappings",
            "location": 11,
            "return": [
                "str",
                "dict",
                "Optional[float]",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "csv_dict_list": {
            "name": "csv_dict_list",
            "location": 21,
            "return": [
                "Union[Dict, Tuple]",
                "Union[Dict, List]",
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "midi-mapper-master/midi_mapper/store.py": {
        "Store.get": {
            "name": "get",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "Store.update": {
            "name": "update",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT",
                    "Union[str, int]"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT",
                    "Union[str, int]"
                ]
            }
        }
    },
    "midi-mapper-master/midi_mapper/stream.py": {
        "process_midi": {
            "name": "process_midi",
            "location": 12,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "int",
                "dict"
            ],
            "arguments": {
                "midi": [
                    "mido.Message",
                    "dict",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "get_translations": {
            "name": "get_translations",
            "location": 30,
            "return": [
                "bool",
                "list"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "bytes",
                    "list",
                    "int"
                ]
            }
        },
        "translate_and_send": {
            "name": "translate_and_send",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "translation": [
                    "Dict[str, Any]",
                    "Type",
                    "str",
                    "dict"
                ]
            }
        },
        "log": {
            "name": "log",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "translation": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[int]",
                    "raiden.utils.BlockTimeout",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "process_standard_types": {
            "name": "process_standard_types",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "translation": [
                    "Tuple['cirq.Qid']",
                    "List['cirq.Qid']",
                    "FrozenSet[int]",
                    "float"
                ]
            }
        },
        "process_real_time_types": {
            "name": "process_real_time_types",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "translation": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "process_mapper_types": {
            "name": "process_mapper_types",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "translation": [
                    "Dict[str, Any]",
                    "Sequence[int]",
                    "Dict[str, str]",
                    "str",
                    "int"
                ]
            }
        },
        "set_bank": {
            "name": "set_bank",
            "location": 113,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes",
                "raiden.utils.Signature"
            ],
            "arguments": {
                "active_bank": [
                    "int",
                    "str",
                    "bool",
                    "Callable[[int], None]"
                ],
                "initial": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "set_program": {
            "name": "set_program",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "active_program": [
                    "bool",
                    "float"
                ]
            }
        },
        "calculate_range": {
            "name": "calculate_range",
            "location": 188,
            "return": [
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "range_": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "level": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "get_translations.set_memory": {
            "name": "set_memory",
            "location": 33,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "mapping": [
                    "str",
                    "Type[object]",
                    "dict"
                ]
            }
        },
        "get_translations.check": {
            "name": "check",
            "location": 37,
            "return": [],
            "arguments": {
                "mapping": [
                    "int",
                    "Mapping",
                    "Optional[int]",
                    "dict"
                ]
            }
        }
    },
    "midi-mapper-master/midi_mapper/utils.py": {
        "input_message": {
            "name": "input_message",
            "location": 17,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "midi": [
                    "mido.Message",
                    "str",
                    "Message"
                ],
                "midi_stream": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "set_io_ports": {
            "name": "set_io_ports",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "midi_stream": [
                    "str",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "send_message": {
            "name": "send_message",
            "location": 59,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "msg": [
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "str",
                    "Sequence[Hashable]",
                    "AbstractSet[str]"
                ]
            }
        },
        "create_midi": {
            "name": "create_midi",
            "location": 81,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "msg": [
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "create_nrpn": {
            "name": "create_nrpn",
            "location": 131,
            "return": [
                "str",
                "Type",
                "Optional[str]",
                "Optional[List[\"custom_index\"]]"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "set_io_ports.input_message_passer": {
            "name": "input_message_passer",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "midi": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "midi-mapper-master/midi_mapper/__init__.py": {},
    "midi-mapper-master/playground/open-midi-in.py": {
        "MidiInputHandler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MidiInputHandler.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "bytes",
                    "dict",
                    "Sequence[float]",
                    "Type[T]"
                ],
                "data": [
                    "dict",
                    "bool",
                    "str",
                    "Dict[str, dict]",
                    "Iterable[str]",
                    "Type[T]"
                ]
            }
        }
    },
    "midi-mapper-master/playground/open-midi-out.py": {},
    "midi-mapper-master/playground/random-notes.py": {
        "compose": {
            "name": "compose",
            "location": 44,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "play_note": {
            "name": "play_note",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "midiout": [
                    "int",
                    "Callable",
                    "str"
                ],
                "composition": [
                    "str",
                    "int"
                ],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "create_compositions": {
            "name": "create_compositions",
            "location": 70,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "midiout": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "clean_up": {
            "name": "clean_up",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "signal_handler": {
            "name": "signal_handler",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "midi-mapper-master/tests/conftest.py": {
        "control_change": {
            "name": "control_change",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "Sequence[Any]",
                "str"
            ],
            "arguments": {}
        },
        "midi_notes": {
            "name": "midi_notes",
            "location": 15,
            "return": [
                "tuple",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "request": []
            }
        },
        "polytouch": {
            "name": "polytouch",
            "location": 23,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "program_change": {
            "name": "program_change",
            "location": 28,
            "return": [
                "str",
                "Message",
                "Dict[str, Any]",
                "Sequence[Any]"
            ],
            "arguments": {}
        },
        "aftertouch": {
            "name": "aftertouch",
            "location": 33,
            "return": [
                "str",
                "Type[Exception]",
                "Callable[..., T]",
                "Dict[str, Any]",
                "Literal",
                "int"
            ],
            "arguments": {}
        },
        "pitchwheel": {
            "name": "pitchwheel",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "real_time": {
            "name": "real_time",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": []
            }
        },
        "mappings_real_time": {
            "name": "mappings_real_time",
            "location": 48,
            "return": [
                "Dict[str, Any]",
                "dict",
                "utils.diskstaDisk",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "mappings_bank0": {
            "name": "mappings_bank0",
            "location": 70,
            "return": [
                "Optional[str]",
                "int",
                "Optional[bool]",
                "Optional[dict]"
            ],
            "arguments": {}
        },
        "mappings_bank1": {
            "name": "mappings_bank1",
            "location": 105,
            "return": [
                "Optional[str]",
                "int",
                "Optional[bool]",
                "Optional[dict]"
            ],
            "arguments": {}
        },
        "mappings_bank_set": {
            "name": "mappings_bank_set",
            "location": 140,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "mappings_set_program": {
            "name": "mappings_set_program",
            "location": 205,
            "return": [
                "Optional[str]",
                "int",
                "Optional[dict]"
            ],
            "arguments": {}
        }
    },
    "midi-mapper-master/tests/test_app.py": {
        "test_main_loop": {
            "name": "test_main_loop",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_sleep": [
                    "mock.Mock"
                ]
            }
        },
        "test_signal_handler": {
            "name": "test_signal_handler",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "midi-mapper-master/tests/test_mappings.py": {
        "test_import_mappings_success": {
            "name": "test_import_mappings_success",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_import_mappings_fail": {
            "name": "test_import_mappings_fail",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_import_mappings_dummy_csv": {
            "name": "test_import_mappings_dummy_csv",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "midi-mapper-master/tests/test_stream.py": {
        "test_process_midi_notes": {
            "name": "test_process_midi_notes",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "midi_notes": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_process_polytouch": {
            "name": "test_process_polytouch",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "polytouch": [
                    "telebotypes.Message"
                ]
            }
        },
        "test_process_control_change": {
            "name": "test_process_control_change",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "control_change": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_process_program_change": {
            "name": "test_process_program_change",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "program_change": [
                    "telebotypes.Message"
                ]
            }
        },
        "test_process_aftertouch": {
            "name": "test_process_aftertouch",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "aftertouch": [
                    "telebotypes.Message",
                    "float"
                ]
            }
        },
        "test_process_pitchwheel": {
            "name": "test_process_pitchwheel",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "pitchwheel": []
            }
        },
        "test_process_real_time": {
            "name": "test_process_real_time",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "real_time": [
                    "int",
                    "Sequence[Hashable]",
                    "str",
                    "float"
                ]
            }
        },
        "test_real_time1": {
            "name": "test_real_time1",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "send_message_mock": [
                    "mock.MagicMock"
                ],
                "mappings_real_time": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_real_time2": {
            "name": "test_real_time2",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_real_time": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_get_translations_bank0": {
            "name": "test_get_translations_bank0",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_bank0": [
                    "Callable",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "test_get_translations_bank1": {
            "name": "test_get_translations_bank1",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_bank1": [
                    "Callable",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "test_check_log": {
            "name": "test_check_log",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_bank1": []
            }
        },
        "test_translate_and_send0": {
            "name": "test_translate_and_send0",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_bank0": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_translate_and_send1": {
            "name": "test_translate_and_send1",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_bank1": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "send_midi_through_the_stream": {
            "name": "send_midi_through_the_stream",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "midi": [
                    "int"
                ]
            }
        },
        "test_get_translations_bank_set": {
            "name": "test_get_translations_bank_set",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_bank_set": [
                    "dict"
                ]
            }
        },
        "test_check_memory": {
            "name": "test_check_memory",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_bank_set": [
                    "dict",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_calculate_range": {
            "name": "test_calculate_range",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_bank_set": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_set_bank": {
            "name": "test_set_bank",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "mappings_bank_set": [
                    "dict",
                    "Dict[str, Tuple[Any, Any, Any]]",
                    "bool"
                ]
            }
        },
        "test_set_program1": {
            "name": "test_set_program1",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "set_program_mock": [],
                "mappings_set_program": [
                    "bytes"
                ]
            }
        },
        "test_set_program2": {
            "name": "test_set_program2",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "send_message_mock": [],
                "mappings_set_program": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "midi-mapper-master/tests/test_utils.py": {
        "no_io": {
            "name": "no_io",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "myia.utils.misc.Registry[Any, Any]",
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        },
        "test_set_io_ports": {
            "name": "test_set_io_ports",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "no_io": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "test_input_message": {
            "name": "test_input_message",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_send_midi": {
            "name": "test_send_midi",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_send_nrpn": {
            "name": "test_send_nrpn",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_send_message": {
            "name": "test_send_message",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "no_io.get_io_names_mock": {
            "name": "get_io_names_mock",
            "location": 23,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_input_message.on_next": {
            "name": "on_next",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "List[str]",
                    "bool",
                    "T",
                    "List[Union[int, float]]"
                ]
            }
        }
    }
}
{
    "mingflix-master/manage.py": {},
    "mingflix-master/config/urls.py": {},
    "mingflix-master/config/wsgi.py": {},
    "mingflix-master/config/__init__.py": {},
    "mingflix-master/config/settings/base.py": {},
    "mingflix-master/config/settings/local.py": {},
    "mingflix-master/config/settings/production.py": {},
    "mingflix-master/config/settings/test.py": {},
    "mingflix-master/config/settings/__init__.py": {},
    "mingflix-master/mingflix/conftest.py": {
        "media_storage": {
            "name": "media_storage",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "settings": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "tmpdir": [
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 19,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "mingflix-master/mingflix/views.py": {
        "ReactAppView.get": {
            "name": "get",
            "location": 9,
            "return": [
                "int",
                "Dict[str, str]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "mingflix-master/mingflix/__init__.py": {},
    "mingflix-master/mingflix/contrib/__init__.py": {},
    "mingflix-master/mingflix/contrib/sites/__init__.py": {},
    "mingflix-master/mingflix/contrib/sites/migrations/0001_initial.py": {},
    "mingflix-master/mingflix/contrib/sites/migrations/0002_alter_domain_unique.py": {},
    "mingflix-master/mingflix/contrib/sites/migrations/0003_set_site_domain_and_name.py": {
        "update_site_forward": {
            "name": "update_site_forward",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "update_site_backward": {
            "name": "update_site_backward",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "mingflix-master/mingflix/contrib/sites/migrations/__init__.py": {},
    "mingflix-master/mingflix/notifications/admin.py": {},
    "mingflix-master/mingflix/notifications/apps.py": {},
    "mingflix-master/mingflix/notifications/models.py": {
        "Notification.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.natural_time": {
            "name": "natural_time",
            "location": 28,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mingflix-master/mingflix/notifications/serializers.py": {},
    "mingflix-master/mingflix/notifications/tests.py": {},
    "mingflix-master/mingflix/notifications/urls.py": {},
    "mingflix-master/mingflix/notifications/views.py": {
        "create_notification": {
            "name": "create_notification",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "creator": [
                    "str",
                    "fal.models.Season",
                    "int",
                    "zam_repondeur.models.Lecture"
                ],
                "to": [
                    "str",
                    "fal.models.Season",
                    "int",
                    "zam_repondeur.models.Lecture"
                ],
                "notification_type": [
                    "str",
                    "fal.models.Season",
                    "int",
                    "zam_repondeur.models.Lecture"
                ],
                "video": [
                    "str",
                    "fal.models.Season",
                    "int",
                    "zam_repondeur.models.Lecture"
                ],
                "comment": [
                    "str",
                    "fal.models.Season",
                    "int",
                    "zam_repondeur.models.Lecture"
                ]
            }
        },
        "Notifications.get": {
            "name": "get",
            "location": 11,
            "return": [
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "Callable",
                    "dict"
                ],
                "format": [
                    "rest_framework.requesRequest",
                    "bool",
                    "Optional[int]",
                    "str",
                    "float",
                    "list"
                ]
            }
        }
    },
    "mingflix-master/mingflix/notifications/__init__.py": {},
    "mingflix-master/mingflix/notifications/migrations/0001_initial.py": {},
    "mingflix-master/mingflix/notifications/migrations/__init__.py": {},
    "mingflix-master/mingflix/streaming/admin.py": {},
    "mingflix-master/mingflix/streaming/apps.py": {},
    "mingflix-master/mingflix/streaming/models.py": {
        "Streaming.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mingflix-master/mingflix/streaming/tests.py": {},
    "mingflix-master/mingflix/streaming/urls.py": {},
    "mingflix-master/mingflix/streaming/views.py": {
        "StreamingOfFollowing.get": {
            "name": "get",
            "location": 13,
            "return": [
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "dict"
                ],
                "format": [
                    "rest_framework.requesRequest",
                    "bool",
                    "Optional[int]",
                    "str",
                    "float",
                    "list"
                ]
            }
        },
        "StartStreaming.post": {
            "name": "post",
            "location": 32,
            "return": [
                "List[Dict[str, Any]]",
                "Dict[int, dict]",
                "megatron.models.PlatformUser",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "rest_framework.requesRequest",
                    "Optional[int]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "QuitStreaming.delete": {
            "name": "delete",
            "location": 57,
            "return": [
                "str",
                "zerver.models.UserProfile",
                "bool",
                "dict",
                "django.contrib.auth.models.AbstractUser"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ],
                "stream_id": [
                    "zerver.models.UserProfile",
                    "bool",
                    "Dict[str, Any]",
                    "models.Queue",
                    "str"
                ],
                "format": [
                    "rest_framework.requesRequest",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "UserProfileByStreamKey.get": {
            "name": "get",
            "location": 79,
            "return": [
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "bool",
                    "zerver.models.UserProfile"
                ],
                "stream_key": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "format": [
                    "int",
                    "str",
                    "Iterable[Tuple[str, int]]",
                    "bool"
                ]
            }
        },
        "Search.get": {
            "name": "get",
            "location": 94,
            "return": [
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, str]",
                    "int"
                ],
                "format": [
                    "rest_framework.requesRequest",
                    "bool",
                    "Optional[int]",
                    "str",
                    "float",
                    "list"
                ]
            }
        }
    },
    "mingflix-master/mingflix/streaming/__init__.py": {},
    "mingflix-master/mingflix/streaming/migrations/0001_initial.py": {},
    "mingflix-master/mingflix/streaming/migrations/0002_auto_20190517_1710.py": {},
    "mingflix-master/mingflix/streaming/migrations/__init__.py": {},
    "mingflix-master/mingflix/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 10,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "SocialAccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ],
                "sociallogin": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "mingflix-master/mingflix/users/admin.py": {},
    "mingflix-master/mingflix/users/apps.py": {
        "UsersAppConfig.ready": {
            "name": "ready",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mingflix-master/mingflix/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mingflix-master/mingflix/users/models.py": {
        "User.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.followers_count": {
            "name": "followers_count",
            "location": 36,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.following_count": {
            "name": "following_count",
            "location": 39,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.post_count": {
            "name": "post_count",
            "location": 42,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str",
                "int",
                "bool",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mingflix-master/mingflix/users/serializers.py": {
        "UserListSerializer.get_is_following": {
            "name": "get_is_following",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes"
                ]
            }
        },
        "UserProfileSerializer.get_is_following": {
            "name": "get_is_following",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes"
                ]
            }
        }
    },
    "mingflix-master/mingflix/users/urls.py": {},
    "mingflix-master/mingflix/users/views.py": {
        "Search.get": {
            "name": "get",
            "location": 12,
            "return": [
                "bool",
                "str",
                "models.Dashboard",
                "contests.models.User",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "bool"
                ],
                "format": [
                    "rest_framework.requesRequest",
                    "bool",
                    "Optional[int]",
                    "str",
                    "float",
                    "list"
                ]
            }
        },
        "StreamOn.put": {
            "name": "put",
            "location": 31,
            "return": [
                "models.Dashboard",
                "Dict[int, dict]",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "Optional[int]"
                ],
                "format": [
                    "str",
                    "rest_framework.requesRequest",
                    "Optional[str]",
                    "dict",
                    "list",
                    "bool"
                ]
            }
        },
        "StreamOff.put": {
            "name": "put",
            "location": 43,
            "return": [
                "models.Dashboard",
                "Dict[int, dict]",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "Optional[int]"
                ],
                "format": [
                    "str",
                    "rest_framework.requesRequest",
                    "Optional[str]",
                    "dict",
                    "list",
                    "bool"
                ]
            }
        },
        "FollowUser.post": {
            "name": "post",
            "location": 55,
            "return": [
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]"
                ],
                "user_id": [
                    "int",
                    "str"
                ],
                "format": [
                    "int",
                    "Iterable[int]",
                    "bool"
                ]
            }
        },
        "UnFollowUser.post": {
            "name": "post",
            "location": 76,
            "return": [
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[str]"
                ],
                "user_id": [
                    "int",
                    "str"
                ],
                "format": [
                    "int",
                    "Iterable[int]",
                    "bool"
                ]
            }
        },
        "UserProfile.get_user": {
            "name": "get_user",
            "location": 96,
            "return": [
                "str",
                "Set[str]",
                "dict",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "zerver.models.Realm",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "UserProfile.get": {
            "name": "get",
            "location": 104,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "zerver.models.UserProfile"
                ],
                "username": [
                    "zerver.models.UserProfile",
                    "bool",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "format": [
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "UserProfile.put": {
            "name": "put",
            "location": 116,
            "return": [
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[int, dict]",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "zerver.models.UserProfile",
                    "int"
                ],
                "username": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "format": [
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "UserChannel.get_channel": {
            "name": "get_channel",
            "location": 148,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "Dict[str, Any]",
                    "esm.models.plan.Plan"
                ]
            }
        },
        "UserChannel.get": {
            "name": "get",
            "location": 156,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable"
                ],
                "username": [
                    "Dict[str, Any]",
                    "List[Optional[str]]",
                    "transfer.models.PaymentState",
                    "int"
                ],
                "format": [
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "UserChannel.post": {
            "name": "post",
            "location": 168,
            "return": [
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "username": [
                    "Dict[str, Any]",
                    "transfer.models.PaymentState",
                    "int",
                    "str"
                ],
                "format": [
                    "List[str]",
                    "Dict[str, Any]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "UserChannel.put": {
            "name": "put",
            "location": 191,
            "return": [
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[int, dict]",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "username": [
                    "int",
                    "str",
                    "transfer.models.ShopID"
                ],
                "format": [
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "UserFollowers.get": {
            "name": "get",
            "location": 222,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "zerver.models.UserProfile",
                    "contests.models.User",
                    "bool",
                    "Mapping[str, Any]",
                    "dict",
                    "Optional[int]"
                ],
                "username": [
                    "zerver.models.UserProfile",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount"
                ],
                "format": [
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "UserFollowing.get": {
            "name": "get",
            "location": 238,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "zerver.models.UserProfile",
                    "contests.models.User",
                    "bool",
                    "Mapping[str, Any]",
                    "dict",
                    "Optional[int]"
                ],
                "username": [
                    "zerver.models.UserProfile",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]",
                    "grouper.models.permission.Permission",
                    "grouper.models.service_accounServiceAccount"
                ],
                "format": [
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "ChangePassword.put": {
            "name": "put",
            "location": 254,
            "return": [
                "str",
                "bool",
                "core.models.User",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bytes"
                ],
                "username": [
                    "str",
                    "int",
                    "rest_framework.requesRequest",
                    "bool"
                ],
                "format": [
                    "List[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable"
                ]
            }
        }
    },
    "mingflix-master/mingflix/users/__init__.py": {},
    "mingflix-master/mingflix/users/migrations/0001_initial.py": {},
    "mingflix-master/mingflix/users/migrations/0002_auto_20190405_1555.py": {},
    "mingflix-master/mingflix/users/migrations/0003_auto_20190405_1557.py": {},
    "mingflix-master/mingflix/users/migrations/0004_auto_20190405_1605.py": {},
    "mingflix-master/mingflix/users/migrations/0005_auto_20190405_1606.py": {},
    "mingflix-master/mingflix/users/migrations/0006_channel.py": {},
    "mingflix-master/mingflix/users/migrations/0007_auto_20190406_1042.py": {},
    "mingflix-master/mingflix/users/migrations/0008_channel_stream_key.py": {},
    "mingflix-master/mingflix/users/migrations/0009_user_is_streaming.py": {},
    "mingflix-master/mingflix/users/migrations/0010_auto_20190519_1954.py": {},
    "mingflix-master/mingflix/users/migrations/__init__.py": {},
    "mingflix-master/mingflix/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "mingflix-master/mingflix/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mingflix-master/mingflix/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "mingflix-master/mingflix/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mingflix-master/mingflix/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str",
                    "int",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "mingflix-master/mingflix/users/tests/__init__.py": {},
    "mingflix-master/mingflix/videos/admin.py": {},
    "mingflix-master/mingflix/videos/apps.py": {},
    "mingflix-master/mingflix/videos/models.py": {
        "Video.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.natural_time": {
            "name": "natural_time",
            "location": 23,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.like_count": {
            "name": "like_count",
            "location": 27,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.unlike_count": {
            "name": "unlike_count",
            "location": 31,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.comment_count": {
            "name": "comment_count",
            "location": 35,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoLike.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoUnlike.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.natural_time": {
            "name": "natural_time",
            "location": 70,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.reply_count": {
            "name": "reply_count",
            "location": 74,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.like_count": {
            "name": "like_count",
            "location": 78,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.unlike_count": {
            "name": "unlike_count",
            "location": 82,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentLike.__str__": {
            "name": "__str__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentLike.natural_time": {
            "name": "natural_time",
            "location": 95,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentUnlike.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reply.__str__": {
            "name": "__str__",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reply.natural_time": {
            "name": "natural_time",
            "location": 118,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reply.like_count": {
            "name": "like_count",
            "location": 122,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reply.unlike_count": {
            "name": "unlike_count",
            "location": 126,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyLike.__str__": {
            "name": "__str__",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyUnlike.__str__": {
            "name": "__str__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mingflix-master/mingflix/videos/serializers.py": {
        "VideoSerializer.get_is_liked": {
            "name": "get_is_liked",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "bytes",
                    "int",
                    "Callable",
                    "zerver.models.Stream",
                    "audiopyle.lib.models.resulFeatureMeta"
                ]
            }
        }
    },
    "mingflix-master/mingflix/videos/tests.py": {},
    "mingflix-master/mingflix/videos/urls.py": {},
    "mingflix-master/mingflix/videos/views.py": {
        "PostVideo.post": {
            "name": "post",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "MyVideos.get": {
            "name": "get",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "History.get": {
            "name": "get",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "HotVideos.get": {
            "name": "get",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "VideoDetail.find_own_video": {
            "name": "find_own_video",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "video_id": [],
                "user": []
            }
        },
        "VideoDetail.get": {
            "name": "get",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "VideoDetail.put": {
            "name": "put",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "VideoDetail.delete": {
            "name": "delete",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "Search.get": {
            "name": "get",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "VideosOfFollowing.get": {
            "name": "get",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "format": []
            }
        },
        "LikeVideo.get": {
            "name": "get",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "LikeVideo.post": {
            "name": "post",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "CancelLikeVideo.delete": {
            "name": "delete",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "UnlikeVideo.get": {
            "name": "get",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "UnlikeVideo.post": {
            "name": "post",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "CancelUnlikeVideo.delete": {
            "name": "delete",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "CommentOnVideo.post": {
            "name": "post",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "format": []
            }
        },
        "DeleteMyComment.delete": {
            "name": "delete",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": []
            }
        },
        "LikeComment.get": {
            "name": "get",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": []
            }
        },
        "LikeComment.post": {
            "name": "post",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": []
            }
        },
        "CancelLikeComment.delete": {
            "name": "delete",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": []
            }
        },
        "UnlikeComment.get": {
            "name": "get",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": []
            }
        },
        "UnlikeComment.post": {
            "name": "post",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": []
            }
        },
        "CancelUnlikeComment.delete": {
            "name": "delete",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": []
            }
        },
        "ModerateComment.delete": {
            "name": "delete",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "comment_id": [],
                "format": []
            }
        },
        "ModerateReply.delete": {
            "name": "delete",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "video_id": [],
                "reply_id": [],
                "format": []
            }
        },
        "ReplyOnComment.post": {
            "name": "post",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "comment_id": [],
                "format": []
            }
        },
        "DeleteMyReply.delete": {
            "name": "delete",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "reply_id": [],
                "format": []
            }
        },
        "LikeReply.get": {
            "name": "get",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "reply_id": [],
                "format": []
            }
        },
        "LikeReply.post": {
            "name": "post",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "reply_id": [],
                "format": []
            }
        },
        "CancelLikeReply.delete": {
            "name": "delete",
            "location": 505,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "reply_id": [],
                "format": []
            }
        },
        "UnlikeReply.get": {
            "name": "get",
            "location": 518,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "reply_id": [],
                "format": []
            }
        },
        "UnlikeReply.post": {
            "name": "post",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "reply_id": [],
                "format": []
            }
        },
        "CancelUnlikeReply.delete": {
            "name": "delete",
            "location": 550,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "reply_id": [],
                "format": []
            }
        },
        "VideosOfFollowing.get.get_key": {
            "name": "get_key",
            "location": 175,
            "return": [],
            "arguments": {
                "video": []
            }
        }
    },
    "mingflix-master/mingflix/videos/__init__.py": {},
    "mingflix-master/mingflix/videos/migrations/0001_initial.py": {},
    "mingflix-master/mingflix/videos/migrations/0002_auto_20190405_1716.py": {},
    "mingflix-master/mingflix/videos/migrations/0003_comment_commentlike_commentunlike_reply_videolike_videounlike.py": {},
    "mingflix-master/mingflix/videos/migrations/0004_auto_20190405_1916.py": {},
    "mingflix-master/mingflix/videos/migrations/0005_history.py": {},
    "mingflix-master/mingflix/videos/migrations/0006_auto_20190406_1652.py": {},
    "mingflix-master/mingflix/videos/migrations/0007_replylike_replyunlike.py": {},
    "mingflix-master/mingflix/videos/migrations/__init__.py": {}
}
{
    "ml_exercise-master/evaluator.py": {
        "run": {
            "name": "run",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "config_file": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "model.Config"
                ]
            }
        },
        "Evaluator.validate_config": {
            "name": "validate_config",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator._load_input_file": {
            "name": "_load_input_file",
            "location": 51,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_source": [
                    "str"
                ]
            }
        },
        "Evaluator._load_input_database": {
            "name": "_load_input_database",
            "location": 59,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "input_source": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "Evaluator.load_data": {
            "name": "load_data",
            "location": 68,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "Dict[str, Any]",
                "pandas.Series"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator._write_best_model_file": {
            "name": "_write_best_model_file",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_sink": [
                    "str",
                    "int"
                ],
                "best_model": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Evaluator._write_best_model_database": {
            "name": "_write_best_model_database",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_sink": [
                    "dict",
                    "bool",
                    "Sequence[str]",
                    "List[Tuple[bytes, bytes]]"
                ],
                "best_model": [
                    "dict",
                    "bool",
                    "Sequence[str]",
                    "List[Tuple[bytes, bytes]]"
                ]
            }
        },
        "Evaluator.write_best_model": {
            "name": "write_best_model",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "best_model": [
                    "str",
                    "int"
                ]
            }
        },
        "Evaluator.run": {
            "name": "run",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ml_exercise-master/exceptions.py": {},
    "ml_exercise-master/generate_models.py": {
        "run": {
            "name": "run",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ml_exercise-master/model.py": {
        "TrainedModel.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "metadata": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "TrainedModel.load": {
            "name": "load",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "TrainedModel.save": {
            "name": "save",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TrainedModel.predict": {
            "name": "predict",
            "location": 53,
            "return": [
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "TrainedModel.evaluate": {
            "name": "evaluate",
            "location": 56,
            "return": [
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "bytes",
                    "Dict[str, Any]",
                    "BinaryIO"
                ],
                "expected_output": [
                    "pandas.DataFrame",
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "metric": [
                    "str",
                    "int",
                    "float",
                    "pandas.DataFrame"
                ]
            }
        }
    }
}
{
    "mlserve-master/setup.py": {
        "read": {
            "name": "read",
            "location": 13,
            "return": [
                "str",
                "Tuple[str]",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "f": [
                    "bytes",
                    "Iterator[T]",
                    "memoryview",
                    "IO",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "read_version": {
            "name": "read_version",
            "location": 28,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {}
        }
    },
    "mlserve-master/examples/multiple/boston_gbr/boston_gbr.py": {},
    "mlserve-master/examples/multiple/diabetes/diabetes_lasso.py": {},
    "mlserve-master/examples/multiple/instagram/instagram_inf.py": {},
    "mlserve-master/examples/multiple/iris_lr/iris_lr.py": {},
    "mlserve-master/examples/multiple/toxic_lr/toxic_lr.py": {
        "read_data": {
            "name": "read_data",
            "location": 16,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "dataset_path": [
                    "str"
                ]
            }
        },
        "ColumnSelector.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "ColumnSelector.fit": {
            "name": "fit",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "ColumnSelector.transform": {
            "name": "transform",
            "location": 33,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "Dict[str, Any]",
                    "base.ConfigOptions",
                    "int"
                ]
            }
        }
    },
    "mlserve-master/examples/multiple/wine_rf/wine_rf.py": {},
    "mlserve-master/examples/simple/boston_gbr.py": {},
    "mlserve-master/mlserve/consts.py": {},
    "mlserve-master/mlserve/exceptions.py": {
        "RESTError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "dict"
                ],
                "status_code": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "RestClientError.status_code": {
            "name": "status_code",
            "location": 51,
            "return": [
                "List[str]",
                "Set[str]",
                "str",
                "bool",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlainRestError.error_text": {
            "name": "error_text",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mlserve-master/mlserve/handlers.py": {
        "path_serializer": {
            "name": "path_serializer",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Iterable[str]",
                    "type",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "setup_app_routes": {
            "name": "setup_app_routes",
            "location": 46,
            "return": [
                "aiohttp.web.Application",
                "\"App\""
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application",
                    "dict",
                    "aiohttp.web.Request"
                ],
                "handler": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "setup_api_routes": {
            "name": "setup_api_routes",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "api": [
                    "aiohttp.web.Application",
                    "asyncio.Lock",
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "handler": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SiteHandler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_root": [
                    "str",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "SiteHandler.project_root": {
            "name": "project_root",
            "location": 38,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIHandler.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "aiohttp.web.Application",
                    "bool"
                ],
                "executor": [
                    "dict",
                    "str",
                    "Tuple[int, int]"
                ],
                "project_root": [
                    "dict",
                    "Callable",
                    "pathlib.Path",
                    "List[str]",
                    "int"
                ],
                "model_descs": [
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "APIHandler.validate_model_name": {
            "name": "validate_model_name",
            "location": 80,
            "return": [
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str"
                ]
            }
        }
    },
    "mlserve-master/mlserve/loaders.py": {
        "pickle_loader": {
            "name": "pickle_loader",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ]
            }
        },
        "joblib_loader": {
            "name": "joblib_loader",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ]
            }
        },
        "get_loader": {
            "name": "get_loader",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "loader_name": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "mlserve-master/mlserve/main.py": {
        "_cli_parser": {
            "name": "_cli_parser",
            "location": 12,
            "return": [
                "List[str]",
                "Tuple[Any, Any, Any]",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mlserve-master/mlserve/middleware.py": {
        "process_request": {
            "name": "process_request",
            "location": 15,
            "return": [
                "Iterable[Type]",
                "str"
            ],
            "arguments": {
                "req": [
                    "str",
                    "Optional[Callable]",
                    "bytes",
                    "int",
                    "dict"
                ],
                "resp": [
                    "str",
                    "Union[str, int]"
                ],
                "ts": [
                    "str",
                    "Union[str, int]"
                ],
                "duration": [
                    "str",
                    "Union[str, int]"
                ]
            }
        }
    },
    "mlserve-master/mlserve/schema_builder.py": {
        "as_json_table_type": {
            "name": "as_json_table_type",
            "location": 18,
            "return": [
                "str",
                "Exception",
                "list"
            ],
            "arguments": {
                "x": [
                    "nevergrad.common.ArrayLike",
                    "float",
                    "gluonts.model.common.Tensor",
                    "list"
                ]
            }
        },
        "make_field": {
            "name": "make_field",
            "location": 58,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "arr": [
                    "int"
                ]
            }
        },
        "build_schema": {
            "name": "build_schema",
            "location": 99,
            "return": [
                "bool",
                "pandas.Series",
                "Tuple[int, Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "List[str]",
                    "pandas.DataFrame",
                    "Dict[str, Any]"
                ],
                "include_example": [
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "mlserve-master/mlserve/server_utils.py": {},
    "mlserve-master/mlserve/stats.py": {
        "factory": {
            "name": "factory",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "maxlen": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_Stats.mean_resp_time": {
            "name": "mean_resp_time",
            "location": 25,
            "return": [
                "str",
                "int",
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Stats.formatted": {
            "name": "formatted",
            "location": 29,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelStats.log_data_point": {
            "name": "log_data_point",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "T"
                ]
            }
        },
        "AggStats.from_models_stats": {
            "name": "from_models_stats",
            "location": 52,
            "return": [
                "str",
                "bytes",
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[str]",
                    "Callable"
                ],
                "stats_map": [
                    "Callable",
                    "Dict[int, List[Any]]",
                    "OrderedDict[str, Any]",
                    "Callable[[], Iterable[Any]]",
                    "dict"
                ]
            }
        }
    },
    "mlserve-master/mlserve/utils.py": {
        "load_model_config": {
            "name": "load_model_config",
            "location": 64,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]",
                "pathlib.Path",
                "IO",
                "dict",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "fname": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_models": {
            "name": "load_models",
            "location": 71,
            "return": [
                "str",
                "List[Dict[str, str]]",
                "list",
                "Type",
                "List[str]",
                "set"
            ],
            "arguments": {
                "model_conf": [
                    "List[Dict[str, str]]",
                    "int",
                    "dict",
                    "List[str]",
                    "str",
                    "List[Tuple[str, str]]",
                    "Type[T]"
                ]
            }
        },
        "drop_columns": {
            "name": "drop_columns",
            "location": 100,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "schema": [
                    "Dict[str, Any]",
                    "float",
                    "str",
                    "Optional[Callable[..., Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "columns": [
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "ModelDescriptor.asdict": {
            "name": "asdict",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mlserve-master/mlserve/worker.py": {
        "clean_worker": {
            "name": "clean_worker",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "warm": {
            "name": "warm",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "models": [
                    "bool",
                    "type",
                    "Optional[Exception]",
                    "Type[BaseException]",
                    "Exception",
                    "List[Dict[str, Any]]"
                ],
                "cache": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Optional[Any]",
                    "List[Dict]"
                ],
                "init_signals": [
                    "bool",
                    "type",
                    "Optional[Exception]",
                    "Type[BaseException]",
                    "Exception",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "format_result": {
            "name": "format_result",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "pred": [
                    "numpy.ndarray",
                    "str",
                    "Optional[List[Dict]]",
                    "int",
                    "float"
                ],
                "target": [
                    "int",
                    "T"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 57,
            "return": [
                "str",
                "int",
                "pandas.DataFrame"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Sequence[str]",
                    "list"
                ],
                "target": [
                    "List[str]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[dict]",
                    "Dict[str, Any]"
                ],
                "raw_data": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "cache": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Iterable[str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "mlserve-master/mlserve/__init__.py": {},
    "mlserve-master/mlserve/__main__.py": {},
    "mlserve-master/tests/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 20,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        },
        "model_conf": {
            "name": "model_conf",
            "location": 25,
            "return": [
                "Callable",
                "Optional[str]",
                "Type"
            ],
            "arguments": {}
        },
        "max_workers": {
            "name": "max_workers",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "api": {
            "name": "api",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "loop": [
                    "int",
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "aiohttp_client": [
                    "str",
                    "dict",
                    "Callable"
                ],
                "max_workers": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]",
                    "int",
                    "str"
                ],
                "model_conf": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "mlserve-master/tests/test_handlers.py": {},
    "mlserve-master/tests/test_loaders.py": {
        "test_pickle_loader": {
            "name": "test_pickle_loader",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_joblib_loader": {
            "name": "test_joblib_loader",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mlserve-master/tests/test_schema_builder.py": {
        "auto_dataset": {
            "name": "auto_dataset",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "credit_dataset": {
            "name": "credit_dataset",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "assert_schema": {
            "name": "assert_schema",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "Iterable[T]",
                    "List[List[str]]"
                ]
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "auto_dataset": [
                    "str",
                    "float"
                ],
                "credit_dataset": [
                    "str",
                    "float"
                ]
            }
        },
        "test_none": {
            "name": "test_none",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_types": {
            "name": "test_types",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_text_area": {
            "name": "test_text_area",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mlserve-master/tests/test_stats.py": {
        "test_request_timing_ctor": {
            "name": "test_request_timing_ctor",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_model_stats_ctor": {
            "name": "test_model_stats_ctor",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_model_stats_log_data_point": {
            "name": "test_model_stats_log_data_point",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_agg_stats_ctor": {
            "name": "test_agg_stats_ctor",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mlserve-master/tests/test_utitls.py": {
        "test_load_models": {
            "name": "test_load_models",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "model_desc": {
            "name": "model_desc",
            "location": 46,
            "return": [
                "Set[str]",
                "List[str]",
                "bool",
                "List[Match]",
                "List[Mapping[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "test_warm_predict": {
            "name": "test_warm_predict",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "model_desc": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    }
}
{
    "mobility_pipeline-master/docs/conf.py": {},
    "mobility_pipeline-master/mobility_pipeline/check_validation.py": {
        "validate_data_files": {
            "name": "validate_data_files",
            "location": 12,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "mobility_pipeline-master/mobility_pipeline/data_interface.py": {
        "load_polygons_from_json": {
            "name": "load_polygons_from_json",
            "location": 44,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Callable"
                ]
            }
        },
        "convert_shape_to_json": {
            "name": "convert_shape_to_json",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "shapefile_path_prefix": [
                    "Optional[str]",
                    "str"
                ],
                "country_id": [
                    "str",
                    "int"
                ]
            }
        },
        "load_admin_cells": {
            "name": "load_admin_cells",
            "location": 92,
            "return": [
                "str",
                "int",
                "Optional[Exception]",
                "numpy.array"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "bool",
                    "pandas._FilePathOrBuffer"
                ]
            }
        },
        "load_voronoi_cells": {
            "name": "load_voronoi_cells",
            "location": 104,
            "return": [
                "str",
                "os.PathLike"
            ],
            "arguments": {
                "voronoi_path": [
                    "str"
                ]
            }
        },
        "load_towers": {
            "name": "load_towers",
            "location": 117,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "towers_path": [
                    "str",
                    "list",
                    "List[Dict]"
                ]
            }
        },
        "load_mobility": {
            "name": "load_mobility",
            "location": 133,
            "return": [
                "str",
                "bool",
                "pandas._FilePathOrBuffer"
            ],
            "arguments": {
                "mobility_path": [
                    "str",
                    "int"
                ]
            }
        },
        "load_tower_admin": {
            "name": "load_tower_admin",
            "location": 150,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "country_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "load_admin_tower": {
            "name": "load_admin_tower",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "country_id": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "save_admin_admin": {
            "name": "save_admin_admin",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "country_id": [
                    "str",
                    "int"
                ],
                "day_id": [
                    "str",
                    "int"
                ],
                "admin_admin": [
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "save_tower_admin": {
            "name": "save_tower_admin",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "country_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "mat": [
                    "numpy.ndarray",
                    "str",
                    "int"
                ]
            }
        },
        "save_admin_tower": {
            "name": "save_admin_tower",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "country_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "mat": [
                    "numpy.ndarray",
                    "str",
                    "int"
                ]
            }
        },
        "serialize_mat": {
            "name": "serialize_mat",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "mat": [
                    "str",
                    "numpy.ndarray",
                    "bool"
                ],
                "mat_path": [
                    "str",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "deserialize_mat": {
            "name": "deserialize_mat",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "mat_path": [
                    "str"
                ]
            }
        }
    },
    "mobility_pipeline-master/mobility_pipeline/gen_country_matrices.py": {
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mobility_pipeline-master/mobility_pipeline/gen_day_mobility.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mobility_pipeline-master/mobility_pipeline/plot_voronoi.py": {
        "plot_polygon": {
            "name": "plot_polygon",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "axes": [
                    "int"
                ],
                "polygon": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mobility_pipeline-master/mobility_pipeline/visualize_overlaps.py": {
        "plot_polygon": {
            "name": "plot_polygon",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "axes": [
                    "str",
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "Tuple[str, dict]",
                    "bool"
                ],
                "polygon": [
                    "Optional[Tuple[int, ...]]",
                    "str",
                    "float"
                ],
                "color": [
                    "Optional[Tuple[int, ...]]",
                    "str",
                    "float"
                ],
                "_label": [
                    "Optional[Tuple[int, ...]]",
                    "str",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mobility_pipeline-master/mobility_pipeline/__init__.py": {},
    "mobility_pipeline-master/mobility_pipeline/lib/make_matrix.py": {
        "make_tower_tower_matrix": {
            "name": "make_tower_tower_matrix",
            "location": 45,
            "return": [
                "bool",
                "List[str]",
                "bytes",
                "float",
                "str"
            ],
            "arguments": {
                "mobility": [
                    "int",
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "float"
                ],
                "n_towers": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "FrozenSet[int]"
                ]
            }
        },
        "generate_rtree": {
            "name": "generate_rtree",
            "location": 74,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "polygons": [
                    "int",
                    "str"
                ]
            }
        },
        "make_a_to_b_matrix": {
            "name": "make_a_to_b_matrix",
            "location": 108,
            "return": [
                "int",
                "numpy.core.multiarray.ndarray",
                "numpy.ndarray",
                "Type",
                "set"
            ],
            "arguments": {
                "a_cells": [
                    "List[shapely.geometry.MultiPolygon]",
                    "Dict[str, int]",
                    "List['cirq.Circuit']",
                    "numpy.array",
                    "int",
                    "list",
                    "numpy.ndarray"
                ],
                "b_cells": [
                    "list",
                    "int",
                    "str",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "make_tower_to_admin_matrix": {
            "name": "make_tower_to_admin_matrix",
            "location": 139,
            "return": [
                "dict",
                "bytes",
                "Dict[str, str]",
                "str",
                "bool",
                "Dict[Tuple[int, ...], float]"
            ],
            "arguments": {
                "tower_cells": [
                    "List[shapely.geometry.MultiPolygon]",
                    "str",
                    "bytes",
                    "Union[bytes, bytearray]"
                ],
                "admin_cells": [
                    "List[shapely.geometry.MultiPolygon]",
                    "str",
                    "bytes",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "make_admin_to_tower_matrix": {
            "name": "make_admin_to_tower_matrix",
            "location": 157,
            "return": [
                "dict",
                "bytes",
                "Dict[str, str]",
                "str",
                "bool",
                "Dict[Tuple[int, ...], float]"
            ],
            "arguments": {
                "admin_cells": [
                    "List[shapely.geometry.MultiPolygon]",
                    "str",
                    "bytes",
                    "Union[bytes, bytearray]"
                ],
                "tower_cells": [
                    "List[shapely.geometry.MultiPolygon]",
                    "str",
                    "bytes",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "make_admin_admin_matrix": {
            "name": "make_admin_admin_matrix",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tower_tower": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tower_admin": [
                    "int",
                    "Callable",
                    "str"
                ],
                "admin_tower": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mobility_pipeline-master/mobility_pipeline/lib/overlap.py": {
        "compute_overlap": {
            "name": "compute_overlap",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "polygon_1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "polygon_2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mobility_pipeline-master/mobility_pipeline/lib/validate.py": {
        "all_numeric": {
            "name": "all_numeric",
            "location": 24,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Mapping[str, str]",
                    "List[List[str]]",
                    "dict"
                ]
            }
        },
        "validate_mobility": {
            "name": "validate_mobility",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "raw": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "validate_mobility_full": {
            "name": "validate_mobility_full",
            "location": 94,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "mobility": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "validate_tower_cells_aligned": {
            "name": "validate_tower_cells_aligned",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cells": [
                    "int",
                    "Callable",
                    "str"
                ],
                "towers": [
                    "numpy.ndarray",
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float",
                    "str"
                ]
            }
        },
        "validate_tower_index_name_aligned": {
            "name": "validate_tower_index_name_aligned",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "csv_reader": [
                    "Iterator",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Container[str]"
                ]
            }
        },
        "validate_contiguous_disjoint_cells": {
            "name": "validate_contiguous_disjoint_cells",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "cells": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "validate_admins": {
            "name": "validate_admins",
            "location": 210,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "country_id": [
                    "str",
                    "int"
                ]
            }
        },
        "validate_voronoi": {
            "name": "validate_voronoi",
            "location": 242,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "voronoi_path": [
                    "str"
                ]
            }
        }
    },
    "mobility_pipeline-master/mobility_pipeline/lib/voronoi.py": {
        "json_to_polygon": {
            "name": "json_to_polygon",
            "location": 18,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "points_json": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "load_cell": {
            "name": "load_cell",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cell_json": [
                    "bytes",
                    "str",
                    "list"
                ]
            }
        }
    },
    "mobility_pipeline-master/mobility_pipeline/lib/__init__.py": {},
    "mobility_pipeline-master/tests/__init__.py": {},
    "mobility_pipeline-master/tests/src/test_make_matrix.py": {
        "test_make_tower_tower_matrix_simple_full": {
            "name": "test_make_tower_tower_matrix_simple_full",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_tower_tower_matrix_simple_missing_rows": {
            "name": "test_make_tower_tower_matrix_simple_missing_rows",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_tower_tower_matrix_hypothesis": {
            "name": "test_make_tower_tower_matrix_hypothesis",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "nums": [
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "num": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "test_make_matrix_simple": {
            "name": "test_make_matrix_simple",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_tower_to_admin": {
            "name": "test_make_tower_to_admin",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_admin_to_tower": {
            "name": "test_make_admin_to_tower",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mobility_pipeline-master/tests/src/test_overlap.py": {
        "test_compute_overlap_simple": {
            "name": "test_compute_overlap_simple",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mobility_pipeline-master/tests/src/test_validate.py": {
        "test_validate_mobility_simple_full_valid": {
            "name": "test_validate_mobility_simple_full_valid",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_missing_row_valid": {
            "name": "test_validate_mobility_simple_missing_row_valid",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_malformed_ori_1_invalid": {
            "name": "test_validate_mobility_simple_malformed_ori_1_invalid",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_malformed_ori_2_invalid": {
            "name": "test_validate_mobility_simple_malformed_ori_2_invalid",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_malformed_dst_1_invalid": {
            "name": "test_validate_mobility_simple_malformed_dst_1_invalid",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_malformed_dst_2_invalid": {
            "name": "test_validate_mobility_simple_malformed_dst_2_invalid",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_malformed_count_1_invalid": {
            "name": "test_validate_mobility_simple_malformed_count_1_invalid",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_malformed_count_2_invalid": {
            "name": "test_validate_mobility_simple_malformed_count_2_invalid",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_malformed_count_3_invalid": {
            "name": "test_validate_mobility_simple_malformed_count_3_invalid",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_negative_count_invalid": {
            "name": "test_validate_mobility_simple_negative_count_invalid",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_unordered_1_invalid": {
            "name": "test_validate_mobility_simple_unordered_1_invalid",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_unordered_2_invalid": {
            "name": "test_validate_mobility_simple_unordered_2_invalid",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_simple_unordered_3_invalid": {
            "name": "test_validate_mobility_simple_unordered_3_invalid",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mobility_full_simple_missing_row_invalid": {
            "name": "test_validate_mobility_full_simple_missing_row_invalid",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mobility_pipeline-master/tests/src/test_voronoi.py": {
        "test_load_cell_polygon": {
            "name": "test_load_cell_polygon",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_cell_multipolygon": {
            "name": "test_load_cell_multipolygon",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mobility_pipeline-master/tests/src/__init__.py": {}
}
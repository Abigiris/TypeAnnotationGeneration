{
    "mockdock-master/setup.py": {},
    "mockdock-master/src/mockdock/dns.py": {
        "build_packet": {
            "name": "build_packet",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "dict",
                    "bool",
                    "List[str]"
                ],
                "ip": [
                    "bytes",
                    "memoryview",
                    "str"
                ]
            }
        }
    },
    "mockdock-master/src/mockdock/server.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "HttpResponse.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Optional[Dict]",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Iterable[dict]",
                    "dict"
                ],
                "code": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "content_type": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "HttpResponse.code_to_status": {
            "name": "code_to_status",
            "location": 47,
            "return": [
                "str",
                "int",
                "logging.LogRecord",
                "Union[str, Dict]",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Mapping[str, str]",
                    "Sequence[int]"
                ]
            }
        },
        "HttpResponse.to_message": {
            "name": "to_message",
            "location": 54,
            "return": [
                "bytes",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "config_path": [
                    "Optional[str]",
                    "Optional[TextIO]",
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "Config.response_for_path": {
            "name": "response_for_path",
            "location": 75,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "dict",
                    "List[dict]",
                    "int"
                ]
            }
        },
        "HttpRequest.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_bytes": [
                    "bytes",
                    "bool",
                    "dict",
                    "BinaryIO"
                ]
            }
        },
        "HttpRequest.parse": {
            "name": "parse",
            "location": 95,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable"
                ]
            }
        },
        "HttpRequest.__str__": {
            "name": "__str__",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DnsResolverProcess.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "redirect_ip": [
                    "str",
                    "Union[int, str, bool]",
                    "Type[object]"
                ],
                "port": [
                    "str",
                    "Union[int, str, bool]",
                    "Type[object]"
                ]
            }
        },
        "DnsResolverProcess.start_socket": {
            "name": "start_socket",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "redirect_ip": [
                    "int",
                    "T",
                    "str"
                ],
                "port": [
                    "int",
                    "str",
                    "Optional[float]",
                    "T"
                ]
            }
        },
        "ServerProcess.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str"
                ]
            }
        },
        "ServerProcess.start_socket": {
            "name": "start_socket",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ]
            }
        },
        "TlsServerProcess.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_certificate": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "ssl_key": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "port": [
                    "str",
                    "Optional[dict]",
                    "int"
                ]
            }
        }
    },
    "mockdock-master/src/mockdock/__init__.py": {
        "generate_certificate": {
            "name": "generate_certificate",
            "location": 10,
            "return": [
                "dict",
                "str",
                "OrderedDict",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "domains": [
                    "List[str]",
                    "str",
                    "float",
                    "int",
                    "Container"
                ]
            }
        },
        "install_certificate_debian": {
            "name": "install_certificate_debian",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cert": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "container": [
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "get_docker_options": {
            "name": "get_docker_options",
            "location": 60,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "cert_path": [
                    "str"
                ],
                "key_path": [
                    "str"
                ]
            }
        }
    },
    "mockdock-master/tests/integration_test.py": {
        "IntegrationTest.test_server": {
            "name": "test_server",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationTest.test_install_certificate": {
            "name": "test_install_certificate",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mockdock-master/tests/test_dns.py": {
        "DNSTest.test_build_packet": {
            "name": "test_build_packet",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mockdock-master/tests/test_mockdock.py": {
        "MockDockTest.test_generate_certificate": {
            "name": "test_generate_certificate",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockDockTest.test_get_docker_options": {
            "name": "test_get_docker_options",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mockdock-master/tests/test_server.py": {
        "HttpResponseTest.test_code_to_status_OK": {
            "name": "test_code_to_status_OK",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseTest.test_code_to_status_not_found": {
            "name": "test_code_to_status_not_found",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseTest.test_code_to_status_default": {
            "name": "test_code_to_status_default",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpResponseTest.test_to_message": {
            "name": "test_to_message",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_init_data": {
            "name": "test_init_data",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_init_path": {
            "name": "test_init_path",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_init_data_and_path": {
            "name": "test_init_data_and_path",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_init_no_data": {
            "name": "test_init_no_data",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_response_for_path": {
            "name": "test_response_for_path",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_response_for_path_not_found": {
            "name": "test_response_for_path_not_found",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequestTest.test_parse": {
            "name": "test_parse",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequestTest.test_parse_host_with_port": {
            "name": "test_parse_host_with_port",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequestTest.test_parse_invalid_unicode": {
            "name": "test_parse_invalid_unicode",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpRequestTest.test_parse_malformed_request_string": {
            "name": "test_parse_malformed_request_string",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
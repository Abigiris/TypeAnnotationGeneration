{
    "mode-master/setup.py": {
        "add_default": {
            "name": "add_default",
            "location": 52,
            "return": [
                "str",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "m": [
                    "str",
                    "dict"
                ]
            }
        },
        "add_doc": {
            "name": "add_doc",
            "location": 57,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "m": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "strip_comments": {
            "name": "strip_comments",
            "location": 76,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "l": [
                    "str"
                ]
            }
        },
        "_pip_requirement": {
            "name": "_pip_requirement",
            "location": 80,
            "return": [
                "str",
                "pathlib.Path",
                "tuple"
            ],
            "arguments": {
                "req": [
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "_reqs": {
            "name": "_reqs",
            "location": 87,
            "return": [
                "str",
                "List[str]",
                "list",
                "Union[List[str], str]"
            ],
            "arguments": {}
        },
        "reqs": {
            "name": "reqs",
            "location": 93,
            "return": [
                "str",
                "int",
                "List[Tuple[str, str]]",
                "Sequence[int]",
                "list",
                "List[str]"
            ],
            "arguments": {}
        },
        "extras": {
            "name": "extras",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "extras_require": {
            "name": "extras_require",
            "location": 102,
            "return": [
                "Dict[int, int]",
                "str",
                "float",
                "Dict[str, float]"
            ],
            "arguments": {}
        },
        "_pyimp": {
            "name": "_pyimp",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "mode-master/docs/conf.py": {},
    "mode-master/examples/service.py": {},
    "mode-master/examples/tutorial.py": {
        "remove_expired_users": {
            "name": "remove_expired_users",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "d": [
                    "str",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "Websockets.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Webserver.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "bool",
                    "float"
                ],
                "bind": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UserCache.__post_init__": {
            "name": "__post_init__",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "App.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web_port": [
                    "int",
                    "str",
                    "bool"
                ],
                "web_bind": [
                    "int",
                    "bool",
                    "float"
                ],
                "websocket_port": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "App.on_init_dependencies": {
            "name": "on_init_dependencies",
            "location": 111,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.websockets": {
            "name": "websockets",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.webserver": {
            "name": "webserver",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.user_cache": {
            "name": "user_cache",
            "location": 147,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/debug.py": {
        "arm_alarm": {
            "name": "arm_alarm",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BlockingDetector.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "Union[float, int]",
                    "int"
                ],
                "raises": [
                    "str",
                    "mypy.types.AnyType"
                ]
            }
        },
        "BlockingDetector._reset_signal": {
            "name": "_reset_signal",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockingDetector._clear_signal": {
            "name": "_clear_signal",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockingDetector._arm": {
            "name": "_arm",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "BlockingDetector._on_alarm": {
            "name": "_on_alarm",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "mode-master/mode/exceptions.py": {},
    "mode-master/mode/locals.py": {
        "_default_cls_attr": {
            "name": "_default_cls_attr",
            "location": 167,
            "return": [
                "Mapping[str, Any]",
                "Iterator[Dict[str, str]]",
                "type",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Type",
                    "bool"
                ],
                "type_": [
                    "str",
                    "Type",
                    "bool"
                ],
                "cls_value": [
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "maybe_evaluate": {
            "name": "maybe_evaluate",
            "location": 850,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_default_cls_attr.__new__": {
            "name": "__new__",
            "location": 177,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[Any]",
                    "Set[str]",
                    "dict",
                    "Collection[str]",
                    "Dict[str, Any]"
                ],
                "getter": [
                    "Callable",
                    "opentrons.types.Mount",
                    "int",
                    "str"
                ]
            }
        },
        "_default_cls_attr.__get__": {
            "name": "__get__",
            "location": 182,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "obj": [
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "cls": [
                    "bool",
                    "int",
                    "str",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "Proxy.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Tuple[List[str], Optional[Any]]",
                    "Type[T]",
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[str]",
                    "Optional[Exception]"
                ]
            }
        },
        "Proxy._init_from_source": {
            "name": "_init_from_source",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "types.ModuleType",
                    "List[mypy.types.Instance]"
                ],
                "source": [
                    "List[mypy.types.Instance]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Proxy._generate_proxy_method": {
            "name": "_generate_proxy_method",
            "location": 226,
            "return": [
                "int",
                "List[str]",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]"
                ],
                "source": [
                    "str",
                    "Type[T]"
                ],
                "method_name": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "Proxy.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local": [
                    "str",
                    "Callable",
                    "Callable[[], bool]"
                ],
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[bytes]",
                    "Optional[Iterable[str]]"
                ],
                "cache": [
                    "str",
                    "bytes"
                ],
                "__doc__": [
                    "Optional[str]",
                    "str",
                    "Optional[bytes]",
                    "Optional[Iterable[str]]",
                    "bool"
                ]
            }
        },
        "Proxy._add_proxy_finalizer": {
            "name": "_add_proxy_finalizer",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "float",
                    "mypy.types.Instance",
                    "int"
                ]
            }
        },
        "Proxy._call_proxy_finalizers": {
            "name": "_call_proxy_finalizers",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__name__": {
            "name": "__name__",
            "location": 266,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__module__": {
            "name": "__module__",
            "location": 274,
            "return": [
                "str",
                "BaseException",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__doc__": {
            "name": "__doc__",
            "location": 279,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy._get_class": {
            "name": "_get_class",
            "location": 282,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__class__": {
            "name": "__class__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "Type[T]",
                    "bool",
                    "Type",
                    "Dict[str, bool]"
                ]
            }
        },
        "Proxy._get_current_object": {
            "name": "_get_current_object",
            "location": 293,
            "return": [
                "str",
                "int",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__evaluate__": {
            "name": "__evaluate__",
            "location": 305,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "_clean": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Proxy._evaluate_proxy": {
            "name": "_evaluate_proxy",
            "location": 321,
            "return": [
                "int",
                "bool",
                "List[int]",
                "raiden.utils.BlockHash",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__evaluated__": {
            "name": "__evaluated__",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__maybe_evaluate__": {
            "name": "__maybe_evaluate__",
            "location": 339,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__dict__": {
            "name": "__dict__",
            "location": 343,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__repr__": {
            "name": "__repr__",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__bool__": {
            "name": "__bool__",
            "location": 356,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__dir__": {
            "name": "__dir__",
            "location": 363,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__getattr__": {
            "name": "__getattr__",
            "location": 369,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "cmk.utils.type_defs.UserId",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Proxy.__eq__": {
            "name": "__eq__",
            "location": 374,
            "return": [
                "str",
                "int",
                "BaseException",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Proxy.__ne__": {
            "name": "__ne__",
            "location": 377,
            "return": [
                "str",
                "int",
                "BaseException",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Proxy.__setattr__": {
            "name": "__setattr__",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "Optional[str]"
                ]
            }
        },
        "Proxy.__delattr__": {
            "name": "__delattr__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Proxy.__str__": {
            "name": "__str__",
            "location": 386,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__hash__": {
            "name": "__hash__",
            "location": 389,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__reduce__": {
            "name": "__reduce__",
            "location": 392,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitableRole._get_awaitable": {
            "name": "_get_awaitable",
            "location": 399,
            "return": [
                "int",
                "List[int]",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwaitableRole.__await__": {
            "name": "__await__",
            "location": 403,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoroutineRole._get_coroutine": {
            "name": "_get_coroutine",
            "location": 414,
            "return": [
                "bool",
                "int",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoroutineRole.__await__": {
            "name": "__await__",
            "location": 418,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoroutineRole.send": {
            "name": "send",
            "location": 421,
            "return": [
                "str",
                "BaseException",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "CoroutineRole.throw": {
            "name": "throw",
            "location": 424,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "Callable",
                    "str"
                ],
                "val": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tb": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CoroutineRole.close": {
            "name": "close",
            "location": 430,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIterableRole._get_iterable": {
            "name": "_get_iterable",
            "location": 442,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIterableRole.__aiter__": {
            "name": "__aiter__",
            "location": 446,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIteratorRole._get_iterator": {
            "name": "_get_iterator",
            "location": 458,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIteratorRole.__aiter__": {
            "name": "__aiter__",
            "location": 462,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIteratorRole.__anext__": {
            "name": "__anext__",
            "location": 465,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncGeneratorRole._get_generator": {
            "name": "_get_generator",
            "location": 477,
            "return": [
                "bool",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncGeneratorRole.__anext__": {
            "name": "__anext__",
            "location": 481,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncGeneratorRole.asend": {
            "name": "asend",
            "location": 484,
            "return": [
                "str",
                "BaseException",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "AsyncGeneratorRole.athrow": {
            "name": "athrow",
            "location": 487,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "Callable",
                    "str"
                ],
                "val": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tb": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AsyncGeneratorRole.aclose": {
            "name": "aclose",
            "location": 493,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncGeneratorRole.__aiter__": {
            "name": "__aiter__",
            "location": 496,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceRole._get_sequence": {
            "name": "_get_sequence",
            "location": 508,
            "return": [
                "int",
                "List[int]",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceRole.__getitem__": {
            "name": "__getitem__",
            "location": 520,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SequenceRole.index": {
            "name": "index",
            "location": 523,
            "return": [
                "bool",
                "Optional[cmk.utils.type_defs.HostName]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "bytes"
                ]
            }
        },
        "SequenceRole.count": {
            "name": "count",
            "location": 526,
            "return": [
                "str",
                "BaseException",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Union[int, float, str]",
                    "Union[str, float]"
                ]
            }
        },
        "SequenceRole.__contains__": {
            "name": "__contains__",
            "location": 529,
            "return": [
                "str",
                "BaseException",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "SequenceRole.__iter__": {
            "name": "__iter__",
            "location": 532,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "bool",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceRole.__reversed__": {
            "name": "__reversed__",
            "location": 535,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceRole.__len__": {
            "name": "__len__",
            "location": 538,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableSequenceRole._get_sequence": {
            "name": "_get_sequence",
            "location": 550,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableSequenceRole.insert": {
            "name": "insert",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int"
                ],
                "object": [
                    "str",
                    "int"
                ]
            }
        },
        "MutableSequenceRole.__setitem__": {
            "name": "__setitem__",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index_or_slice": [],
                "o": []
            }
        },
        "MutableSequenceRole.__delitem__": {
            "name": "__delitem__",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "MutableSequenceRole.append": {
            "name": "append",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ]
            }
        },
        "MutableSequenceRole.extend": {
            "name": "extend",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "List[str]",
                    "list",
                    "Iterable[float]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MutableSequenceRole.reverse": {
            "name": "reverse",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableSequenceRole.pop": {
            "name": "pop",
            "location": 588,
            "return": [
                "str",
                "BaseException",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableSequenceRole.remove": {
            "name": "remove",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MutableSequenceRole.__iadd__": {
            "name": "__iadd__",
            "location": 594,
            "return": [
                "str",
                "BaseException",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "SetRole._get_set": {
            "name": "_get_set",
            "location": 606,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetRole.__le__": {
            "name": "__le__",
            "location": 610,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "SetRole.__lt__": {
            "name": "__lt__",
            "location": 613,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "SetRole.__gt__": {
            "name": "__gt__",
            "location": 616,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "SetRole.__ge__": {
            "name": "__ge__",
            "location": 619,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "SetRole.__and__": {
            "name": "__and__",
            "location": 622,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "AbstractSet[Any]",
                    "AbstractSet[T]",
                    "str",
                    "T",
                    "KT"
                ]
            }
        },
        "SetRole.__or__": {
            "name": "__or__",
            "location": 625,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "AbstractSet[Any]",
                    "AbstractSet[T]",
                    "str",
                    "T",
                    "KT"
                ]
            }
        },
        "SetRole.__sub__": {
            "name": "__sub__",
            "location": 628,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "SetRole.__xor__": {
            "name": "__xor__",
            "location": 631,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "SetRole.isdisjoint": {
            "name": "isdisjoint",
            "location": 634,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "SetRole.__contains__": {
            "name": "__contains__",
            "location": 637,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T",
                    "int",
                    "Type",
                    "bool"
                ]
            }
        },
        "SetRole.__iter__": {
            "name": "__iter__",
            "location": 640,
            "return": [
                "str",
                "OrderedDict",
                "bool",
                "Dict[str, str]",
                "int",
                "bytes",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetRole.__len__": {
            "name": "__len__",
            "location": 643,
            "return": [
                "int",
                "bool",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableSetRole._get_set": {
            "name": "_get_set",
            "location": 655,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableSetRole.add": {
            "name": "add",
            "location": 659,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T",
                    "Optional[List[str]]",
                    "list"
                ]
            }
        },
        "MutableSetRole.discard": {
            "name": "discard",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T",
                    "int",
                    "Type",
                    "bool"
                ]
            }
        },
        "MutableSetRole.clear": {
            "name": "clear",
            "location": 665,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableSetRole.pop": {
            "name": "pop",
            "location": 668,
            "return": [
                "int",
                "bool",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableSetRole.remove": {
            "name": "remove",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Dict[str, Any]",
                    "list",
                    "str",
                    "dict",
                    "List[Union[str, \"SqlFile\"]]",
                    "T"
                ]
            }
        },
        "MutableSetRole.__ior__": {
            "name": "__ior__",
            "location": 674,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "MutableSetRole.__iand__": {
            "name": "__iand__",
            "location": 677,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "MutableSetRole.__ixor__": {
            "name": "__ixor__",
            "location": 680,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "MutableSetRole.__isub__": {
            "name": "__isub__",
            "location": 683,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Union[str, Sequence[str]]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[apps.monero.xmr.types.Sc25519]",
                    "bool"
                ]
            }
        },
        "ContextManagerRole._get_context": {
            "name": "_get_context",
            "location": 695,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextManagerRole.__enter__": {
            "name": "__enter__",
            "location": 699,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextManagerRole.__exit__": {
            "name": "__exit__",
            "location": 702,
            "return": [
                "int",
                "Callable",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncContextManagerRole.__aenter__": {
            "name": "__aenter__",
            "location": 714,
            "return": [
                "str",
                "utils.Node",
                "int",
                "Iterable[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncContextManagerRole.__aexit__": {
            "name": "__aexit__",
            "location": 718,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "exc_value": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "traceback": [
                    "Type[BaseException]",
                    "BaseException"
                ]
            }
        },
        "MappingRole._get_mapping": {
            "name": "_get_mapping",
            "location": 736,
            "return": [
                "str",
                "Optional[Mapping[str, Any]]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MappingRole.__getitem__": {
            "name": "__getitem__",
            "location": 740,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[int]",
                    "Callable",
                    "Optional[apps.monero.xmr.types.Sc25519]"
                ]
            }
        },
        "MappingRole.get": {
            "name": "get",
            "location": 752,
            "return": [
                "Optional[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "Optional[Any]",
                "Callable[[], T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MappingRole.items": {
            "name": "items",
            "location": 755,
            "return": [
                "dict",
                "str",
                "Dict[str, float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MappingRole.keys": {
            "name": "keys",
            "location": 758,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MappingRole.values": {
            "name": "values",
            "location": 761,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Union[Any, str]]",
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MappingRole.__contains__": {
            "name": "__contains__",
            "location": 764,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "str",
                "cmk.utils.type_defs.UserId",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "tuple",
                    "Set[int]",
                    "List[int]",
                    "Optional[int]"
                ]
            }
        },
        "MappingRole.__iter__": {
            "name": "__iter__",
            "location": 767,
            "return": [
                "int",
                "str",
                "bool",
                "List[Dict[str, Any]]",
                "types.solution_T"
            ],
            "arguments": {
                "self": []
            }
        },
        "MappingRole.__len__": {
            "name": "__len__",
            "location": 770,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "str",
                "cmk.utils.type_defs.UserId",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableMappingRole._get_mapping": {
            "name": "_get_mapping",
            "location": 782,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableMappingRole.__setitem__": {
            "name": "__setitem__",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "KT"
                ],
                "value": [
                    "str",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "KT"
                ]
            }
        },
        "MutableMappingRole.__delitem__": {
            "name": "__delitem__",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[int]",
                    "Callable",
                    "Optional[apps.monero.xmr.types.Sc25519]"
                ]
            }
        },
        "MutableMappingRole.clear": {
            "name": "clear",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableMappingRole.pop": {
            "name": "pop",
            "location": 804,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableMappingRole.popitem": {
            "name": "popitem",
            "location": 807,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "str",
                "cmk.utils.type_defs.UserId",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableMappingRole.setdefault": {
            "name": "setdefault",
            "location": 810,
            "return": [
                "bool",
                "Optional[str]",
                "Callable[..., None]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bool",
                    "Callable",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "MutableMappingRole.update": {
            "name": "update",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableRole._get_callable": {
            "name": "_get_callable",
            "location": 838,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallableRole.__call__": {
            "name": "__call__",
            "location": 842,
            "return": [
                "Optional[Iterable[Any]]",
                "type",
                "bool",
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proxy._generate_proxy_method._classmethod": {
            "name": "_classmethod",
            "location": 230,
            "return": [
                "str",
                "type",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/proxy.py": {
        "ServiceProxy._service": {
            "name": "_service",
            "location": 34,
            "return": [
                "types.ServiceT"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceProxy.add_dependency": {
            "name": "add_dependency",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int"
                ]
            }
        },
        "ServiceProxy.add_context": {
            "name": "add_context",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "ServiceProxy._crash": {
            "name": "_crash",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ServiceProxy.service_reset": {
            "name": "service_reset",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceProxy.set_shutdown": {
            "name": "set_shutdown",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceProxy.started": {
            "name": "started",
            "location": 77,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool",
                "types.signals.SignalHandlerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceProxy.crashed": {
            "name": "crashed",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceProxy.should_stop": {
            "name": "should_stop",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceProxy.state": {
            "name": "state",
            "location": 89,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceProxy.label": {
            "name": "label",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceProxy.shortlabel": {
            "name": "shortlabel",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceProxy.beacon": {
            "name": "beacon",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beacon": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ServiceProxy.crash_reason": {
            "name": "crash_reason",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mode-master/mode/services.py": {
        "ServiceBase.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceBase._init_subclass_logger": {
            "name": "_init_subclass_logger",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[float]",
                    "logging.Logger",
                    "bool"
                ]
            }
        },
        "ServiceBase.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceBase._format_log": {
            "name": "_format_log",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "str",
                    "int",
                    "Set[cmk.utils.type_defs.HostName]"
                ],
                "msg": [
                    "logging.LogRecord",
                    "bytes",
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "list"
                ]
            }
        },
        "ServiceBase.__repr__": {
            "name": "__repr__",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceBase._repr_info": {
            "name": "_repr_info",
            "location": 138,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceBase._repr_name": {
            "name": "_repr_name",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceBase.loop": {
            "name": "loop",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Diag.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Diag.set_flag": {
            "name": "set_flag",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "bool",
                    "Iterable[Hashable]",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "Diag.unset_flag": {
            "name": "unset_flag",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "str",
                    "List[str]",
                    "Callable",
                    "float"
                ]
            }
        },
        "ServiceTask.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Callable[..., None]"
                ]
            }
        },
        "ServiceTask.__repr__": {
            "name": "__repr__",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.from_awaitable": {
            "name": "from_awaitable",
            "location": 406,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "coro": [
                    "str",
                    "Awaitable",
                    "int",
                    "cmk.utils.type_defs.HostName",
                    "List[str]"
                ]
            }
        },
        "Service.task": {
            "name": "task",
            "location": 412,
            "return": [
                "bytes",
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "List[str]",
                    "T",
                    "Iterable"
                ],
                "fun": [
                    "Callable[[Any], Awaitable[None]]",
                    "str",
                    "dict",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "Service.timer": {
            "name": "timer",
            "location": 427,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "interval": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Service.transitions_to": {
            "name": "transitions_to",
            "location": 451,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "SupportsFloat",
                    "bool",
                    "Literal[False]"
                ],
                "flag": [
                    "str",
                    "SupportsFloat",
                    "bool",
                    "Literal[False]"
                ]
            }
        },
        "Service.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service._init_subclass_tasks": {
            "name": "_init_subclass_tasks",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str",
                    "dict",
                    "Type",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ]
            }
        },
        "Service._get_tasks": {
            "name": "_get_tasks",
            "location": 493,
            "return": [
                "typing.Iterable[ServiceTask]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service._get_class_id": {
            "name": "_get_class_id",
            "location": 505,
            "return": [
                "str",
                "Dict[str, type]",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "core.D.Event",
                    "Exception"
                ]
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service._new_started_event": {
            "name": "_new_started_event",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Service._new_stopped_event": {
            "name": "_new_stopped_event",
            "location": 531,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service._new_shutdown_event": {
            "name": "_new_shutdown_event",
            "location": 534,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service._new_crashed_event": {
            "name": "_new_crashed_event",
            "location": 537,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.add_dependency": {
            "name": "add_dependency",
            "location": 548,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "Optional[bytes]",
                    "Optional[\"Outcome\"]",
                    "types.ServiceT",
                    "Optional[int]"
                ]
            }
        },
        "Service.add_context": {
            "name": "add_context",
            "location": 580,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "ContextManager",
                    "dict"
                ]
            }
        },
        "Service.add_future": {
            "name": "add_future",
            "location": 588,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "Service._get_task_name": {
            "name": "_get_task_name",
            "location": 603,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "bool",
                    "int",
                    "Tuple[int]",
                    "Type"
                ]
            }
        },
        "Service.tracebacks": {
            "name": "tracebacks",
            "location": 609,
            "return": [
                "str",
                "list",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.human_tracebacks": {
            "name": "human_tracebacks",
            "location": 616,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service._on_future_done": {
            "name": "_on_future_done",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "int",
                    "float",
                    "raiden.utils.SecretHash",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Service.__post_init__": {
            "name": "__post_init__",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.on_init": {
            "name": "on_init",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.on_init_dependencies": {
            "name": "on_init_dependencies",
            "location": 635,
            "return": [
                "str",
                "bool",
                "int",
                "apistar.types.RouteConfig"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service._log_mundane": {
            "name": "_log_mundane",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "Service._crash": {
            "name": "_crash",
            "location": 851,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "Dict[str, Any]",
                    "Union[str, Dict]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "Service._stopped_set": {
            "name": "_stopped_set",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.service_reset": {
            "name": "service_reset",
            "location": 949,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.set_shutdown": {
            "name": "set_shutdown",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.started": {
            "name": "started",
            "location": 1020,
            "return": [
                "list",
                "str",
                "Callable[[KT], VT]",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.crashed": {
            "name": "crashed",
            "location": 1025,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.should_stop": {
            "name": "should_stop",
            "location": 1029,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.state": {
            "name": "state",
            "location": 1034,
            "return": [
                "bytes",
                "str",
                "Optional[Union[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.label": {
            "name": "label",
            "location": 1048,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.shortlabel": {
            "name": "shortlabel",
            "location": 1053,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.beacon": {
            "name": "beacon",
            "location": 1063,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beacon": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Service.crash_reason": {
            "name": "crash_reason",
            "location": 1071,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_AwaitableService.__init__": {
            "name": "__init__",
            "location": 1084,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coro": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_AwaitableService._repr_name": {
            "name": "_repr_name",
            "location": 1109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.timer._decorate": {
            "name": "_decorate",
            "location": 439,
            "return": [],
            "arguments": {
                "fun": []
            }
        },
        "Service.transitions_to._decorate": {
            "name": "_decorate",
            "location": 453,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fun": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "mode-master/mode/signals.py": {
        "BaseSignal.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal.asdict": {
            "name": "asdict",
            "location": 58,
            "return": [
                "bool",
                "Dict[str, str]",
                "types.Snapshot",
                "Dict[str, float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal.clone": {
            "name": "clone",
            "location": 66,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal.with_default_sender": {
            "name": "with_default_sender",
            "location": 69,
            "return": [
                "Callable",
                "types.Resolver",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "float",
                    "bool",
                    "int",
                    "types.UUIDType"
                ]
            }
        },
        "BaseSignal._clone": {
            "name": "_clone",
            "location": 72,
            "return": [
                "Type[Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal._with_default_sender": {
            "name": "_with_default_sender",
            "location": 75,
            "return": [
                "int",
                "bool",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "BaseSignal.__set_name__": {
            "name": "__set_name__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "Union[str, None]"
                ],
                "name": [
                    "str",
                    "Union[str, None]"
                ]
            }
        },
        "BaseSignal.unpack_sender_from_args": {
            "name": "unpack_sender_from_args",
            "location": 97,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal.connect": {
            "name": "connect",
            "location": 108,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "BaseSignal._connect": {
            "name": "_connect",
            "location": 113,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "BaseSignal.disconnect": {
            "name": "disconnect",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "mypy.types.Instance",
                    "Callable[..., Awaitable]",
                    "starlette.types.Receive",
                    "starlette.types.Send"
                ]
            }
        },
        "BaseSignal.iter_receivers": {
            "name": "iter_receivers",
            "location": 142,
            "return": [
                "typing.Iterable[types.signals.SignalHandlerT]"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "BaseSignal._update_receivers": {
            "name": "_update_receivers",
            "location": 152,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "pywirelessmbus.utils.message.WMbusMessage",
                    "bool"
                ]
            }
        },
        "BaseSignal._get_live_receivers": {
            "name": "_get_live_receivers",
            "location": 159,
            "return": [
                "str",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "MutableSet[types.signals.SignalHandlerRefT]",
                    "bool"
                ]
            }
        },
        "BaseSignal._is_alive": {
            "name": "_is_alive",
            "location": 172,
            "return": [
                "Optional[Dict[str, Any]]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "types.signals.SignalHandlerRefT",
                    "bool",
                    "Optional[float]",
                    "float",
                    "raiden.utils.BlockIdentifier",
                    "Callable"
                ]
            }
        },
        "BaseSignal._create_ref": {
            "name": "_create_ref",
            "location": 180,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "types.signals.SignalHandlerT"
                ]
            }
        },
        "BaseSignal._create_id": {
            "name": "_create_id",
            "location": 186,
            "return": [
                "str",
                "int",
                "Dict[str, int]",
                "Union[None, int]",
                "List[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "int"
                ]
            }
        },
        "BaseSignal.ident": {
            "name": "ident",
            "location": 193,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal.label": {
            "name": "label",
            "location": 198,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignal.__repr__": {
            "name": "__repr__",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal.clone": {
            "name": "clone",
            "location": 222,
            "return": [
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal.with_default_sender": {
            "name": "with_default_sender",
            "location": 226,
            "return": [
                "Optional[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "float",
                    "bool",
                    "int",
                    "types.UUIDType"
                ]
            }
        },
        "SyncSignal.__call__": {
            "name": "__call__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSignal.send": {
            "name": "send",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSignal.clone": {
            "name": "clone",
            "location": 242,
            "return": [
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSignal.with_default_sender": {
            "name": "with_default_sender",
            "location": 246,
            "return": [
                "int",
                "str",
                "List[int]",
                "trezor.utils.Writer",
                "Dict[str, int]",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "float",
                    "bool",
                    "int",
                    "types.UUIDType"
                ]
            }
        }
    },
    "mode-master/mode/supervisors.py": {
        "SupervisorStrategy.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorStrategy.wakeup": {
            "name": "wakeup",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorStrategy.add": {
            "name": "add",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorStrategy._contribute_to_service": {
            "name": "_contribute_to_service",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "cmk.utils.type_defs.HostAddress",
                    "str"
                ]
            }
        },
        "SupervisorStrategy.discard": {
            "name": "discard",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorStrategy.insert": {
            "name": "insert",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Dict[str, Any]",
                    "str",
                    "Sequence[str]",
                    "types.solution_T",
                    "TextIO",
                    "Iterable[Sequence[str]]",
                    "int"
                ],
                "service": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "list",
                    "int"
                ]
            }
        },
        "SupervisorStrategy.service_operational": {
            "name": "service_operational",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SupervisorStrategy.label": {
            "name": "label",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrashingSupervisor._contribute_to_service": {
            "name": "_contribute_to_service",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "CrashingSupervisor.wakeup": {
            "name": "wakeup",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/threads.py": {
        "WorkerThread.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WorkerThread.run": {
            "name": "run",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerThread._set_stopped": {
            "name": "_set_stopped",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerThread.stop": {
            "name": "stop",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceThread.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceThread._new_shutdown_event": {
            "name": "_new_shutdown_event",
            "location": 154,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceThread._start_thread": {
            "name": "_start_thread",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceThread._stopped_set": {
            "name": "_stopped_set",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceThread.set_shutdown": {
            "name": "set_shutdown",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceThread.on_crash": {
            "name": "on_crash",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "asyncio.StreamWriter"
                ]
            }
        },
        "MethodQueueWorker.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method_queue": [
                    "services.shop.order.models.order_evenOrderEvent",
                    "Dict[str, Union[str, Set]]"
                ]
            }
        },
        "MethodQueueWorker.label": {
            "name": "label",
            "location": 313,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodQueue.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "str",
                    "List[str]",
                    "List['Photo']",
                    "Sequence[Any]",
                    "List[int]"
                ],
                "num_workers": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "MethodQueue._queue_put": {
            "name": "_queue_put",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "List[Dict[str, Any]]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "MethodQueue.label": {
            "name": "label",
            "location": 393,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueServiceThread.method_queue": {
            "name": "method_queue",
            "location": 409,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/timers.py": {
        "timer_intervals": {
            "name": "timer_intervals",
            "location": 149,
            "return": [
                "typing.Iterator[builtins.float]"
            ],
            "arguments": {
                "interval": [
                    "int",
                    "str",
                    "utils.types.Vec3D",
                    "Tuple[float, float, float]"
                ],
                "max_drift_correction": [
                    "int",
                    "str",
                    "utils.types.Vec3D",
                    "Tuple[float, float, float]"
                ],
                "name": [
                    "int",
                    "str",
                    "utils.types.Vec3D",
                    "Tuple[float, float, float]"
                ],
                "clock": [
                    "int",
                    "str",
                    "utils.types.Vec3D",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "str",
                    "int",
                    "float",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        },
        "Timer.adjust_interval": {
            "name": "adjust_interval",
            "location": 87,
            "return": [
                "Callable",
                "str",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "drift": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Timer.tick": {
            "name": "tick",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.on_before_yield": {
            "name": "on_before_yield",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/worker.py": {
        "exiting": {
            "name": "exiting",
            "location": 63,
            "return": [
                "typing.Iterator[None]"
            ],
            "arguments": {}
        },
        "_TupleAsListRepr.repr_tuple": {
            "name": "repr_tuple",
            "location": 56,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "level": [
                    "int",
                    "float"
                ]
            }
        },
        "Worker.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.say": {
            "name": "say",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]",
                    "bytes",
                    "hackathon.utils.utils.DataMessage"
                ]
            }
        },
        "Worker.carp": {
            "name": "carp",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "Worker._say": {
            "name": "_say",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO[Any]"
                ],
                "file": [
                    "str",
                    "Optional[str]"
                ],
                "end": [
                    "str",
                    "IO[Any]"
                ]
            }
        },
        "Worker.on_init_dependencies": {
            "name": "on_init_dependencies",
            "location": 167,
            "return": [
                "str",
                "bool",
                "int",
                "apistar.types.RouteConfig"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._setup_logging": {
            "name": "_setup_logging",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._redirect_stdouts": {
            "name": "_redirect_stdouts",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.on_setup_root_logger": {
            "name": "on_setup_root_logger",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "int",
                    "logging.Logger"
                ],
                "level": [
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "Worker.install_signal_handlers": {
            "name": "install_signal_handlers",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._install_signal_handlers_windows": {
            "name": "_install_signal_handlers_windows",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._install_signal_handlers_unix": {
            "name": "_install_signal_handlers_unix",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._on_sigint": {
            "name": "_on_sigint",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._on_sigterm": {
            "name": "_on_sigterm",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._on_win_sigterm": {
            "name": "_on_win_sigterm",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "int",
                    "List[str]"
                ],
                "frame": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Worker._on_sigusr1": {
            "name": "_on_sigusr1",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._on_sigusr2": {
            "name": "_on_sigusr2",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._enter_debugger": {
            "name": "_enter_debugger",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._schedule_shutdown": {
            "name": "_schedule_shutdown",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "float",
                    "bool"
                ]
            }
        },
        "Worker.execute_from_commandline": {
            "name": "execute_from_commandline",
            "location": 268,
            "return": [
                "utils.typing.NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.on_worker_shutdown": {
            "name": "on_worker_shutdown",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.stop_and_shutdown": {
            "name": "stop_and_shutdown",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._shutdown_loop": {
            "name": "_shutdown_loop",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._gather_all": {
            "name": "_gather_all",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._repr_info": {
            "name": "_repr_info",
            "location": 355,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.blocking_detector": {
            "name": "blocking_detector",
            "location": 359,
            "return": [
                "\"Block\""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/__init__.py": {
        "_module.__getattr__": {
            "name": "__getattr__",
            "location": 124,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "_module.__dir__": {
            "name": "__dir__",
            "location": 133,
            "return": [
                "list",
                "set",
                "List[object]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/loop/eventlet.py": {},
    "mode-master/mode/loop/gevent.py": {
        "Policy.get_event_loop": {
            "name": "get_event_loop",
            "location": 46,
            "return": [
                "Union[str, Dict[str, str]]",
                "int",
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/loop/uvloop.py": {},
    "mode-master/mode/loop/_gevent_loop.py": {
        "Loop.run_callback": {
            "name": "run_callback",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/loop/__init__.py": {
        "use": {
            "name": "use",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ]
            }
        }
    },
    "mode-master/mode/types/services.py": {
        "DiagT.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "DiagT.set_flag": {
            "name": "set_flag",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "str",
                    "List[Dict]",
                    "Callable[..., None]",
                    "List[Dict[str, Any]]",
                    "int",
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DiagT.unset_flag": {
            "name": "unset_flag",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "str",
                    "bool",
                    "Callable[[Any], T]",
                    "Dict[str, bool]",
                    "Callable",
                    "list",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "ServiceT.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT.add_dependency": {
            "name": "add_dependency",
            "location": 77,
            "return": [
                "'ServiceT'"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "ServiceT.add_context": {
            "name": "add_context",
            "location": 89,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "ServiceT._crash": {
            "name": "_crash",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ServiceT.service_reset": {
            "name": "service_reset",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT.set_shutdown": {
            "name": "set_shutdown",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT._repr_info": {
            "name": "_repr_info",
            "location": 129,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT.started": {
            "name": "started",
            "location": 134,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT.crashed": {
            "name": "crashed",
            "location": 139,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT.should_stop": {
            "name": "should_stop",
            "location": 144,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT.state": {
            "name": "state",
            "location": 149,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT.label": {
            "name": "label",
            "location": 154,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT.shortlabel": {
            "name": "shortlabel",
            "location": 159,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceT.beacon": {
            "name": "beacon",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beacon": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ServiceT.loop": {
            "name": "loop",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ServiceT.crash_reason": {
            "name": "crash_reason",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "mode-master/mode/types/signals.py": {
        "BaseSignalT.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignalT.clone": {
            "name": "clone",
            "location": 74,
            "return": [
                "'BaseSignalT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSignalT.with_default_sender": {
            "name": "with_default_sender",
            "location": 78,
            "return": [
                "'BaseSignalT'"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "BaseSignalT.connect": {
            "name": "connect",
            "location": 82,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseSignalT.disconnect": {
            "name": "disconnect",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SignalT.clone": {
            "name": "clone",
            "location": 107,
            "return": [
                "'SignalT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalT.with_default_sender": {
            "name": "with_default_sender",
            "location": 112,
            "return": [
                "'SignalT'"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "SyncSignalT.__call__": {
            "name": "__call__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "dict"
                ]
            }
        },
        "SyncSignalT.send": {
            "name": "send",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SyncSignalT.clone": {
            "name": "clone",
            "location": 129,
            "return": [
                "'SyncSignalT'"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSignalT.with_default_sender": {
            "name": "with_default_sender",
            "location": 134,
            "return": [
                "'SyncSignalT'"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "mode-master/mode/types/supervisors.py": {
        "SupervisorStrategyT.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorStrategyT.wakeup": {
            "name": "wakeup",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorStrategyT.add": {
            "name": "add",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorStrategyT.discard": {
            "name": "discard",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorStrategyT.service_operational": {
            "name": "service_operational",
            "location": 47,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "mode-master/mode/types/__init__.py": {},
    "mode-master/mode/utils/aiter.py": {
        "aiter": {
            "name": "aiter",
            "location": 60,
            "return": [
                "typing.AsyncIterator[T]"
            ],
            "arguments": {
                "it": [
                    "int",
                    "str",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "float"
                ]
            }
        },
        "_aiter_async": {
            "name": "_aiter_async",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "it": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "_aiter_iter": {
            "name": "_aiter_iter",
            "location": 78,
            "return": [
                "IO",
                "BaseException",
                "Awaitable"
            ],
            "arguments": {
                "it": [
                    "Iterable[T]",
                    "str",
                    "memoryview",
                    "int"
                ]
            }
        },
        "AsyncIterWrapper.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "it": [
                    "Awaitable[T]",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Iterable[Mapping[str, Any]]"
                ]
            }
        },
        "AsyncIterWrapper.__aiter__": {
            "name": "__aiter__",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncIterWrapper.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ARangeIterator.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ],
                "it": [
                    "int",
                    "Optional[dict]",
                    "dict",
                    "float"
                ]
            }
        },
        "_ARangeIterator.__aiter__": {
            "name": "__aiter__",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "arange.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "arange.count": {
            "name": "count",
            "location": 125,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "arange.index": {
            "name": "index",
            "location": 128,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "arange.__contains__": {
            "name": "__contains__",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "arange.__aiter__": {
            "name": "__aiter__",
            "location": 134,
            "return": [
                "str",
                "Optional[str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/utils/collections.py": {
        "force_mapping": {
            "name": "force_mapping",
            "location": 769,
            "return": [
                "int",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "m": [
                    "int",
                    "list",
                    "Union[Callable, None]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Heap.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Heap.pop": {
            "name": "pop",
            "location": 84,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Heap.push": {
            "name": "push",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Type[object]",
                    "Dict[str, Any]",
                    "T",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "Heap.pushpop": {
            "name": "pushpop",
            "location": 99,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Type[object]",
                    "Dict[str, Any]",
                    "T",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "Heap.replace": {
            "name": "replace",
            "location": 107,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Type[object]",
                    "Dict[str, Any]",
                    "T",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "Heap.nlargest": {
            "name": "nlargest",
            "location": 122,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bytes",
                    "Tuple[str, str]"
                ],
                "key": [
                    "Callable",
                    "int",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "Heap.nsmallest": {
            "name": "nsmallest",
            "location": 129,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bytes",
                    "Tuple[str, str]"
                ],
                "key": [
                    "Callable",
                    "int",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "Heap.insert": {
            "name": "insert",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ],
                "object": [
                    "str"
                ]
            }
        },
        "Heap.__str__": {
            "name": "__str__",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.__repr__": {
            "name": "__repr__",
            "location": 142,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.__getitem__": {
            "name": "__getitem__",
            "location": 153,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "IO",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "Heap.__setitem__": {
            "name": "__setitem__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index_or_slice": [
                    "Iterable[List[T]]",
                    "bool",
                    "Iterable[T]"
                ],
                "o": [
                    "Iterable[List[T]]",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "Heap.__delitem__": {
            "name": "__delitem__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "Heap.__len__": {
            "name": "__len__",
            "location": 178,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserDict.fromkeys": {
            "name": "fromkeys",
            "location": 192,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "iterable": [
                    "VT",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "int",
                    "bool"
                ],
                "value": [
                    "VT",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "FastUserDict.__getitem__": {
            "name": "__getitem__",
            "location": 199,
            "return": [
                "Dict[str, str]",
                "Set[cmk.utils.type_defs.HostName]",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]",
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "FastUserDict.__setitem__": {
            "name": "__setitem__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ]
            }
        },
        "FastUserDict.__delitem__": {
            "name": "__delitem__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "FastUserDict.__len__": {
            "name": "__len__",
            "location": 212,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserDict.__iter__": {
            "name": "__iter__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FastUserDict.__contains__": {
            "name": "__contains__",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Callable[[T], bool]"
                ]
            }
        },
        "FastUserDict.__repr__": {
            "name": "__repr__",
            "location": 223,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserDict.copy": {
            "name": "copy",
            "location": 226,
            "return": [
                "dict",
                "bytes",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserDict.update": {
            "name": "update",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserDict.clear": {
            "name": "clear",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserDict.items": {
            "name": "items",
            "location": 235,
            "return": [
                "dict",
                "Iterable[str]",
                "str",
                "IO[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserDict.keys": {
            "name": "keys",
            "location": 238,
            "return": [
                "str",
                "Optional[str]",
                "Mapping",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserDict.values": {
            "name": "values",
            "location": 241,
            "return": [
                "int",
                "dict",
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.__and__": {
            "name": "__and__",
            "location": 252,
            "return": [
                "bool",
                "bytes",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet",
                    "AbstractSet[Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "FastUserSet.__contains__": {
            "name": "__contains__",
            "location": 255,
            "return": [
                "str",
                "Dict[str, str]",
                "Mapping",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FastUserSet.__ge__": {
            "name": "__ge__",
            "location": 258,
            "return": [
                "str",
                "bool",
                "Optional[float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.__iter__": {
            "name": "__iter__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.__le__": {
            "name": "__le__",
            "location": 264,
            "return": [
                "str",
                "bool",
                "Optional[float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.__len__": {
            "name": "__len__",
            "location": 267,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.__or__": {
            "name": "__or__",
            "location": 270,
            "return": [
                "str",
                "bool",
                "Optional[float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "float"
                ]
            }
        },
        "FastUserSet.__rand__": {
            "name": "__rand__",
            "location": 273,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "FastUserSet.__reduce__": {
            "name": "__reduce__",
            "location": 276,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.__reduce_ex__": {
            "name": "__reduce_ex__",
            "location": 279,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "str",
                    "raiden.utils.Any"
                ]
            }
        },
        "FastUserSet.__repr__": {
            "name": "__repr__",
            "location": 282,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.__ror__": {
            "name": "__ror__",
            "location": 285,
            "return": [
                "bool",
                "bytes",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "FastUserSet.__rsub__": {
            "name": "__rsub__",
            "location": 288,
            "return": [
                "int",
                "bool",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "Union[list, 'ListProxy']"
                ]
            }
        },
        "FastUserSet.__rxor__": {
            "name": "__rxor__",
            "location": 291,
            "return": [
                "int",
                "bool",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "Union[list, 'ListProxy']"
                ]
            }
        },
        "FastUserSet.__sizeof__": {
            "name": "__sizeof__",
            "location": 294,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.__str__": {
            "name": "__str__",
            "location": 297,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.__sub__": {
            "name": "__sub__",
            "location": 300,
            "return": [
                "bool",
                "bytes",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "FastUserSet.__xor__": {
            "name": "__xor__",
            "location": 303,
            "return": [
                "bool",
                "bytes",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "FastUserSet.copy": {
            "name": "copy",
            "location": 306,
            "return": [
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "IO[bytes]",
                "str",
                "Set[cmk.utils.type_defs.HostName]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.difference": {
            "name": "difference",
            "location": 309,
            "return": [
                "str",
                "bool",
                "Optional[float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.intersection": {
            "name": "intersection",
            "location": 312,
            "return": [
                "str",
                "bool",
                "Optional[float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.isdisjoint": {
            "name": "isdisjoint",
            "location": 315,
            "return": [
                "str",
                "bool",
                "Optional[float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.issubset": {
            "name": "issubset",
            "location": 318,
            "return": [
                "str",
                "bool",
                "Optional[float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.issuperset": {
            "name": "issuperset",
            "location": 321,
            "return": [
                "str",
                "bool",
                "Optional[float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 324,
            "return": [
                "bool",
                "int",
                "bytes",
                "Dict[str, Any]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "Generator",
                    "str"
                ]
            }
        },
        "FastUserSet.union": {
            "name": "union",
            "location": 329,
            "return": [
                "bool",
                "bytes",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Optional[AbstractSet[str]]",
                    "Union[int, float]",
                    "Iterable[Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FastUserSet.__iand__": {
            "name": "__iand__",
            "location": 334,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.__ior__": {
            "name": "__ior__",
            "location": 338,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.__isub__": {
            "name": "__isub__",
            "location": 342,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.__ixor__": {
            "name": "__ixor__",
            "location": 346,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "FastUserSet.add": {
            "name": "add",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "T",
                    "str",
                    "Sequence[T]"
                ]
            }
        },
        "FastUserSet.clear": {
            "name": "clear",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.difference_update": {
            "name": "difference_update",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "FrozenSet[int]",
                    "str",
                    "float"
                ]
            }
        },
        "FastUserSet.discard": {
            "name": "discard",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FastUserSet.intersection_update": {
            "name": "intersection_update",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "FrozenSet[int]",
                    "str",
                    "float"
                ]
            }
        },
        "FastUserSet.pop": {
            "name": "pop",
            "location": 365,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastUserSet.remove": {
            "name": "remove",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FastUserSet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsInt",
                    "Tuple[int, int]"
                ]
            }
        },
        "FastUserSet.update": {
            "name": "update",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MappingViewProxy._keys": {
            "name": "_keys",
            "location": 385,
            "return": [
                "typing.Iterator[KT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MappingViewProxy._values": {
            "name": "_values",
            "location": 389,
            "return": [
                "typing.Iterator[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MappingViewProxy._items": {
            "name": "_items",
            "location": 393,
            "return": [
                "typing.Iterator[typing.Tuple[KT, VT]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyKeysView.__init__": {
            "name": "__init__",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "ProxyKeysView.__iter__": {
            "name": "__iter__",
            "location": 402,
            "return": [
                "str",
                "Dict[str, Any]",
                "Sequence[str]",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyValuesView.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ProxyValuesView.__iter__": {
            "name": "__iter__",
            "location": 411,
            "return": [
                "typing.Iterator[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyItemsView.__init__": {
            "name": "__init__",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Sequence[MutableSet[int]]",
                    "str"
                ]
            }
        },
        "ProxyItemsView.__iter__": {
            "name": "__iter__",
            "location": 420,
            "return": [
                "typing.Iterator[typing.Tuple[KT, VT]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__init__": {
            "name": "__init__",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LRUCache.__getitem__": {
            "name": "__getitem__",
            "location": 449,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LRUCache.update": {
            "name": "update",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.popitem": {
            "name": "popitem",
            "location": 463,
            "return": [
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__setitem__": {
            "name": "__setitem__",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT",
                    "T"
                ]
            }
        },
        "LRUCache.__iter__": {
            "name": "__iter__",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.keys": {
            "name": "keys",
            "location": 477,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache._keys": {
            "name": "_keys",
            "location": 480,
            "return": [
                "typing.Iterator[KT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.values": {
            "name": "values",
            "location": 485,
            "return": [
                "str",
                "int",
                "dict",
                "tuple",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache._values": {
            "name": "_values",
            "location": 488,
            "return": [
                "typing.Iterator[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.items": {
            "name": "items",
            "location": 496,
            "return": [
                "int",
                "List[int]",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache._items": {
            "name": "_items",
            "location": 499,
            "return": [
                "typing.Iterator[typing.Tuple[KT, VT]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.incr": {
            "name": "incr",
            "location": 507,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "delta": [
                    "str",
                    "T",
                    "KT",
                    "Hashable"
                ]
            }
        },
        "LRUCache._new_lock": {
            "name": "_new_lock",
            "location": 515,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__getstate__": {
            "name": "__getstate__",
            "location": 520,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__setstate__": {
            "name": "__setstate__",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ManagedUserSet.on_add": {
            "name": "on_add",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable"
                ]
            }
        },
        "ManagedUserSet.on_discard": {
            "name": "on_discard",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "ManagedUserSet.on_clear": {
            "name": "on_clear",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedUserSet.on_change": {
            "name": "on_change",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "added": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "list"
                ],
                "removed": [
                    "str",
                    "List[str]",
                    "Set[T]",
                    "list"
                ]
            }
        },
        "ManagedUserSet.add": {
            "name": "add",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Type[object]",
                    "T",
                    "OrderedDict",
                    "Iterable[Hashable]"
                ]
            }
        },
        "ManagedUserSet.clear": {
            "name": "clear",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedUserSet.discard": {
            "name": "discard",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Union[int, float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ManagedUserSet.pop": {
            "name": "pop",
            "location": 559,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedUserSet.raw_update": {
            "name": "raw_update",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedUserSet.__iand__": {
            "name": "__iand__",
            "location": 567,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[Any]",
                    "Set[VT]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "ManagedUserSet.__ior__": {
            "name": "__ior__",
            "location": 575,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[Any]",
                    "Set[VT]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "ManagedUserSet.__isub__": {
            "name": "__isub__",
            "location": 583,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[Any]",
                    "AbstractSet[T_co]",
                    "Set[VT]",
                    "dict"
                ]
            }
        },
        "ManagedUserSet.__ixor__": {
            "name": "__ixor__",
            "location": 591,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "Iterable[Iterable[T]]",
                    "Set[VT]"
                ]
            }
        },
        "ManagedUserSet.difference_update": {
            "name": "difference_update",
            "location": 599,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "ManagedUserSet.intersection_update": {
            "name": "intersection_update",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "set"
                ]
            }
        },
        "ManagedUserSet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[bytes]",
                    "int",
                    "list",
                    "Iterable[Any]"
                ]
            }
        },
        "ManagedUserSet.update": {
            "name": "update",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Dict[int, Dict[str, Any]]",
                    "Set[object]"
                ]
            }
        },
        "ManagedUserDict.on_key_get": {
            "name": "on_key_get",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT",
                    "str",
                    "int",
                    "list",
                    "bytes"
                ]
            }
        },
        "ManagedUserDict.on_key_set": {
            "name": "on_key_set",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "KT",
                    "VT",
                    "str",
                    "bytes"
                ],
                "value": [
                    "KT",
                    "VT",
                    "str",
                    "bytes"
                ]
            }
        },
        "ManagedUserDict.on_key_del": {
            "name": "on_key_del",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "KT",
                    "list",
                    "bytes"
                ]
            }
        },
        "ManagedUserDict.on_clear": {
            "name": "on_clear",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedUserDict.__getitem__": {
            "name": "__getitem__",
            "location": 651,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "ManagedUserDict.__setitem__": {
            "name": "__setitem__",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Iterable[Hashable]",
                    "int"
                ],
                "value": [
                    "str",
                    "bytes",
                    "Iterable[Hashable]",
                    "int"
                ]
            }
        },
        "ManagedUserDict.__delitem__": {
            "name": "__delitem__",
            "location": 659,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "Iterator[str]",
                    "Union[int, slice]",
                    "Iterable[Hashable]"
                ]
            }
        },
        "ManagedUserDict.update": {
            "name": "update",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedUserDict.clear": {
            "name": "clear",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedUserDict.raw_update": {
            "name": "raw_update",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeDictMixin.__getattr__": {
            "name": "__getattr__",
            "location": 685,
            "return": [
                "str",
                "Mapping",
                "django.db.models.QuerySet",
                "\"Namespace\"",
                "bool"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "AttributeDictMixin.__setattr__": {
            "name": "__setattr__",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "abc.graph.GraphKeyType"
                ],
                "value": [
                    "str",
                    "bool",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "DictAttribute.__init__": {
            "name": "__init__",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Sequence[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "DictAttribute.__getattr__": {
            "name": "__getattr__",
            "location": 714,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "DictAttribute.__setattr__": {
            "name": "__setattr__",
            "location": 717,
            "return": [
                "bool",
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "DictAttribute.get": {
            "name": "get",
            "location": 720,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "DictAttribute.setdefault": {
            "name": "setdefault",
            "location": 726,
            "return": [
                "bool",
                "str",
                "Tuple[str, int, int]",
                "Dict[str, object]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "T",
                    "bytes"
                ],
                "default": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "DictAttribute.__getitem__": {
            "name": "__getitem__",
            "location": 732,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Type[RuntimeError]"
                ]
            }
        },
        "DictAttribute.__setitem__": {
            "name": "__setitem__",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "DictAttribute.__delitem__": {
            "name": "__delitem__",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "DictAttribute.__len__": {
            "name": "__len__",
            "location": 744,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictAttribute.__contains__": {
            "name": "__contains__",
            "location": 747,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "DictAttribute.__iter__": {
            "name": "__iter__",
            "location": 750,
            "return": [
                "int",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictAttribute._keys": {
            "name": "_keys",
            "location": 753,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictAttribute._values": {
            "name": "_values",
            "location": 757,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictAttribute._items": {
            "name": "_items",
            "location": 762,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, VT]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/utils/compat.py": {
        "want_bytes": {
            "name": "want_bytes",
            "location": 27,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "int",
                    "float"
                ]
            }
        },
        "want_str": {
            "name": "want_str",
            "location": 34,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "Union[str, bytes]",
                    "AnyStr",
                    "str"
                ]
            }
        },
        "isatty": {
            "name": "isatty",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "fh": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mode-master/mode/utils/contexts.py": {
        "asyncnullcontext.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enter_result": [
                    "int",
                    "float",
                    "List[List[int]]",
                    "Callable[[str, str], float]"
                ]
            }
        }
    },
    "mode-master/mode/utils/futures.py": {
        "done_future": {
            "name": "done_future",
            "location": 118,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "result": [
                    "dict",
                    "Dict[str, Tuple[Any, Any]]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "maybe_cancel": {
            "name": "maybe_cancel",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "fut": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "maybe_set_exception": {
            "name": "maybe_set_exception",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "fut": [
                    "bool",
                    "Optional[str]"
                ],
                "exc": [
                    "BaseException",
                    "Callable",
                    "Optional[BaseException]",
                    "bool",
                    "Dict[str, Callable[[], None]]"
                ]
            }
        },
        "maybe_set_result": {
            "name": "maybe_set_result",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "fut": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "result": [
                    "str",
                    "Union[int, float]",
                    "Union[Dict, List]",
                    "Callable[[str], bool]",
                    "Dict[str, Any]"
                ]
            }
        },
        "notify": {
            "name": "notify",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "result": [
                    "Dict[str, Any]",
                    "Union[Dict, List]",
                    "str"
                ]
            }
        },
        "StampedeWrapper.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "stampede.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": []
            }
        },
        "stampede.__call__": {
            "name": "__call__",
            "location": 104,
            "return": [
                "typing.NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "stampede.__get__": {
            "name": "__get__",
            "location": 108,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, dict]]",
                    "Optional[Any]"
                ],
                "type": [
                    "str",
                    "type",
                    "Type",
                    "Optional[type]"
                ]
            }
        },
        "all_tasks": {
            "name": "all_tasks",
            "location": 13,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "loop": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "mode-master/mode/utils/imports.py": {
        "_ensure_identifier": {
            "name": "_ensure_identifier",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "full": [
                    "str"
                ]
            }
        },
        "parse_symbol": {
            "name": "parse_symbol",
            "location": 155,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "symbol_by_name": {
            "name": "symbol_by_name",
            "location": 211,
            "return": [
                "bool",
                "str",
                "\"NameComment\"",
                "list"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Type['BaseModel']"
                ],
                "aliases": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "imp": [
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Optional[List[Any]]"
                ],
                "package": [
                    "bool",
                    "str"
                ],
                "sep": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "default": [
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Any]"
                ]
            }
        },
        "load_extension_classes": {
            "name": "load_extension_classes",
            "location": 294,
            "return": [
                "typing.Iterable[EntrypointExtension]"
            ],
            "arguments": {
                "namespace": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "int",
                    "mypy.types.Instance",
                    "str",
                    "dict"
                ]
            }
        },
        "load_extension_class_names": {
            "name": "load_extension_class_names",
            "location": 321,
            "return": [
                "Optional[bool]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "List[Dict[str, str]]",
                "dict",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "namespace": [
                    "float",
                    "Exception",
                    "Dict[str, Any]",
                    "Container[str]",
                    "int",
                    "str"
                ]
            }
        },
        "cwd_in_path": {
            "name": "cwd_in_path",
            "location": 350,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "import_from_cwd": {
            "name": "import_from_cwd",
            "location": 364,
            "return": [
                "int"
            ],
            "arguments": {
                "module": []
            }
        },
        "smart_import": {
            "name": "smart_import",
            "location": 379,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "dict"
                ],
                "imp": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "FactoryMapping.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryMapping.iterate": {
            "name": "iterate",
            "location": 93,
            "return": [
                "typing.Iterator[_T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryMapping.by_url": {
            "name": "by_url",
            "location": 98,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "FactoryMapping.by_name": {
            "name": "by_name",
            "location": 103,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FactoryMapping.get_alias": {
            "name": "get_alias",
            "location": 117,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FactoryMapping.include_setuptools_namespace": {
            "name": "include_setuptools_namespace",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "FactoryMapping._maybe_finalize": {
            "name": "_maybe_finalize",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryMapping._finalize": {
            "name": "_finalize",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoryMapping.data": {
            "name": "data",
            "location": 137,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "URL.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "URL",
                    "bool"
                ]
            }
        }
    },
    "mode-master/mode/utils/locals.py": {
        "LocalStack.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStack.push": {
            "name": "push",
            "location": 45,
            "return": [
                "typing.Generator[None, None, None]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int"
                ]
            }
        },
        "LocalStack.push_without_automatic_cleanup": {
            "name": "push_without_automatic_cleanup",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "LocalStack.pop": {
            "name": "pop",
            "location": 60,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStack.__len__": {
            "name": "__len__",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStack.stack": {
            "name": "stack",
            "location": 86,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStack.top": {
            "name": "top",
            "location": 91,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/utils/locks.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_set": {
            "name": "is_set",
            "location": 38,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.set": {
            "name": "set",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.clear": {
            "name": "clear",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.loop": {
            "name": "loop",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/utils/logging.py": {
        "current_flight_recorder": {
            "name": "current_flight_recorder",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_logger_config": {
            "name": "_logger_config",
            "location": 110,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "handlers": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "level": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "create_logconfig": {
            "name": "create_logconfig",
            "location": 118,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "version": [
                    "int",
                    "bool",
                    "str"
                ],
                "disable_existing_loggers": [
                    "int",
                    "bool",
                    "str"
                ],
                "formatters": [
                    "int",
                    "bool",
                    "str"
                ],
                "handlers": [
                    "int",
                    "bool",
                    "str"
                ],
                "root": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 146,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "formatter": {
            "name": "formatter",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fun": [
                    "str",
                    "int",
                    "VT"
                ]
            }
        },
        "formatter2": {
            "name": "formatter2",
            "location": 304,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fun": [
                    "str",
                    "int",
                    "VT"
                ]
            }
        },
        "_format_extra": {
            "name": "_format_extra",
            "location": 318,
            "return": [
                "int",
                "tuple",
                "Sequence[object]",
                "Iterable",
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "record": [
                    "dict",
                    "int",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "level_name": {
            "name": "level_name",
            "location": 384,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "loglevel": [
                    "str",
                    "Optional[str]",
                    "Exception"
                ]
            }
        },
        "_when_str": {
            "name": "_when_str",
            "location": 390,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "loglevel": [
                    "float",
                    "Tuple[int, int]",
                    "str",
                    "int"
                ]
            }
        },
        "level_number": {
            "name": "level_number",
            "location": 395,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "loglevel": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 401,
            "return": [
                "logging.Logger",
                "Optional[Mapping[str, Any]]",
                "bool",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "loglevel": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 405,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_setup_logging": {
            "name": "_setup_logging",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cry": {
            "name": "cry",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "BinaryIO",
                    "List[str]",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "print_task_name": {
            "name": "print_task_name",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]"
                ],
                "file": [
                    "str"
                ]
            }
        },
        "redirect_stdouts": {
            "name": "redirect_stdouts",
            "location": 958,
            "return": [
                "typing.Iterator[FileLogProxy]"
            ],
            "arguments": {
                "logger": [
                    "int",
                    "str",
                    "Union[None, int, str]",
                    "Callable"
                ]
            }
        },
        "HasLog.log": {
            "name": "log",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "Callable",
                    "str"
                ],
                "message": [
                    "Callable",
                    "str"
                ]
            }
        },
        "LogSeverityMixin.dev": {
            "name": "dev",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "LogSeverityMixin.debug": {
            "name": "debug",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Tuple[Tuple[int, ...]]"
                ]
            }
        },
        "LogSeverityMixin.info": {
            "name": "info",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "LogSeverityMixin.warn": {
            "name": "warn",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Union[str, float]"
                ]
            }
        },
        "LogSeverityMixin.warning": {
            "name": "warning",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Union[str, float]"
                ]
            }
        },
        "LogSeverityMixin.error": {
            "name": "error",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "LogSeverityMixin.crit": {
            "name": "crit",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "LogSeverityMixin.critical": {
            "name": "critical",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "LogSeverityMixin.exception": {
            "name": "exception",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "CompositeLogger.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ],
                "formatter": [
                    "types.UUIDType",
                    "Optional[List[str]]",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "CompositeLogger.log": {
            "name": "log",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "CompositeLogger.format": {
            "name": "format",
            "location": 291,
            "return": [
                "int",
                "logging.LogRecord",
                "Iterable[str]",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "DefaultFormatter.format": {
            "name": "format",
            "location": 327,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "Optional[BaseException]",
                    "bool"
                ]
            }
        },
        "ExtensionFormatter.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "list",
                    "trio.abc.ReceiveStream",
                    "IO[bytes]",
                    "bool",
                    "Union[str, IO[str]]",
                    "IO",
                    "int"
                ]
            }
        },
        "ExtensionFormatter.format": {
            "name": "format",
            "location": 341,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "ExtensionFormatter._format_args": {
            "name": "_format_args",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "List[str]",
                    "str",
                    "type",
                    "Dict[str, Type[Any]]",
                    "types.Resolver"
                ]
            }
        },
        "ExtensionFormatter.format_arg": {
            "name": "format_arg",
            "location": 364,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "bytes"
                ],
                "record": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "ExtensionFormatter._format_arg": {
            "name": "_format_arg",
            "location": 367,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "float"
                ]
            }
        },
        "ExtensionFormatter._format_arg2": {
            "name": "_format_arg2",
            "location": 375,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "List[Set[int]]",
                    "Optional[int]",
                    "type",
                    "List[float]",
                    "str"
                ],
                "record": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Logwrapped.__init__": {
            "name": "__init__",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ],
                "severity": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "ident": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig"
                ]
            }
        },
        "Logwrapped.__getattr__": {
            "name": "__getattr__",
            "location": 497,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "Logwrapped.__repr__": {
            "name": "__repr__",
            "location": 524,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Logwrapped.__dir__": {
            "name": "__dir__",
            "location": 527,
            "return": [
                "str",
                "edgar_code.types.PathLike",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "flight_recorder.__init__": {
            "name": "__init__",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "T",
                    "logging.Logger",
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "flight_recorder.wrap_debug": {
            "name": "wrap_debug",
            "location": 691,
            "return": [
                "str",
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "flight_recorder.wrap_info": {
            "name": "wrap_info",
            "location": 694,
            "return": [
                "dict",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Union[BinaryIO, str]",
                    "Exception"
                ]
            }
        },
        "flight_recorder.wrap_warn": {
            "name": "wrap_warn",
            "location": 697,
            "return": [
                "List[Dict[str, Any]]",
                "BaseException",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "flight_recorder.wrap_error": {
            "name": "wrap_error",
            "location": 700,
            "return": [
                "str",
                "bool",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Exception"
                ]
            }
        },
        "flight_recorder.wrap": {
            "name": "wrap",
            "location": 703,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "pypi2nix.logger.Logger",
                    "Callable",
                    "int"
                ],
                "obj": [
                    "pypi2nix.logger.Logger",
                    "Callable",
                    "int"
                ]
            }
        },
        "flight_recorder.activate": {
            "name": "activate",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "flight_recorder.cancel": {
            "name": "cancel",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "flight_recorder.log": {
            "name": "log",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "str",
                    "dict",
                    "traceback.TracebackException",
                    "bool"
                ],
                "message": [
                    "str",
                    "dict",
                    "traceback.TracebackException",
                    "bool"
                ]
            }
        },
        "flight_recorder._buffer_log": {
            "name": "_buffer_log",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "flight_recorder.blush": {
            "name": "blush",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "flight_recorder.flush_logs": {
            "name": "flush_logs",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ident": [
                    "str"
                ]
            }
        },
        "flight_recorder._fill_extra_context": {
            "name": "_fill_extra_context",
            "location": 779,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "flight_recorder._ident": {
            "name": "_ident",
            "location": 787,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "flight_recorder.__repr__": {
            "name": "__repr__",
            "location": 790,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "flight_recorder.__enter__": {
            "name": "__enter__",
            "location": 793,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "flight_recorder.__exit__": {
            "name": "__exit__",
            "location": 800,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "bool",
                    "types.TracebackType",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]"
                ],
                "exc_val": [
                    "bool",
                    "types.TracebackType",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]"
                ],
                "exc_tb": [
                    "bool",
                    "types.TracebackType",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]"
                ]
            }
        },
        "_FlightRecorderProxy.log": {
            "name": "log",
            "location": 811,
            "return": [
                "int",
                "Tuple[float, float]",
                "float",
                "str",
                "bool",
                "List[Union[Any, Any, int]]"
            ],
            "arguments": {
                "self": [],
                "severity": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "_FlightRecorderProxy.current_flight_recorder": {
            "name": "current_flight_recorder",
            "location": 819,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.__init__": {
            "name": "__init__",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "int",
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "FileLogProxy._safewrap_handlers": {
            "name": "_safewrap_handlers",
            "location": 838,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy._safewrap_handler": {
            "name": "_safewrap_handler",
            "location": 842,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "FileLogProxy.write": {
            "name": "write",
            "location": 856,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "FileLogProxy.writelines": {
            "name": "writelines",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "FileLogProxy.buffer": {
            "name": "buffer",
            "location": 872,
            "return": [
                "typing.BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.encoding": {
            "name": "encoding",
            "location": 876,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.errors": {
            "name": "errors",
            "location": 880,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.line_buffering": {
            "name": "line_buffering",
            "location": 883,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.newlines": {
            "name": "newlines",
            "location": 887,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.flush": {
            "name": "flush",
            "location": 890,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.mode": {
            "name": "mode",
            "location": 894,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.name": {
            "name": "name",
            "location": 898,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.close": {
            "name": "close",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.closed": {
            "name": "closed",
            "location": 905,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.fileno": {
            "name": "fileno",
            "location": 908,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.isatty": {
            "name": "isatty",
            "location": 911,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.read": {
            "name": "read",
            "location": 914,
            "return": [
                "typing.Any.Str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "FileLogProxy.readable": {
            "name": "readable",
            "location": 917,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.readline": {
            "name": "readline",
            "location": 920,
            "return": [
                "typing.Any.Str"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FileLogProxy.readlines": {
            "name": "readlines",
            "location": 923,
            "return": [
                "typing.List[typing.Any.Str]"
            ],
            "arguments": {
                "self": [],
                "hint": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FileLogProxy.seek": {
            "name": "seek",
            "location": 926,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "whence": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FileLogProxy.seekable": {
            "name": "seekable",
            "location": 929,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.tell": {
            "name": "tell",
            "location": 932,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.truncate": {
            "name": "truncate",
            "location": 935,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "FileLogProxy.writable": {
            "name": "writable",
            "location": 938,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.__iter__": {
            "name": "__iter__",
            "location": 941,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.__next__": {
            "name": "__next__",
            "location": 944,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.__enter__": {
            "name": "__enter__",
            "location": 947,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLogProxy.__exit__": {
            "name": "__exit__",
            "location": 950,
            "return": [
                "typing.Optional[builtins.bool]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "Logwrapped.__getattr__.__wrapped": {
            "name": "__wrapped",
            "location": 506,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "bool"
            ],
            "arguments": {}
        },
        "FileLogProxy._safewrap_handler.WithSafeHandleError.handleError": {
            "name": "handleError",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "List[str]",
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "mode-master/mode/utils/loops.py": {
        "_is_unix_loop": {
            "name": "_is_unix_loop",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "loop": [
                    "asyncio.AbstractEventLoop",
                    "str",
                    "dict"
                ]
            }
        },
        "clone_loop": {
            "name": "clone_loop",
            "location": 17,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "loop": [
                    "asyncio.AbstractEventLoop",
                    "dict",
                    "Optional[Callable]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_appropriate_signal_handler": {
            "name": "_appropriate_signal_handler",
            "location": 27,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "parent_loop": [
                    "asyncio.Handle",
                    "asyncio.AbstractEventLoop",
                    "bool"
                ],
                "handle": [
                    "asyncio.Handle",
                    "asyncio.AbstractEventLoop",
                    "bool"
                ]
            }
        },
        "call_asap": {
            "name": "call_asap",
            "location": 39,
            "return": [],
            "arguments": {
                "callback": [
                    "Callable",
                    "bool",
                    "Exception"
                ]
            }
        },
        "_call_asap": {
            "name": "_call_asap",
            "location": 53,
            "return": [
                "Callable",
                "Union[concurrenfutures.Future, asyncio.futures.Future]",
                "int",
                "float"
            ],
            "arguments": {
                "loop": [
                    "bool"
                ],
                "callback": [
                    "Callable",
                    "int",
                    "bool"
                ]
            }
        },
        "_appropriate_signal_handler._call_using_parent_loop": {
            "name": "_call_using_parent_loop",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mode-master/mode/utils/mocks.py": {
        "ContextMock": {
            "name": "ContextMock",
            "location": 105,
            "return": [
                "Callable[[bytes], None]",
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "patch_module": {
            "name": "patch_module",
            "location": 235,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {}
        },
        "mask_module": {
            "name": "mask_module",
            "location": 267,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {}
        },
        "IN.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IN.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "IN.__ne__": {
            "name": "__ne__",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "IN.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [
                "bool",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock.reset_mock": {
            "name": "reset_mock",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ContextMock.__enter__": {
            "name": "__enter__",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ContextMock.__exit__": {
            "name": "__exit__",
            "location": 98,
            "return": [
                "typing.Optional[builtins.bool]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "AsyncMock.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncMagicMock.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncContextMock.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureMock.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureMock.__await__": {
            "name": "__await__",
            "location": 223,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureMock.assert_awaited": {
            "name": "assert_awaited",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FutureMock.assert_not_awaited": {
            "name": "assert_not_awaited",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "mask_module.myimp": {
            "name": "myimp",
            "location": 289,
            "return": [
                "Type",
                "int",
                "bool",
                "str",
                "Tuple[str, str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_Call.__getattr__": {
            "name": "__getattr__",
            "location": 311,
            "return": [
                "Callable",
                "int",
                "Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Union[str, List]",
                    "Dict[str, Any]",
                    "Sequence[T]"
                ]
            }
        },
        "patch_module.MockModule.__getattr__": {
            "name": "__getattr__",
            "location": 241,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        }
    },
    "mode-master/mode/utils/objects.py": {
        "_restore_from_keywords": {
            "name": "_restore_from_keywords",
            "location": 159,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "Sequence"
            ],
            "arguments": {
                "typ": [
                    "float",
                    "Sequence[float]",
                    "Tuple[int, int]",
                    "tuple"
                ],
                "kwargs": []
            }
        },
        "qualname": {
            "name": "qualname",
            "location": 207,
            "return": [
                "Iterable[str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "shortname": {
            "name": "shortname",
            "location": 215,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "canoname": {
            "name": "canoname",
            "location": 222,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "canonshortname": {
            "name": "canonshortname",
            "location": 231,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "_detect_main_name": {
            "name": "_detect_main_name",
            "location": 240,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "annotations": {
            "name": "annotations",
            "location": 258,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool"
                ]
            }
        },
        "local_annotations": {
            "name": "local_annotations",
            "location": 325,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "bool",
                    "Type",
                    "set",
                    "Mapping",
                    "Optional[type]"
                ]
            }
        },
        "_resolve_refs": {
            "name": "_resolve_refs",
            "location": 343,
            "return": [
                "typing.Iterable[typing.Tuple[builtins.str, typing.Type]]"
            ],
            "arguments": {
                "d": [
                    "Dict[str, Any]",
                    "bool",
                    "list"
                ],
                "globalns": [
                    "Type",
                    "bool",
                    "str"
                ],
                "localns": [
                    "Type",
                    "bool",
                    "str"
                ],
                "invalid_types": [
                    "set",
                    "Tuple[List[str], List[str]]",
                    "Optional[List[str]]",
                    "list"
                ],
                "alias_types": [
                    "bool",
                    "str"
                ],
                "skip_classvar": [
                    "bool",
                    "str",
                    "dict",
                    "Callable",
                    "int"
                ]
            }
        },
        "eval_type": {
            "name": "eval_type",
            "location": 359,
            "return": [
                "bool",
                "Type",
                "int"
            ],
            "arguments": {
                "typ": [
                    "float",
                    "int"
                ],
                "globalns": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "localns": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "invalid_types": [
                    "set"
                ],
                "alias_types": [
                    "Mapping",
                    "bool",
                    "Dict[str, Any]",
                    "Tuple[str]"
                ]
            }
        },
        "_ForwardRef_safe_eval": {
            "name": "_ForwardRef_safe_eval",
            "location": 382,
            "return": [
                "str",
                "Callable[..., Awaitable]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "ref": [
                    "int",
                    "Dict[str, str]",
                    "eth.abc.ComputationAPI"
                ],
                "globalns": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "localns": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "_get_globalns": {
            "name": "_get_globalns",
            "location": 402,
            "return": [
                "str",
                "List[dict]",
                "List[Dict[str, Any]]",
                "list"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "iter_mro_reversed": {
            "name": "iter_mro_reversed",
            "location": 406,
            "return": [
                "typing.Iterable[typing.Type]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Optional[int]"
                ],
                "stop": [
                    "Type",
                    "float",
                    "str",
                    "Type[\"SerializationDialect\"]",
                    "int"
                ]
            }
        },
        "remove_optional": {
            "name": "remove_optional",
            "location": 442,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "typ": [
                    "str",
                    "Type",
                    "float",
                    "int"
                ]
            }
        },
        "is_union": {
            "name": "is_union",
            "location": 447,
            "return": [
                "Type",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "str"
                ]
            }
        },
        "is_optional": {
            "name": "is_optional",
            "location": 455,
            "return": [
                "bool"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "bool"
                ]
            }
        },
        "_remove_optional": {
            "name": "_remove_optional",
            "location": 471,
            "return": [
                "Type",
                "bool"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "eth.abc.DatabaseAPI",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "_py36_maybe_unwrap_GenericMeta": {
            "name": "_py36_maybe_unwrap_GenericMeta",
            "location": 521,
            "return": [
                "BaseException",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "typ": [
                    "Type",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "dict",
                    "str"
                ]
            }
        },
        "guess_polymorphic_type": {
            "name": "guess_polymorphic_type",
            "location": 529,
            "return": [
                "Callable[[T], T]",
                "bytes"
            ],
            "arguments": {
                "typ": [
                    "Type"
                ]
            }
        },
        "_unary_type_arg": {
            "name": "_unary_type_arg",
            "location": 570,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "label": {
            "name": "label",
            "location": 574,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "shortlabel": {
            "name": "shortlabel",
            "location": 579,
            "return": [
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_label": {
            "name": "_label",
            "location": 584,
            "return": [
                "str"
            ],
            "arguments": {
                "label_attr": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "s": [
                    "str",
                    "type",
                    "int"
                ],
                "pass_types": [
                    "Tuple[Type]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "str_types": [
                    "Tuple[Type]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_is_class_var": {
            "name": "_is_class_var",
            "location": 40,
            "return": [
                "type"
            ],
            "arguments": {
                "x": [
                    "str",
                    "T",
                    "Tuple[bool]"
                ]
            }
        },
        "Unordered.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Unordered.__le__": {
            "name": "__le__",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[decimal.Decimal, int]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Unordered.__repr__": {
            "name": "__repr__",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordReduce.__reduce_keywords__": {
            "name": "__reduce_keywords__",
            "location": 200,
            "return": [
                "typing.Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeywordReduce.__reduce__": {
            "name": "__reduce__",
            "location": 203,
            "return": [
                "List[Dict[str, Any]]",
                "Type[Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "cached_property.__init__": {
            "name": "__init__",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": [
                    "Iterable",
                    "BinaryIO",
                    "str",
                    "Iterable[Any]"
                ],
                "fset": [],
                "fdel": [
                    "Optional",
                    "Optional[tuple]",
                    "Optional[Callable[[Any], Any]]",
                    "Optional[Tuple[Any, ...]]",
                    "Optional[Set[Any]]",
                    "Optional[Callable]",
                    "Optional[Set[str]]"
                ],
                "doc": [
                    "Callable",
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "class_attribute": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "cached_property.is_set": {
            "name": "is_set",
            "location": 640,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "cached_property.__get__": {
            "name": "__get__",
            "location": 643,
            "return": [
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable"
                ],
                "type": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "cached_property.__set__": {
            "name": "__set__",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "cached_property.__delete__": {
            "name": "__delete__",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "Callable[[KT, VT], bool]",
                    "dict",
                    "str"
                ],
                "_sentinel": [
                    "str",
                    "Callable[[KT, VT], bool]",
                    "Dict[str, Any]"
                ]
            }
        },
        "cached_property.setter": {
            "name": "setter",
            "location": 666,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "fset": [
                    "str",
                    "dict"
                ]
            }
        },
        "cached_property.deleter": {
            "name": "deleter",
            "location": 669,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "fdel": [
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "ForwardRef.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool",
                    "str",
                    "int"
                ],
                "is_argument": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "_InitSubclassCheck.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/utils/queues.py": {
        "FlowControlEvent.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlEvent.manage_queue": {
            "name": "manage_queue",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "FlowControlEvent.suspend": {
            "name": "suspend",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlEvent.resume": {
            "name": "resume",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlEvent.is_active": {
            "name": "is_active",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlEvent.clear": {
            "name": "clear",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlQueue.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maxsize": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "Sequence"
                ]
            }
        },
        "FlowControlQueue.clear": {
            "name": "clear",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlQueue.put_nowait_enhanced": {
            "name": "put_nowait_enhanced",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "list"
                ]
            }
        },
        "FlowControlQueue.in_pressure_high_state": {
            "name": "in_pressure_high_state",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "Callable",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "FlowControlQueue.on_pressure_high": {
            "name": "on_pressure_high",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlQueue.on_pressure_drop": {
            "name": "on_pressure_drop",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlQueue.maybe_endorse_pressure_drop": {
            "name": "maybe_endorse_pressure_drop",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlQueue.get_nowait": {
            "name": "get_nowait",
            "location": 171,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlQueue.force_put_nowait": {
            "name": "force_put_nowait",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "FlowControlQueue.pressure_high_size": {
            "name": "pressure_high_size",
            "location": 187,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControlQueue.pressure_drop_size": {
            "name": "pressure_drop_size",
            "location": 191,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThrowableQueue.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThrowableQueue.empty": {
            "name": "empty",
            "location": 209,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThrowableQueue.clear": {
            "name": "clear",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThrowableQueue.get_nowait": {
            "name": "get_nowait",
            "location": 219,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThrowableQueue._throw": {
            "name": "_throw",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException",
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        }
    },
    "mode-master/mode/utils/text.py": {
        "title": {
            "name": "title",
            "location": 29,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "didyoumean": {
            "name": "didyoumean",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "haystack": [
                    "str",
                    "Iterable[str]",
                    "float",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "bytes",
                    "List[int]"
                ],
                "needle": [
                    "str",
                    "Iterable[str]",
                    "float",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "enumeration": {
            "name": "enumeration",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "items": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "fuzzymatch_choices": {
            "name": "fuzzymatch_choices",
            "location": 101,
            "return": [],
            "arguments": {
                "haystack": [
                    "str",
                    "Iterable[str]",
                    "float",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "List[int]"
                ],
                "needle": [
                    "str",
                    "Iterable[str]",
                    "float",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "List[int]"
                ]
            }
        },
        "fuzzymatch": {
            "name": "fuzzymatch",
            "location": 116,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "haystack": [
                    "int",
                    "Callable",
                    "str"
                ],
                "needle": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fuzzymatch_iter": {
            "name": "fuzzymatch_iter",
            "location": 123,
            "return": [
                "typing.Iterator[FuzzyMatch]"
            ],
            "arguments": {
                "haystack": [
                    "int",
                    "Iterable[str]",
                    "float"
                ],
                "needle": [
                    "Optional[float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "fuzzymatch_best": {
            "name": "fuzzymatch_best",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "haystack": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ],
                "needle": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        },
        "abbr": {
            "name": "abbr",
            "location": 153,
            "return": [
                "Callable",
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "max": [
                    "str",
                    "int"
                ],
                "suffix": [
                    "str",
                    "int"
                ],
                "words": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "_abbr_word_boundary": {
            "name": "_abbr_word_boundary",
            "location": 161,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "bytes"
                ],
                "max": [
                    "str",
                    "int",
                    "bytes"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "_abbr_abrupt": {
            "name": "_abbr_abrupt",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ],
                "max": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "abbr_fqdn": {
            "name": "abbr_fqdn",
            "location": 176,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "origin": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "shorten_fqdn": {
            "name": "shorten_fqdn",
            "location": 199,
            "return": [
                "OrderedDict",
                "Union[List, Dict]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "max": [
                    "str"
                ]
            }
        },
        "pluralize": {
            "name": "pluralize",
            "location": 209,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "suffix": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, 'LabwareDefinition']"
                ]
            }
        },
        "maybecat": {
            "name": "maybecat",
            "location": 216,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "s": [
                    "Optional[AnyStr]",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Callable"
                ],
                "suffix": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "mode-master/mode/utils/times.py": {
        "rate": {
            "name": "rate",
            "location": 193,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "r": [
                    "float",
                    "dict",
                    "Union[int, float]",
                    "List[T]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "_rate_str": {
            "name": "_rate_str",
            "location": 199,
            "return": [
                "str",
                "int",
                "Type",
                "Dict[str, int]"
            ],
            "arguments": {
                "r": [
                    "str",
                    "float",
                    "bytes",
                    "int"
                ]
            }
        },
        "_rate_int": {
            "name": "_rate_int",
            "location": 205,
            "return": [
                "bool",
                "List[int]",
                "List[Tuple[str, str]]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {
                "r": [
                    "int",
                    "float",
                    "Sized",
                    "str"
                ]
            }
        },
        "_rate_None": {
            "name": "_rate_None",
            "location": 210,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "r": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "rate_limit": {
            "name": "rate_limit",
            "location": 214,
            "return": [
                "str",
                "Dict[str, Union[int, str, Any]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "rate": [
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Type[BaseException]",
                    "bytes",
                    "int",
                    "bool",
                    "Callable[[int], Any]"
                ],
                "over": [
                    "asyncio.AbstractEventLoop",
                    "float",
                    "Type[BaseException]",
                    "bytes",
                    "int",
                    "bool",
                    "Callable[[int], Any]"
                ]
            }
        },
        "want_seconds": {
            "name": "want_seconds",
            "location": 224,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "_want_seconds_str": {
            "name": "_want_seconds_str",
            "location": 230,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_want_seconds_timedelta": {
            "name": "_want_seconds_timedelta",
            "location": 235,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "datetime.timedelta"
                ]
            }
        },
        "humanize_seconds": {
            "name": "humanize_seconds",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "secs": [
                    "float",
                    "int"
                ]
            }
        },
        "humanize_seconds_ago": {
            "name": "humanize_seconds_ago",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "secs": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Bucket.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "over": [
                    "datetime.date",
                    "str",
                    "Callable[[int], None]",
                    "Sequence[T]"
                ]
            }
        },
        "Bucket.__post_init__": {
            "name": "__post_init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucket.pour": {
            "name": "pour",
            "location": 124,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "Iterator[str]",
                    "List[str]"
                ]
            }
        },
        "Bucket.expected_time": {
            "name": "expected_time",
            "location": 128,
            "return": [
                "builtins.float"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "int",
                    "dict",
                    "bool",
                    "Iterator[str]"
                ]
            }
        },
        "Bucket.tokens": {
            "name": "tokens",
            "location": 133,
            "return": [
                "builtins.float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucket.fill_rate": {
            "name": "fill_rate",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenBucket.__post_init__": {
            "name": "__post_init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenBucket.pour": {
            "name": "pour",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "List[str]",
                    "List[int]",
                    "MutableMapping[Any, Any]"
                ]
            }
        },
        "TokenBucket.expected_time": {
            "name": "expected_time",
            "location": 174,
            "return": [
                "str",
                "int",
                "Optional[float]",
                "Optional[datetime.timedelta]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "int"
                ]
            }
        },
        "TokenBucket.tokens": {
            "name": "tokens",
            "location": 181,
            "return": [
                "str",
                "Callable",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/utils/tracebacks.py": {
        "print_task_stack": {
            "name": "print_task_stack",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "Optional[str]",
                    "Union[str, BinaryIO]",
                    "Dict[str, Any]"
                ]
            }
        },
        "print_coro_stack": {
            "name": "print_coro_stack",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "coro": [
                    "AsyncGenerator",
                    "Coroutine",
                    "IO",
                    "str",
                    "List[Tuple[str, dss.util.types.JSON]]"
                ]
            }
        },
        "print_agen_stack": {
            "name": "print_agen_stack",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "agen": [
                    "AsyncGenerator",
                    "Coroutine",
                    "IO",
                    "str",
                    "List[Tuple[str, dss.util.types.JSON]]"
                ]
            }
        },
        "format_task_stack": {
            "name": "format_task_stack",
            "location": 80,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Iterable[str]",
                "Optional[int]"
            ],
            "arguments": {
                "task": [
                    "bool",
                    "asyncio.Task",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "format_coro_stack": {
            "name": "format_coro_stack",
            "location": 89,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "coro": [
                    "int",
                    "bool",
                    "AsyncGenerator",
                    "Coroutine"
                ]
            }
        },
        "format_agen_stack": {
            "name": "format_agen_stack",
            "location": 98,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "agen": [
                    "int",
                    "bool",
                    "AsyncGenerator",
                    "Coroutine"
                ]
            }
        },
        "_CustomCode.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "name": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "_CustomFrame.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "globals": [
                    "int",
                    "str",
                    "float"
                ],
                "fileno": [
                    "int",
                    "str",
                    "float"
                ],
                "code": [
                    "int",
                    "str"
                ]
            }
        },
        "_Truncated.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "Traceback.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Optional[\"Environment\"]"
                ],
                "lineno": [
                    "Optional[int]",
                    "float",
                    "str",
                    "Optional[Iterable[int]]"
                ],
                "lasti": [
                    "Optional[int]",
                    "float",
                    "str",
                    "Optional[Iterable[int]]"
                ]
            }
        },
        "Traceback.from_task": {
            "name": "from_task",
            "location": 173,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "routemaster.state_machine.types.Metadata",
                    "Dict[str, Any]",
                    "Sequence[Any]",
                    "str",
                    "List[str]",
                    "List[int]"
                ],
                "task": [
                    "asyncio.Task",
                    "dict",
                    "List[dict]",
                    "Union[str, bytes]"
                ]
            }
        },
        "Traceback.from_agen": {
            "name": "from_agen",
            "location": 179,
            "return": [
                "dict",
                "str",
                "List[str]",
                "Exception",
                "Sequence",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ],
                "agen": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ]
            }
        },
        "Traceback.from_coroutine": {
            "name": "from_coroutine",
            "location": 184,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict",
                    "Optional[BaseException]",
                    "str",
                    "type"
                ],
                "coro": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Traceback._detect_frame": {
            "name": "_detect_frame",
            "location": 235,
            "return": [
                "bool",
                "exporwiki.types.PrimalEngramEntry",
                "Optional[bytes]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "AsyncGenerator",
                    "Dict[str, Any]",
                    "opentrons.types.Point"
                ],
                "obj": [
                    "str",
                    "Type[T]",
                    "wgraph.parsing.types.Ref"
                ]
            }
        },
        "Traceback._get_coroutine_frame": {
            "name": "_get_coroutine_frame",
            "location": 241,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[object]"
                ],
                "coro": [
                    "int",
                    "tuple"
                ]
            }
        },
        "Traceback._what_is_this": {
            "name": "_what_is_this",
            "location": 254,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "List[dict]",
                    "bool"
                ],
                "obj": [
                    "str",
                    "T"
                ]
            }
        },
        "Traceback._get_agen_frame": {
            "name": "_get_agen_frame",
            "location": 260,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[object]"
                ],
                "agen": [
                    "AsyncGenerator",
                    "str"
                ]
            }
        },
        "Traceback._get_coroutine_next": {
            "name": "_get_coroutine_next",
            "location": 267,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "coro": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "mode-master/mode/utils/trees.py": {
        "Node._new_node": {
            "name": "_new_node",
            "location": 44,
            "return": [
                "dict",
                "Union[Dict, Tuple]",
                "str",
                "List[Dict[str, Any]]",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "str",
                    "dict",
                    "bytes"
                ],
                "data": [
                    "T",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "Node.new": {
            "name": "new",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "Node.reattach": {
            "name": "reattach",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Tuple[str, bool]"
                ]
            }
        },
        "Node.detach": {
            "name": "detach",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[Tuple[int, int]]",
                    "Optional[T]",
                    "Optional[gfg.trees.binary_tree_node.Node]",
                    "Optional[Tuple[str, int]]",
                    "Tuple[str, Optional[str]]",
                    "types.trees.NodeT[T]",
                    "type"
                ]
            }
        },
        "Node.add_deduplicate": {
            "name": "add_deduplicate",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "T",
                    "Mapping[str, Any]",
                    "List[List[Any]]",
                    "list",
                    "bytes"
                ]
            }
        },
        "Node.add": {
            "name": "add",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ]
            }
        },
        "Node.discard": {
            "name": "discard",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "Node.traverse": {
            "name": "traverse",
            "location": 98,
            "return": [
                "typing.Iterator[types.trees.NodeT[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.walk": {
            "name": "walk",
            "location": 110,
            "return": [
                "typing.Iterator[types.trees.NodeT[T]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.as_graph": {
            "name": "as_graph",
            "location": 120,
            "return": [
                "int",
                "types.UUIDType",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [
                "str",
                "int",
                "types.Message",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.depth": {
            "name": "depth",
            "location": 139,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._find_depth": {
            "name": "_find_depth",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.path": {
            "name": "path",
            "location": 146,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.parent": {
            "name": "parent",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "Node.root": {
            "name": "root",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[gfg.trees.binary_tree_node.Node]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "mode-master/mode/utils/typing.py": {},
    "mode-master/mode/utils/_py37_contextlib.py": {
        "asynccontextmanager": {
            "name": "asynccontextmanager",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "AbstractAsyncContextManager.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Sequence[Any]"
                ],
                "C": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_AsyncGeneratorContextManager.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Tuple[object]",
                    "Dict[str, Any]",
                    "tuple",
                    "list",
                    "Callable",
                    "int"
                ],
                "args": [],
                "kwds": [
                    "Tuple[object]",
                    "int",
                    "Callable",
                    "Dict[str, Any]",
                    "tuple",
                    "list"
                ]
            }
        },
        "asynccontextmanager.helper": {
            "name": "helper",
            "location": 129,
            "return": [
                "Dict[str, int]",
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "_BaseExitStack._create_exit_wrapper": {
            "name": "_create_exit_wrapper",
            "location": 140,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cm": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ],
                "cm_exit": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "_BaseExitStack._create_cb_wrapper": {
            "name": "_create_cb_wrapper",
            "location": 149,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "callback": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "_BaseExitStack.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseExitStack.pop_all": {
            "name": "pop_all",
            "location": 160,
            "return": [
                "Iterable[str]",
                "Sequence[str]",
                "Callable",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseExitStack.push": {
            "name": "push",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "exit": [
                    "str",
                    "Tuple[str, str]",
                    "types.Resolver"
                ]
            }
        },
        "_BaseExitStack.enter_context": {
            "name": "enter_context",
            "location": 187,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "cm": [
                    "str",
                    "bool",
                    "type"
                ]
            }
        },
        "_BaseExitStack.callback": {
            "name": "callback",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "Callable",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "_BaseExitStack._push_cm_exit": {
            "name": "_push_cm_exit",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cm": [
                    "Callable",
                    "str"
                ],
                "cm_exit": [
                    "Callable",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "_BaseExitStack._push_exit_callback": {
            "name": "_push_exit_callback",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "List[str]",
                    "Callable"
                ],
                "is_sync": [
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "ExitStack.__enter__": {
            "name": "__enter__",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitStack.__exit__": {
            "name": "__exit__",
            "location": 241,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitStack.close": {
            "name": "close",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncExitStack._create_async_exit_wrapper": {
            "name": "_create_async_exit_wrapper",
            "location": 317,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cm": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ],
                "cm_exit": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "AsyncExitStack._create_async_cb_wrapper": {
            "name": "_create_async_cb_wrapper",
            "location": 326,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "callback": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "AsyncExitStack.push_async_exit": {
            "name": "push_async_exit",
            "location": 346,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "exit": [
                    "Sequence['cirq.Qid']",
                    "str",
                    "Callable",
                    "Type"
                ]
            }
        },
        "AsyncExitStack.push_async_callback": {
            "name": "push_async_callback",
            "location": 363,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "AsyncExitStack._push_async_cm_exit": {
            "name": "_push_async_cm_exit",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cm": [
                    "int",
                    "str"
                ],
                "cm_exit": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "nullcontext.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enter_result": [
                    "List[mypy.types.Type.VarId]",
                    "int",
                    "Tuple[float, float]"
                ]
            }
        },
        "nullcontext.__enter__": {
            "name": "__enter__",
            "location": 464,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "nullcontext.__exit__": {
            "name": "__exit__",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "_BaseExitStack._create_exit_wrapper._exit_wrapper": {
            "name": "_exit_wrapper",
            "location": 142,
            "return": [],
            "arguments": {
                "exc_type": [],
                "exc": [],
                "tb": []
            }
        },
        "_BaseExitStack._create_cb_wrapper._exit_wrapper": {
            "name": "_exit_wrapper",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "ExitStack.__exit__._fix_exception_context": {
            "name": "_fix_exception_context",
            "location": 248,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "new_exc": [
                    "dict",
                    "bool",
                    "bytes"
                ],
                "old_exc": [
                    "Warning",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "AsyncExitStack.__aexit__._fix_exception_context": {
            "name": "_fix_exception_context",
            "location": 399,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "new_exc": [
                    "dict",
                    "bool",
                    "bytes"
                ],
                "old_exc": [
                    "Warning",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "mode-master/mode/utils/__init__.py": {},
    "mode-master/mode/utils/graphs/formatter.py": {
        "dedent_initial": {
            "name": "dedent_initial",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "int",
                    "Optional[int]",
                    "float",
                    "str"
                ],
                "n": [
                    "int",
                    "Optional[int]",
                    "float",
                    "str"
                ]
            }
        },
        "dedent": {
            "name": "dedent",
            "location": 13,
            "return": [
                "str",
                "trezor.utils.Writer",
                "bool",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "float"
                ],
                "n": [
                    "int",
                    "bool",
                    "Type[Exception]",
                    "str",
                    "Callable",
                    "Sequence",
                    "float"
                ],
                "sep": [
                    "str",
                    "float"
                ]
            }
        },
        "GraphFormatter.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "List[\"libkol.Item\"]",
                    "Optional[str]",
                    "dict"
                ],
                "type": [
                    "str",
                    "bool",
                    "int",
                    "Iterable[str]"
                ],
                "id": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "indent": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "inw": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "GraphFormatter.attr": {
            "name": "attr",
            "location": 83,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Dict[str, List[bytes]]"
                ],
                "value": [
                    "str",
                    "int",
                    "Dict[str, List[bytes]]"
                ]
            }
        },
        "GraphFormatter.attrs": {
            "name": "attrs",
            "location": 86,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Optional[types.StrucInput]"
                ],
                "scheme": [
                    "AbstractSet[int]"
                ]
            }
        },
        "GraphFormatter.head": {
            "name": "head",
            "location": 93,
            "return": [
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphFormatter.tail": {
            "name": "tail",
            "location": 99,
            "return": [
                "bool",
                "int",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphFormatter.label": {
            "name": "label",
            "location": 102,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Callable[[str], bool]",
                    "List[object]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "GraphFormatter.node": {
            "name": "node",
            "location": 105,
            "return": [
                "utils.Node",
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GraphFormatter.terminal_node": {
            "name": "terminal_node",
            "location": 108,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "float",
                    "Sequence"
                ]
            }
        },
        "GraphFormatter.edge": {
            "name": "edge",
            "location": 111,
            "return": [
                "float",
                "T",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "GraphFormatter._enc": {
            "name": "_enc",
            "location": 114,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "GraphFormatter.FMT": {
            "name": "FMT",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "T",
                    "Callable"
                ]
            }
        },
        "GraphFormatter.draw_edge": {
            "name": "draw_edge",
            "location": 121,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "b": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "scheme": [
                    "_T",
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "attrs": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Optional[int]"
                ]
            }
        },
        "GraphFormatter.draw_node": {
            "name": "draw_node",
            "location": 129,
            "return": [
                "cmk.utils.type_defs.UserId",
                "bool",
                "str",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Callable",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ],
                "scheme": [
                    "Callable",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ],
                "attrs": [
                    "Callable",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "mode-master/mode/utils/graphs/graph.py": {
        "DependencyGraph.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "it": [
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ],
                "formatter": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "DependencyGraph.add_arc": {
            "name": "add_arc",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[Any]",
                    "bool",
                    "str",
                    "tuple"
                ]
            }
        },
        "DependencyGraph.add_edge": {
            "name": "add_edge",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "B": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "DependencyGraph.connect": {
            "name": "connect",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "DependencyGraph.topsort": {
            "name": "topsort",
            "location": 65,
            "return": [
                "int",
                "List[str]",
                "Dict[int, int]",
                "Set[str]",
                "Optional[dict]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph.valency_of": {
            "name": "valency_of",
            "location": 87,
            "return": [
                "int",
                "bytes",
                "bytearray",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Sequence[T]",
                    "str",
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "DependencyGraph.update": {
            "name": "update",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "it": [
                    "Sequence[T]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "DependencyGraph.edges": {
            "name": "edges",
            "location": 106,
            "return": [
                "Dict[int, int]",
                "Tuple[int, int]",
                "str",
                "Dict[str, float]",
                "Dict[str, Tuple[float, float]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph._khan62": {
            "name": "_khan62",
            "location": 110,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph._tarjan72": {
            "name": "_tarjan72",
            "location": 134,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph.to_dot": {
            "name": "to_dot",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fh": [
                    "dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ]
            }
        },
        "DependencyGraph.__iter__": {
            "name": "__iter__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph.__getitem__": {
            "name": "__getitem__",
            "location": 200,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "DependencyGraph.__len__": {
            "name": "__len__",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph.__contains__": {
            "name": "__contains__",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DependencyGraph.items": {
            "name": "items",
            "location": 209,
            "return": [
                "int",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph.__repr__": {
            "name": "__repr__",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraph._repr_node": {
            "name": "_repr_node",
            "location": 215,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ],
                "level": [
                    "int",
                    "Optional[str]",
                    "List[raiden.utils.Address]",
                    "bool"
                ],
                "fmt": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "DependencyGraph._tarjan72.visit": {
            "name": "visit",
            "location": 144,
            "return": [
                "mypy.types.Overloaded",
                "mypy.types.UnionType"
            ],
            "arguments": {
                "node": [
                    "mypy.types.Type",
                    "wemake_python_styleguide.types.AnyImport"
                ]
            }
        },
        "DependencyGraph.to_dot.if_not_seen": {
            "name": "if_not_seen",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "fun": [
                    "int",
                    "Callable",
                    "str"
                ],
                "obj": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "mode-master/mode/utils/graphs/__init__.py": {},
    "mode-master/mode/utils/types/graphs.py": {
        "GraphFormatterT.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "type": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "id": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "indent": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "inw": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "GraphFormatterT.attr": {
            "name": "attr",
            "location": 32,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GraphFormatterT.attrs": {
            "name": "attrs",
            "location": 36,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Mapping",
                    "bool",
                    "dict",
                    "deque"
                ],
                "scheme": [
                    "Mapping",
                    "bool",
                    "dict",
                    "deque"
                ]
            }
        },
        "GraphFormatterT.head": {
            "name": "head",
            "location": 40,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphFormatterT.tail": {
            "name": "tail",
            "location": 44,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphFormatterT.label": {
            "name": "label",
            "location": 48,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "bool",
                    "magic.abc.CardDescription",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ]
            }
        },
        "GraphFormatterT.node": {
            "name": "node",
            "location": 52,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GraphFormatterT.terminal_node": {
            "name": "terminal_node",
            "location": 56,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "Mapping",
                    "str"
                ]
            }
        },
        "GraphFormatterT.edge": {
            "name": "edge",
            "location": 60,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "b": [
                    "int",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "GraphFormatterT.FMT": {
            "name": "FMT",
            "location": 64,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "bool",
                    "List[int]",
                    "str",
                    "Tuple[Sequence[Any], Sequence[Any]]"
                ]
            }
        },
        "GraphFormatterT.draw_edge": {
            "name": "draw_edge",
            "location": 68,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "b": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "scheme": [
                    "int",
                    "Mapping",
                    "List[str]"
                ],
                "attrs": [
                    "int",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "GraphFormatterT.draw_node": {
            "name": "draw_node",
            "location": 74,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "Mapping",
                    "str"
                ],
                "scheme": [
                    "bool",
                    "Mapping",
                    "str"
                ],
                "attrs": [
                    "bool",
                    "Mapping",
                    "str"
                ]
            }
        },
        "DependencyGraphT.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "it": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "formatter": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "DependencyGraphT.add_arc": {
            "name": "add_arc",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "DependencyGraphT.add_edge": {
            "name": "add_edge",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "bool",
                    "str",
                    "int"
                ],
                "B": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DependencyGraphT.connect": {
            "name": "connect",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DependencyGraphT.topsort": {
            "name": "topsort",
            "location": 104,
            "return": [
                "typing.Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraphT.valency_of": {
            "name": "valency_of",
            "location": 108,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "DependencyGraphT.update": {
            "name": "update",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "it": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "DependencyGraphT.edges": {
            "name": "edges",
            "location": 116,
            "return": [
                "typing.Iterable"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyGraphT.to_dot": {
            "name": "to_dot",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fh": [
                    "dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ]
            }
        }
    },
    "mode-master/mode/utils/types/trees.py": {
        "NodeT._new_node": {
            "name": "_new_node",
            "location": 19,
            "return": [
                "'NodeT'"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, Any]]",
                    "memoryview"
                ],
                "data": [
                    "List[Dict[str, Any]]",
                    "memoryview"
                ]
            }
        },
        "NodeT.new": {
            "name": "new",
            "location": 23,
            "return": [
                "'NodeT'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "list",
                    "memoryview",
                    "bytes",
                    "Iterable[bytes]",
                    "Optional[bool]"
                ]
            }
        },
        "NodeT.add": {
            "name": "add",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "NodeT.add_deduplicate": {
            "name": "add_deduplicate",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "NodeT.discard": {
            "name": "discard",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "NodeT.reattach": {
            "name": "reattach",
            "location": 39,
            "return": [
                "'NodeT'"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool"
                ]
            }
        },
        "NodeT.traverse": {
            "name": "traverse",
            "location": 43,
            "return": [
                "typing.Iterator['NodeT']"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeT.walk": {
            "name": "walk",
            "location": 47,
            "return": [
                "typing.Iterator['NodeT']"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeT.as_graph": {
            "name": "as_graph",
            "location": 51,
            "return": [
                "graphs.DependencyGraphT"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeT.detach": {
            "name": "detach",
            "location": 55,
            "return": [
                "'NodeT'"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool"
                ]
            }
        },
        "NodeT.parent": {
            "name": "parent",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "NodeT.root": {
            "name": "root",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "NodeT.depth": {
            "name": "depth",
            "location": 78,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeT.path": {
            "name": "path",
            "location": 83,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/mode/utils/types/__init__.py": {},
    "mode-master/t/conftest.py": {
        "loop": {
            "name": "loop",
            "location": 5,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        }
    },
    "mode-master/t/__init__.py": {},
    "mode-master/t/functional/test_mode.py": {
        "test_dir": {
            "name": "test_dir",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "mode-master/t/functional/test_proxy.py": {
        "Proxy.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Proxy._service": {
            "name": "_service",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.service": {
            "name": "service",
            "location": 21,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.subservice": {
            "name": "subservice",
            "location": 37,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.proxy": {
            "name": "proxy",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_add_dependency": {
            "name": "test_add_dependency",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_add_context": {
            "name": "test_add_context",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test__crash": {
            "name": "test__crash",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_service_reset": {
            "name": "test_service_reset",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_set_shutdown": {
            "name": "test_set_shutdown",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_started": {
            "name": "test_started",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_crashed": {
            "name": "test_crashed",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_crash_reason": {
            "name": "test_crash_reason",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_should_stop": {
            "name": "test_should_stop",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_state": {
            "name": "test_state",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_label": {
            "name": "test_label",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_shortlabel": {
            "name": "test_shortlabel",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_beacon": {
            "name": "test_beacon",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/functional/test_service.py": {
        "_find_logging_call_severity": {
            "name": "_find_logging_call_severity",
            "location": 304,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "mock": [
                    "str",
                    "List[List[int]]",
                    "bool",
                    "core_lib.core.models.Event"
                ],
                "needle": [
                    "str",
                    "bytes",
                    "Hashable",
                    "Callable",
                    "raiden.utils.TokenAmount",
                    "int"
                ]
            }
        },
        "Context.__enter__": {
            "name": "__enter__",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__exit__": {
            "name": "__exit__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Y.__post_init__": {
            "name": "__post_init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Complex.__post_init__": {
            "name": "__post_init__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/functional/test_signals.py": {
        "test_clone": {
            "name": "test_clone",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_with_default_sender": {
            "name": "test_with_default_sender",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_disconnect_value_error": {
            "name": "test_disconnect_value_error",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sync_signals": {
            "name": "test_sync_signals",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_signal_name": {
            "name": "test_signal_name",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "X.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncX.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_sync_signals.my_on_stopped": {
            "name": "my_on_stopped",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "reason": [
                    "str"
                ]
            }
        },
        "test_sync_signals.my_on_started": {
            "name": "my_on_started",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_BaseSignal.sig": {
            "name": "sig",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_BaseSignal.test_with_default_sender": {
            "name": "test_with_default_sender",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ]
            }
        },
        "test_BaseSignal.test_disconnect_lambda": {
            "name": "test_disconnect_lambda",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_BaseSignal.test_disconnect_raises": {
            "name": "test_disconnect_raises",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "Optional[Exception]"
                ]
            }
        },
        "test_BaseSignal.test_iter_receivers": {
            "name": "test_iter_receivers",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sig": []
            }
        },
        "test_BaseSignal.test_iter_receivers_no_receivers": {
            "name": "test_iter_receivers_no_receivers",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sig": []
            }
        },
        "test_BaseSignal.test__get_live_receivers": {
            "name": "test__get_live_receivers",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_BaseSignal.create_refs": {
            "name": "create_refs",
            "location": 211,
            "return": [
                "bool",
                "str",
                "Mapping",
                "float"
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "test_BaseSignal.test__is_alive": {
            "name": "test__is_alive",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "str"
                ]
            }
        },
        "test_BaseSignal.test_create_ref_methods": {
            "name": "test_create_ref_methods",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sig": [
                    "int"
                ]
            }
        },
        "test_BaseSignal.create_refs.is_alive": {
            "name": "is_alive",
            "location": 214,
            "return": [
                "int",
                "List[int]",
                "tuple",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_BaseSignal.test_create_ref_methods.X.foo": {
            "name": "foo",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/functional/test_supervisors.py": {
        "Y.__post_init__": {
            "name": "__post_init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorTest.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Supervisor": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SupervisorTest.setup_supervisor": {
            "name": "setup_supervisor",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SupervisorTest.assert_started": {
            "name": "assert_started",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "bool",
                    "float"
                ],
                "supervisor": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "bytes"
                ]
            }
        },
        "SupervisorTest.assert_attached_to_supervisor": {
            "name": "assert_attached_to_supervisor",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "float",
                    "int",
                    "Union[bool, None]",
                    "str"
                ],
                "supervisor": [
                    "float",
                    "int",
                    "Union[bool, None]",
                    "str"
                ]
            }
        }
    },
    "mode-master/t/functional/test_timers.py": {
        "test_Timer.clock": {
            "name": "clock",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Timer.sleep": {
            "name": "sleep",
            "location": 55,
            "return": [
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Timer.timer": {
            "name": "timer",
            "location": 59,
            "return": [
                "str",
                "dict",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Timer.first_interval": {
            "name": "first_interval",
            "location": 68,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Timer.new_interval": {
            "name": "new_interval",
            "location": 128,
            "return": [
                "int",
                "str",
                "Dict[str, int]",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "django.utils.timezone.datetime"
                ],
                "wakeup_time": [
                    "int",
                    "Optional[float]",
                    "django.utils.timezone.datetime"
                ],
                "yield_time": [
                    "django.utils.timezone.datetime",
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "expected_new_interval": [
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_Timer.to_next_interval": {
            "name": "to_next_interval",
            "location": 148,
            "return": [
                "trezor.utils.Writer",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "timer": [
                    "str"
                ],
                "interval": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "sleep_time": [
                    "int",
                    "django.utils.timezone.datetime",
                    "Optional[float]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "yield_time": [
                    "Optional[float]",
                    "int",
                    "django.utils.timezone.datetime",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "expected_new_interval": [
                    "Optional[List[int]]",
                    "float",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "test_Timer.interval_to_clock_sequence": {
            "name": "interval_to_clock_sequence",
            "location": 171,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "int",
                    "float",
                    "mode.timers.Timer",
                    "Tuple[float, float]",
                    "dict",
                    "Tuple[str]"
                ]
            }
        },
        "test_Timer.to_clock_values": {
            "name": "to_clock_values",
            "location": 178,
            "return": [
                "List[T]",
                "List[int]",
                "List[type]",
                "Sequence[Tuple[str, Any]]",
                "str",
                "Optional[Type]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Timer.build_intervals": {
            "name": "build_intervals",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timer": [
                    "mode.timers.Timer",
                    "bool"
                ],
                "first_interval": [
                    "Tuple[float, float]",
                    "Type",
                    "Union[int, float]",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "test_Timer.build_intervals.on_reduce": {
            "name": "on_reduce",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "previous_interval": [
                    "float",
                    "str"
                ],
                "tup": [
                    "int",
                    "mode.timers.Timer",
                    "Tuple[float, float]",
                    "float",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "mode-master/t/functional/__init__.py": {},
    "mode-master/t/functional/utils/test_aiter.py": {
        "test_aiter__not_an_iterator": {
            "name": "test_aiter__not_an_iterator",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mode-master/t/functional/utils/test_collections.py": {
        "test_force_mapping": {
            "name": "test_force_mapping",
            "location": 637,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_FastUserDict.d": {
            "name": "d",
            "location": 20,
            "return": [
                "str",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FastUserDict.test_fromkeys": {
            "name": "test_fromkeys",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_FastUserDict.test__missing__": {
            "name": "test__missing__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "test_FastUserDict.test_repr": {
            "name": "test_repr",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_FastUserDict.test_copy": {
            "name": "test_copy",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "Tuple[float]",
                    "bytes",
                    "float"
                ]
            }
        },
        "test_FastUserDict.test_setgetdel": {
            "name": "test_setgetdel",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "test_FastUserDict.test_missing": {
            "name": "test_missing",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FastUserDict.test_get": {
            "name": "test_get",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "test_FastUserDict.test_len": {
            "name": "test_len",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "float",
                    "Callable",
                    "Callable[[int], str]"
                ]
            }
        },
        "test_FastUserDict.test_iter": {
            "name": "test_iter",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_FastUserDict.test_contains": {
            "name": "test_contains",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "test_FastUserDict.test_clear": {
            "name": "test_clear",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "test_FastUserDict.test_keys_items_values": {
            "name": "test_keys_items_values",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "List[dict]",
                    "dict",
                    "bool",
                    "Dict[str, int]",
                    "List[Dict]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_FastUserSet.d": {
            "name": "d",
            "location": 136,
            "return": [
                "str",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FastUserSet.test_reduce": {
            "name": "test_reduce",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_FastUserSet.test_reduce_ex": {
            "name": "test_reduce_ex",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_FastUserSet.test_pickle": {
            "name": "test_pickle",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test_setgetdel": {
            "name": "test_setgetdel",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "int",
                    "Dict[int, str]"
                ]
            }
        },
        "test_FastUserSet.test_len": {
            "name": "test_len",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "test_FastUserSet.test_contains": {
            "name": "test_contains",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_FastUserSet.test_clear": {
            "name": "test_clear",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        },
        "test_FastUserSet.test_and": {
            "name": "test_and",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_FastUserSet.test_ge": {
            "name": "test_ge",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_FastUserSet.test_le": {
            "name": "test_le",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_FastUserSet.test_iter": {
            "name": "test_iter",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "str",
                    "Callable[[Any], str]",
                    "Type",
                    "Mapping",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_FastUserSet.test_or": {
            "name": "test_or",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_FastUserSet.test_repr": {
            "name": "test_repr",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int"
                ]
            }
        },
        "test_FastUserSet.test_sub": {
            "name": "test_sub",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_FastUserSet.test_xor": {
            "name": "test_xor",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_FastUserSet.test_sizeof": {
            "name": "test_sizeof",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "dict",
                    "bytes",
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test_str": {
            "name": "test_str",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_FastUserSet.test_copy": {
            "name": "test_copy",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_FastUserSet.test_difference": {
            "name": "test_difference",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "dict",
                    "bytes",
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test_intersection": {
            "name": "test_intersection",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "dict",
                    "bytes",
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test_isdisjoin": {
            "name": "test_isdisjoin",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "test_FastUserSet.test_issubset": {
            "name": "test_issubset",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "test_FastUserSet.test_issuperset": {
            "name": "test_issuperset",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "float",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_FastUserSet.test_symmetric_difference": {
            "name": "test_symmetric_difference",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "dict",
                    "bytes",
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test_union": {
            "name": "test_union",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "dict",
                    "bytes",
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test_pop": {
            "name": "test_pop",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "test_FastUserSet.test__iand__": {
            "name": "test__iand__",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test__ior__": {
            "name": "test__ior__",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test__isub__": {
            "name": "test__isub__",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test__ixor__": {
            "name": "test__ixor__",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "test_FastUserSet.test_difference_update": {
            "name": "test_difference_update",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_FastUserSet.test_intersection_update": {
            "name": "test_intersection_update",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_FastUserSet.test_symmetric_difference_update": {
            "name": "test_symmetric_difference_update",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_FastUserSet.test_update": {
            "name": "test_update",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bool",
                    "Dict[str, Union[int, bool]]"
                ]
            }
        },
        "test_FastUserSet.test_remove": {
            "name": "test_remove",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "dict",
                    "bytes",
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "test_ManagedUserDict.test_interface_on_key_get": {
            "name": "test_interface_on_key_get",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserDict.test_interface_on_key_set": {
            "name": "test_interface_on_key_set",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserDict.test_interface_on_key_del": {
            "name": "test_interface_on_key_del",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserDict.test_interface_on_clear": {
            "name": "test_interface_on_clear",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserDict.d": {
            "name": "d",
            "location": 341,
            "return": [
                "str",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserDict.test_get_set_del": {
            "name": "test_get_set_del",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_ManagedUserDict.test_update__args": {
            "name": "test_update__args",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_ManagedUserDict.test_update__kwargs": {
            "name": "test_update__kwargs",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "raiden.utils.signer.Signer",
                    "list",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_ManagedUserDict.test_clear": {
            "name": "test_clear",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_ManagedUserDict.test_raw_update": {
            "name": "test_raw_update",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bool",
                    "str",
                    "Optional[bytes]",
                    "float",
                    "Iterable[int]",
                    "Callable"
                ]
            }
        },
        "test_ManagedUserSet.test_interface_on_add": {
            "name": "test_interface_on_add",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_interface_on_discard": {
            "name": "test_interface_on_discard",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_interface_on_clear": {
            "name": "test_interface_on_clear",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_interface_on_change": {
            "name": "test_interface_on_change",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.s": {
            "name": "s",
            "location": 444,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "int",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_add": {
            "name": "test_add",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_discard": {
            "name": "test_discard",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_clear": {
            "name": "test_clear",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_pop": {
            "name": "test_pop",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test__iand__": {
            "name": "test__iand__",
            "location": 476,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test__ior__": {
            "name": "test__ior__",
            "location": 483,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test__isub__": {
            "name": "test__isub__",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test__ixor__": {
            "name": "test__ixor__",
            "location": 500,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_difference_update": {
            "name": "test_difference_update",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_intersection_update": {
            "name": "test_intersection_update",
            "location": 513,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_symmetric_difference_update": {
            "name": "test_symmetric_difference_update",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.test_update": {
            "name": "test_update",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_LRUCache.d": {
            "name": "d",
            "location": 541,
            "return": [
                "float",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_LRUCache.test_get_set_update_pop": {
            "name": "test_get_set_update_pop",
            "location": 544,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "str"
                ]
            }
        },
        "test_LRUCache.test_iter_keys_items_values": {
            "name": "test_iter_keys_items_values",
            "location": 563,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Dict[int, Dict[str, Any]]",
                    "Mapping[Any, Any]",
                    "dict"
                ]
            }
        },
        "test_LRUCache.test_incr": {
            "name": "test_incr",
            "location": 570,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "Optional[float]",
                    "set",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_LRUCache.test__new_lock": {
            "name": "test__new_lock",
            "location": 575,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "Optional[List[str]]",
                    "float",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "test_LRUCache.test_pickle": {
            "name": "test_pickle",
            "location": 581,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "dict",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_AttributeDictMixin.d": {
            "name": "d",
            "location": 590,
            "return": [
                "str",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AttributeDictMixin.test_set_get": {
            "name": "test_set_get",
            "location": 595,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_DictAttribute.d": {
            "name": "d",
            "location": 606,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bytes",
                "str",
                "Dict[str, float]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_DictAttribute.test_get_set": {
            "name": "test_get_set",
            "location": 615,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Heap.test_type_generic": {
            "name": "test_type_generic",
            "location": 654,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Heap.test_heap": {
            "name": "test_heap",
            "location": 662,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FastUserSet.X.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.ManagedSet.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserSet.ManagedSet.on_add": {
            "name": "on_add",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "dict"
                ]
            }
        },
        "test_ManagedUserSet.ManagedSet.on_discard": {
            "name": "on_discard",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Dict[str, str]"
                ]
            }
        },
        "test_ManagedUserSet.ManagedSet.on_change": {
            "name": "on_change",
            "location": 437,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "added": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "removed": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "test_ManagedUserSet.ManagedSet.on_clear": {
            "name": "on_clear",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_force_mapping.Object.__init__": {
            "name": "__init__",
            "location": 641,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "test_FastUserDict.d.X.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_FastUserDict.test__missing__.X.__missing__": {
            "name": "__missing__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "test_FastUserDict.test_missing.X.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_FastUserDict.test_missing.X.__missing__": {
            "name": "__missing__",
            "location": 80,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_ManagedUserDict.d.X.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ManagedUserDict.d.X.on_key_get": {
            "name": "on_key_get",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "test_ManagedUserDict.d.X.on_key_set": {
            "name": "on_key_set",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "dict"
                ],
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "test_ManagedUserDict.d.X.on_key_del": {
            "name": "on_key_del",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Type[RuntimeError]",
                    "tuple",
                    "int"
                ]
            }
        },
        "test_ManagedUserDict.d.X.on_clear": {
            "name": "on_clear",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_DictAttribute.d.Object.__init__": {
            "name": "__init__",
            "location": 610,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "mode-master/t/functional/utils/test_compat.py": {
        "test_want_bytes": {
            "name": "test_want_bytes",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str",
                    "bool",
                    "Tuple[str, str, int]",
                    "bytes",
                    "List[Tuple[str, Any]]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "Tuple[str, str, int]",
                    "bytes",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "test_want_str": {
            "name": "test_want_str",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_isatty": {
            "name": "test_isatty",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mode-master/t/functional/utils/test_contexts.py": {},
    "mode-master/t/functional/utils/test_futures.py": {
        "callable": {
            "name": "callable",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "mode-master/t/functional/utils/test_locals.py": {
        "test_typing": {
            "name": "test_typing",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_stack_pop__when_empty_list": {
            "name": "test_stack_pop__when_empty_list",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "Request.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_threads.thread_enter": {
            "name": "thread_enter",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mode-master/t/functional/utils/test_queues.py": {
        "test_FlowControlEvent.test_constructor": {
            "name": "test_constructor",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FlowControlEvent.test_loop__default": {
            "name": "test_loop__default",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FlowControlEvent.test_loop__custom": {
            "name": "test_loop__custom",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/functional/utils/test_text.py": {
        "test_title": {
            "name": "test_title",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_didyoumean": {
            "name": "test_didyoumean",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "choices": [
                    "bool"
                ],
                "choice": [
                    "bool"
                ],
                "expected": [
                    "bool"
                ]
            }
        },
        "test_abbr": {
            "name": "test_abbr",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "max": [
                    "str",
                    "int"
                ],
                "suffix": [
                    "str",
                    "int"
                ],
                "words": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_fuzzymatch_best": {
            "name": "test_fuzzymatch_best",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "choices": [
                    "bool",
                    "Tuple[int, int, bool]",
                    "str"
                ],
                "choice": [
                    "bool",
                    "Tuple[int, int, bool]",
                    "str"
                ],
                "expected": [
                    "bool",
                    "Tuple[int, int, bool]",
                    "str"
                ]
            }
        },
        "test_abbr_fqdn": {
            "name": "test_abbr_fqdn",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "origin": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_pluralize": {
            "name": "test_pluralize",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "bytes",
                    "Tuple[int, int]"
                ],
                "s": [
                    "int",
                    "bytes",
                    "Tuple[int, int]"
                ],
                "suffix": [
                    "int",
                    "bytes",
                    "Tuple[int, int]"
                ],
                "expected": [
                    "int",
                    "bytes",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_maybecat": {
            "name": "test_maybecat",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "suffix": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_shorten_fqdn": {
            "name": "test_shorten_fqdn",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "mode-master/t/functional/utils/test_times.py": {
        "test_want_seconds": {
            "name": "test_want_seconds",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_rate": {
            "name": "test_rate",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_Bucket": {
            "name": "test_Bucket",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_humanize_seconds": {
            "name": "test_humanize_seconds",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "seconds": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ],
                "now": [
                    "str",
                    "int",
                    "List[str]",
                    "List[float]"
                ],
                "microseconds": [
                    "str",
                    "int"
                ]
            }
        },
        "test_humanize_seconds__prefix": {
            "name": "test_humanize_seconds__prefix",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mode-master/t/functional/utils/test_tracebacks.py": {
        "test_format_task_stack.baz": {
            "name": "baz",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_format_task_stack.moo": {
            "name": "moo",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Traceback.frame": {
            "name": "frame",
            "location": 63,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Traceback.tb": {
            "name": "tb",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Traceback.test_from_coroutine__async_generator_asend": {
            "name": "test_from_coroutine__async_generator_asend",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tb": []
            }
        },
        "test_Traceback.test_from_coroutine__unknown": {
            "name": "test_from_coroutine__unknown",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tb": []
            }
        },
        "test_Traceback.test_too_many_frames": {
            "name": "test_too_many_frames",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tb": [
                    "str",
                    "tests.async_mock.Mock",
                    "asyncio.AbstractEventLoop",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_Traceback.test_no_frames": {
            "name": "test_no_frames",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tb": []
            }
        }
    },
    "mode-master/t/functional/utils/test_trees.py": {
        "test_Node": {
            "name": "test_Node",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mode-master/t/functional/utils/__init__.py": {},
    "mode-master/t/unit/test_debug.py": {
        "test_BlockingDetector.block": {
            "name": "block",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_BlockingDetector.test_reset_signal": {
            "name": "test_reset_signal",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_BlockingDetector.test__clear_signal": {
            "name": "test__clear_signal",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str"
                ]
            }
        },
        "test_BlockingDetector.test__arm": {
            "name": "test__arm",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block": [
                    "List[int]",
                    "List[T]",
                    "Callable[[T], T]",
                    "list",
                    "str"
                ]
            }
        },
        "test_BlockingDetector.test__on_alarm": {
            "name": "test__on_alarm",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block": [
                    "List[Dict]",
                    "Callable",
                    "dict"
                ]
            }
        },
        "test_BlockingDetector.test__deadman_switch.on_sleep": {
            "name": "on_sleep",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mode-master/t/unit/test_locals.py": {
        "test_Proxy_from_source": {
            "name": "test_Proxy_from_source",
            "location": 737,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Proxy_from_source__py37_class_argument": {
            "name": "test_Proxy_from_source__py37_class_argument",
            "location": 775,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Proxy_from_source__no_ABCMeta": {
            "name": "test_Proxy_from_source__no_ABCMeta",
            "location": 812,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Proxy_from_source__no_abstractmethods": {
            "name": "test_Proxy_from_source__no_abstractmethods",
            "location": 822,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Proxy.test_std_class_attributes": {
            "name": "test_std_class_attributes",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_doc": {
            "name": "test_doc",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_name": {
            "name": "test_name",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_get_current_local": {
            "name": "test_get_current_local",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_bool": {
            "name": "test_bool",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_slots": {
            "name": "test_slots",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_dir": {
            "name": "test_dir",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_qualname": {
            "name": "test_qualname",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_getsetdel_attr": {
            "name": "test_getsetdel_attr",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_dictproxy": {
            "name": "test_dictproxy",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_complex_cast": {
            "name": "test_complex_cast",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_index": {
            "name": "test_index",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_coerce": {
            "name": "test_coerce",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_hash": {
            "name": "test_hash",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_call": {
            "name": "test_call",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_context": {
            "name": "test_context",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_reduce": {
            "name": "test_reduce",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy__cached.test_only_evaluated_once": {
            "name": "test_only_evaluated_once",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy__cached.test_maybe_evaluate": {
            "name": "test_maybe_evaluate",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.orig": {
            "name": "orig",
            "location": 284,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.s": {
            "name": "s",
            "location": 288,
            "return": [
                "complex",
                "int",
                "Union[bool, None]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.test_type": {
            "name": "test_type",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.test_getitem": {
            "name": "test_getitem",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.test_get": {
            "name": "test_get",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.test_items": {
            "name": "test_items",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.test_keys": {
            "name": "test_keys",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.test_values": {
            "name": "test_values",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.test_contains": {
            "name": "test_contains",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.test_iter": {
            "name": "test_iter",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MappingProxy.test_len": {
            "name": "test_len",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.s": {
            "name": "s",
            "location": 328,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, str]]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_type": {
            "name": "test_type",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_setitem": {
            "name": "test_setitem",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_delitem": {
            "name": "test_delitem",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_clear": {
            "name": "test_clear",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_pop": {
            "name": "test_pop",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_popitem": {
            "name": "test_popitem",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_setdefault": {
            "name": "test_setdefault",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_update__kwargs": {
            "name": "test_update__kwargs",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_update__dict": {
            "name": "test_update__dict",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableMappingProxy.test_update__iterable": {
            "name": "test_update__iterable",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.orig": {
            "name": "orig",
            "location": 392,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.s": {
            "name": "s",
            "location": 396,
            "return": [
                "complex",
                "int",
                "Union[bool, None]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.test_type": {
            "name": "test_type",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.test_getitem": {
            "name": "test_getitem",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.test_index": {
            "name": "test_index",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.test_count": {
            "name": "test_count",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.test_contains": {
            "name": "test_contains",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.test_iter": {
            "name": "test_iter",
            "location": 422,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.test_reversed": {
            "name": "test_reversed",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SequenceProxy.test_len": {
            "name": "test_len",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.s": {
            "name": "s",
            "location": 436,
            "return": [
                "complex",
                "int",
                "Union[bool, None]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_type": {
            "name": "test_type",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_insert": {
            "name": "test_insert",
            "location": 443,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_str": {
            "name": "test_str",
            "location": 449,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_setitem": {
            "name": "test_setitem",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_delitem": {
            "name": "test_delitem",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_append": {
            "name": "test_append",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_extend": {
            "name": "test_extend",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_reverse": {
            "name": "test_reverse",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_pop": {
            "name": "test_pop",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_remove": {
            "name": "test_remove",
            "location": 476,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSequenceProxy.test_iadd": {
            "name": "test_iadd",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.orig": {
            "name": "orig",
            "location": 490,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.s": {
            "name": "s",
            "location": 494,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "bool",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_type": {
            "name": "test_type",
            "location": 497,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_contains": {
            "name": "test_contains",
            "location": 500,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_len": {
            "name": "test_len",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_iter": {
            "name": "test_iter",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_isdisjoint": {
            "name": "test_isdisjoint",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_lt": {
            "name": "test_lt",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_gt": {
            "name": "test_gt",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_le": {
            "name": "test_le",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_ge": {
            "name": "test_ge",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_and": {
            "name": "test_and",
            "location": 526,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_or": {
            "name": "test_or",
            "location": 529,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_sub": {
            "name": "test_sub",
            "location": 532,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SetProxy.test_xor": {
            "name": "test_xor",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.s": {
            "name": "s",
            "location": 543,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "int",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_type": {
            "name": "test_type",
            "location": 546,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_add": {
            "name": "test_add",
            "location": 550,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_discard": {
            "name": "test_discard",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_clear": {
            "name": "test_clear",
            "location": 559,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_pop": {
            "name": "test_pop",
            "location": 563,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_remove": {
            "name": "test_remove",
            "location": 566,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_ior": {
            "name": "test_ior",
            "location": 572,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_iand": {
            "name": "test_iand",
            "location": 576,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_isub": {
            "name": "test_isub",
            "location": 580,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_MutableSetProxy.test_ixor": {
            "name": "test_ixor",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AwaitableProxy.s": {
            "name": "s",
            "location": 595,
            "return": [
                "str",
                "bytearray",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncIterableProxy.orig": {
            "name": "orig",
            "location": 615,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncIterableProxy.s": {
            "name": "s",
            "location": 619,
            "return": [
                "complex",
                "int",
                "Union[bool, None]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncIterableProxy.test_type": {
            "name": "test_type",
            "location": 622,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncIterableProxy.test_aiter": {
            "name": "test_aiter",
            "location": 625,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncIteratorProxy.s": {
            "name": "s",
            "location": 637,
            "return": [
                "complex",
                "int",
                "Union[bool, None]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncIteratorProxy.test_type": {
            "name": "test_type",
            "location": 640,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncGeneratorProxy.s": {
            "name": "s",
            "location": 657,
            "return": [
                "complex",
                "int",
                "Union[bool, None]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncGeneratorProxy.test_type": {
            "name": "test_type",
            "location": 660,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncGeneratorProxy._coro": {
            "name": "_coro",
            "location": 674,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_AsyncGeneratorProxy.coro": {
            "name": "coro",
            "location": 678,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_CoroutineProxy.corogen": {
            "name": "corogen",
            "location": 701,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_CoroutineProxy._coro": {
            "name": "_coro",
            "location": 711,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_CoroutineProxy.coro": {
            "name": "coro",
            "location": 715,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_CoroutineProxy.test_coro": {
            "name": "test_coro",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_CoroutineProxy.test_await": {
            "name": "test_await",
            "location": 730,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_doc.real": {
            "name": "real",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_Proxy.test_name.real": {
            "name": "real",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_Proxy_from_source.AbstractSource.add": {
            "name": "add",
            "location": 742,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_Proxy_from_source.AbstractSource.mul": {
            "name": "mul",
            "location": 746,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_Proxy_from_source.ConcreteSource.__init__": {
            "name": "__init__",
            "location": 751,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_Proxy_from_source.ConcreteSource.add": {
            "name": "add",
            "location": 754,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_Proxy_from_source.ConcreteSource.mul": {
            "name": "mul",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "test_Proxy_from_source__py37_class_argument.AbstractSource.add": {
            "name": "add",
            "location": 780,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "test_Proxy_from_source__py37_class_argument.AbstractSource.mul": {
            "name": "mul",
            "location": 784,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_Proxy_from_source__py37_class_argument.ConcreteSource.__init__": {
            "name": "__init__",
            "location": 789,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "test_Proxy_from_source__py37_class_argument.ConcreteSource.add": {
            "name": "add",
            "location": 792,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "Iterable[T]",
                    "str",
                    "int"
                ]
            }
        },
        "test_Proxy_from_source__py37_class_argument.ConcreteSource.mul": {
            "name": "mul",
            "location": 795,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_Proxy.test_bool.X.__bool__": {
            "name": "__bool__",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_dir.X.__dir__": {
            "name": "__dir__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_dir.Y.__dir__": {
            "name": "__dir__",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_getsetdel_attr.X.__dir__": {
            "name": "__dir__",
            "location": 128,
            "return": [
                "str",
                "List[dict]",
                "bool",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_complex_cast.Object.__complex__": {
            "name": "__complex__",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_index.Object.__index__": {
            "name": "__index__",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_coerce.Object.__coerce__": {
            "name": "__coerce__",
            "location": 181,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_Proxy.test_hash.X.__hash__": {
            "name": "__hash__",
            "location": 191,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_call.X.__call__": {
            "name": "__call__",
            "location": 200,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_context.X.__enter__": {
            "name": "__enter__",
            "location": 210,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_context.X.__exit__": {
            "name": "__exit__",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy.test_reduce.X.__reduce__": {
            "name": "__reduce__",
            "location": 248,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Proxy__cached.test_only_evaluated_once.X.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/unit/test_services.py": {
        "test_state_stopped": {
            "name": "test_state_stopped",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_should_stop_returns_true_if_crashed": {
            "name": "test_should_stop_returns_true_if_crashed",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "S.__post_init__": {
            "name": "__post_init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Diag.diag": {
            "name": "diag",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Diag.test_set_unset_flag": {
            "name": "test_set_unset_flag",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceTask.task": {
            "name": "task",
            "location": 54,
            "return": [
                "bytes",
                "str",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceTask.test_repr": {
            "name": "test_repr",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Service.service": {
            "name": "service",
            "location": 150,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Service.test_add_dependency__no_beacon": {
            "name": "test_add_dependency__no_beacon",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Service.test_add_context__is_async": {
            "name": "test_add_context__is_async",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Service.test_add_context__not_context": {
            "name": "test_add_context__not_context",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Service._mock_for_start": {
            "name": "_mock_for_start",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "service": [
                    "Dict[str, Any]",
                    "unittesmock.Mock",
                    "Dict[str, str]"
                ],
                "init_deps": [
                    "unittesmock.Mock"
                ],
                "tasks": [
                    "tests.async_mock.Mock",
                    "bytes",
                    "unittesmock.Mock"
                ],
                "children": [
                    "bool"
                ],
                "on_async_enter": [
                    "Optional[Iterable[T]]",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_Service.test_init_subclass_logger": {
            "name": "test_init_subclass_logger",
            "location": 446,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Service.test_get_set_loop": {
            "name": "test_get_set_loop",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Service.test__get_tasks__no_tasks": {
            "name": "test__get_tasks__no_tasks",
            "location": 467,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Service.test_service_reset__None_in_children": {
            "name": "test_service_reset__None_in_children",
            "location": 604,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_subclass_can_override_Service_task.ATaskService.__post_init__": {
            "name": "__post_init__",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Service.test__gather_futures__raises_cancel.on_wait_for_futures": {
            "name": "on_wait_for_futures",
            "location": 657,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Service.test_add_async_context__non_async.Cx.__exit__": {
            "name": "__exit__",
            "location": 287,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/unit/test_supervisors.py": {
        "test_SupervisorStrategy.service": {
            "name": "service",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SupervisorStrategy.sup": {
            "name": "sup",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SupervisorStrategy.test_discard": {
            "name": "test_discard",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_SupervisorStrategy.test_insert": {
            "name": "test_insert",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_OneForAllSupervisor.sup": {
            "name": "sup",
            "location": 134,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ForfeitOneForOneSupervisor.sup": {
            "name": "sup",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ForfeitOneForAllSupervisor.sup": {
            "name": "sup",
            "location": 156,
            "return": [
                "bool",
                "Tuple[float, float]",
                "Sequence[str]",
                "tuple",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_CrashingSupervisor.sup": {
            "name": "sup",
            "location": 167,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_CrashingSupervisor.test__contribute_to_service": {
            "name": "test__contribute_to_service",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_CrashingSupervisor.test_wakeup": {
            "name": "test_wakeup",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/unit/test_threads.py": {
        "test_WorkerThread.service": {
            "name": "service",
            "location": 18,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_WorkerThread.thread": {
            "name": "thread",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_WorkerThread.test_run": {
            "name": "test_run",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_WorkerThread.test_stop__alive": {
            "name": "test_stop__alive",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_WorkerThread.test_stop__not_alive": {
            "name": "test_stop__not_alive",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.loop": {
            "name": "loop",
            "location": 52,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.thread_loop": {
            "name": "thread_loop",
            "location": 56,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.Worker": {
            "name": "Worker",
            "location": 60,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.thread": {
            "name": "thread",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.test_constructor_executor_deprecated": {
            "name": "test_constructor_executor_deprecated",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.test_constructor_worker_argument": {
            "name": "test_constructor_worker_argument",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.test_new_shutdown_event": {
            "name": "test_new_shutdown_event",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.test_start_thread": {
            "name": "test_start_thread",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.test_start_thread__raises": {
            "name": "test_start_thread__raises",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_ServiceThread.mock_for_serve": {
            "name": "mock_for_serve",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "thread": [
                    "Iterable",
                    "List[str]"
                ]
            }
        },
        "test_ServiceThread.test_on_crash": {
            "name": "test_on_crash",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_QueueServiceThread.s": {
            "name": "s",
            "location": 365,
            "return": [
                "complex",
                "int",
                "Union[bool, None]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_QueueServiceThread.test_method_queue": {
            "name": "test_method_queue",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/unit/test_worker.py": {
        "test_exiting": {
            "name": "test_exiting",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Worker.worker": {
            "name": "worker",
            "location": 32,
            "return": [
                "bool",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Worker.setup_method": {
            "name": "setup_method",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "test_Worker.teardown_method": {
            "name": "teardown_method",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Worker.test_constructor": {
            "name": "test_constructor",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Worker.test_constructor_aligns_beacons": {
            "name": "test_constructor_aligns_beacons",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Worker.test_say__quiet": {
            "name": "test_say__quiet",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test__say": {
            "name": "test__say",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_Worker.test__say__default_file": {
            "name": "test__say__default_file",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_on_init_dependencies": {
            "name": "test_on_init_dependencies",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "dict"
                ]
            }
        },
        "test_Worker._setup_for_on_first_start": {
            "name": "_setup_for_on_first_start",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_setup_logging": {
            "name": "test_setup_logging",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loghandlers": []
            }
        },
        "test_Worker.test_setup_logging_raises_exception": {
            "name": "test_setup_logging_raises_exception",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "asyncio.StreamWriter",
                    "asyncio.StreamReader"
                ]
            }
        },
        "test_Worker.test_setup_logging__no_redirect": {
            "name": "test_setup_logging__no_redirect",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_stop_and_shutdown": {
            "name": "test_stop_and_shutdown",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_Worker.test_instal_signal_handlers": {
            "name": "test_instal_signal_handlers",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "int"
                ]
            }
        },
        "test_Worker.test__install_signal_handlers_windows": {
            "name": "test__install_signal_handlers_windows",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test__install_signal_handlers_unix": {
            "name": "test__install_signal_handlers_unix",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test__on_sigint": {
            "name": "test__on_sigint",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_Worker.test__on_sigterm": {
            "name": "test__on_sigterm",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_Worker.test__on_win_sigterm": {
            "name": "test__on_win_sigterm",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_Worker.test__on_sigusr1": {
            "name": "test__on_sigusr1",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_Worker.test__schedule_shutdown": {
            "name": "test__schedule_shutdown",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_Worker.test_execute_from_commandline": {
            "name": "test_execute_from_commandline",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_Worker.test_execute_from_commandline__MemoryError": {
            "name": "test_execute_from_commandline__MemoryError",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_execute_from_commandline__CancelledError": {
            "name": "test_execute_from_commandline__CancelledError",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.test_execute_from_commandline__Exception": {
            "name": "test_execute_from_commandline__Exception",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.patch_execute": {
            "name": "patch_execute",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "Mapping[str, Any]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "test_Worker.test_on_worker_shutdown": {
            "name": "test_on_worker_shutdown",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "asyncio.StreamWriter",
                    "str",
                    "asyncio.StreamReader",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_Worker.test_stop_and_shutdown__stopping_worker": {
            "name": "test_stop_and_shutdown__stopping_worker",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_Worker.test__shutdown_loop": {
            "name": "test__shutdown_loop",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "tests.async_mock.Mock",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_Worker.test__shutdown_loop__wait": {
            "name": "test__shutdown_loop__wait",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_Worker.test__shutdown_loop__wait_raises": {
            "name": "test__shutdown_loop__wait_raises",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_Worker.test__shutdown_loop__service_crashed": {
            "name": "test__shutdown_loop__service_crashed",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": []
            }
        },
        "test_Worker.patch_shutdown_loop": {
            "name": "patch_shutdown_loop",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "int"
                ],
                "is_running": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_Worker.test__gather_all": {
            "name": "test__gather_all",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_Worker.test__gather_all_early": {
            "name": "test__gather_all_early",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "dict"
                ]
            }
        },
        "test_Worker.test_repr_info": {
            "name": "test_repr_info",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "asyncio.StreamWriter"
                ]
            }
        },
        "test_Worker.test_blocking_detector": {
            "name": "test_blocking_detector",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "str"
                ]
            }
        },
        "test_Worker.test__shutdown_loop__wait.on_loop_stop": {
            "name": "on_loop_stop",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "test_Worker.test__shutdown_loop__wait_raises.on_loop_stop": {
            "name": "on_loop_stop",
            "location": 325,
            "return": [
                "int",
                "str",
                "float",
                "bool",
                "dict",
                "tuple"
            ],
            "arguments": {}
        },
        "test_Worker.test__gather_all_early.on_all_tasks": {
            "name": "on_all_tasks",
            "location": 377,
            "return": [
                "List[str]",
                "Iterable"
            ],
            "arguments": {
                "loop": [
                    "str",
                    "int",
                    "Generator",
                    "bool"
                ]
            }
        }
    },
    "mode-master/t/unit/__init__.py": {},
    "mode-master/t/unit/utils/test_imports.py": {
        "test__ensure_identifier": {
            "name": "test__ensure_identifier",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_smart_import": {
            "name": "test_smart_import",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_extension_classes": {
            "name": "test_load_extension_classes",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_extension_classes_syntax_error": {
            "name": "test_load_extension_classes_syntax_error",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_extension_class_names": {
            "name": "test_load_extension_class_names",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "patch_iter_entry_points": {
            "name": "patch_iter_entry_points",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_extension_class_names__no_pkg_resources": {
            "name": "test_load_extension_class_names__no_pkg_resources",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cwd_in_path": {
            "name": "test_cwd_in_path",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cwd_in_path__already_in_path": {
            "name": "test_cwd_in_path__already_in_path",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_import_from_cwd": {
            "name": "test_import_from_cwd",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_import_from_cwd__custom_imp": {
            "name": "test_import_from_cwd__custom_imp",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_FactoryMapping.map": {
            "name": "map",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, int]",
                "Dict[str, Dict[str, str]]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test_constructor": {
            "name": "test_constructor",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test_iterate": {
            "name": "test_iterate",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test_by_url": {
            "name": "test_by_url",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test_by_name": {
            "name": "test_by_name",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test_by_name__ModuleNotFound": {
            "name": "test_by_name__ModuleNotFound",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test_by_name__ModuleNotFound_dotname": {
            "name": "test_by_name__ModuleNotFound_dotname",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test_get_alias": {
            "name": "test_get_alias",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test_include_setuptools_namespace": {
            "name": "test_include_setuptools_namespace",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test__maybe_finalize": {
            "name": "test__maybe_finalize",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test__finalize": {
            "name": "test__finalize",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_FactoryMapping.test_data": {
            "name": "test_data",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_symbol_by_name.imp": {
            "name": "imp",
            "location": 108,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_symbol_by_name.test_missing_module": {
            "name": "test_missing_module",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_symbol_by_name.test_missing_module_but_valid_package": {
            "name": "test_missing_module_but_valid_package",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_symbol_by_name.test_already_object": {
            "name": "test_already_object",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_symbol_by_name.test_when_ValueError": {
            "name": "test_when_ValueError",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_symbol_by_name.test_when_ImportError": {
            "name": "test_when_ImportError",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_symbol_by_name.test_when_ImportError__with_default": {
            "name": "test_when_ImportError__with_default",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "test_symbol_by_name.test_module": {
            "name": "test_module",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_symbol_by_name.test_symbol_by_name__module_attr": {
            "name": "test_symbol_by_name__module_attr",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/unit/utils/test_locks.py": {
        "test_repr": {
            "name": "test_repr",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mode-master/t/unit/utils/test_logging.py": {
        "test__logger_config": {
            "name": "test__logger_config",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "log_called_with": {
            "name": "log_called_with",
            "location": 41,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "formatter_called_with": {
            "name": "formatter_called_with",
            "location": 49,
            "return": [],
            "arguments": {
                "formatter": []
            }
        },
        "test_formatter": {
            "name": "test_formatter",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "test_DefaultFormatter": {
            "name": "test_DefaultFormatter",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_level_number": {
            "name": "test_level_number",
            "location": 150,
            "return": [],
            "arguments": {
                "input": [],
                "expected": []
            }
        },
        "test_level_name": {
            "name": "test_level_name",
            "location": 163,
            "return": [],
            "arguments": {
                "input": [],
                "expected": []
            }
        },
        "test_print_task_name": {
            "name": "test_print_task_name",
            "location": 331,
            "return": [],
            "arguments": {}
        },
        "test_redirect_stdouts": {
            "name": "test_redirect_stdouts",
            "location": 568,
            "return": [],
            "arguments": {}
        },
        "_assert_log_severities": {
            "name": "_assert_log_severities",
            "location": 624,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "_log_kwargs": {
            "name": "_log_kwargs",
            "location": 632,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "_assert_recorder_exercised": {
            "name": "_assert_recorder_exercised",
            "location": 657,
            "return": [],
            "arguments": {
                "logger": [],
                "fl": []
            }
        },
        "_assert_recorder_flush_logs": {
            "name": "_assert_recorder_flush_logs",
            "location": 662,
            "return": [],
            "arguments": {
                "logger": [],
                "fl": []
            }
        },
        "test_CompositeLogger.logger": {
            "name": "logger",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_CompositeLogger.formatter": {
            "name": "formatter",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_CompositeLogger.log": {
            "name": "log",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_CompositeLogger.test_log": {
            "name": "test_log",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_CompositeLogger.test_log__no_formatter": {
            "name": "test_log__no_formatter",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_CompositeLogger.test_severity_mixin": {
            "name": "test_severity_mixin",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "severity": [],
                "extra": []
            }
        },
        "test_CompositeLogger.test_dev__enabled": {
            "name": "test_dev__enabled",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "log": []
            }
        },
        "test_CompositeLogger.test_dev__disabled": {
            "name": "test_dev__disabled",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "log": []
            }
        },
        "test_setup_logging.test_default": {
            "name": "test_default",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_setup_logging.test_logfile": {
            "name": "test_logfile",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_setup_logging.test_io": {
            "name": "test_io",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_setup_logging.test_io_no_tty": {
            "name": "test_io_no_tty",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__setup_logging.setup_method": {
            "name": "setup_method",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "test__setup_logging.teardown_method": {
            "name": "teardown_method",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__setup_logging.test_get_logger": {
            "name": "test_get_logger",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__setup_logging.test_setup_logging_helper_both_filename_and_stream": {
            "name": "test_setup_logging_helper_both_filename_and_stream",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__setup_logging.test_setup_logging_helper_with_filename": {
            "name": "test_setup_logging_helper_with_filename",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__setup_logging.test_setup_logging_helper_with_stream_no_handlers": {
            "name": "test_setup_logging_helper_with_stream_no_handlers",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__setup_logging.test_setup_logging_helper_with_stream": {
            "name": "test_setup_logging_helper_with_stream",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__setup_logging.test_setup_logging_helper_with_merge_config": {
            "name": "test_setup_logging_helper_with_merge_config",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test__setup_logging.test_setup_logging_helper_no_merge_config": {
            "name": "test_setup_logging_helper_no_merge_config",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Logwrapped.obj": {
            "name": "obj",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Logwrapped.logger": {
            "name": "logger",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Logwrapped.wrapped": {
            "name": "wrapped",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_Logwrapped.test_constructor": {
            "name": "test_constructor",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": []
            }
        },
        "test_Logwrapped.test_wrapper": {
            "name": "test_wrapper",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": [],
                "obj": []
            }
        },
        "test_Logwrapped.test_wrapper__no_ident": {
            "name": "test_wrapper__no_ident",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": [],
                "obj": []
            }
        },
        "test_Logwrapped.test_wrapper__no_args": {
            "name": "test_wrapper__no_args",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": [],
                "obj": []
            }
        },
        "test_Logwrapped.test_wrapper__only_kwargs": {
            "name": "test_wrapper__only_kwargs",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": [],
                "obj": []
            }
        },
        "test_Logwrapped.test_wrapper__ignored": {
            "name": "test_wrapper__ignored",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": [],
                "logger": [],
                "obj": []
            }
        },
        "test_Logwrapped.test_repr": {
            "name": "test_repr",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": [],
                "obj": []
            }
        },
        "test_Logwrapped.test_dir": {
            "name": "test_dir",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "wrapped": [],
                "obj": []
            }
        },
        "test_flight_recorder.logger": {
            "name": "logger",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_flight_recorder.bb": {
            "name": "bb",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_flight_recorder.test_wrap_debug": {
            "name": "test_wrap_debug",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_wrap_info": {
            "name": "test_wrap_info",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_wrap_warn": {
            "name": "test_wrap_warn",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_wrap_error": {
            "name": "test_wrap_error",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_wrap": {
            "name": "test_wrap",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_activate": {
            "name": "test_activate",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_activate__already_activated": {
            "name": "test_activate__already_activated",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_cancel": {
            "name": "test_cancel",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_log__active": {
            "name": "test_log__active",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "bb": [],
                "logger": []
            }
        },
        "test_flight_recorder.test_log__inactive": {
            "name": "test_log__inactive",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "bb": [],
                "logger": []
            }
        },
        "test_flight_recorder.test__buffer_log": {
            "name": "test__buffer_log",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_repr": {
            "name": "test_repr",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_flight_recorder.test_context": {
            "name": "test_context",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "test_FileLogProxy.test_constructor__defaults": {
            "name": "test_constructor__defaults",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_FileLogProxy.test_constructor__severity_from_logger": {
            "name": "test_constructor__severity_from_logger",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_FileLogProxy.test_constructor__explicit_severity": {
            "name": "test_constructor__explicit_severity",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_FileLogProxy.test__safewrap_handler": {
            "name": "test__safewrap_handler",
            "location": 524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_FileLogProxy.test_write": {
            "name": "test_write",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_FileLogProxy.test_flush": {
            "name": "test_flush",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_FileLogProxy.test_isatty": {
            "name": "test_isatty",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_assert_recorder_flush_logs._get_call": {
            "name": "_get_call",
            "location": 665,
            "return": [],
            "arguments": {
                "sev": [],
                "msg": [],
                "datestr": [],
                "args": [],
                "kwargs": []
            }
        }
    },
    "mode-master/t/unit/utils/test_objects.py": {
        "test_iter_mro_reversed": {
            "name": "test_iter_mro_reversed",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "stop": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "expected_mro": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_Unordered": {
            "name": "test_Unordered",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test__restore_from_keywords": {
            "name": "test__restore_from_keywords",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_KeywordReduce": {
            "name": "test_KeywordReduce",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qualname_object": {
            "name": "test_qualname_object",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_shortname_object": {
            "name": "test_shortname_object",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_canoname": {
            "name": "test_canoname",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_canonshortname": {
            "name": "test_canonshortname",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_annotations": {
            "name": "test_annotations",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_annotations__skip_classvar": {
            "name": "test_annotations__skip_classvar",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_annotations__invalid_type": {
            "name": "test_annotations__invalid_type",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_annotations__no_local_ns_raises": {
            "name": "test_annotations__no_local_ns_raises",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test__ForwardRef_safe_eval": {
            "name": "test__ForwardRef_safe_eval",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_remove_optional": {
            "name": "test_remove_optional",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test__remove_optional__find_origin": {
            "name": "test__remove_optional__find_origin",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test__remove_optional_edgecase": {
            "name": "test__remove_optional_edgecase",
            "location": 443,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_optional": {
            "name": "test_is_optional",
            "location": 461,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_guess_polymorphic_type": {
            "name": "test_guess_polymorphic_type",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_guess_polymorphic_type__not_generic": {
            "name": "test_guess_polymorphic_type__not_generic",
            "location": 483,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_label_pass": {
            "name": "test_label_pass",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_union": {
            "name": "test_is_union",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_cached_property.x": {
            "name": "x",
            "location": 130,
            "return": [
                "float",
                "str",
                "utils.Node",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_cached_property.x_setter": {
            "name": "x_setter",
            "location": 134,
            "return": [
                "float",
                "str",
                "utils.Node",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_cached_property.x_deleter": {
            "name": "x_deleter",
            "location": 138,
            "return": [
                "float",
                "str",
                "utils.Node",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_cached_property.test_get": {
            "name": "test_get",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "test_cached_property.test_get_class": {
            "name": "test_get_class",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "test_cached_property.test_get_setter": {
            "name": "test_get_setter",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x_setter": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_cached_property.test_set": {
            "name": "test_set",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "test_cached_property.test_set_setter": {
            "name": "test_set_setter",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x_setter": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_cached_property.test_del": {
            "name": "test_del",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "int",
                    "dict",
                    "Iterable[int]"
                ]
            }
        },
        "test_cached_property.test_del_deleter": {
            "name": "test_del_deleter",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x_deleter": [
                    "Sequence['cirq.Qid']",
                    "float",
                    "pydcop.dcop.objects.AgentDef"
                ]
            }
        },
        "test_cached_property.test_get__class_attribute": {
            "name": "test_get__class_attribute",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "X.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "age": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "X.__reduce_keywords__": {
            "name": "__reduce_keywords__",
            "location": 216,
            "return": [
                "bool",
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_cached_property.X.foo": {
            "name": "foo",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_cached_property.X_setter.foo": {
            "name": "foo",
            "location": 113,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "test_cached_property.X_deleter.foo": {
            "name": "foo",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "test_cached_property.test_get__class_attribute.X._get_bar": {
            "name": "_get_bar",
            "location": 186,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mode-master/t/unit/utils/__init__.py": {}
}
{
    "morning-cd-front-master/features/environment.py": {
        "before_all": {
            "name": "before_all",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "behave.runner.Context",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "morning-cd-front-master/features/__init__.py": {},
    "morning-cd-front-master/features/fixtures/listens_service.py": {
        "make_post_listen_request_day": {
            "name": "make_post_listen_request_day",
            "location": 4,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "song_id": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "song_provider": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "listener_name": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "listen_time_utc": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "note": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "iana_timezone": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "make_post_listen_request_night": {
            "name": "make_post_listen_request_night",
            "location": 26,
            "return": [
                "dict",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "morning-cd-front-master/features/fixtures/spotify.py": {
        "make_post_client_credentials": {
            "name": "make_post_client_credentials",
            "location": 4,
            "return": [
                "Dict[str, Any]",
                "set",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "make_get_track_whispers_request": {
            "name": "make_get_track_whispers_request",
            "location": 16,
            "return": [
                "Dict[str, str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "morning-cd-front-master/features/fixtures/sunlight_service.py": {
        "make_get_sunlight_window_response": {
            "name": "make_get_sunlight_window_response",
            "location": 4,
            "return": [
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "iana_timezone": [
                    "str"
                ],
                "date": [
                    "str"
                ],
                "sunrise_utc": [
                    "str"
                ],
                "sunset_utc": [
                    "str"
                ]
            }
        }
    },
    "morning-cd-front-master/features/fixtures/__init__.py": {},
    "morning-cd-front-master/features/steps/background_steps.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "int",
                    "datetime.timedelta",
                    "str",
                    "float"
                ]
            }
        }
    },
    "morning-cd-front-master/features/steps/submit_listen_steps.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bytes",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ],
                "error_message": [
                    "bool",
                    "int"
                ]
            }
        },
        "steal_mock_calls": {
            "name": "steal_mock_calls",
            "location": 127,
            "return": [
                "List[str]",
                "dict",
                "List[int]",
                "str",
                "list",
                "Union[int, None]"
            ],
            "arguments": {
                "mock_network": [
                    "responses.RequestsMock",
                    "int",
                    "Callable",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "submit_listen_mock_network": {
            "name": "submit_listen_mock_network",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "int",
                    "List[str]",
                    "Callable"
                ]
            }
        }
    },
    "morning-cd-front-master/features/steps/sunlight_steps.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bytes",
                    "str",
                    "behave.runner.Context",
                    "Dict[str, Any]"
                ]
            }
        },
        "sunlight_service_mock_network": {
            "name": "sunlight_service_mock_network",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "behave.runner.Context"
                ]
            }
        }
    },
    "morning-cd-front-master/features/support/make_graphql_request.py": {
        "make_graphql_request": {
            "name": "make_graphql_request",
            "location": 5,
            "return": [
                "bool",
                "List[float]",
                "str"
            ],
            "arguments": {
                "query": [
                    "str",
                    "dict"
                ],
                "variables": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "morning-cd-front-master/features/support/with_aws_lambda_environment_variables.py": {
        "with_aws_lambda_environment_variables": {
            "name": "with_aws_lambda_environment_variables",
            "location": 9,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "context": [
                    "behave.runner.Context",
                    "bool"
                ]
            }
        }
    },
    "morning-cd-front-master/features/support/__init__.py": {},
    "morning-cd-front-master/front/context.py": {},
    "morning-cd-front-master/front/use_listens.py": {
        "get_listens": {
            "name": "get_listens",
            "location": 8,
            "return": [
                "float",
                "bool",
                "List[str]",
                "set",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ],
                "limit": [
                    "str",
                    "bool"
                ],
                "sort_order": [
                    "str",
                    "bool"
                ],
                "before_utc": [
                    "str",
                    "bool"
                ],
                "after_utc": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_listen": {
            "name": "get_listen",
            "location": 21,
            "return": [
                "dict"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "listen_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_song_of_listen": {
            "name": "get_song_of_listen",
            "location": 25,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "bool",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "context": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ],
                "listen": [
                    "List[str]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "submit_listen": {
            "name": "submit_listen",
            "location": 29,
            "return": [
                "datetime.datetime",
                "int",
                "List[float]",
                "str"
            ],
            "arguments": {
                "context": [
                    "int",
                    "Callable",
                    "str"
                ],
                "listen_input": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "morning-cd-front-master/front/use_sunlight_windows.py": {
        "get_sunlight_window": {
            "name": "get_sunlight_window",
            "location": 7,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "Union[int, float]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[\"custom_index\"]]"
                ],
                "iana_timezone": [
                    "bool",
                    "Union[int, float]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[\"custom_index\"]]"
                ],
                "on_date": [
                    "bool",
                    "Union[int, float]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[\"custom_index\"]]"
                ]
            }
        }
    },
    "morning-cd-front-master/front/__init__.py": {},
    "morning-cd-front-master/front/definitions/exceptions.py": {},
    "morning-cd-front-master/front/definitions/listen.py": {},
    "morning-cd-front-master/front/definitions/listen_input.py": {},
    "morning-cd-front-master/front/definitions/music_provider.py": {},
    "morning-cd-front-master/front/definitions/song.py": {},
    "morning-cd-front-master/front/definitions/sort_order.py": {},
    "morning-cd-front-master/front/definitions/sunlight_window.py": {},
    "morning-cd-front-master/front/definitions/__init__.py": {},
    "morning-cd-front-master/front/delivery/__init__.py": {},
    "morning-cd-front-master/front/delivery/aws_lambda/graphql.py": {
        "handler": {
            "name": "handler",
            "location": 34,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "event": [
                    "dict"
                ],
                "context": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "_from_graphql_playground": {
            "name": "_from_graphql_playground",
            "location": 77,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "morning-cd-front-master/front/delivery/aws_lambda/spotify_access_token.py": {
        "handler": {
            "name": "handler",
            "location": 10,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "morning-cd-front-master/front/delivery/aws_lambda/util.py": {
        "create_default_context": {
            "name": "create_default_context",
            "location": 7,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "listens_service_api_key": [
                    "str"
                ],
                "sunlight_service_api_key": [
                    "str"
                ],
                "spotify_client_id": [
                    "str"
                ],
                "spotify_client_secret": [
                    "str"
                ]
            }
        }
    },
    "morning-cd-front-master/front/delivery/aws_lambda/__init__.py": {},
    "morning-cd-front-master/front/delivery/flask/playground.py": {
        "access_token": {
            "name": "access_token",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "morning-cd-front-master/front/delivery/flask/util.py": {
        "create_default_context": {
            "name": "create_default_context",
            "location": 9,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "listens_service_api_key": [
                    "str"
                ],
                "sunlight_service_api_key": [
                    "str"
                ],
                "spotify_client_id": [
                    "str"
                ],
                "spotify_client_secret": [
                    "str"
                ]
            }
        },
        "is_flask_reload": {
            "name": "is_flask_reload",
            "location": 20,
            "return": [
                "int",
                "bool",
                "Sequence['cirq.Qid']",
                "Sequence[int]"
            ],
            "arguments": {
                "debug_environment": [
                    "Iterable[Tuple[int, Any]]",
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "morning-cd-front-master/front/delivery/flask/__init__.py": {},
    "morning-cd-front-master/front/delivery/graphql/schema.py": {
        "GraphQlSong.resolve_image_large_url": {
            "name": "resolve_image_large_url",
            "location": 77,
            "return": [
                "str",
                "Mapping",
                "Optional[bool]"
            ],
            "arguments": {
                "root": [
                    "frondefinitions.Song",
                    "Iterable[bytes]"
                ],
                "info": [
                    "graphql.ResolveInfo",
                    "graphene.ResolveInfo",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "GraphQlSong.resolve_image_medium_url": {
            "name": "resolve_image_medium_url",
            "location": 80,
            "return": [
                "str",
                "Mapping",
                "Optional[bool]"
            ],
            "arguments": {
                "root": [
                    "frondefinitions.Song",
                    "Iterable[bytes]"
                ],
                "info": [
                    "graphql.ResolveInfo",
                    "graphene.ResolveInfo",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "GraphQlSong.resolve_image_small_url": {
            "name": "resolve_image_small_url",
            "location": 83,
            "return": [
                "str",
                "Mapping",
                "Optional[bool]"
            ],
            "arguments": {
                "root": [
                    "frondefinitions.Song",
                    "Iterable[bytes]"
                ],
                "info": [
                    "graphql.ResolveInfo",
                    "graphene.ResolveInfo",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "GraphQlListen.resolve_song": {
            "name": "resolve_song",
            "location": 99,
            "return": [
                "int",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "root": [
                    "graphql.ResolveInfo",
                    "frondefinitions.Listen",
                    "dict",
                    "Sequence[str]",
                    "List[Dict[str, str]]"
                ],
                "info": [
                    "graphql.ResolveInfo",
                    "frondefinitions.Listen",
                    "dict",
                    "Sequence[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "Query.resolve_listen": {
            "name": "resolve_listen",
            "location": 137,
            "return": [
                "List[str]",
                "allennlp.common.util.JsonDict",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "root": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "list",
                    "Optional[int]"
                ],
                "info": [
                    "str",
                    "graphql.ResolveInfo",
                    "bool",
                    "Collection[str]",
                    "Dict[str, str]"
                ],
                "id": [
                    "str",
                    "graphql.ResolveInfo",
                    "bool",
                    "Collection[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "Query.resolve_all_listens": {
            "name": "resolve_all_listens",
            "location": 140,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "root": [
                    "bool",
                    "list",
                    "str"
                ],
                "info": [
                    "graphql.ResolveInfo",
                    "bool",
                    "int",
                    "str"
                ],
                "before": [
                    "bool",
                    "tuple",
                    "Exception",
                    "int",
                    "Callable[[Any], datetime.datetime]"
                ],
                "after": [
                    "bool",
                    "tuple",
                    "Exception",
                    "int",
                    "Callable[[Any], datetime.datetime]"
                ],
                "first": [
                    "bool",
                    "tuple",
                    "str",
                    "list",
                    "Exception",
                    "Callable[[Any], datetime.datetime]"
                ],
                "last": [
                    "bool",
                    "tuple",
                    "str",
                    "list",
                    "Exception",
                    "Callable[[Any], datetime.datetime]"
                ]
            }
        },
        "Query._build_listen_connection": {
            "name": "_build_listen_connection",
            "location": 178,
            "return": [],
            "arguments": {
                "listens": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "bytes"
                ],
                "has_more": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "bytes"
                ],
                "pagination_args": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Query._build_listen_edges": {
            "name": "_build_listen_edges",
            "location": 186,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "listens": [
                    "denite.util.UserContext"
                ]
            }
        },
        "Query.resolve_sunlight_window": {
            "name": "resolve_sunlight_window",
            "location": 190,
            "return": [
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "root": [
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "dict",
                    "Iterable"
                ],
                "info": [
                    "str",
                    "graphql.ResolveInfo",
                    "datetime.date",
                    "datetime.datetime",
                    "int"
                ],
                "iana_timezone": [
                    "str",
                    "graphql.ResolveInfo",
                    "datetime.date",
                    "datetime.datetime",
                    "int"
                ],
                "on_date": [
                    "str",
                    "graphql.ResolveInfo",
                    "datetime.date",
                    "datetime.datetime",
                    "int"
                ]
            }
        },
        "SubmitListen.mutate": {
            "name": "mutate",
            "location": 220,
            "return": [
                "int",
                "Dict[str, Any]",
                "float",
                "static_frame.core.util.DepthLevelSpecifier"
            ],
            "arguments": {
                "root": [
                    "list",
                    "graphene.ResolveInfo",
                    "Callable",
                    "float"
                ],
                "info": [
                    "graphql.ResolveInfo",
                    "graphene.ResolveInfo"
                ],
                "input": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "morning-cd-front-master/front/delivery/graphql/util.py": {
        "build_page_info": {
            "name": "build_page_info",
            "location": 51,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "has_more": [
                    "str",
                    "Optional[float]",
                    "set",
                    "bool"
                ],
                "pagination_args": [
                    "dict"
                ]
            }
        },
        "_xor": {
            "name": "_xor",
            "location": 76,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "left": [
                    "Optional[int]",
                    "Set[str]"
                ],
                "right": [
                    "Optional[int]",
                    "Set[str]"
                ]
            }
        },
        "RelayPaginationArguments.first_is_set": {
            "name": "first_is_set",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayPaginationArguments.last_is_set": {
            "name": "last_is_set",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayPaginationArguments.before_is_set": {
            "name": "before_is_set",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayPaginationArguments.after_is_set": {
            "name": "after_is_set",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelayPaginationArguments.make_relay_pagination_arguments": {
            "name": "make_relay_pagination_arguments",
            "location": 35,
            "return": [
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "T",
                    "dict"
                ],
                "first": [
                    "Union[int, float]",
                    "str"
                ],
                "last": [
                    "Union[int, float]",
                    "str"
                ],
                "before": [
                    "int",
                    "T",
                    "dict"
                ],
                "after": [
                    "int",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "morning-cd-front-master/front/delivery/graphql/__init__.py": {},
    "morning-cd-front-master/front/gateways/__init__.py": {},
    "morning-cd-front-master/front/gateways/listens/abc.py": {
        "ListensGatewayABC.fetch_listen": {
            "name": "fetch_listen",
            "location": 11,
            "return": [
                "front.definitions.Listen"
            ],
            "arguments": {
                "self": [],
                "listen_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        },
        "ListensGatewayABC.fetch_listens": {
            "name": "fetch_listens",
            "location": 15,
            "return": [
                "typing.List[front.definitions.Listen]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "sort_order": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "before_utc": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "after_utc": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ListensGatewayABC.submit_listen": {
            "name": "submit_listen",
            "location": 23,
            "return": [
                "front.definitions.Listen"
            ],
            "arguments": {
                "self": [],
                "listen_input": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "morning-cd-front-master/front/gateways/listens/listens_service_gateway.py": {
        "_build_submit_listen_body": {
            "name": "_build_submit_listen_body",
            "location": 51,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {
                "listen_input": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "_build_fetch_listens_params": {
            "name": "_build_fetch_listens_params",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "limit": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "sort_order": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "before_utc": [
                    "bool"
                ],
                "after_utc": [
                    "bool"
                ]
            }
        },
        "_build_sort_order": {
            "name": "_build_sort_order",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "sort_order": [
                    "bool"
                ]
            }
        },
        "_pluck_listen": {
            "name": "_pluck_listen",
            "location": 87,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "raw_listen": [
                    "int",
                    "bool"
                ]
            }
        },
        "_pluck_listens": {
            "name": "_pluck_listens",
            "location": 99,
            "return": [
                "bool",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "Optional[int]"
            ],
            "arguments": {
                "raw_listens": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "_pluck_datetime": {
            "name": "_pluck_datetime",
            "location": 103,
            "return": [
                "datetime.date",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "raw_datetime": [
                    "str",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "ListensServiceGateway.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "ListensServiceGateway.fetch_listen": {
            "name": "fetch_listen",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "listen_id": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "ListensServiceGateway.fetch_listens": {
            "name": "fetch_listens",
            "location": 26,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "Tuple[str]"
                ],
                "sort_order": [
                    "str",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "Tuple[str]"
                ],
                "before_utc": [
                    "str",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "Tuple[str]"
                ],
                "after_utc": [
                    "str",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "Tuple[str]"
                ]
            }
        },
        "ListensServiceGateway.submit_listen": {
            "name": "submit_listen",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "listen_input": [
                    "str",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "Tuple[str]"
                ]
            }
        }
    },
    "morning-cd-front-master/front/gateways/listens/listens_service_gateway_test.py": {
        "TestFetchListen.test_fetches_listen_by_id": {
            "name": "test_fetches_listen_by_id",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFetchListen.test_raises_listens_error_if_listen_doesnt_exist": {
            "name": "test_raises_listens_error_if_listen_doesnt_exist",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFetchListens.test_fetches_listen_in_range": {
            "name": "test_fetches_listen_in_range",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFetchListens.test_fetches_empty_list_if_no_listens": {
            "name": "test_fetches_empty_list_if_no_listens",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubmitListen.test_submits_listen_during_the_day": {
            "name": "test_submits_listen_during_the_day",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubmitListen.test_raises_exception_if_submitted_at_night": {
            "name": "test_raises_exception_if_submitted_at_night",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "morning-cd-front-master/front/gateways/listens/__init__.py": {},
    "morning-cd-front-master/front/gateways/music/abc.py": {
        "MusicGatewayABC.fetch_song_of_listen": {
            "name": "fetch_song_of_listen",
            "location": 9,
            "return": [
                "front.definitions.Song"
            ],
            "arguments": {
                "self": [],
                "listen": [
                    "dict",
                    "Iterable['Context']",
                    "frondefinitions.Listen",
                    "List[str]",
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "morning-cd-front-master/front/gateways/music/spotify_gateway.py": {
        "_pluck_song": {
            "name": "_pluck_song",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "raw_song": [
                    "dict",
                    "bool",
                    "Dict[Tuple[int, int], str]",
                    "float",
                    "type",
                    "int"
                ]
            }
        },
        "SpotifyGateway.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str"
                ],
                "client_secret": [
                    "str"
                ]
            }
        },
        "SpotifyGateway.fetch_song_of_listen": {
            "name": "fetch_song_of_listen",
            "location": 16,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "listen": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "list",
                    "Callable"
                ]
            }
        },
        "SpotifyGateway.fetch_bearer_token": {
            "name": "fetch_bearer_token",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "client_id": [
                    "str"
                ],
                "client_secret": [
                    "str"
                ]
            }
        }
    },
    "morning-cd-front-master/front/gateways/music/__init__.py": {},
    "morning-cd-front-master/front/gateways/sunlight/abc.py": {
        "SunlightGatewayABC.fetch_sunlight_window": {
            "name": "fetch_sunlight_window",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "iana_timezone": [],
                "on_date": []
            }
        }
    },
    "morning-cd-front-master/front/gateways/sunlight/sunlight_service_gateway.py": {
        "_pluck_sunlight_window": {
            "name": "_pluck_sunlight_window",
            "location": 36,
            "return": [
                "str",
                "bool",
                "Optional[Callable]"
            ],
            "arguments": {
                "raw_sunlight_window": [
                    "dict",
                    "str",
                    "Dict[str, Union[str, int]]",
                    "bool"
                ]
            }
        },
        "_pluck_datetime": {
            "name": "_pluck_datetime",
            "location": 43,
            "return": [
                "datetime.date",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "raw_datetime": [
                    "str",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "SunlightServiceGateway.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "List[str]",
                    "str",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "SunlightServiceGateway.fetch_sunlight_window": {
            "name": "fetch_sunlight_window",
            "location": 16,
            "return": [
                "Dict[str, str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "iana_timezone": [
                    "str",
                    "datetime.datetime",
                    "Dict[str, Any]",
                    "datetime.date"
                ],
                "on_date": [
                    "str",
                    "datetime.datetime",
                    "Dict[str, Any]",
                    "datetime.date"
                ]
            }
        }
    },
    "morning-cd-front-master/front/gateways/sunlight/__init__.py": {}
}
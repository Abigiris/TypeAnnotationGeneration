{
    "multidict-master/setup.py": {
        "read": {
            "name": "read",
            "location": 50,
            "return": [
                "str",
                "Tuple[str]",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "f": [
                    "bytes",
                    "Iterator[T]",
                    "memoryview",
                    "IO",
                    "Tuple[bytes, bytes]"
                ]
            }
        }
    },
    "multidict-master/benchmarks/becnhmark.py": {
        "benchmark_name": {
            "name": "benchmark_name",
            "location": 101,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Callable]"
                ],
                "ctx": [
                    "str",
                    "Optional[Callable]"
                ],
                "prefix": [
                    "str",
                    "Optional[Callable]"
                ],
                "use_prefix": [
                    "bool",
                    "int"
                ]
            }
        },
        "add_impl_option": {
            "name": "add_impl_option",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "int",
                    "IO",
                    "Callable",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "multidict-master/benchmarks/istr.py": {
        "benchmark_name": {
            "name": "benchmark_name",
            "location": 35,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Callable]"
                ],
                "ctx": [
                    "str",
                    "Optional[Callable]"
                ],
                "prefix": [
                    "str",
                    "Optional[Callable]"
                ],
                "use_prefix": [
                    "bool",
                    "int"
                ]
            }
        },
        "add_impl_option": {
            "name": "add_impl_option",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "int",
                    "IO",
                    "Callable",
                    "bool"
                ],
                "args": []
            }
        }
    },
    "multidict-master/docs/conf.py": {},
    "multidict-master/multidict/_abc.py": {
        "MultiMapping.getall": {
            "name": "getall",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "types.Serializable"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "types.Serializable"
                ]
            }
        },
        "MultiMapping.getone": {
            "name": "getone",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "types.Serializable"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "types.Serializable"
                ]
            }
        },
        "MutableMultiMapping.add": {
            "name": "add",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "types.Serializable",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "types.Serializable",
                    "bool"
                ]
            }
        },
        "MutableMultiMapping.extend": {
            "name": "extend",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableMultiMapping.popone": {
            "name": "popone",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "types.Serializable"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "types.Serializable"
                ]
            }
        },
        "MutableMultiMapping.popall": {
            "name": "popall",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "types.Serializable"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "Optional[Any]",
                    "types.Serializable"
                ]
            }
        },
        "_TypingMeta.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        }
    },
    "multidict-master/multidict/_compat.py": {},
    "multidict-master/multidict/_multidict_base.py": {
        "_abc_itemsview_register": {
            "name": "_abc_itemsview_register",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "view_cls": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_abc_keysview_register": {
            "name": "_abc_keysview_register",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "view_cls": [
                    "str"
                ]
            }
        },
        "_abc_valuesview_register": {
            "name": "_abc_valuesview_register",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "view_cls": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_viewbaseset_richcmp": {
            "name": "_viewbaseset_richcmp",
            "location": 16,
            "return": [
                "float",
                "Dict[str, Any]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "view": [
                    "list",
                    "Optional[int]",
                    "Union[int, float]",
                    "int"
                ],
                "other": [
                    "int",
                    "dict",
                    "List[int]",
                    "List[Tuple[Any, Any]]"
                ],
                "op": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_viewbaseset_and": {
            "name": "_viewbaseset_and",
            "location": 51,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "view": [
                    "dict",
                    "int"
                ],
                "other": [
                    "Set[VT]",
                    "Set[T]"
                ]
            }
        },
        "_viewbaseset_or": {
            "name": "_viewbaseset_or",
            "location": 63,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "view": [
                    "dict",
                    "int"
                ],
                "other": [
                    "Set[VT]",
                    "Set[T]"
                ]
            }
        },
        "_viewbaseset_sub": {
            "name": "_viewbaseset_sub",
            "location": 75,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "view": [
                    "dict",
                    "int"
                ],
                "other": [
                    "Set[VT]",
                    "Set[T]"
                ]
            }
        },
        "_viewbaseset_xor": {
            "name": "_viewbaseset_xor",
            "location": 87,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "view": [
                    "dict",
                    "int"
                ],
                "other": [
                    "Set[VT]",
                    "Set[T]"
                ]
            }
        },
        "_itemsview_isdisjoint": {
            "name": "_itemsview_isdisjoint",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "int",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "other": [
                    "float",
                    "Tuple['cirq.Qid']",
                    "bool"
                ]
            }
        },
        "_itemsview_repr": {
            "name": "_itemsview_repr",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "_keysview_isdisjoint": {
            "name": "_keysview_isdisjoint",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "view": [
                    "int",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "other": [
                    "float",
                    "Tuple['cirq.Qid']",
                    "bool"
                ]
            }
        },
        "_keysview_repr": {
            "name": "_keysview_repr",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "_valuesview_repr": {
            "name": "_valuesview_repr",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "_mdrepr": {
            "name": "_mdrepr",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "md": [
                    "bytes",
                    "Type",
                    "int",
                    "float",
                    "Dict[str, Set[str]]"
                ]
            }
        }
    },
    "multidict-master/multidict/_multidict_py.py": {
        "getversion": {
            "name": "getversion",
            "location": 27,
            "return": [
                "MutableMapping[str, Any]",
                "List[Dict[str, Any]]",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "md": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GenericAlias": {
            "name": "GenericAlias",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "_Impl.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_Impl.incr_version": {
            "name": "incr_version",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_Base._title": {
            "name": "_title",
            "location": 56,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "_Base.getall": {
            "name": "getall",
            "location": 59,
            "return": [
                "int",
                "str",
                "bytes",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "default": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "_Base.getone": {
            "name": "getone",
            "location": 69,
            "return": [
                "List[str]",
                "bool",
                "List[mypy.types.Type]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "default": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "_Base.__getitem__": {
            "name": "__getitem__",
            "location": 81,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "_Base.get": {
            "name": "get",
            "location": 84,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "int",
                    "str",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "float"
                ],
                "default": [
                    "bytes",
                    "int",
                    "str",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "float"
                ]
            }
        },
        "_Base.__iter__": {
            "name": "__iter__",
            "location": 88,
            "return": [
                "List[int]",
                "bytearray",
                "Iterator[str]",
                "Iterable",
                "Iterator[T]",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Base.__len__": {
            "name": "__len__",
            "location": 91,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Base.keys": {
            "name": "keys",
            "location": 94,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Base.items": {
            "name": "items",
            "location": 98,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Base.values": {
            "name": "values",
            "location": 102,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Base.__eq__": {
            "name": "__eq__",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]",
                    "Iterable[T]"
                ]
            }
        },
        "_Base.__contains__": {
            "name": "__contains__",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "_Base.__repr__": {
            "name": "__repr__",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDictProxy.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "T",
                    "Mapping[str, Any]",
                    "Hashable",
                    "Dict[str, float]"
                ]
            }
        },
        "MultiDictProxy.__reduce__": {
            "name": "__reduce__",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDictProxy.copy": {
            "name": "copy",
            "location": 155,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Dict[str, Any]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CIMultiDictProxy.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "FrozenSet[int]",
                    "T",
                    "bool",
                    "List['cirq.Qid']",
                    "Dict[str, float]"
                ]
            }
        },
        "CIMultiDictProxy._title": {
            "name": "_title",
            "location": 172,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "CIMultiDictProxy.copy": {
            "name": "copy",
            "location": 175,
            "return": [
                "dict",
                "str",
                "Sequence",
                "Dict[str, str]",
                "int",
                "bytes",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__reduce__": {
            "name": "__reduce__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiDict._title": {
            "name": "_title",
            "location": 196,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "MultiDict._key": {
            "name": "_key",
            "location": 199,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Union[str, Iterable[str]]",
                    "str",
                    "tuple",
                    "int"
                ]
            }
        },
        "MultiDict.add": {
            "name": "add",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "value": [
                    "dict",
                    "str",
                    "abc.graph.EdgeKeyType",
                    "Dict[str, Any]"
                ]
            }
        },
        "MultiDict.copy": {
            "name": "copy",
            "location": 212,
            "return": [
                "str",
                "Callable[[str], T]",
                "types.ModuleType",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.extend": {
            "name": "extend",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict._extend": {
            "name": "_extend",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": [],
                "name": [
                    "str",
                    "int"
                ],
                "method": [
                    "str",
                    "bool",
                    "apistar.types.ParamName",
                    "Sequence[Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MultiDict._extend_items": {
            "name": "_extend_items",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[str]",
                    "T",
                    "Callable",
                    "list"
                ]
            }
        },
        "MultiDict.clear": {
            "name": "clear",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__setitem__": {
            "name": "__setitem__",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "MultiDict.__delitem__": {
            "name": "__delitem__",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Type[RuntimeError]"
                ]
            }
        },
        "MultiDict.setdefault": {
            "name": "setdefault",
            "location": 287,
            "return": [
                "List[str]",
                "bool",
                "List[mypy.types.Type]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[Callable[[Dict], Hashable], str]",
                    "Hashable",
                    "T",
                    "Optional[str]"
                ],
                "default": [
                    "int",
                    "bytes",
                    "str",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "float"
                ]
            }
        },
        "MultiDict.popone": {
            "name": "popone",
            "location": 296,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "default": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "MultiDict.popall": {
            "name": "popall",
            "location": 317,
            "return": [
                "list",
                "Dict[str, Any]",
                "bool",
                "types.Resolver"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "default": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "MultiDict.popitem": {
            "name": "popitem",
            "location": 344,
            "return": [
                "int",
                "Optional[int]",
                "Dict[int, int]",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.update": {
            "name": "update",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict._update_items": {
            "name": "_update_items",
            "location": 357,
            "return": [
                "OrderedDict",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[dict]",
                    "Iterable[T]"
                ]
            }
        },
        "MultiDict._replace": {
            "name": "_replace",
            "location": 389,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "abc.row.RowKeyType",
                    "type"
                ],
                "value": [
                    "str",
                    "dict",
                    "T",
                    "int"
                ]
            }
        },
        "CIMultiDict._title": {
            "name": "_title",
            "location": 420,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "_Iter.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ],
                "iterator": [
                    "int",
                    "bytes"
                ]
            }
        },
        "_Iter.__iter__": {
            "name": "__iter__",
            "location": 431,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Iter.__next__": {
            "name": "__next__",
            "location": 434,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Iter.__length_hint__": {
            "name": "__length_hint__",
            "location": 437,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ViewBase.__init__": {
            "name": "__init__",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "impl": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "_ViewBase.__len__": {
            "name": "__len__",
            "location": 445,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ItemsView.__contains__": {
            "name": "__contains__",
            "location": 450,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Pattern",
                    "Sequence[str]",
                    "bool",
                    "List[str]",
                    "dict",
                    "str",
                    "tuple",
                    "List[Tuple]"
                ]
            }
        },
        "_ItemsView.__iter__": {
            "name": "__iter__",
            "location": 458,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ItemsView._iter": {
            "name": "_iter",
            "location": 461,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "_ItemsView.__repr__": {
            "name": "__repr__",
            "location": 467,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ValuesView.__contains__": {
            "name": "__contains__",
            "location": 476,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "_ValuesView.__iter__": {
            "name": "__iter__",
            "location": 482,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ValuesView._iter": {
            "name": "_iter",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "_ValuesView.__repr__": {
            "name": "__repr__",
            "location": 491,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_KeysView.__contains__": {
            "name": "__contains__",
            "location": 500,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "_KeysView.__iter__": {
            "name": "__iter__",
            "location": 506,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "_KeysView._iter": {
            "name": "_iter",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "_KeysView.__repr__": {
            "name": "__repr__",
            "location": 515,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Impl.__sizeof__": {
            "name": "__sizeof__",
            "location": 51,
            "return": [
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiDict.__sizeof__": {
            "name": "__sizeof__",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "multidict-master/multidict/__init__.py": {},
    "multidict-master/tests/conftest.py": {
        "_multidict": {
            "name": "_multidict",
            "location": 21,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "request": []
            }
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "metafunc": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "multidict-master/tests/gen_pickles.py": {
        "write": {
            "name": "write",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "proto": [
                    "str",
                    "tuple",
                    "Mapping[str, Any]"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "multidict-master/tests/test_abc.py": {
        "cls": {
            "name": "cls",
            "location": 27,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": []
            }
        },
        "proxy_classes": {
            "name": "proxy_classes",
            "location": 41,
            "return": [
                "int",
                "str",
                "T",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_abc_inheritance": {
            "name": "test_abc_inheritance",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_abc_getall": {
            "name": "test_abc_getall",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_abc_getone": {
            "name": "test_abc_getone",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_abc_add": {
            "name": "test_abc_add",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_abc_extend": {
            "name": "test_abc_extend",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_abc_popone": {
            "name": "test_abc_popone",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_abc_popall": {
            "name": "test_abc_popall",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multidict_inheritance": {
            "name": "test_multidict_inheritance",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Union[Dict, str]",
                    "Exception",
                    "dict"
                ]
            }
        },
        "test_proxy_inheritance": {
            "name": "test_proxy_inheritance",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "proxy_classes": [
                    "bool"
                ]
            }
        },
        "test_generic_type_in_runtime": {
            "name": "test_generic_type_in_runtime",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "A.__getitem__": {
            "name": "__getitem__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "A.__iter__": {
            "name": "__iter__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "A.__len__": {
            "name": "__len__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "A.getall": {
            "name": "getall",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ],
                "default": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ]
            }
        },
        "A.getone": {
            "name": "getone",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ],
                "default": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ]
            }
        },
        "B.__setitem__": {
            "name": "__setitem__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "B.__delitem__": {
            "name": "__delitem__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "B.add": {
            "name": "add",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "T",
                    "str"
                ],
                "value": [
                    "T",
                    "str"
                ]
            }
        },
        "B.extend": {
            "name": "extend",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "B.popall": {
            "name": "popall",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ],
                "default": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ]
            }
        },
        "B.popone": {
            "name": "popone",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ],
                "default": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "multidict-master/tests/test_copy.py": {
        "cls": {
            "name": "cls",
            "location": 26,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": []
            }
        },
        "proxy_classes": {
            "name": "proxy_classes",
            "location": 40,
            "return": [
                "int",
                "str",
                "T",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "test_copy_proxy": {
            "name": "test_copy_proxy",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "proxy_classes": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_copy_std_copy": {
            "name": "test_copy_std_copy",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "test_ci_multidict_clone": {
            "name": "test_ci_multidict_clone",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "Callable"
                ]
            }
        }
    },
    "multidict-master/tests/test_guard.py": {
        "cls": {
            "name": "cls",
            "location": 14,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_guard_items": {
            "name": "test_guard_items",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_guard_keys": {
            "name": "test_guard_keys",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "test_guard_values": {
            "name": "test_guard_values",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "multidict-master/tests/test_istr.py": {
        "IStrMixin.test_ctor": {
            "name": "test_ctor",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrMixin.test_ctor_str": {
            "name": "test_ctor_str",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrMixin.test_ctor_istr": {
            "name": "test_ctor_istr",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrMixin.test_ctor_buffer": {
            "name": "test_ctor_buffer",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrMixin.test_ctor_repr": {
            "name": "test_ctor_repr",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrMixin.test_str": {
            "name": "test_str",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IStrMixin.test_eq": {
            "name": "test_eq",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyIStr._create_strs": {
            "name": "_create_strs",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestPyIStr.test_leak": {
            "name": "test_leak",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "multidict-master/tests/test_multidict.py": {
        "chained_callable": {
            "name": "chained_callable",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "module": [
                    "int",
                    "str",
                    "bool"
                ],
                "callables": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "cls": {
            "name": "cls",
            "location": 32,
            "return": [
                "str",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "_multidict": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "test_exposed_names": {
            "name": "test_exposed_names",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable",
                    "Iterable[T]",
                    "bool"
                ]
            }
        },
        "test__iter__types": {
            "name": "test__iter__types",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "T",
                    "int"
                ],
                "key_cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_proxy_copy": {
            "name": "test_proxy_copy",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "dict_cls": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "proxy_cls": [
                    "str"
                ]
            }
        },
        "test_subclassing": {
            "name": "test_subclassing",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, str]",
                    "Callable",
                    "Optional[BinaryIO]",
                    "str",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "chained_callable.chained_call": {
            "name": "chained_call",
            "location": 25,
            "return": [
                "bool",
                "Type[T]"
            ],
            "arguments": {}
        },
        "BaseMultiDictTest.test_instantiate__empty": {
            "name": "test_instantiate__empty",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        },
        "BaseMultiDictTest.test_instantiate__from_arg0": {
            "name": "test_instantiate__from_arg0",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "str"
                ],
                "arg0": [
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_instantiate__with_kwargs": {
            "name": "test_instantiate__with_kwargs",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable[[str], T]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BaseMultiDictTest.test_instantiate__from_generator": {
            "name": "test_instantiate__from_generator",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable",
                    "List[int]",
                    "bool",
                    "list"
                ]
            }
        },
        "BaseMultiDictTest.test_instantiate__from_list_of_lists": {
            "name": "test_instantiate__from_list_of_lists",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "BaseException",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "BaseMultiDictTest.test_instantiate__from_list_of_custom_pairs": {
            "name": "test_instantiate__from_list_of_custom_pairs",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable"
                ]
            }
        },
        "BaseMultiDictTest.test_getone": {
            "name": "test_getone",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable[[str], T]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BaseMultiDictTest.test__iter__": {
            "name": "test__iter__",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "BaseMultiDictTest.test_keys__contains": {
            "name": "test_keys__contains",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "BaseMultiDictTest.test_values__contains": {
            "name": "test_values__contains",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_items__contains": {
            "name": "test_items__contains",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_cannot_create_from_unaccepted": {
            "name": "test_cannot_create_from_unaccepted",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "List[List[Any]]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "BaseMultiDictTest.test_keys_is_set_less": {
            "name": "test_keys_is_set_less",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "BaseMultiDictTest.test_keys_is_set_less_equal": {
            "name": "test_keys_is_set_less_equal",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "BaseMultiDictTest.test_keys_is_set_equal": {
            "name": "test_keys_is_set_equal",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "BaseMultiDictTest.test_keys_is_set_greater": {
            "name": "test_keys_is_set_greater",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "BaseMultiDictTest.test_keys_is_set_greater_equal": {
            "name": "test_keys_is_set_greater_equal",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "BaseMultiDictTest.test_keys_is_set_not_equal": {
            "name": "test_keys_is_set_not_equal",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "BaseMultiDictTest.test_eq": {
            "name": "test_eq",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_eq2": {
            "name": "test_eq2",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable[[List], None]",
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "BaseMultiDictTest.test_eq3": {
            "name": "test_eq3",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable[[List], None]",
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "BaseMultiDictTest.test_eq_other_mapping_contains_more_keys": {
            "name": "test_eq_other_mapping_contains_more_keys",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_eq_bad_mapping_len": {
            "name": "test_eq_bad_mapping_len",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "BaseMultiDictTest.test_eq_bad_mapping_getitem": {
            "name": "test_eq_bad_mapping_getitem",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "BaseMultiDictTest.test_ne": {
            "name": "test_ne",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_and": {
            "name": "test_and",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_and2": {
            "name": "test_and2",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_or": {
            "name": "test_or",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_or2": {
            "name": "test_or2",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_sub": {
            "name": "test_sub",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_sub2": {
            "name": "test_sub2",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_xor": {
            "name": "test_xor",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_xor2": {
            "name": "test_xor2",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_isdisjoint": {
            "name": "test_isdisjoint",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[\"ShippingMethodResourceIdentifier\"]",
                    "Optional[\"ExternalTaxRateDraft\"]"
                ],
                "_set": [
                    "str",
                    "Dict[str, Any]",
                    "List[int]",
                    "List[str]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "BaseMultiDictTest.test_repr_issue_410": {
            "name": "test_repr_issue_410",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_op_issue_410": {
            "name": "test_op_issue_410",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "float",
                    "int",
                    "bool"
                ],
                "op": [
                    "Callable"
                ],
                "other": [
                    "Callable"
                ]
            }
        },
        "BaseMultiDictTest.test_weakref": {
            "name": "test_weakref",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_iter_length_hint_keys": {
            "name": "test_iter_length_hint_keys",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "int",
                    "T"
                ]
            }
        },
        "BaseMultiDictTest.test_iter_length_hint_items": {
            "name": "test_iter_length_hint_items",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable"
                ]
            }
        },
        "BaseMultiDictTest.test_iter_length_hint_values": {
            "name": "test_iter_length_hint_values",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "T"
                ]
            }
        },
        "BaseMultiDictTest.test_ctor_list_arg_and_kwds": {
            "name": "test_ctor_list_arg_and_kwds",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseMultiDictTest.test_ctor_tuple_arg_and_kwds": {
            "name": "test_ctor_tuple_arg_and_kwds",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "Optional[str]",
                    "eth.abc.SignedTransactionAPI",
                    "str"
                ]
            }
        },
        "BaseMultiDictTest.test_ctor_deque_arg_and_kwds": {
            "name": "test_ctor_deque_arg_and_kwds",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "Optional[str]",
                    "eth.abc.SignedTransactionAPI",
                    "str"
                ]
            }
        },
        "TestMultiDict.cls": {
            "name": "cls",
            "location": 414,
            "return": [
                "str",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "_multidict": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "TestMultiDict.test__repr__": {
            "name": "test__repr__",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable[[List], None]",
                    "str",
                    "bool",
                    "T"
                ]
            }
        },
        "TestMultiDict.test_getall": {
            "name": "test_getall",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable[[str], T]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestMultiDict.test_preserve_stable_ordering": {
            "name": "test_preserve_stable_ordering",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestMultiDict.test_get": {
            "name": "test_get",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bytes",
                    "str"
                ]
            }
        },
        "TestMultiDict.test_items__repr__": {
            "name": "test_items__repr__",
            "location": 451,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "dict",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestMultiDict.test_keys__repr__": {
            "name": "test_keys__repr__",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "TestMultiDict.test_values__repr__": {
            "name": "test_values__repr__",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict",
                    "Type[object]"
                ]
            }
        },
        "TestCIMultiDict.cls": {
            "name": "cls",
            "location": 467,
            "return": [
                "str",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "Tuple[int]"
                ],
                "_multidict": [
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "TestCIMultiDict.test_basics": {
            "name": "test_basics",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable[[str], T]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestCIMultiDict.test_getall": {
            "name": "test_getall",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable[[str], T]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestCIMultiDict.test_get": {
            "name": "test_get",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bytes",
                    "str"
                ]
            }
        },
        "TestCIMultiDict.test__repr__": {
            "name": "test__repr__",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable[[str], T]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestCIMultiDict.test_items__repr__": {
            "name": "test_items__repr__",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "dict",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestCIMultiDict.test_keys__repr__": {
            "name": "test_keys__repr__",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "TestCIMultiDict.test_values__repr__": {
            "name": "test_values__repr__",
            "location": 515,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict",
                    "Type[object]"
                ]
            }
        },
        "BaseMultiDictTest.test_weakref.cb": {
            "name": "cb",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "wr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseMultiDictTest.test_instantiate__from_list_of_custom_pairs.Pair.__len__": {
            "name": "__len__",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiDictTest.test_instantiate__from_list_of_custom_pairs.Pair.__getitem__": {
            "name": "__getitem__",
            "location": 134,
            "return": [
                "int",
                "Sequence[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseMultiDictTest.test_eq_bad_mapping_len.BadMapping.__getitem__": {
            "name": "__getitem__",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BaseMultiDictTest.test_eq_bad_mapping_len.BadMapping.__iter__": {
            "name": "__iter__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiDictTest.test_eq_bad_mapping_len.BadMapping.__len__": {
            "name": "__len__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiDictTest.test_eq_bad_mapping_getitem.BadMapping.__getitem__": {
            "name": "__getitem__",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[float, int]",
                    "abc.graph.GraphKeyType"
                ]
            }
        },
        "BaseMultiDictTest.test_eq_bad_mapping_getitem.BadMapping.__iter__": {
            "name": "__iter__",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMultiDictTest.test_eq_bad_mapping_getitem.BadMapping.__len__": {
            "name": "__len__",
            "location": 279,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "multidict-master/tests/test_mutable_multidict.py": {
        "TestMutableMultiDict.cls": {
            "name": "cls",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "_multidict": [
                    "str",
                    "dict",
                    "List[float]",
                    "float",
                    "bool"
                ]
            }
        },
        "TestMutableMultiDict.proxy_cls": {
            "name": "proxy_cls",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "_multidict": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, float]",
                    "Dict[int, Dict[int, int]]"
                ]
            }
        },
        "TestMutableMultiDict.istr": {
            "name": "istr",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "_multidict": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestMutableMultiDict.test_copy": {
            "name": "test_copy",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "TestMutableMultiDict.test__repr__": {
            "name": "test__repr__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestMutableMultiDict.test_getall": {
            "name": "test_getall",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable[[str], T]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestMutableMultiDict.test_add": {
            "name": "test_add",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bytes",
                    "str"
                ]
            }
        },
        "TestMutableMultiDict.test_extend": {
            "name": "test_extend",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Iterable[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "TestMutableMultiDict.test_extend_from_proxy": {
            "name": "test_extend_from_proxy",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "str",
                    "Iterable"
                ],
                "proxy_cls": [
                    "List[str]",
                    "set"
                ]
            }
        },
        "TestMutableMultiDict.test_clear": {
            "name": "test_clear",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bool",
                    "str",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "TestMutableMultiDict.test_del": {
            "name": "test_del",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Set[Hashable]",
                    "Hashable",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "TestMutableMultiDict.test_set_default": {
            "name": "test_set_default",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "Set[Hashable]"
                ]
            }
        },
        "TestMutableMultiDict.test_popitem": {
            "name": "test_popitem",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestMutableMultiDict.test_popitem_empty_multidict": {
            "name": "test_popitem_empty_multidict",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestMutableMultiDict.test_pop": {
            "name": "test_pop",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestMutableMultiDict.test_pop2": {
            "name": "test_pop2",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestMutableMultiDict.test_pop_default": {
            "name": "test_pop_default",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type",
                    "Type[T]",
                    "str",
                    "T"
                ]
            }
        },
        "TestMutableMultiDict.test_pop_raises": {
            "name": "test_pop_raises",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict",
                    "type"
                ]
            }
        },
        "TestMutableMultiDict.test_replacement_order": {
            "name": "test_replacement_order",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestMutableMultiDict.test_nonstr_key": {
            "name": "test_nonstr_key",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "float",
                    "int",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "TestMutableMultiDict.test_istr_key": {
            "name": "test_istr_key",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "float",
                    "int",
                    "T",
                    "Optional[str]"
                ],
                "istr": [
                    "int",
                    "bool",
                    "type",
                    "Optional[str]"
                ]
            }
        },
        "TestMutableMultiDict.test_str_derived_key": {
            "name": "test_str_derived_key",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "TestMutableMultiDict.test_istr_key_add": {
            "name": "test_istr_key_add",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Dict[str, str]"
                ],
                "istr": [
                    "int",
                    "List[str]",
                    "Mapping[str, Sequence[str]]",
                    "List[List[int]]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "TestMutableMultiDict.test_str_derived_key_add": {
            "name": "test_str_derived_key_add",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestMutableMultiDict.test_popall": {
            "name": "test_popall",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestMutableMultiDict.test_popall_default": {
            "name": "test_popall_default",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestMutableMultiDict.test_popall_key_error": {
            "name": "test_popall_key_error",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestMutableMultiDict.test_large_multidict_resizing": {
            "name": "test_large_multidict_resizing",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestCIMutableMultiDict.cls": {
            "name": "cls",
            "location": 252,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "_multidict": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "TestCIMutableMultiDict.proxy_cls": {
            "name": "proxy_cls",
            "location": 256,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "_multidict": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestCIMutableMultiDict.istr": {
            "name": "istr",
            "location": 260,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "_multidict": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestCIMutableMultiDict.test_getall": {
            "name": "test_getall",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable[[str], T]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestCIMutableMultiDict.test_ctor": {
            "name": "test_ctor",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Set[Hashable]",
                    "Hashable",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "TestCIMutableMultiDict.test_setitem": {
            "name": "test_setitem",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestCIMutableMultiDict.test_delitem": {
            "name": "test_delitem",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestCIMutableMultiDict.test_copy": {
            "name": "test_copy",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "MutableMapping[str, Any]",
                    "List[str]",
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "TestCIMutableMultiDict.test__repr__": {
            "name": "test__repr__",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestCIMutableMultiDict.test_add": {
            "name": "test_add",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestCIMutableMultiDict.test_extend": {
            "name": "test_extend",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Iterable[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "TestCIMutableMultiDict.test_extend_from_proxy": {
            "name": "test_extend_from_proxy",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "str",
                    "Iterable"
                ],
                "proxy_cls": [
                    "List[str]",
                    "set"
                ]
            }
        },
        "TestCIMutableMultiDict.test_clear": {
            "name": "test_clear",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bool",
                    "str",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "TestCIMutableMultiDict.test_del": {
            "name": "test_del",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Set[Hashable]",
                    "Hashable",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "TestCIMutableMultiDict.test_set_default": {
            "name": "test_set_default",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Callable",
                    "Set[Hashable]"
                ]
            }
        },
        "TestCIMutableMultiDict.test_popitem": {
            "name": "test_popitem",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestCIMutableMultiDict.test_popitem_empty_multidict": {
            "name": "test_popitem_empty_multidict",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestCIMutableMultiDict.test_pop": {
            "name": "test_pop",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestCIMutableMultiDict.test_pop_lowercase": {
            "name": "test_pop_lowercase",
            "location": 426,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestCIMutableMultiDict.test_pop_default": {
            "name": "test_pop_default",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type",
                    "Type[T]",
                    "str",
                    "T"
                ]
            }
        },
        "TestCIMutableMultiDict.test_pop_raises": {
            "name": "test_pop_raises",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "dict",
                    "type"
                ]
            }
        },
        "TestCIMutableMultiDict.test_extend_with_istr": {
            "name": "test_extend_with_istr",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str"
                ],
                "istr": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "TestCIMutableMultiDict.test_copy_istr": {
            "name": "test_copy_istr",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Set[Hashable]",
                    "Hashable",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "istr": [
                    "Set[Hashable]",
                    "Hashable",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "TestCIMutableMultiDict.test_eq": {
            "name": "test_eq",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "MutableMapping[str, Any]",
                    "dict"
                ]
            }
        },
        "TestCIMutableMultiDict.test_sizeof": {
            "name": "test_sizeof",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "TestCIMutableMultiDict.test_min_sizeof": {
            "name": "test_min_sizeof",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "TestCIMutableMultiDict.test_issue_620_items": {
            "name": "test_issue_620_items",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Dict[str, str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestCIMutableMultiDict.test_issue_620_keys": {
            "name": "test_issue_620_keys",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "float",
                    "int",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "TestCIMutableMultiDict.test_issue_620_values": {
            "name": "test_issue_620_values",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "multidict-master/tests/test_mypy.py": {
        "test_classes_not_abstract": {
            "name": "test_classes_not_abstract",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get": {
            "name": "test_get",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_default": {
            "name": "test_get_default",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getone": {
            "name": "test_getone",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getone_default": {
            "name": "test_getone_default",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getall": {
            "name": "test_getall",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getall_default": {
            "name": "test_getall_default",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_copy": {
            "name": "test_copy",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iter": {
            "name": "test_iter",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setitem": {
            "name": "test_setitem",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delitem": {
            "name": "test_delitem",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_additem": {
            "name": "test_additem",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extend_mapping": {
            "name": "test_extend_mapping",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_mapping": {
            "name": "test_update_mapping",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_popone": {
            "name": "test_popone",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_popall": {
            "name": "test_popall",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "multidict-master/tests/test_pickle.py": {
        "cls_name": {
            "name": "cls_name",
            "location": 28,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "cls": {
            "name": "cls",
            "location": 38,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": []
            }
        },
        "proxy_classes": {
            "name": "proxy_classes",
            "location": 52,
            "return": [
                "int",
                "str",
                "T",
                "bool"
            ],
            "arguments": {
                "request": [
                    "Set[str]",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_pickle": {
            "name": "test_pickle",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "Callable[[T], bool]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "pickle_protocol": [
                    "bytes",
                    "int",
                    "IO[bytes]",
                    "Set[str]"
                ]
            }
        },
        "test_pickle_proxy": {
            "name": "test_pickle_proxy",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "proxy_classes": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_load_from_file": {
            "name": "test_load_from_file",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "pickle_protocol": [
                    "str",
                    "pathlib.Path"
                ],
                "cls_name": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "multidict-master/tests/test_types.py": {
        "test_proxies": {
            "name": "test_proxies",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": []
            }
        },
        "test_dicts": {
            "name": "test_dicts",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_proxy_not_inherited_from_dict": {
            "name": "test_proxy_not_inherited_from_dict",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_dict_not_inherited_from_proxy": {
            "name": "test_dict_not_inherited_from_proxy",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": []
            }
        },
        "test_multidict_proxy_copy_type": {
            "name": "test_multidict_proxy_copy_type",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": [
                    "dict"
                ]
            }
        },
        "test_cimultidict_proxy_copy_type": {
            "name": "test_cimultidict_proxy_copy_type",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": []
            }
        },
        "test_create_multidict_proxy_from_nonmultidict": {
            "name": "test_create_multidict_proxy_from_nonmultidict",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_create_multidict_proxy_from_cimultidict": {
            "name": "test_create_multidict_proxy_from_cimultidict",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": []
            }
        },
        "test_create_multidict_proxy_from_multidict_proxy_from_mdict": {
            "name": "test_create_multidict_proxy_from_multidict_proxy_from_mdict",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": [
                    "dict"
                ]
            }
        },
        "test_create_cimultidict_proxy_from_cimultidict_proxy_from_ci": {
            "name": "test_create_cimultidict_proxy_from_cimultidict_proxy_from_ci",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": []
            }
        },
        "test_create_cimultidict_proxy_from_nonmultidict": {
            "name": "test_create_cimultidict_proxy_from_nonmultidict",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_create_ci_multidict_proxy_from_multidict": {
            "name": "test_create_ci_multidict_proxy_from_multidict",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "_multidict": [
                    "int"
                ]
            }
        },
        "test_generic_exists": {
            "name": "test_generic_exists",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "_multidict": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_generic_alias": {
            "name": "test_generic_alias",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "_multidict": []
            }
        }
    },
    "multidict-master/tests/test_update.py": {
        "cls": {
            "name": "cls",
            "location": 19,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "request": []
            }
        },
        "md_cls": {
            "name": "md_cls",
            "location": 24,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "_multidict": [
                    "str",
                    "List[float]",
                    "float",
                    "dict"
                ]
            }
        },
        "ci_md_cls": {
            "name": "ci_md_cls",
            "location": 29,
            "return": [
                "dict",
                "List[str]"
            ],
            "arguments": {
                "_multidict": [
                    "str",
                    "List[List[str]]"
                ]
            }
        },
        "istr": {
            "name": "istr",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_multidict": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_update_replace": {
            "name": "test_update_replace",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "test_update_append": {
            "name": "test_update_append",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "test_update_remove": {
            "name": "test_update_remove",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "test_update_replace_seq": {
            "name": "test_update_replace_seq",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "float",
                    "bool",
                    "str",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "test_update_replace_seq2": {
            "name": "test_update_replace_seq2",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "float",
                    "bool",
                    "str",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "test_update_append_seq": {
            "name": "test_update_append_seq",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "float",
                    "bool",
                    "str",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "test_update_remove_seq": {
            "name": "test_update_remove_seq",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "float",
                    "bool",
                    "str",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "test_update_md": {
            "name": "test_update_md",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "md_cls": [
                    "str",
                    "int",
                    "float",
                    "Union[str, int]"
                ]
            }
        },
        "test_update_istr_ci_md": {
            "name": "test_update_istr_ci_md",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "ci_md_cls": [
                    "BaseException",
                    "int",
                    "str"
                ],
                "istr": [
                    "dict",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "test_update_ci_md": {
            "name": "test_update_ci_md",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "ci_md_cls": [
                    "BaseException",
                    "int",
                    "str"
                ]
            }
        },
        "test_update_list_arg_and_kwds": {
            "name": "test_update_list_arg_and_kwds",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "float",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_update_tuple_arg_and_kwds": {
            "name": "test_update_tuple_arg_and_kwds",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "float",
                    "bool",
                    "str",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "test_update_deque_arg_and_kwds": {
            "name": "test_update_deque_arg_and_kwds",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "float",
                    "bool",
                    "str",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        }
    },
    "multidict-master/tests/test_version.py": {
        "VersionMixin.getver": {
            "name": "getver",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "VersionMixin.test_getversion_bad_param": {
            "name": "test_getversion_bad_param",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_ctor": {
            "name": "test_ctor",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_add": {
            "name": "test_add",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_delitem": {
            "name": "test_delitem",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_delitem_not_found": {
            "name": "test_delitem_not_found",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_setitem": {
            "name": "test_setitem",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_setitem_not_found": {
            "name": "test_setitem_not_found",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_clear": {
            "name": "test_clear",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_setdefault": {
            "name": "test_setdefault",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_popone": {
            "name": "test_popone",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_popone_default": {
            "name": "test_popone_default",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_popone_key_error": {
            "name": "test_popone_key_error",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_pop": {
            "name": "test_pop",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_pop_default": {
            "name": "test_pop_default",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_pop_key_error": {
            "name": "test_pop_key_error",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_popall": {
            "name": "test_popall",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_popall_default": {
            "name": "test_popall_default",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_popall_key_error": {
            "name": "test_popall_key_error",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_popitem": {
            "name": "test_popitem",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMixin.test_popitem_key_error": {
            "name": "test_popitem_key_error",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyMultiDict.getver": {
            "name": "getver",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestPyCIMultiDict.getver": {
            "name": "getver",
            "location": 198,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestMultiDict.getver": {
            "name": "getver",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestCIMultiDict.getver": {
            "name": "getver",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "multidict-master/tools/check_changes.py": {
        "get_root": {
            "name": "get_root",
            "location": 10,
            "return": [
                "bool",
                "Callable[[bytes], None]",
                "str",
                "float"
            ],
            "arguments": {
                "script_path": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        }
    }
}
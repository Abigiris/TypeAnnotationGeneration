{
    "multilevel-panels-master/setup.py": {},
    "multilevel-panels-master/examples/example.py": {
        "make_categorical_codes": {
            "name": "make_categorical_codes",
            "location": 30,
            "return": [
                "int",
                "str",
                "Optional[Dict]",
                "bytes"
            ],
            "arguments": {}
        },
        "categorical_df_to_mlp": {
            "name": "categorical_df_to_mlp",
            "location": 49,
            "return": [
                "int",
                "bytes",
                "str",
                "Tuple[Any, Any, Any]",
                "float"
            ],
            "arguments": {
                "df": [
                    "pandas.DataFrame",
                    "Sequence[Mapping]",
                    "int",
                    "str"
                ],
                "cat_to_code": [
                    "pandas.DataFrame",
                    "Sequence[Mapping]",
                    "int",
                    "str"
                ]
            }
        },
        "mlp_to_categorical_df": {
            "name": "mlp_to_categorical_df",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "mlp": [
                    "int",
                    "bool",
                    "Tuple[str]",
                    "str"
                ],
                "code_to_cat": [
                    "Sequence[Mapping]",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "multilevel-panels-master/src/multilevel_panels/multilevel_panels.py": {
        "setop2d_functor": {
            "name": "setop2d_functor",
            "location": 9,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "op": [
                    "str",
                    "Exception",
                    "bool"
                ]
            }
        },
        "setop2d_variadic_functor": {
            "name": "setop2d_variadic_functor",
            "location": 27,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "op": [
                    "str",
                    "Exception",
                    "bool"
                ]
            }
        },
        "get_gap_patterns": {
            "name": "get_gap_patterns",
            "location": 44,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "hasgaps": {
            "name": "hasgaps",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "bool_lst": [
                    "list",
                    "numpy.ndarray",
                    "int",
                    "T"
                ]
            }
        },
        "get_hi_lo_join": {
            "name": "get_hi_lo_join",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "hi": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "bool"
                ],
                "lo": [
                    "str",
                    "int",
                    "Dict[str, object]",
                    "bool"
                ]
            }
        },
        "intersectml_colwise_reduction": {
            "name": "intersectml_colwise_reduction",
            "location": 97,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "str",
                    "Sequence[T]",
                    "int"
                ],
                "b": [
                    "int",
                    "str",
                    "Sequence"
                ]
            }
        },
        "intersectml": {
            "name": "intersectml",
            "location": 131,
            "return": [
                "Callable",
                "Tuple[Any, Any, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "get_lo_hi_setdiff": {
            "name": "get_lo_hi_setdiff",
            "location": 149,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "hi": [
                    "Dict[str, Set[str]]",
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "lo": [
                    "Dict[str, Set[str]]",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "unionml_colwise_reduction": {
            "name": "unionml_colwise_reduction",
            "location": 160,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "unions": [
                    "Sequence",
                    "Optional[Union[str, Any, Any, Any]]",
                    "List[str]",
                    "Optional[Union[str, Any]]",
                    "Callable",
                    "MutableMapping",
                    "Iterable[int]"
                ]
            }
        },
        "unionml": {
            "name": "unionml",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "float",
                    "int",
                    "str",
                    "tuple"
                ],
                "b": [
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "decompose": {
            "name": "decompose",
            "location": 185,
            "return": [
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "float",
                    "dict",
                    "str",
                    "Tuple[int, int]"
                ],
                "assume_unique": [
                    "bool",
                    "int"
                ]
            }
        },
        "recompose": {
            "name": "recompose",
            "location": 206,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "tup": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "setop2d_functor.setop2d": {
            "name": "setop2d",
            "location": 15,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "bool",
                    "memoryview",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[float]",
                    "numpy.ndarray"
                ]
            }
        },
        "setop2d_variadic_functor.setop2d_variadic": {
            "name": "setop2d_variadic",
            "location": 30,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "MultilevelPanel.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MultilevelPanel.__getitem__": {
            "name": "__getitem__",
            "location": 234,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "MultilevelPanel.__eq__": {
            "name": "__eq__",
            "location": 238,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "MultilevelPanel.__repr__": {
            "name": "__repr__",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilevelPanel.flatten": {
            "name": "flatten",
            "location": 250,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultilevelPanel.intersect": {
            "name": "intersect",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultilevelPanel.union": {
            "name": "union",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "multilevel-panels-master/src/multilevel_panels/__init__.py": {},
    "multilevel-panels-master/tests/test_multilevel_panels.py": {
        "set_random_nans": {
            "name": "set_random_nans",
            "location": 308,
            "return": [
                "bool",
                "bytes",
                "dict"
            ],
            "arguments": {
                "arr": [
                    "List[str]",
                    "Optional[float]",
                    "bool",
                    "Optional[int]"
                ],
                "p": [
                    "bool",
                    "float"
                ],
                "from_col": [
                    "int",
                    "bool",
                    "list",
                    "List[str]"
                ]
            }
        },
        "get_random_mlp": {
            "name": "get_random_mlp",
            "location": 331,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "n": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "test_setop2d_variadic_functor": {
            "name": "test_setop2d_variadic_functor",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "op": [],
                "args": [],
                "expected": [
                    "int"
                ]
            }
        },
        "test_decompose_and_recompose": {
            "name": "test_decompose_and_recompose",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_hasgaps": {
            "name": "test_hasgaps",
            "location": 492,
            "return": [
                ""
            ],
            "arguments": {
                "bool_lst": [
                    "str",
                    "list",
                    "Tuple[int, int, int]"
                ],
                "expected": [
                    "str",
                    "list",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "TestMultilevelPanel.test_flatten": {
            "name": "test_flatten",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultilevelPanel.test_intersect": {
            "name": "test_intersect",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultilevelPanel.test_union": {
            "name": "test_union",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultilevelPanel.test_empty_intersection": {
            "name": "test_empty_intersection",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultilevelPanel.test_level_skipping_raises": {
            "name": "test_level_skipping_raises",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultilevelPanelPerformance.test_intersect": {
            "name": "test_intersect",
            "location": 501,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultilevelPanelPerformance.test_union": {
            "name": "test_union",
            "location": 505,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
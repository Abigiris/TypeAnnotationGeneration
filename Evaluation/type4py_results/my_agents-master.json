{
    "my_agents-master/setup.py": {},
    "my_agents-master/my_agents/comparison.py": {},
    "my_agents-master/my_agents/evaluate.py": {},
    "my_agents-master/my_agents/main.py": {},
    "my_agents-master/my_agents/vectorize_test.py": {},
    "my_agents-master/my_agents/agents/ddqn_agent.py": {
        "build_dense_network": {
            "name": "build_dense_network",
            "location": 24,
            "return": [
                "Pattern",
                "int",
                "str"
            ],
            "arguments": {
                "num_actions": [
                    "dict",
                    "bool"
                ],
                "state_shape": [],
                "hidden_layers": [
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DDQNAgent.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "tuple"
                ],
                "state_shape": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "tuple"
                ],
                "gamma": [
                    "Optional[str]",
                    "Optional[bool]",
                    "numpy.ndarray"
                ],
                "target_update_freq": [
                    "bool",
                    "bytes",
                    "Optional[bool]",
                    "List[str]"
                ],
                "prebuilt_model": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Dict[str, np.ndarray]",
                    "Optional[Tuple[float, float]]"
                ]
            }
        },
        "DDQNAgent.act": {
            "name": "act",
            "location": 82,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DDQNAgent.process_observation": {
            "name": "process_observation",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "action": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "reward": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "next_state": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "done": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ]
            }
        },
        "DDQNAgent.train": {
            "name": "train",
            "location": 91,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int",
                    "Callable",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bool",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "epochs": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float",
                    "str"
                ]
            }
        },
        "DDQNAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DDQNAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 115,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "numpy.ndarray",
                    "Sequence[int]",
                    "list",
                    "List[list]",
                    "List[str]"
                ],
                "actions": [
                    "numpy.ndarray",
                    "List[int]",
                    "bool",
                    "List[List[int]]",
                    "Iterable[Any]",
                    "str"
                ],
                "rewards": [
                    "numpy.ndarray",
                    "numpy.dtype",
                    "Optional[Tuple[int, ...]]",
                    "bool",
                    "str",
                    "int"
                ],
                "next_states": [],
                "dones": [
                    "numpy.ndarray",
                    "numpy.dtype",
                    "Optional[Tuple[int, ...]]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "DDQNAgent.Q": {
            "name": "Q",
            "location": 129,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "str",
                    "List[str]"
                ],
                "use_target": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "DDQNAgent.policy": {
            "name": "policy",
            "location": 142,
            "return": [
                "int",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "use_target": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "DDQNAgent.V": {
            "name": "V",
            "location": 146,
            "return": [
                "int",
                "str",
                "float",
                "Optional[str]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "bool"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "DDQNAgent.save": {
            "name": "save",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "DDQNAgent.from_h5": {
            "name": "from_h5",
            "location": 158,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "bool"
                ],
                "gamma": [
                    "bool",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]"
                ],
                "target_update_freq": [
                    "bool",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "my_agents-master/my_agents/agents/distributional_agent.py": {
        "build_distributional_network": {
            "name": "build_distributional_network",
            "location": 19,
            "return": [
                "Pattern",
                "int",
                "str"
            ],
            "arguments": {
                "num_actions": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "state_shape": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ],
                "num_atoms": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "hidden_layers": [
                    "list",
                    "bool",
                    "bytes"
                ]
            }
        },
        "DistributionalAgent.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "int",
                    "tuple",
                    "Optional[int]",
                    "Union[int, None]"
                ],
                "state_shape": [
                    "int",
                    "tuple",
                    "Optional[int]",
                    "Union[int, None]"
                ],
                "v_min": [
                    "int",
                    "float",
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "v_max": [
                    "int",
                    "float",
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "num_atoms": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Iterable[str]",
                    "Callable"
                ],
                "gamma": [
                    "bool",
                    "numpy.array",
                    "str"
                ],
                "target_update_freq": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "bytes",
                    "bool",
                    "int",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Callable"
                ],
                "prebuilt_model": [
                    "Optional[List]",
                    "Optional[Any]",
                    "tensorflow.keras.models.Model",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Callable[[str], bool]]"
                ]
            }
        },
        "DistributionalAgent.act": {
            "name": "act",
            "location": 83,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DistributionalAgent.process_observation": {
            "name": "process_observation",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "action": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "reward": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "next_state": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "done": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ]
            }
        },
        "DistributionalAgent.train": {
            "name": "train",
            "location": 92,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int",
                    "Callable",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bool",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "epochs": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float",
                    "str"
                ]
            }
        },
        "DistributionalAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributionalAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 116,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "numpy.ndarray",
                    "Sequence[int]",
                    "list",
                    "List[str]",
                    "List[list]"
                ],
                "actions": [
                    "numpy.ndarray",
                    "list"
                ],
                "rewards": [
                    "int",
                    "numpy.ndarray",
                    "List[Set[int]]",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str",
                    "bool"
                ],
                "next_states": [
                    "numpy.ndarray",
                    "list"
                ],
                "dones": [
                    "int",
                    "str",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "DistributionalAgent.Z": {
            "name": "Z",
            "location": 149,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "str",
                    "int"
                ]
            }
        },
        "DistributionalAgent.Q": {
            "name": "Q",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "numpy.ndarray",
                    "List[int]",
                    "List[tensorflow.Tensor]",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "DistributionalAgent.policy": {
            "name": "policy",
            "location": 168,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DistributionalAgent.V": {
            "name": "V",
            "location": 172,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "dict",
                    "numpy.array",
                    "float",
                    "int"
                ]
            }
        },
        "DistributionalAgent.save": {
            "name": "save",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "DistributionalAgent.from_h5": {
            "name": "from_h5",
            "location": 184,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "bool",
                    "int"
                ],
                "v_min": [
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "v_max": [
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "gamma": [
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "target_update_freq": [
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "DistributionalAgent.Distribution.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v_min": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "v_max": [
                    "int",
                    "float"
                ],
                "num_atoms": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "DistributionalAgent.Distribution.project_to_distribution": {
            "name": "project_to_distribution",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "my_agents-master/my_agents/agents/dqn_agent.py": {
        "build_dense_network": {
            "name": "build_dense_network",
            "location": 24,
            "return": [
                "Pattern",
                "int",
                "str"
            ],
            "arguments": {
                "num_actions": [
                    "dict",
                    "bool"
                ],
                "state_shape": [],
                "hidden_layers": [
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DQNAgent.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "tuple"
                ],
                "state_shape": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "tuple"
                ],
                "gamma": [
                    "Optional[str]",
                    "Optional[bool]",
                    "numpy.ndarray"
                ],
                "target_update_freq": [
                    "bool",
                    "bytes",
                    "Optional[bool]",
                    "List[str]"
                ],
                "prebuilt_model": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Dict[str, np.ndarray]",
                    "Optional[Tuple[float, float]]"
                ]
            }
        },
        "DQNAgent.act": {
            "name": "act",
            "location": 84,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DQNAgent.process_observation": {
            "name": "process_observation",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "action": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "reward": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "next_state": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "done": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ]
            }
        },
        "DQNAgent.train": {
            "name": "train",
            "location": 93,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int",
                    "Callable",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bool",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "epochs": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float",
                    "str"
                ]
            }
        },
        "DQNAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 117,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "numpy.ndarray",
                    "Sequence[int]",
                    "list",
                    "List[list]",
                    "List[str]"
                ],
                "actions": [
                    "numpy.ndarray",
                    "List[int]",
                    "bool",
                    "List[List[int]]",
                    "Iterable[Any]",
                    "str"
                ],
                "rewards": [
                    "numpy.ndarray",
                    "Optional[Tuple[int, ...]]",
                    "numpy.dtype",
                    "int"
                ],
                "next_states": [
                    "numpy.ndarray"
                ],
                "dones": [
                    "numpy.ndarray",
                    "Optional[Tuple[int, ...]]",
                    "numpy.dtype",
                    "int"
                ]
            }
        },
        "DQNAgent.Q": {
            "name": "Q",
            "location": 131,
            "return": [
                "str",
                "Optional[bool]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "Iterable[Any]",
                    "bytes"
                ]
            }
        },
        "DQNAgent.policy": {
            "name": "policy",
            "location": 140,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DQNAgent.V": {
            "name": "V",
            "location": 144,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "dict",
                    "numpy.array",
                    "float",
                    "int"
                ]
            }
        },
        "DQNAgent.save": {
            "name": "save",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "DQNAgent.from_h5": {
            "name": "from_h5",
            "location": 156,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "bool"
                ],
                "gamma": [
                    "bool",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]"
                ],
                "target_update_freq": [
                    "bool",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "my_agents-master/my_agents/agents/nstep_agent.py": {
        "build_dense_network": {
            "name": "build_dense_network",
            "location": 21,
            "return": [
                "Pattern",
                "int",
                "str"
            ],
            "arguments": {
                "num_actions": [
                    "dict",
                    "bool"
                ],
                "state_shape": [],
                "hidden_layers": [
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "NStepDDQNAgent.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "tuple",
                    "Optional[str]",
                    "bytes"
                ],
                "state_shape": [
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "tuple",
                    "Optional[str]",
                    "bytes"
                ],
                "update_horizon": [
                    "bool",
                    "int",
                    "Type[MutableMapping[Any, Any]]",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "gamma": [
                    "bool",
                    "int",
                    "Optional[dict]"
                ],
                "target_update_freq": [
                    "bool",
                    "bytes",
                    "Optional[bool]",
                    "int"
                ],
                "prebuilt_model": [
                    "Optional[bool]",
                    "Optional[float]",
                    "Dict[str, np.ndarray]",
                    "Optional[Tuple[float, float]]",
                    "Union[None, int]",
                    "Optional[List]",
                    "bool"
                ]
            }
        },
        "NStepDDQNAgent.act": {
            "name": "act",
            "location": 82,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "NStepDDQNAgent.process_observation": {
            "name": "process_observation",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "action": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "reward": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "next_state": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "done": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ]
            }
        },
        "NStepDDQNAgent.train": {
            "name": "train",
            "location": 91,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int",
                    "Callable",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "List[float]",
                    "float"
                ],
                "epochs": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float",
                    "str"
                ]
            }
        },
        "NStepDDQNAgent._sample_n_transitions": {
            "name": "_sample_n_transitions",
            "location": 113,
            "return": [
                "int",
                "str",
                "IO[str]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "Tuple[int, int]",
                    "list",
                    "str",
                    "bool",
                    "Sequence"
                ]
            }
        },
        "NStepDDQNAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NStepDDQNAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 144,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "numpy.ndarray",
                    "Sequence[int]",
                    "list",
                    "List[list]",
                    "List[str]"
                ],
                "actions": [
                    "int",
                    "bool",
                    "numpy.ndarray"
                ],
                "rewards": [
                    "Callable",
                    "numpy.ndarray",
                    "List[List[int]]"
                ],
                "next_states": [],
                "dones": [
                    "Callable",
                    "numpy.ndarray",
                    "List[List[int]]"
                ],
                "gammas": [
                    "Callable",
                    "numpy.ndarray",
                    "List[List[int]]"
                ]
            }
        },
        "NStepDDQNAgent.Q": {
            "name": "Q",
            "location": 159,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "str",
                    "List[str]"
                ],
                "use_target": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "NStepDDQNAgent.policy": {
            "name": "policy",
            "location": 172,
            "return": [
                "int",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "use_target": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "NStepDDQNAgent.V": {
            "name": "V",
            "location": 176,
            "return": [
                "int",
                "str",
                "float",
                "Optional[str]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "bool"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "NStepDDQNAgent.save": {
            "name": "save",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "NStepDDQNAgent.from_h5": {
            "name": "from_h5",
            "location": 188,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "bool"
                ],
                "update_horizon": [
                    "Optional[float]",
                    "List[dict]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "gamma": [
                    "Optional[float]",
                    "List[dict]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "target_update_freq": [
                    "Optional[float]",
                    "List[dict]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ]
            }
        }
    },
    "my_agents-master/my_agents/agents/prioritized_ddqn_agent.py": {
        "build_dense_network": {
            "name": "build_dense_network",
            "location": 16,
            "return": [
                "Pattern",
                "int",
                "str"
            ],
            "arguments": {
                "num_actions": [
                    "dict",
                    "bool"
                ],
                "state_shape": [],
                "hidden_layers": [
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PrioritizedDDQNAgent.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "tuple"
                ],
                "state_shape": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "tuple"
                ],
                "gamma": [
                    "Optional[str]",
                    "Optional[bool]",
                    "numpy.ndarray"
                ],
                "target_update_freq": [
                    "bool",
                    "bytes",
                    "Optional[bool]",
                    "List[str]"
                ],
                "prebuilt_model": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Dict[str, np.ndarray]",
                    "Optional[Tuple[float, float]]"
                ]
            }
        },
        "PrioritizedDDQNAgent.act": {
            "name": "act",
            "location": 74,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "PrioritizedDDQNAgent.process_observation": {
            "name": "process_observation",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bool",
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "action": [
                    "bool",
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "reward": [
                    "bool",
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "next_state": [
                    "bool",
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "done": [
                    "bool",
                    "numpy.ndarray",
                    "int",
                    "float"
                ]
            }
        },
        "PrioritizedDDQNAgent.train": {
            "name": "train",
            "location": 83,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "int",
                    "Callable",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "epochs": [
                    "int",
                    "List[float]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "PrioritizedDDQNAgent._update_target_model": {
            "name": "_update_target_model",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PrioritizedDDQNAgent._observations_to_train_data": {
            "name": "_observations_to_train_data",
            "location": 111,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "numpy.ndarray",
                    "Sequence[int]",
                    "list",
                    "List[list]",
                    "List[str]"
                ],
                "actions": [
                    "numpy.ndarray",
                    "List[int]",
                    "bool",
                    "List[List[int]]",
                    "Iterable[Any]",
                    "str"
                ],
                "rewards": [
                    "numpy.ndarray",
                    "numpy.dtype",
                    "Optional[Tuple[int, ...]]",
                    "bool",
                    "str",
                    "int"
                ],
                "next_states": [],
                "dones": [
                    "numpy.ndarray",
                    "numpy.dtype",
                    "Optional[Tuple[int, ...]]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "PrioritizedDDQNAgent.Q": {
            "name": "Q",
            "location": 125,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "str",
                    "List[str]"
                ],
                "use_target": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "PrioritizedDDQNAgent.policy": {
            "name": "policy",
            "location": 138,
            "return": [
                "int",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "use_target": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "PrioritizedDDQNAgent.V": {
            "name": "V",
            "location": 142,
            "return": [
                "int",
                "str",
                "float",
                "Optional[str]",
                "List[Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "bool"
                ],
                "use_target": [
                    "bool"
                ]
            }
        },
        "PrioritizedDDQNAgent.save": {
            "name": "save",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "PrioritizedDDQNAgent.from_h5": {
            "name": "from_h5",
            "location": 154,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "bool"
                ],
                "gamma": [
                    "List[dict]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable[[Optional], None]"
                ],
                "target_update_freq": [
                    "List[dict]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable[[Optional], None]"
                ]
            }
        }
    },
    "my_agents-master/my_agents/agents/prioritized_memory.py": {
        "SumTree.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SumTree.add": {
            "name": "add",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "priority": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]"
                ],
                "data": [
                    "dict",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "SumTree.update": {
            "name": "update",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_index": [
                    "dict"
                ],
                "priority": [
                    "dict"
                ]
            }
        },
        "SumTree.get_leaf": {
            "name": "get_leaf",
            "location": 46,
            "return": [
                "str",
                "Tuple[str, str]",
                "list",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "SumTree.total_priority": {
            "name": "total_priority",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumTree.max_priority": {
            "name": "max_priority",
            "location": 77,
            "return": [
                "float",
                "dict",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumTree.min_priority": {
            "name": "min_priority",
            "location": 81,
            "return": [
                "float",
                "dict",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SumTree.__len__": {
            "name": "__len__",
            "location": 84,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrioritizedMemory.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "bool",
                    "Exception",
                    "int",
                    "List[str]"
                ],
                "alpha": [
                    "Callable",
                    "Union[float, Tuple[float, float]]",
                    "Optional[Callable[[Any], None]]",
                    "str"
                ],
                "beta": [
                    "Callable",
                    "Union[float, Tuple[float, float]]",
                    "Optional[Callable[[Any], None]]",
                    "str"
                ],
                "max_error": [
                    "int"
                ]
            }
        },
        "PrioritizedMemory.store": {
            "name": "store",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "VT"
                ]
            }
        },
        "PrioritizedMemory.sample": {
            "name": "sample",
            "location": 110,
            "return": [
                "float",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "float"
                ]
            }
        },
        "PrioritizedMemory.batch_update": {
            "name": "batch_update",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_idx": [
                    "bool",
                    "float",
                    "list",
                    "List[Tuple[float, Any]]",
                    "int",
                    "Iterable"
                ],
                "abs_errors": [
                    "str",
                    "bool"
                ]
            }
        },
        "PrioritizedMemory.__len__": {
            "name": "__len__",
            "location": 150,
            "return": [
                "str",
                "BaseException",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my_agents-master/my_agents/agents/table_agent.py": {
        "TableAgent.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_actions": [
                    "int",
                    "List[int]"
                ],
                "num_states": [
                    "int",
                    "str"
                ],
                "gamma": [
                    "float",
                    "int",
                    "str",
                    "tuple"
                ],
                "alpha": [
                    "float",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        },
        "TableAgent.act": {
            "name": "act",
            "location": 14,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TableAgent.process_observation": {
            "name": "process_observation",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bool"
                ],
                "action": [
                    "bool"
                ],
                "reward": [
                    "List[List[str]]",
                    "List[int]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "next_state": [
                    "str",
                    "int",
                    "List[int]",
                    "Tuple[int, int]",
                    "Tuple[float, float]"
                ],
                "done": [
                    "bool",
                    "List[Callable]"
                ]
            }
        },
        "TableAgent.train": {
            "name": "train",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "step_num": [
                    "bool",
                    "int",
                    "Iterable[T]",
                    "Sequence[str]",
                    "float"
                ]
            }
        },
        "TableAgent.Q": {
            "name": "Q",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TableAgent.policy": {
            "name": "policy",
            "location": 34,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TableAgent.V": {
            "name": "V",
            "location": 38,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "numpy.array",
                    "float",
                    "int"
                ]
            }
        },
        "TableAgent.print_q_map": {
            "name": "print_q_map",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "my_agents-master/my_agents/core/runner.py": {
        "constant_decay_epsilon": {
            "name": "constant_decay_epsilon",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "epoch": [
                    "int",
                    "Callable",
                    "str"
                ],
                "initial_epsilon": [
                    "int",
                    "Callable",
                    "str"
                ],
                "decay_rate": [
                    "int",
                    "Callable",
                    "str"
                ],
                "min_epsilon": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "List[str]"
                ],
                "serializer": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "List[str]"
                ],
                "agent": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "List[str]"
                ],
                "epsilon_policy": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "List[str]"
                ],
                "training_period": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "List[str]"
                ],
                "max_episode_steps": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "Runner.warm_up": {
            "name": "warm_up",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_steps": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Runner.train": {
            "name": "train",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "num_epochs": [
                    "int"
                ],
                "num_episodes": [
                    "int",
                    "Optional[float]",
                    "float",
                    "str"
                ],
                "render_frequency": [
                    "int",
                    "List[float]",
                    "float"
                ]
            }
        },
        "Runner.demonstrate": {
            "name": "demonstrate",
            "location": 69,
            "return": [
                "bool",
                "str",
                "Union[numbers.Real, numpy.ndarray]"
            ],
            "arguments": {
                "self": [],
                "num_episodes": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Runner.render": {
            "name": "render",
            "location": 78,
            "return": [
                "str",
                "List[List[str]]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.history": {
            "name": "history",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.run_episode": {
            "name": "run_episode",
            "location": 87,
            "return": [
                "float",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "epsilon": [
                    "float",
                    "int"
                ],
                "training": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "render": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Runner.run_epoch": {
            "name": "run_epoch",
            "location": 119,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "epsilon": [
                    "List[str]",
                    "bytes",
                    "int"
                ],
                "num_episodes": [
                    "int",
                    "Tuple[float, float]",
                    "str"
                ],
                "training": [
                    "List[str]",
                    "bytes",
                    "int"
                ],
                "render_frequency": [
                    "int",
                    "str",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "my_agents-master/my_agents/core/states.py": {
        "one_hot": {
            "name": "one_hot",
            "location": 3,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "size": [
                    "str",
                    "int",
                    "float"
                ],
                "idx": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "StateSerializer.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_shape": [
                    "str",
                    "numpy.array",
                    "State[np.ndarray]"
                ]
            }
        },
        "StateSerializer.serialize": {
            "name": "serialize",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "StateSerializer.deserialize": {
            "name": "deserialize",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "StateSerializer.shape": {
            "name": "shape",
            "location": 31,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateSerializer.from_num_states": {
            "name": "from_num_states",
            "location": 35,
            "return": [
                "list",
                "int",
                "bytes",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "num_states": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "my_agents-master/my_agents/core/visualization.py": {
        "rolling_mean": {
            "name": "rolling_mean",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "history": [
                    "int",
                    "List[Dict]",
                    "list",
                    "List[str]",
                    "List[int]",
                    "bool"
                ],
                "window": [
                    "bool"
                ],
                "label": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[int]"
                ],
                "axis": [
                    "List[List[Callable]]",
                    "list",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "show": [
                    "bool",
                    "int",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "float"
                ]
            }
        }
    }
}
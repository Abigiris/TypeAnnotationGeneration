{
    "myenv-master/setup.py": {
        "project_path": {
            "name": "project_path",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "myenv-master/src/myenv/__init__.py": {
        "_iter_env_config": {
            "name": "_iter_env_config",
            "location": 54,
            "return": [
                "typing.Iterable[typing.Tuple[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "env_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_init_environ": {
            "name": "_init_environ",
            "location": 79,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "environ": [
                    "dict",
                    "os.DirEntry"
                ]
            }
        },
        "_parse_bool": {
            "name": "_parse_bool",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "_parse_list_val": {
            "name": "_parse_list_val",
            "location": 116,
            "return": [
                "List[str]",
                "str",
                "list",
                "List[float]",
                "List[pathlib.Path]"
            ],
            "arguments": {
                "val": [
                    "bool",
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "ftype": [
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "_parse_val": {
            "name": "_parse_val",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "val": [
                    "str",
                    "Optional[Callable]"
                ],
                "ftype": [
                    "str"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 322,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "env_type": [
                    "Type[Any]"
                ],
                "environ": [
                    "Type[Any]"
                ]
            }
        },
        "__self_test": {
            "name": "__self_test",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_Singleton.__call__": {
            "name": "__call__",
            "location": 183,
            "return": [
                "bool",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "BaseEnv._iter_fields": {
            "name": "_iter_fields",
            "location": 224,
            "return": [
                "typing.Iterable[_Field]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "Optional[int]",
                    "type"
                ]
            }
        },
        "BaseEnv._update_kwargs_from_environ": {
            "name": "_update_kwargs_from_environ",
            "location": 232,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "environ": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseEnv.__new__": {
            "name": "__new__",
            "location": 257,
            "return": [
                "bool",
                "int",
                "Callable[[], bool]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Type"
                ]
            }
        },
        "BaseEnv.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEnv._varnames": {
            "name": "_varnames",
            "location": 277,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEnv._asdict": {
            "name": "_asdict",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEnv.__eq__": {
            "name": "__eq__",
            "location": 304,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseEnv.__repr__": {
            "name": "__repr__",
            "location": 308,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myenv-master/test/test_myenv.py": {
        "dbenv_cls": {
            "name": "dbenv_cls",
            "location": 11,
            "return": [
                "Optional[bool]",
                "bool",
                "Union[str, List[str]]",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {}
        },
        "dbenv_environ": {
            "name": "dbenv_environ",
            "location": 32,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "testenv_cls": {
            "name": "testenv_cls",
            "location": 44,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_parse": {
            "name": "test_parse",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_defaults": {
            "name": "test_defaults",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_errors": {
            "name": "test_errors",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_self_test": {
            "name": "test_self_test",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_asdict": {
            "name": "test_asdict",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dbenv_cls.DBEnv.url": {
            "name": "url",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "myenv-master/test/__init__.py": {}
}
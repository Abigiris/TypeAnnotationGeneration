{
    "mypy-zope-master/setup.py": {},
    "mypy-zope-master/src/mypy_zope/plugin.py": {
        "make_simple_type": {
            "name": "make_simple_type",
            "location": 63,
            "return": [
                "str",
                "Optional[Tuple[str, mypy.nodes.TypeVarExpr]]"
            ],
            "arguments": {
                "fieldtype": [
                    "str",
                    "dict"
                ],
                "arg_names": [
                    "str",
                    "List[List[mypy.nodes.Expression]]",
                    "List[List[Any]]",
                    "type"
                ],
                "args": [],
                "api": [
                    "str",
                    "bool",
                    "types.ModuleType",
                    "Optional[str]"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 704,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Dict[str, mypy.build.State]",
                    "mypy.build.BuildManager",
                    "dict",
                    "mypy.options.Options",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ZopeInterfacePlugin.log": {
            "name": "log",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin.get_type_analyze_hook": {
            "name": "get_type_analyze_hook",
            "location": 108,
            "return": [
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Callable[[Any], bool]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin.get_function_hook": {
            "name": "get_function_hook",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin.get_method_signature_hook": {
            "name": "get_method_signature_hook",
            "location": 191,
            "return": [
                "Optional[str]",
                "Union[None, List[str]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin.get_method_hook": {
            "name": "get_method_hook",
            "location": 197,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin.get_attribute_hook": {
            "name": "get_attribute_hook",
            "location": 247,
            "return": [
                "Optional[int]",
                "Dict[str, mypy.build.State]",
                "Optional[str]",
                "bool",
                "Optional[mypy.types.Type]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "ZopeInterfacePlugin.get_class_decorator_hook": {
            "name": "get_class_decorator_hook",
            "location": 253,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin.get_metaclass_hook": {
            "name": "get_metaclass_hook",
            "location": 307,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "ZopeInterfacePlugin.get_base_class_hook": {
            "name": "get_base_class_hook",
            "location": 327,
            "return": [
                "str",
                "apistar.types.WSGIEnviron",
                "apistar.types.UMIMessage"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin.get_customize_class_mro_hook": {
            "name": "get_customize_class_mro_hook",
            "location": 364,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin._is_subclass": {
            "name": "_is_subclass",
            "location": 414,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "str",
                    "Optional[str]"
                ],
                "classname": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ZopeInterfacePlugin._get_schema_field_type": {
            "name": "_get_schema_field_type",
            "location": 421,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "arg_names": [
                    "str"
                ],
                "args": [],
                "api": [
                    "str",
                    "Optional[str]",
                    "mypy.nodes.TypeInfo",
                    "mypy.types.Instance",
                    "Container[\"Taxon\"]"
                ]
            }
        },
        "ZopeInterfacePlugin._analyze_zope_interface": {
            "name": "_analyze_zope_interface",
            "location": 467,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "mypy.options.Options",
                    "T"
                ],
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "ZopeInterfacePlugin._get_metadata": {
            "name": "_get_metadata",
            "location": 489,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "typeinfo": [
                    "str",
                    "bool"
                ]
            }
        },
        "ZopeInterfacePlugin._is_interface": {
            "name": "_is_interface",
            "location": 494,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "typeinfo": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "ZopeInterfacePlugin._adjust_interface_function": {
            "name": "_adjust_interface_function",
            "location": 498,
            "return": [
                "mypy.nodes.TypeInfo",
                "Tuple[float, float, float]",
                "type",
                "mypy.types.Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "mypy.plugin.SemanticAnalyzerPluginInterface",
                    "Callable[[str, T], None]",
                    "bytes",
                    "int"
                ],
                "class_info": [
                    "mypy.types.CallableType",
                    "Optional[Mapping[str, Any]]"
                ],
                "func_def": [
                    "mypy.nodes.FuncDef",
                    "lib_classes.Block",
                    "dict",
                    "docutils.nodes.Node"
                ]
            }
        },
        "ZopeInterfacePlugin._adjust_interface_overload": {
            "name": "_adjust_interface_overload",
            "location": 525,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "Dict[str, int]"
                ],
                "class_info": [
                    "str",
                    "Dict[str, int]"
                ],
                "overload_def": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, str]"
                ]
            }
        },
        "ZopeInterfacePlugin._report_implementation_problems": {
            "name": "_report_implementation_problems",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "impl_type": [
                    "mypy.types.Instance",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "List[mypy.nodes.Expression]",
                    "mypy.server.update.FineGrainedBuildManager",
                    "mypy.nodes.Expression"
                ],
                "iface_type": [
                    "mypy.types.Type",
                    "mypy.nodes.Context",
                    "mypy.types.Instance",
                    "types.TracebackType",
                    "mypy.types.TupleType"
                ],
                "api": [
                    "mypy.plugin.CheckerPluginInterface",
                    "str",
                    "Container[\"Taxon\"]",
                    "bool",
                    "int"
                ],
                "context": [
                    "mypy.nodes.Context",
                    "str",
                    "bool",
                    "Union[str, List[str]]",
                    "Container[\"Taxon\"]",
                    "Dict[str, Any]",
                    "fklearn.types.LearnerFnType"
                ]
            }
        },
        "ZopeInterfacePlugin._lookup_type": {
            "name": "_lookup_type",
            "location": 646,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int"
                ],
                "api": [
                    "int"
                ]
            }
        },
        "ZopeInterfacePlugin._find_module": {
            "name": "_find_module",
            "location": 659,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "opentrons.types.Location",
                "opentrons.protocols.types.APIVersion",
                "Optional[mypy.types.Type]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ],
                "api": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "ZopeInterfacePlugin._index_members": {
            "name": "_index_members",
            "location": 672,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "typeinfo": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ZopeInterfacePlugin._apply_interface": {
            "name": "_apply_interface",
            "location": 685,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "impl": [
                    "int",
                    "T"
                ],
                "iface": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "ZopeInterfacePlugin.get_function_hook.analyze": {
            "name": "analyze",
            "location": 119,
            "return": [],
            "arguments": {
                "function_ctx": []
            }
        },
        "ZopeInterfacePlugin.get_function_hook.class_implements_hook": {
            "name": "class_implements_hook",
            "location": 135,
            "return": [
                "mypy.types.Type",
                "mypy.nodes.Context",
                "Type"
            ],
            "arguments": {
                "function_ctx": [
                    "mypy.nodes.Expression",
                    "mypy.nodes.Context"
                ]
            }
        },
        "ZopeInterfacePlugin.get_method_hook.analyze_implementation": {
            "name": "analyze_implementation",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "method_ctx": [
                    "mypy.plugin.MethodContext",
                    "Dict[str, Any]"
                ]
            }
        },
        "ZopeInterfacePlugin.get_class_decorator_hook.apply_implementer": {
            "name": "apply_implementer",
            "location": 258,
            "return": [
                "mypy.nodes.OverloadedFuncDef"
            ],
            "arguments": {
                "iface_arg": [
                    "mypy.nodes.Expression",
                    "Optional[types.ValidationRules]"
                ],
                "class_info": [
                    "int",
                    "bool",
                    "str",
                    "opentrons.protocols.execution.types.LoadedLabware",
                    "float"
                ],
                "api": [
                    "mypy.plugin.SemanticAnalyzerPluginInterface",
                    "Type[types.C]",
                    "ClassVar",
                    "mypy.nodes.TypeInfo",
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ZopeInterfacePlugin.get_class_decorator_hook.analyze": {
            "name": "analyze",
            "location": 295,
            "return": [],
            "arguments": {
                "classdef_ctx": []
            }
        },
        "ZopeInterfacePlugin.get_metaclass_hook.analyze_metaclass": {
            "name": "analyze_metaclass",
            "location": 311,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "ctx": [
                    "discord.excommands.Context",
                    "click.Context",
                    "Context"
                ]
            }
        },
        "ZopeInterfacePlugin.get_base_class_hook.analyze_subinterface": {
            "name": "analyze_subinterface",
            "location": 331,
            "return": [
                "mypy.nodes.OverloadedFuncDef"
            ],
            "arguments": {
                "classdef_ctx": [
                    "mypy.plugin.ClassDefContext",
                    "str",
                    "type",
                    "int"
                ]
            }
        },
        "ZopeInterfacePlugin.get_customize_class_mro_hook.analyze_interface_base": {
            "name": "analyze_interface_base",
            "location": 369,
            "return": [
                "set"
            ],
            "arguments": {
                "classdef_ctx": [
                    "mypy.plugin.ClassDefContext",
                    "str",
                    "mypy.nodes.Context"
                ]
            }
        },
        "ZopeInterfacePlugin.get_customize_class_mro_hook.analyze": {
            "name": "analyze",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "classdef_ctx": [
                    "mypy.nodes.Context",
                    "mypy.types.CallableType"
                ]
            }
        },
        "ZopeInterfacePlugin.get_method_hook.analyze": {
            "name": "analyze",
            "location": 205,
            "return": [],
            "arguments": {
                "method_ctx": []
            }
        }
    },
    "mypy-zope-master/src/mypy_zope/__init__.py": {},
    "mypy-zope-master/src/zope-stubs/__init__.py": {},
    "mypy-zope-master/src/zope-stubs/interface/adapter.py": {
        "BaseAdapterRegistry.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "bases": []
            }
        },
        "BaseAdapterRegistry.changed": {
            "name": "changed",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "originally_changed": []
            }
        },
        "BaseAdapterRegistry.register": {
            "name": "register",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": [],
                "name": [],
                "value": []
            }
        },
        "BaseAdapterRegistry.registered": {
            "name": "registered",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": [],
                "name": []
            }
        },
        "BaseAdapterRegistry.unregister": {
            "name": "unregister",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": [],
                "name": [],
                "value": []
            }
        },
        "BaseAdapterRegistry.subscribe": {
            "name": "subscribe",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": [],
                "value": []
            }
        },
        "BaseAdapterRegistry.unsubscribe": {
            "name": "unsubscribe",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": [],
                "value": []
            }
        },
        "BaseAdapterRegistry.get": {
            "name": "get",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "LookupBaseFallback.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupBaseFallback.changed": {
            "name": "changed",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "ignored": []
            }
        },
        "LookupBaseFallback.lookup": {
            "name": "lookup",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": [],
                "name": [],
                "default": []
            }
        },
        "LookupBaseFallback.lookup1": {
            "name": "lookup1",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": [],
                "name": [],
                "default": []
            }
        },
        "LookupBaseFallback.queryAdapter": {
            "name": "queryAdapter",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "provided": [],
                "name": [],
                "default": []
            }
        },
        "LookupBaseFallback.adapter_hook": {
            "name": "adapter_hook",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "provided": [],
                "object": [],
                "name": [],
                "default": []
            }
        },
        "LookupBaseFallback.lookupAll": {
            "name": "lookupAll",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": []
            }
        },
        "LookupBaseFallback.subscriptions": {
            "name": "subscriptions",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": []
            }
        },
        "VerifyingBaseFallback.changed": {
            "name": "changed",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "originally_changed": []
            }
        },
        "VerifyingBaseFallback.lookupAll": {
            "name": "lookupAll",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": []
            }
        },
        "VerifyingBaseFallback.subscriptions": {
            "name": "subscriptions",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": []
            }
        },
        "AdapterLookupBase.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "AdapterLookupBase.changed": {
            "name": "changed",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "ignored": []
            }
        },
        "AdapterLookupBase.init_extendors": {
            "name": "init_extendors",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdapterLookupBase.add_extendor": {
            "name": "add_extendor",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "provided": []
            }
        },
        "AdapterLookupBase.remove_extendor": {
            "name": "remove_extendor",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "provided": []
            }
        },
        "AdapterLookupBase.queryMultiAdapter": {
            "name": "queryMultiAdapter",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "objects": [],
                "provided": [],
                "name": [],
                "default": []
            }
        },
        "AdapterLookupBase.names": {
            "name": "names",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "required": [],
                "provided": []
            }
        },
        "AdapterLookupBase.subscribers": {
            "name": "subscribers",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "objects": [],
                "provided": []
            }
        },
        "AdapterRegistry.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "bases": []
            }
        },
        "AdapterRegistry.changed": {
            "name": "changed",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "originally_changed": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/advice.py": {
        "getFrameInfo": {
            "name": "getFrameInfo",
            "location": 7,
            "return": [],
            "arguments": {
                "frame": []
            }
        },
        "addClassAdvisor": {
            "name": "addClassAdvisor",
            "location": 8,
            "return": [],
            "arguments": {
                "callback": [],
                "depth": []
            }
        },
        "isClassAdvisor": {
            "name": "isClassAdvisor",
            "location": 9,
            "return": [],
            "arguments": {
                "ob": []
            }
        },
        "determineMetaclass": {
            "name": "determineMetaclass",
            "location": 10,
            "return": [],
            "arguments": {
                "bases": [],
                "explicit_mc": []
            }
        },
        "minimalBases": {
            "name": "minimalBases",
            "location": 11,
            "return": [],
            "arguments": {
                "classes": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/declarations.py": {
        "implementedByFallback": {
            "name": "implementedByFallback",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "classImplementsOnly": {
            "name": "classImplementsOnly",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "classImplements": {
            "name": "classImplements",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "implements": {
            "name": "implements",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "implementsOnly": {
            "name": "implementsOnly",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "directlyProvides": {
            "name": "directlyProvides",
            "location": 67,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "alsoProvides": {
            "name": "alsoProvides",
            "location": 68,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "noLongerProvides": {
            "name": "noLongerProvides",
            "location": 69,
            "return": [],
            "arguments": {
                "object": [],
                "interface": []
            }
        },
        "directlyProvidedBy": {
            "name": "directlyProvidedBy",
            "location": 81,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "classProvides": {
            "name": "classProvides",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "moduleProvides": {
            "name": "moduleProvides",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "ObjectSpecification": {
            "name": "ObjectSpecification",
            "location": 90,
            "return": [],
            "arguments": {
                "direct": [],
                "cls": []
            }
        },
        "getObjectSpecificationFallback": {
            "name": "getObjectSpecificationFallback",
            "location": 91,
            "return": [],
            "arguments": {
                "ob": []
            }
        },
        "providedByFallback": {
            "name": "providedByFallback",
            "location": 94,
            "return": [],
            "arguments": {
                "ob": []
            }
        },
        "named.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "named.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "ob": []
            }
        },
        "Declaration.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Declaration.changed": {
            "name": "changed",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "originally_changed": []
            }
        },
        "Declaration.__contains__": {
            "name": "__contains__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "interface": []
            }
        },
        "Declaration.__iter__": {
            "name": "__iter__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Declaration.flattened": {
            "name": "flattened",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Declaration.__sub__": {
            "name": "__sub__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Declaration.__add__": {
            "name": "__add__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Implements.named": {
            "name": "named",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Implements.__reduce__": {
            "name": "__reduce__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Implements.__hash__": {
            "name": "__hash__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Implements.__lt__": {
            "name": "__lt__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Implements.__le__": {
            "name": "__le__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Implements.__gt__": {
            "name": "__gt__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Implements.__ge__": {
            "name": "__ge__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "implementer.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "implementer.__call__": {
            "name": "__call__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "ob": []
            }
        },
        "implementer_only.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "implementer_only.__call__": {
            "name": "__call__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "ob": []
            }
        },
        "Provides.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "Provides.__reduce__": {
            "name": "__reduce__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Provides.__get__": {
            "name": "__get__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "cls": []
            }
        },
        "ClassProvidesBaseFallback.__get__": {
            "name": "__get__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "cls": []
            }
        },
        "ClassProvides.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "metacls": []
            }
        },
        "ClassProvides.__reduce__": {
            "name": "__reduce__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "provider.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "provider.__call__": {
            "name": "__call__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "ob": []
            }
        },
        "ObjectSpecificationDescriptorFallback.__get__": {
            "name": "__get__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "cls": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/document.py": {
        "asStructuredText": {
            "name": "asStructuredText",
            "location": 7,
            "return": [],
            "arguments": {
                "I": [],
                "munge": [],
                "rst": []
            }
        },
        "asReStructuredText": {
            "name": "asReStructuredText",
            "location": 8,
            "return": [],
            "arguments": {
                "I": [],
                "munge": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/exceptions.py": {
        "DoesNotImplement.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "interface": []
            }
        },
        "BrokenImplementation.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "interface": [],
                "name": []
            }
        },
        "BrokenMethodImplementation.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "mess": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/interface.py": {
        "invariant": {
            "name": "invariant",
            "location": 11,
            "return": [],
            "arguments": {
                "call": []
            }
        },
        "taggedValue": {
            "name": "taggedValue",
            "location": 12,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "fromFunction": {
            "name": "fromFunction",
            "location": 92,
            "return": [],
            "arguments": {
                "func": [],
                "interface": [],
                "imlevel": [],
                "name": []
            }
        },
        "fromMethod": {
            "name": "fromMethod",
            "location": 93,
            "return": [],
            "arguments": {
                "meth": [],
                "interface": [],
                "name": []
            }
        },
        "Element.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "__name__": [],
                "__doc__": []
            }
        },
        "Element.getName": {
            "name": "getName",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.getDoc": {
            "name": "getDoc",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.getTaggedValue": {
            "name": "getTaggedValue",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "Element.queryTaggedValue": {
            "name": "queryTaggedValue",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "default": []
            }
        },
        "Element.getTaggedValueTags": {
            "name": "getTaggedValueTags",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.setTaggedValue": {
            "name": "setTaggedValue",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "value": []
            }
        },
        "SpecificationBasePy.providedBy": {
            "name": "providedBy",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "ob": []
            }
        },
        "SpecificationBasePy.implementedBy": {
            "name": "implementedBy",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "SpecificationBasePy.isOrExtends": {
            "name": "isOrExtends",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "interface": []
            }
        },
        "InterfaceBasePy.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "alternate": []
            }
        },
        "InterfaceBasePy.__adapt__": {
            "name": "__adapt__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Specification.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "bases": []
            }
        },
        "Specification.subscribe": {
            "name": "subscribe",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "dependent": []
            }
        },
        "Specification.unsubscribe": {
            "name": "unsubscribe",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "dependent": []
            }
        },
        "Specification.changed": {
            "name": "changed",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "originally_changed": []
            }
        },
        "Specification.interfaces": {
            "name": "interfaces",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Specification.extends": {
            "name": "extends",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "interface": [],
                "strict": []
            }
        },
        "Specification.weakref": {
            "name": "weakref",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Specification.get": {
            "name": "get",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "default": []
            }
        },
        "InterfaceClass.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "attrs": [],
                "__doc__": [],
                "__module__": []
            }
        },
        "InterfaceClass.interfaces": {
            "name": "interfaces",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceClass.getBases": {
            "name": "getBases",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceClass.isEqualOrExtendedBy": {
            "name": "isEqualOrExtendedBy",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InterfaceClass.names": {
            "name": "names",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "all": []
            }
        },
        "InterfaceClass.__iter__": {
            "name": "__iter__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceClass.namesAndDescriptions": {
            "name": "namesAndDescriptions",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "all": []
            }
        },
        "InterfaceClass.getDescriptionFor": {
            "name": "getDescriptionFor",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "InterfaceClass.__getitem__": {
            "name": "__getitem__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "InterfaceClass.__contains__": {
            "name": "__contains__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "InterfaceClass.direct": {
            "name": "direct",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "InterfaceClass.queryDescriptionFor": {
            "name": "queryDescriptionFor",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "default": []
            }
        },
        "InterfaceClass.validateInvariants": {
            "name": "validateInvariants",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "errors": []
            }
        },
        "InterfaceClass.__reduce__": {
            "name": "__reduce__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceClass.__hash__": {
            "name": "__hash__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceClass.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InterfaceClass.__ne__": {
            "name": "__ne__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InterfaceClass.__lt__": {
            "name": "__lt__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InterfaceClass.__le__": {
            "name": "__le__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InterfaceClass.__gt__": {
            "name": "__gt__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InterfaceClass.__ge__": {
            "name": "__ge__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Method.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Method.getSignatureInfo": {
            "name": "getSignatureInfo",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Method.getSignatureString": {
            "name": "getSignatureString",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/interfaces.py": {
        "IElement.getTaggedValue": {
            "name": "getTaggedValue",
            "location": 13,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "IElement.queryTaggedValue": {
            "name": "queryTaggedValue",
            "location": 14,
            "return": [],
            "arguments": {
                "tag": [],
                "default": []
            }
        },
        "IElement.getTaggedValueTags": {
            "name": "getTaggedValueTags",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "IElement.setTaggedValue": {
            "name": "setTaggedValue",
            "location": 16,
            "return": [],
            "arguments": {
                "tag": [],
                "value": []
            }
        },
        "IMethod.getSignatureInfo": {
            "name": "getSignatureInfo",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "IMethod.getSignatureString": {
            "name": "getSignatureString",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "ISpecification.providedBy": {
            "name": "providedBy",
            "location": 27,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "ISpecification.implementedBy": {
            "name": "implementedBy",
            "location": 29,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "ISpecification.isOrExtends": {
            "name": "isOrExtends",
            "location": 31,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "ISpecification.extends": {
            "name": "extends",
            "location": 33,
            "return": [],
            "arguments": {
                "other": [],
                "strict": []
            }
        },
        "ISpecification.weakref": {
            "name": "weakref",
            "location": 35,
            "return": [],
            "arguments": {
                "callback": []
            }
        },
        "ISpecification.get": {
            "name": "get",
            "location": 36,
            "return": [],
            "arguments": {
                "name": [],
                "default": []
            }
        },
        "IInterface.names": {
            "name": "names",
            "location": 39,
            "return": [],
            "arguments": {
                "all": []
            }
        },
        "IInterface.namesAndDescriptions": {
            "name": "namesAndDescriptions",
            "location": 40,
            "return": [],
            "arguments": {
                "all": []
            }
        },
        "IInterface.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "IInterface.direct": {
            "name": "direct",
            "location": 42,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "IInterface.validateInvariants": {
            "name": "validateInvariants",
            "location": 43,
            "return": [],
            "arguments": {
                "obj": [],
                "errors": []
            }
        },
        "IInterface.__contains__": {
            "name": "__contains__",
            "location": 44,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "IInterface.__iter__": {
            "name": "__iter__",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "IDeclaration.__contains__": {
            "name": "__contains__",
            "location": 49,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "IDeclaration.__iter__": {
            "name": "__iter__",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "IDeclaration.flattened": {
            "name": "flattened",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "IDeclaration.__sub__": {
            "name": "__sub__",
            "location": 52,
            "return": [],
            "arguments": {
                "interfaces": []
            }
        },
        "IDeclaration.__add__": {
            "name": "__add__",
            "location": 53,
            "return": [],
            "arguments": {
                "interfaces": []
            }
        },
        "IDeclaration.__nonzero__": {
            "name": "__nonzero__",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "IInterfaceDeclaration.providedBy": {
            "name": "providedBy",
            "location": 57,
            "return": [],
            "arguments": {
                "ob": []
            }
        },
        "IInterfaceDeclaration.implementedBy": {
            "name": "implementedBy",
            "location": 58,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "IInterfaceDeclaration.classImplements": {
            "name": "classImplements",
            "location": 59,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "IInterfaceDeclaration.implementer": {
            "name": "implementer",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "IInterfaceDeclaration.classImplementsOnly": {
            "name": "classImplementsOnly",
            "location": 61,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "IInterfaceDeclaration.implementer_only": {
            "name": "implementer_only",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "IInterfaceDeclaration.directlyProvidedBy": {
            "name": "directlyProvidedBy",
            "location": 63,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "IInterfaceDeclaration.directlyProvides": {
            "name": "directlyProvides",
            "location": 64,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "IInterfaceDeclaration.alsoProvides": {
            "name": "alsoProvides",
            "location": 65,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "IInterfaceDeclaration.noLongerProvides": {
            "name": "noLongerProvides",
            "location": 66,
            "return": [],
            "arguments": {
                "object": [],
                "interface": []
            }
        },
        "IInterfaceDeclaration.implements": {
            "name": "implements",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "IInterfaceDeclaration.implementsOnly": {
            "name": "implementsOnly",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "IInterfaceDeclaration.classProvides": {
            "name": "classProvides",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "IInterfaceDeclaration.provider": {
            "name": "provider",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "IInterfaceDeclaration.moduleProvides": {
            "name": "moduleProvides",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "IInterfaceDeclaration.Declaration": {
            "name": "Declaration",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "IAdapterRegistry.register": {
            "name": "register",
            "location": 75,
            "return": [],
            "arguments": {
                "required": [],
                "provided": [],
                "name": [],
                "value": []
            }
        },
        "IAdapterRegistry.registered": {
            "name": "registered",
            "location": 76,
            "return": [],
            "arguments": {
                "required": [],
                "provided": [],
                "name": []
            }
        },
        "IAdapterRegistry.lookup": {
            "name": "lookup",
            "location": 77,
            "return": [],
            "arguments": {
                "required": [],
                "provided": [],
                "name": [],
                "default": []
            }
        },
        "IAdapterRegistry.queryMultiAdapter": {
            "name": "queryMultiAdapter",
            "location": 78,
            "return": [],
            "arguments": {
                "objects": [],
                "provided": [],
                "name": [],
                "default": []
            }
        },
        "IAdapterRegistry.lookup1": {
            "name": "lookup1",
            "location": 79,
            "return": [],
            "arguments": {
                "required": [],
                "provided": [],
                "name": [],
                "default": []
            }
        },
        "IAdapterRegistry.queryAdapter": {
            "name": "queryAdapter",
            "location": 80,
            "return": [],
            "arguments": {
                "object": [],
                "provided": [],
                "name": [],
                "default": []
            }
        },
        "IAdapterRegistry.adapter_hook": {
            "name": "adapter_hook",
            "location": 81,
            "return": [],
            "arguments": {
                "provided": [],
                "object": [],
                "name": [],
                "default": []
            }
        },
        "IAdapterRegistry.lookupAll": {
            "name": "lookupAll",
            "location": 82,
            "return": [],
            "arguments": {
                "required": [],
                "provided": []
            }
        },
        "IAdapterRegistry.names": {
            "name": "names",
            "location": 83,
            "return": [],
            "arguments": {
                "required": [],
                "provided": []
            }
        },
        "IAdapterRegistry.subscribe": {
            "name": "subscribe",
            "location": 84,
            "return": [],
            "arguments": {
                "required": [],
                "provided": [],
                "subscriber": [],
                "name": []
            }
        },
        "IAdapterRegistry.subscriptions": {
            "name": "subscriptions",
            "location": 85,
            "return": [],
            "arguments": {
                "required": [],
                "provided": [],
                "name": []
            }
        },
        "IAdapterRegistry.subscribers": {
            "name": "subscribers",
            "location": 86,
            "return": [],
            "arguments": {
                "objects": [],
                "provided": [],
                "name": []
            }
        },
        "ObjectEvent.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "IComponentLookup.queryAdapter": {
            "name": "queryAdapter",
            "location": 101,
            "return": [],
            "arguments": {
                "object": [],
                "interface": [],
                "name": [],
                "default": []
            }
        },
        "IComponentLookup.getAdapter": {
            "name": "getAdapter",
            "location": 102,
            "return": [],
            "arguments": {
                "object": [],
                "interface": [],
                "name": []
            }
        },
        "IComponentLookup.queryMultiAdapter": {
            "name": "queryMultiAdapter",
            "location": 103,
            "return": [],
            "arguments": {
                "objects": [],
                "interface": [],
                "name": [],
                "default": []
            }
        },
        "IComponentLookup.getMultiAdapter": {
            "name": "getMultiAdapter",
            "location": 104,
            "return": [],
            "arguments": {
                "objects": [],
                "interface": [],
                "name": []
            }
        },
        "IComponentLookup.getAdapters": {
            "name": "getAdapters",
            "location": 105,
            "return": [],
            "arguments": {
                "objects": [],
                "provided": []
            }
        },
        "IComponentLookup.subscribers": {
            "name": "subscribers",
            "location": 106,
            "return": [],
            "arguments": {
                "objects": [],
                "provided": []
            }
        },
        "IComponentLookup.handle": {
            "name": "handle",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "IComponentLookup.queryUtility": {
            "name": "queryUtility",
            "location": 108,
            "return": [],
            "arguments": {
                "interface": [],
                "name": [],
                "default": []
            }
        },
        "IComponentLookup.getUtilitiesFor": {
            "name": "getUtilitiesFor",
            "location": 109,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "IComponentLookup.getAllUtilitiesRegisteredFor": {
            "name": "getAllUtilitiesRegisteredFor",
            "location": 110,
            "return": [],
            "arguments": {
                "interface": []
            }
        },
        "IComponentRegistry.registerUtility": {
            "name": "registerUtility",
            "location": 142,
            "return": [],
            "arguments": {
                "component": [],
                "provided": [],
                "name": [],
                "info": [],
                "factory": []
            }
        },
        "IComponentRegistry.unregisterUtility": {
            "name": "unregisterUtility",
            "location": 143,
            "return": [],
            "arguments": {
                "component": [],
                "provided": [],
                "name": [],
                "factory": []
            }
        },
        "IComponentRegistry.registeredUtilities": {
            "name": "registeredUtilities",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "IComponentRegistry.registerAdapter": {
            "name": "registerAdapter",
            "location": 145,
            "return": [],
            "arguments": {
                "factory": [],
                "required": [],
                "provided": [],
                "name": [],
                "info": []
            }
        },
        "IComponentRegistry.unregisterAdapter": {
            "name": "unregisterAdapter",
            "location": 146,
            "return": [],
            "arguments": {
                "factory": [],
                "required": [],
                "provided": [],
                "name": []
            }
        },
        "IComponentRegistry.registeredAdapters": {
            "name": "registeredAdapters",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "IComponentRegistry.registerSubscriptionAdapter": {
            "name": "registerSubscriptionAdapter",
            "location": 148,
            "return": [],
            "arguments": {
                "factory": [],
                "required": [],
                "provides": [],
                "name": [],
                "info": []
            }
        },
        "IComponentRegistry.unregisterSubscriptionAdapter": {
            "name": "unregisterSubscriptionAdapter",
            "location": 149,
            "return": [],
            "arguments": {
                "factory": [],
                "required": [],
                "provides": [],
                "name": []
            }
        },
        "IComponentRegistry.registeredSubscriptionAdapters": {
            "name": "registeredSubscriptionAdapters",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "IComponentRegistry.registerHandler": {
            "name": "registerHandler",
            "location": 151,
            "return": [],
            "arguments": {
                "handler": [],
                "required": [],
                "name": [],
                "info": []
            }
        },
        "IComponentRegistry.unregisterHandler": {
            "name": "unregisterHandler",
            "location": 152,
            "return": [],
            "arguments": {
                "handler": [],
                "required": [],
                "name": []
            }
        },
        "IComponentRegistry.registeredHandlers": {
            "name": "registeredHandlers",
            "location": 153,
            "return": [],
            "arguments": {}
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/registry.py": {
        "_UnhashableComponentCounter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "otherdict": []
            }
        },
        "_UnhashableComponentCounter.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_UnhashableComponentCounter.__setitem__": {
            "name": "__setitem__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "component": [],
                "count": []
            }
        },
        "_UnhashableComponentCounter.__delitem__": {
            "name": "__delitem__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "component": []
            }
        },
        "_UtilityRegistrations.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "utilities": [],
                "utility_registrations": []
            }
        },
        "_UtilityRegistrations.registerUtility": {
            "name": "registerUtility",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "provided": [],
                "name": [],
                "component": [],
                "info": [],
                "factory": []
            }
        },
        "_UtilityRegistrations.unregisterUtility": {
            "name": "unregisterUtility",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "provided": [],
                "name": [],
                "component": []
            }
        },
        "Components.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": []
            }
        },
        "Components.__reduce__": {
            "name": "__reduce__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Components.registerUtility": {
            "name": "registerUtility",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "component": [],
                "provided": [],
                "name": [],
                "info": [],
                "event": [],
                "factory": []
            }
        },
        "Components.unregisterUtility": {
            "name": "unregisterUtility",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "component": [],
                "provided": [],
                "name": [],
                "factory": []
            }
        },
        "Components.registeredUtilities": {
            "name": "registeredUtilities",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Components.queryUtility": {
            "name": "queryUtility",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "provided": [],
                "name": [],
                "default": []
            }
        },
        "Components.getUtility": {
            "name": "getUtility",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "provided": [],
                "name": []
            }
        },
        "Components.getUtilitiesFor": {
            "name": "getUtilitiesFor",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "interface": []
            }
        },
        "Components.getAllUtilitiesRegisteredFor": {
            "name": "getAllUtilitiesRegisteredFor",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "interface": []
            }
        },
        "Components.registerAdapter": {
            "name": "registerAdapter",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "factory": [],
                "required": [],
                "provided": [],
                "name": [],
                "info": [],
                "event": []
            }
        },
        "Components.unregisterAdapter": {
            "name": "unregisterAdapter",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "factory": [],
                "required": [],
                "provided": [],
                "name": []
            }
        },
        "Components.registeredAdapters": {
            "name": "registeredAdapters",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Components.queryAdapter": {
            "name": "queryAdapter",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "interface": [],
                "name": [],
                "default": []
            }
        },
        "Components.getAdapter": {
            "name": "getAdapter",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "interface": [],
                "name": []
            }
        },
        "Components.queryMultiAdapter": {
            "name": "queryMultiAdapter",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "objects": [],
                "interface": [],
                "name": [],
                "default": []
            }
        },
        "Components.getMultiAdapter": {
            "name": "getMultiAdapter",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "objects": [],
                "interface": [],
                "name": []
            }
        },
        "Components.getAdapters": {
            "name": "getAdapters",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "objects": [],
                "provided": []
            }
        },
        "Components.registerSubscriptionAdapter": {
            "name": "registerSubscriptionAdapter",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "factory": [],
                "required": [],
                "provided": [],
                "name": [],
                "info": [],
                "event": []
            }
        },
        "Components.registeredSubscriptionAdapters": {
            "name": "registeredSubscriptionAdapters",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Components.unregisterSubscriptionAdapter": {
            "name": "unregisterSubscriptionAdapter",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "factory": [],
                "required": [],
                "provided": [],
                "name": []
            }
        },
        "Components.subscribers": {
            "name": "subscribers",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "objects": [],
                "provided": []
            }
        },
        "Components.registerHandler": {
            "name": "registerHandler",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "factory": [],
                "required": [],
                "name": [],
                "info": [],
                "event": []
            }
        },
        "Components.registeredHandlers": {
            "name": "registeredHandlers",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Components.unregisterHandler": {
            "name": "unregisterHandler",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "factory": [],
                "required": [],
                "name": []
            }
        },
        "Components.handle": {
            "name": "handle",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityRegistration.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "provided": [],
                "name": [],
                "component": [],
                "doc": [],
                "factory": []
            }
        },
        "UtilityRegistration.__hash__": {
            "name": "__hash__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UtilityRegistration.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UtilityRegistration.__ne__": {
            "name": "__ne__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UtilityRegistration.__lt__": {
            "name": "__lt__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UtilityRegistration.__le__": {
            "name": "__le__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UtilityRegistration.__gt__": {
            "name": "__gt__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UtilityRegistration.__ge__": {
            "name": "__ge__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AdapterRegistration.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "required": [],
                "provided": [],
                "name": [],
                "component": [],
                "doc": []
            }
        },
        "AdapterRegistration.__hash__": {
            "name": "__hash__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdapterRegistration.__eq__": {
            "name": "__eq__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AdapterRegistration.__ne__": {
            "name": "__ne__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AdapterRegistration.__lt__": {
            "name": "__lt__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AdapterRegistration.__le__": {
            "name": "__le__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AdapterRegistration.__gt__": {
            "name": "__gt__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AdapterRegistration.__ge__": {
            "name": "__ge__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HandlerRegistration.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "required": [],
                "name": [],
                "handler": [],
                "doc": []
            }
        },
        "HandlerRegistration.factory": {
            "name": "factory",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/ro.py": {
        "ro": {
            "name": "ro",
            "location": 9,
            "return": [],
            "arguments": {
                "object": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/verify.py": {
        "verifyClass": {
            "name": "verifyClass",
            "location": 9,
            "return": [],
            "arguments": {
                "iface": [],
                "candidate": [],
                "tentative": []
            }
        },
        "verifyObject": {
            "name": "verifyObject",
            "location": 10,
            "return": [],
            "arguments": {
                "iface": [],
                "candidate": [],
                "tentative": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/_compat.py": {},
    "mypy-zope-master/src/zope-stubs/interface/_flatten.py": {},
    "mypy-zope-master/src/zope-stubs/interface/_zope_interface_coptimizations.py": {
        "getObjectSpecification": {
            "name": "getObjectSpecification",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "implementedBy": {
            "name": "implementedBy",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "providedBy": {
            "name": "providedBy",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "ClassProvidesBase.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ClassProvidesBase.__get__": {
            "name": "__get__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceBase.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "InterfaceBase.__adapt__": {
            "name": "__adapt__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterfaceBase.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupBase.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "LookupBase.adapter_hook": {
            "name": "adapter_hook",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupBase.changed": {
            "name": "changed",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupBase.lookup": {
            "name": "lookup",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupBase.lookup1": {
            "name": "lookup1",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupBase.lookupAll": {
            "name": "lookupAll",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupBase.queryAdapter": {
            "name": "queryAdapter",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupBase.subscriptions": {
            "name": "subscriptions",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ObjectSpecificationDescriptor.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ObjectSpecificationDescriptor.__get__": {
            "name": "__get__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecificationBase.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SpecificationBase.implementedBy": {
            "name": "implementedBy",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecificationBase.isOrExtends": {
            "name": "isOrExtends",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecificationBase.providedBy": {
            "name": "providedBy",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecificationBase.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifyingBase.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "VerifyingBase.adapter_hook": {
            "name": "adapter_hook",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifyingBase.changed": {
            "name": "changed",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifyingBase.lookup": {
            "name": "lookup",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifyingBase.lookup1": {
            "name": "lookup1",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifyingBase.lookupAll": {
            "name": "lookupAll",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifyingBase.queryAdapter": {
            "name": "queryAdapter",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifyingBase.subscriptions": {
            "name": "subscriptions",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/__init__.py": {},
    "mypy-zope-master/src/zope-stubs/interface/common/idatetime.py": {
        "IDateClass.today": {
            "name": "today",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "IDateClass.fromtimestamp": {
            "name": "fromtimestamp",
            "location": 23,
            "return": [],
            "arguments": {
                "timestamp": []
            }
        },
        "IDateClass.fromordinal": {
            "name": "fromordinal",
            "location": 24,
            "return": [],
            "arguments": {
                "ordinal": []
            }
        },
        "IDate.replace": {
            "name": "replace",
            "location": 30,
            "return": [],
            "arguments": {
                "year": [],
                "month": [],
                "day": []
            }
        },
        "IDate.timetuple": {
            "name": "timetuple",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "IDate.toordinal": {
            "name": "toordinal",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "IDate.weekday": {
            "name": "weekday",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "IDate.isoweekday": {
            "name": "isoweekday",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "IDate.isocalendar": {
            "name": "isocalendar",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "IDate.isoformat": {
            "name": "isoformat",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "IDate.ctime": {
            "name": "ctime",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "IDate.strftime": {
            "name": "strftime",
            "location": 38,
            "return": [],
            "arguments": {
                "format": []
            }
        },
        "IDateTimeClass.today": {
            "name": "today",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "IDateTimeClass.now": {
            "name": "now",
            "location": 45,
            "return": [],
            "arguments": {
                "tz": []
            }
        },
        "IDateTimeClass.utcnow": {
            "name": "utcnow",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "IDateTimeClass.fromtimestamp": {
            "name": "fromtimestamp",
            "location": 47,
            "return": [],
            "arguments": {
                "timestamp": [],
                "tz": []
            }
        },
        "IDateTimeClass.utcfromtimestamp": {
            "name": "utcfromtimestamp",
            "location": 48,
            "return": [],
            "arguments": {
                "timestamp": []
            }
        },
        "IDateTimeClass.fromordinal": {
            "name": "fromordinal",
            "location": 49,
            "return": [],
            "arguments": {
                "ordinal": []
            }
        },
        "IDateTimeClass.combine": {
            "name": "combine",
            "location": 50,
            "return": [],
            "arguments": {
                "date": [],
                "time": []
            }
        },
        "IDateTime.date": {
            "name": "date",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "IDateTime.time": {
            "name": "time",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "IDateTime.timetz": {
            "name": "timetz",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "IDateTime.replace": {
            "name": "replace",
            "location": 64,
            "return": [],
            "arguments": {
                "year": [],
                "month": [],
                "day": [],
                "hour": [],
                "minute": [],
                "second": [],
                "microsecond": [],
                "tzinfo": []
            }
        },
        "IDateTime.astimezone": {
            "name": "astimezone",
            "location": 65,
            "return": [],
            "arguments": {
                "tz": []
            }
        },
        "IDateTime.utcoffset": {
            "name": "utcoffset",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "IDateTime.dst": {
            "name": "dst",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "IDateTime.tzname": {
            "name": "tzname",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "IDateTime.timetuple": {
            "name": "timetuple",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "IDateTime.utctimetuple": {
            "name": "utctimetuple",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "IDateTime.toordinal": {
            "name": "toordinal",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "IDateTime.weekday": {
            "name": "weekday",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "IDateTime.isoweekday": {
            "name": "isoweekday",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "IDateTime.isocalendar": {
            "name": "isocalendar",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "IDateTime.isoformat": {
            "name": "isoformat",
            "location": 75,
            "return": [],
            "arguments": {
                "sep": []
            }
        },
        "IDateTime.ctime": {
            "name": "ctime",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "IDateTime.strftime": {
            "name": "strftime",
            "location": 77,
            "return": [],
            "arguments": {
                "format": []
            }
        },
        "ITime.replace": {
            "name": "replace",
            "location": 90,
            "return": [],
            "arguments": {
                "hour": [],
                "minute": [],
                "second": [],
                "microsecond": [],
                "tzinfo": []
            }
        },
        "ITime.isoformat": {
            "name": "isoformat",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "ITime.strftime": {
            "name": "strftime",
            "location": 92,
            "return": [],
            "arguments": {
                "format": []
            }
        },
        "ITime.utcoffset": {
            "name": "utcoffset",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "ITime.dst": {
            "name": "dst",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "ITime.tzname": {
            "name": "tzname",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "ITZInfo.utcoffset": {
            "name": "utcoffset",
            "location": 98,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "ITZInfo.dst": {
            "name": "dst",
            "location": 99,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "ITZInfo.tzname": {
            "name": "tzname",
            "location": 100,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "ITZInfo.fromutc": {
            "name": "fromutc",
            "location": 101,
            "return": [],
            "arguments": {
                "dt": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/common/interfaces.py": {},
    "mypy-zope-master/src/zope-stubs/interface/common/mapping.py": {
        "IItemMapping.__getitem__": {
            "name": "__getitem__",
            "location": 13,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "IReadMapping.get": {
            "name": "get",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "default": []
            }
        },
        "IReadMapping.__contains__": {
            "name": "__contains__",
            "location": 21,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "IWriteMapping.__delitem__": {
            "name": "__delitem__",
            "location": 24,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "IWriteMapping.__setitem__": {
            "name": "__setitem__",
            "location": 25,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "IEnumerableMapping.keys": {
            "name": "keys",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "IEnumerableMapping.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "IEnumerableMapping.values": {
            "name": "values",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "IEnumerableMapping.items": {
            "name": "items",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "IEnumerableMapping.__len__": {
            "name": "__len__",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "IIterableMapping.iterkeys": {
            "name": "iterkeys",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "IIterableMapping.itervalues": {
            "name": "itervalues",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "IIterableMapping.iteritems": {
            "name": "iteritems",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "IClonableMapping.copy": {
            "name": "copy",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "IExtendedReadMapping.has_key": {
            "name": "has_key",
            "location": 45,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "IExtendedWriteMapping.clear": {
            "name": "clear",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "IExtendedWriteMapping.update": {
            "name": "update",
            "location": 49,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "IExtendedWriteMapping.setdefault": {
            "name": "setdefault",
            "location": 50,
            "return": [],
            "arguments": {
                "key": [],
                "default": []
            }
        },
        "IExtendedWriteMapping.pop": {
            "name": "pop",
            "location": 51,
            "return": [],
            "arguments": {
                "k": []
            }
        },
        "IExtendedWriteMapping.popitem": {
            "name": "popitem",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/common/sequence.py": {
        "IMinimalSequence.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "IFiniteSequence.__len__": {
            "name": "__len__",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "IReadSequence.__contains__": {
            "name": "__contains__",
            "location": 17,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "IReadSequence.__lt__": {
            "name": "__lt__",
            "location": 18,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "IReadSequence.__le__": {
            "name": "__le__",
            "location": 19,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "IReadSequence.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "IReadSequence.__ne__": {
            "name": "__ne__",
            "location": 21,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "IReadSequence.__gt__": {
            "name": "__gt__",
            "location": 22,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "IReadSequence.__ge__": {
            "name": "__ge__",
            "location": 23,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "IReadSequence.__add__": {
            "name": "__add__",
            "location": 24,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "IReadSequence.__mul__": {
            "name": "__mul__",
            "location": 25,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "IReadSequence.__rmul__": {
            "name": "__rmul__",
            "location": 26,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "IReadSequence.__getslice__": {
            "name": "__getslice__",
            "location": 27,
            "return": [],
            "arguments": {
                "i": [],
                "j": []
            }
        },
        "IExtendedReadSequence.count": {
            "name": "count",
            "location": 30,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "IExtendedReadSequence.index": {
            "name": "index",
            "location": 31,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "IUniqueMemberWriteSequence.__setitem__": {
            "name": "__setitem__",
            "location": 34,
            "return": [],
            "arguments": {
                "index": [],
                "item": []
            }
        },
        "IUniqueMemberWriteSequence.__delitem__": {
            "name": "__delitem__",
            "location": 35,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "IUniqueMemberWriteSequence.__setslice__": {
            "name": "__setslice__",
            "location": 36,
            "return": [],
            "arguments": {
                "i": [],
                "j": [],
                "other": []
            }
        },
        "IUniqueMemberWriteSequence.__delslice__": {
            "name": "__delslice__",
            "location": 37,
            "return": [],
            "arguments": {
                "i": [],
                "j": []
            }
        },
        "IUniqueMemberWriteSequence.__iadd__": {
            "name": "__iadd__",
            "location": 38,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "IUniqueMemberWriteSequence.append": {
            "name": "append",
            "location": 39,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "IUniqueMemberWriteSequence.insert": {
            "name": "insert",
            "location": 40,
            "return": [],
            "arguments": {
                "index": [],
                "item": []
            }
        },
        "IUniqueMemberWriteSequence.pop": {
            "name": "pop",
            "location": 41,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "IUniqueMemberWriteSequence.remove": {
            "name": "remove",
            "location": 42,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "IUniqueMemberWriteSequence.reverse": {
            "name": "reverse",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "IUniqueMemberWriteSequence.sort": {
            "name": "sort",
            "location": 44,
            "return": [],
            "arguments": {
                "cmpfunc": []
            }
        },
        "IUniqueMemberWriteSequence.extend": {
            "name": "extend",
            "location": 45,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "IWriteSequence.__imul__": {
            "name": "__imul__",
            "location": 48,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/interface/common/__init__.py": {},
    "mypy-zope-master/src/zope-stubs/schema/accessors.py": {
        "accessors": {
            "name": "accessors",
            "location": 29,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "FieldReadAccessor.__provides__": {
            "name": "__provides__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldReadAccessor.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "FieldReadAccessor.getSignatureString": {
            "name": "getSignatureString",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldReadAccessor.getSignatureInfo": {
            "name": "getSignatureInfo",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldReadAccessor.get": {
            "name": "get",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "FieldReadAccessor.query": {
            "name": "query",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "default": []
            }
        },
        "FieldReadAccessor.set": {
            "name": "set",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "value": []
            }
        },
        "FieldReadAccessor.__getattr__": {
            "name": "__getattr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "FieldReadAccessor.bind": {
            "name": "bind",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "FieldWriteAccessor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "FieldWriteAccessor.getSignatureString": {
            "name": "getSignatureString",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldWriteAccessor.getSignatureInfo": {
            "name": "getSignatureInfo",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/schema/fieldproperty.py": {
        "createFieldProperties": {
            "name": "createFieldProperties",
            "location": 21,
            "return": [],
            "arguments": {
                "schema": [],
                "omit": []
            }
        },
        "FieldUpdatedEvent.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "field": [],
                "old_value": [],
                "new_value": []
            }
        },
        "FieldProperty.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "name": []
            }
        },
        "FieldProperty.__get__": {
            "name": "__get__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "klass": []
            }
        },
        "FieldProperty.queryValue": {
            "name": "queryValue",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "default": []
            }
        },
        "FieldProperty.__set__": {
            "name": "__set__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "value": []
            }
        },
        "FieldProperty.__getattr__": {
            "name": "__getattr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "FieldPropertyStoredThroughField.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "name": []
            }
        },
        "FieldPropertyStoredThroughField.setValue": {
            "name": "setValue",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "field": [],
                "value": []
            }
        },
        "FieldPropertyStoredThroughField.getValue": {
            "name": "getValue",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "field": []
            }
        },
        "FieldPropertyStoredThroughField.queryValue": {
            "name": "queryValue",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "field": [],
                "default": []
            }
        },
        "FieldPropertyStoredThroughField.__getattr__": {
            "name": "__getattr__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "FieldPropertyStoredThroughField.__get__": {
            "name": "__get__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "klass": []
            }
        },
        "FieldPropertyStoredThroughField.__set__": {
            "name": "__set__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "value": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/schema/interfaces.py": {
        "IField.bind": {
            "name": "bind",
            "location": 26,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "IField.constraint": {
            "name": "constraint",
            "location": 34,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "IField.validate": {
            "name": "validate",
            "location": 35,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "IField.get": {
            "name": "get",
            "location": 36,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "IField.query": {
            "name": "query",
            "location": 37,
            "return": [],
            "arguments": {
                "object": [],
                "default": []
            }
        },
        "IField.set": {
            "name": "set",
            "location": 38,
            "return": [],
            "arguments": {
                "object": [],
                "value": []
            }
        },
        "ISource.__contains__": {
            "name": "__contains__",
            "location": 158,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "ISourceQueriables.getQueriables": {
            "name": "getQueriables",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "IContextSourceBinder.__call__": {
            "name": "__call__",
            "location": 164,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "IBaseVocabulary.getTerm": {
            "name": "getTerm",
            "location": 167,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "IIterableSource.__iter__": {
            "name": "__iter__",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "IIterableSource.__len__": {
            "name": "__len__",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "IIterableVocabulary.__iter__": {
            "name": "__iter__",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "IIterableVocabulary.__len__": {
            "name": "__len__",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "IVocabularyTokenized.getTermByToken": {
            "name": "getTermByToken",
            "location": 180,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "IVocabularyRegistry.get": {
            "name": "get",
            "location": 185,
            "return": [],
            "arguments": {
                "context": [],
                "name": []
            }
        },
        "IVocabularyFactory.__call__": {
            "name": "__call__",
            "location": 188,
            "return": [],
            "arguments": {
                "context": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/schema/vocabulary.py": {
        "getVocabularyRegistry": {
            "name": "getVocabularyRegistry",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "setVocabularyRegistry": {
            "name": "setVocabularyRegistry",
            "location": 65,
            "return": [],
            "arguments": {
                "registry": []
            }
        },
        "SimpleTerm.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "token": [],
                "title": []
            }
        },
        "SimpleTerm.__eq__": {
            "name": "__eq__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SimpleTerm.__ne__": {
            "name": "__ne__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SimpleTerm.__hash__": {
            "name": "__hash__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleVocabulary.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "terms": []
            }
        },
        "SimpleVocabulary.fromItems": {
            "name": "fromItems",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "items": []
            }
        },
        "SimpleVocabulary.fromValues": {
            "name": "fromValues",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "SimpleVocabulary.createTerm": {
            "name": "createTerm",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SimpleVocabulary.__contains__": {
            "name": "__contains__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SimpleVocabulary.getTerm": {
            "name": "getTerm",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SimpleVocabulary.getTermByToken": {
            "name": "getTermByToken",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "SimpleVocabulary.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleVocabulary.__len__": {
            "name": "__len__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleVocabulary.__eq__": {
            "name": "__eq__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SimpleVocabulary.__ne__": {
            "name": "__ne__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SimpleVocabulary.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeVocabulary.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "terms": []
            }
        },
        "TreeVocabulary.__contains__": {
            "name": "__contains__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TreeVocabulary.__getitem__": {
            "name": "__getitem__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TreeVocabulary.__iter__": {
            "name": "__iter__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeVocabulary.__len__": {
            "name": "__len__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeVocabulary.get": {
            "name": "get",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "TreeVocabulary.keys": {
            "name": "keys",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeVocabulary.values": {
            "name": "values",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeVocabulary.items": {
            "name": "items",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeVocabulary.fromDict": {
            "name": "fromDict",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "dict_": []
            }
        },
        "TreeVocabulary.getTerm": {
            "name": "getTerm",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TreeVocabulary.getTermByToken": {
            "name": "getTermByToken",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "TreeVocabulary.getTermPath": {
            "name": "getTermPath",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VocabularyRegistryError.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "VocabularyRegistry.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VocabularyRegistry.get": {
            "name": "get",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "name": []
            }
        },
        "VocabularyRegistry.register": {
            "name": "register",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "factory": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/schema/_bootstrapfields.py": {
        "getFields": {
            "name": "getFields",
            "location": 22,
            "return": [],
            "arguments": {
                "schema": []
            }
        },
        "get_schema_validation_errors": {
            "name": "get_schema_validation_errors",
            "location": 109,
            "return": [],
            "arguments": {
                "schema": [],
                "value": [],
                "_validating_objects": []
            }
        },
        "get_validation_errors": {
            "name": "get_validation_errors",
            "location": 110,
            "return": [],
            "arguments": {
                "schema": [],
                "value": [],
                "validate_invariants": []
            }
        },
        "ValidatedProperty.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "check": [],
                "allow_none": []
            }
        },
        "ValidatedProperty.__set__": {
            "name": "__set__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "value": []
            }
        },
        "ValidatedProperty.__get__": {
            "name": "__get__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "owner": []
            }
        },
        "DefaultProperty.__get__": {
            "name": "__get__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "inst": [],
                "owner": []
            }
        },
        "_DocStringHelpers.docstring_to_lines": {
            "name": "docstring_to_lines",
            "location": 26,
            "return": [],
            "arguments": {
                "docstring": []
            }
        },
        "_DocStringHelpers.make_class_directive": {
            "name": "make_class_directive",
            "location": 28,
            "return": [],
            "arguments": {
                "kind": []
            }
        },
        "_DocStringHelpers.make_field": {
            "name": "make_field",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "value": []
            }
        },
        "_DocStringHelpers.make_class_field": {
            "name": "make_class_field",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "kind": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "description": [],
                "__name__": [],
                "required": [],
                "readonly": [],
                "constraint": [],
                "default": [],
                "defaultFactory": [],
                "missing_value": []
            }
        },
        "Field.constraint": {
            "name": "constraint",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Field.bind": {
            "name": "bind",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Field.validate": {
            "name": "validate",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Field.__hash__": {
            "name": "__hash__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Field.__ne__": {
            "name": "__ne__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Field.get": {
            "name": "get",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "Field.query": {
            "name": "query",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "default": []
            }
        },
        "Field.set": {
            "name": "set",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "value": []
            }
        },
        "Field.getExtraDocLines": {
            "name": "getExtraDocLines",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.getDoc": {
            "name": "getDoc",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orderable.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "min": [],
                "max": [],
                "default": []
            }
        },
        "MinMaxLen.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "min_length": [],
                "max_length": []
            }
        },
        "Text.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Text.fromUnicode": {
            "name": "fromUnicode",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "str": []
            }
        },
        "TextLine.constraint": {
            "name": "constraint",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Password.set": {
            "name": "set",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "value": []
            }
        },
        "Password.validate": {
            "name": "validate",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Bool.set": {
            "name": "set",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "value": []
            }
        },
        "Bool.fromUnicode": {
            "name": "fromUnicode",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Bool.fromBytes": {
            "name": "fromBytes",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Number.fromUnicode": {
            "name": "fromUnicode",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Number.fromBytes": {
            "name": "fromBytes",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_ObjectsBeingValidated.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "Object.getExtraDocLines": {
            "name": "getExtraDocLines",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Object.set": {
            "name": "set",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "value": []
            }
        },
        "BeforeObjectAssignedEvent.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "name": [],
                "context": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/schema/_bootstrapinterfaces.py": {
        "ValidationError.with_field_and_value": {
            "name": "with_field_and_value",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "ValidationError.doc": {
            "name": "doc",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.__lt__": {
            "name": "__lt__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ValidationError.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "WrongType.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "expected_type": [],
                "name": []
            }
        },
        "OutOfBounds.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "bound": []
            }
        },
        "WrongContainedType.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "errors": [],
                "name": []
            }
        },
        "SchemaNotCorrectlyImplemented.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "errors": [],
                "name": [],
                "schema_errors": [],
                "invariant_errors": []
            }
        },
        "SchemaNotProvided.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "value": []
            }
        },
        "NotAnInterface.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "name": []
            }
        },
        "IFromUnicode.fromUnicode": {
            "name": "fromUnicode",
            "location": 93,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "IFromBytes.fromBytes": {
            "name": "fromBytes",
            "location": 96,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "IContextAwareDefaultFactory.__call__": {
            "name": "__call__",
            "location": 99,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "IValidatable.validate": {
            "name": "validate",
            "location": 107,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/schema/_compat.py": {
        "non_native_string": {
            "name": "non_native_string",
            "location": 14,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "make_binary": {
            "name": "make_binary",
            "location": 15,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/schema/_field.py": {
        "Bytes.fromUnicode": {
            "name": "fromUnicode",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Bytes.fromBytes": {
            "name": "fromBytes",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "NativeString.fromBytes": {
            "name": "fromBytes",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BytesLine.constraint": {
            "name": "constraint",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "NativeStringLine.fromBytes": {
            "name": "fromBytes",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ASCIILine.constraint": {
            "name": "constraint",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Datetime.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidVocabularyError.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "vocabulary": []
            }
        },
        "Choice.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "vocabulary": [],
                "source": []
            }
        },
        "Choice.bind": {
            "name": "bind",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Choice.fromUnicode": {
            "name": "fromUnicode",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_StrippedNativeStringLine.fromUnicode": {
            "name": "fromUnicode",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_StrippedNativeStringLine.fromBytes": {
            "name": "fromBytes",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DottedName.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Collection.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "value_type": [],
                "unique": []
            }
        },
        "Collection.bind": {
            "name": "bind",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "_AbstractSet.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapping.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "key_type": [],
                "value_type": []
            }
        },
        "Mapping.bind": {
            "name": "bind",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/schema/_messageid.py": {},
    "mypy-zope-master/src/zope-stubs/schema/_schema.py": {
        "getFieldNames": {
            "name": "getFieldNames",
            "location": 8,
            "return": [],
            "arguments": {
                "schema": []
            }
        },
        "getFieldsInOrder": {
            "name": "getFieldsInOrder",
            "location": 9,
            "return": [],
            "arguments": {
                "schema": [],
                "_field_key": []
            }
        },
        "getFieldNamesInOrder": {
            "name": "getFieldNamesInOrder",
            "location": 10,
            "return": [],
            "arguments": {
                "schema": []
            }
        },
        "getValidationErrors": {
            "name": "getValidationErrors",
            "location": 11,
            "return": [],
            "arguments": {
                "schema": [],
                "value": []
            }
        },
        "getSchemaValidationErrors": {
            "name": "getSchemaValidationErrors",
            "location": 12,
            "return": [],
            "arguments": {
                "schema": [],
                "value": []
            }
        }
    },
    "mypy-zope-master/src/zope-stubs/schema/__init__.py": {},
    "mypy-zope-master/tests/test_samples.py": {
        "mypy_cache_dir": {
            "name": "mypy_cache_dir",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_samples": {
            "name": "test_samples",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "samplefile": [
                    "str"
                ],
                "mypy_cache_dir": [
                    "str"
                ]
            }
        },
        "find_expected_output": {
            "name": "find_expected_output",
            "location": 51,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "normalize_errors": {
            "name": "normalize_errors",
            "location": 60,
            "return": [
                "str",
                "int",
                "List[str]",
                "float",
                "tuple",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "errors": [
                    "str",
                    "Exception",
                    "dict"
                ],
                "filename": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[str]",
                    "Optional[Callable[[str], Any]]"
                ]
            }
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "metafunc": [
                    "Callable[..., None]"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/adaptation.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ISomething.hello": {
            "name": "hello",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "AbstractSomething.thefunc": {
            "name": "thefunc",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcreteSomething.hello": {
            "name": "hello",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/classimplements.py": {
        "IFoo.foo": {
            "name": "foo",
            "location": 7,
            "return": [
                "builtins.int"
            ],
            "arguments": {}
        },
        "IBar.bar": {
            "name": "bar",
            "location": 12,
            "return": [
                "builtins.str"
            ],
            "arguments": {}
        },
        "FooBar.foo": {
            "name": "foo",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FooBar.bar": {
            "name": "bar",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/tests/samples/classimplements_broken_iface.py": {
        "ImNotAnInterface": {
            "name": "ImNotAnInterface",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Foo.foo": {
            "name": "foo",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/tests/samples/classimplements_broken_impl.py": {
        "IFoo.foo": {
            "name": "foo",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/classimplements_wrong.py": {
        "IFoo.foo": {
            "name": "foo",
            "location": 9,
            "return": [
                "builtins.int"
            ],
            "arguments": {}
        },
        "Foo.bar": {
            "name": "bar",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/tests/samples/contextmanager.py": {
        "m": {
            "name": "m",
            "location": 11,
            "return": [
                "typing.Iterator[A[_T]]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/forwardref.py": {
        "ISomething.hello": {
            "name": "hello",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "thing": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Something.hello": {
            "name": "hello",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "str",
                    "Callable",
                    "bool",
                    "dict"
                ]
            }
        },
        "IThing.get_name": {
            "name": "get_name",
            "location": 18,
            "return": [
                "builtins.str"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/impl_inheritance.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IBookmark.remember": {
            "name": "remember",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/impl_property.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Bookmark.number": {
            "name": "number",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Bookmark.text": {
            "name": "text",
            "location": 21,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/tests/samples/incompatible_signature.py": {
        "run": {
            "name": "run",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "smth": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ISomething.hello": {
            "name": "hello",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "Something.hello": {
            "name": "hello",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "y": [
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/innerclass.py": {
        "decorator": {
            "name": "decorator",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/interface_annotated_attribute.py": {
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/interface_attribute.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/interface_fieldproperty.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/interface_getattr.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IData.__getattr__": {
            "name": "__getattr__",
            "location": 6,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/interface_implications.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool",
                    "Sequence[Tuple[float, Any]]",
                    "Literal"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/interface_inheritance.py": {
        "run": {
            "name": "run",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "smth": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "greet": {
            "name": "greet",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "smth": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ISomething.hello": {
            "name": "hello",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "ISuperSomething.greet": {
            "name": "greet",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "ISomethingSomething.wink": {
            "name": "wink",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "SuperSomething.hello": {
            "name": "hello",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "y": [
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        },
        "SuperSomething.greet": {
            "name": "greet",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "SomethingSomething.wink": {
            "name": "wink",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/interface_mapping.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BadContainer.values": {
            "name": "values",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/tests/samples/interface_meta.py": {
        "createOb": {
            "name": "createOb",
            "location": 12,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "iface": [
                    "Type[T]",
                    "dict",
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "IBookmark.create": {
            "name": "create",
            "location": 9,
            "return": [
                "'IBookmark'"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/interface_metaclass.py": {
        "Api.open": {
            "name": "open",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/interface_self.py": {
        "IAnimal.say": {
            "name": "say",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cow.say": {
            "name": "say",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/tests/samples/interface_unknown.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/interface_unknown_direct.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/interface_unknown_inherit.py": {
        "IKnownInterface.hello": {
            "name": "hello",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/multiple_implementer.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IBookmark.remember": {
            "name": "remember",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "Dict[str, Union[str, int]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "IActionalble.follow": {
            "name": "follow",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "times": [
                    "float",
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/multiple_inheritance.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IAwesome.sparkle": {
            "name": "sparkle",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IClothing.wear": {
            "name": "wear",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Awesome.sparkle": {
            "name": "sparkle",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Boots.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Boots.wear": {
            "name": "wear",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/tests/samples/nested_definitions.py": {
        "Host.IBookmark.get_url": {
            "name": "get_url",
            "location": 6,
            "return": [
                "builtins.str"
            ],
            "arguments": {}
        },
        "Host.Bookmark.get_url": {
            "name": "get_url",
            "location": 11,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy-zope-master/tests/samples/not_fully_implemented.py": {
        "run": {
            "name": "run",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "smth": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ISomething.hello": {
            "name": "hello",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/no_arg_method.py": {
        "run": {
            "name": "run",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "smth": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ISomething.hello": {
            "name": "hello",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ISomething.add": {
            "name": "add",
            "location": 12,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "str",
                    "int"
                ],
                "b": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Something.hello": {
            "name": "hello",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Something.add": {
            "name": "add",
            "location": 21,
            "return": [
                "float",
                "T",
                "Tuple[float, float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/open.py": {},
    "mypy-zope-master/tests/samples/overload.py": {
        "ISomething.getStuff": {
            "name": "getStuff",
            "location": 14,
            "return": [
                "typing.Union[builtins.int, typing.List[builtins.int]]"
            ],
            "arguments": {
                "index": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "MySomething.getStuff": {
            "name": "getStuff",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/overload_readme.py": {
        "IAnimal.say": {
            "name": "say",
            "location": 17,
            "return": [
                "typing.Union[builtins.str, typing.List[builtins.str]]"
            ],
            "arguments": {
                "count": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Cow.say": {
            "name": "say",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/parameterized_types.py": {
        "ISomething.hello": {
            "name": "hello",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "names": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Something.hello": {
            "name": "hello",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/schema_bool.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/schema_field_outside_inteface.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/schema_number.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/schema_text.py": {
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/schema_unknown_field.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/simple_valid.py": {
        "run": {
            "name": "run",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "smth": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ISomething.hello": {
            "name": "hello",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "Something.hello": {
            "name": "hello",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "y": [
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        }
    },
    "mypy-zope-master/tests/samples/unknown_interface.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy-zope-master/tests/samples/unknown_metaclass.py": {}
}
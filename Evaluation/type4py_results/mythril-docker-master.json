{
    "mythril-docker-master/setup.py": {
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/docs/source/conf.py": {},
    "mythril-docker-master/mypy-stubs/z3/z3core.py": {
        "Z3_mk_eq": {
            "name": "Z3_mk_eq",
            "location": 3,
            "return": [],
            "arguments": {
                "ctx": [],
                "a": [],
                "b": []
            }
        },
        "Z3_mk_div": {
            "name": "Z3_mk_div",
            "location": 4,
            "return": [],
            "arguments": {
                "ctx": [],
                "a": [],
                "b": []
            }
        }
    },
    "mythril-docker-master/mypy-stubs/z3/z3types.py": {
        "Z3Exception.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        }
    },
    "mythril-docker-master/mypy-stubs/z3/__init__.py": {
        "is_true": {
            "name": "is_true",
            "location": 50,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "is_false": {
            "name": "is_false",
            "location": 51,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "is_int_value": {
            "name": "is_int_value",
            "location": 52,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "substitute": {
            "name": "substitute",
            "location": 53,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "simplify": {
            "name": "simplify",
            "location": 54,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "Int": {
            "name": "Int",
            "location": 174,
            "return": [],
            "arguments": {
                "name": [],
                "ctx": []
            }
        },
        "Bool": {
            "name": "Bool",
            "location": 178,
            "return": [],
            "arguments": {
                "name": [],
                "ctx": []
            }
        },
        "parse_smt2_string": {
            "name": "parse_smt2_string",
            "location": 182,
            "return": [],
            "arguments": {
                "s": [],
                "ctx": []
            }
        },
        "Array": {
            "name": "Array",
            "location": 183,
            "return": [],
            "arguments": {
                "name": [],
                "domain": [],
                "range": []
            }
        },
        "K": {
            "name": "K",
            "location": 184,
            "return": [],
            "arguments": {
                "domain": [],
                "v": []
            }
        },
        "Or": {
            "name": "Or",
            "location": 188,
            "return": [],
            "arguments": {}
        },
        "And": {
            "name": "And",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "Not": {
            "name": "Not",
            "location": 190,
            "return": [],
            "arguments": {
                "p": [],
                "ctx": []
            }
        },
        "Implies": {
            "name": "Implies",
            "location": 191,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "ctx": []
            }
        },
        "If": {
            "name": "If",
            "location": 195,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": [],
                "ctx": []
            }
        },
        "ULE": {
            "name": "ULE",
            "location": 196,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "ULT": {
            "name": "ULT",
            "location": 197,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "UGE": {
            "name": "UGE",
            "location": 198,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "UGT": {
            "name": "UGT",
            "location": 199,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "UDiv": {
            "name": "UDiv",
            "location": 200,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "URem": {
            "name": "URem",
            "location": 201,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "SRem": {
            "name": "SRem",
            "location": 202,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "LShR": {
            "name": "LShR",
            "location": 203,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "RotateLeft": {
            "name": "RotateLeft",
            "location": 204,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "RotateRight": {
            "name": "RotateRight",
            "location": 205,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "SignExt": {
            "name": "SignExt",
            "location": 206,
            "return": [],
            "arguments": {
                "n": [],
                "a": []
            }
        },
        "ZeroExt": {
            "name": "ZeroExt",
            "location": 207,
            "return": [],
            "arguments": {
                "n": [],
                "a": []
            }
        },
        "Concat": {
            "name": "Concat",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "Extract": {
            "name": "Extract",
            "location": 225,
            "return": [],
            "arguments": {
                "high": [],
                "lo": [],
                "a": []
            }
        },
        "Sum": {
            "name": "Sum",
            "location": 233,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "Function": {
            "name": "Function",
            "location": 239,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "IntVal": {
            "name": "IntVal",
            "location": 240,
            "return": [],
            "arguments": {
                "val": [],
                "ctx": []
            }
        },
        "BoolVal": {
            "name": "BoolVal",
            "location": 241,
            "return": [],
            "arguments": {
                "val": [],
                "ctx": []
            }
        },
        "BitVecVal": {
            "name": "BitVecVal",
            "location": 242,
            "return": [],
            "arguments": {
                "val": [],
                "bv": [],
                "ctx": []
            }
        },
        "BitVec": {
            "name": "BitVec",
            "location": 245,
            "return": [],
            "arguments": {
                "val": [],
                "bv": [],
                "ctx": []
            }
        },
        "IntSort": {
            "name": "IntSort",
            "location": 248,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "BoolSort": {
            "name": "BoolSort",
            "location": 249,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "ArraySort": {
            "name": "ArraySort",
            "location": 250,
            "return": [],
            "arguments": {
                "domain": [],
                "range": []
            }
        },
        "BitVecSort": {
            "name": "BitVecSort",
            "location": 251,
            "return": [],
            "arguments": {
                "domain": [],
                "ctx": []
            }
        },
        "ForAll": {
            "name": "ForAll",
            "location": 252,
            "return": [],
            "arguments": {
                "vs": [],
                "expr": []
            }
        },
        "Select": {
            "name": "Select",
            "location": 253,
            "return": [],
            "arguments": {
                "arr": [],
                "ind": []
            }
        },
        "Update": {
            "name": "Update",
            "location": 254,
            "return": [],
            "arguments": {
                "arr": [],
                "ind": [],
                "newVal": []
            }
        },
        "Store": {
            "name": "Store",
            "location": 255,
            "return": [],
            "arguments": {
                "arr": [],
                "ind": [],
                "newVal": []
            }
        },
        "BVAddNoOverflow": {
            "name": "BVAddNoOverflow",
            "location": 256,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "signed": []
            }
        },
        "BVAddNoUnderflow": {
            "name": "BVAddNoUnderflow",
            "location": 257,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "BVSubNoOverflow": {
            "name": "BVSubNoOverflow",
            "location": 258,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "BVSubNoUnderflow": {
            "name": "BVSubNoUnderflow",
            "location": 259,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "signed": []
            }
        },
        "BVSDivNoOverflow": {
            "name": "BVSDivNoOverflow",
            "location": 260,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "BVSNegNoOverflow": {
            "name": "BVSNegNoOverflow",
            "location": 261,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "BVMulNoOverflow": {
            "name": "BVMulNoOverflow",
            "location": 262,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "signed": []
            }
        },
        "BVMulNoUnderflow": {
            "name": "BVMulNoUnderflow",
            "location": 263,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "AstRef.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "ast": []
            }
        },
        "AstRef.ctx_ref": {
            "name": "ctx_ref",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstRef.as_ast": {
            "name": "as_ast",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstRef.children": {
            "name": "children",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstRef.eq": {
            "name": "eq",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FuncDeclRef.arity": {
            "name": "arity",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncDeclRef.name": {
            "name": "name",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncDeclRef.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprRef.sort": {
            "name": "sort",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprRef.decl": {
            "name": "decl",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArithRef.__neg__": {
            "name": "__neg__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArithRef.__le__": {
            "name": "__le__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__lt__": {
            "name": "__lt__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__ge__": {
            "name": "__ge__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__gt__": {
            "name": "__gt__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__add__": {
            "name": "__add__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__sub__": {
            "name": "__sub__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__mul__": {
            "name": "__mul__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__div__": {
            "name": "__div__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__truediv__": {
            "name": "__truediv__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__mod__": {
            "name": "__mod__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.size": {
            "name": "size",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitVecRef.__add__": {
            "name": "__add__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__radd__": {
            "name": "__radd__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__mul__": {
            "name": "__mul__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rmul__": {
            "name": "__rmul__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__sub__": {
            "name": "__sub__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rsub__": {
            "name": "__rsub__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__or__": {
            "name": "__or__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__ror__": {
            "name": "__ror__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__and__": {
            "name": "__and__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rand__": {
            "name": "__rand__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__xor__": {
            "name": "__xor__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rxor__": {
            "name": "__rxor__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__pos__": {
            "name": "__pos__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitVecRef.__neg__": {
            "name": "__neg__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitVecRef.__invert__": {
            "name": "__invert__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitVecRef.__div__": {
            "name": "__div__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rdiv__": {
            "name": "__rdiv__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__truediv__": {
            "name": "__truediv__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__mod__": {
            "name": "__mod__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rmod__": {
            "name": "__rmod__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__le__": {
            "name": "__le__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__lt__": {
            "name": "__lt__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__ge__": {
            "name": "__ge__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__gt__": {
            "name": "__gt__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rshift__": {
            "name": "__rshift__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__lshift__": {
            "name": "__lshift__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rrshift__": {
            "name": "__rrshift__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecRef.__rlshift__": {
            "name": "__rlshift__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecNumRef.as_long": {
            "name": "as_long",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitVecNumRef.as_signed_long": {
            "name": "as_signed_long",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitVecNumRef.as_string": {
            "name": "as_string",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntNumRef.as_long": {
            "name": "as_long",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntNumRef.as_string": {
            "name": "as_string",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRef.__getitem__": {
            "name": "__getitem__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "ModelRef.decls": {
            "name": "decls",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRef.__iter__": {
            "name": "__iter__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncEntry.num_args": {
            "name": "num_args",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncEntry.arg_value": {
            "name": "arg_value",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "FuncEntry.value": {
            "name": "value",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.else_value": {
            "name": "else_value",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.num_entries": {
            "name": "num_entries",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.arity": {
            "name": "arity",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.entry": {
            "name": "entry",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Solver.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Solver.to_smt2": {
            "name": "to_smt2",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.check": {
            "name": "check",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.push": {
            "name": "push",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.pop": {
            "name": "pop",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "Solver.model": {
            "name": "model",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.set": {
            "name": "set",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.add": {
            "name": "add",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Solver.reset": {
            "name": "reset",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimize.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Optimize.check": {
            "name": "check",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimize.push": {
            "name": "push",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimize.pop": {
            "name": "pop",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimize.model": {
            "name": "model",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimize.set": {
            "name": "set",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimize.add": {
            "name": "add",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Optimize.minimize": {
            "name": "minimize",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "Optimize.maximize": {
            "name": "maximize",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        }
    },
    "mythril-docker-master/mythril/exceptions.py": {},
    "mythril-docker-master/mythril/__init__.py": {},
    "mythril-docker-master/mythril/__main__.py": {},
    "mythril-docker-master/mythril/__version__.py": {},
    "mythril-docker-master/mythril/analysis/analysis_args.py": {
        "AnalysisArgs.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisArgs.set_loop_bound": {
            "name": "set_loop_bound",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loop_bound": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Optional[int]",
                    "Optional[Callable]"
                ]
            }
        },
        "AnalysisArgs.set_solver_timeout": {
            "name": "set_solver_timeout",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "solver_timeout": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "AnalysisArgs.loop_bound": {
            "name": "loop_bound",
            "location": 22,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisArgs.solver_timeout": {
            "name": "solver_timeout",
            "location": 26,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/analysis/callgraph.py": {
        "extract_nodes": {
            "name": "extract_nodes",
            "location": 128,
            "return": [
                "int",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "statespace": [
                    "SupportsInt",
                    "str",
                    "list"
                ]
            }
        },
        "extract_edges": {
            "name": "extract_edges",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "statespace": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "generate_graph": {
            "name": "generate_graph",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "statespace": [
                    "int",
                    "str",
                    "list"
                ],
                "title": [
                    "int",
                    "str",
                    "list"
                ],
                "physics": [
                    "int",
                    "Callable",
                    "str"
                ],
                "phrackify": [
                    "int",
                    "str",
                    "list"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/call_helpers.py": {
        "get_call_from_state": {
            "name": "get_call_from_state",
            "location": 10,
            "return": [
                "Optional[List[str]]",
                "Optional[str]",
                "List[str]",
                "Optional[Sequence[str]]",
                "str"
            ],
            "arguments": {
                "state": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/ops.py": {
        "get_variable": {
            "name": "get_variable",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [
                    "bool",
                    "int",
                    "str",
                    "Type[Tuple[Any, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool"
                ],
                "_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "Variable.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Op.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "float",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "state": [
                    "float",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "state_index": [
                    "float",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "Call.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "BaseException",
                    "dict",
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "int"
                ],
                "state": [
                    "BaseException",
                    "dict",
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "int"
                ],
                "state_index": [
                    "BaseException",
                    "dict",
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "int"
                ],
                "_type": [
                    "int",
                    "str"
                ],
                "to": [
                    "int",
                    "bool",
                    "Union[Tuple[int, int], int]"
                ],
                "gas": [
                    "int",
                    "str"
                ],
                "value": [
                    "str",
                    "int",
                    "bool",
                    "Union[float, str]",
                    "Callable",
                    "List[int]",
                    "list"
                ],
                "data": [
                    "Dict[str, Any]",
                    "int",
                    "bytes",
                    "str",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/report.py": {
        "Issue.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "function_name": [
                    "str",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ],
                "address": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "swc_id": [
                    "int",
                    "str",
                    "Optional[Set[int]]",
                    "list"
                ],
                "title": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "bytecode": [
                    "str",
                    "Optional[bool]",
                    "dict",
                    "Optional[Callable]"
                ],
                "gas_used": [
                    "int",
                    "Optional[int]",
                    "float",
                    "bool"
                ],
                "severity": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ],
                "description_head": [
                    "str",
                    "bool"
                ],
                "description_tail": [
                    "str",
                    "bool"
                ],
                "transaction_sequence": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "Issue.transaction_sequence_users": {
            "name": "transaction_sequence_users",
            "location": 70,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.transaction_sequence_jsonv2": {
            "name": "transaction_sequence_jsonv2",
            "location": 75,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.add_block_data": {
            "name": "add_block_data",
            "location": 84,
            "return": [
                "Iterable",
                "List[str]",
                "float",
                "Sequence[str]",
                "dict"
            ],
            "arguments": {
                "transaction_sequence": [
                    "Iterable[str]",
                    "int",
                    "Optional[Any]"
                ]
            }
        },
        "Issue.as_dict": {
            "name": "as_dict",
            "location": 97,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue._set_internal_compiler_error": {
            "name": "_set_internal_compiler_error",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Issue.add_code_info": {
            "name": "add_code_info",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "Dict[str, str]",
                    "str",
                    "bool"
                ]
            }
        },
        "Issue.resolve_function_names": {
            "name": "resolve_function_names",
            "location": 155,
            "return": [
                "Iterator[Tuple[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contracts": [
                    "bool"
                ],
                "exceptions": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "Report.sorted_issues": {
            "name": "sorted_issues",
            "location": 200,
            "return": [
                "str",
                "float",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.append_issue": {
            "name": "append_issue",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "str",
                    "bool"
                ]
            }
        },
        "Report.as_text": {
            "name": "as_text",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.as_json": {
            "name": "as_json",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report._get_exception_data": {
            "name": "_get_exception_data",
            "location": 236,
            "return": [
                "Optional[Dict[str, Any]]",
                "dict",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.as_swc_standard_format": {
            "name": "as_swc_standard_format",
            "location": 244,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.as_markdown": {
            "name": "as_markdown",
            "location": 288,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report._file_name": {
            "name": "_file_name",
            "location": 297,
            "return": [
                "List[str]",
                "List[Tuple[int, str]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/analysis/security.py": {
        "reset_callback_modules": {
            "name": "reset_callback_modules",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "module_names": [
                    "str",
                    "Optional[str]"
                ],
                "custom_modules_directory": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_detection_module_hooks": {
            "name": "get_detection_module_hooks",
            "location": 24,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "modules": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "hook_type": [
                    "str"
                ],
                "custom_modules_directory": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "get_detection_modules": {
            "name": "get_detection_modules",
            "location": 54,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "entrypoint": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[str]",
                    "Iterable[T]"
                ],
                "include_modules": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "custom_modules_directory": [
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "fire_lasers": {
            "name": "fire_lasers",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "statespace": [
                    "str",
                    "bool"
                ],
                "module_names": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "custom_modules_directory": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "retrieve_callback_issues": {
            "name": "retrieve_callback_issues",
            "location": 118,
            "return": [
                "str",
                "deque",
                "int",
                "list"
            ],
            "arguments": {
                "module_names": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "custom_modules_directory": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/solver.py": {
        "get_model": {
            "name": "get_model",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "constraints": [
                    "str",
                    "bool"
                ],
                "minimize": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "maximize": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "enforce_execution_time": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "pretty_print_model": {
            "name": "pretty_print_model",
            "location": 60,
            "return": [
                "List[str]",
                "list",
                "Dict[str, str]"
            ],
            "arguments": {
                "model": [
                    "str"
                ]
            }
        },
        "get_transaction_sequence": {
            "name": "get_transaction_sequence",
            "location": 84,
            "return": [
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "constraints": [
                    "mythril.laser.ethereum.state.constraints.Constraints",
                    "int",
                    "Callable"
                ]
            }
        },
        "_get_concrete_state": {
            "name": "_get_concrete_state",
            "location": 131,
            "return": [
                "int",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Dict[str, str]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "initial_accounts": [
                    "dict",
                    "str",
                    "Dict[int, dict]"
                ],
                "min_price_dict": [
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "_get_concrete_transaction": {
            "name": "_get_concrete_transaction",
            "location": 146,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "model": [
                    "tuple",
                    "T",
                    "Optional[bool]"
                ],
                "transaction": [
                    "int",
                    "str",
                    "raiden.transfer.state.NettingChannelState",
                    "Dict[str, Any]"
                ]
            }
        },
        "_set_minimisation_constraints": {
            "name": "_set_minimisation_constraints",
            "location": 177,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "transaction_sequence": [
                    "bool"
                ],
                "constraints": [
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "minimize": [
                    "int"
                ],
                "max_size": [
                    "float",
                    "int",
                    "str",
                    "Union[Tuple[int, int], int]",
                    "Tuple[int]"
                ],
                "world_state": [
                    "list",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "prefecengine.state.State",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/swc_data.py": {},
    "mythril-docker-master/mythril/analysis/symbolic.py": {
        "SymExecWrapper.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "address": [
                    "str",
                    "int"
                ],
                "strategy": [
                    "int",
                    "str",
                    "float"
                ],
                "dynloader": [
                    "str"
                ],
                "max_depth": [
                    "int",
                    "str",
                    "float"
                ],
                "execution_timeout": [
                    "int",
                    "str",
                    "float"
                ],
                "loop_bound": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "create_timeout": [
                    "int",
                    "str",
                    "float"
                ],
                "transaction_count": [
                    "int",
                    "str",
                    "float"
                ],
                "modules": [
                    "str",
                    "int",
                    "Tuple[float]",
                    "Dict[int, str]",
                    "List[str]"
                ],
                "compulsory_statespace": [
                    "int",
                    "bool",
                    "Dict[int, str]"
                ],
                "enable_iprof": [
                    "int",
                    "str",
                    "float"
                ],
                "disable_dependency_pruning": [
                    "bool",
                    "str"
                ],
                "run_analysis_modules": [
                    "bool",
                    "str"
                ],
                "enable_coverage_strategy": [
                    "int",
                    "str",
                    "float"
                ],
                "custom_modules_directory": [
                    "str",
                    "int",
                    "Tuple[float]",
                    "Dict[int, str]",
                    "List[str]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/traceexplore.py": {
        "get_serializable_statespace": {
            "name": "get_serializable_statespace",
            "location": 52,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "statespace": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_serializable_statespace.get_state_accounts": {
            "name": "get_state_accounts",
            "location": 87,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "node_state": [
                    "Iterable[Callable]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/__init__.py": {},
    "mythril-docker-master/mythril/analysis/modules/base.py": {
        "DetectionModule.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "swc_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[int]"
                ],
                "description": [
                    "bool",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "List[int]",
                    "Optional[str]"
                ],
                "entrypoint": [
                    "bool",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "List[int]",
                    "Optional[str]"
                ],
                "pre_hooks": [
                    "bool",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "List[int]",
                    "Optional[str]"
                ],
                "post_hooks": [
                    "str",
                    "Union[int, float]",
                    "Optional[str]",
                    "Optional[List[\"CustomLineItemDraft\"]]"
                ]
            }
        },
        "DetectionModule.issues": {
            "name": "issues",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DetectionModule.reset_module": {
            "name": "reset_module",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DetectionModule.execute": {
            "name": "execute",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statespace": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DetectionModule._execute": {
            "name": "_execute",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "statespace": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DetectionModule.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/delegatecall.py": {
        "DelegateCallAnnotation.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call_state": [
                    "int",
                    "str",
                    "dict"
                ],
                "constraints": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "DelegateCallAnnotation._copy__": {
            "name": "_copy__",
            "location": 35,
            "return": [
                "tuple",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegateCallAnnotation.get_issue": {
            "name": "get_issue",
            "location": 38,
            "return": [
                "str",
                "int",
                "Iterable[int]",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "List[Dict[str, Any]]"
                ],
                "transaction_sequence": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "DelegateCallModule.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegateCallModule._execute": {
            "name": "_execute",
            "location": 90,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "DelegateCallModule._analyze_state": {
            "name": "_analyze_state",
            "location": 104,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/dependence_on_predictable_vars.py": {
        "is_prehook": {
            "name": "is_prehook",
            "location": 23,
            "return": [
                "bool",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "PredictableValueAnnotation.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "float",
                    "str"
                ],
                "add_constraints": [
                    "Dict[str, Any]",
                    "bool",
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "str"
                ]
            }
        },
        "PredictablePathAnnotation.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "bool",
                    "Optional[List[str]]",
                    "str",
                    "List['cirq.Circuit']",
                    "Optional[int]",
                    "Type[T]"
                ],
                "location": [
                    "bool",
                    "Optional[Callable]"
                ],
                "add_constraints": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        },
        "OldBlockNumberUsedAnnotation.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constraints": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PredictableDependenceModule.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictableDependenceModule._execute": {
            "name": "_execute",
            "location": 71,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "PredictableDependenceModule._analyze_state": {
            "name": "_analyze_state",
            "location": 85,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Callable",
                    "state.State",
                    "pyshgp.push.state.PushState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/deprecated_ops.py": {
        "DeprecatedOperationsModule.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DeprecatedOperationsModule._execute": {
            "name": "_execute",
            "location": 29,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "DeprecatedOperationsModule._analyze_state": {
            "name": "_analyze_state",
            "location": 44,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "pyshgp.push.state.PushState",
                    "Dict[str, Any]",
                    "recidiviz.persistence.entity.state.entities.StateSupervisionPeriod"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/dos.py": {
        "VisitsAnnotation.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VisitsAnnotation.__copy__": {
            "name": "__copy__",
            "location": 26,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DosModule.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DosModule._execute": {
            "name": "_execute",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "T",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "DosModule._analyze_state": {
            "name": "_analyze_state",
            "location": 61,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "state.State"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/ether_thief.py": {
        "EtherThief.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EtherThief.reset_module": {
            "name": "reset_module",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EtherThief._execute": {
            "name": "_execute",
            "location": 57,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "EtherThief._analyze_state": {
            "name": "_analyze_state",
            "location": 71,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/exceptions.py": {
        "ReachableExceptionsModule.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReachableExceptionsModule._execute": {
            "name": "_execute",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "T",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "ReachableExceptionsModule._analyze_state": {
            "name": "_analyze_state",
            "location": 40,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/external_calls.py": {
        "_is_precompile_call": {
            "name": "_is_precompile_call",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "global_state": [
                    "fakesmtpd.state.State",
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "ExternalCalls.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExternalCalls._execute": {
            "name": "_execute",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "T",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "ExternalCalls._analyze_state": {
            "name": "_analyze_state",
            "location": 74,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "state.State"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/integer.py": {
        "_get_address_from_state": {
            "name": "_get_address_from_state",
            "location": 341,
            "return": [
                "str"
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "str",
                    "bytes",
                    "int",
                    "Callable",
                    "list",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "_get_overflowunderflow_state_annotation": {
            "name": "_get_overflowunderflow_state_annotation",
            "location": 345,
            "return": [
                "str",
                "bool",
                "raiden.utils.List[raiden.transfer.state.RouteState]",
                "list",
                "raiden.transfer.state.ChainState"
            ],
            "arguments": {
                "state": [
                    "dict",
                    "Optional[Tuple[int, ...]]",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "OverUnderflowAnnotation.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "overflowing_state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "T"
                ],
                "operator": [
                    "str",
                    "dict"
                ],
                "constraint": [
                    "str",
                    "dict"
                ]
            }
        },
        "OverUnderflowAnnotation.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 43,
            "return": [
                "Iterable[str]",
                "shapely.geometry.base.BaseGeometry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memodict": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "OverUnderflowStateAnnotation.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverUnderflowStateAnnotation.__copy__": {
            "name": "__copy__",
            "location": 54,
            "return": [
                "Iterable[str]",
                "shapely.geometry.base.BaseGeometry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerOverflowUnderflowModule.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerOverflowUnderflowModule.reset_module": {
            "name": "reset_module",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerOverflowUnderflowModule._execute": {
            "name": "_execute",
            "location": 107,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._get_args": {
            "name": "_get_args",
            "location": 135,
            "return": [
                "int",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "float",
                    "int"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._handle_add": {
            "name": "_handle_add",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[float]",
                    "list",
                    "Iterable[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._handle_mul": {
            "name": "_handle_mul",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "List[float]",
                    "List[Tuple[str, Any, Any]]",
                    "Iterable[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._handle_sub": {
            "name": "_handle_sub",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "List[float]",
                    "List[Tuple[str, Any, Any]]",
                    "Iterable[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._handle_exp": {
            "name": "_handle_exp",
            "location": 164,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "List[float]",
                    "List[Tuple[str, Any, Any]]",
                    "Iterable[int]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._make_bitvec_if_not": {
            "name": "_make_bitvec_if_not",
            "location": 190,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "stack": [
                    "str",
                    "List[util.Block]",
                    "util.XYZ",
                    "bool"
                ],
                "index": [
                    "str",
                    "List[util.Block]",
                    "util.XYZ",
                    "bool"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._get_description_head": {
            "name": "_get_description_head",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "annotation": [
                    "str",
                    "Optional[\"TypeResourceIdentifier\"]",
                    "Optional[str]"
                ],
                "_type": [
                    "str",
                    "Optional[\"TypeResourceIdentifier\"]",
                    "Optional[str]"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._get_description_tail": {
            "name": "_get_description_tail",
            "location": 202,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "annotation": [
                    "str"
                ],
                "_type": [
                    "str"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._get_title": {
            "name": "_get_title",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "_type": [
                    "str",
                    "int"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._handle_sstore": {
            "name": "_handle_sstore",
            "location": 221,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "state": [
                    "dict",
                    "raiden.transfer.state.ChainState",
                    "state.State",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._handle_jumpi": {
            "name": "_handle_jumpi",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "dict",
                    "raiden.transfer.state.ChainState",
                    "state.State",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._handle_call": {
            "name": "_handle_call",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "state.State"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._handle_return": {
            "name": "_handle_return",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "bytes",
                    "state.State"
                ]
            }
        },
        "IntegerOverflowUnderflowModule._handle_transaction_end": {
            "name": "_handle_transaction_end",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/multiple_sends.py": {
        "MultipleSendsAnnotation.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleSendsAnnotation.__copy__": {
            "name": "__copy__",
            "location": 21,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleSendsModule.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleSendsModule._execute": {
            "name": "_execute",
            "location": 47,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "MultipleSendsModule._analyze_state": {
            "name": "_analyze_state",
            "location": 56,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/state_change_external_calls.py": {
        "StateChangeCallsAnnotation.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call_state": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[Dict]",
                    "bool"
                ],
                "user_defined_address": [
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "StateChangeCallsAnnotation.__copy__": {
            "name": "__copy__",
            "location": 28,
            "return": [
                "Iterable[str]",
                "shapely.geometry.base.BaseGeometry",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateChangeCallsAnnotation.get_issue": {
            "name": "get_issue",
            "location": 35,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.smBitVec",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "str",
                    "raiden.transfer.mediated_transfer.state.MediatorTransferState"
                ]
            }
        },
        "StateChange.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StateChange._execute": {
            "name": "_execute",
            "location": 106,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "StateChange._add_external_call": {
            "name": "_add_external_call",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "StateChange._analyze_state": {
            "name": "_analyze_state",
            "location": 143,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "StateChange._balance_change": {
            "name": "_balance_change",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[Collection[str]]",
                    "Optional[bool]"
                ],
                "global_state": [
                    "str",
                    "bool",
                    "Optional[\"ShipmentState\"]",
                    "Optional[\"PaymentState\"]",
                    "Optional[\"OrderState\"]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/suicide.py": {
        "SuicideModule.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SuicideModule.reset_module": {
            "name": "reset_module",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SuicideModule._execute": {
            "name": "_execute",
            "location": 43,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "SuicideModule._analyze_state": {
            "name": "_analyze_state",
            "location": 57,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "List[str]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/unchecked_retval.py": {
        "UncheckedRetvalAnnotation.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UncheckedRetvalAnnotation.__copy__": {
            "name": "__copy__",
            "location": 25,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UncheckedRetvalModule.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UncheckedRetvalModule._execute": {
            "name": "_execute",
            "location": 52,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list",
                    "fakesmtpd.state.State"
                ]
            }
        },
        "UncheckedRetvalModule._analyze_state": {
            "name": "_analyze_state",
            "location": 65,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "list",
                    "raiden.transfer.state.ChainState",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/analysis/modules/__init__.py": {},
    "mythril-docker-master/mythril/disassembler/asm.py": {
        "instruction_list_to_easm": {
            "name": "instruction_list_to_easm",
            "location": 34,
            "return": [
                "List[str]",
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "instruction_list": [
                    "list",
                    "Iterator[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "get_opcode_from_name": {
            "name": "get_opcode_from_name",
            "location": 51,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "operation_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "find_op_code_sequence": {
            "name": "find_op_code_sequence",
            "location": 63,
            "return": [
                "collections.Generator"
            ],
            "arguments": {
                "pattern": [
                    "list",
                    "List[Union[int, float]]",
                    "List[T]",
                    "List[int]"
                ],
                "instruction_list": [
                    "list",
                    "List[Union[int, float]]",
                    "List[T]",
                    "List[int]"
                ]
            }
        },
        "is_sequence_match": {
            "name": "is_sequence_match",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "pattern": [
                    "list"
                ],
                "instruction_list": [
                    "list",
                    "Iterable[str]",
                    "List[Union[int, float]]",
                    "List[str]",
                    "int",
                    "List[Union[\"PipeChain\", str]]"
                ],
                "index": [
                    "int",
                    "T"
                ]
            }
        },
        "disassemble": {
            "name": "disassemble",
            "location": 93,
            "return": [
                "str",
                "Sequence[str]",
                "List[str]",
                "Tuple[float, float]",
                "Sequence[dict]",
                "list",
                "List[bytes]"
            ],
            "arguments": {
                "bytecode": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "EvmInstruction.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "bool",
                    "Sequence",
                    "int"
                ],
                "op_code": [
                    "int",
                    "float",
                    "str",
                    "List[int]"
                ],
                "argument": [
                    "str",
                    "bool",
                    "Sequence",
                    "int"
                ]
            }
        },
        "EvmInstruction.to_dict": {
            "name": "to_dict",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/disassembler/disassembly.py": {
        "get_function_info": {
            "name": "get_function_info",
            "location": 62,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "index": [
                    "List[str]",
                    "List[Dict[Any, str]]",
                    "Iterable[str]",
                    "List[List[Any]]",
                    "Dict[str, str]",
                    "int",
                    "Union[int, float]"
                ],
                "instruction_list": [
                    "List[str]",
                    "List[Dict[Any, str]]",
                    "Iterable[str]",
                    "List[List[Any]]",
                    "Dict[str, str]",
                    "int",
                    "Union[int, float]"
                ],
                "signature_database": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, str]",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Disassembly.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "float",
                    "dict"
                ],
                "enable_online_lookup": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Disassembly.assign_bytecode": {
            "name": "assign_bytecode",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bytecode": [
                    "str",
                    "Sequence[Any]"
                ]
            }
        },
        "Disassembly.get_easm": {
            "name": "get_easm",
            "location": 54,
            "return": [
                "dict",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/disassembler/__init__.py": {},
    "mythril-docker-master/mythril/ethereum/evmcontract.py": {
        "EVMContract.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bytes"
                ],
                "creation_code": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "enable_online_lookup": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "EVMContract.bytecode_hash": {
            "name": "bytecode_hash",
            "location": 44,
            "return": [
                "bool",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EVMContract.creation_bytecode_hash": {
            "name": "creation_bytecode_hash",
            "location": 52,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EVMContract.as_dict": {
            "name": "as_dict",
            "location": 59,
            "return": [
                "str",
                "Exception",
                "Dict[str, Any]",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EVMContract.get_easm": {
            "name": "get_easm",
            "location": 71,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EVMContract.get_creation_easm": {
            "name": "get_creation_easm",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EVMContract.matches_expression": {
            "name": "matches_expression",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/ethereum/util.py": {
        "safe_decode": {
            "name": "safe_decode",
            "location": 15,
            "return": [
                "str",
                "int",
                "raiden.utils.Any"
            ],
            "arguments": {
                "hex_encoded_string": [
                    "str",
                    "int",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "get_solc_json": {
            "name": "get_solc_json",
            "location": 27,
            "return": [
                "bool",
                "str",
                "List[str]",
                "List[Dict]"
            ],
            "arguments": {
                "file": [
                    "List[str]",
                    "bool",
                    "float",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "solc_binary": [
                    "bool",
                    "int",
                    "pathlib.Path",
                    "Optional[List[str]]"
                ],
                "solc_args": [
                    "bool",
                    "\"ByteSource\"",
                    "dict",
                    "Tuple[Optional[str], Optional[str]]",
                    "List[str]",
                    "List[pathlib.Path]",
                    "raiden.utils.List[str]"
                ]
            }
        },
        "encode_calldata": {
            "name": "encode_calldata",
            "location": 73,
            "return": [
                "Union[int, float]",
                "int",
                "str",
                "List[Tuple[int, float, float]]"
            ],
            "arguments": {
                "func_name": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "arg_types": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Type[T]"
                ],
                "args": []
            }
        },
        "get_random_address": {
            "name": "get_random_address",
            "location": 87,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Dict[str, Union[int, bool]]",
                "Set[str]"
            ],
            "arguments": {}
        },
        "get_indexed_address": {
            "name": "get_indexed_address",
            "location": 95,
            "return": [
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "index": [
                    "str",
                    "bool"
                ]
            }
        },
        "solc_exists": {
            "name": "solc_exists",
            "location": 104,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "version": [
                    "str",
                    "Optional[str]",
                    "os.PathLike",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/ethereum/__init__.py": {},
    "mythril-docker-master/mythril/ethereum/interface/__init__.py": {},
    "mythril-docker-master/mythril/ethereum/interface/leveldb/accountindexing.py": {
        "CountableList.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element_sedes": [
                    "dict",
                    "T",
                    "Container[T]"
                ]
            }
        },
        "CountableList.serialize": {
            "name": "serialize",
            "location": 32,
            "return": [
                "Set[str]",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float",
                    "int",
                    "List[str]",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "CountableList.deserialize": {
            "name": "deserialize",
            "location": 40,
            "return": [
                "Set[str]",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "serial": [
                    "float",
                    "int",
                    "List[str]",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "AccountIndexer.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ethDB": [
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "AccountIndexer.get_contract_by_hash": {
            "name": "get_contract_by_hash",
            "location": 79,
            "return": [
                "int",
                "str",
                "Tuple[eth.rlp.headers.BlockHeader]",
                "Tuple[bytes]"
            ],
            "arguments": {
                "self": [],
                "contract_hash": [
                    "str",
                    "int"
                ]
            }
        },
        "AccountIndexer._process": {
            "name": "_process",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "startblock": [
                    "int"
                ]
            }
        },
        "AccountIndexer.updateIfNeeded": {
            "name": "updateIfNeeded",
            "location": 111,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/ethereum/interface/leveldb/client.py": {
        "_format_block_number": {
            "name": "_format_block_number",
            "location": 36,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str",
                    "type",
                    "List[int]",
                    "List[bytes]",
                    "Iterable[float]"
                ]
            }
        },
        "_encode_hex": {
            "name": "_encode_hex",
            "location": 41,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "v": [
                    "str"
                ]
            }
        },
        "LevelDBReader.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]"
                ]
            }
        },
        "LevelDBReader._get_head_state": {
            "name": "_get_head_state",
            "location": 58,
            "return": [
                "str",
                "raiden.utils.BlockNumber",
                "raiden.utils.TokenAmount",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LevelDBReader._get_account": {
            "name": "_get_account",
            "location": 68,
            "return": [
                "bool",
                "Dict[str, str]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Optional[bytes]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                    "Sequence[str]",
                    "Dict[str, str]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "LevelDBReader._get_block_hash": {
            "name": "_get_block_hash",
            "location": 78,
            "return": [
                "dict",
                "str",
                "int",
                "bytes",
                "bool",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "Iterable[int]",
                    "Union[str, int]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "LevelDBReader._get_head_block": {
            "name": "_get_head_block",
            "location": 88,
            "return": [
                "str",
                "int",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LevelDBReader._get_block_number": {
            "name": "_get_block_number",
            "location": 108,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "bool",
                    "str"
                ]
            }
        },
        "LevelDBReader._get_block_header": {
            "name": "_get_block_header",
            "location": 117,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Dict[str, Any]]",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "Iterable[Hashable]",
                    "int",
                    "str",
                    "bool",
                    "Set[str]",
                    "Sequence[str]"
                ],
                "num": [
                    "Iterable[Hashable]",
                    "int",
                    "str",
                    "bool",
                    "Set[str]",
                    "Sequence[str]"
                ]
            }
        },
        "LevelDBReader._get_address_by_hash": {
            "name": "_get_address_by_hash",
            "location": 130,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "Iterable[Hashable]",
                    "Dict[str, Tuple[int, int]]",
                    "bool",
                    "list"
                ]
            }
        },
        "LevelDBReader._get_last_indexed_number": {
            "name": "_get_last_indexed_number",
            "location": 139,
            "return": [
                "str",
                "raiden.utils.Address",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LevelDBReader._get_block_receipts": {
            "name": "_get_block_receipts",
            "location": 146,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "block_hash": [
                    "int",
                    "float",
                    "str"
                ],
                "num": [
                    "int",
                    "Callable[[], Any]",
                    "float",
                    "bool",
                    "str",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "LevelDBWriter.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]"
                ]
            }
        },
        "LevelDBWriter._set_last_indexed_number": {
            "name": "_set_last_indexed_number",
            "location": 171,
            "return": [
                "bool",
                "Sequence[str]",
                "Optional[Dict[str, Any]]",
                "cmk.utils.type_defs.TagGroups"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "int",
                    "float",
                    "raiden.utils.BlockNumber",
                    "utils.CWLObjectType"
                ]
            }
        },
        "LevelDBWriter._start_writing": {
            "name": "_start_writing",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LevelDBWriter._commit_batch": {
            "name": "_commit_batch",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LevelDBWriter._store_account_address": {
            "name": "_store_account_address",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "address": [
                    "dict",
                    "List[int]",
                    "bytes",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "EthLevelDB.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "EthLevelDB.get_contracts": {
            "name": "get_contracts",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthLevelDB.search": {
            "name": "search",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "callback_func": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "EthLevelDB.contract_hash_to_address": {
            "name": "contract_hash_to_address",
            "location": 251,
            "return": [
                "bool",
                "str",
                "int",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "self": [],
                "contract_hash": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "bytes",
                    "Sequence[str]"
                ]
            }
        },
        "EthLevelDB.eth_getBlockHeaderByNumber": {
            "name": "eth_getBlockHeaderByNumber",
            "location": 263,
            "return": [
                "Type",
                "raiden.utils.BlockNumber",
                "bool",
                "Iterable[Union[dict, str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                    "bool"
                ]
            }
        },
        "EthLevelDB.eth_getBlockByNumber": {
            "name": "eth_getBlockByNumber",
            "location": 273,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "bool",
                    "raiden.transfer.state.NettingChannelState",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ]
            }
        },
        "EthLevelDB.eth_getCode": {
            "name": "eth_getCode",
            "location": 286,
            "return": [
                "int",
                "List[str]",
                "str",
                "Callable[[], None]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "EthLevelDB.eth_getBalance": {
            "name": "eth_getBalance",
            "location": 295,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "EthLevelDB.eth_getStorageAt": {
            "name": "eth_getStorageAt",
            "location": 304,
            "return": [
                "Callable",
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int"
                ],
                "position": [
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "bytes"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/ethereum/interface/leveldb/eth_db.py": {
        "ETH_DB.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Callable"
                ]
            }
        },
        "ETH_DB.get": {
            "name": "get",
            "location": 13,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "ETH_DB.put": {
            "name": "put",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "T"
                ],
                "value": [
                    "str",
                    "Optional[bytes]",
                    "T"
                ]
            }
        },
        "ETH_DB.write_batch": {
            "name": "write_batch",
            "location": 21,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/ethereum/interface/leveldb/state.py": {
        "Account.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nonce": [
                    "bool",
                    "int",
                    "str",
                    "Callable[[str], None]",
                    "Optional[int]"
                ],
                "balance": [
                    "bool",
                    "int",
                    "str",
                    "Callable[[str], None]",
                    "Optional[int]"
                ],
                "storage": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "float",
                    "bool"
                ],
                "code_hash": [
                    "bool",
                    "int",
                    "str",
                    "Callable[[str], None]",
                    "Optional[int]"
                ],
                "db": [
                    "str",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "raiden.utils.Callable",
                    "Exception",
                    "int"
                ],
                "addr": [
                    "str",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "raiden.utils.Callable",
                    "Exception",
                    "int"
                ]
            }
        },
        "Account.code": {
            "name": "code",
            "location": 82,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.get_storage_data": {
            "name": "get_storage_data",
            "location": 86,
            "return": [
                "str",
                "bytes",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "Account.blank_account": {
            "name": "blank_account",
            "location": 100,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "db": [
                    "str",
                    "raiden.utils.Address",
                    "Iterator[str]"
                ],
                "addr": [
                    "str"
                ],
                "initial_nonce": [
                    "str"
                ]
            }
        },
        "Account.is_blank": {
            "name": "is_blank",
            "location": 113,
            "return": [
                "int",
                "str",
                "IO[str]",
                "raiden.utils.TokenAmount",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "List[str]",
                    "int",
                    "list",
                    "Tuple[int, int]"
                ],
                "root": [
                    "str",
                    "List[str]",
                    "int",
                    "list",
                    "Tuple[int, int]"
                ]
            }
        },
        "State.get_and_cache_account": {
            "name": "get_and_cache_account",
            "location": 136,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "State.get_all_accounts": {
            "name": "get_all_accounts",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/ethereum/interface/leveldb/__init__.py": {},
    "mythril-docker-master/mythril/ethereum/interface/rpc/base_client.py": {
        "BaseClient._call": {
            "name": "_call",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "list",
                    "Dict[str, Any]",
                    "str"
                ],
                "params": [
                    "bool",
                    "list",
                    "Dict[str, Any]",
                    "str"
                ],
                "_id": [
                    "bool",
                    "list",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "BaseClient.eth_coinbase": {
            "name": "eth_coinbase",
            "location": 34,
            "return": [
                "str",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient.eth_blockNumber": {
            "name": "eth_blockNumber",
            "location": 43,
            "return": [
                "Dict[str, int]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseClient.eth_getBalance": {
            "name": "eth_getBalance",
            "location": 52,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "bool",
                    "Type[eth.abc.VirtualMachineAPI]",
                    "List[str]"
                ],
                "block": [
                    "List[\"Block\"]"
                ]
            }
        },
        "BaseClient.eth_getStorageAt": {
            "name": "eth_getStorageAt",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Optional[\"Address\"]",
                    "int"
                ],
                "position": [
                    "str",
                    "Optional[\"Address\"]",
                    "int"
                ],
                "block": [
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "BaseClient.eth_getCode": {
            "name": "eth_getCode",
            "location": 73,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.ChannelID",
                    "str",
                    "raiden.utils.Nonce",
                    "raiden.utils.Signature",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.BalanceHash"
                ],
                "default_block": [
                    "Optional[List[str]]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "BaseClient.eth_getBlockByNumber": {
            "name": "eth_getBlockByNumber",
            "location": 85,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "Exception"
                ],
                "tx_objects": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "BaseClient.eth_getTransactionReceipt": {
            "name": "eth_getTransactionReceipt",
            "location": 95,
            "return": [
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "tx_hash": [
                    "str",
                    "Callable",
                    "type"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/ethereum/interface/rpc/client.py": {
        "EthJsonRpc.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "port": [
                    "int",
                    "bool",
                    "float"
                ],
                "tls": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EthJsonRpc._call": {
            "name": "_call",
            "location": 46,
            "return": [
                "str",
                "List[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[int, Any]"
                ],
                "params": [
                    "List[str]",
                    "Dict[str, Any]",
                    "int",
                    "Iterable[str]",
                    "Iterable[int]",
                    "dict"
                ],
                "_id": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[int, Any]"
                ]
            }
        },
        "EthJsonRpc.close": {
            "name": "close",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/ethereum/interface/rpc/constants.py": {},
    "mythril-docker-master/mythril/ethereum/interface/rpc/exceptions.py": {},
    "mythril-docker-master/mythril/ethereum/interface/rpc/utils.py": {
        "hex_to_dec": {
            "name": "hex_to_dec",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "float",
                    "T"
                ]
            }
        },
        "clean_hex": {
            "name": "clean_hex",
            "location": 15,
            "return": [
                "int",
                "str",
                "dict",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Type[object]",
                    "int"
                ]
            }
        },
        "validate_block": {
            "name": "validate_block",
            "location": 25,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "block": [
                    "List[\"Block\"]"
                ]
            }
        },
        "wei_to_ether": {
            "name": "wei_to_ether",
            "location": 39,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "wei": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "ether_to_wei": {
            "name": "ether_to_wei",
            "location": 48,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "ether": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/ethereum/interface/rpc/__init__.py": {},
    "mythril-docker-master/mythril/interfaces/cli.py": {
        "exit_with_error": {
            "name": "exit_with_error",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "format_": [
                    "str",
                    "Optional[str]",
                    "int",
                    "set"
                ],
                "message": [
                    "str",
                    "logging.Logger",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "get_input_parser": {
            "name": "get_input_parser",
            "location": 73,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "get_output_parser": {
            "name": "get_output_parser",
            "location": 106,
            "return": [
                "argparse._SubParsersAction",
                "argparse.ArgumentParser",
                "argparse._MutuallyExclusiveGroup"
            ],
            "arguments": {}
        },
        "get_rpc_parser": {
            "name": "get_rpc_parser",
            "location": 123,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "get_utilities_parser": {
            "name": "get_utilities_parser",
            "location": 141,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_disassemble_parser": {
            "name": "create_disassemble_parser",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser",
                    "bool"
                ]
            }
        },
        "create_read_storage_parser": {
            "name": "create_read_storage_parser",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "read_storage_parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "create_leveldb_parser": {
            "name": "create_leveldb_parser",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser",
                    "ArgumentParser"
                ]
            }
        },
        "create_func_to_hash_parser": {
            "name": "create_func_to_hash_parser",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser",
                    "bool"
                ]
            }
        },
        "create_hash_to_addr_parser": {
            "name": "create_hash_to_addr_parser",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "hash_parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "create_analyzer_parser": {
            "name": "create_analyzer_parser",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "analyzer_parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "validate_args": {
            "name": "validate_args",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "set_config": {
            "name": "set_config",
            "location": 458,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": []
            }
        },
        "leveldb_search": {
            "name": "leveldb_search",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "logging.Logger",
                    "Optional[Dict]",
                    "dict"
                ],
                "args": []
            }
        },
        "load_code": {
            "name": "load_code",
            "location": 507,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "disassembler": [
                    "str",
                    "Optional['cirq.SingleQubitGate']",
                    "mythril.mythril.MythrilDisassembler",
                    "bool",
                    "Tuple[str]"
                ],
                "args": []
            }
        },
        "execute_command": {
            "name": "execute_command",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "disassembler": [
                    "str",
                    "mythril.mythril.MythrilDisassembler"
                ],
                "address": [],
                "parser": [
                    "str",
                    "argparse.ArgumentParser",
                    "Optional[Callable[[Dict], Any]]"
                ],
                "args": []
            }
        },
        "contract_hash_to_address": {
            "name": "contract_hash_to_address",
            "location": 651,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "parse_args_and_execute": {
            "name": "parse_args_and_execute",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "args": []
            }
        }
    },
    "mythril-docker-master/mythril/interfaces/epic.py": {
        "reset": {
            "name": "reset",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "detect_mode": {
            "name": "detect_mode",
            "location": 193,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "term_hint": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "LolCat.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "dict",
                    "Dict[str, Union[str, Any]]",
                    "Set[Tuple[str, str]]",
                    "bool",
                    "List[Callable]"
                ],
                "output": [
                    "str",
                    "dict",
                    "Dict[str, Union[str, Any]]",
                    "Set[Tuple[str, str]]",
                    "bool",
                    "List[Callable]"
                ]
            }
        },
        "LolCat._distance": {
            "name": "_distance",
            "location": 60,
            "return": [
                "str",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": [],
                "rgb1": [
                    "bool",
                    "List[str]",
                    "List[Dict]",
                    "str"
                ],
                "rgb2": [
                    "bool",
                    "List[str]",
                    "List[Dict]",
                    "str"
                ]
            }
        },
        "LolCat.ansi": {
            "name": "ansi",
            "location": 63,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "rgb": [
                    "Callable[..., Awaitable[Any]]",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "LolCat.wrap": {
            "name": "wrap",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LolCat.rainbow": {
            "name": "rainbow",
            "location": 112,
            "return": [
                "List[str]",
                "Tuple[str, int, str]",
                "Type",
                "Type[Any]",
                "float",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "freq": [
                    "bool",
                    "list",
                    "int",
                    "Mapping[str, int]"
                ],
                "i": [
                    "bool",
                    "list",
                    "int",
                    "Mapping[str, int]"
                ]
            }
        },
        "LolCat.cat": {
            "name": "cat",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fd": [
                    "str",
                    "bool",
                    "list"
                ],
                "options": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "LolCat.println": {
            "name": "println",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Collection[int]",
                    "str"
                ],
                "options": [
                    "Mapping[str, str]",
                    "str",
                    "Union[str, Pattern[str]]"
                ]
            }
        },
        "LolCat.println_ani": {
            "name": "println_ani",
            "location": 158,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int",
                    "Union[str, bytes]"
                ],
                "options": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Container[str]]",
                    "Mapping[str, str]"
                ]
            }
        },
        "LolCat.println_plain": {
            "name": "println_plain",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Dict[str, int]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "options": [
                    "str",
                    "Optional[str]",
                    "List['PydanticModelField']",
                    "List[str]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/interfaces/old_cli.py": {
        "exit_with_error": {
            "name": "exit_with_error",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "format_": [
                    "str",
                    "Optional[str]",
                    "int",
                    "set"
                ],
                "message": [
                    "str",
                    "logging.Logger",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_parser": {
            "name": "create_parser",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "validate_args": {
            "name": "validate_args",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser",
                    "str",
                    "Optional[Callable[[Dict], Any]]"
                ],
                "args": []
            }
        },
        "quick_commands": {
            "name": "quick_commands",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "set_config": {
            "name": "set_config",
            "location": 331,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": []
            }
        },
        "leveldb_search": {
            "name": "leveldb_search",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "logging.Logger",
                    "Optional[Dict]",
                    "dict"
                ],
                "args": []
            }
        },
        "get_code": {
            "name": "get_code",
            "location": 364,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "disassembler": [
                    "str",
                    "Callable",
                    "Optional['cirq.SingleQubitGate']"
                ],
                "args": []
            }
        },
        "execute_command": {
            "name": "execute_command",
            "location": 395,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "disassembler": [
                    "Optional[\"Game\"]",
                    "str"
                ],
                "address": [
                    "Mapping[str, Any]",
                    "Optional[int]"
                ],
                "parser": [
                    "str",
                    "argparse.ArgumentParser",
                    "Optional[Callable[[Dict], Any]]"
                ],
                "args": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ],
                "args": []
            }
        }
    },
    "mythril-docker-master/mythril/interfaces/__init__.py": {},
    "mythril-docker-master/mythril/laser/__init__.py": {},
    "mythril-docker-master/mythril/laser/ethereum/call.py": {
        "get_call_parameters": {
            "name": "get_call_parameters",
            "location": 32,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "global_state": [
                    "int",
                    "bytes"
                ],
                "dynamic_loader": [],
                "with_value": [
                    "bool",
                    "dict",
                    "Dict[str, int]",
                    "Optional[Dict]",
                    "Optional[dict]",
                    "List[Tuple[str, str]]",
                    "Dict[int, List[str]]"
                ]
            }
        },
        "get_callee_address": {
            "name": "get_callee_address",
            "location": 73,
            "return": [
                "int",
                "str",
                "dict",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
            ],
            "arguments": {
                "global_state": [
                    "int"
                ],
                "dynamic_loader": [],
                "symbolic_to_address": [
                    "dict",
                    "str"
                ]
            }
        },
        "get_callee_account": {
            "name": "get_callee_account",
            "location": 117,
            "return": [
                "int",
                "Dict[str, str]",
                "Exception",
                "bool",
                "Dict[str, Any]",
                "recidiviz.persistence.entity.state.entities.StatePerson"
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.NettingChannelState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ],
                "callee_address": [
                    "raiden.transfer.state.ChainState"
                ],
                "dynamic_loader": [
                    "Sequence[str]",
                    "Iterable[Callable]",
                    "Callable"
                ]
            }
        },
        "get_call_data": {
            "name": "get_call_data",
            "location": 168,
            "return": [
                "str",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "dict"
            ],
            "arguments": {
                "global_state": [
                    "int",
                    "bool",
                    "raiden.utils.List[raiden.transfer.state.RouteState]",
                    "Set[int]"
                ],
                "memory_start": [
                    "int",
                    "Optional[int]"
                ],
                "memory_size": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]",
                    "Union[int, float]"
                ]
            }
        },
        "native_call": {
            "name": "native_call",
            "location": 221,
            "return": [
                "type"
            ],
            "arguments": {
                "global_state": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[bool]"
                ],
                "callee_address": [
                    "int",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "call_data": [
                    "int",
                    "raiden.transfer.state.HashTimeLockState"
                ],
                "memory_out_offset": [
                    "str",
                    "bytes",
                    "bool",
                    "Dict[str, str]",
                    "List[str]",
                    "Tuple[int, int]",
                    "int"
                ],
                "memory_out_size": [
                    "float",
                    "bool"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/cfg.py": {
        "NodeFlags.__or__": {
            "name": "__or__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "start_addr": [
                    "str",
                    "Optional[str]",
                    "int",
                    "list",
                    "bool",
                    "Union[str, List[str]]"
                ],
                "constraints": [
                    "int",
                    "List[str]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Callable"
                ],
                "function_name": [
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "Node.get_cfg_dict": {
            "name": "get_cfg_dict",
            "location": 63,
            "return": [
                "List[str]",
                "bool",
                "str",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edge.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_from": [
                    "bool"
                ],
                "node_to": [
                    "bool"
                ],
                "edge_type": [
                    "str",
                    "bool"
                ],
                "condition": [
                    "bool"
                ]
            }
        },
        "Edge.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edge.as_dict": {
            "name": "as_dict",
            "location": 116,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/evm_exceptions.py": {},
    "mythril-docker-master/mythril/laser/ethereum/gas.py": {
        "calculate_native_gas": {
            "name": "calculate_native_gas",
            "location": 8,
            "return": [
                "int",
                "bool",
                "tuple"
            ],
            "arguments": {
                "size": [
                    "int",
                    "tuple",
                    "float",
                    "Tuple[float, float]"
                ],
                "contract": [
                    "str",
                    "int",
                    "raiden.utils.BlockExpiration"
                ]
            }
        },
        "calculate_sha3_gas": {
            "name": "calculate_sha3_gas",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/instructions.py": {
        "transfer_ether": {
            "name": "transfer_ether",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "mythril.laser.smBitVec",
                    "Optional[\"PaymentState\"]",
                    "int"
                ],
                "sender": [
                    "mythril.laser.smBitVec",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Optional[\"PaymentState\"]",
                    "int"
                ],
                "receiver": [
                    "mythril.laser.smBitVec",
                    "int",
                    "raiden.utils.BlockNumber",
                    "raiden.transfer.state.NettingChannelState",
                    "raiden.utils.Address",
                    "raiden.transfer.state.ChainState"
                ],
                "value": []
            }
        },
        "StateTransition.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "increment_pc": [
                    "int",
                    "bool",
                    "float"
                ],
                "enable_gas": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StateTransition.call_on_state_copy": {
            "name": "call_on_state_copy",
            "location": 101,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Iterator"
                ],
                "func_obj": [
                    "Callable",
                    "Iterator"
                ],
                "state": [
                    "List[mythril.laser.ethereum.state.global_state.GlobalState]",
                    "str",
                    "Callable",
                    "Union[int, Type[Exception]]"
                ]
            }
        },
        "StateTransition.increment_states_pc": {
            "name": "increment_states_pc",
            "location": 112,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "states": [
                    "Dict[str, str]",
                    "List[mythril.laser.ethereum.state.global_state.GlobalState]",
                    "raiden.utils.List[str]",
                    "int"
                ]
            }
        },
        "StateTransition.check_gas_usage_limit": {
            "name": "check_gas_usage_limit",
            "location": 124,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "StateTransition.accumulate_gas": {
            "name": "accumulate_gas",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "StateTransition.__call__": {
            "name": "__call__",
            "location": 158,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable"
                ]
            }
        },
        "Instruction.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op_code": [
                    "int"
                ],
                "dynamic_loader": [
                    "str",
                    "int",
                    "Dict[Tuple[str, str], int]"
                ],
                "iprof": [
                    "str",
                    "int",
                    "Dict[Tuple[str, str], int]"
                ]
            }
        },
        "Instruction.evaluate": {
            "name": "evaluate",
            "location": 192,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "raiden.transfer.state.ChainState",
                    "Callable",
                    "raiden.transfer.mediated_transfer.state.LockedTransferSignedState",
                    "raiden.utils.ChannelMap"
                ],
                "post": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Instruction.jumpdest_": {
            "name": "jumpdest_",
            "location": 231,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "dict",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.push_": {
            "name": "push_",
            "location": 240,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.dup_": {
            "name": "dup_",
            "location": 261,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        },
        "Instruction.swap_": {
            "name": "swap_",
            "location": 272,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.pop_": {
            "name": "pop_",
            "location": 284,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "T"
                ]
            }
        },
        "Instruction.and_": {
            "name": "and_",
            "location": 294,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.or_": {
            "name": "or_",
            "location": 319,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.xor_": {
            "name": "xor_",
            "location": 343,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.not_": {
            "name": "not_",
            "location": 354,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.byte_": {
            "name": "byte_",
            "location": 365,
            "return": [
                "int",
                "bool",
                "str",
                "float",
                "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "str"
                ]
            }
        },
        "Instruction.add_": {
            "name": "add_",
            "location": 398,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.sub_": {
            "name": "sub_",
            "location": 413,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.mul_": {
            "name": "mul_",
            "location": 428,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.div_": {
            "name": "div_",
            "location": 444,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ]
            }
        },
        "Instruction.sdiv_": {
            "name": "sdiv_",
            "location": 461,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.mod_": {
            "name": "mod_",
            "location": 478,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.shl_": {
            "name": "shl_",
            "location": 492,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.shr_": {
            "name": "shr_",
            "location": 501,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.sar_": {
            "name": "sar_",
            "location": 510,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.smod_": {
            "name": "smod_",
            "location": 519,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.addmod_": {
            "name": "addmod_",
            "location": 533,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.mulmod_": {
            "name": "mulmod_",
            "location": 548,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.exp_": {
            "name": "exp_",
            "location": 563,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.signextend_": {
            "name": "signextend_",
            "location": 598,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.lt_": {
            "name": "lt_",
            "location": 626,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.gt_": {
            "name": "gt_",
            "location": 638,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.slt_": {
            "name": "slt_",
            "location": 651,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.sgt_": {
            "name": "sgt_",
            "location": 663,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.eq_": {
            "name": "eq_",
            "location": 676,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.iszero_": {
            "name": "iszero_",
            "location": 703,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.callvalue_": {
            "name": "callvalue_",
            "location": 723,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.calldataload_": {
            "name": "calldataload_",
            "location": 736,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.calldatasize_": {
            "name": "calldatasize_",
            "location": 753,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.calldatacopy_": {
            "name": "calldatacopy_",
            "location": 765,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.address_": {
            "name": "address_",
            "location": 844,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.balance_": {
            "name": "balance_",
            "location": 856,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "raiden.transfer.state.NettingChannelState"
                ]
            }
        },
        "Instruction.origin_": {
            "name": "origin_",
            "location": 872,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.caller_": {
            "name": "caller_",
            "location": 884,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.codesize_": {
            "name": "codesize_",
            "location": 896,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "Instruction.sha3_": {
            "name": "sha3_",
            "location": 909,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "str",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ]
            }
        },
        "Instruction.gasprice_": {
            "name": "gasprice_",
            "location": 980,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction._handle_symbolic_args": {
            "name": "_handle_symbolic_args",
            "location": 990,
            "return": [
                "None"
            ],
            "arguments": {
                "global_state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "concrete_memory_offset": [
                    "int",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.codecopy_": {
            "name": "codecopy_",
            "location": 1018,
            "return": [
                "str",
                "bool",
                "MutableMapping[str, Any]",
                "Dict[str, str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.extcodesize_": {
            "name": "extcodesize_",
            "location": 1039,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction._code_copy_helper": {
            "name": "_code_copy_helper",
            "location": 1067,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Callable"
            ],
            "arguments": {
                "code": [
                    "bool",
                    "List[str]",
                    "int",
                    "static_frame.core.util.GetItemKeyType",
                    "List[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "memory_offset": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "code_offset": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ],
                "size": [
                    "int",
                    "str",
                    "raiden.utils.Secret",
                    "float"
                ],
                "op": [
                    "str",
                    "int",
                    "bool"
                ],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.utils.BlockIdentifier",
                    "static_frame.core.util.IndexConstructor",
                    "raiden.utils.ChannelID",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Instruction.extcodecopy_": {
            "name": "extcodecopy_",
            "location": 1147,
            "return": [
                "dict",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "str",
                    "prefecengine.state.State",
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "Instruction.extcodehash_": {
            "name": "extcodehash_",
            "location": 1184,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.returndatacopy_": {
            "name": "returndatacopy_",
            "location": 1198,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ]
            }
        },
        "Instruction.returndatasize_": {
            "name": "returndatasize_",
            "location": 1243,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.blockhash_": {
            "name": "blockhash_",
            "location": 1262,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.coinbase_": {
            "name": "coinbase_",
            "location": 1276,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.timestamp_": {
            "name": "timestamp_",
            "location": 1286,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.number_": {
            "name": "number_",
            "location": 1296,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.difficulty_": {
            "name": "difficulty_",
            "location": 1306,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.gaslimit_": {
            "name": "gaslimit_",
            "location": 1318,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.mload_": {
            "name": "mload_",
            "location": 1329,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.mstore_": {
            "name": "mstore_",
            "location": 1345,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.mstore8_": {
            "name": "mstore8_",
            "location": 1364,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.sload_": {
            "name": "sload_",
            "location": 1387,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.sstore_": {
            "name": "sstore_",
            "location": 1400,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.jump_": {
            "name": "jump_",
            "location": 1412,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ]
            }
        },
        "Instruction.jumpi_": {
            "name": "jumpi_",
            "location": 1451,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.pc_": {
            "name": "pc_",
            "location": 1531,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "int"
                ]
            }
        },
        "Instruction.msize_": {
            "name": "msize_",
            "location": 1546,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.gas_": {
            "name": "gas_",
            "location": 1556,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.log_": {
            "name": "log_",
            "location": 1567,
            "return": [
                "object",
                "str",
                "Dict[str, Any]",
                "raiden.transfer.mediated_transfer.state.LockedTransferSignedState",
                "bool"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.create_": {
            "name": "create_",
            "location": 1582,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "Dict[str, float]",
                    "raiden.transfer.state.NettingChannelEndState"
                ]
            }
        },
        "Instruction.create2_": {
            "name": "create2_",
            "location": 1596,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "Dict[str, float]",
                    "raiden.transfer.state.NettingChannelEndState"
                ]
            }
        },
        "Instruction.return_": {
            "name": "return_",
            "location": 1615,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "prefecengine.state.State",
                    "\"prefecengine.state.State\"",
                    "raiden.utils.List[raiden.transfer.state.RouteState]",
                    "raiden.transfer.state.RouteState"
                ]
            }
        },
        "Instruction.suicide_": {
            "name": "suicide_",
            "location": 1632,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "int"
                ]
            }
        },
        "Instruction.revert_": {
            "name": "revert_",
            "location": 1655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "prefecengine.state.State",
                    "\"prefecengine.state.State\"",
                    "List[raiden.utils.TokenNetworkAddress]"
                ]
            }
        },
        "Instruction.assert_fail_": {
            "name": "assert_fail_",
            "location": 1674,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "dict",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.invalid_": {
            "name": "invalid_",
            "location": 1683,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "dict",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "Instruction.stop_": {
            "name": "stop_",
            "location": 1691,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState",
                    "Optional[Tuple[int, ...]]"
                ]
            }
        },
        "Instruction.call_": {
            "name": "call_",
            "location": 1699,
            "return": [],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "int",
                    "prefecengine.state.State"
                ]
            }
        },
        "Instruction.call_post": {
            "name": "call_post",
            "location": 1754,
            "return": [
                "int",
                "Optional[dict]",
                "str",
                "agent_based_api.v1.state"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "prefecengine.state.State",
                    "int"
                ]
            }
        },
        "Instruction.callcode_": {
            "name": "callcode_",
            "location": 1821,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "int",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.BalanceProofSignedState",
                    "Union[raiden.transfer.state.BalanceProofSignedState, raiden.transfer.state.BalanceProofUnsignedState]"
                ]
            }
        },
        "Instruction.callcode_post": {
            "name": "callcode_post",
            "location": 1871,
            "return": [
                "int",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "raiden.transfer.state.ChainState",
                    "int",
                    "Optional[dict]"
                ]
            }
        },
        "Instruction.delegatecall_": {
            "name": "delegatecall_",
            "location": 1936,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "int",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.BalanceProofSignedState",
                    "Union[raiden.transfer.state.BalanceProofSignedState, raiden.transfer.state.BalanceProofUnsignedState]"
                ]
            }
        },
        "Instruction.delegatecall_post": {
            "name": "delegatecall_post",
            "location": 1986,
            "return": [
                "int",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "raiden.transfer.state.ChainState",
                    "int",
                    "Optional[dict]"
                ]
            }
        },
        "Instruction.staticcall_": {
            "name": "staticcall_",
            "location": 2050,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "StateTransition.__call__.wrapper": {
            "name": "wrapper",
            "location": 159,
            "return": [
                "Callable",
                "int",
                "Optional[List[int]]",
                "bool",
                "float"
            ],
            "arguments": {
                "func_obj": [
                    "prefecengine.state.State",
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ],
                "global_state": [
                    "prefecengine.state.State",
                    "Callable",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/iprof.py": {
        "InstructionProfiler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionProfiler.record": {
            "name": "record",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "op": [
                    "datetime.datetime",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[datetime.datetime]"
                ],
                "start_time": [
                    "datetime.datetime",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[datetime.datetime]"
                ],
                "end_time": [
                    "datetime.datetime",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "InstructionProfiler._make_stats": {
            "name": "_make_stats",
            "location": 39,
            "return": [
                "int",
                "List[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionProfiler.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/natives.py": {
        "ecrecover": {
            "name": "ecrecover",
            "location": 33,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "sha256": {
            "name": "sha256",
            "location": 60,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "list",
                "List[List[Any]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "List[int]",
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "ripemd160": {
            "name": "ripemd160",
            "location": 73,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "list",
                "Union[List, Tuple]",
                "Optional[List[str]]",
                "tuple"
            ],
            "arguments": {
                "data": [
                    "List[int]",
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 88,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "mod_exp": {
            "name": "mod_exp",
            "location": 102,
            "return": [
                "float",
                "int",
                "list",
                "str",
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "ec_add": {
            "name": "ec_add",
            "location": 136,
            "return": [
                "int",
                "List[str]",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "ec_mul": {
            "name": "ec_mul",
            "location": 150,
            "return": [
                "Dict[str, List[str]]",
                "Dict[str, int]",
                "int",
                "Dict[str, Any]",
                "tuple",
                "Mapping[Any, Any]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "ec_pair": {
            "name": "ec_pair",
            "location": 162,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "Iterable[bytes]",
                    "dict"
                ]
            }
        },
        "native_contracts": {
            "name": "native_contracts",
            "location": 210,
            "return": [
                "List[str]",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "address": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[Exception]"
                ],
                "data": [
                    "float",
                    "dict"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/svm.py": {
        "LaserEVM.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic_loader": [
                    "str",
                    "bytes",
                    "TextIO",
                    "bool",
                    "IO[str]"
                ],
                "max_depth": [
                    "int",
                    "List[int]",
                    "Optional[int]"
                ],
                "execution_timeout": [
                    "bytes",
                    "str",
                    "bool"
                ],
                "create_timeout": [
                    "bool",
                    "int",
                    "float"
                ],
                "strategy": [
                    "int",
                    "List[int]",
                    "bool"
                ],
                "transaction_count": [
                    "int",
                    "float",
                    "list",
                    "Mapping[str, Any]"
                ],
                "requires_statespace": [
                    "bool",
                    "Exception",
                    "str",
                    "Optional[int]"
                ],
                "enable_iprof": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "enable_coverage_strategy": [
                    "bool",
                    "float",
                    "Optional[str]"
                ],
                "instruction_laser_plugin": [
                    "bool",
                    "Exception",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "LaserEVM.extend_strategy": {
            "name": "extend_strategy",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extension": [
                    "str",
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "LaserEVM.sym_exec": {
            "name": "sym_exec",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world_state": [
                    "mythril.laser.ethereum.state.world_state.WorldState",
                    "int"
                ],
                "target_address": [
                    "str",
                    "Optional[str]"
                ],
                "creation_code": [
                    "Optional[str]",
                    "Optional[int]",
                    "Collection[int]",
                    "bytes",
                    "bool"
                ],
                "contract_name": [
                    "Optional[str]",
                    "Optional[int]",
                    "Collection[int]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "LaserEVM._execute_transactions": {
            "name": "_execute_transactions",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ]
            }
        },
        "LaserEVM.exec": {
            "name": "exec",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "Optional[str]",
                    "bytes",
                    "Optional[Callable]"
                ],
                "track_gas": [
                    "Optional[int]"
                ]
            }
        },
        "LaserEVM._add_world_state": {
            "name": "_add_world_state",
            "location": 258,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "LaserEVM.execute_state": {
            "name": "execute_state",
            "location": 269,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "prefecengine.state.State"
                ]
            }
        },
        "LaserEVM._end_message_call": {
            "name": "_end_message_call",
            "location": 363,
            "return": [
                "node.Node",
                "int"
            ],
            "arguments": {
                "self": [],
                "return_global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "int",
                    "prefecengine.state.State",
                    "bool"
                ],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "int",
                    "Optional[int]",
                    "prefecengine.state.State",
                    "bool"
                ],
                "revert_changes": [
                    "bool",
                    "str",
                    "List[int]",
                    "List[str]"
                ],
                "return_data": [
                    "int",
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "LaserEVM.manage_cfg": {
            "name": "manage_cfg",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opcode": [
                    "str",
                    "int",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "Set[int]"
                ],
                "new_states": [
                    "List[mythril.laser.ethereum.state.global_state.GlobalState]",
                    "dict",
                    "prefecengine.state.State",
                    "List[str]"
                ]
            }
        },
        "LaserEVM._new_node_state": {
            "name": "_new_node_state",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int"
                ],
                "edge_type": [
                    "str",
                    "list",
                    "dcos_e2e.node.Node"
                ],
                "condition": [
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Tuple[type]",
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "LaserEVM.register_hooks": {
            "name": "register_hooks",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hook_type": [
                    "str"
                ],
                "hook_dict": [
                    "Dict[str, List[Callable]]",
                    "Set[str]",
                    "Dict[str, str]",
                    "str",
                    "List['PydanticModelField']"
                ]
            }
        },
        "LaserEVM.register_laser_hooks": {
            "name": "register_laser_hooks",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hook_type": [
                    "str"
                ],
                "hook": [
                    "Mapping[str, int]",
                    "list",
                    "List[object]",
                    "dict",
                    "int"
                ]
            }
        },
        "LaserEVM.laser_hook": {
            "name": "laser_hook",
            "location": 527,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hook_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "LaserEVM._execute_pre_hook": {
            "name": "_execute_pre_hook",
            "location": 544,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "op_code": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LaserEVM._execute_post_hook": {
            "name": "_execute_post_hook",
            "location": 556,
            "return": [
                "T",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "op_code": [
                    "int",
                    "str",
                    "bool"
                ],
                "global_states": [
                    "List[mythril.laser.ethereum.state.global_state.GlobalState]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "LaserEVM.pre_hook": {
            "name": "pre_hook",
            "location": 575,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "op_code": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "LaserEVM.post_hook": {
            "name": "post_hook",
            "location": 595,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "op_code": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "LaserEVM.laser_hook.hook_decorator": {
            "name": "hook_decorator",
            "location": 534,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "LaserEVM.pre_hook.hook_decorator": {
            "name": "hook_decorator",
            "location": 582,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "LaserEVM.post_hook.hook_decorator": {
            "name": "hook_decorator",
            "location": 602,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "List[deque]",
                    "Iterable"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/time_handler.py": {
        "TimeHandler.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeHandler.start_execution": {
            "name": "start_execution",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "execution_time": [
                    "str",
                    "int",
                    "float",
                    "Callable[[], None]"
                ]
            }
        },
        "TimeHandler.time_remaining": {
            "name": "time_remaining",
            "location": 14,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/util.py": {
        "safe_decode": {
            "name": "safe_decode",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "hex_encoded_string": [
                    "str",
                    "int",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "to_signed": {
            "name": "to_signed",
            "location": 28,
            "return": [
                "int",
                "str",
                "Optional[int]",
                "Dict[int, int]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str",
                    "Union[int, bool]",
                    "float"
                ]
            }
        },
        "get_instruction_index": {
            "name": "get_instruction_index",
            "location": 37,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "instruction_list": [
                    "list",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]",
                    "List[int]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[List[str]]"
                ],
                "address": [
                    "int",
                    "slice"
                ]
            }
        },
        "get_trace_line": {
            "name": "get_trace_line",
            "location": 54,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "instr": [
                    "dict",
                    "raiden.transfer.state.ChainState",
                    "str"
                ],
                "state": [
                    "str",
                    "T",
                    "Mapping[str, Any]",
                    "Union[int, str]"
                ]
            }
        },
        "pop_bitvec": {
            "name": "pop_bitvec",
            "location": 67,
            "return": [
                "str",
                "Optional[str]",
                "Optional[T]",
                "list",
                "Optional[bool]"
            ],
            "arguments": {
                "state": [
                    "int",
                    "pyshgp.push.state.PushState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "get_concrete_int": {
            "name": "get_concrete_int",
            "location": 91,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "item": [
                    "Union[int, mythril.laser.smExpression]",
                    "Iterable[T]",
                    "T",
                    "mythril.laser.smbitvec.BitVec",
                    "List[T]",
                    "Dict[str, Any]",
                    "mythril.laser.smBitVec"
                ]
            }
        },
        "concrete_int_from_bytes": {
            "name": "concrete_int_from_bytes",
            "location": 112,
            "return": [
                "Dict[str, Any]",
                "bool",
                "dict",
                "Dict[str, Set[str]]",
                "int"
            ],
            "arguments": {
                "concrete_bytes": [
                    "int",
                    "str",
                    "bytes"
                ],
                "start_index": [
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "concrete_int_to_bytes": {
            "name": "concrete_int_to_bytes",
            "location": 131,
            "return": [
                "int",
                "dict",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "val": [
                    "bytes",
                    "str"
                ]
            }
        },
        "bytearray_to_int": {
            "name": "bytearray_to_int",
            "location": 143,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "extract_copy": {
            "name": "extract_copy",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytearray",
                    "float"
                ],
                "mem": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "List[float]",
                    "list"
                ],
                "memstart": [
                    "int",
                    "bytearray",
                    "List[int]",
                    "List[float]",
                    "list"
                ],
                "datastart": [
                    "int",
                    "bytearray",
                    "float"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "bool",
                    "float"
                ]
            }
        },
        "extract32": {
            "name": "extract32",
            "location": 165,
            "return": [],
            "arguments": {
                "data": [
                    "int",
                    "bytearray",
                    "Sized",
                    "Union[bytes, bytearray, memoryview]",
                    "bytes"
                ],
                "i": [
                    "int",
                    "bytearray",
                    "Sized",
                    "Union[bytes, bytearray, memoryview]",
                    "bytes"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/__init__.py": {},
    "mythril-docker-master/mythril/laser/ethereum/plugins/plugin.py": {
        "LaserPlugin.initialize": {
            "name": "initialize",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbolic_vm": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/plugins/plugin_factory.py": {
        "PluginFactory.build_benchmark_plugin": {
            "name": "build_benchmark_plugin",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "PluginFactory.build_mutation_pruner_plugin": {
            "name": "build_mutation_pruner_plugin",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "PluginFactory.build_instruction_coverage_plugin": {
            "name": "build_instruction_coverage_plugin",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "PluginFactory.build_dependency_pruner_plugin": {
            "name": "build_dependency_pruner_plugin",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/plugins/plugin_loader.py": {
        "LaserPluginLoader.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbolic_vm": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LaserPluginLoader.load": {
            "name": "load",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "laser_plugin": [
                    "str",
                    "bool",
                    "int",
                    "Callable[[str], None]",
                    "logging.Logger"
                ]
            }
        },
        "LaserPluginLoader.is_enabled": {
            "name": "is_enabled",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "laser_plugin": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/plugins/signals.py": {},
    "mythril-docker-master/mythril/laser/ethereum/plugins/__init__.py": {},
    "mythril-docker-master/mythril/laser/ethereum/plugins/implementations/benchmark.py": {
        "BenchmarkPlugin.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "BenchmarkPlugin.initialize": {
            "name": "initialize",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbolic_vm": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BenchmarkPlugin._reset": {
            "name": "_reset",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkPlugin._store_report": {
            "name": "_store_report",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkPlugin._write_to_graph": {
            "name": "_write_to_graph",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkPlugin.initialize.execute_state_hook": {
            "name": "execute_state_hook",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool",
                    "Iterator[Tuple[str, Any, Any]]",
                    "T",
                    "Dict[str, str]"
                ]
            }
        },
        "BenchmarkPlugin.initialize.start_sym_exec_hook": {
            "name": "start_sym_exec_hook",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "BenchmarkPlugin.initialize.stop_sym_exec_hook": {
            "name": "stop_sym_exec_hook",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/plugins/implementations/dependency_pruner.py": {
        "get_dependency_annotation": {
            "name": "get_dependency_annotation",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "state": [
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]",
                    "list"
                ]
            }
        },
        "get_ws_dependency_annotation": {
            "name": "get_ws_dependency_annotation",
            "location": 101,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "DependencyAnnotation.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyAnnotation.__copy__": {
            "name": "__copy__",
            "location": 32,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyAnnotation.get_storage_write_cache": {
            "name": "get_storage_write_cache",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "iteration": [
                    "str",
                    "bool"
                ]
            }
        },
        "DependencyAnnotation.extend_storage_write_cache": {
            "name": "extend_storage_write_cache",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iteration": [
                    "float"
                ],
                "value": [
                    "str",
                    "float",
                    "T"
                ]
            }
        },
        "WSDependencyAnnotation.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WSDependencyAnnotation.__copy__": {
            "name": "__copy__",
            "location": 64,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyPruner.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyPruner._reset": {
            "name": "_reset",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyPruner.update_sloads": {
            "name": "update_sloads",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[int]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "target_location": [
                    "str"
                ]
            }
        },
        "DependencyPruner.update_sstores": {
            "name": "update_sstores",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[int]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "target_location": [
                    "str"
                ]
            }
        },
        "DependencyPruner.update_calls": {
            "name": "update_calls",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[int]",
                    "str",
                    "bool",
                    "Sequence"
                ]
            }
        },
        "DependencyPruner.wanna_execute": {
            "name": "wanna_execute",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "annotation": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "DependencyPruner.initialize": {
            "name": "initialize",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbolic_vm": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DependencyPruner.initialize.start_sym_trans_hook": {
            "name": "start_sym_trans_hook",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "DependencyPruner.initialize.jump_hook": {
            "name": "jump_hook",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "apps.monero.signing.state.State",
                    "Dict[str, float]",
                    "List[List[Any]]",
                    "List[List[str]]"
                ]
            }
        },
        "DependencyPruner.initialize.jumpi_hook": {
            "name": "jumpi_hook",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "apps.monero.signing.state.State",
                    "Dict[str, float]",
                    "List[List[Any]]",
                    "List[List[str]]"
                ]
            }
        },
        "DependencyPruner.initialize.sstore_hook": {
            "name": "sstore_hook",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "apps.monero.signing.state.State",
                    "state.State",
                    "Dict[str, float]"
                ]
            }
        },
        "DependencyPruner.initialize.sload_hook": {
            "name": "sload_hook",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "apps.monero.signing.state.State",
                    "state.State",
                    "Dict[str, float]"
                ]
            }
        },
        "DependencyPruner.initialize.call_hook": {
            "name": "call_hook",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "str",
                    "agent_based_api.v1.state",
                    "apps.monero.signing.state.State",
                    "raiden.transfer.state.ChainState",
                    "Optional[Tuple[int, ...]]",
                    "List[List[Any]]"
                ]
            }
        },
        "DependencyPruner.initialize.stop_hook": {
            "name": "stop_hook",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "int",
                    "pyshgp.push.state.PushState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DependencyPruner.initialize.return_hook": {
            "name": "return_hook",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "int",
                    "str"
                ]
            }
        },
        "DependencyPruner.initialize._transaction_end": {
            "name": "_transaction_end",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "apps.monero.signing.state.State",
                    "raiden.transfer.state.ChainState",
                    "str",
                    "agent_based_api.v1.state",
                    "Optional[Tuple[int, ...]]"
                ]
            }
        },
        "DependencyPruner.initialize._check_basic_block": {
            "name": "_check_basic_block",
            "location": 323,
            "return": [],
            "arguments": {
                "address": [
                    "float",
                    "Optional[str]",
                    "int"
                ],
                "annotation": [
                    "float",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "DependencyPruner.initialize.world_state_filter_hook": {
            "name": "world_state_filter_hook",
            "location": 351,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/plugins/implementations/mutation_pruner.py": {
        "MutationPruner.initialize": {
            "name": "initialize",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbolic_vm": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MutationPruner.initialize.sstore_mutator_hook": {
            "name": "sstore_mutator_hook",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState",
                    "T"
                ]
            }
        },
        "MutationPruner.initialize.call_mutator_hook": {
            "name": "call_mutator_hook",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "MutationPruner.initialize.world_state_filter_hook": {
            "name": "world_state_filter_hook",
            "location": 53,
            "return": [
                "Iterator[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "prefecengine.state.State"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/plugins/implementations/__init__.py": {},
    "mythril-docker-master/mythril/laser/ethereum/plugins/implementations/coverage/coverage_plugin.py": {
        "InstructionCoveragePlugin.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionCoveragePlugin.initialize": {
            "name": "initialize",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbolic_vm": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InstructionCoveragePlugin._get_covered_instructions": {
            "name": "_get_covered_instructions",
            "location": 81,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionCoveragePlugin.is_instruction_covered": {
            "name": "is_instruction_covered",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bytecode": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ]
            }
        },
        "InstructionCoveragePlugin.initialize.stop_sym_exec_hook": {
            "name": "stop_sym_exec_hook",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "InstructionCoveragePlugin.initialize.execute_state_hook": {
            "name": "execute_state_hook",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "raiden.transfer.state.ChainState"
                ]
            }
        },
        "InstructionCoveragePlugin.initialize.execute_start_sym_trans_hook": {
            "name": "execute_start_sym_trans_hook",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "InstructionCoveragePlugin.initialize.execute_stop_sym_trans_hook": {
            "name": "execute_stop_sym_trans_hook",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/plugins/implementations/coverage/coverage_strategy.py": {
        "CoverageStrategy.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "super_strategy": [],
                "instruction_coverage_plugin": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CoverageStrategy.get_strategic_global_state": {
            "name": "get_strategic_global_state",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoverageStrategy._is_covered": {
            "name": "_is_covered",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "float"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/plugins/implementations/coverage/__init__.py": {},
    "mythril-docker-master/mythril/laser/ethereum/state/account.py": {
        "StorageRegion.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "StorageRegion.__setitem__": {
            "name": "__setitem__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "Storage.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "concrete": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "address": [
                    "int",
                    "bool",
                    "float"
                ],
                "dynamic_loader": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Storage._sanitize": {
            "name": "_sanitize",
            "location": 67,
            "return": [
                "str",
                "float",
                "bool",
                "Tuple[Tuple[int, Any]]",
                "int",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "input_": [
                    "int",
                    "dict"
                ]
            }
        },
        "Storage.__getitem__": {
            "name": "__getitem__",
            "location": 75,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Callable",
                    "callable",
                    "int"
                ]
            }
        },
        "Storage.get_map_index": {
            "name": "get_map_index",
            "location": 107,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "KT",
                    "K"
                ]
            }
        },
        "Storage._get_corresponding_storage": {
            "name": "_get_corresponding_storage",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "Storage.__setitem__": {
            "name": "__setitem__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "K"
                ],
                "value": [
                    "str",
                    "int",
                    "KT",
                    "bytes"
                ]
            }
        },
        "Storage.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memodict": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Storage.__str__": {
            "name": "__str__",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Optional[int]",
                    "mythril.laser.ethereum.state.accounAccount",
                    "bool"
                ],
                "code": [
                    "str",
                    "Callable[[], bool]",
                    "dict"
                ],
                "contract_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "balances": [
                    "str",
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "Optional[Mapping]"
                ],
                "concrete_storage": [
                    "str",
                    "Optional[str]"
                ],
                "dynamic_loader": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Account.__str__": {
            "name": "__str__",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.set_balance": {
            "name": "set_balance",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "balance": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Account.add_balance": {
            "name": "add_balance",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "balance": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Account.as_dict": {
            "name": "as_dict",
            "location": 229,
            "return": [
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Account.__copy__": {
            "name": "__copy__",
            "location": 241,
            "return": [
                "float",
                "Dict[str, Any]",
                "int",
                "str",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "memodict": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/state/annotation.py": {
        "StateAnnotation.persist_to_world_state": {
            "name": "persist_to_world_state",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoCopyAnnotation.__copy__": {
            "name": "__copy__",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoCopyAnnotation.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/state/calldata.py": {
        "BaseCalldata.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "BaseCalldata.calldatasize": {
            "name": "calldatasize",
            "location": 37,
            "return": [
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCalldata.get_word_at": {
            "name": "get_word_at",
            "location": 47,
            "return": [
                "int",
                "List[List[int]]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseCalldata.__getitem__": {
            "name": "__getitem__",
            "location": 56,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "str",
                    "List[T]",
                    "Iterable[T]",
                    "list"
                ]
            }
        },
        "BaseCalldata._load": {
            "name": "_load",
            "location": 91,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "list",
                    "str",
                    "Collection[str]",
                    "Iterable[bytes]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "BaseCalldata.size": {
            "name": "size",
            "location": 99,
            "return": [
                "typing.Union[mythril.laser.smt.BitVec, builtins.int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCalldata.concrete": {
            "name": "concrete",
            "location": 106,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "allennlp.models.model.Model",
                    "bool",
                    "Model",
                    "str"
                ]
            }
        },
        "ConcreteCalldata.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx_id": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "calldata": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ConcreteCalldata._load": {
            "name": "_load",
            "location": 135,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[T]",
                    "Dict[str, Any]",
                    "Union[int, slice]",
                    "Iterable[T]",
                    "list",
                    "Optional[abilian.core.models.Model]",
                    "dict"
                ]
            }
        },
        "ConcreteCalldata.concrete": {
            "name": "concrete",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "allennlp.models.model.Model",
                    "bool",
                    "Model",
                    "str"
                ]
            }
        },
        "ConcreteCalldata.size": {
            "name": "size",
            "location": 153,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicConcreteCalldata.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx_id": [
                    "str",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "calldata": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BasicConcreteCalldata._load": {
            "name": "_load",
            "location": 173,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BasicConcreteCalldata.concrete": {
            "name": "concrete",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "allennlp.models.model.Model",
                    "bool",
                    "Model",
                    "str"
                ]
            }
        },
        "BasicConcreteCalldata.size": {
            "name": "size",
            "location": 199,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymbolicCalldata.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx_id": [
                    "str",
                    "int",
                    "Union[str, List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "SymbolicCalldata._load": {
            "name": "_load",
            "location": 219,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[int, slice]",
                    "Dict[str, Any]",
                    "Optional[abilian.core.models.Model]",
                    "mythril.laser.smBitVec",
                    "Iterable[T]",
                    "List[T]",
                    "int"
                ]
            }
        },
        "SymbolicCalldata.concrete": {
            "name": "concrete",
            "location": 234,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "allennlp.models.model.Model",
                    "TestModule.Model"
                ]
            }
        },
        "SymbolicCalldata.size": {
            "name": "size",
            "location": 250,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicSymbolicCalldata.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "BasicSymbolicCalldata._load": {
            "name": "_load",
            "location": 270,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Optional[abilian.core.models.Model]",
                    "Union[int, slice]",
                    "int",
                    "Dict[str, Any]",
                    "mythril.laser.smBitVec"
                ],
                "clean": [
                    "list",
                    "str",
                    "Collection[str]",
                    "Iterable[bytes]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "BasicSymbolicCalldata.concrete": {
            "name": "concrete",
            "location": 291,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ]
            }
        },
        "BasicSymbolicCalldata.size": {
            "name": "size",
            "location": 307,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/state/constraints.py": {
        "Constraints.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constraint_list": [
                    "dict"
                ],
                "is_possible": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Constraints.is_possible": {
            "name": "is_possible",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraints.append": {
            "name": "append",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constraint": [
                    "bool",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Constraints.pop": {
            "name": "pop",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Constraints.as_list": {
            "name": "as_list",
            "location": 71,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraints.__copy__": {
            "name": "__copy__",
            "location": 77,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraints.copy": {
            "name": "copy",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraints.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memodict": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Constraints.__add__": {
            "name": "__add__",
            "location": 96,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "constraints": []
            }
        },
        "Constraints.__iadd__": {
            "name": "__iadd__",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "constraints": [
                    "str",
                    "Dict[int, int]",
                    "bool",
                    "list"
                ]
            }
        },
        "Constraints._get_smt_bool_list": {
            "name": "_get_smt_bool_list",
            "location": 118,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "constraints": [
                    "bool",
                    "Callable",
                    "Optional[bool]",
                    "BaseException"
                ]
            }
        },
        "Constraints.__hash__": {
            "name": "__hash__",
            "location": 124,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/state/environment.py": {
        "Environment.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active_account": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "sender": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "calldata": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "gasprice": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "callvalue": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "origin": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "code": [
                    "dict",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        },
        "Environment.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.as_dict": {
            "name": "as_dict",
            "location": 62,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/state/global_state.py": {
        "GlobalState.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world_state": [
                    "int",
                    "Dict[str, Any]",
                    "List[mythril.laser.ethereum.state.global_state.GlobalState]"
                ],
                "environment": [
                    "bool",
                    "int",
                    "List[str]",
                    "transaction.TransactionManager"
                ],
                "node": [
                    "bool",
                    "int",
                    "List[str]",
                    "transaction.TransactionManager"
                ],
                "machine_state": [
                    "Dict[str, Any]",
                    "raiden.transfer.state.TokenNetworkState"
                ],
                "transaction_stack": [
                    "bool",
                    "int",
                    "List[str]",
                    "transaction.TransactionManager"
                ],
                "last_return_data": [
                    "List[str]",
                    "dict",
                    "Union[Dict, List]",
                    "Dict[str, List[Any]]",
                    "str"
                ],
                "annotations": [
                    "bool",
                    "int",
                    "List[str]",
                    "transaction.TransactionManager"
                ]
            }
        },
        "GlobalState.__copy__": {
            "name": "__copy__",
            "location": 56,
            "return": [
                "str",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.accounts": {
            "name": "accounts",
            "location": 77,
            "return": [
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.get_current_instruction": {
            "name": "get_current_instruction",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.current_transaction": {
            "name": "current_transaction",
            "location": 99,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.instruction": {
            "name": "instruction",
            "location": 113,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.new_bitvec": {
            "name": "new_bitvec",
            "location": 120,
            "return": [
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "size": [
                    "str"
                ],
                "annotations": [
                    "str"
                ]
            }
        },
        "GlobalState.annotate": {
            "name": "annotate",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation": [
                    "float",
                    "str"
                ]
            }
        },
        "GlobalState.annotations": {
            "name": "annotations",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.get_annotations": {
            "name": "get_annotations",
            "location": 150,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "annotation_type": [
                    "type",
                    "str",
                    "Type",
                    "float"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/state/machine_state.py": {
        "MachineStack.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_list": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]"
                ]
            }
        },
        "MachineStack.append": {
            "name": "append",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Union[int, mythril.laser.smExpression]",
                    "Callable"
                ]
            }
        },
        "MachineStack.pop": {
            "name": "pop",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MachineStack.__getitem__": {
            "name": "__getitem__",
            "location": 56,
            "return": [
                "trezor.utils.Writer",
                "Dict[str, int]",
                "utils.Node",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "MachineStack.__add__": {
            "name": "__add__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T"
                ]
            }
        },
        "MachineStack.__iadd__": {
            "name": "__iadd__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "MachineState.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "bool",
                    "float",
                    "int"
                ],
                "pc": [
                    "bool",
                    "float",
                    "int"
                ],
                "stack": [
                    "bool",
                    "float",
                    "int"
                ],
                "memory": [
                    "bool",
                    "float",
                    "int"
                ],
                "constraints": [
                    "bool",
                    "float",
                    "int"
                ],
                "depth": [
                    "bool",
                    "float",
                    "int"
                ],
                "max_gas_used": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool",
                    "str"
                ],
                "min_gas_used": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "MachineState.calculate_extension_size": {
            "name": "calculate_extension_size",
            "location": 119,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "float",
                    "int",
                    "bool"
                ],
                "size": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "MachineState.calculate_memory_gas": {
            "name": "calculate_memory_gas",
            "location": 135,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "size": [
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "MachineState.check_gas": {
            "name": "check_gas",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MachineState.mem_extend": {
            "name": "mem_extend",
            "location": 158,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Optional[int]",
                    "T",
                    "Callable",
                    "Union[int, float]",
                    "int",
                    "str"
                ],
                "size": [
                    "Optional[int]",
                    "int",
                    "T",
                    "Callable",
                    "Union[int, float]"
                ]
            }
        },
        "MachineState.memory_write": {
            "name": "memory_write",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "bytes",
                    "bytearray"
                ],
                "data": [
                    "int",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "MachineState.pop": {
            "name": "pop",
            "location": 189,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.StateIncarcerationPeriod]",
                "int",
                "str",
                "Union[int, Tuple[int, ...]]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "MachineState.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 202,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "memodict": [
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "MachineState.__str__": {
            "name": "__str__",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MachineState.memory_size": {
            "name": "memory_size",
            "location": 228,
            "return": [
                "str",
                "bytes",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MachineState.as_dict": {
            "name": "as_dict",
            "location": 236,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/state/memory.py": {
        "convert_bv": {
            "name": "convert_bv",
            "location": 18,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "val": [
                    "Union[int, mythril.laser.smBitVec]",
                    "float",
                    "str",
                    "denite.util.UserContext"
                ]
            }
        },
        "Memory.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Memory.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memory.__copy__": {
            "name": "__copy__",
            "location": 43,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memory.extend": {
            "name": "extend",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "tuple",
                    "float",
                    "Tuple[float, float]"
                ]
            }
        },
        "Memory.get_word_at": {
            "name": "get_word_at",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Memory.write_word_at": {
            "name": "write_word_at",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "tuple",
                    "float"
                ],
                "value": [
                    "List[bytes]",
                    "int"
                ]
            }
        },
        "Memory.__getitem__": {
            "name": "__getitem__",
            "location": 125,
            "return": [
                "str",
                "IO[str]",
                "bool",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "List[T]",
                    "list",
                    "str",
                    "T"
                ]
            }
        },
        "Memory.__setitem__": {
            "name": "__setitem__",
            "location": 163,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list",
                    "VT",
                    "KT",
                    "Union[str, int]"
                ],
                "value": [
                    "str",
                    "Sequence[Sequence[Any]]",
                    "List[Dict[str, str]]",
                    "\"Series\"",
                    "float",
                    "List[List[object]]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/state/world_state.py": {
        "WorldState.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transaction_sequence": [
                    "int",
                    "str",
                    "bool"
                ],
                "annotations": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "WorldState.accounts": {
            "name": "accounts",
            "location": 37,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorldState.__getitem__": {
            "name": "__getitem__",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "bool",
                "dict",
                "Optional[Union[Any, Any]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "WorldState.__copy__": {
            "name": "__copy__",
            "location": 53,
            "return": [
                "Tuple[int, int]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorldState.accounts_exist_or_load": {
            "name": "accounts_exist_or_load",
            "location": 70,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "addr": [
                    "dict",
                    "Callable",
                    "List[int]",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "dynamic_loader": [
                    "dict",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ]
            }
        },
        "WorldState.create_account": {
            "name": "create_account",
            "location": 91,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "balance": [
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ],
                "address": [
                    "recidiviz.persistence.entity.state.entities.StateSupervisionPeriod",
                    "raiden.utils.NodeNetworkStateMap",
                    "raiden.utils.List[raiden.transfer.state.RouteState]",
                    "raiden.utils.PaymentNetworkID",
                    "cmk.utils.type_defs.UserId"
                ],
                "concrete_storage": [
                    "str",
                    "bool",
                    "kedro.pipeline.node.Node"
                ],
                "dynamic_loader": [
                    "str",
                    "bool",
                    "kedro.pipeline.node.Node"
                ],
                "creator": [
                    "bool",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "str"
                ]
            }
        },
        "WorldState.create_initialized_contract_account": {
            "name": "create_initialized_contract_account",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_code": [
                    "str"
                ],
                "storage": [
                    "str"
                ]
            }
        },
        "WorldState.annotate": {
            "name": "annotate",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation": [
                    "int",
                    "numpy.random.RandomState",
                    "str",
                    "T"
                ]
            }
        },
        "WorldState.annotations": {
            "name": "annotations",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorldState.get_annotations": {
            "name": "get_annotations",
            "location": 156,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "annotation_type": [
                    "type",
                    "str",
                    "Type",
                    "float"
                ]
            }
        },
        "WorldState._generate_new_address": {
            "name": "_generate_new_address",
            "location": 166,
            "return": [
                "Callable",
                "str",
                "cmk.utils.type_defs.HostName",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "creator": [
                    "str",
                    "utils.JSON"
                ]
            }
        },
        "WorldState.put_account": {
            "name": "put_account",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "Optional[str]",
                    "accounts.models.Account",
                    "Optional[int]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/state/__init__.py": {},
    "mythril-docker-master/mythril/laser/ethereum/strategy/basic.py": {
        "DepthFirstSearchStrategy.get_strategic_global_state": {
            "name": "get_strategic_global_state",
            "location": 42,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "Union[str, List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BreadthFirstSearchStrategy.get_strategic_global_state": {
            "name": "get_strategic_global_state",
            "location": 56,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "Union[str, List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnRandomNaivelyStrategy.get_strategic_global_state": {
            "name": "get_strategic_global_state",
            "location": 67,
            "return": [
                "List[str]",
                "List[Dict]",
                "Optional[str]",
                "Union[str, List[Any]]",
                "List[Callable]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnWeightedRandomStrategy.get_strategic_global_state": {
            "name": "get_strategic_global_state",
            "location": 82,
            "return": [
                "str",
                "List[List[Any]]",
                "Optional[str]",
                "int",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "choices": {
            "name": "choices",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "population": [
                    "list",
                    "List[int]"
                ],
                "weights": [
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/strategy/__init__.py": {
        "BasicSearchStrategy.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "work_list": [
                    "List[Dict[Any, str]]",
                    "List[str]",
                    "Union[int, float]"
                ],
                "max_depth": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "BasicSearchStrategy.__iter__": {
            "name": "__iter__",
            "location": 15,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicSearchStrategy.get_strategic_global_state": {
            "name": "get_strategic_global_state",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicSearchStrategy.__next__": {
            "name": "__next__",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/strategy/extensions/bounded_loops.py": {
        "JumpdestCountAnnotation.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JumpdestCountAnnotation.__copy__": {
            "name": "__copy__",
            "location": 19,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundedLoopsStrategy.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "super_strategy": []
            }
        },
        "BoundedLoopsStrategy.get_strategic_global_state": {
            "name": "get_strategic_global_state",
            "location": 46,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/strategy/extensions/__init__.py": {},
    "mythril-docker-master/mythril/laser/ethereum/transaction/concolic.py": {
        "execute_message_call": {
            "name": "execute_message_call",
            "location": 15,
            "return": [
                "int",
                "str",
                "Optional[List[str]]",
                "Callable"
            ],
            "arguments": {
                "laser_evm": [
                    "Optional[int]",
                    "raiden.transfer.mediated_transfer.state.InitiatorPaymentState"
                ],
                "callee_address": [
                    "Optional[int]",
                    "List[int]",
                    "dict"
                ],
                "caller_address": [
                    "Optional[int]",
                    "List[int]",
                    "dict"
                ],
                "origin_address": [
                    "Optional[int]",
                    "List[int]",
                    "dict"
                ],
                "code": [
                    "Optional[int]",
                    "List[int]",
                    "dict"
                ],
                "data": [
                    "Optional[int]",
                    "List[int]",
                    "dict"
                ],
                "gas_limit": [
                    "Optional[int]",
                    "List[int]",
                    "dict"
                ],
                "gas_price": [
                    "Optional[int]",
                    "List[int]",
                    "dict"
                ],
                "value": [
                    "Optional[int]",
                    "List[int]",
                    "dict"
                ],
                "track_gas": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "_setup_global_state_for_execution": {
            "name": "_setup_global_state_for_execution",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "laser_evm": [
                    "str",
                    "Pattern"
                ],
                "transaction": [
                    "str",
                    "dict",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/transaction/symbolic.py": {
        "execute_message_call": {
            "name": "execute_message_call",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "laser_evm": [
                    "mythril.laser.smBitVec"
                ],
                "callee_address": [
                    "mythril.laser.smBitVec"
                ]
            }
        },
        "execute_contract_creation": {
            "name": "execute_contract_creation",
            "location": 70,
            "return": [
                "float",
                "Dict[str, Any]",
                "int",
                "str",
                "AsyncGenerator"
            ],
            "arguments": {
                "laser_evm": [
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "contract_initialization_code": [
                    "bool",
                    "int"
                ],
                "contract_name": [
                    "bool",
                    "int"
                ],
                "world_state": [
                    "Optional[List[Any]]",
                    "int"
                ]
            }
        },
        "_setup_global_state_for_execution": {
            "name": "_setup_global_state_for_execution",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "laser_evm": [
                    "str",
                    "bool"
                ],
                "transaction": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/transaction/transaction_models.py": {
        "get_next_transaction_id": {
            "name": "get_next_transaction_id",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TransactionEndSignal.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "raiden.transfer.state.ChainState",
                    "mythril.laser.ethereum.state.global_state.GlobalState",
                    "T"
                ],
                "revert": [
                    "str",
                    "dict"
                ]
            }
        },
        "TransactionStartSignal.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "str",
                    "Optional[List[str]]",
                    "float",
                    "List[str]"
                ],
                "op_code": [
                    "int",
                    "Sequence[str]",
                    "Optional[int]"
                ]
            }
        },
        "BaseTransaction.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world_state": [
                    "mythril.laser.smBitVec"
                ],
                "callee_account": [
                    "str",
                    "Optional[str]"
                ],
                "caller": [
                    "int",
                    "bool",
                    "List[int]",
                    "Optional[str]",
                    "float"
                ],
                "call_data": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bytes",
                    "raiden.transfer.state.ChainState"
                ],
                "identifier": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "gas_price": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "bool"
                ],
                "gas_limit": [
                    "int",
                    "bool",
                    "List[int]",
                    "Optional[str]",
                    "float"
                ],
                "origin": [
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "code": [
                    "int",
                    "bool",
                    "List[int]",
                    "Optional[str]",
                    "float"
                ],
                "call_value": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "init_call_data": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Sequence[str]",
                    "Optional[Dict]",
                    "Dict[int, dict]"
                ]
            }
        },
        "BaseTransaction.initial_global_state_from_environment": {
            "name": "initial_global_state_from_environment",
            "location": 107,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "bool",
                    "Optional[Callable[[Type, Dict], Any]]",
                    "str"
                ],
                "active_function": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseTransaction.initial_global_state": {
            "name": "initial_global_state",
            "location": 134,
            "return": [
                "mythril.laser.ethereum.state.global_state.GlobalState"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTransaction.__str__": {
            "name": "__str__",
            "location": 137,
            "return": [
                "str",
                "int",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageCallTransaction.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageCallTransaction.initial_global_state": {
            "name": "initial_global_state",
            "location": 152,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Mapping[str, Any]",
                "float",
                "dict",
                "bool",
                "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageCallTransaction.end": {
            "name": "end",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "prefecengine.state.State",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ],
                "return_data": [
                    "str",
                    "MutableMapping",
                    "bytes",
                    "int"
                ],
                "revert": [
                    "prefecengine.state.State",
                    "mythril.laser.ethereum.state.global_state.GlobalState"
                ]
            }
        },
        "ContractCreationTransaction.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "world_state": [
                    "raiden.transfer.state.ChainState"
                ],
                "caller": [],
                "call_data": [
                    "prefecengine.state.State",
                    "bool"
                ],
                "identifier": [
                    "prefecengine.state.State",
                    "bool"
                ],
                "gas_price": [
                    "prefecengine.state.State",
                    "bool"
                ],
                "gas_limit": [
                    "prefecengine.state.State",
                    "bool"
                ],
                "origin": [
                    "prefecengine.state.State",
                    "bool"
                ],
                "code": [
                    "prefecengine.state.State",
                    "bool"
                ],
                "call_value": [
                    "prefecengine.state.State",
                    "bool"
                ],
                "contract_name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Exception]"
                ]
            }
        },
        "ContractCreationTransaction.initial_global_state": {
            "name": "initial_global_state",
            "location": 214,
            "return": [
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]",
                "Mapping[str, Any]",
                "float",
                "dict",
                "bool",
                "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractCreationTransaction.end": {
            "name": "end",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "global_state": [
                    "Tuple[str, Sequence[str], Sequence[str]]",
                    "prefecengine.state.State",
                    "str"
                ],
                "return_data": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ],
                "revert": [
                    "raiden.transfer.state.ChainState",
                    "list",
                    "prefecengine.state.State"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/ethereum/transaction/__init__.py": {},
    "mythril-docker-master/mythril/laser/smt/array.py": {
        "BaseArray.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "mythril.laser.smbitvec.BitVec",
                    "int",
                    "dict",
                    "float",
                    "Type",
                    "T"
                ]
            }
        },
        "BaseArray.__setitem__": {
            "name": "__setitem__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "Callable"
                ],
                "value": [
                    "str",
                    "Hashable"
                ]
            }
        },
        "Array.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Union[int, str]"
                ],
                "domain": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ],
                "value_range": [
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "BitVec",
                    "str"
                ]
            }
        },
        "K.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "int"
                ],
                "value_range": [
                    "int",
                    "Tuple[int, int]",
                    "Union[int, float]",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Union[str, bytes]"
                ],
                "value": [
                    "str",
                    "int",
                    "float",
                    "dict"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/bitvec.py": {
        "_padded_operation": {
            "name": "_padded_operation",
            "location": 16,
            "return": [
                "str",
                "int",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "z3.BitVec",
                    "int",
                    "float"
                ],
                "b": [
                    "z3.BitVec",
                    "int",
                    "float"
                ],
                "operator": [
                    "int",
                    "float"
                ]
            }
        },
        "BitVec.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "annotations": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BitVec.size": {
            "name": "size",
            "location": 36,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitVec.symbolic": {
            "name": "symbolic",
            "location": 44,
            "return": [
                "bytearray",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitVec.value": {
            "name": "value",
            "location": 53,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitVec.__add__": {
            "name": "__add__",
            "location": 63,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVec.__sub__": {
            "name": "__sub__",
            "location": 77,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVec.__mul__": {
            "name": "__mul__",
            "location": 91,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVec.__truediv__": {
            "name": "__truediv__",
            "location": 102,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVec.__and__": {
            "name": "__and__",
            "location": 113,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVec.__or__": {
            "name": "__or__",
            "location": 126,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVec.__xor__": {
            "name": "__xor__",
            "location": 139,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVec.__lt__": {
            "name": "__lt__",
            "location": 152,
            "return": [
                "bool",
                "int",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVec.__gt__": {
            "name": "__gt__",
            "location": 165,
            "return": [
                "bool",
                "int",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVec.__le__": {
            "name": "__le__",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVec.__ge__": {
            "name": "__ge__",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVec.__eq__": {
            "name": "__eq__",
            "location": 201,
            "return": [
                "bool",
                "int",
                "Sequence",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVec.__ne__": {
            "name": "__ne__",
            "location": 221,
            "return": [
                "bool",
                "int",
                "Sequence",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVec._handle_shift": {
            "name": "_handle_shift",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ],
                "operator": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVec.__lshift__": {
            "name": "__lshift__",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "BitVec.__rshift__": {
            "name": "__rshift__",
            "location": 264,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "BitVec.__hash__": {
            "name": "__hash__",
            "location": 272,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/bitvecfunc.py": {
        "_arithmetic_helper": {
            "name": "_arithmetic_helper",
            "location": 10,
            "return": [],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int",
                    "z3.BitVec"
                ],
                "operation": [
                    "int"
                ]
            }
        },
        "_comparison_helper": {
            "name": "_comparison_helper",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool"
                ],
                "b": [
                    "int",
                    "Sequence[int]",
                    "List[int]",
                    "Union[mythril.laser.smbitvec.BitVec, int]"
                ],
                "operation": [
                    "int",
                    "List[str]"
                ],
                "default_value": [
                    "bool",
                    "Union[int, Tuple[int, ...]]",
                    "float",
                    "List[int]",
                    "int"
                ],
                "inputs_equal": [
                    "bool"
                ]
            }
        },
        "BitVecFunc.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "z3.BitVecRef",
                    "bool",
                    "Optional[dict]"
                ],
                "func_name": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[List[Any]]"
                ],
                "input_": [
                    "Pattern",
                    "bool",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "annotations": [
                    "z3.BitVecRef",
                    "bool",
                    "Optional[dict]"
                ],
                "nested_functions": [
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "bool",
                    "str"
                ]
            }
        },
        "BitVecFunc.__add__": {
            "name": "__add__",
            "location": 145,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str"
                ]
            }
        },
        "BitVecFunc.__sub__": {
            "name": "__sub__",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "BitVecFunc.__mul__": {
            "name": "__mul__",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "BitVecFunc.__truediv__": {
            "name": "__truediv__",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "BitVecFunc.__and__": {
            "name": "__and__",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BitVecFunc.__or__": {
            "name": "__or__",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVecFunc.__xor__": {
            "name": "__xor__",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVecFunc.__lt__": {
            "name": "__lt__",
            "location": 205,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVecFunc.__gt__": {
            "name": "__gt__",
            "location": 217,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVecFunc.__le__": {
            "name": "__le__",
            "location": 229,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVecFunc.__ge__": {
            "name": "__ge__",
            "location": 239,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVecFunc.__eq__": {
            "name": "__eq__",
            "location": 250,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVecFunc.__ne__": {
            "name": "__ne__",
            "location": 265,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "BitVecFunc.__lshift__": {
            "name": "__lshift__",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "BitVecFunc.__rshift__": {
            "name": "__rshift__",
            "location": 285,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "BitVecFunc.__hash__": {
            "name": "__hash__",
            "location": 293,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/bitvec_helper.py": {
        "_comparison_helper": {
            "name": "_comparison_helper",
            "location": 14,
            "return": [
                "str",
                "List[int]",
                "int",
                "BaseException"
            ],
            "arguments": {
                "a": [
                    "Any",
                    "int",
                    "str",
                    "bool",
                    "Callable"
                ],
                "b": [
                    "int",
                    "float",
                    "Union[float, str]",
                    "bool"
                ],
                "operation": [
                    "Callable",
                    "float",
                    "bool",
                    "List[float]"
                ],
                "default_value": [
                    "bool",
                    "float"
                ],
                "inputs_equal": [
                    "bool",
                    "float"
                ]
            }
        },
        "_arithmetic_helper": {
            "name": "_arithmetic_helper",
            "location": 23,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "a": [
                    "T",
                    "Tuple[int, int]",
                    "int"
                ],
                "b": [
                    "T",
                    "Optional[Tuple]",
                    "int",
                    "float"
                ],
                "operation": [
                    "mythril.laser.smbitvec.BitVec",
                    "List[int]"
                ]
            }
        },
        "LShR": {
            "name": "LShR",
            "location": 35,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "a": [
                    "mythril.laser.smbitvec.BitVec",
                    "T"
                ],
                "b": [
                    "mythril.laser.smbitvec.BitVec",
                    "T"
                ]
            }
        },
        "If": {
            "name": "If",
            "location": 39,
            "return": [],
            "arguments": {
                "a": [
                    "\"PondTensor\"",
                    "int"
                ],
                "b": [
                    "float",
                    "Optional[int]",
                    "int"
                ],
                "c": [
                    "mythril.laser.smbitvec.BitVec",
                    "float",
                    "Optional[Union[int, float]]"
                ]
            }
        },
        "UGT": {
            "name": "UGT",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "mythril.laser.smbitvec.BitVec",
                    "str",
                    "int"
                ],
                "b": [
                    "mythril.laser.smbitvec.BitVec",
                    "str",
                    "int"
                ]
            }
        },
        "UGE": {
            "name": "UGE",
            "location": 82,
            "return": [
                "int",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "a": [
                    "mythril.laser.smbitvec.BitVec",
                    "Optional[Union[int, float]]",
                    "int",
                    "T"
                ],
                "b": [
                    "mythril.laser.smbitvec.BitVec",
                    "Optional[Union[int, float]]",
                    "int",
                    "T"
                ]
            }
        },
        "ULT": {
            "name": "ULT",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "mythril.laser.smbitvec.BitVec",
                    "str",
                    "int"
                ],
                "b": [
                    "mythril.laser.smbitvec.BitVec",
                    "str",
                    "int"
                ]
            }
        },
        "ULE": {
            "name": "ULE",
            "location": 102,
            "return": [
                "int",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "a": [
                    "mythril.laser.smbitvec.BitVec",
                    "Optional[Union[int, float]]",
                    "int",
                    "T"
                ],
                "b": [
                    "mythril.laser.smbitvec.BitVec",
                    "Optional[Union[int, float]]",
                    "int",
                    "T"
                ]
            }
        },
        "Concat": {
            "name": "Concat",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "Extract": {
            "name": "Extract",
            "location": 155,
            "return": [],
            "arguments": {
                "high": [
                    "int"
                ],
                "low": [
                    "int"
                ],
                "bv": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "URem": {
            "name": "URem",
            "location": 177,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "a": [
                    "mythril.laser.smbitvec.BitVec",
                    "int"
                ],
                "b": [
                    "mythril.laser.smbitvec.BitVec",
                    "int"
                ]
            }
        },
        "SRem": {
            "name": "SRem",
            "location": 187,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "a": [
                    "mythril.laser.smbitvec.BitVec",
                    "int"
                ],
                "b": [
                    "mythril.laser.smbitvec.BitVec",
                    "int"
                ]
            }
        },
        "UDiv": {
            "name": "UDiv",
            "location": 197,
            "return": [
                "float",
                "T"
            ],
            "arguments": {
                "a": [
                    "mythril.laser.smbitvec.BitVec",
                    "int"
                ],
                "b": [
                    "mythril.laser.smbitvec.BitVec",
                    "int"
                ]
            }
        },
        "Sum": {
            "name": "Sum",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "BVAddNoOverflow": {
            "name": "BVAddNoOverflow",
            "location": 245,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Union[mythril.laser.smbitvec.BitVec, int]",
                    "T",
                    "float"
                ],
                "b": [
                    "Union[mythril.laser.smbitvec.BitVec, int]"
                ],
                "signed": [
                    "bool",
                    "str"
                ]
            }
        },
        "BVMulNoOverflow": {
            "name": "BVMulNoOverflow",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Union[mythril.laser.smbitvec.BitVec, int]",
                    "str",
                    "int"
                ],
                "b": [
                    "Union[mythril.laser.smbitvec.BitVec, int]"
                ],
                "signed": [
                    "bool",
                    "Mapping[str, int]"
                ]
            }
        },
        "BVSubNoUnderflow": {
            "name": "BVSubNoUnderflow",
            "location": 276,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "Union[mythril.laser.smbitvec.BitVec, int]",
                    "str",
                    "int"
                ],
                "b": [
                    "Union[mythril.laser.smbitvec.BitVec, int]"
                ],
                "signed": [
                    "bool",
                    "Mapping[str, int]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/bool.py": {
        "And": {
            "name": "And",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Xor": {
            "name": "Xor",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "bytes",
                    "Tuple[Union[int, slice], Union[int, slice]]"
                ],
                "b": [
                    "bytes",
                    "Tuple[Union[int, slice], Union[int, slice]]"
                ]
            }
        },
        "Or": {
            "name": "Or",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Not": {
            "name": "Not",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "float",
                    "int"
                ]
            }
        },
        "is_false": {
            "name": "is_false",
            "location": 126,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "is_true": {
            "name": "is_true",
            "location": 135,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "a": [
                    "Tuple[int]",
                    "bool",
                    "List[str]",
                    "Type[object]"
                ]
            }
        },
        "Bool.is_false": {
            "name": "is_false",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.is_true": {
            "name": "is_true",
            "location": 27,
            "return": [
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.value": {
            "name": "value",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bool.__ne__": {
            "name": "__ne__",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bool.__bool__": {
            "name": "__bool__",
            "location": 73,
            "return": [
                "bool",
                "float",
                "Optional[str]",
                "Tuple[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bool.__hash__": {
            "name": "__hash__",
            "location": 83,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/expression.py": {
        "simplify": {
            "name": "simplify",
            "location": 61,
            "return": [
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "expression": [
                    "str"
                ]
            }
        },
        "Expression.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "bool",
                    "float"
                ],
                "annotations": [
                    "List[int]",
                    "list",
                    "float",
                    "str"
                ]
            }
        },
        "Expression.annotations": {
            "name": "annotations",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.annotate": {
            "name": "annotate",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "annotation": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "Expression.simplify": {
            "name": "simplify",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.size": {
            "name": "size",
            "location": 51,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.__hash__": {
            "name": "__hash__",
            "location": 54,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "models": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "Model.decls": {
            "name": "decls",
            "location": 20,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [
                "Optional[str]",
                "type",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "IO[bytes]"
                ]
            }
        },
        "Model.eval": {
            "name": "eval",
            "location": 45,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "Tuple[int]",
                    "dict"
                ],
                "model_completion": [
                    "bool",
                    "Tuple[int, str]",
                    "Tuple[int]",
                    "str"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/__init__.py": {
        "SymbolFactory.Bool": {
            "name": "Bool",
            "location": 41,
            "return": [
                "T"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "Optional[Tuple[Any, Any]]"
                ],
                "annotations": [
                    "str",
                    "Callable",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "SymbolFactory.BitVecVal": {
            "name": "BitVecVal",
            "location": 51,
            "return": [
                "U"
            ],
            "arguments": {
                "value": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "size": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "annotations": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "SymbolFactory.BitVecSym": {
            "name": "BitVecSym",
            "location": 62,
            "return": [
                "U"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str",
                    "bool",
                    "Optional[float]"
                ],
                "size": [
                    "int",
                    "str",
                    "bool",
                    "Optional[float]"
                ],
                "annotations": [
                    "int",
                    "str",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "SymbolFactory.BitVecFuncVal": {
            "name": "BitVecFuncVal",
            "location": 73,
            "return": [
                "mythril.laser.smt.bitvecfunc.BitVecFunc"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "BitVec",
                    "bool",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "func_name": [
                    "int",
                    "str",
                    "BitVec",
                    "bool",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "size": [
                    "int",
                    "str",
                    "BitVec",
                    "bool",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "annotations": [
                    "int",
                    "str",
                    "BitVec",
                    "bool",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "input_": [
                    "int",
                    "str",
                    "BitVec",
                    "bool",
                    "Sequence[str]",
                    "Optional[Any]"
                ]
            }
        },
        "SymbolFactory.BitVecFuncSym": {
            "name": "BitVecFuncSym",
            "location": 92,
            "return": [
                "mythril.laser.smt.bitvecfunc.BitVecFunc"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "BitVec",
                    "float"
                ],
                "func_name": [
                    "str",
                    "int",
                    "BitVec",
                    "float"
                ],
                "size": [
                    "str",
                    "int",
                    "BitVec",
                    "float"
                ],
                "annotations": [
                    "str",
                    "int",
                    "BitVec",
                    "float"
                ],
                "input_": [
                    "str",
                    "int",
                    "BitVec",
                    "float"
                ]
            }
        },
        "_SmtSymbolFactory.Bool": {
            "name": "Bool",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "float",
                    "Callable[[Any], None]",
                    "int",
                    "str"
                ],
                "annotations": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_SmtSymbolFactory.BitVecVal": {
            "name": "BitVecVal",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float"
                ],
                "size": [
                    "int",
                    "float"
                ],
                "annotations": [
                    "int",
                    "float"
                ]
            }
        },
        "_SmtSymbolFactory.BitVecSym": {
            "name": "BitVecSym",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str"
                ],
                "size": [
                    "int",
                    "str"
                ],
                "annotations": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_SmtSymbolFactory.BitVecFuncVal": {
            "name": "BitVecFuncVal",
            "location": 141,
            "return": [
                "mypy.nodes.Expression"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Callable",
                    "Type",
                    "float",
                    "bool"
                ],
                "func_name": [
                    "str",
                    "BitVec",
                    "Optional[int]"
                ],
                "size": [
                    "int",
                    "Callable",
                    "Type",
                    "float",
                    "bool"
                ],
                "annotations": [
                    "str",
                    "BitVec",
                    "Optional[int]"
                ],
                "input_": [
                    "str",
                    "BitVec",
                    "Optional[int]"
                ]
            }
        },
        "_SmtSymbolFactory.BitVecFuncSym": {
            "name": "BitVecFuncSym",
            "location": 153,
            "return": [
                "mypy.nodes.Expression"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str"
                ],
                "func_name": [
                    "str",
                    "BitVec",
                    "bool"
                ],
                "size": [
                    "int",
                    "str"
                ],
                "annotations": [
                    "str",
                    "BitVec",
                    "bool"
                ],
                "input_": [
                    "str",
                    "BitVec",
                    "bool"
                ]
            }
        },
        "_Z3SymbolFactory.Bool": {
            "name": "Bool",
            "location": 172,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "annotations": [
                    "str",
                    "Callable",
                    "Optional[Tuple[Any, Any]]"
                ]
            }
        },
        "_Z3SymbolFactory.BitVecVal": {
            "name": "BitVecVal",
            "location": 177,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "value": [
                    "int"
                ],
                "size": [
                    "int"
                ],
                "annotations": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "_Z3SymbolFactory.BitVecSym": {
            "name": "BitVecSym",
            "location": 184,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Tuple[str, List[str], List[float], List[str], List[float], List[float], List[Any]]"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str"
                ],
                "size": [
                    "int",
                    "str"
                ],
                "annotations": [
                    "int",
                    "str",
                    "bool",
                    "Optional[float]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/solver/independence_solver.py": {
        "_get_expr_variables": {
            "name": "_get_expr_variables",
            "location": 10,
            "return": [
                "List[Tuple[str, str]]",
                "str",
                "List[str]",
                "Type"
            ],
            "arguments": {
                "expression": [
                    "bytes"
                ]
            }
        },
        "DependenceBucket.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "Callable",
                    "Exception",
                    "str",
                    "bool",
                    "Dict[str, Optional[str]]"
                ],
                "conditions": [
                    "Callable",
                    "Exception",
                    "str",
                    "bool",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "DependenceMap.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DependenceMap.add_condition": {
            "name": "add_condition",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "bool",
                    "Type['Frame']",
                    "Dict[str, Any]",
                    "Callable[[None], bool]"
                ]
            }
        },
        "DependenceMap._merge_buckets": {
            "name": "_merge_buckets",
            "location": 71,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bucket_list": [
                    "Tuple[str, str]",
                    "Iterable[bytes]",
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "IndependenceSolver.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IndependenceSolver.set_timeout": {
            "name": "set_timeout",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "bytes",
                    "float",
                    "Optional[Union[int, slice]]",
                    "str",
                    "Optional[Collection[int]]"
                ]
            }
        },
        "IndependenceSolver.add": {
            "name": "add",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndependenceSolver.append": {
            "name": "append",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndependenceSolver.check": {
            "name": "check",
            "location": 124,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndependenceSolver.model": {
            "name": "model",
            "location": 142,
            "return": [
                "int",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndependenceSolver.reset": {
            "name": "reset",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndependenceSolver.pop": {
            "name": "pop",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/solver/solver.py": {
        "BaseSolver.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseSolver.set_timeout": {
            "name": "set_timeout",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "bytes",
                    "float",
                    "Optional[Union[int, slice]]",
                    "str",
                    "Optional[Collection[int]]"
                ]
            }
        },
        "BaseSolver.add": {
            "name": "add",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSolver.append": {
            "name": "append",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSolver.check": {
            "name": "check",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSolver.model": {
            "name": "model",
            "location": 59,
            "return": [
                "allennlp.models.model.Model",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.reset": {
            "name": "reset",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.pop": {
            "name": "pop",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int"
                ]
            }
        },
        "Optimize.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optimize.minimize": {
            "name": "minimize",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Iterable[str]",
                    "List[int]",
                    "list",
                    "bytes",
                    "T"
                ]
            }
        },
        "Optimize.maximize": {
            "name": "maximize",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Iterable[str]",
                    "List[int]",
                    "list",
                    "bytes",
                    "T"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/solver/solver_statistics.py": {
        "stat_smt_query": {
            "name": "stat_smt_query",
            "location": 8,
            "return": [
                "type",
                "Iterable[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "str"
                ]
            }
        },
        "stat_smt_query.function_wrapper": {
            "name": "function_wrapper",
            "location": 12,
            "return": [
                "bool",
                "Dict[str, type]",
                "int"
            ],
            "arguments": {}
        },
        "SolverStatistics.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SolverStatistics.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/laser/smt/solver/__init__.py": {},
    "mythril-docker-master/mythril/mythril/mythril_analyzer.py": {
        "MythrilAnalyzer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "disassembler": [
                    "bytes",
                    "float"
                ],
                "requires_dynld": [
                    "bytes",
                    "float"
                ],
                "onchain_storage_access": [
                    "bytes",
                    "float"
                ],
                "strategy": [
                    "bytes",
                    "float"
                ],
                "address": [
                    "bytes",
                    "float"
                ],
                "max_depth": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "execution_timeout": [
                    "bool",
                    "str"
                ],
                "loop_bound": [
                    "Optional[int]",
                    "str",
                    "bool",
                    "float",
                    "Union[int, float]"
                ],
                "create_timeout": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "enable_iprof": [
                    "bytes",
                    "float"
                ],
                "disable_dependency_pruning": [
                    "bytes",
                    "float"
                ],
                "solver_timeout": [
                    "Optional[int]",
                    "int",
                    "Optional[List[Any]]",
                    "Dict[str, int]",
                    "Callable[[str], bool]",
                    "List[Tuple[str, Any]]",
                    "T"
                ],
                "enable_coverage_strategy": [
                    "bytes",
                    "float"
                ],
                "custom_modules_directory": [
                    "bool",
                    "int"
                ]
            }
        },
        "MythrilAnalyzer.dump_statespace": {
            "name": "dump_statespace",
            "location": 72,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int"
                ]
            }
        },
        "MythrilAnalyzer.graph_html": {
            "name": "graph_html",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "List[bool]",
                    "str",
                    "int"
                ],
                "enable_physics": [
                    "bool",
                    "float",
                    "int",
                    "Optional[float]"
                ],
                "phrackify": [
                    "bool",
                    "float",
                    "int",
                    "Optional[float]"
                ],
                "transaction_count": [
                    "List[bool]",
                    "str",
                    "int"
                ]
            }
        },
        "MythrilAnalyzer.fire_lasers": {
            "name": "fire_lasers",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "modules": [
                    "Optional[int]",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "int"
                ],
                "transaction_count": [
                    "Optional[int]",
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/mythril/mythril_config.py": {
        "MythrilConfig.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MythrilConfig._init_mythril_dir": {
            "name": "_init_mythril_dir",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "MythrilConfig._init_config": {
            "name": "_init_config",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MythrilConfig._get_default_leveldb_path": {
            "name": "_get_default_leveldb_path",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "MythrilConfig._add_default_options": {
            "name": "_add_default_options",
            "location": 115,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "MythrilConfig._add_leveldb_option": {
            "name": "_add_leveldb_option",
            "location": 124,
            "return": [],
            "arguments": {
                "config": [],
                "leveldb_fallback_dir": []
            }
        },
        "MythrilConfig._add_dynamic_loading_option": {
            "name": "_add_dynamic_loading_option",
            "location": 142,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "MythrilConfig.set_api_leveldb": {
            "name": "set_api_leveldb",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "leveldb_path": []
            }
        },
        "MythrilConfig.set_api_rpc_infura": {
            "name": "set_api_rpc_infura",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MythrilConfig.set_api_rpc": {
            "name": "set_api_rpc",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "rpc": [],
                "rpctls": []
            }
        },
        "MythrilConfig.set_api_rpc_localhost": {
            "name": "set_api_rpc_localhost",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MythrilConfig.set_api_from_config_path": {
            "name": "set_api_from_config_path",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MythrilConfig._set_rpc": {
            "name": "_set_rpc",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "rpc_type": []
            }
        }
    },
    "mythril-docker-master/mythril/mythril/mythril_disassembler.py": {
        "MythrilDisassembler.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eth": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "solc_version": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "solc_args": [
                    "bool",
                    "Callable[[Optional, Optional, str], None]"
                ],
                "enable_online_lookup": [
                    "str",
                    "Optional[float]",
                    "Dict[str, str]"
                ]
            }
        },
        "MythrilDisassembler._init_solc_binary": {
            "name": "_init_solc_binary",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "version": [
                    "int",
                    "str",
                    "Dict[str, float]",
                    "Type",
                    "Sequence[Any]"
                ]
            }
        },
        "MythrilDisassembler.load_from_bytecode": {
            "name": "load_from_bytecode",
            "location": 83,
            "return": [
                "str",
                "list",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Set[str]"
                ],
                "bin_runtime": [
                    "int",
                    "Optional[str]",
                    "Mapping[str, str]",
                    "str",
                    "bool"
                ],
                "address": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "MythrilDisassembler.load_from_address": {
            "name": "load_from_address",
            "location": 113,
            "return": [
                "str",
                "list",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "MythrilDisassembler.load_from_solidity": {
            "name": "load_from_solidity",
            "location": 145,
            "return": [
                "str",
                "list",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "solidity_files": [
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]"
                ]
            }
        },
        "MythrilDisassembler.analyze_truffle_project": {
            "name": "analyze_truffle_project",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MythrilDisassembler.hash_for_function_signature": {
            "name": "hash_for_function_signature",
            "location": 228,
            "return": [
                "Optional[type]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Type"
                ]
            }
        },
        "MythrilDisassembler.get_state_variable_from_storage": {
            "name": "get_state_variable_from_storage",
            "location": 236,
            "return": [
                "str",
                "int",
                "Union[Literal, str]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Optional[str]"
                ],
                "params": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/mythril/mythril_leveldb.py": {
        "MythrilLevelDB.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "leveldb": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MythrilLevelDB.search_db": {
            "name": "search_db",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "search": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        },
        "MythrilLevelDB.contract_hash_to_address": {
            "name": "contract_hash_to_address",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract_hash": [
                    "str"
                ]
            }
        },
        "MythrilLevelDB.search_db.search_callback": {
            "name": "search_callback",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "List[dict]",
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ],
                "address": [
                    "str",
                    "bytes"
                ],
                "balance": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/mythril/__init__.py": {},
    "mythril-docker-master/mythril/solidity/soliditycontract.py": {
        "get_contracts_from_file": {
            "name": "get_contracts_from_file",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "input_file": [
                    "str",
                    "TextIO"
                ],
                "solc_args": [
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ],
                "solc_binary": [
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ]
            }
        },
        "SourceMapping.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "solidity_file_idx": [
                    "bool",
                    "TextIO",
                    "str"
                ],
                "offset": [
                    "bool",
                    "str",
                    "List[int]",
                    "bytes"
                ],
                "length": [
                    "bool",
                    "str",
                    "List[int]",
                    "bytes"
                ],
                "lineno": [
                    "bool",
                    "str",
                    "List[int]",
                    "bytes"
                ],
                "mapping": [
                    "bool",
                    "Callable",
                    "Dict[str, Any]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "SolidityFile.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bytes",
                    "denite.util.Candidates",
                    "bool"
                ],
                "data": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Mapping",
                    "bytes"
                ],
                "full_contract_src_maps": [
                    "str"
                ]
            }
        },
        "SourceCodeInfo.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "lineno": [
                    "bool",
                    "List[List[str]]",
                    "Optional[Mapping]",
                    "int",
                    "Sequence"
                ],
                "code": [
                    "bool",
                    "List[List[str]]",
                    "Optional[Mapping]",
                    "int",
                    "Sequence"
                ],
                "mapping": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "SolidityContract.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_file": [
                    "str"
                ],
                "name": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Iterable[str]"
                ],
                "solc_args": [
                    "str"
                ],
                "solc_binary": [
                    "str"
                ]
            }
        },
        "SolidityContract.get_full_contract_src_maps": {
            "name": "get_full_contract_src_maps",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "ast": [
                    "str",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "SolidityContract.get_source_info": {
            "name": "get_source_info",
            "location": 147,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "constructor": [
                    "Dict[str, Any]"
                ]
            }
        },
        "SolidityContract._is_autogenerated_code": {
            "name": "_is_autogenerated_code",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "bool",
                    "str"
                ],
                "length": [
                    "bool",
                    "str"
                ],
                "file_index": [
                    "bool",
                    "str"
                ]
            }
        },
        "SolidityContract._get_solc_mappings": {
            "name": "_get_solc_mappings",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "srcmap": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "constructor": [
                    "bool",
                    "Optional[Callable[[str], bool]]",
                    "str",
                    "Union[bool, str]"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/solidity/__init__.py": {},
    "mythril-docker-master/mythril/support/loader.py": {
        "DynLoader.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "eth": [
                    "int",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "contract_loading": [
                    "int",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "storage_loading": [
                    "int",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DynLoader.read_storage": {
            "name": "read_storage",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_address": [
                    "str",
                    "int"
                ],
                "index": [
                    "str",
                    "int"
                ]
            }
        },
        "DynLoader.dynld": {
            "name": "dynld",
            "location": 51,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "dependency_address": [
                    "str",
                    "float",
                    "logging.LogRecord"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/support/opcodes.py": {},
    "mythril-docker-master/mythril/support/signatures.py": {
        "synchronized": {
            "name": "synchronized",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sync_lock": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "synchronized.wrapper": {
            "name": "wrapper",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Singleton.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [
                    "type",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "SQLiteDB.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SQLiteDB.__enter__": {
            "name": "__enter__",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteDB.__exit__": {
            "name": "__exit__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_class": [
                    "type"
                ],
                "exc": [
                    "type"
                ],
                "traceback": [
                    "type"
                ]
            }
        },
        "SQLiteDB.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [
                "Tuple[str, str]",
                "Union[dict, list]",
                "subprocess.CompletedProcess",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureDB.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enable_online_lookup": [
                    "Iterator[int]",
                    "List[float]",
                    "str",
                    "int",
                    "Optional[sqlite3.Connection]",
                    "Tuple[int]"
                ],
                "path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Callable[[dict], dict]]",
                    "int"
                ]
            }
        },
        "SignatureDB.__getitem__": {
            "name": "__getitem__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Tuple[int, int]",
                    "TextIO"
                ]
            }
        },
        "SignatureDB._normalize_byte_sig": {
            "name": "_normalize_byte_sig",
            "location": 156,
            "return": [
                "str",
                "bytearray",
                "Tuple[float, float]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "byte_sig": [
                    "str",
                    "bytes",
                    "IO",
                    "int"
                ]
            }
        },
        "SignatureDB.add": {
            "name": "add",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "byte_sig": [
                    "str",
                    "functools.partial[bytes]",
                    "int"
                ],
                "text_sig": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "SignatureDB.get": {
            "name": "get",
            "location": 185,
            "return": [
                "str",
                "List[str]",
                "set",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "byte_sig": [
                    "int",
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ],
                "online_timeout": [
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "SignatureDB.import_solidity_file": {
            "name": "import_solidity_file",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "Optional[str]",
                    "Union[str, bytes, int]",
                    "List[str]"
                ],
                "solc_binary": [
                    "str",
                    "Optional[str]",
                    "Union[str, bytes, int]",
                    "List[str]"
                ],
                "solc_args": [
                    "List[str]",
                    "bool",
                    "\"ByteSource\"",
                    "Dict[str, str]",
                    "Iterable[str]"
                ]
            }
        },
        "SignatureDB.lookup_online": {
            "name": "lookup_online",
            "location": 283,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "float",
                "List[List[Any]]",
                "List[float]",
                "Tuple[int, int, int]",
                "list"
            ],
            "arguments": {
                "byte_sig": [
                    "int",
                    "str",
                    "Callable",
                    "List[int]"
                ],
                "timeout": [
                    "int",
                    "str",
                    "Callable",
                    "List[int]"
                ],
                "proxies": [
                    "int",
                    "str",
                    "Callable",
                    "List[int]"
                ]
            }
        },
        "SignatureDB.__repr__": {
            "name": "__repr__",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "synchronized.wrapper.inner_wrapper": {
            "name": "inner_wrapper",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/mythril/support/source_support.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source_type": [
                    "Optional[str]",
                    "str",
                    "Optional[Type]",
                    "Union[str, int]"
                ],
                "source_format": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "source_list": [
                    "int",
                    "bool"
                ]
            }
        },
        "Source.get_source_from_contracts_list": {
            "name": "get_source_from_contracts_list",
            "location": 20,
            "return": [
                "Set[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "contracts": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "Source.get_source_index": {
            "name": "get_source_index",
            "location": 52,
            "return": [
                "str",
                "set",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "bytecode_hash": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/support/start_time.py": {
        "StartTime.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/mythril/support/support_utils.py": {
        "get_code_hash": {
            "name": "get_code_hash",
            "location": 29,
            "return": [
                "str",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "Singleton.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [
                    "type",
                    "Set[str]",
                    "str"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/support/truffle.py": {
        "format_Warning": {
            "name": "format_Warning",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "bool"
                ],
                "category": [
                    "bool",
                    "List[dict]",
                    "str",
                    "List[str]",
                    "int"
                ],
                "filename": [
                    "str",
                    "int",
                    "bool"
                ],
                "lineno": [
                    "bool",
                    "List[dict]",
                    "str",
                    "List[str]",
                    "int"
                ],
                "line": [
                    "bool",
                    "List[dict]",
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "analyze_truffle_project": {
            "name": "analyze_truffle_project",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "sigs": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "args": []
            }
        },
        "get_sigs_from_truffle": {
            "name": "get_sigs_from_truffle",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "sigs": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "contract_data": [
                    "dict",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "get_mappings": {
            "name": "get_mappings",
            "location": 173,
            "return": [
                "str",
                "dict",
                "Set[str]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "deployed_source_map": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Iterable[bytes]",
                    "list"
                ]
            }
        }
    },
    "mythril-docker-master/mythril/support/__init__.py": {},
    "mythril-docker-master/tests/cmd_line_test.py": {
        "output_of": {
            "name": "output_of",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "command": [
                    "Optional[int]",
                    "int",
                    "dict",
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "CommandLineToolTestCase.test_disassemble_code_correctly": {
            "name": "test_disassemble_code_correctly",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_disassemble_solidity_file_correctly": {
            "name": "test_disassemble_solidity_file_correctly",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_hash_a_function_correctly": {
            "name": "test_hash_a_function_correctly",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_failure_json": {
            "name": "test_failure_json",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_failure_text": {
            "name": "test_failure_text",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_failure_jsonv2": {
            "name": "test_failure_jsonv2",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_analyze": {
            "name": "test_analyze",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_analyze_bytecode": {
            "name": "test_analyze_bytecode",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_invalid_args_iprof": {
            "name": "test_invalid_args_iprof",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_only_epic": {
            "name": "test_only_epic",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandLineToolTestCase.test_storage": {
            "name": "test_storage",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TruffleTestCase.test_analysis_truffle_project": {
            "name": "test_analysis_truffle_project",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraTestCase.test_infura_mainnet": {
            "name": "test_infura_mainnet",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraTestCase.test_infura_rinkeby": {
            "name": "test_infura_rinkeby",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraTestCase.test_infura_kovan": {
            "name": "test_infura_kovan",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraTestCase.test_infura_ropsten": {
            "name": "test_infura_ropsten",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/tests/disassembler_test.py": {
        "_compile_to_code": {
            "name": "_compile_to_code",
            "location": 6,
            "return": [
                "str",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "input_file": [
                    "str"
                ]
            }
        },
        "DisassemblerTestCase.test_instruction_list": {
            "name": "test_instruction_list",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DisassemblerTestCase.test_easm_from_solidity_files": {
            "name": "test_easm_from_solidity_files",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/tests/evmcontract_test.py": {
        "EVMContractTestCase.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Getinstruction_listTestCase.runTest": {
            "name": "runTest",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GetEASMTestCase.runTest": {
            "name": "runTest",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MatchesExpressionTestCase.runTest": {
            "name": "runTest",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/tests/graph_test.py": {
        "GraphTest.test_generate_graph": {
            "name": "test_generate_graph",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/tests/native_test.py": {
        "_all_info": {
            "name": "_all_info",
            "location": 32,
            "return": [
                "str",
                "IO[str]",
                "Iterable[str]",
                "Iterable[int]"
            ],
            "arguments": {
                "laser": [
                    "Dict[str, Any]",
                    "int",
                    "dict",
                    "Hashable"
                ]
            }
        },
        "_test_natives": {
            "name": "_test_natives",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "laser_info": [
                    "int",
                    "str",
                    "dict"
                ],
                "test_list": [
                    "Set[str]",
                    "bool",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[Callable[[Any], bool]]",
                    "str",
                    "Iterable[str]"
                ],
                "test_name": [
                    "Set[str]",
                    "bool",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "Optional[Callable[[Any], bool]]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "NativeTests.runTest": {
            "name": "runTest",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/rpc_test.py": {
        "RpcTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcTest.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcTest.test_eth_coinbase": {
            "name": "test_eth_coinbase",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcTest.test_eth_blockNumber": {
            "name": "test_eth_blockNumber",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcTest.test_eth_getBalance": {
            "name": "test_eth_getBalance",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcTest.test_eth_getStorageAt": {
            "name": "test_eth_getStorageAt",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcTest.test_eth_getBlockByNumber": {
            "name": "test_eth_getBlockByNumber",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcTest.test_eth_getCode": {
            "name": "test_eth_getCode",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcTest.test_eth_getTransactionReceipt": {
            "name": "test_eth_getTransactionReceipt",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/tests/solidity_contract_test.py": {
        "SolidityContractTest.test_get_source_info_without_name_gets_latest_contract_info": {
            "name": "test_get_source_info_without_name_gets_latest_contract_info",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SolidityContractTest.test_get_source_info_with_contract_name_specified": {
            "name": "test_get_source_info_with_contract_name_specified",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SolidityContractTest.test_get_source_info_with_contract_name_specified_constructor": {
            "name": "test_get_source_info_with_contract_name_specified_constructor",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/tests/__init__.py": {
        "BaseTestCase.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.compare_files_error_message": {
            "name": "compare_files_error_message",
            "location": 26,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTestCase.found_changed_files": {
            "name": "found_changed_files",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_file": [
                    "str",
                    "List[str]",
                    "Callable[[str], str]",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Path"
                ],
                "output_expected": [
                    "str",
                    "List[str]",
                    "Callable[[str], str]",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Path"
                ],
                "output_current": [
                    "str",
                    "List[str]",
                    "Callable[[str], str]",
                    "Iterable[str]",
                    "pathlib.Path",
                    "Path"
                ]
            }
        },
        "BaseTestCase.assert_and_show_changed_files": {
            "name": "assert_and_show_changed_files",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mythril-docker-master/tests/cli_tests/test_cli_opts.py": {
        "test_version_opt": {
            "name": "test_version_opt",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "tsrc.teshelpers.cli.CLI",
                    "bool"
                ]
            }
        }
    },
    "mythril-docker-master/tests/disassembler/asm.py": {
        "test_get_opcode": {
            "name": "test_get_opcode",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "operation_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "hex_value": [
                    "int",
                    "bool",
                    "dict",
                    "Dict[str, str]",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "test_get_unknown_opcode": {
            "name": "test_get_unknown_opcode",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_sequence_match": {
            "name": "test_is_sequence_match",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "pattern": [
                    "Optional[str]",
                    "Optional[int]"
                ],
                "instruction_list": [
                    "Optional[str]",
                    "Optional[int]"
                ],
                "index": [
                    "Optional[str]",
                    "Optional[int]"
                ],
                "expected_result": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_find_op_code_sequence": {
            "name": "test_find_op_code_sequence",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "pattern": [
                    "dict",
                    "list"
                ],
                "instruction_list": [
                    "dict",
                    "list"
                ],
                "expected_result": [
                    "str",
                    "float"
                ]
            }
        },
        "test_disassemble": {
            "name": "test_disassemble",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/disassembler/disassembly.py": {
        "test_get_function_info": {
            "name": "test_get_function_info",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_get_function_info_multiple_names": {
            "name": "test_get_function_info_multiple_names",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_get_function_info_no_names": {
            "name": "test_get_function_info_no_names",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "mythril-docker-master/tests/disassembler/__init__.py": {},
    "mythril-docker-master/tests/instructions/codecopy_test.py": {
        "test_codecopy_concrete": {
            "name": "test_codecopy_concrete",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/instructions/sar_test.py": {
        "get_state": {
            "name": "get_state",
            "location": 15,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "test_sar": {
            "name": "test_sar",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "output": [
                    "int"
                ]
            }
        },
        "test_concrete_sar": {
            "name": "test_concrete_sar",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "val1": [
                    "int",
                    "Callable[[T], bool]",
                    "str"
                ],
                "val2": [
                    "int",
                    "Callable[[T], bool]",
                    "str"
                ],
                "expected": [
                    "int"
                ]
            }
        }
    },
    "mythril-docker-master/tests/instructions/shl_test.py": {
        "get_state": {
            "name": "get_state",
            "location": 14,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "test_shl": {
            "name": "test_shl",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "output": [
                    "int"
                ]
            }
        },
        "test_concrete_shl": {
            "name": "test_concrete_shl",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "val1": [
                    "int",
                    "Callable[[T], bool]",
                    "str"
                ],
                "val2": [
                    "int",
                    "Callable[[T], bool]",
                    "str"
                ],
                "expected": [
                    "int"
                ]
            }
        }
    },
    "mythril-docker-master/tests/instructions/shr_test.py": {
        "get_state": {
            "name": "get_state",
            "location": 14,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "test_shr": {
            "name": "test_shr",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "output": [
                    "int"
                ]
            }
        },
        "test_concrete_shr": {
            "name": "test_concrete_shr",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "val1": [
                    "int",
                    "Callable[[T], bool]",
                    "str"
                ],
                "val2": [
                    "int",
                    "Callable[[T], bool]",
                    "str"
                ],
                "expected": [
                    "int"
                ]
            }
        }
    },
    "mythril-docker-master/tests/instructions/__init__.py": {},
    "mythril-docker-master/tests/laser/test_transaction.py": {
        "test_intercontract_call": {
            "name": "test_intercontract_call",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/__init__.py": {},
    "mythril-docker-master/tests/laser/evm_testsuite/evm_test.py": {
        "load_test_data": {
            "name": "load_test_data",
            "location": 62,
            "return": [
                "List[pathlib.Path]",
                "bool",
                "dict"
            ],
            "arguments": {
                "designations": [
                    "int",
                    "List[str]",
                    "Tuple[int, int]",
                    "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                    "Sequence[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_vmtest": {
            "name": "test_vmtest",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "test_name": [
                    "str",
                    "pathlib.Path",
                    "Callable"
                ],
                "environment": [
                    "dict",
                    "int",
                    "Optional[int]"
                ],
                "pre_condition": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ],
                "action": [
                    "Callable",
                    "int"
                ],
                "gas_used": [
                    "dict",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "post_condition": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "mythril-docker-master/tests/laser/Precompiles/test_ec_add.py": {
        "test_ec_add_sanity": {
            "name": "test_ec_add_sanity",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ec_add": {
            "name": "test_ec_add",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "f1": [
                    "str",
                    "List[List[int]]",
                    "int",
                    "List[str]"
                ],
                "f2": [
                    "bool",
                    "int",
                    "Callable",
                    "list"
                ],
                "f3": [
                    "bool",
                    "int",
                    "Callable",
                    "list"
                ]
            }
        }
    },
    "mythril-docker-master/tests/laser/Precompiles/test_elliptic_curves.py": {
        "test_ec_pair_192_check": {
            "name": "test_ec_pair_192_check",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ec_pair": {
            "name": "test_ec_pair",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "f1": [
                    "str"
                ],
                "f2": [
                    "int",
                    "Callable[..., None]",
                    "Callable",
                    "list",
                    "str",
                    "List[bool]"
                ],
                "f3": [
                    "int",
                    "Callable[..., None]",
                    "Callable",
                    "list",
                    "str",
                    "List[bool]"
                ],
                "f4": [
                    "int",
                    "Callable[..., None]",
                    "Callable",
                    "list",
                    "str",
                    "List[bool]"
                ]
            }
        },
        "test_ec_pair_point_validation_failure": {
            "name": "test_ec_pair_point_validation_failure",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "f1": [
                    "Callable",
                    "Dict[str, str]",
                    "List[List[Any]]",
                    "bool",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_ec_pair_field_exceed_mod": {
            "name": "test_ec_pair_field_exceed_mod",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "f1": [
                    "List[List[int]]",
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "mythril-docker-master/tests/laser/Precompiles/test_elliptic_mul.py": {
        "test_ec_mul": {
            "name": "test_ec_mul",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "f1": [
                    "str",
                    "dict",
                    "int",
                    "List[str]",
                    "List[int]",
                    "List[List[int]]"
                ],
                "f2": [
                    "bool",
                    "int",
                    "Callable",
                    "list",
                    "Literal"
                ],
                "f3": [
                    "bool",
                    "int",
                    "Callable",
                    "list",
                    "Literal"
                ]
            }
        },
        "test_ec_mul_validation_failure": {
            "name": "test_ec_mul_validation_failure",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/Precompiles/test_mod_exp.py": {
        "test_modexp_result": {
            "name": "test_modexp_result",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "List[Dict[str, str]]",
                    "tuple"
                ],
                "expected": [
                    "int",
                    "str",
                    "List[bytes]"
                ]
            }
        }
    },
    "mythril-docker-master/tests/laser/smt/bitvecfunc_test.py": {
        "test_bitvecfunc_arithmetic": {
            "name": "test_bitvecfunc_arithmetic",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "operation": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "expected": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_bitvecfunc_bitvecfunc_comparison": {
            "name": "test_bitvecfunc_bitvecfunc_comparison",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "operation": [
                    "str",
                    "set"
                ],
                "expected": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_bitvecfunc_bitvecfuncval_comparison": {
            "name": "test_bitvecfunc_bitvecfuncval_comparison",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitvecfunc_nested_comparison": {
            "name": "test_bitvecfunc_nested_comparison",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitvecfunc_unequal_nested_comparison": {
            "name": "test_bitvecfunc_unequal_nested_comparison",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitvecfunc_ext_nested_comparison": {
            "name": "test_bitvecfunc_ext_nested_comparison",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitvecfunc_ext_unequal_nested_comparison": {
            "name": "test_bitvecfunc_ext_unequal_nested_comparison",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitvecfunc_ext_unequal_nested_comparison_f": {
            "name": "test_bitvecfunc_ext_unequal_nested_comparison_f",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitvecfunc_find_input": {
            "name": "test_bitvecfunc_find_input",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitvecfunc_nested_find_input": {
            "name": "test_bitvecfunc_nested_find_input",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/smt/independece_solver_test.py": {
        "test_get_expr_variables": {
            "name": "test_get_expr_variables",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_expr_variables_num": {
            "name": "test_get_expr_variables_num",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_bucket": {
            "name": "test_create_bucket",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dependence_map": {
            "name": "test_dependence_map",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Independence_solver_unsat": {
            "name": "test_Independence_solver_unsat",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_independence_solver_unsat_in_second_bucket": {
            "name": "test_independence_solver_unsat_in_second_bucket",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_independence_solver_sat": {
            "name": "test_independence_solver_sat",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/smt/model_test.py": {
        "test_decls": {
            "name": "test_decls",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_item": {
            "name": "test_get_item",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_as_long": {
            "name": "test_as_long",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/smt/__init__.py": {},
    "mythril-docker-master/tests/laser/state/calldata_test.py": {
        "test_concrete_calldata_uninitialized_index": {
            "name": "test_concrete_calldata_uninitialized_index",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "starting_calldata": [
                    "int",
                    "float",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "Union[int, float]"
                ]
            }
        },
        "test_concrete_calldata_calldatasize": {
            "name": "test_concrete_calldata_calldatasize",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_concrete_calldata_constrain_index": {
            "name": "test_concrete_calldata_constrain_index",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_symbolic_calldata_constrain_index": {
            "name": "test_symbolic_calldata_constrain_index",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_symbolic_calldata_equal_indices": {
            "name": "test_symbolic_calldata_equal_indices",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/state/mstack_test.py": {
        "MachineStackTest.test_mstack_constructor": {
            "name": "test_mstack_constructor",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MachineStackTest.test_mstack_append_single_element": {
            "name": "test_mstack_append_single_element",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MachineStackTest.test_mstack_append_multiple_elements": {
            "name": "test_mstack_append_multiple_elements",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MachineStackTest.test_mstack_pop": {
            "name": "test_mstack_pop",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MachineStackTest.test_mstack_no_support_add": {
            "name": "test_mstack_no_support_add",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MachineStackTest.test_mstack_no_support_iadd": {
            "name": "test_mstack_no_support_iadd",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/state/mstate_test.py": {
        "test_memory_extension": {
            "name": "test_memory_extension",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "initial_size": [
                    "int"
                ],
                "start": [
                    "Callable",
                    "int",
                    "float"
                ],
                "extension_size": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "test_stack_pop_too_many": {
            "name": "test_stack_pop_too_many",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "initial_size": [
                    "str",
                    "float",
                    "bytes",
                    "int"
                ],
                "overflow": [
                    "int",
                    "str",
                    "raiden.utils.Address"
                ]
            }
        },
        "test_stack_multiple_pop": {
            "name": "test_stack_multiple_pop",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "initial_stack": [
                    "List[List[int]]",
                    "float",
                    "Set[str]"
                ],
                "amount": [
                    "str",
                    "int",
                    "List[List[int]]"
                ],
                "expected": []
            }
        },
        "test_stack_multiple_pop_": {
            "name": "test_stack_multiple_pop_",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_stack_single_pop": {
            "name": "test_stack_single_pop",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_memory_zeroed": {
            "name": "test_memory_zeroed",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_memory_write": {
            "name": "test_memory_write",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/state/storage_test.py": {
        "test_concrete_storage_uninitialized_index": {
            "name": "test_concrete_storage_uninitialized_index",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "initial_storage": [
                    "bool",
                    "Dict[str, Optional[str]]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_symbolic_storage_uninitialized_index": {
            "name": "test_symbolic_storage_uninitialized_index",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "initial_storage": [
                    "bool",
                    "Dict[str, Optional[str]]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_storage_set_item": {
            "name": "test_storage_set_item",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_storage_change_item": {
            "name": "test_storage_change_item",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/state/world_state_account_exist_load_test.py": {
        "_get_global_state": {
            "name": "_get_global_state",
            "location": 14,
            "return": [
                "str",
                "bool",
                "raiden.utils.List[raiden.transfer.state.RouteState]",
                "raiden.transfer.state.NettingChannelState",
                "raiden.transfer.state.ChainState"
            ],
            "arguments": {}
        },
        "test_extraction": {
            "name": "test_extraction",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "addr": [
                    "str",
                    "bool",
                    "int"
                ],
                "eth": [
                    "str"
                ],
                "code_len": [
                    "str"
                ]
            }
        }
    },
    "mythril-docker-master/tests/laser/state/__init__.py": {},
    "mythril-docker-master/tests/laser/transaction/create_transaction_test.py": {
        "test_create": {
            "name": "test_create",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sym_exec": {
            "name": "test_sym_exec",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/laser/transaction/symbolic_test.py": {
        "_is_message_call": {
            "name": "_is_message_call",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "_": [],
                "transaction": [
                    "Callable"
                ]
            }
        },
        "_is_contract_creation": {
            "name": "_is_contract_creation",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "str",
                    "Type[T]",
                    "List[Dict[str, Any]]",
                    "Dict[int, str]",
                    "bool"
                ],
                "transaction": [
                    "Tuple[int, int]",
                    "str",
                    "int"
                ]
            }
        },
        "test_execute_message_call": {
            "name": "test_execute_message_call",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_setup": [
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_execute_contract_creation": {
            "name": "test_execute_contract_creation",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_setup": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "mythril-docker-master/tests/laser/transaction/__init__.py": {},
    "mythril-docker-master/tests/mythril/mythril_analyzer_test.py": {
        "test_fire_lasers": {
            "name": "test_fire_lasers",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "mock_sym": [
                    "mock.Mock"
                ],
                "mock_fire_lasers": [
                    "mock.MagicMock"
                ],
                "mock_code_info": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "mythril-docker-master/tests/mythril/mythril_config_test.py": {
        "test_config_path_dynloading": {
            "name": "test_config_path_dynloading",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_rpc": {
            "name": "test_set_rpc",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "rpc_type": [
                    "str",
                    "type"
                ],
                "host": [
                    "str",
                    "pathlib.Path"
                ],
                "port": [
                    "str",
                    "pathlib.Path"
                ],
                "success": [
                    "Type[Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "test_leveldb_config_addition": {
            "name": "test_leveldb_config_addition",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dynld_config_addition": {
            "name": "test_dynld_config_addition",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/mythril/mythril_disassembler_test.py": {
        "test_get_data_from_storage": {
            "name": "test_get_data_from_storage",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "Dict[str, Any]"
                ],
                "ans": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_get_data_from_storage_incorrect_params": {
            "name": "test_get_data_from_storage_incorrect_params",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_solc_install": {
            "name": "test_solc_install",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "mythril-docker-master/tests/mythril/mythril_leveldb_test.py": {
        "test_leveldb_code_search": {
            "name": "test_leveldb_code_search",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "mock_leveldb": [],
                "f1": [
                    "Generator[None, Any, None]",
                    "mock.Mock"
                ],
                "f2": [
                    "Generator[None, Any, None]",
                    "mock.Mock"
                ],
                "f3": [
                    "Generator[None, Any, None]",
                    "mock.Mock"
                ]
            }
        },
        "test_leveldb_hash_search_incorrect_input": {
            "name": "test_leveldb_hash_search_incorrect_input",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "f1": [
                    "bool",
                    "int",
                    "Callable",
                    "list"
                ],
                "f2": [
                    "bool",
                    "int",
                    "Callable",
                    "list"
                ],
                "f3": [
                    "bool",
                    "int",
                    "Callable",
                    "list"
                ]
            }
        },
        "test_leveldb_hash_search_correct_input": {
            "name": "test_leveldb_hash_search_correct_input",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "mock_hash_to_address": [
                    "int"
                ],
                "f1": [
                    "bool",
                    "str"
                ],
                "f2": [
                    "bool",
                    "str"
                ],
                "f3": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "mythril-docker-master/tests/testdata/compile.py": {},
    "mythril-docker-master/tests/testdata/__init__.py": {}
}
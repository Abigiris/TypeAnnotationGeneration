{
    "net-analysis-master/setup.py": {},
    "net-analysis-master/netanalysis/__init__.py": {},
    "net-analysis-master/netanalysis/dns/__init__.py": {},
    "net-analysis-master/netanalysis/dns/analysis/analysis_app.py": {
        "_truncate": {
            "name": "_truncate",
            "location": 51,
            "return": [],
            "arguments": {
                "text": [],
                "max_len": []
            }
        },
        "AnalysisApp.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "measurements_dir": []
            }
        },
        "AnalysisApp.domain_app": {
            "name": "domain_app",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "domain": []
            }
        },
        "AnalysisApp.update_progress": {
            "name": "update_progress",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "done": [],
                "total": []
            }
        },
        "DomainApp.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "dns_graph": [],
                "domain": []
            }
        },
        "DomainApp.display_graph": {
            "name": "display_graph",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "country": []
            }
        },
        "DomainApp.get_ips": {
            "name": "get_ips",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "net": []
            }
        }
    },
    "net-analysis-master/netanalysis/dns/analysis/analyze_domain.py": {
        "path_get": {
            "name": "path_get",
            "location": 71,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "d": [
                    "int",
                    "str"
                ],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "get_dns_results": {
            "name": "get_dns_results",
            "location": 89,
            "return": [
                "int",
                "bool",
                "Union[int, float, complex]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "as_repo": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "measurements": [
                    "List[Dict]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "get_control_resolutions": {
            "name": "get_control_resolutions",
            "location": 118,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "measurements": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "count_resolutions": {
            "name": "count_resolutions",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dns_results": [
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_ips": {
            "name": "get_ips",
            "location": 145,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dns_resolutions": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "is_success_http_code": {
            "name": "is_success_http_code",
            "location": 159,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "http_code": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "group_by": {
            "name": "group_by",
            "location": 204,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "Sequence[str]",
                    "Tuple[Sequence[Any], Sequence[str], Sequence[Any]]",
                    "Tuple[str, Sequence[str], Sequence[str]]",
                    "Optional[str]"
                ],
                "get_key": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "make_resolver_key": {
            "name": "make_resolver_key",
            "location": 211,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "as_repo": [
                    "Optional[str]",
                    "int"
                ],
                "resolution": [
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "as_str": {
            "name": "as_str",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "asys": [
                    "str"
                ]
            }
        },
        "resolve_ip": {
            "name": "resolve_ip",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ip": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Tuple[str, int]",
                    "dict"
                ]
            }
        },
        "show_resolutions_graph": {
            "name": "show_resolutions_graph",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "as_repo": [
                    "bool",
                    "str",
                    "int"
                ],
                "domain": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, Set]]"
                ],
                "control_resolutions": [
                    "Dict[str, Any]",
                    "float",
                    "int"
                ],
                "dns_resolutions": [
                    "Dict[str, Any]",
                    "float",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "DnsResolution.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "measurement": [
                    "bool",
                    "float",
                    "Tuple[str, str, str]",
                    "str",
                    "Union[str, int]"
                ],
                "country": [
                    "bool",
                    "float",
                    "Tuple[str, str, str]",
                    "str",
                    "Union[str, int]"
                ],
                "resolver_ip": [
                    "bool",
                    "float",
                    "Tuple[str, str, str]",
                    "str",
                    "Union[str, int]"
                ],
                "client_as": [
                    "bool",
                    "float",
                    "Tuple[str, str, str]",
                    "str",
                    "Union[str, int]"
                ],
                "time": [
                    "bool",
                    "float",
                    "Tuple[str, str, str]",
                    "str",
                    "Union[str, int]"
                ],
                "url": [
                    "bool",
                    "float",
                    "Tuple[str, str, str]",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "DnsResolution.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DnsResolutionClassifier.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DnsResolutionClassifier._get_ip_key": {
            "name": "_get_ip_key",
            "location": 167,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "Callable[[None, None], bool]",
                    "dict",
                    "str"
                ]
            }
        },
        "DnsResolutionClassifier.add_good_resolution": {
            "name": "add_good_resolution",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resolution": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "DnsResolutionClassifier.classify_resolutions": {
            "name": "classify_resolutions",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "resolutions": [
                    "list",
                    "int",
                    "str"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/dns/analysis/classifier.py": {
        "edge_class": {
            "name": "edge_class",
            "location": 31,
            "return": [
                "bool",
                "str",
                "Callable",
                "Type",
                "Optional[str]"
            ],
            "arguments": {
                "class_graph": [
                    "int",
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "Pattern"
                ],
                "u": [
                    "int",
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "Pattern"
                ],
                "v": [
                    "int",
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "Pattern"
                ]
            }
        },
        "good_predecessors": {
            "name": "good_predecessors",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "class_graph": [
                    "list",
                    "int"
                ],
                "node": [
                    "list",
                    "int"
                ]
            }
        },
        "good_successors": {
            "name": "good_successors",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "class_graph": [
                    "int",
                    "bool"
                ],
                "node": [
                    "int",
                    "bool"
                ]
            }
        },
        "classify_edges": {
            "name": "classify_edges",
            "location": 119,
            "return": [
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "multi_graph": [
                    "str",
                    "dict",
                    "List[float]"
                ]
            }
        },
        "_get_edge_class": {
            "name": "_get_edge_class",
            "location": 123,
            "return": [
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "edge_data": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "draw_graph": {
            "name": "draw_graph",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "graph": [
                    "Optional[List[str]]"
                ]
            }
        },
        "EdgeClassifier.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "multi_graph": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "EdgeClassifier.get_class": {
            "name": "get_class",
            "location": 70,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Dict[str, str]",
                    "Tuple[type]",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict"
                ],
                "v": [
                    "Dict[str, str]",
                    "Tuple[type]",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "EdgeClassifier.mark_all_paths_good": {
            "name": "mark_all_paths_good",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u": [
                    "str",
                    "Optional[Callable]",
                    "int",
                    "bool"
                ],
                "v": [
                    "Optional[Union[str, Any]]",
                    "\"Pipeline\"",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        },
        "EdgeClassifier.mark_new_connections_good": {
            "name": "mark_new_connections_good",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u": [
                    "str",
                    "Callable",
                    "int"
                ],
                "v": [
                    "Tuple[int, int]",
                    "str",
                    "Callable[[], object]"
                ]
            }
        },
        "EdgeClassifier.add_good_edge": {
            "name": "add_good_edge",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "dict"
                ],
                "v": [
                    "int",
                    "dict"
                ],
                "reason": [
                    "str",
                    "int"
                ]
            }
        },
        "EdgeClassifier.add_bad_edge": {
            "name": "add_bad_edge",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "u": [
                    "Callable",
                    "Sequence[str]"
                ],
                "v": [
                    "Callable",
                    "Sequence[str]"
                ],
                "reason": [
                    "str",
                    "int"
                ]
            }
        },
        "EdgeClassifier.unknown_edges": {
            "name": "unknown_edges",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "net-analysis-master/netanalysis/dns/analysis/graph.py": {
        "_get_edge_target": {
            "name": "_get_edge_target",
            "location": 25,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "load_dns_records_graph": {
            "name": "load_dns_records_graph",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dns_measurements_filename": [
                    "int",
                    "bytes",
                    "Set[str]",
                    "bool"
                ],
                "update_progress": [
                    "bytes",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "domain_view": {
            "name": "domain_view",
            "location": 61,
            "return": [
                "Callable",
                "bool",
                "int"
            ],
            "arguments": {
                "multi_graph": [
                    "str",
                    "networkx.MultiDiGraph",
                    "bool",
                    "List[List[int]]"
                ],
                "root_domain": [
                    "str",
                    "networkx.MultiDiGraph",
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "country_view": {
            "name": "country_view",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "multi_graph": [
                    "Dict[str, Any]",
                    "dict",
                    "list",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "client_country": [
                    "dict",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/dns/analysis/ip_info_widget.py": {
        "create_ip_info_widget": {
            "name": "create_ip_info_widget",
            "location": 31,
            "return": [
                "Callable",
                "int",
                "list"
            ],
            "arguments": {
                "ip_info": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "create_ip_info_widget.show_ip_info": {
            "name": "show_ip_info",
            "location": 36,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "_": [
                    "int"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/dns/analysis/__init__.py": {},
    "net-analysis-master/netanalysis/dns/data/model.py": {
        "RecordData.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IpAddressData.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip_str": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "IpAddressData.ip": {
            "name": "ip",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CnameData.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cname": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CnameData.cname": {
            "name": "cname",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceRecord.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "data": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Iterable[dict]",
                    "dict"
                ],
                "ttl": [
                    "Optional[str]",
                    "Optional[datetime.datetime]",
                    "Optional[Callable]",
                    "bool",
                    "str"
                ]
            }
        },
        "ResourceRecord.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DnsMeasurement.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "measurement_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "time": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "records": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "resolver_ip": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "client_asn": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "client_country": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "provenance": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "trust_reason": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ]
            }
        },
        "DnsMeasurement.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [
                "str",
                "dict",
                "Iterable[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "net-analysis-master/netanalysis/dns/data/serialization.py": {
        "to_json": {
            "name": "to_json",
            "location": 25,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "measurement": [
                    "str",
                    "Union[str, Dict]",
                    "List[dict]"
                ]
            }
        },
        "record_data_from_json": {
            "name": "record_data_from_json",
            "location": 69,
            "return": [
                "\"Index\"",
                "\"Person\"",
                "\"Action\"",
                "bytes",
                "str"
            ],
            "arguments": {
                "data_json": [
                    "int",
                    "bytes"
                ]
            }
        },
        "record_from_json": {
            "name": "record_from_json",
            "location": 79,
            "return": [
                "allennlp.models.model.Model",
                "float",
                "Pattern"
            ],
            "arguments": {
                "record_json": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping",
                    "Dict[str, int]"
                ]
            }
        },
        "measurement_from_json": {
            "name": "measurement_from_json",
            "location": 91,
            "return": [
                "allennlp.models.model.Model",
                "float",
                "Pattern"
            ],
            "arguments": {
                "measurement_json": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/dns/data/__init__.py": {},
    "net-analysis-master/netanalysis/dns/google/google_dns.py": {
        "create_google_dns_from_filename": {
            "name": "create_google_dns_from_filename",
            "location": 41,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "create_default_google_dns": {
            "name": "create_default_google_dns",
            "location": 51,
            "return": [
                "str",
                "Optional[Union[Any, str]]",
                "bool",
                "dict",
                "Type"
            ],
            "arguments": {}
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "str",
                    "Optional[str]"
                ],
                "location_id": [
                    "str"
                ]
            }
        },
        "GoogleDns.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleDns.add_network": {
            "name": "add_network",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ip_network": [
                    "str"
                ],
                "location_id": [
                    "str"
                ]
            }
        },
        "GoogleDns.get_server": {
            "name": "get_server",
            "location": 34,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "int",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/dns/google/is_google_dns.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "net-analysis-master/netanalysis/dns/google/test_google_dns.py": {
        "TestGoogleDns.test_default_servers": {
            "name": "test_default_servers",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "net-analysis-master/netanalysis/dns/google/__init__.py": {},
    "net-analysis-master/netanalysis/infrastructure/resources.py": {
        "resource_filename": {
            "name": "resource_filename",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "resource_path": [
                    "str"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/infrastructure/__init__.py": {},
    "net-analysis-master/netanalysis/ip/ip_info.py": {
        "create_default_ip_info_service": {
            "name": "create_default_ip_info_service",
            "location": 70,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "IpInfoService.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "as_repo": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "ip_to_asn": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "ip_to_country": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "IpInfoService.get_as": {
            "name": "get_as",
            "location": 44,
            "return": [
                "str",
                "bytes",
                "Optional[Dict[str, Any]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "int",
                    "str",
                    "Callable",
                    "List[List[int]]"
                ]
            }
        },
        "IpInfoService.get_country": {
            "name": "get_country",
            "location": 51,
            "return": [
                "bool",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "str",
                    "bool"
                ]
            }
        },
        "IpInfoService.resolve_ip": {
            "name": "resolve_ip",
            "location": 63,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/ip/ip_info_test.py": {
        "TestIpInfo.setUpClass": {
            "name": "setUpClass",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestIpInfo.test_ip4_to_as": {
            "name": "test_ip4_to_as",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIpInfo.test_ip6_to_as": {
            "name": "test_ip6_to_as",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIpInfo.test_ip4_to_country": {
            "name": "test_ip4_to_country",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIpInfo.test_ip6_to_country": {
            "name": "test_ip6_to_country",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIpInfo.test_resolve_ip4": {
            "name": "test_resolve_ip4",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIpInfo.test_resolve_ip6": {
            "name": "test_resolve_ip6",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "net-analysis-master/netanalysis/ip/model.py": {
        "AutonomousSystem.id": {
            "name": "id",
            "location": 37,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutonomousSystem.name": {
            "name": "name",
            "location": 39,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutonomousSystem.org": {
            "name": "org",
            "location": 41,
            "return": [
                "AsOrg"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutonomousSystem.type": {
            "name": "type",
            "location": 43,
            "return": [
                "AsType"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsRepository.get_as": {
            "name": "get_as",
            "location": 48,
            "return": [
                "AutonomousSystem"
            ],
            "arguments": {
                "self": [],
                "as_number": [
                    "List[str]",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/ip/simple_autonomous_system.py": {
        "UnknownAutonomousSystem": {
            "name": "UnknownAutonomousSystem",
            "location": 56,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "as_repo": [
                    "bytes"
                ],
                "as_number": [
                    "bytes"
                ]
            }
        },
        "UnknownAsOrg": {
            "name": "UnknownAsOrg",
            "location": 60,
            "return": [
                "str",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {
                "org_id": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Optional[int]]",
                    "str"
                ]
            }
        },
        "fill_as_info_from_filename": {
            "name": "fill_as_info_from_filename",
            "location": 92,
            "return": [
                "List[Dict[str, str]]",
                "Optional[Callable]",
                "bool",
                "Iterator",
                "Tuple[int, int]"
            ],
            "arguments": {
                "as_org_filename": [
                    "str",
                    "bool",
                    "Union[str, List[str]]"
                ],
                "as_repo": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "fill_as_info_from_file": {
            "name": "fill_as_info_from_file",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "as_org_file": [
                    "azafea.model.DbSession",
                    "dict",
                    "Pattern",
                    "Set[str]"
                ],
                "as_repo": [
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "fill_as_type_from_filename": {
            "name": "fill_as_type_from_filename",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "as_repo": [
                    "Dict[str, Any]",
                    "Type[Any]",
                    "bool"
                ]
            }
        },
        "fill_as_type_from_file": {
            "name": "fill_as_type_from_file",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "as_type_file": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "as_repo": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Dict[str, int]"
                ]
            }
        },
        "create_default_as_repo": {
            "name": "create_default_as_repo",
            "location": 145,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[[KT], VT]"
            ],
            "arguments": {}
        },
        "SimpleAutonomousSystem.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_repo": [
                    "int",
                    "str",
                    "bool"
                ],
                "as_number": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "as_name": [
                    "str",
                    "Optional[str]"
                ],
                "org_id": [
                    "str",
                    "int"
                ],
                "source": [
                    "str",
                    "bytes"
                ],
                "date_changed_str": [
                    "str"
                ]
            }
        },
        "SimpleAutonomousSystem.id": {
            "name": "id",
            "location": 37,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAutonomousSystem.name": {
            "name": "name",
            "location": 40,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAutonomousSystem.type": {
            "name": "type",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_type": [
                    "str",
                    "int",
                    "Optional[Any]"
                ]
            }
        },
        "SimpleAutonomousSystem.org": {
            "name": "org",
            "location": 49,
            "return": [
                "List[str]",
                "bool",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAutonomousSystem.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryAsRepository.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryAsRepository.add_as": {
            "name": "add_as",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_number": [
                    "str",
                    "float",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "as_name": [
                    "str",
                    "float",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "org_id": [
                    "str",
                    "float",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "source": [
                    "str",
                    "float",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "date_changed_str": [
                    "str",
                    "float",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "InMemoryAsRepository.add_org": {
            "name": "add_org",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "org_id": [
                    "str",
                    "int"
                ],
                "org_name": [
                    "str",
                    "int"
                ],
                "org_country": [
                    "str",
                    "int"
                ],
                "source": [
                    "str",
                    "int"
                ],
                "date_changed_str": [
                    "str",
                    "int"
                ]
            }
        },
        "InMemoryAsRepository.get_as": {
            "name": "get_as",
            "location": 79,
            "return": [
                "int",
                "Type[T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "as_number": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "InMemoryAsRepository.get_org": {
            "name": "get_org",
            "location": 85,
            "return": [
                "str",
                "IO",
                "bool"
            ],
            "arguments": {
                "self": [],
                "org_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/ip/test_simple_autonomous_system.py": {
        "TestAsRepository.test_unknown_as": {
            "name": "test_unknown_as",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsRepository.test_unknown_org": {
            "name": "test_unknown_org",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsRepository.test_add_as": {
            "name": "test_add_as",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsRepository.test_add_org": {
            "name": "test_add_org",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsRepository.test_as_org": {
            "name": "test_as_org",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIpToAsnMap.test_default_data": {
            "name": "test_default_data",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "net-analysis-master/netanalysis/ip/__init__.py": {},
    "net-analysis-master/netanalysis/ooni/measurements_to_dns_records.py": {
        "parse_ooni_date": {
            "name": "parse_ooni_date",
            "location": 43,
            "return": [
                "datetime.datetime",
                "datetime.date",
                "bool"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ]
            }
        },
        "get_control_dns_measurement": {
            "name": "get_control_dns_measurement",
            "location": 48,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "measurement": [
                    "str"
                ],
                "measurement_id": [
                    "int",
                    "Optional[int]",
                    "Union[str, List[str]]",
                    "str"
                ]
            }
        },
        "get_experiment_dns_measurement": {
            "name": "get_experiment_dns_measurement",
            "location": 82,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "measurement": [
                    "str",
                    "int"
                ],
                "measurement_id": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "read_ooni_dns_measurements": {
            "name": "read_ooni_dns_measurements",
            "location": 131,
            "return": [
                "typing.Iterable[netanalysis.dns.data.model.DnsMeasurement]"
            ],
            "arguments": {
                "ooni_measurements_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "net-analysis-master/netanalysis/ooni/__init__.py": {},
    "net-analysis-master/netanalysis/ooni/data/ooni_client.py": {
        "FileEntry.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_measurements": [
                    "str",
                    "list",
                    "Optional[int]",
                    "Set[str]",
                    "Optional[str]"
                ],
                "test_type": [
                    "bool"
                ],
                "country": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "Optional[Mapping]",
                    "Optional[str]"
                ],
                "date": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "Union[int, float]",
                    "dict",
                    "bool"
                ],
                "url": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "Optional[Mapping]",
                    "Optional[str]"
                ],
                "size": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "Optional[Mapping]",
                    "Optional[str]"
                ]
            }
        },
        "OoniClient.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OoniClient.num_list_requests": {
            "name": "num_list_requests",
            "location": 50,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OoniClient.num_get_requests": {
            "name": "num_get_requests",
            "location": 54,
            "return": [
                "tuple",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OoniClient.bytes_downloaded": {
            "name": "bytes_downloaded",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OoniClient.cost_usd": {
            "name": "cost_usd",
            "location": 62,
            "return": [
                "str",
                "Sequence['cirq.Qid']",
                "Optional[float]",
                "bool",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "OoniClient.list_files": {
            "name": "list_files",
            "location": 69,
            "return": [
                "typing.Iterable[FileEntry]"
            ],
            "arguments": {
                "self": [],
                "first_date": [
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "last_date": [
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "test_type": [
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "country": [
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "_2020OoniClient.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s3_client": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "_2020OoniClient.list_files": {
            "name": "list_files",
            "location": 86,
            "return": [
                "set",
                "Dict[str, Any]",
                "tuple",
                "Iterator[object]"
            ],
            "arguments": {
                "self": [],
                "first_date": [
                    "str",
                    "Optional[str]",
                    "Union[str, BinaryIO]",
                    "pathlib.Path"
                ],
                "last_date": [
                    "str",
                    "Optional[str]",
                    "datetime.date"
                ],
                "test_type": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "country": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_2020OoniClient._get_measurements": {
            "name": "_get_measurements",
            "location": 115,
            "return": [
                "typing.Iterable[typing.Dict]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "_LegacyOoniClient._test_type_for_match": {
            "name": "_test_type_for_match",
            "location": 129,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "measurement_type": [
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "_LegacyOoniClient._filename_matches": {
            "name": "_filename_matches",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "test_type": [
                    "str",
                    "Optional[Union[int, float]]",
                    "int",
                    "Exception"
                ],
                "country": [
                    "str",
                    "Optional[Union[int, float]]",
                    "int",
                    "Exception"
                ]
            }
        },
        "_LegacyOoniClient._files_from_index": {
            "name": "_files_from_index",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "json_lines": [
                    "str",
                    "Iterable[bytes]",
                    "type",
                    "Type"
                ],
                "test_type": [
                    "str",
                    "Optional[str]"
                ],
                "country": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_LegacyOoniClient._frame_bytes": {
            "name": "_frame_bytes",
            "location": 178,
            "return": [
                "str",
                "bytearray",
                "Tuple[float, float]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "frames": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "_LegacyOoniClient.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s3_client": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "_LegacyOoniClient.list_files": {
            "name": "list_files",
            "location": 192,
            "return": [
                "set",
                "Dict[str, Any]",
                "tuple",
                "Iterator[object]"
            ],
            "arguments": {
                "self": [],
                "first_date": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "last_date": [
                    "str"
                ],
                "test_type": [
                    "Optional[str]",
                    "str"
                ],
                "country": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "_LegacyOoniClient._list_files_with_index": {
            "name": "_list_files_with_index",
            "location": 210,
            "return": [
                "typing.Iterable[typing.Dict]"
            ],
            "arguments": {
                "self": [],
                "date_dir": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "test_type": [
                    "str",
                    "Optional[str]"
                ],
                "country": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_LegacyOoniClient._get_measurements": {
            "name": "_get_measurements",
            "location": 218,
            "return": [
                "typing.Iterable[typing.Dict]"
            ],
            "arguments": {
                "self": [],
                "file_entry": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/ooni/data/sync_measurements.py": {
        "trim_measurement": {
            "name": "trim_measurement",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "json_obj": [
                    "int",
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "dict"
                ],
                "max_string_size": [
                    "int",
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 52,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "json_list": [
                    "list",
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "max_string_size": [
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "_make_local_path": {
            "name": "_make_local_path",
            "location": 62,
            "return": [
                "str",
                "Dict[str, str]",
                "Iterable[Sequence[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "output_dir": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "entry": []
            }
        },
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "_parse_date_flag": {
            "name": "_parse_date_flag",
            "location": 116,
            "return": [
                "int",
                "datetime.datetime",
                "str",
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ]
            }
        },
        "CostLimitError.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "main.sync_file": {
            "name": "sync_file",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "main.fetch_file": {
            "name": "fetch_file",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "target_file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/ooni/data/__init__.py": {},
    "net-analysis-master/netanalysis/tls/domain_ip_validator.py": {
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "net-analysis-master/netanalysis/tls/__init__.py": {},
    "net-analysis-master/netanalysis/traffic/__init__.py": {},
    "net-analysis-master/netanalysis/traffic/analysis/find_anomalies.py": {
        "get_expectations_1": {
            "name": "get_expectations_1",
            "location": 36,
            "return": [
                "int",
                "str",
                "IO"
            ],
            "arguments": {
                "time_series": [
                    "Optional[float]",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "find_anomalies": {
            "name": "find_anomalies",
            "location": 65,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "time_series": [
                    "pandas.Series"
                ]
            }
        },
        "group_as_product_disruptions": {
            "name": "group_as_product_disruptions",
            "location": 79,
            "return": [
                "int",
                "bytes",
                "float"
            ],
            "arguments": {
                "product_id": [
                    "netanalysis.traffic.data.model.ProductId",
                    "int",
                    "str"
                ],
                "anomalies": [
                    "List[Tuple[str, int]]",
                    "int",
                    "Optional[float]",
                    "str",
                    "float",
                    "bool",
                    "Callable[[], str]"
                ],
                "max_time_delta": [
                    "datetime.timedelta",
                    "int",
                    "bytes"
                ]
            }
        },
        "remove_minor_disruptions": {
            "name": "remove_minor_disruptions",
            "location": 95,
            "return": [
                "int",
                "list",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "product_disruptions": [
                    "List[netanalysis.traffic.analysis.model.ProductDisruption]",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "group_as_regional_disruptions": {
            "name": "group_as_regional_disruptions",
            "location": 99,
            "return": [
                "tuple",
                "Tuple[str, str, str]",
                "float"
            ],
            "arguments": {
                "region_code": [
                    "str",
                    "float",
                    "List[str]"
                ],
                "product_disruptions": [
                    "List[netanalysis.traffic.analysis.model.ProductDisruption]",
                    "int",
                    "float",
                    "pandas.DataFrame"
                ]
            }
        },
        "_to_google_timestamp": {
            "name": "_to_google_timestamp",
            "location": 114,
            "return": [
                "int",
                "Optional[float]",
                "List[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "timestamp": [
                    "datetime.datetime",
                    "float",
                    "int",
                    "Type",
                    "List[Tuple[str, float, int, float]]"
                ]
            }
        },
        "_make_report_url": {
            "name": "_make_report_url",
            "location": 119,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "start_date": [
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "netanalysis.traffic.data.model.ProductId",
                    "int"
                ],
                "end_date": [
                    "datetime.datetime",
                    "pandas.Timestamp",
                    "str",
                    "Optional[datetime.datetime]"
                ],
                "region_code": [
                    "str",
                    "netanalysis.traffic.data.model.ProductId",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "datetime.date"
                ],
                "product_id": [
                    "str",
                    "netanalysis.traffic.data.model.ProductId",
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "_make_tor_users_url": {
            "name": "_make_tor_users_url",
            "location": 137,
            "return": [
                "int",
                "dict",
                "tensorflow.data.Dataset",
                "str"
            ],
            "arguments": {
                "start_date": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "datetime.timezone",
                    "datetime.date"
                ],
                "end_date": [
                    "str",
                    "datetime.date",
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "region_code": [
                    "str",
                    "datetime.datetime",
                    "datetime.date",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "_make_context_web_search_url": {
            "name": "_make_context_web_search_url",
            "location": 152,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "start_date": [
                    "datetime.datetime",
                    "str"
                ],
                "end_date": [
                    "datetime.datetime",
                    "str"
                ],
                "region_code": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "_make_context_twitter_url": {
            "name": "_make_context_twitter_url",
            "location": 164,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "start_date": [
                    "datetime.datetime",
                    "str"
                ],
                "end_date": [
                    "datetime.datetime",
                    "str"
                ],
                "region_code": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "print_disruption_csv": {
            "name": "print_disruption_csv",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "disruption": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "find_all_disruptions": {
            "name": "find_all_disruptions",
            "location": 211,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "regions": [
                    "Iterable[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "products": [
                    "Iterable[str]",
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "net-analysis-master/netanalysis/traffic/analysis/model.py": {
        "AnomalyPoint.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "int",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "traffic": [
                    "str",
                    "bool",
                    "int"
                ],
                "expected": [
                    "list",
                    "Coroutine[Any, Any, Any]",
                    "List[str]"
                ],
                "relative_impact": [
                    "int",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "AnomalyPoint.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str",
                "gmail_img_dl.model.Email",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDisruption.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product_id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "ProductDisruption.add_anomaly": {
            "name": "add_anomaly",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anomaly": [
                    "int",
                    "Sequence[int]",
                    "src.core.model.library.Library",
                    "List[int]",
                    "list",
                    "bytes"
                ]
            }
        },
        "ProductDisruption.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegionDisruption.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "region_code": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "RegionDisruption.add_product_disruption": {
            "name": "add_product_disruption",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product_disruption": [
                    "List[str]",
                    "bytes",
                    "dict",
                    "List[datetime.date]"
                ]
            }
        },
        "RegionDisruption.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str",
                "gmail_img_dl.model.Email",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "net-analysis-master/netanalysis/traffic/analysis/__init__.py": {},
    "net-analysis-master/netanalysis/traffic/data/api_repository.py": {
        "_to_timestamp": {
            "name": "_to_timestamp",
            "location": 33,
            "return": [
                "datetime.datetime",
                "Optional[datetime.timedelta]",
                "float",
                "pandas.DataFrame",
                "int",
                "str",
                "datetime.timedelta"
            ],
            "arguments": {
                "time_point": [
                    "datetime.datetime",
                    "int",
                    "float"
                ]
            }
        },
        "ApiTrafficRepository._query_api": {
            "name": "_query_api",
            "location": 43,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "List[dict]",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "bool"
                ],
                "params": [
                    "str",
                    "Union[str, IO]"
                ]
            }
        },
        "ApiTrafficRepository.list_regions": {
            "name": "list_regions",
            "location": 56,
            "return": [
                "List[str]",
                "list",
                "bool",
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTrafficRepository.get_traffic": {
            "name": "get_traffic",
            "location": 60,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "region_code": [
                    "int",
                    "str"
                ],
                "product_id": [
                    "int",
                    "str"
                ],
                "start": [
                    "datetime.datetime",
                    "str",
                    "pandas.DataFrame",
                    "datetime.date",
                    "int"
                ],
                "end": [
                    "datetime.datetime",
                    "datetime.date",
                    "int"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/traffic/data/fetch_google_traffic.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "net-analysis-master/netanalysis/traffic/data/file_repository.py": {
        "FileTrafficRepository.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_directory": [
                    "int",
                    "bool"
                ]
            }
        },
        "FileTrafficRepository.list_regions": {
            "name": "list_regions",
            "location": 31,
            "return": [
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTrafficRepository.get_traffic": {
            "name": "get_traffic",
            "location": 34,
            "return": [
                "str",
                "Dict[str, allennlp.data.token_indexers.TokenIndexer]"
            ],
            "arguments": {
                "self": [],
                "region_code": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "product_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/traffic/data/model.py": {
        "TrafficRepository.list_regions": {
            "name": "list_regions",
            "location": 51,
            "return": [
                "typing.Iterable[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrafficRepository.get_traffic": {
            "name": "get_traffic",
            "location": 55,
            "return": [
                "pandas.Series"
            ],
            "arguments": {
                "self": [],
                "region_code": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "bool"
                ],
                "product_id": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "bool"
                ],
                "start": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "bool"
                ],
                "end": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "net-analysis-master/netanalysis/traffic/data/__init__.py": {},
    "net-analysis-master/tools/ipython.py": {},
    "net-analysis-master/tools/jupyter.py": {}
}
{
    "network-programmability-stream-master/ansible/lab-system/action_plugins/deployment_setup.py": {
        "ActionModule.run": {
            "name": "run",
            "location": 8,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "self": [],
                "tmp": [
                    "str",
                    "bytes"
                ],
                "task_vars": [
                    "dict",
                    "List[str]",
                    "Optional[Dict]",
                    "Optional[Tuple]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "network-programmability-stream-master/ansible/lab-system/vars_plugins/load_lab_templates.py": {
        "VarsModule.get_vars": {
            "name": "get_vars",
            "location": 10,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes",
                "Callable",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "loader": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "entities": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "network-programmability-stream-master/async/gather_commands_async.py": {
        "main": {
            "name": "main",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/async/gather_commands_sync.py": {
        "collect_outputs": {
            "name": "collect_outputs",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "devices": [
                    "int",
                    "bool",
                    "Generator",
                    "List[int]",
                    "Union[None, bytes]",
                    "List[str]"
                ],
                "commands": [
                    "int",
                    "bool",
                    "Generator",
                    "List[int]",
                    "Union[None, bytes]",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/async/helper.py": {
        "read_yaml": {
            "name": "read_yaml",
            "location": 13,
            "return": [
                "str",
                "bytes",
                "Tuple[int, int]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "form_connection_params_from_yaml": {
            "name": "form_connection_params_from_yaml",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "parsed_yaml": [
                    "str",
                    "List[str]"
                ],
                "site_name": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "form_device_params_from_yaml": {
            "name": "form_device_params_from_yaml",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "parsed_yaml": [
                    "str",
                    "Tuple[str, str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "network-programmability-stream-master/async/http-requests-async.py": {
        "get_title": {
            "name": "get_title",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "html": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/async/http-requests-async2.py": {
        "get_title": {
            "name": "get_title",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "html": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/async/http-requests-sync.py": {
        "get_title": {
            "name": "get_title",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "html": [
                    "str",
                    "bool"
                ]
            }
        },
        "download_page_title": {
            "name": "download_page_title",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ],
                "session": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ]
            }
        },
        "download_all_page_titles": {
            "name": "download_all_page_titles",
            "location": 37,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "urls": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/async/http-requests-threads.py": {
        "get_title": {
            "name": "get_title",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "html": [
                    "str",
                    "bool"
                ]
            }
        },
        "download_page_title": {
            "name": "download_page_title",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ],
                "session": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "Optional[dict]"
                ]
            }
        },
        "download_all_page_titles": {
            "name": "download_all_page_titles",
            "location": 39,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "urls": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/async/netdev-async.py": {
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/async/restconf-async.py": {
        "process_interfaces_json": {
            "name": "process_interfaces_json",
            "location": 44,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/async/collect_mac_address_tables/collection_async.py": {
        "read_inventory_yaml": {
            "name": "read_inventory_yaml",
            "location": 44,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "get_switches_ip_addresses": {
            "name": "get_switches_ip_addresses",
            "location": 50,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "shorten_interface_name": {
            "name": "shorten_interface_name",
            "location": 54,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "interface_name": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "parse_show_version": {
            "name": "parse_show_version",
            "location": 63,
            "return": [
                "str",
                "set",
                "dict"
            ],
            "arguments": {
                "cli_output": [
                    "dict",
                    "bytes",
                    "List[List[str]]",
                    "\"HexpySession\"",
                    "Dict[str, Any]",
                    "Union[Dict, List]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "parse_show_mac_address_table": {
            "name": "parse_show_mac_address_table",
            "location": 70,
            "return": [
                "bool",
                "Sequence[str]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "cli_output": [
                    "str",
                    "Pattern",
                    "int"
                ],
                "neighbors": [
                    "bool"
                ]
            }
        },
        "parse_show_cdp_neighbors": {
            "name": "parse_show_cdp_neighbors",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "cli_output": [
                    "str"
                ],
                "result": [
                    "list",
                    "tuple",
                    "Pattern[str]",
                    "dict",
                    "Dict[str, Any]",
                    "Set[int]"
                ]
            }
        },
        "parse_show_lldp_neighbors": {
            "name": "parse_show_lldp_neighbors",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "cli_output": [
                    "str"
                ],
                "result": [
                    "list",
                    "tuple",
                    "Pattern[str]",
                    "dict",
                    "Dict[str, Any]",
                    "Set[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parse_show_mac_address_table.get_interface_neighbors_string": {
            "name": "get_interface_neighbors_string",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "interface_name": [
                    "str"
                ]
            }
        }
    },
    "network-programmability-stream-master/async/collect_mac_address_tables/collection_serial.py": {
        "read_inventory_yaml": {
            "name": "read_inventory_yaml",
            "location": 29,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "get_switches_ip_addresses": {
            "name": "get_switches_ip_addresses",
            "location": 35,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "parse_show_version": {
            "name": "parse_show_version",
            "location": 39,
            "return": [
                "str",
                "set",
                "dict"
            ],
            "arguments": {
                "cli_output": [
                    "dict",
                    "bytes",
                    "List[List[str]]",
                    "\"HexpySession\"",
                    "Dict[str, Any]",
                    "Union[Dict, List]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "parse_show_mac_address_table": {
            "name": "parse_show_mac_address_table",
            "location": 46,
            "return": [
                "bool",
                "Sequence[str]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "cli_output": [
                    "str",
                    "Pattern",
                    "int"
                ]
            }
        },
        "get_mac_address_table": {
            "name": "get_mac_address_table",
            "location": 65,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "host": [
                    "bool",
                    "Tuple[int, int, int]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/async/collect_mac_address_tables/collection_threading.py": {
        "read_inventory_yaml": {
            "name": "read_inventory_yaml",
            "location": 30,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "get_switches_ip_addresses": {
            "name": "get_switches_ip_addresses",
            "location": 36,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "parse_show_version": {
            "name": "parse_show_version",
            "location": 40,
            "return": [
                "str",
                "set",
                "dict"
            ],
            "arguments": {
                "cli_output": [
                    "dict",
                    "bytes",
                    "List[List[str]]",
                    "\"HexpySession\"",
                    "Dict[str, Any]",
                    "Union[Dict, List]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "parse_show_mac_address_table": {
            "name": "parse_show_mac_address_table",
            "location": 47,
            "return": [
                "bool",
                "Sequence[str]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "cli_output": [
                    "str",
                    "Pattern",
                    "int"
                ]
            }
        },
        "get_mac_address_table": {
            "name": "get_mac_address_table",
            "location": 66,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "host": [
                    "bool",
                    "Tuple[int, int, int]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/chatops-webex-teams/network_overwatch/app.py": {},
    "network-programmability-stream-master/chatops-webex-teams/network_overwatch/command_handler.py": {
        "dispatch_command": {
            "name": "dispatch_command",
            "location": 24,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "command": [
                    "list",
                    "str"
                ]
            }
        }
    },
    "network-programmability-stream-master/chatops-webex-teams/network_overwatch/constants.py": {},
    "network-programmability-stream-master/chatops-webex-teams/network_overwatch/restconf.py": {
        "RESTCONF.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_name": [
                    "str"
                ]
            }
        }
    },
    "network-programmability-stream-master/chatops-webex-teams/network_overwatch/webex_teams.py": {
        "WebexTeams.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseCRUD.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "webex_teams": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "network-programmability-stream-master/chatops-webex-teams/network_overwatch/webhook_manager.py": {
        "build_webex_webhook_url": {
            "name": "build_webex_webhook_url",
            "location": 90,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "tunnels_data": [
                    "List[Dict[str, Any]]",
                    "List[bytes]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "network-programmability-stream-master/chatops-webex-teams/network_overwatch/__init__.py": {},
    "network-programmability-stream-master/hashicorp-vault/netmiko-vault.py": {
        "form_device_params": {
            "name": "form_device_params",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "host": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "params": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "get_username_password": {
            "name": "get_username_password",
            "location": 41,
            "return": [
                "str",
                "dict",
                "set",
                "List[str]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "vault_server": [
                    "str",
                    "dict",
                    "int"
                ],
                "vault_token": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "get_outputs": {
            "name": "get_outputs",
            "location": 50,
            "return": [
                "str",
                "Union[int, float, complex]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "device_info": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ],
                "commands": [
                    "Sequence[str]",
                    "bool",
                    "List[str]",
                    "int",
                    "List[Tuple[str, str]]",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/juniper/example.py": {
        "configure_device": {
            "name": "configure_device",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "connection_params": [
                    "bool",
                    "dss.config.Replica",
                    "Callable"
                ],
                "variables": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "do_something": {
            "name": "do_something",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "read_yaml": {
            "name": "read_yaml",
            "location": 77,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "get_devices_ip_addresses": {
            "name": "get_devices_ip_addresses",
            "location": 83,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/model-driven-telemetry/netconf/code/constants.py": {},
    "network-programmability-stream-master/model-driven-telemetry/netconf/code/nc_dial_in_subscribe.py": {
        "TelemetryIOSXE.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "bytes",
                    "int"
                ],
                "username": [
                    "str",
                    "bytes",
                    "int"
                ],
                "password": [
                    "str",
                    "bytes",
                    "int"
                ],
                "verbose": [
                    "str",
                    "int"
                ]
            }
        },
        "TelemetryIOSXE.nc_connect": {
            "name": "nc_connect",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TelemetryIOSXE.close": {
            "name": "close",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TelemetryIOSXE.__enter__": {
            "name": "__enter__",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TelemetryIOSXE.__exit__": {
            "name": "__exit__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TelemetryIOSXE.sigint_handler": {
            "name": "sigint_handler",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TelemetryIOSXE.print_callback": {
            "name": "print_callback",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "notif": [
                    "logging.LogRecord",
                    "str"
                ]
            }
        },
        "TelemetryIOSXE.kafka_connect": {
            "name": "kafka_connect",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TelemetryIOSXE.kafka_callback": {
            "name": "kafka_callback",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "notif": [
                    "str"
                ]
            }
        },
        "TelemetryIOSXE.errback": {
            "name": "errback",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "notif": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TelemetryIOSXE.unknown_host_cb": {
            "name": "unknown_host_cb",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "fingerprint": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TelemetryIOSXE.establish_sub": {
            "name": "establish_sub",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "int",
                    "float"
                ],
                "callback": [
                    "int",
                    "float"
                ],
                "period": [
                    "int",
                    "float"
                ],
                "dampening_period": [
                    "int",
                    "float"
                ]
            }
        },
        "TelemetryIOSXE.single_sub": {
            "name": "single_sub",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xpath": [
                    "int",
                    "float"
                ],
                "callback": [
                    "int",
                    "float"
                ],
                "period": [
                    "int",
                    "float"
                ]
            }
        },
        "TelemetryIOSXE.multi_sub": {
            "name": "multi_sub",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "xpath_list": [
                    "List[Tuple[str, str]]",
                    "Sequence[dict]",
                    "list",
                    "List[str]",
                    "Iterator[tuple]",
                    "bool"
                ],
                "callback": [
                    "bool",
                    "str",
                    "Type[T]",
                    "Optional[int]",
                    "Dict[str, int]",
                    "int",
                    "Optional[Type]"
                ]
            }
        },
        "TelemetryIOSXE.logging": {
            "name": "logging",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-programmability-stream-master/model-driven-telemetry/netconf/code/test_xpath.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/model-driven-telemetry/netconf/code/utils.py": {
        "prettify_xml": {
            "name": "prettify_xml",
            "location": 7,
            "return": [
                "list",
                "str",
                "set",
                "dict",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "xml": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "network-programmability-stream-master/napalm/sandbox.py": {},
    "network-programmability-stream-master/netbox/add_devices_to_netbox.py": {
        "form_headers": {
            "name": "form_headers",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "add_site": {
            "name": "add_site",
            "location": 33,
            "return": [],
            "arguments": {
                "name": [],
                "slug": []
            }
        },
        "add_sites": {
            "name": "add_sites",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "add_device": {
            "name": "add_device",
            "location": 55,
            "return": [],
            "arguments": {
                "name": [],
                "device_type_id": [],
                "site_id": [],
                "device_role_id": []
            }
        },
        "add_devices": {
            "name": "add_devices",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 86,
            "return": [],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/netbox/aiohttp_netbox.py": {
        "form_headers": {
            "name": "form_headers",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/netbox/configure_devices_from_netbox.py": {
        "form_headers": {
            "name": "form_headers",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 193,
            "return": [],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/netbox/helper.py": {
        "read_yaml": {
            "name": "read_yaml",
            "location": 13,
            "return": [
                "str",
                "bytes",
                "Tuple[int, int]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "form_connection_params_from_yaml": {
            "name": "form_connection_params_from_yaml",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "parsed_yaml": [
                    "str",
                    "List[str]"
                ],
                "site_name": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "form_device_params_from_yaml": {
            "name": "form_device_params_from_yaml",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "parsed_yaml": [
                    "str",
                    "Tuple[str, str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "network-programmability-stream-master/netconf/example.py": {
        "prettify_xml": {
            "name": "prettify_xml",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "xml_string": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "nc_conn": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "configure_device": {
            "name": "configure_device",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "nc_conn": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "List[str]"
                ],
                "config_data": [
                    "str",
                    "Callable"
                ],
                "template_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/manage.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/__init__.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/netprog_stream/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "Union[str, int]",
                    "dict",
                    "int",
                    "Union[str, float]"
                ]
            }
        }
    },
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/netprog_stream/settings.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/netprog_stream/urls.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/netprog_stream/wsgi.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/netprog_stream/__init__.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/admin.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/apps.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/models.py": {
        "Device.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.napalm_driver": {
            "name": "napalm_driver",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.netmiko_device_type": {
            "name": "netmiko_device_type",
            "location": 35,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/tasks.py": {
        "switch_interface": {
            "name": "switch_interface",
            "location": 9,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "device_id": [
                    "int",
                    "str"
                ],
                "interface_name": [
                    "str",
                    "dict",
                    "int",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "enable_interface": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/tests.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/urls.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/views.py": {
        "index": {
            "name": "index",
            "location": 11,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "get_device_stats": {
            "name": "get_device_stats",
            "location": 21,
            "return": [
                "str",
                "Optional[Dict]",
                "models.Dashboard",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "device_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "get_task_status": {
            "name": "get_task_status",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "bool",
                    "int",
                    "List[Tuple[str, str]]"
                ],
                "task_id": [
                    "str"
                ]
            }
        }
    },
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/__init__.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/migrations/0001_initial.py": {},
    "network-programmability-stream-master/netprog-stream-django/netprog_stream/network/migrations/__init__.py": {},
    "network-programmability-stream-master/network-testing/sandbox.py": {
        "gather_commands": {
            "name": "gather_commands",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "task": [],
                "commands": [
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/network-testing/old-2018-stream/tests_2018/conftest.py": {
        "nr": {
            "name": "nr",
            "location": 7,
            "return": [
                "Mapping[str, str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/network-testing/old-2018-stream/tests_2018/test_krk_stp.py": {
        "load_config": {
            "name": "load_config",
            "location": 13,
            "return": [
                "str",
                "IO",
                "Dict[str, Dict[str, str]]",
                "pathlib.Path",
                "dict",
                "Iterable"
            ],
            "arguments": {
                "config_file": [
                    "str"
                ]
            }
        },
        "process_data": {
            "name": "process_data",
            "location": 20,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "update_stp_root": {
            "name": "update_stp_root",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int"
                ],
                "stp_stats": [
                    "list",
                    "str"
                ],
                "vlan_ids": [
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_krk_stp_root": {
            "name": "test_krk_stp_root",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "nr": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "network-programmability-stream-master/network-testing/old-2018-stream/tests_2018/test_krk_vlans.py": {
        "load_config": {
            "name": "load_config",
            "location": 12,
            "return": [
                "str",
                "IO",
                "Dict[str, Dict[str, str]]",
                "pathlib.Path",
                "dict",
                "Iterable"
            ],
            "arguments": {
                "config_file": [
                    "str"
                ]
            }
        },
        "process_data": {
            "name": "process_data",
            "location": 19,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str, str]"
                ],
                "config": [
                    "str"
                ]
            }
        },
        "test_krk_vlans": {
            "name": "test_krk_vlans",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "nr": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "network-programmability-stream-master/network-testing/tests/conftest.py": {
        "nr_config_file": {
            "name": "nr_config_file",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "nr": {
            "name": "nr",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "nr_config_file": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_expected_data_from_tags_values": {
            "name": "get_expected_data_from_tags_values",
            "location": 28,
            "return": [
                "dict",
                "Dict[str, Any]",
                "list",
                "ezscrape.scraping.core.ScrapeResult"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        }
    },
    "network-programmability-stream-master/network-testing/tests/test_sw_version.py": {
        "collect_sw_version": {
            "name": "collect_sw_version",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "task": [
                    "Dict[str, Any]",
                    "int",
                    "dict"
                ],
                "keyword": [
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "TestParsedShowVersion.collect": {
            "name": "collect",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nr": [
                    "int",
                    "dict"
                ]
            }
        },
        "TestParsedShowVersion.test_sw_version": {
            "name": "test_sw_version",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nr": [
                    "str"
                ],
                "device_name": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "network-programmability-stream-master/network-testing/tests/test_vrfs.py": {
        "collect_vrfs": {
            "name": "collect_vrfs",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "task": [
                    "str",
                    "int"
                ],
                "keyword": [
                    "str",
                    "int"
                ]
            }
        },
        "TestParsedShowVrf.collect": {
            "name": "collect",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nr": [
                    "int",
                    "dict"
                ]
            }
        },
        "TestParsedShowVrf.test_vrfs": {
            "name": "test_vrfs",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nr": [
                    "str"
                ],
                "device_name": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "network-programmability-stream-master/nornir/exploring/main.py": {
        "basic_configuration": {
            "name": "basic_configuration",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "task": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/nornir/exploring/new.py": {
        "basic_configuration": {
            "name": "basic_configuration",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "task": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/nornir/lab-system/constants.py": {},
    "network-programmability-stream-master/nornir/lab-system/deployment.py": {
        "Portgroup.__eq__": {
            "name": "__eq__",
            "location": 58,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "str"
                ]
            }
        },
        "Portgroup.__hash__": {
            "name": "__hash__",
            "location": 61,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VM.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "pod": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "VM.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topologies": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "List[str]"
                ],
                "inventory": [
                    "Callable",
                    "str"
                ]
            }
        },
        "Deployment.pods": {
            "name": "pods",
            "location": 97,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment.vms": {
            "name": "vms",
            "location": 101,
            "return": [
                "List[dict]",
                "bool",
                "List[pathlib.Path]",
                "int",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment.matrix_switches": {
            "name": "matrix_switches",
            "location": 105,
            "return": [
                "bool",
                "int",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment.get_device": {
            "name": "get_device",
            "location": 110,
            "return": [
                "str",
                "bool",
                "Union[utils.CWLObjectType, List[utils.CWLObjectType]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "device_name": [
                    "str"
                ]
            }
        },
        "Deployment._load_topologies": {
            "name": "_load_topologies",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment._parse_matrix_switches": {
            "name": "_parse_matrix_switches",
            "location": 131,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment._parse_pod_mgmt_ports": {
            "name": "_parse_pod_mgmt_ports",
            "location": 161,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment._parse_pair_routers": {
            "name": "_parse_pair_routers",
            "location": 185,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment._increase_dot1q_tunnel_vlan": {
            "name": "_increase_dot1q_tunnel_vlan",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployment._allocate_pod_gear": {
            "name": "_allocate_pod_gear",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pod.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pod_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "topology_name": [
                    "str",
                    "Optional[str]"
                ],
                "deployment": [
                    "str",
                    "azureml.core.datastore.Datastore",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Pod.vms": {
            "name": "vms",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pod.sequence_num": {
            "name": "sequence_num",
            "location": 247,
            "return": [
                "Optional[str]",
                "dict",
                "Callable",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pod.inventory": {
            "name": "inventory",
            "location": 251,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pod.free_matrix_connections": {
            "name": "free_matrix_connections",
            "location": 255,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pod.unallocated_pod_gear": {
            "name": "unallocated_pod_gear",
            "location": 261,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pod.get_device": {
            "name": "get_device",
            "location": 264,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str"
                ],
                "device_name": [
                    "str",
                    "list"
                ]
            }
        },
        "Pod.get_vm_name": {
            "name": "get_vm_name",
            "location": 274,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "vm_name": [
                    "str",
                    "Tuple[str]",
                    "pathlib.Path"
                ]
            }
        },
        "Pod.get_vm_portgroup_name": {
            "name": "get_vm_portgroup_name",
            "location": 277,
            "return": [
                "str",
                "Optional[str]",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "vm_name": [
                    "str",
                    "bool",
                    "float",
                    "dict"
                ],
                "portgroup_num": [
                    "Optional[int]",
                    "Optional[bool]",
                    "Sequence[str]",
                    "bool",
                    "Dict[str, 'LabwareDefinition']"
                ]
            }
        },
        "Pod._update_vms": {
            "name": "_update_vms",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vms": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Pod._process_special_reset_device": {
            "name": "_process_special_reset_device",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "Deque",
                    "src.core.model.profile.Profile"
                ]
            }
        },
        "Pod._allocate_gear": {
            "name": "_allocate_gear",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pod.skip_tunnel_creation": {
            "name": "skip_tunnel_creation",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Pod.is_internet_service": {
            "name": "is_internet_service",
            "location": 343,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "Pod._process_matrix_bypass": {
            "name": "_process_matrix_bypass",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Pod._process_connection_end": {
            "name": "_process_connection_end",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_end": [
                    "dict",
                    "str",
                    "bool",
                    "Callable"
                ],
                "dot1q_vlan": [
                    "int",
                    "Dict[str, Any]",
                    "Dict[int, Dict[int, Any]]",
                    "List[Mapping[str, Any]]"
                ]
            }
        },
        "Pod._process_matrix_connection": {
            "name": "_process_matrix_connection",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "dot1q_vlan": [
                    "bool",
                    "str",
                    "tartare.core.contexContributorExportContext",
                    "int"
                ]
            }
        },
        "Pod._process_connections": {
            "name": "_process_connections",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pod._flatten_template_data": {
            "name": "_flatten_template_data",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-programmability-stream-master/nornir/lab-system/main.py": {
        "convert_topology_arg": {
            "name": "convert_topology_arg",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "topology": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "parse_arguments": {
            "name": "parse_arguments",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/nornir/lab-system/setup.py": {},
    "network-programmability-stream-master/nornir/lab-system/utils.py": {
        "update_description": {
            "name": "update_description",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "inventory": [
                    "int"
                ]
            }
        },
        "update_host_vars": {
            "name": "update_host_vars",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "inventory": [
                    "nornir.core.inventory.Inventory",
                    "str",
                    "dict",
                    "int",
                    "pathlib.Path",
                    "BinaryIO"
                ]
            }
        },
        "roundup": {
            "name": "roundup",
            "location": 37,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        }
    },
    "network-programmability-stream-master/nornir/lab-system/inventory-to-investigate/main.py": {},
    "network-programmability-stream-master/nornir/network_diagram/constants.py": {},
    "network-programmability-stream-master/nornir/network_diagram/interface.py": {
        "Interface.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[int, str]",
                    "Optional[List[str]]",
                    "Tuple[type]",
                    "bool",
                    "dict",
                    "IO"
                ],
                "device_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Interface.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interface.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interface.__lt__": {
            "name": "__lt__",
            "location": 44,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Interface.__eq__": {
            "name": "__eq__",
            "location": 47,
            "return": [
                "bool",
                "Dict[str, Union[str, Any]]",
                "int",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "int",
                    "str",
                    "List[int]",
                    "Tuple[type]"
                ]
            }
        },
        "Interface.__hash__": {
            "name": "__hash__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interface.name": {
            "name": "name",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Interface.short_name": {
            "name": "short_name",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Interface.link_from_neighbors": {
            "name": "link_from_neighbors",
            "location": 61,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interface.normalize_interface_name": {
            "name": "normalize_interface_name",
            "location": 66,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "interface_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Interface.normalize_interface_type": {
            "name": "normalize_interface_type",
            "location": 82,
            "return": [],
            "arguments": {
                "interface_type": [
                    "str",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "network-programmability-stream-master/nornir/network_diagram/link.py": {
        "Link.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interfaces": [
                    "list",
                    "int",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "Link.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Union['FixedPoint', int]",
                    "dict"
                ]
            }
        },
        "Link.__hash__": {
            "name": "__hash__",
            "location": 17,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.is_point_to_point": {
            "name": "is_point_to_point",
            "location": 33,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-programmability-stream-master/nornir/network_diagram/main.py": {
        "extract_hostname_from_fqdn": {
            "name": "extract_hostname_from_fqdn",
            "location": 26,
            "return": [
                "List[int]",
                "List[dict]",
                "int",
                "bytes"
            ],
            "arguments": {
                "fqdn": [
                    "str",
                    "bytes"
                ]
            }
        },
        "update_lldp_neighbors": {
            "name": "update_lldp_neighbors",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "task": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "build_graph": {
            "name": "build_graph",
            "location": 65,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable"
            ],
            "arguments": {
                "hosts": [
                    "str",
                    "int",
                    "Exception",
                    "bytes"
                ]
            }
        },
        "draw_and_save_topology": {
            "name": "draw_and_save_topology",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str",
                    "Tuple[str]"
                ],
                "edge_labels": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/nornir/network_diagram/network_diagram.py": {},
    "network-programmability-stream-master/nso/test_api.py": {
        "get_device_name": {
            "name": "get_device_name",
            "location": 12,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "nso": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/nso/__init__.py": {},
    "network-programmability-stream-master/pyats/intro/main.py": {},
    "network-programmability-stream-master/scrapli-apps/constants.py": {},
    "network-programmability-stream-master/scrapli-apps/nc-ncclient.py": {
        "create_conn_data": {
            "name": "create_conn_data",
            "location": 21,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "device_data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Dict]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "nc_get_edit_cfg": {
            "name": "nc_get_edit_cfg",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "device_data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "cfg": [
                    "Mapping[str, Any]",
                    "Optional[List[str]]",
                    "dict",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/scrapli-apps/nc-scrapli-asyncio.py": {
        "create_conn_data": {
            "name": "create_conn_data",
            "location": 25,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "device_data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[dict]"
                ]
            }
        }
    },
    "network-programmability-stream-master/scrapli-apps/nc-scrapli.py": {
        "create_conn_data": {
            "name": "create_conn_data",
            "location": 23,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "device_data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[dict]"
                ]
            }
        },
        "nc_get_edit_cfg": {
            "name": "nc_get_edit_cfg",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "device_data": [
                    "dict",
                    "raiden.utils.List[raiden.utils.Tuple[str, int]]",
                    "Dict[str, Union[str, bool]]",
                    "Sequence"
                ],
                "cfg": [
                    "dict",
                    "Optional[List[Any]]",
                    "IO[bytes]",
                    "str",
                    "Dict[str, Union[int, bool]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/scrapli-apps/scrapli-cfg.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/scrapli-apps/ssh-netmiko.py": {
        "create_conn_data": {
            "name": "create_conn_data",
            "location": 27,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "device_data": [
                    "dict",
                    "str",
                    "Mapping[str, Any]",
                    "bytes"
                ]
            }
        },
        "show_commands_and_config": {
            "name": "show_commands_and_config",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "device_data": [
                    "dict",
                    "Dict[str, Union[str, bool]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/scrapli-apps/ssh-scrapli-asyncio.py": {
        "create_conn_data": {
            "name": "create_conn_data",
            "location": 31,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "device_data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "network-programmability-stream-master/scrapli-apps/ssh-scrapli.py": {
        "create_conn_data": {
            "name": "create_conn_data",
            "location": 29,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "device_data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]",
                    "bytes"
                ]
            }
        },
        "show_commands_and_config": {
            "name": "show_commands_and_config",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "device_data": [
                    "dict",
                    "Dict[str, Union[str, bool]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "network-programmability-stream-master/scrapli-apps/test-scrapli-replay.py": {},
    "network-programmability-stream-master/scrapli-apps/utils.py": {
        "dict_to_xml": {
            "name": "dict_to_xml",
            "location": 8,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "root": [
                    "str",
                    "IO[bytes]",
                    "BinaryIO"
                ],
                "attr_marker": [
                    "bool",
                    "Iterable[bytes]",
                    "List[Dict]",
                    "Optional[str]"
                ]
            }
        },
        "prettify_xml": {
            "name": "prettify_xml",
            "location": 84,
            "return": [
                "list",
                "str",
                "set",
                "dict",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "xml": [
                    "str",
                    "dict"
                ]
            }
        },
        "yaml_to_xml_str": {
            "name": "yaml_to_xml_str",
            "location": 92,
            "return": [
                "set",
                "list",
                "dict",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "yaml_content": [],
                "root": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "dict_to_xml._dict_to_xml": {
            "name": "_dict_to_xml",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "data_": [
                    "dict",
                    "bytes",
                    "Union[List, Dict]",
                    "Dict[str, Union[str, bool]]",
                    "T",
                    "Dict[str, Any]"
                ],
                "parent": [
                    "int",
                    "bytes",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        }
    }
}
{
    "ninjadog-master/fabfile.py": {
        "clean_build": {
            "name": "clean_build",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "clean_pyc": {
            "name": "clean_pyc",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "clean_test": {
            "name": "clean_test",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "capture": []
            }
        },
        "test_all": {
            "name": "test_all",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "absolute_path": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "Dict[str, cerulean.Path]",
                    "Tuple[str]"
                ]
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "open_browser": [
                    "str",
                    "int",
                    "dict",
                    "set",
                    "float"
                ]
            }
        },
        "docs": {
            "name": "docs",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "open_browser": [
                    "str",
                    "int",
                    "dict",
                    "set",
                    "float"
                ]
            }
        },
        "publish_docs": {
            "name": "publish_docs",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dist": {
            "name": "dist",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "release": {
            "name": "release",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "gen_requirements_txt": {
            "name": "gen_requirements_txt",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "true": {
            "name": "true",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 202,
            "return": [
                "bool",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "Optional[str]",
                    "List[int]",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "ninjadog-master/setup.py": {
        "get_requirements": {
            "name": "get_requirements",
            "location": 10,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "section": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_requirements.gen": {
            "name": "gen",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ninjadog-master/docs/conf.py": {},
    "ninjadog-master/ninjadog/cli.py": {
        "render_directory": {
            "name": "render_directory",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "destination": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Union[List[str], str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "ninjadog-master/ninjadog/constants.py": {},
    "ninjadog-master/ninjadog/decorators.py": {
        "idempotent": {
            "name": "idempotent",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "idempotent.wrapped": {
            "name": "wrapped",
            "location": 11,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "ninjadog-master/ninjadog/ninjadog.py": {
        "render": {
            "name": "render",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "string": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "file": [
                    "Optional[str]",
                    "bool",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]",
                    "Optional[Union[str, pathlib.Path]]"
                ],
                "context": [
                    "bool",
                    "Optional[str]"
                ],
                "pretty": [
                    "bool",
                    "int",
                    "float"
                ],
                "pug_cli_path": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[IO[str]]"
                ],
                "with_jinja": [
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "ninjadog-master/ninjadog/utils.py": {},
    "ninjadog-master/ninjadog/__init__.py": {},
    "ninjadog-master/ninjadog/ext/pyramid.py": {
        "changed": {
            "name": "changed",
            "location": 10,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ],
                "key": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ],
                "value": [
                    "str",
                    "Sequence[str]",
                    "dict",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "truth": {
            "name": "truth",
            "location": 27,
            "return": [
                "str",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "value": [
                    "Union[bool, str]",
                    "Union[str, bytes]",
                    "str",
                    "bool",
                    "List[List[str]]"
                ]
            }
        },
        "resolve": {
            "name": "resolve",
            "location": 43,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "contextshell.path.NodePath"
                ],
                "caller": [
                    "pathlib.Path",
                    "str",
                    "List[int]",
                    "list",
                    "List[pathlib.Path]"
                ]
            }
        },
        "remove_file_if_exists": {
            "name": "remove_file_if_exists",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "TextIO",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "includeme": {
            "name": "includeme",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "Optional[int]"
                ]
            }
        },
        "PugRendererFactory.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict"
                ]
            }
        },
        "PugRendererFactory.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [
                "str",
                "List[str]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Callable",
                    "list"
                ],
                "system": [
                    "int",
                    "Sequence[Any]"
                ]
            }
        }
    },
    "ninjadog-master/ninjadog/ext/__init__.py": {},
    "ninjadog-master/tests/test_cli.py": {
        "test_cli_string_argument": {
            "name": "test_cli_string_argument",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cli_file_argument": {
            "name": "test_cli_file_argument",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cli_dir_argument": {
            "name": "test_cli_dir_argument",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "pathlib.Path"
                ]
            }
        }
    },
    "ninjadog-master/tests/test_ninjadog.py": {
        "test_npm_installed": {
            "name": "test_npm_installed",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pug_cli_exists": {
            "name": "test_pug_cli_exists",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_hello_world": {
            "name": "test_hello_world",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pug_variable": {
            "name": "test_pug_variable",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_jinja2_variable": {
            "name": "test_jinja2_variable",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_context": {
            "name": "test_context",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_conditional": {
            "name": "test_conditional",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_render_no_string_argument": {
            "name": "test_render_no_string_argument",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_with_pug_with_jinja2": {
            "name": "test_with_pug_with_jinja2",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cli_string": {
            "name": "test_cli_string",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_extends": {
            "name": "test_extends",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ninjadog-master/tests/__init__.py": {},
    "ninjadog-master/tests/pyramid/test_pyramid.py": {
        "settings": {
            "name": "settings",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "testapp": {
            "name": "testapp",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "settings": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, List[Any]]",
                    "BinaryIO",
                    "IO[str]"
                ]
            }
        },
        "test_rendering": {
            "name": "test_rendering",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "testapp": []
            }
        }
    }
}
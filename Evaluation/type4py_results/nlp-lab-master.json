{
    "nlp-lab-master/lab1/patterns.py": {
        "journal": {
            "name": "journal",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "date_title": {
            "name": "date_title",
            "location": 7,
            "return": [
                "List[str]",
                "bool",
                "Tuple[List[int], List[str]]",
                "Dict[str, str]",
                "Optional[Tuple[str, str]]",
                "List[int]",
                "int"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 10,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "section": {
            "name": "section",
            "location": 16,
            "return": [
                "str",
                "Set[str]",
                "int"
            ],
            "arguments": {}
        },
        "paragraph": {
            "name": "paragraph",
            "location": 19,
            "return": [
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {}
        },
        "point": {
            "name": "point",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "external_reference": {
            "name": "external_reference",
            "location": 25,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "external_reference_ketless": {
            "name": "external_reference_ketless",
            "location": 28,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "internal_section_paragraph_point": {
            "name": "internal_section_paragraph_point",
            "location": 31,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "internal_section_point": {
            "name": "internal_section_point",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "internal_section_paragraph": {
            "name": "internal_section_paragraph",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "internal_paragraph": {
            "name": "internal_paragraph",
            "location": 43,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {}
        },
        "internal_pattern_order": {
            "name": "internal_pattern_order",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "changed_statute": {
            "name": "changed_statute",
            "location": 52,
            "return": [
                "str",
                "List[str]",
                "List[Tuple[str, str]]",
                "MutableMapping[str, int]",
                "Set[str]"
            ],
            "arguments": {}
        }
    },
    "nlp-lab-master/lab1/processor.py": {
        "StatuteProcessor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "statue_path": []
            }
        },
        "StatuteProcessor.read_statue_lines": {
            "name": "read_statue_lines",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatuteProcessor.read_statue": {
            "name": "read_statue",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatuteProcessor.get_statue_title": {
            "name": "get_statue_title",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatuteProcessor.get_external_references": {
            "name": "get_external_references",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatuteProcessor.get_internal_references": {
            "name": "get_internal_references",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatuteProcessor.get_ustawa_count": {
            "name": "get_ustawa_count",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatuteProcessor.test_any_pattern": {
            "name": "test_any_pattern",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        }
    },
    "nlp-lab-master/lab1/run.py": {
        "ex1": {
            "name": "ex1",
            "location": 6,
            "return": [
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {}
        },
        "ex2": {
            "name": "ex2",
            "location": 14,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "ex3": {
            "name": "ex3",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "nlp-lab-master/lab1/shapers.py": {
        "flatten": {
            "name": "flatten",
            "location": 6,
            "return": [
                "List[Dict]",
                "Tuple[int]",
                "List[int]",
                "float",
                "Sequence[str]",
                "str",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {
                "listOfLists": [
                    "List[List]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "flatten_references": {
            "name": "flatten_references",
            "location": 9,
            "return": [
                "List[str]",
                "str",
                "list",
                "Union[List[str], str]"
            ],
            "arguments": {
                "ref": [
                    "Tuple[object]",
                    "Dict[str, Any]",
                    "List[str]",
                    "Type[object]",
                    "Type"
                ]
            }
        },
        "pairs": {
            "name": "pairs",
            "location": 14,
            "return": [
                "List[str]",
                "str",
                "List[T]",
                "List[Dict]"
            ],
            "arguments": {
                "list": [
                    "list",
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "nlp-lab-master/lab1/splitters.py": {
        "clean_external": {
            "name": "clean_external",
            "location": 7,
            "return": [
                "str",
                "Union[int, float, complex]",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "split_year": {
            "name": "split_year",
            "location": 21,
            "return": [
                "int",
                "str",
                "bool",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "split_nr": {
            "name": "split_nr",
            "location": 25,
            "return": [
                "int",
                "str",
                "bool",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "txt": [
                    "str"
                ]
            }
        },
        "split_pos": {
            "name": "split_pos",
            "location": 29,
            "return": [
                "List[str]",
                "Optional[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "match_and_trim": {
            "name": "match_and_trim",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "Dict[str, Any]",
                    "re.Match[str]"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "index_split_by": {
            "name": "index_split_by",
            "location": 37,
            "return": [
                "bool",
                "str",
                "type",
                "Sequence",
                "Callable[[KT], VT]",
                "int"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "int"
                ],
                "pattern": [
                    "str",
                    "tuple",
                    "bool"
                ],
                "parent_size": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "list"
                ]
            }
        },
        "split_section": {
            "name": "split_section",
            "location": 46,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "parent_size": [
                    "str",
                    "int",
                    "Pattern[str]"
                ]
            }
        },
        "split_paragraph": {
            "name": "split_paragraph",
            "location": 49,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "parent_size": [
                    "str",
                    "int",
                    "Pattern[str]"
                ]
            }
        },
        "split_point": {
            "name": "split_point",
            "location": 52,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "parent_size": [
                    "str",
                    "int",
                    "Pattern[str]"
                ]
            }
        }
    },
    "nlp-lab-master/lab10/lang.py": {
        "next_word": {
            "name": "next_word",
            "location": 44,
            "return": [],
            "arguments": {
                "sentence": [],
                "mode": [],
                "deterministic": []
            }
        },
        "predict": {
            "name": "predict",
            "location": 69,
            "return": [],
            "arguments": {
                "model": [],
                "sentence": [],
                "word_count": [],
                "deterministic": []
            }
        },
        "TextDataset.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TextDataset.__getitem__": {
            "name": "__getitem__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        }
    },
    "nlp-lab-master/lab2/elastic-processor.py": {},
    "nlp-lab-master/lab3/vector-analyzer.py": {
        "get_term_freq": {
            "name": "get_term_freq",
            "location": 62,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "correction": {
            "name": "correction",
            "location": 97,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "corrections": {
            "name": "corrections",
            "location": 103,
            "return": [],
            "arguments": {
                "words": []
            }
        }
    },
    "nlp-lab-master/lab4/multiword-ranking.py": {
        "prob": {
            "name": "prob",
            "location": 99,
            "return": [
                "str",
                "Iterable[Any]",
                "int"
            ],
            "arguments": {
                "a": [
                    "dict",
                    "bool",
                    "Dict[str, float]"
                ],
                "b": [
                    "Dict[str, float]",
                    "dict",
                    "str"
                ]
            }
        },
        "krnnt": {
            "name": "krnnt",
            "location": 153,
            "return": [
                "List[Dict]",
                "str",
                "list",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "nlp-lab-master/lab5/morph.py": {
        "krnnt": {
            "name": "krnnt",
            "location": 131,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "prob": {
            "name": "prob",
            "location": 107,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "nlp-lab-master/lab6/wordnet.py": {
        "get_senses_from_word": {
            "name": "get_senses_from_word",
            "location": 13,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "get_synset_from_sense": {
            "name": "get_synset_from_sense",
            "location": 16,
            "return": [],
            "arguments": {
                "sense_id": []
            }
        },
        "get_senses_from_synset": {
            "name": "get_senses_from_synset",
            "location": 19,
            "return": [],
            "arguments": {
                "synset_id": []
            }
        },
        "get_relations_to": {
            "name": "get_relations_to",
            "location": 22,
            "return": [],
            "arguments": {
                "synset_id": []
            }
        },
        "get_relations_from": {
            "name": "get_relations_from",
            "location": 25,
            "return": [],
            "arguments": {
                "synset_id": []
            }
        },
        "query_wordnet": {
            "name": "query_wordnet",
            "location": 28,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "map_relation": {
            "name": "map_relation",
            "location": 90,
            "return": [],
            "arguments": {
                "relation": []
            }
        },
        "distance_matrix": {
            "name": "distance_matrix",
            "location": 93,
            "return": [],
            "arguments": {
                "A": []
            }
        },
        "draw": {
            "name": "draw",
            "location": 116,
            "return": [],
            "arguments": {
                "nodes": [],
                "edges": [],
                "dist": []
            }
        }
    },
    "nlp-lab-master/lab7/tovec.py": {
        "csum": {
            "name": "csum",
            "location": 40,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "nlp-lab-master/lab8/classifier.py": {
        "split": {
            "name": "split",
            "location": 13,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "data": [
                    "List[bool]",
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[Union[int, float]]",
                    "str"
                ],
                "tags": [
                    "List[bool]",
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[Union[int, float]]",
                    "str"
                ]
            }
        },
        "get_document": {
            "name": "get_document",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "section_one": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ],
                "select_fun": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "SVM": {
            "name": "SVM",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "transformer": [
                    "snorkel.types.DataPoint",
                    "numpy.ndarray"
                ],
                "x": [
                    "snorkel.types.DataPoint",
                    "numpy.ndarray"
                ],
                "xv": [
                    "snorkel.types.DataPoint",
                    "numpy.ndarray"
                ],
                "xt": [
                    "str",
                    "Callable[..., bool]",
                    "Container",
                    "int"
                ],
                "y": [
                    "float",
                    "numpy.ndarray"
                ],
                "yv": [
                    "float",
                    "numpy.ndarray"
                ],
                "yt": [
                    "str",
                    "Callable[..., bool]",
                    "Container",
                    "int"
                ]
            }
        },
        "score": {
            "name": "score",
            "location": 56,
            "return": [
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "test": [
                    "float",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "List[List[float]]"
                ],
                "prediction": [
                    "float",
                    "Callable[[numpy.ndarray], numpy.ndarray]",
                    "List[List[float]]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 60,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "nlp-lab-master/lab8/fasttext.py": {
        "save_to_file": {
            "name": "save_to_file",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "txt": [
                    "IO[bytes]",
                    "str",
                    "Union[pathlib.Path, str]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "create_ft_files": {
            "name": "create_ft_files",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nlp-lab-master/lab8/tagger.py": {
        "get_statute_file": {
            "name": "get_statute_file",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "read_statute": {
            "name": "read_statute",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "remove_prefix": {
            "name": "remove_prefix",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "statute": [
                    "List[str]",
                    "str"
                ],
                "pattern": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "is_update": {
            "name": "is_update",
            "location": 28,
            "return": [
                "bool",
                "Optional[bool]",
                "Literal[False]"
            ],
            "arguments": {
                "statute_fragment": [
                    "str",
                    "List[List[str]]",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "tag_statutes": {
            "name": "tag_statutes",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "filenames": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "get_tags": {
            "name": "get_tags",
            "location": 40,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "nlp-lab-master/lab9/ner.py": {
        "getRandomStatutes": {
            "name": "getRandomStatutes",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "str",
                    "os.PathLike"
                ],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "readStatute": {
            "name": "readStatute",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "getTags": {
            "name": "getTags",
            "location": 47,
            "return": [
                "bool",
                "str",
                "MutableMapping[str, int]",
                "MutableMapping[str, Any]",
                "List[Optional[str]]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "model": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "tagStatutes": {
            "name": "tagStatutes",
            "location": 53,
            "return": [
                "str",
                "bool",
                "Tuple[int, int]",
                "List[str]"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Sequence[str]"
                ],
                "model": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "get_NE_freq": {
            "name": "get_NE_freq",
            "location": 80,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "root": [
                    "List[Type]",
                    "bool"
                ]
            }
        },
        "add_dicts": {
            "name": "add_dicts",
            "location": 105,
            "return": [
                "str",
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "dictionaries": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    }
}
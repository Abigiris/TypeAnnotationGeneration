{
    "nucypher-development/setup.py": {
        "read_requirements": {
            "name": "read_requirements",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "norfs.fs.base.Path",
                    "pathlib.Path"
                ]
            }
        },
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostDevelopCommand.run": {
            "name": "run",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/deploy/ansible/inventory/ec2.py": {
        "Ec2Inventory._empty_inventory": {
            "name": "_empty_inventory",
            "location": 259,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.is_cache_valid": {
            "name": "is_cache_valid",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.read_settings": {
            "name": "read_settings",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.parse_cli_args": {
            "name": "parse_cli_args",
            "location": 540,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.do_api_calls_update_cache": {
            "name": "do_api_calls_update_cache",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.connect": {
            "name": "connect",
            "location": 573,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.boto_fix_security_token_in_profile": {
            "name": "boto_fix_security_token_in_profile",
            "location": 582,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "connect_args": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Ec2Inventory.connect_to_aws": {
            "name": "connect_to_aws",
            "location": 589,
            "return": [
                "str",
                "int",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "int",
                    "bool",
                    "float"
                ],
                "region": [
                    "Optional[float]",
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Ec2Inventory.get_instances_by_region": {
            "name": "get_instances_by_region",
            "location": 610,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "List[str]"
                ]
            }
        },
        "Ec2Inventory.tags_match_filters": {
            "name": "tags_match_filters",
            "location": 661,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "dict"
                ]
            }
        },
        "Ec2Inventory.get_rds_instances_by_region": {
            "name": "get_rds_instances_by_region",
            "location": 688,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "int",
                    "Optional[Iterable[T]]",
                    "bool"
                ]
            }
        },
        "Ec2Inventory.include_rds_clusters_by_region": {
            "name": "include_rds_clusters_by_region",
            "location": 730,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bytearray"
                ]
            }
        },
        "Ec2Inventory.get_elasticache_clusters_by_region": {
            "name": "get_elasticache_clusters_by_region",
            "location": 793,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.get_elasticache_replication_groups_by_region": {
            "name": "get_elasticache_replication_groups_by_region",
            "location": 836,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.get_auth_error_message": {
            "name": "get_auth_error_message",
            "location": 870,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.fail_with_error": {
            "name": "fail_with_error",
            "location": 887,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "err_msg": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "err_operation": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ]
            }
        },
        "Ec2Inventory.get_instance": {
            "name": "get_instance",
            "location": 895,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bytes",
                    "List[int]",
                    "str"
                ],
                "instance_id": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_instance": {
            "name": "add_instance",
            "location": 903,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict"
                ],
                "region": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Ec2Inventory.add_rds_instance": {
            "name": "add_rds_instance",
            "location": 1098,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Union[int, str]"
                ],
                "region": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_cluster": {
            "name": "add_elasticache_cluster",
            "location": 1219,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "cluster": [],
                "region": [
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_node": {
            "name": "add_elasticache_node",
            "location": 1318,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "cluster": [
                    "dict",
                    "type"
                ],
                "region": [
                    "bytes",
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_replication_group": {
            "name": "add_elasticache_replication_group",
            "location": 1405,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "replication_group": [
                    "int",
                    "Type"
                ],
                "region": [
                    "str",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "Ec2Inventory.get_route53_records": {
            "name": "get_route53_records",
            "location": 1458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.get_instance_route53_names": {
            "name": "get_instance_route53_names",
            "location": 1485,
            "return": [
                "str",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "Union[Sequence[str], Sequence[int]]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "Ec2Inventory.get_host_info_dict_from_instance": {
            "name": "get_host_info_dict_from_instance",
            "location": 1506,
            "return": [
                "str",
                "bool",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Ec2Inventory.get_host_info_dict_from_describe_dict": {
            "name": "get_host_info_dict_from_describe_dict",
            "location": 1559,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "describe_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Ec2Inventory.get_host_info": {
            "name": "get_host_info",
            "location": 1644,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.push": {
            "name": "push",
            "location": 1663,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "my_dict": [
                    "dict",
                    "str",
                    "Callable"
                ],
                "key": [
                    "dict",
                    "str",
                    "Callable"
                ],
                "element": [
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Callable]"
                ]
            }
        },
        "Ec2Inventory.push_group": {
            "name": "push_group",
            "location": 1673,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "my_dict": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "key": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "element": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "Ec2Inventory.get_inventory_from_cache": {
            "name": "get_inventory_from_cache",
            "location": 1682,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.load_index_from_cache": {
            "name": "load_index_from_cache",
            "location": 1690,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.write_to_cache": {
            "name": "write_to_cache",
            "location": 1696,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Dict[str, float]",
                    "bytes",
                    "List[str]",
                    "Mapping[str, Any]"
                ],
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Ec2Inventory.uncammelize": {
            "name": "uncammelize",
            "location": 1703,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T",
                    "KT",
                    "Union[int, slice]",
                    "bytes"
                ]
            }
        },
        "Ec2Inventory.to_safe": {
            "name": "to_safe",
            "location": 1707,
            "return": [
                "bool",
                "List[Dict[str, str]]",
                "list",
                "Tuple[Sequence]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Ec2Inventory.json_format_dict": {
            "name": "json_format_dict",
            "location": 1714,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ],
                "pretty": [
                    "bool",
                    "Optional[bool]",
                    "list",
                    "memoryview",
                    "Iterable[bytes]",
                    "List[Dict]"
                ]
            }
        }
    },
    "nucypher-development/docs/source/conf.py": {
        "remove_module_license": {
            "name": "remove_module_license",
            "location": 218,
            "return": [],
            "arguments": {
                "app": [],
                "what": [],
                "name": [],
                "obj": [],
                "options": [],
                "lines": []
            }
        },
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 223,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "run_solidity_apidoc": {
            "name": "run_solidity_apidoc",
            "location": 264,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 275,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "nucypher-development/examples/run_demo_ursula_fleet.py": {
        "spin_up_federated_ursulas": {
            "name": "spin_up_federated_ursulas",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "quantity": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/examples/finnegans_wake_demo/finnegans-wake-demo-federated.py": {},
    "nucypher-development/examples/finnegans_wake_demo/finnegans-wake-demo-l2.py": {},
    "nucypher-development/examples/heartbeat_demo/alicia.py": {},
    "nucypher-development/examples/heartbeat_demo/doctor.py": {},
    "nucypher-development/examples/heartbeat_demo/doctor_keys.py": {
        "generate_doctor_keys": {
            "name": "generate_doctor_keys",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_get_keys": {
            "name": "_get_keys",
            "location": 49,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "file": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Iterable[str]",
                    "path.Path"
                ],
                "key_class": [
                    "str",
                    "bytes",
                    "Union[bytes, str]",
                    "Union[str, bytes]",
                    "int"
                ]
            }
        },
        "get_doctor_pubkeys": {
            "name": "get_doctor_pubkeys",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "Optional[float]",
                "Optional[Dict[str, Any]]",
                "Optional[risesdk.protocol.PublicKey]",
                "Optional[tuple]"
            ],
            "arguments": {}
        },
        "get_doctor_privkeys": {
            "name": "get_doctor_privkeys",
            "location": 65,
            "return": [
                "str",
                "Optional[bytes]",
                "Callable[[], str]"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/examples/heartbeat_demo/heart_monitor.py": {
        "generate_heart_rate_samples": {
            "name": "generate_heart_rate_samples",
            "location": 28,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "policy_pubkey": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "samples": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "save_as_file": [
                    "bool",
                    "str",
                    "List[List[str]]"
                ]
            }
        }
    },
    "nucypher-development/newsfragments/validate_files.py": {},
    "nucypher-development/nucypher/exceptions.py": {
        "DevelopmentInstallationRequired.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "importable_name": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/types.py": {},
    "nucypher-development/nucypher/__about__.py": {},
    "nucypher-development/nucypher/__init__.py": {},
    "nucypher-development/nucypher/acumen/nicknames.py": {
        "NicknameCharacter.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Dict[str, str]"
                ],
                "color_name": [
                    "str",
                    "Optional[str]"
                ],
                "color_hex": [
                    "bool",
                    "Optional[str]",
                    "Sequence",
                    "Mapping[str, Any]",
                    "Optional[int]",
                    "int",
                    "str"
                ]
            }
        },
        "NicknameCharacter.to_json": {
            "name": "to_json",
            "location": 75,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NicknameCharacter.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nickname.from_seed": {
            "name": "from_seed",
            "location": 87,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "seed": [
                    "int",
                    "float",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "length": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Nickname.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "characters": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Union[str, pathlib.Path, None]",
                    "Iterable[str]",
                    "Optional[Callable[[pathlib.Path], int]]",
                    "str",
                    "Optional[List[str]]",
                    "pathlib.Path"
                ]
            }
        },
        "Nickname.to_json": {
            "name": "to_json",
            "location": 104,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nickname.__str__": {
            "name": "__str__",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/acumen/perception.py": {
        "ArchivedFleetState.to_json": {
            "name": "to_json",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateDiff.empty": {
            "name": "empty",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.new": {
            "name": "new",
            "location": 75,
            "return": [],
            "arguments": {
                "cls": [],
                "this_node": []
            }
        },
        "FleetState.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "this_node_ref": [],
                "this_node_metadata": []
            }
        },
        "FleetState.archived": {
            "name": "archived",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState._calculate_diff": {
            "name": "_calculate_diff",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "this_node_updated": [],
                "nodes_to_add": [],
                "nodes_to_remove": []
            }
        },
        "FleetState.with_updated_nodes": {
            "name": "with_updated_nodes",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "nodes_to_add": [],
                "nodes_to_remove": [],
                "skip_this_node": []
            }
        },
        "FleetState.population": {
            "name": "population",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.__getitem__": {
            "name": "__getitem__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "FleetState.addresses": {
            "name": "addresses",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.__bool__": {
            "name": "__bool__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.__contains__": {
            "name": "__contains__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "FleetState.__iter__": {
            "name": "__iter__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.__len__": {
            "name": "__len__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.shuffled": {
            "name": "shuffled",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.to_json": {
            "name": "to_json",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.icon": {
            "name": "icon",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.items": {
            "name": "items",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.values": {
            "name": "values",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.__str__": {
            "name": "__str__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetState.__repr__": {
            "name": "__repr__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "domain": [],
                "this_node": []
            }
        },
        "FleetSensor.record_node": {
            "name": "record_node",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FleetSensor.__getitem__": {
            "name": "__getitem__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "FleetSensor.__bool__": {
            "name": "__bool__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.__contains__": {
            "name": "__contains__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "FleetSensor.__iter__": {
            "name": "__iter__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.__len__": {
            "name": "__len__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.__repr__": {
            "name": "__repr__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.current_state": {
            "name": "current_state",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.checksum": {
            "name": "checksum",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.population": {
            "name": "population",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.nickname": {
            "name": "nickname",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.icon": {
            "name": "icon",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.timestamp": {
            "name": "timestamp",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.items": {
            "name": "items",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.values": {
            "name": "values",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.latest_state": {
            "name": "latest_state",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.previous_states": {
            "name": "previous_states",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "quantity": []
            }
        },
        "FleetSensor.addresses": {
            "name": "addresses",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.record_fleet_state": {
            "name": "record_fleet_state",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "skip_this_node": []
            }
        },
        "FleetSensor.shuffled": {
            "name": "shuffled",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetSensor.mark_as": {
            "name": "mark_as",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "node": []
            }
        },
        "FleetSensor.record_remote_fleet_state": {
            "name": "record_remote_fleet_state",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": [],
                "state_checksum": [],
                "timestamp": [],
                "population": []
            }
        },
        "FleetSensor.status_info": {
            "name": "status_info",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address_or_node": []
            }
        },
        "RemoteUrsulaStatus.to_json": {
            "name": "to_json",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/acumen/__init__.py": {},
    "nucypher-development/nucypher/blockchain/economics.py": {
        "Economics.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "min_operator_seconds": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "min_authorization": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "fee_rate": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Economics.pre_application_deployment_parameters": {
            "name": "pre_application_deployment_parameters",
            "location": 84,
            "return": [
                "str",
                "Tuple[float, float, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EconomicsFactory.get_economics": {
            "name": "get_economics",
            "location": 112,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Set[str]]",
                    "str",
                    "int"
                ],
                "registry": [
                    "str",
                    "memoryview",
                    "bytes",
                    "Dict[str, Union[str, int]]",
                    "List[str]",
                    "Type"
                ],
                "eth_provider_uri": [
                    "str",
                    "IO[str]",
                    "Optional[bool]",
                    "eth.consensus.clique.datatypes.Vote",
                    "int"
                ]
            }
        },
        "EconomicsFactory.retrieve_from_blockchain": {
            "name": "retrieve_from_blockchain",
            "location": 122,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "registry": [
                    "str"
                ],
                "eth_provider_uri": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/__init__.py": {},
    "nucypher-development/nucypher/blockchain/eth/actors.py": {
        "BaseActor.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "domain": [],
                "registry": [],
                "transacting_power": [],
                "checksum_address": [],
                "economics": []
            }
        },
        "BaseActor.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseActor.__eq__": {
            "name": "__eq__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseActor.eth_balance": {
            "name": "eth_balance",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseActor.wallet_address": {
            "name": "wallet_address",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenActor.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "NucypherTokenActor.token_agent": {
            "name": "token_agent",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenActor.token_balance": {
            "name": "token_balance",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractAdministrator.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractAdministrator.__repr__": {
            "name": "__repr__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractAdministrator.__get_deployer": {
            "name": "__get_deployer",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": []
            }
        },
        "ContractAdministrator.deploy_contract": {
            "name": "deploy_contract",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": [],
                "gas_limit": [],
                "deployment_mode": [],
                "ignore_deployed": [],
                "progress": [],
                "confirmations": [],
                "deployment_parameters": [],
                "emitter": []
            }
        },
        "ContractAdministrator.upgrade_contract": {
            "name": "upgrade_contract",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": [],
                "confirmations": [],
                "ignore_deployed": []
            }
        },
        "ContractAdministrator.retarget_proxy": {
            "name": "retarget_proxy",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "confirmations": [],
                "contract_name": [],
                "target_address": [],
                "just_build_transaction": []
            }
        },
        "ContractAdministrator.rollback_contract": {
            "name": "rollback_contract",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": []
            }
        },
        "ContractAdministrator.save_deployment_receipts": {
            "name": "save_deployment_receipts",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "receipts": [],
                "filename_prefix": []
            }
        },
        "Operator.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "work_tracker": [],
                "operator_address": []
            }
        },
        "Operator._local_operator_address": {
            "name": "_local_operator_address",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.wallet_address": {
            "name": "wallet_address",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.staking_provider_address": {
            "name": "staking_provider_address",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.get_staking_provider_address": {
            "name": "get_staking_provider_address",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.is_confirmed": {
            "name": "is_confirmed",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Operator.confirm_address": {
            "name": "confirm_address",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "fire_and_forget": []
            }
        },
        "Operator.block_until_ready": {
            "name": "block_until_ready",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "poll_rate": [],
                "timeout": []
            }
        },
        "Operator.get_work_is_needed_check": {
            "name": "get_work_is_needed_check",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockchainPolicyAuthor.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "eth_provider_uri": []
            }
        },
        "BlockchainPolicyAuthor.create_policy": {
            "name": "create_policy",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Investigator.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Investigator.request_evaluation": {
            "name": "request_evaluation",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "evidence": []
            }
        },
        "Investigator.was_this_evidence_evaluated": {
            "name": "was_this_evidence_evaluated",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "evidence": []
            }
        },
        "Operator.get_work_is_needed_check.func": {
            "name": "func",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/agents.py": {
        "EthereumContractAgent.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "bool",
                    "Type",
                    "Dict[str, Any]",
                    "Hashable"
                ],
                "eth_provider_uri": [
                    "Optional[float]",
                    "float"
                ],
                "contract": [
                    "bool",
                    "Hashable",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ],
                "transaction_gas": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "contract_version": [
                    "bool",
                    "Hashable",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ]
            }
        },
        "EthereumContractAgent.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.__eq__": {
            "name": "__eq__",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "int"
                ]
            }
        },
        "EthereumContractAgent.contract": {
            "name": "contract",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.contract_address": {
            "name": "contract_address",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.owner": {
            "name": "owner",
            "location": 139,
            "return": [
                "Optional[bool]",
                "bool",
                "str",
                "Optional[int]",
                "Optional[web3.Web3]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenAgent.get_balance": {
            "name": "get_balance",
            "location": 151,
            "return": [
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "eth_evm.ChecksumAddress",
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "NucypherTokenAgent.get_allowance": {
            "name": "get_allowance",
            "location": 157,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "eth_evm.ChecksumAddress",
                    "int",
                    "str",
                    "dict",
                    "bytes"
                ],
                "spender": [
                    "eth_evm.ChecksumAddress",
                    "int",
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "NucypherTokenAgent.increase_allowance": {
            "name": "increase_allowance",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "dict",
                    "eggman.types.Handler",
                    "bool"
                ],
                "spender_address": [
                    "bool",
                    "float"
                ],
                "increase": [
                    "bool",
                    "float"
                ]
            }
        },
        "NucypherTokenAgent.decrease_allowance": {
            "name": "decrease_allowance",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "dict",
                    "eggman.types.Handler",
                    "bool"
                ],
                "spender_address": [
                    "bool",
                    "float"
                ],
                "decrease": [
                    "bool",
                    "float"
                ]
            }
        },
        "NucypherTokenAgent.approve_transfer": {
            "name": "approve_transfer",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "nucypher.types.NuNits",
                    "nucypher.types.Period.Delta",
                    "int"
                ],
                "spender_address": [
                    "nucypher.types.NuNits",
                    "nucypher.types.Period.Delta",
                    "int"
                ],
                "transacting_power": [
                    "eth.abc.MiningChainAPI",
                    "dict",
                    "raiden.utils.Any",
                    "int"
                ]
            }
        },
        "NucypherTokenAgent.transfer": {
            "name": "transfer",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float",
                    "tfchain.types.PrimitiveTypes.Currency"
                ],
                "target_address": [
                    "float",
                    "tfchain.types.PrimitiveTypes.Currency"
                ],
                "transacting_power": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "NucypherTokenAgent.approve_and_call": {
            "name": "approve_and_call",
            "location": 211,
            "return": [
                "type",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "target_address": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "transacting_power": [
                    "str",
                    "Type",
                    "bool",
                    "raiden.utils.List[EthNodeDescription]",
                    "raiden.utils.ChainID"
                ],
                "call_data": [
                    "guillotina.interfaces.security.IPrincipalRoleMap"
                ],
                "gas_limit": [
                    "int",
                    "bool",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "bytes",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "NucypherTokenAgent._validate_zero_allowance": {
            "name": "_validate_zero_allowance",
            "location": 229,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "float",
                    "int",
                    "str"
                ],
                "target_address": [
                    "str",
                    "raiden.utils.Address",
                    "Optional[int]"
                ],
                "transacting_power": [
                    "raiden.utils.Address",
                    "bool"
                ]
            }
        },
        "SubscriptionManagerAgent.fee_rate": {
            "name": "fee_rate",
            "location": 254,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionManagerAgent.is_policy_active": {
            "name": "is_policy_active",
            "location": 259,
            "return": [
                "int",
                "Dict[str, Tuple[int, int]]",
                "\"Parameter\"",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "SubscriptionManagerAgent.fetch_policy": {
            "name": "fetch_policy",
            "location": 264,
            "return": [
                "str",
                "int",
                "utils.JSON"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SubscriptionManagerAgent.create_policy": {
            "name": "create_policy",
            "location": 281,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "int",
                    "bool",
                    "rotkehlchen.Timestamp"
                ],
                "transacting_power": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "size": [
                    "int",
                    "bool",
                    "rotkehlchen.Timestamp"
                ],
                "start_timestamp": [
                    "int",
                    "bool",
                    "rotkehlchen.Timestamp"
                ],
                "end_timestamp": [
                    "int",
                    "bool",
                    "rotkehlchen.Timestamp"
                ],
                "value": [
                    "int",
                    "Callable",
                    "Optional[Type[BaseException]]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "owner_address": [
                    "Optional[eth_evm.ChecksumAddress]",
                    "str",
                    "eth_evm.ChecksumAddress",
                    "Optional[\"PNTableMetaData\"]"
                ]
            }
        },
        "AdjudicatorAgent.evaluate_cfrag": {
            "name": "evaluate_cfrag",
            "location": 312,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "evidence": [
                    "types.FrameType",
                    "bool",
                    "float"
                ],
                "transacting_power": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "AdjudicatorAgent.was_this_evidence_evaluated": {
            "name": "was_this_evidence_evaluated",
            "location": 322,
            "return": [
                "int",
                "Dict[str, Tuple[int, int]]",
                "\"Parameter\"",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "evidence": [
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "AdjudicatorAgent.staking_escrow_contract": {
            "name": "staking_escrow_contract",
            "location": 329,
            "return": [
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.hash_algorithm": {
            "name": "hash_algorithm",
            "location": 334,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "bool",
                "types.signals.SignalHandlerT",
                "Union[List[str], List[Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.base_penalty": {
            "name": "base_penalty",
            "location": 339,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "str",
                "types.signals.SignalHandlerT"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.penalty_history_coefficient": {
            "name": "penalty_history_coefficient",
            "location": 344,
            "return": [
                "eth.vm.computation.BaseComputation",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.percentage_penalty_coefficient": {
            "name": "percentage_penalty_coefficient",
            "location": 349,
            "return": [
                "eth.vm.computation.BaseComputation",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.reward_coefficient": {
            "name": "reward_coefficient",
            "location": 354,
            "return": [
                "str",
                "float",
                "tuple",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.penalty_history": {
            "name": "penalty_history",
            "location": 358,
            "return": [
                "bool",
                "Tuple[Tuple[int, Any]]",
                "bytes",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "dict",
                    "Optional[List[int]]",
                    "str",
                    "bool",
                    "slice"
                ]
            }
        },
        "AdjudicatorAgent.slashing_parameters": {
            "name": "slashing_parameters",
            "location": 362,
            "return": [
                "int",
                "Dict[str, Any]",
                "List['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "PREApplicationAgent.get_min_authorization": {
            "name": "get_min_authorization",
            "location": 394,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PREApplicationAgent.get_min_operator_seconds": {
            "name": "get_min_operator_seconds",
            "location": 399,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PREApplicationAgent.get_staking_provider_from_operator": {
            "name": "get_staking_provider_from_operator",
            "location": 404,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "operator_address": [
                    "cmk.utils.type_defs.EventRule",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "PREApplicationAgent.get_operator_from_staking_provider": {
            "name": "get_operator_from_staking_provider",
            "location": 409,
            "return": [
                "List[str]",
                "dict",
                "set",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "staking_provider": [
                    "str",
                    "bool",
                    "ark.types.PrimalDinoCharacter",
                    "Dict[str, Any]"
                ]
            }
        },
        "PREApplicationAgent.get_beneficiary": {
            "name": "get_beneficiary",
            "location": 414,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "staking_provider": [
                    "str",
                    "int"
                ]
            }
        },
        "PREApplicationAgent.is_operator_confirmed": {
            "name": "is_operator_confirmed",
            "location": 419,
            "return": [
                "int",
                "Dict[str, Tuple[int, int]]",
                "\"Parameter\"",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool"
                ]
            }
        },
        "PREApplicationAgent.get_staking_provider_info": {
            "name": "get_staking_provider_info",
            "location": 424,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "staking_provider": [
                    "eth_evm.ChecksumAddress",
                    "Iterable",
                    "dict"
                ]
            }
        },
        "PREApplicationAgent.get_authorized_stake": {
            "name": "get_authorized_stake",
            "location": 430,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "staking_provider": [
                    "str",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "PREApplicationAgent.is_authorized": {
            "name": "is_authorized",
            "location": 435,
            "return": [
                "int",
                "Dict[str, Tuple[int, int]]",
                "\"Parameter\"",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "staking_provider": [
                    "mypy.types.Type"
                ]
            }
        },
        "PREApplicationAgent.get_staking_providers_population": {
            "name": "get_staking_providers_population",
            "location": 440,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PREApplicationAgent.get_staking_providers": {
            "name": "get_staking_providers",
            "location": 445,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "PREApplicationAgent.get_active_staking_providers": {
            "name": "get_active_staking_providers",
            "location": 452,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "start_index": [
                    "raiden.utils.ChannelID",
                    "Optional[bool]",
                    "Dict[int, dict]",
                    "rotkehlchen.Timestamp",
                    "float",
                    "Optional[int]"
                ],
                "max_results": [
                    "raiden.utils.ChannelID",
                    "Optional[bool]",
                    "Dict[int, dict]",
                    "rotkehlchen.Timestamp",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "PREApplicationAgent.swarm": {
            "name": "swarm",
            "location": 457,
            "return": [
                "typing.Iterable[eth_typing.evm.ChecksumAddress]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PREApplicationAgent.get_all_active_staking_providers": {
            "name": "get_all_active_staking_providers",
            "location": 463,
            "return": [
                "bool",
                "str",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "pagination_size": [
                    "type",
                    "bool",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "raiden.utils.Any"
                ]
            }
        },
        "PREApplicationAgent.get_staking_provider_reservoir": {
            "name": "get_staking_provider_reservoir",
            "location": 515,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "without": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str",
                    "Dict[str, Any]"
                ],
                "pagination_size": [
                    "int",
                    "str"
                ]
            }
        },
        "PREApplicationAgent.confirm_operator_address": {
            "name": "confirm_operator_address",
            "location": 543,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Tuple[str, str]"
                ],
                "fire_and_forget": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "PREApplicationAgent.bond_operator": {
            "name": "bond_operator",
            "location": 553,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "staking_provider": [
                    "web3.contracContract",
                    "str",
                    "int",
                    "bool"
                ],
                "operator": [
                    "web3.contracContract",
                    "str",
                    "int",
                    "bool"
                ],
                "transacting_power": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "ContractAgency.get_agent": {
            "name": "get_agent",
            "location": 568,
            "return": [
                "str",
                "Iterable[int]",
                "IO[str]",
                "int",
                "mypy.types.Type"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "recidiviz.common.constants.entity_enum.EntityEnumMeta",
                    "Optional[int]",
                    "Optional[Dict]",
                    "Optional[float]",
                    "int"
                ],
                "agent_class": [
                    "raiden.utils.AddressHex",
                    "rotkehlchen.Timestamp",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "bool"
                ],
                "registry": [
                    "eth.chains.base.MiningChain",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "bool"
                ],
                "eth_provider_uri": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Iterable[List[Any]]",
                    "bool"
                ],
                "contract_version": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Iterable[List[Any]]",
                    "bool"
                ]
            }
        },
        "ContractAgency._contract_name_to_agent_name": {
            "name": "_contract_name_to_agent_name",
            "location": 594,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ContractAgency.get_agent_by_contract_name": {
            "name": "get_agent_by_contract_name",
            "location": 604,
            "return": [
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ],
                "contract_name": [
                    "str",
                    "int",
                    "float"
                ],
                "registry": [
                    "Optional[str]",
                    "Optional[float]",
                    "str",
                    "Optional[bool]"
                ],
                "eth_provider_uri": [
                    "Optional[str]",
                    "Optional[float]",
                    "str",
                    "Optional[bool]"
                ],
                "contract_version": [
                    "Optional[str]",
                    "Optional[float]",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "WeightedSampler.__init__": {
            "name": "__init__",
            "location": 627,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "weighted_elements": [
                    "Dict[Any, int]",
                    "Callable[[Any, Any], Any]",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "WeightedSampler.sample_no_replacement": {
            "name": "sample_no_replacement",
            "location": 636,
            "return": [
                "mypy.types.Type",
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "self": [],
                "rng": [
                    "int",
                    "numpy.random.RandomState",
                    "random.Random"
                ],
                "quantity": [
                    "List[int]",
                    "List[List[T]]",
                    "Optional[int]",
                    "random.Random",
                    "list",
                    "List[str]"
                ]
            }
        },
        "WeightedSampler.__len__": {
            "name": "__len__",
            "location": 670,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakingProvidersReservoir.__init__": {
            "name": "__init__",
            "location": 676,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staking_provider_map": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "StakingProvidersReservoir.__len__": {
            "name": "__len__",
            "location": 680,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakingProvidersReservoir.draw": {
            "name": "draw",
            "location": 683,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "StakingProvidersReservoir.draw_at_most": {
            "name": "draw_at_most",
            "location": 689,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AdjudicatorAgent.slashing_parameters._call_function_by_name": {
            "name": "_call_function_by_name",
            "location": 371,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "mypy.types.Instance",
                    "mypy.types.FunctionLike"
                ]
            }
        },
        "PREApplicationAgent.get_all_active_staking_providers.checksum_address": {
            "name": "checksum_address",
            "location": 507,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "int",
                "cmk.utils.type_defs.HostName",
                "Dict[str, Any]",
                "nucypher.characters.control.emitters.StdoutEmitter"
            ],
            "arguments": {
                "address": [
                    "dict",
                    "str",
                    "itsim.types.AddressRepr"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/clients.py": {
        "EthereumClient.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "w3": [
                    "float",
                    "int",
                    "Tuple[int, int]"
                ],
                "node_technology": [
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "version": [
                    "float",
                    "int",
                    "Tuple[int, int]"
                ],
                "platform": [
                    "float",
                    "int",
                    "Tuple[int, int]"
                ],
                "backend": [
                    "float",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "EthereumClient._add_default_middleware": {
            "name": "_add_default_middleware",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient._get_variant": {
            "name": "_get_variant",
            "location": 157,
            "return": [
                "str",
                "int",
                "nucypher.blockchain.eth.deployers.BaseContractDeployer"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "w3": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "EthereumClient.from_w3": {
            "name": "from_w3",
            "location": 161,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "dict"
                ],
                "w3": [
                    "str",
                    "int"
                ]
            }
        },
        "EthereumClient.peers": {
            "name": "peers",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.chain_name": {
            "name": "chain_name",
            "location": 213,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.lock_account": {
            "name": "lock_account",
            "location": 218,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "walledomain.Account",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Counter"
                ]
            }
        },
        "EthereumClient.unlock_account": {
            "name": "unlock_account",
            "location": 223,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        },
        "EthereumClient.is_connected": {
            "name": "is_connected",
            "location": 229,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.etherbase": {
            "name": "etherbase",
            "location": 233,
            "return": [
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.accounts": {
            "name": "accounts",
            "location": 237,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.get_balance": {
            "name": "get_balance",
            "location": 240,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "web3.Web3"
                ]
            }
        },
        "EthereumClient.inject_middleware": {
            "name": "inject_middleware",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "middleware": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EthereumClient.add_middleware": {
            "name": "add_middleware",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "middleware": [
                    "Callable",
                    "str",
                    "Union[str, bytes]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "EthereumClient.set_gas_strategy": {
            "name": "set_gas_strategy",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gas_strategy": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ]
            }
        },
        "EthereumClient.chain_id": {
            "name": "chain_id",
            "location": 253,
            "return": [
                "mypy.types.Type",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.net_version": {
            "name": "net_version",
            "location": 262,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.get_contract": {
            "name": "get_contract",
            "location": 265,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.gas_price": {
            "name": "gas_price",
            "location": 269,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.gas_price_for_transaction": {
            "name": "gas_price_for_transaction",
            "location": 275,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "Optional[List[str]]",
                    "Callable",
                    "str"
                ]
            }
        },
        "EthereumClient.block_number": {
            "name": "block_number",
            "location": 283,
            "return": [
                "str",
                "Type",
                "logging.LogRecord",
                "Iterable[int]",
                "trezor.messages.TxInputType.TxInputType",
                "starlette.types.Scope"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.coinbase": {
            "name": "coinbase",
            "location": 287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.wait_for_receipt": {
            "name": "wait_for_receipt",
            "location": 290,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "Optional[bytes]"
                ],
                "timeout": [
                    "int",
                    "float"
                ],
                "confirmations": [
                    "float",
                    "Optional[bytes]"
                ]
            }
        },
        "EthereumClient.block_until_enough_confirmations": {
            "name": "block_until_enough_confirmations",
            "location": 321,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "float",
                    "str",
                    "Iterable[T]",
                    "dict",
                    "web3.contracContract"
                ],
                "timeout": [
                    "float",
                    "str",
                    "web3.contracContract",
                    "dict",
                    "eth_evm.ChecksumAddress"
                ],
                "confirmations": [
                    "bool",
                    "dict",
                    "int",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "EthereumClient._calculate_confirmations_timeout": {
            "name": "_calculate_confirmations_timeout",
            "location": 344,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "confirmations": [
                    "str",
                    "dict"
                ]
            }
        },
        "EthereumClient.check_transaction_is_on_chain": {
            "name": "check_transaction_is_on_chain",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "receipt": [
                    "float",
                    "web3.types.Wei"
                ]
            }
        },
        "EthereumClient.sign_transaction": {
            "name": "sign_transaction",
            "location": 364,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]",
                    "eth.rlp.headers.BlockHeader",
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "EthereumClient.get_transaction": {
            "name": "get_transaction",
            "location": 367,
            "return": [
                "str",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "str",
                    "Optional[str]",
                    "int",
                    "dict",
                    "Optional[bool]"
                ]
            }
        },
        "EthereumClient.get_transaction_receipt": {
            "name": "get_transaction_receipt",
            "location": 370,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "bool",
                    "int",
                    "Iterable[Callable]"
                ]
            }
        },
        "EthereumClient.get_transaction_count": {
            "name": "get_transaction_count",
            "location": 373,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "pending": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "EthereumClient.send_transaction": {
            "name": "send_transaction",
            "location": 377,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "EthereumClient.send_raw_transaction": {
            "name": "send_raw_transaction",
            "location": 380,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "transaction_bytes": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "EthereumClient.sign_message": {
            "name": "sign_message",
            "location": 383,
            "return": [
                "str",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "web3.contracContract"
                ],
                "message": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "web3.contracContract"
                ]
            }
        },
        "EthereumClient.get_blocktime": {
            "name": "get_blocktime",
            "location": 391,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.get_block": {
            "name": "get_block",
            "location": 396,
            "return": [
                "Optional[str]",
                "bool",
                "int",
                "Callable",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "block_identifier": [
                    "float",
                    "eth.abc.BlockAPI",
                    "eth.abc.ChainAPI",
                    "types.FrameType"
                ]
            }
        },
        "EthereumClient._has_latest_block": {
            "name": "_has_latest_block",
            "location": 399,
            "return": [
                "int",
                "T",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.parse_transaction_data": {
            "name": "parse_transaction_data",
            "location": 404,
            "return": [
                "Iterable",
                "List[str]",
                "Sequence[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "int",
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Type[T]"
                ]
            }
        },
        "GethClient._get_variant": {
            "name": "_get_variant",
            "location": 411,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "w3": [
                    "str",
                    "Type",
                    "bool"
                ]
            }
        },
        "GethClient.is_local": {
            "name": "is_local",
            "location": 421,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GethClient.peers": {
            "name": "peers",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GethClient.new_account": {
            "name": "new_account",
            "location": 428,
            "return": [
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GethClient.unlock_account": {
            "name": "unlock_account",
            "location": 432,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ],
                "password": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "duration": [
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "GethClient.lock_account": {
            "name": "lock_account",
            "location": 450,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "GethClient.sign_transaction": {
            "name": "sign_transaction",
            "location": 453,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "GethClient.wallets": {
            "name": "wallets",
            "location": 467,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParityClient.peers": {
            "name": "peers",
            "location": 478,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParityClient.new_account": {
            "name": "new_account",
            "location": 484,
            "return": [
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ParityClient.unlock_account": {
            "name": "unlock_account",
            "location": 488,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "ParityClient.lock_account": {
            "name": "lock_account",
            "location": 491,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "GanacheClient.unlock_account": {
            "name": "unlock_account",
            "location": 498,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraClient._add_default_middleware": {
            "name": "_add_default_middleware",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraClient.unlock_account": {
            "name": "unlock_account",
            "location": 511,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlchemyClient._add_default_middleware": {
            "name": "_add_default_middleware",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumTesterClient.unlock_account": {
            "name": "unlock_account",
            "location": 526,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "duration": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "EthereumTesterClient.lock_account": {
            "name": "lock_account",
            "location": 537,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "eth.rlp.headers.BlockHeader"
                ]
            }
        },
        "EthereumTesterClient.new_account": {
            "name": "new_account",
            "location": 546,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "EthereumTesterClient.__get_signing_key": {
            "name": "__get_signing_key",
            "location": 551,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bytes",
                    "dict",
                    "eth.rlp.headers.BlockHeader"
                ]
            }
        },
        "EthereumTesterClient.sign_transaction": {
            "name": "sign_transaction",
            "location": 560,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "EthereumTesterClient.sign_message": {
            "name": "sign_message",
            "location": 568,
            "return": [
                "List[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "dict",
                    "str",
                    "eth.abc.BlockHeaderAPI",
                    "Callable"
                ],
                "message": [
                    "str",
                    "Optional[constants.ChannelList]",
                    "bytearray"
                ]
            }
        },
        "EthereumTesterClient.parse_transaction_data": {
            "name": "parse_transaction_data",
            "location": 575,
            "return": [
                "str",
                "starfish.types.Axes",
                "List[int]",
                "bool",
                "dict",
                "list"
            ],
            "arguments": {
                "self": [],
                "transaction": [
                    "List[dict]",
                    "Type[Any]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "EthereumClient.ChainReorganizationDetected.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "receipt": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/constants.py": {},
    "nucypher-development/nucypher/blockchain/eth/decorators.py": {
        "validate_checksum_address": {
            "name": "validate_checksum_address",
            "location": 49,
            "return": [
                "int",
                "Optional[str]",
                "bytearray"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "only_me": {
            "name": "only_me",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "save_receipt": {
            "name": "save_receipt",
            "location": 120,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "actor_method": [
                    "Iterable[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[int]",
                    "Iterable",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "contract_api": {
            "name": "contract_api",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "interface": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "validate_checksum_address.wrapped": {
            "name": "wrapped",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "only_me.wrapped": {
            "name": "wrapped",
            "location": 113,
            "return": [],
            "arguments": {
                "actor": []
            }
        },
        "save_receipt.wrapped": {
            "name": "wrapped",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [
                    "str",
                    "int"
                ]
            }
        },
        "contract_api.decorator": {
            "name": "decorator",
            "location": 142,
            "return": [
                "str",
                "datetime.date"
            ],
            "arguments": {
                "agent_method": [
                    "str",
                    "Optional[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/deployers.py": {
        "BaseContractDeployer.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "economics": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseContractDeployer.economics": {
            "name": "economics",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.contract_address": {
            "name": "contract_address",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.contract": {
            "name": "contract",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.dispatcher": {
            "name": "dispatcher",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.is_deployed": {
            "name": "is_deployed",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_version": [
                    "str",
                    "Sequence[str]",
                    "List[float]",
                    "Set[str]"
                ]
            }
        },
        "BaseContractDeployer.check_deployment_readiness": {
            "name": "check_deployment_readiness",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "deployer_address": [
                    "int",
                    "bool",
                    "List[List[str]]",
                    "str"
                ],
                "contract_version": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "List[bytes]"
                ],
                "ignore_deployed": [
                    "Optional[float]",
                    "str",
                    "int",
                    "Optional[Callable]",
                    "Optional[str]"
                ],
                "fail": [
                    "int",
                    "bool",
                    "List[List[str]]",
                    "str"
                ],
                "additional_rules": [
                    "bytes",
                    "int",
                    "Optional[str]",
                    "list",
                    "dict"
                ]
            }
        },
        "BaseContractDeployer.deploy": {
            "name": "deploy",
            "location": 153,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "bool",
                    "str",
                    "Set[Tuple[int, int]]",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ],
                "deployment_mode": [
                    "bool",
                    "str",
                    "Set[Tuple[int, int]]",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ],
                "gas_limit": [
                    "bool",
                    "str",
                    "Set[Tuple[int, int]]",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ],
                "progress": [
                    "bool",
                    "str",
                    "Set[Tuple[int, int]]",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ],
                "emitter": [
                    "bool",
                    "str",
                    "Set[Tuple[int, int]]",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ]
            }
        },
        "BaseContractDeployer.make_agent": {
            "name": "make_agent",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.get_latest_enrollment": {
            "name": "get_latest_enrollment",
            "location": 170,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer._get_deployed_contract": {
            "name": "_get_deployed_contract",
            "location": 178,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnableContractMixin.owner": {
            "name": "owner",
            "location": 199,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnableContractMixin.transfer_ownership": {
            "name": "transfer_ownership",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "str",
                    "type",
                    "int"
                ],
                "new_owner": [
                    "web3.contracContract"
                ],
                "transaction_gas_limit": [
                    "str",
                    "type",
                    "int"
                ]
            }
        },
        "UpgradeableContractMixin.deploy": {
            "name": "deploy",
            "location": 250,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "deployment_mode": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ],
                "gas_limit": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ],
                "progress": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ],
                "contract_version": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ],
                "ignore_deployed": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ]
            }
        },
        "UpgradeableContractMixin.get_principal_contract": {
            "name": "get_principal_contract",
            "location": 265,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeableContractMixin.get_proxy_contract": {
            "name": "get_proxy_contract",
            "location": 277,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeableContractMixin.get_proxy_deployer": {
            "name": "get_proxy_deployer",
            "location": 286,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeableContractMixin.retarget": {
            "name": "retarget",
            "location": 293,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "Optional[str]",
                    "Optional[\"Frame\"]",
                    "List[str]",
                    "Optional[Iterable[str]]",
                    "Optional[Dict]"
                ],
                "target_address": [
                    "Optional[str]",
                    "Optional[\"Frame\"]",
                    "List[str]",
                    "Optional[Iterable[str]]",
                    "Optional[Dict]"
                ],
                "confirmations": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "gas_limit": [
                    "Optional[str]",
                    "Optional[\"Frame\"]",
                    "List[str]",
                    "Optional[Iterable[str]]",
                    "Optional[Dict]"
                ],
                "just_build_transaction": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "UpgradeableContractMixin.upgrade": {
            "name": "upgrade",
            "location": 323,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ],
                "confirmations": [],
                "gas_limit": [],
                "contract_version": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ],
                "ignore_deployed": [
                    "int"
                ]
            }
        },
        "UpgradeableContractMixin.rollback": {
            "name": "rollback",
            "location": 366,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gas_limit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UpgradeableContractMixin._finish_bare_deployment": {
            "name": "_finish_bare_deployment",
            "location": 380,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "deployment_receipt": [
                    "str",
                    "nucypher.blockchain.eth.deployers.BaseContractDeployer",
                    "int"
                ],
                "progress": [
                    "list",
                    "List[str]",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "NucypherTokenDeployer.deploy": {
            "name": "deploy",
            "location": 400,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "tuple"
                ],
                "progress": [],
                "confirmations": [
                    "int",
                    "str",
                    "tuple"
                ],
                "deployment_mode": [
                    "str",
                    "bool"
                ],
                "ignore_deployed": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "emitter": [
                    "bool",
                    "str",
                    "type",
                    "raiden.constants.Environment"
                ]
            }
        },
        "ProxyContractDeployer.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_contract": [
                    "int",
                    "bool"
                ],
                "bare": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "ProxyContractDeployer.deploy": {
            "name": "deploy",
            "location": 454,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [],
                "gas_limit": [],
                "progress": [
                    "int",
                    "Callable",
                    "str"
                ],
                "confirmations": []
            }
        },
        "ProxyContractDeployer._validate_retarget": {
            "name": "_validate_retarget",
            "location": 475,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_target": [
                    "str",
                    "Dict[str, Any]",
                    "Match[str]",
                    "int"
                ]
            }
        },
        "ProxyContractDeployer.retarget": {
            "name": "retarget",
            "location": 481,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "int",
                    "tuple",
                    "bytes",
                    "str",
                    "float"
                ],
                "new_target": [
                    "Optional[str]",
                    "int"
                ],
                "confirmations": [
                    "int",
                    "tuple",
                    "bytes",
                    "str",
                    "float"
                ],
                "gas_limit": [
                    "int",
                    "tuple",
                    "bytes",
                    "str",
                    "float"
                ]
            }
        },
        "ProxyContractDeployer.build_retarget_transaction": {
            "name": "build_retarget_transaction",
            "location": 495,
            "return": [
                "bytes",
                "bool",
                "str",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "sender_address": [
                    "str",
                    "List[str]",
                    "Awaitable",
                    "bool"
                ],
                "new_target": [
                    "web3.contracContract",
                    "float",
                    "dict",
                    "web3.Web3"
                ],
                "gas_limit": [
                    "str",
                    "List[str]",
                    "Awaitable",
                    "bool"
                ]
            }
        },
        "ProxyContractDeployer.rollback": {
            "name": "rollback",
            "location": 503,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "str",
                    "int"
                ],
                "gas_limit": [
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[int]"
                ]
            }
        },
        "StakingEscrowDeployer.__init__": {
            "name": "__init__",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staking_interface": [
                    "str"
                ],
                "worklock_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "StakingEscrowDeployer._deploy_stub": {
            "name": "_deploy_stub",
            "location": 558,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "str"
                ],
                "gas_limit": [
                    "str"
                ],
                "confirmations": [
                    "str"
                ]
            }
        },
        "StakingEscrowDeployer._deploy_essential": {
            "name": "_deploy_essential",
            "location": 582,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "str",
                    "bool"
                ],
                "contract_version": [
                    "str",
                    "bool"
                ],
                "gas_limit": [
                    "str",
                    "bool"
                ],
                "confirmations": [
                    "str",
                    "bool"
                ]
            }
        },
        "StakingEscrowDeployer.deploy": {
            "name": "deploy",
            "location": 606,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "deployment_mode": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "gas_limit": [
                    "int",
                    "Dict[str, float]",
                    "Optional[\"ShippingInfo\"]",
                    "Union[str, int]",
                    "str",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "progress": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "contract_version": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "ignore_deployed": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "confirmations": [
                    "float",
                    "List[int]",
                    "str",
                    "bool",
                    "tuple"
                ],
                "emitter": [
                    "str",
                    "Optional[\"Address\"]",
                    "List[str]",
                    "Type"
                ]
            }
        },
        "SubscriptionManagerDeployer.deploy": {
            "name": "deploy",
            "location": 727,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "str",
                    "int",
                    "bytes"
                ],
                "gas_limit": [
                    "str"
                ],
                "progress": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "confirmations": [
                    "str",
                    "int",
                    "bytes"
                ],
                "emitter": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "ignore_deployed": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deployment_mode": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AdjudicatorDeployer.__init__": {
            "name": "__init__",
            "location": 768,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorDeployer.check_deployment_readiness": {
            "name": "check_deployment_readiness",
            "location": 782,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "deployer_address": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "AdjudicatorDeployer._deploy_essential": {
            "name": "_deploy_essential",
            "location": 792,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "str",
                    "bool"
                ],
                "contract_version": [
                    "str",
                    "bool"
                ],
                "gas_limit": [
                    "str",
                    "bool"
                ],
                "confirmations": [
                    "str",
                    "bool"
                ]
            }
        },
        "AdjudicatorDeployer.deploy": {
            "name": "deploy",
            "location": 819,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "deployment_mode": [
                    "str",
                    "int",
                    "Tuple[int]"
                ],
                "gas_limit": [
                    "float",
                    "List[int]",
                    "str",
                    "bool",
                    "tuple"
                ],
                "progress": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "contract_version": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "ignore_deployed": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "emitter": [
                    "str",
                    "Type",
                    "List[str]",
                    "int"
                ],
                "confirmations": [
                    "float",
                    "List[int]",
                    "str",
                    "bool",
                    "tuple"
                ]
            }
        },
        "PREApplicationDeployer.__init__": {
            "name": "__init__",
            "location": 894,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staking_interface": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "PREApplicationDeployer._deploy_essential": {
            "name": "_deploy_essential",
            "location": 898,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "int",
                    "str",
                    "bytes"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "bytes"
                ],
                "confirmations": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "PREApplicationDeployer.deploy": {
            "name": "deploy",
            "location": 920,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "gas_limit": [],
                "confirmations": [],
                "deployment_mode": [
                    "str",
                    "bool"
                ],
                "ignore_deployed": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "progress": [],
                "emitter": [
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/events.py": {
        "EventRecord.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "EventRecord.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractEvents.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "contract": []
            }
        },
        "ContractEvents.__get_web3_event_by_name": {
            "name": "__get_web3_event_by_name",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": []
            }
        },
        "ContractEvents.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": []
            }
        },
        "ContractEvents.__getattr__": {
            "name": "__getattr__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": []
            }
        },
        "ContractEvents.__iter__": {
            "name": "__iter__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractEventsThrottler.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "agent": [],
                "event_name": [],
                "from_block": [],
                "to_block": [],
                "max_blocks_per_call": []
            }
        },
        "ContractEventsThrottler.__iter__": {
            "name": "__iter__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractEvents.__getitem__.wrapper": {
            "name": "wrapper",
            "location": 62,
            "return": [],
            "arguments": {
                "from_block": [],
                "to_block": []
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/interfaces.py": {
        "BlockchainInterface.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "poa": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "light": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "eth_provider_uri": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "eth_provider": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "gas_strategy": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "max_gas_price": [
                    "int",
                    "float",
                    "Optional[int]",
                    "starfish.core.types.Number"
                ]
            }
        },
        "BlockchainInterface.__repr__": {
            "name": "__repr__",
            "location": 249,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.get_blocktime": {
            "name": "get_blocktime",
            "location": 253,
            "return": [
                "bool",
                "dict",
                "str",
                "Callable",
                "core.types.UserRole"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.is_connected": {
            "name": "is_connected",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.get_gas_strategy": {
            "name": "get_gas_strategy",
            "location": 266,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "Type[types.C]",
                    "types.StrucInput"
                ],
                "gas_strategy": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockchainInterface.attach_middleware": {
            "name": "attach_middleware",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.configure_gas_strategy": {
            "name": "configure_gas_strategy",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gas_strategy": [
                    "str",
                    "float"
                ]
            }
        },
        "BlockchainInterface.connect": {
            "name": "connect",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.provider": {
            "name": "provider",
            "location": 349,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface._attach_eth_provider": {
            "name": "_attach_eth_provider",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eth_provider": [
                    "int",
                    "Callable",
                    "str"
                ],
                "eth_provider_uri": [
                    "str"
                ]
            }
        },
        "BlockchainInterface._handle_failed_transaction": {
            "name": "_handle_failed_transaction",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "exception": [
                    "bool",
                    "Callable",
                    "Optional[Callable[..., None]]",
                    "str"
                ],
                "transaction_dict": [
                    "Union[web3.contracContractFunction, web3.contracContracConstructor]",
                    "dict"
                ],
                "contract_function": [
                    "Union[web3.contracContractFunction, web3.contracContracConstructor]",
                    "dict"
                ],
                "logger": [
                    "nucypher.utilities.logging.Logger",
                    "Exception",
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "BlockchainInterface.__log_transaction": {
            "name": "__log_transaction",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bytes"
                ],
                "contract_function": [
                    "web3.contracContract",
                    "web3.Web3",
                    "web3.contracContractFunction",
                    "Callable"
                ]
            }
        },
        "BlockchainInterface.build_payload": {
            "name": "build_payload",
            "location": 463,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender_address": [
                    "bool",
                    "raiden.utils.BlockTimeout",
                    "raiden.constants.Environment",
                    "str"
                ],
                "payload": [
                    "int",
                    "List[int]",
                    "float",
                    "Dict[int, str]",
                    "str",
                    "Dict[str, str]",
                    "List[cmk.utils.type_defs.HostName]"
                ],
                "transaction_gas_limit": [
                    "bool",
                    "str",
                    "int",
                    "Union[bool, str]"
                ],
                "use_pending_nonce": [
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "BlockchainInterface.build_contract_transaction": {
            "name": "build_contract_transaction",
            "location": 483,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "contract_function": [
                    "int",
                    "bool"
                ],
                "sender_address": [
                    "dict",
                    "mypy.types.Type",
                    "bool",
                    "Callable[[], bool]"
                ],
                "payload": [
                    "dict",
                    "mypy.types.Type",
                    "bool",
                    "Callable[[], bool]"
                ],
                "transaction_gas_limit": [
                    "Callable",
                    "Optional[str]",
                    "List[Dict[str, int]]"
                ],
                "gas_estimation_multiplier": [
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "use_pending_nonce": [
                    "dict",
                    "mypy.types.Type",
                    "bool",
                    "Callable[[], bool]"
                ]
            }
        },
        "BlockchainInterface.sign_and_broadcast_transaction": {
            "name": "sign_and_broadcast_transaction",
            "location": 532,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "str",
                    "List[str]",
                    "list",
                    "float"
                ],
                "transaction_dict": [
                    "List[str]",
                    "str",
                    "list"
                ],
                "transaction_name": [
                    "str",
                    "bool"
                ],
                "confirmations": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "fire_and_forget": [
                    "str",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "BlockchainInterface.send_transaction": {
            "name": "send_transaction",
            "location": 636,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "contract_function": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "type"
                ],
                "transacting_power": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "type"
                ],
                "payload": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "type"
                ],
                "transaction_gas_limit": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "type"
                ],
                "gas_estimation_multiplier": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "type"
                ],
                "confirmations": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "fire_and_forget": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "replace": [
                    "bool",
                    "float",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "BlockchainInterface.get_contract_by_name": {
            "name": "get_contract_by_name",
            "location": 676,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "Optional[List[str]]",
                    "list",
                    "dict"
                ],
                "contract_name": [
                    "str",
                    "Optional[Sequence[Any]]"
                ],
                "contract_version": [
                    "str",
                    "list",
                    "dict",
                    "Optional[List[str]]"
                ],
                "enrollment_version": [
                    "Sequence[str]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "proxy_name": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "IO"
                ],
                "use_proxy_address": [
                    "bool",
                    "str",
                    "Iterable[Tuple[str, str, str]]",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainInterface.__get_enrollment_version_index": {
            "name": "__get_enrollment_version_index",
            "location": 776,
            "return": [
                "str"
            ],
            "arguments": {
                "version_index": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "enrollments": [
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "contract_version": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainDeployerInterface.connect": {
            "name": "connect",
            "location": 816,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "compile_now": [
                    "bool",
                    "str",
                    "int"
                ],
                "ignore_solidity_check": [
                    "str",
                    "Optional[Any]",
                    "bool",
                    "int",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "BlockchainDeployerInterface.deploy_contract": {
            "name": "deploy_contract",
            "location": 827,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transacting_power": [
                    "str",
                    "Optional[str]",
                    "set",
                    "Union[None, str, List[str]]"
                ],
                "registry": [
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "bool",
                    "str",
                    "Callable"
                ],
                "contract_name": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ]
            }
        },
        "BlockchainDeployerInterface.find_raw_contract_data": {
            "name": "find_raw_contract_data",
            "location": 896,
            "return": [
                "Dict[str, Any]",
                "str",
                "List[str]",
                "Dict[str, float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "List[str]",
                    "List[int]"
                ],
                "requested_version": [
                    "str",
                    "Pattern[str]",
                    "requests.sessions.Session",
                    "Dict[bytes, Any]"
                ]
            }
        },
        "BlockchainDeployerInterface.__get_contract_interface": {
            "name": "__get_contract_interface",
            "location": 932,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "version": [
                    "str",
                    "List[str]"
                ],
                "address": [
                    "str",
                    "bool"
                ]
            }
        },
        "BlockchainDeployerInterface.get_contract_instance": {
            "name": "get_contract_instance",
            "location": 945,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "contract_name": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Optional[Dict]"
                ],
                "version": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "BlockchainDeployerInterface.get_contract_factory": {
            "name": "get_contract_factory",
            "location": 953,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "BlockchainDeployerInterface._wrap_contract": {
            "name": "_wrap_contract",
            "location": 958,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "wrapper_contract": [
                    "main.MyClient",
                    "str",
                    "Sequence[int]"
                ],
                "target_contract": [
                    "main.MyClient",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "BlockchainDeployerInterface.get_proxy_contract": {
            "name": "get_proxy_contract",
            "location": 975,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "target_address": [
                    "str",
                    "Dict[str, str]"
                ],
                "proxy_name": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "BlockchainInterfaceFactory.__new__": {
            "name": "__new__",
            "location": 1034,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "nevergrad.common.Union[str, pathlib.Path]",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "BlockchainInterfaceFactory.is_interface_initialized": {
            "name": "is_interface_initialized",
            "location": 1040,
            "return": [
                "bool",
                "Optional[str]",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "type",
                    "Type",
                    "wemake_python_styleguide.types.ConfigurationOptions"
                ],
                "eth_provider_uri": [
                    "str",
                    "dict",
                    "type",
                    "Type",
                    "wemake_python_styleguide.types.ConfigurationOptions"
                ]
            }
        },
        "BlockchainInterfaceFactory.register_interface": {
            "name": "register_interface",
            "location": 1047,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[types.C]",
                    "types.StrucInput",
                    "type",
                    "Dict[str, Any]"
                ],
                "interface": [
                    "Dict[str, Any]",
                    "str",
                    "Type",
                    "SupportsFloat",
                    "eth.abc.BlockAPI"
                ],
                "emitter": [
                    "int",
                    "MutableSet[types.signals.SignalHandlerRefT]",
                    "Callable[[str], int]",
                    "bytes",
                    "List[int]"
                ],
                "force": []
            }
        },
        "BlockchainInterfaceFactory.initialize_interface": {
            "name": "initialize_interface",
            "location": 1061,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Union[int, float]",
                    "Optional[Sequence[str]]"
                ],
                "eth_provider_uri": [
                    "int",
                    "constants.GrammaticalGender",
                    "str"
                ],
                "emitter": [
                    "bool",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]",
                    "Dict[int, int]"
                ],
                "interface_class": [
                    "bool",
                    "Callable",
                    "int",
                    "Type[BaseException]"
                ]
            }
        },
        "BlockchainInterfaceFactory.get_interface": {
            "name": "get_interface",
            "location": 1086,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "eth_provider_uri": [
                    "str",
                    "AsyncGenerator",
                    "int"
                ]
            }
        },
        "BlockchainInterfaceFactory.get_or_create_interface": {
            "name": "get_or_create_interface",
            "location": 1110,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "eth_provider_uri": [
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainInterface.TransactionFailed.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "purplship.providers.purolator.utils.Settings",
                    "Optional[Dict[str, int]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "transaction_dict": [
                    "int",
                    "str",
                    "Sequence[MutableSet[int]]"
                ],
                "contract_function": [
                    "tuple",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BlockchainInterface.TransactionFailed.default": {
            "name": "default",
            "location": 137,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.TransactionFailed.get_balance": {
            "name": "get_balance",
            "location": 145,
            "return": [
                "str",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.TransactionFailed.insufficient_eth": {
            "name": "insufficient_eth",
            "location": 151,
            "return": [
                "list",
                "bool",
                "types.Resolver",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/networks.py": {
        "NetworksInventory.get_ethereum_chain_id": {
            "name": "get_ethereum_chain_id",
            "location": 55,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[str, int]",
                    "Dict[str, Any]",
                    "Union[int, slice]"
                ],
                "network": [
                    "Union[str, int]",
                    "Dict[str, Any]",
                    "Union[int, slice]"
                ]
            }
        },
        "NetworksInventory.validate_network_name": {
            "name": "validate_network_name",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "network_name": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/providers.py": {
        "_get_IPC_provider": {
            "name": "_get_IPC_provider",
            "location": 34,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "eth_provider_uri": [
                    "str",
                    "bool"
                ]
            }
        },
        "_get_HTTP_provider": {
            "name": "_get_HTTP_provider",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "eth_provider_uri": [
                    "str",
                    "Callable[[None, None], bool]",
                    "dict"
                ]
            }
        },
        "_get_websocket_provider": {
            "name": "_get_websocket_provider",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "eth_provider_uri": [
                    "str",
                    "bool"
                ]
            }
        },
        "_get_auto_provider": {
            "name": "_get_auto_provider",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "eth_provider_uri": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "_get_pyevm_test_backend": {
            "name": "_get_pyevm_test_backend",
            "location": 61,
            "return": [
                "list",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "_get_ethereum_tester": {
            "name": "_get_ethereum_tester",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "test_backend": [
                    "str"
                ]
            }
        },
        "_get_pyevm_test_provider": {
            "name": "_get_pyevm_test_provider",
            "location": 81,
            "return": [
                "list",
                "str",
                "List[str]"
            ],
            "arguments": {
                "eth_provider_uri": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_get_mock_test_provider": {
            "name": "_get_mock_test_provider",
            "location": 89,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "eth_provider_uri": [
                    "str",
                    "Callable",
                    "django.contrib.gis.db.backends.postgis.schema.PostGISSchemaEditor",
                    "bool"
                ]
            }
        },
        "_get_tester_ganache": {
            "name": "_get_tester_ganache",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "eth_provider_uri": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/registry.py": {
        "CanonicalRegistrySource.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "network": [
                    "str",
                    "dict"
                ],
                "registry_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CanonicalRegistrySource.get_publication_endpoint": {
            "name": "get_publication_endpoint",
            "location": 56,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanonicalRegistrySource.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 60,
            "return": [
                "typing.Union[builtins.str, builtins.bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanonicalRegistrySource.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubRegistrySource.get_publication_endpoint": {
            "name": "get_publication_endpoint",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubRegistrySource.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 79,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedRegistrySource.get_publication_endpoint": {
            "name": "get_publication_endpoint",
            "location": 102,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedRegistrySource.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 106,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistrySourceManager.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]",
                    "Optional[str]",
                    "Mapping",
                    "pathlib.Path"
                ],
                "only_primary": [
                    "str",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "Callable",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "RegistrySourceManager.__getitem__": {
            "name": "__getitem__",
            "location": 145,
            "return": [
                "str",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RegistrySourceManager.get_primary_sources": {
            "name": "get_primary_sources",
            "location": 149,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "IO",
                    "bytes",
                    "List[str]",
                    "Optional[Container[str]]"
                ]
            }
        },
        "RegistrySourceManager.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 152,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "registry_class": [
                    "dict",
                    "bool"
                ],
                "network": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "BaseContractRegistry.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseContractRegistry.__eq__": {
            "name": "__eq__",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "BaseContractRegistry.__repr__": {
            "name": "__repr__",
            "location": 229,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.id": {
            "name": "id",
            "location": 234,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry._destroy": {
            "name": "_destroy",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.write": {
            "name": "write",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseContractRegistry.read": {
            "name": "read",
            "location": 251,
            "return": [
                "typing.Union[builtins.list, builtins.dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.from_latest_publication": {
            "name": "from_latest_publication",
            "location": 255,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Path",
                    "pathlib.Path"
                ]
            }
        },
        "BaseContractRegistry.source": {
            "name": "source",
            "location": 273,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "norfs.fs.base.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.enrolled_names": {
            "name": "enrolled_names",
            "location": 277,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.enrolled_addresses": {
            "name": "enrolled_addresses",
            "location": 282,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.enroll": {
            "name": "enroll",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "int"
                ],
                "contract_address": [
                    "str",
                    "int"
                ],
                "contract_abi": [
                    "str"
                ],
                "contract_version": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseContractRegistry.search": {
            "name": "search",
            "location": 306,
            "return": [
                "dict",
                "str",
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]"
                ],
                "contract_version": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Sequence[str]",
                    "str"
                ],
                "contract_address": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "LocalContractRegistry.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "logging.LogRecord",
                    "pathlib.Path"
                ]
            }
        },
        "LocalContractRegistry.__repr__": {
            "name": "__repr__",
            "location": 351,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalContractRegistry.filepath": {
            "name": "filepath",
            "location": 356,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalContractRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 359,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LocalContractRegistry.read": {
            "name": "read",
            "location": 363,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalContractRegistry.write": {
            "name": "write",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "list",
                    "dict",
                    "\"Project\""
                ]
            }
        },
        "LocalContractRegistry._destroy": {
            "name": "_destroy",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalContractRegistry.from_dict": {
            "name": "from_dict",
            "location": 412,
            "return": [
                "Dict[int, Dict[str, Any]]",
                "dict",
                "List[Dict]",
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable",
                    "bool",
                    "T",
                    "type"
                ],
                "payload": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "LocalContractRegistry.to_dict": {
            "name": "to_dict",
            "location": 417,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContractRegistry.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContractRegistry.clear": {
            "name": "clear",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContractRegistry.commit": {
            "name": "commit",
            "location": 433,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "InMemoryContractRegistry.__init__": {
            "name": "__init__",
            "location": 450,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryContractRegistry.clear": {
            "name": "clear",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryContractRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 458,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InMemoryContractRegistry.write": {
            "name": "write",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "InMemoryContractRegistry.read": {
            "name": "read",
            "location": 465,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryContractRegistry.commit": {
            "name": "commit",
            "location": 475,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bytes",
                    "Mapping"
                ],
                "overwrite": [
                    "Union[io.TextIO, pathlib.Path]",
                    "str",
                    "int"
                ]
            }
        },
        "InMemoryContractRegistry._destroy": {
            "name": "_destroy",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/token.py": {
        "ERC20.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int"
                ],
                "denomination": [
                    "int",
                    "List[Tuple[int, float]]",
                    "Tuple[str]",
                    "str",
                    "float"
                ]
            }
        },
        "ERC20.ZERO": {
            "name": "ZERO",
            "location": 88,
            "return": [
                "str",
                "types.Message"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "\"Track\"",
                    "type"
                ]
            }
        },
        "ERC20.from_units": {
            "name": "from_units",
            "location": 92,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Union[str, List[str]]",
                    "set"
                ],
                "value": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Union[str, List[str]]",
                    "set"
                ]
            }
        },
        "ERC20.from_tokens": {
            "name": "from_tokens",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Iterable[Any]",
                    "Mapping[str, Any]",
                    "str"
                ],
                "value": [
                    "Dict[str, Any]",
                    "Iterable[Any]",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "ERC20.to_tokens": {
            "name": "to_tokens",
            "location": 99,
            "return": [
                "List[str]",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ERC20.to_units": {
            "name": "to_units",
            "location": 103,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "exporwiki.types.MissionType"
            ],
            "arguments": {
                "self": []
            }
        },
        "ERC20.__eq__": {
            "name": "__eq__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "ERC20.__bool__": {
            "name": "__bool__",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ERC20.__radd__": {
            "name": "__radd__",
            "location": 116,
            "return": [
                "ark.types.PrimalDinoCharacter"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "ERC20.__add__": {
            "name": "__add__",
            "location": 119,
            "return": [
                "ark.types.PrimalDinoCharacter"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ERC20.__sub__": {
            "name": "__sub__",
            "location": 122,
            "return": [
                "ark.types.PrimalDinoCharacter"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "ERC20.__rmul__": {
            "name": "__rmul__",
            "location": 125,
            "return": [
                "ark.types.PrimalDinoCharacter"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "ERC20.__mul__": {
            "name": "__mul__",
            "location": 128,
            "return": [
                "ark.types.PrimalDinoCharacter"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "ERC20.__floordiv__": {
            "name": "__floordiv__",
            "location": 131,
            "return": [
                "ark.types.PrimalDinoCharacter"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "ERC20.__gt__": {
            "name": "__gt__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "ERC20.__ge__": {
            "name": "__ge__",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "ERC20.__lt__": {
            "name": "__lt__",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "ERC20.__le__": {
            "name": "__le__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "ERC20.__int__": {
            "name": "__int__",
            "location": 146,
            "return": [
                "eth.chains.base.MiningChain"
            ],
            "arguments": {
                "self": []
            }
        },
        "ERC20.__round__": {
            "name": "__round__",
            "location": 150,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "decimals": [
                    "str",
                    "bool"
                ]
            }
        },
        "ERC20.__repr__": {
            "name": "__repr__",
            "location": 153,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ERC20.__str__": {
            "name": "__str__",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "WorkTrackerBase.random_interval": {
            "name": "random_interval",
            "location": 205,
            "return": [
                "str",
                "Optional[str]",
                "List[int]",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "bool"
                ],
                "fails": [
                    "Optional[int]",
                    "Optional[str]",
                    "Callable[..., T]",
                    "Optional[Dict]"
                ]
            }
        },
        "WorkTrackerBase.max_confirmation_time": {
            "name": "max_confirmation_time",
            "location": 210,
            "return": [
                "int",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase.stop": {
            "name": "stop",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase.start": {
            "name": "start",
            "location": 220,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "commit_now": [
                    "Sequence",
                    "str",
                    "int",
                    "List[Tuple[str, decimal.Decimal]]"
                ],
                "requirement_func": [
                    "int"
                ],
                "force": [
                    "List[Dict[str, Any]]",
                    "int",
                    "Callable[[], bool]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "WorkTrackerBase._crash_gracefully": {
            "name": "_crash_gracefully",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WorkTrackerBase.handle_working_errors": {
            "name": "handle_working_errors",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase._should_do_work_now": {
            "name": "_should_do_work_now",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase.pending": {
            "name": "pending",
            "location": 276,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase.__commitments_tracker_is_consistent": {
            "name": "__commitments_tracker_is_consistent",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase.__track_pending_commitments": {
            "name": "__track_pending_commitments",
            "location": 293,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase.__fire_replacement_commitment": {
            "name": "__fire_replacement_commitment",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_block_number": [
                    "int",
                    "float",
                    "str"
                ],
                "tx_firing_block_number": [
                    "str",
                    "int",
                    "Tuple[int, int, int]",
                    "Dict[Tuple[str, str], Tuple[float, float]]",
                    "bool"
                ]
            }
        },
        "WorkTrackerBase.__handle_replacement_commitment": {
            "name": "__handle_replacement_commitment",
            "location": 333,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "current_block_number": [
                    "str"
                ]
            }
        },
        "WorkTrackerBase.__reset_tracker_state": {
            "name": "__reset_tracker_state",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase._do_work": {
            "name": "_do_work",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase._configure": {
            "name": "_configure",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stakes": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WorkTrackerBase._prep_work_state": {
            "name": "_prep_work_state",
            "location": 407,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase._final_work_prep_before_transaction": {
            "name": "_final_work_prep_before_transaction",
            "location": 411,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase._fire_commitment": {
            "name": "_fire_commitment",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerBase._all_work_completed": {
            "name": "_all_work_completed",
            "location": 419,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTracker._configure": {
            "name": "_configure",
            "location": 429,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTracker._prep_work_state": {
            "name": "_prep_work_state",
            "location": 433,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTracker._final_work_prep_before_transaction": {
            "name": "_final_work_prep_before_transaction",
            "location": 436,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTracker._fire_commitment": {
            "name": "_fire_commitment",
            "location": 443,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTracker._all_work_completed": {
            "name": "_all_work_completed",
            "location": 451,
            "return": [
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "tuple",
                "bool",
                "Tuple[List[Any], List[Any]]",
                "Tuple[int, int, str, List[str]]",
                "Tuple[int, int, bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/utils.py": {
        "epoch_to_period": {
            "name": "epoch_to_period",
            "location": 32,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "epoch": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "seconds_per_period": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "datetime_to_period": {
            "name": "datetime_to_period",
            "location": 37,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "datetime": [
                    "str"
                ],
                "seconds_per_period": [
                    "str"
                ]
            }
        },
        "period_to_epoch": {
            "name": "period_to_epoch",
            "location": 43,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "period": [],
                "seconds_per_period": []
            }
        },
        "get_current_period": {
            "name": "get_current_period",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "seconds_per_period": [
                    "int",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "datetime_at_period": {
            "name": "datetime_at_period",
            "location": 54,
            "return": [
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "period": [
                    "int",
                    "bool",
                    "List[int]",
                    "Optional[str]",
                    "str"
                ],
                "seconds_per_period": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[int]"
                ],
                "start_of_period": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "calculate_period_duration": {
            "name": "calculate_period_duration",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "future_time": [
                    "maya.MayaDT",
                    "float",
                    "int"
                ],
                "seconds_per_period": [
                    "int",
                    "maya.MayaDT",
                    "list",
                    "float"
                ],
                "now": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Union[bool, int]]",
                    "bool",
                    "Union[int, float, None]",
                    "float"
                ]
            }
        },
        "estimate_block_number_for_period": {
            "name": "estimate_block_number_for_period",
            "location": 80,
            "return": [
                "Tuple[str]",
                "bool",
                "Iterable[str]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "period": [
                    "int",
                    "float",
                    "Union[int, None]",
                    "Callable"
                ],
                "seconds_per_period": [
                    "int",
                    "float",
                    "Union[int, None]",
                    "Callable"
                ],
                "latest_block": [
                    "bool",
                    "int",
                    "Optional[\"ShippingRateInputType\"]",
                    "str"
                ]
            }
        },
        "etherscan_url": {
            "name": "etherscan_url",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "item": [
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "network": [
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "is_token": [
                    "str"
                ]
            }
        },
        "prettify_eth_amount": {
            "name": "prettify_eth_amount",
            "location": 121,
            "return": [
                "float",
                "str",
                "Iterable[int]",
                "bool",
                "T"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "original_denomination": [
                    "int",
                    "decimal.Decimal",
                    "str"
                ]
            }
        },
        "get_transaction_name": {
            "name": "get_transaction_name",
            "location": 150,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "contract_function": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/__init__.py": {},
    "nucypher-development/nucypher/blockchain/eth/signers/base.py": {
        "Signer.uri_scheme": {
            "name": "uri_scheme",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Signer.from_signer_uri": {
            "name": "from_signer_uri",
            "location": 62,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str"
                ],
                "uri": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "testnet": [
                    "int",
                    "str",
                    "Counter",
                    "dict",
                    "bool"
                ]
            }
        },
        "Signer.is_device": {
            "name": "is_device",
            "location": 81,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[int]"
                ]
            }
        },
        "Signer.accounts": {
            "name": "accounts",
            "location": 88,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer.unlock_account": {
            "name": "unlock_account",
            "location": 92,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        },
        "Signer.lock_account": {
            "name": "lock_account",
            "location": 96,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Counter"
                ]
            }
        },
        "Signer.sign_transaction": {
            "name": "sign_transaction",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]",
                    "eth.rlp.headers.BlockHeader",
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Signer.sign_message": {
            "name": "sign_message",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[int]"
                ],
                "message": [
                    "List[int]"
                ]
            }
        },
        "Signer.AccountLocked.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "List[str]",
                    "Sized",
                    "list"
                ]
            }
        },
        "Signer.UnknownAccount.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "List[str]",
                    "Sized",
                    "list"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/signers/hardware.py": {
        "handle_trezor_call": {
            "name": "handle_trezor_call",
            "location": 39,
            "return": [
                "int",
                "str",
                "Optional[List[str]]",
                "Callable"
            ],
            "arguments": {
                "device_func": [
                    "Callable[[], None]",
                    "Callable",
                    "Callable[..., Dict]"
                ]
            }
        },
        "handle_trezor_call.wrapped": {
            "name": "wrapped",
            "location": 44,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "trezor": [
                    "bool",
                    "BaseException",
                    "dict"
                ]
            }
        },
        "TrezorSigner.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "testnet": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TrezorSigner.derivation_root": {
            "name": "derivation_root",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrezorSigner._open": {
            "name": "_open",
            "location": 100,
            "return": [
                "Tuple[Callable, Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrezorSigner.uri_scheme": {
            "name": "uri_scheme",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "TrezorSigner.__get_address_path": {
            "name": "__get_address_path",
            "location": 116,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Optional[str]",
                    "Optional['Directory']",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "checksum_address": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "TrezorSigner.__derive_account": {
            "name": "__derive_account",
            "location": 130,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Optional[str]",
                    "Optional['Directory']",
                    "Optional[IO[bytes]]"
                ],
                "hd_path": [
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "TrezorSigner.__cache_addresses": {
            "name": "__cache_addresses",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrezorSigner._format_transaction": {
            "name": "_format_transaction",
            "location": 153,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "transaction_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "OrderedDict"
                ]
            }
        },
        "TrezorSigner.__sign_transaction": {
            "name": "__sign_transaction",
            "location": 164,
            "return": [
                "list",
                "Callable[[KT], VT]",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "int"
                ],
                "trezor_transaction": [
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "TrezorSigner.from_signer_uri": {
            "name": "from_signer_uri",
            "location": 174,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [],
                "uri": [
                    "bool",
                    "Callable[..., None]",
                    "str",
                    "int"
                ],
                "testnet": [
                    "str",
                    "Callable"
                ]
            }
        },
        "TrezorSigner.is_device": {
            "name": "is_device",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "List[int]"
                ]
            }
        },
        "TrezorSigner.unlock_account": {
            "name": "unlock_account",
            "location": 185,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        },
        "TrezorSigner.lock_account": {
            "name": "lock_account",
            "location": 190,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Counter"
                ]
            }
        },
        "TrezorSigner.accounts": {
            "name": "accounts",
            "location": 195,
            "return": [
                "List[T]",
                "List[str]",
                "Sequence[object]",
                "List[Tuple[str, str, bool]]",
                "List[cmk.base.check_utils.Service]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrezorSigner.sign_message": {
            "name": "sign_message",
            "location": 200,
            "return": [
                "str",
                "bytearray",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ],
                "checksum_address": [
                    "str",
                    "int"
                ]
            }
        },
        "TrezorSigner.sign_transaction": {
            "name": "sign_transaction",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict"
                ],
                "rlp_encoded": [
                    "dict",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]",
                    "eth.rlp.headers.BlockHeader",
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/signers/software.py": {
        "Web3Signer.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        },
        "Web3Signer.uri_scheme": {
            "name": "uri_scheme",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Web3Signer.from_signer_uri": {
            "name": "from_signer_uri",
            "location": 51,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Sequence",
                    "trezor.messages.TxRequesTxRequest",
                    "Mapping[str, Any]",
                    "bytes"
                ],
                "uri": [
                    "str"
                ],
                "testnet": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Web3Signer.is_connected": {
            "name": "is_connected",
            "location": 60,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Signer.accounts": {
            "name": "accounts",
            "location": 64,
            "return": [
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Signer.is_device": {
            "name": "is_device",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "Web3Signer.unlock_account": {
            "name": "unlock_account",
            "location": 81,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "Iterable[str]"
                ],
                "password": [
                    "str"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "Web3Signer.lock_account": {
            "name": "lock_account",
            "location": 89,
            "return": [
                "dict",
                "Dict[str, Any]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "eth.rlp.headers.BlockHeader",
                    "int"
                ]
            }
        },
        "Web3Signer.sign_message": {
            "name": "sign_message",
            "location": 97,
            "return": [
                "list",
                "str",
                "bytes",
                "Tuple[nucypher.crypto.kits.UmbralMessageKit, umbral.signing.Signature]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Web3Signer.sign_transaction": {
            "name": "sign_transaction",
            "location": 101,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ClefSigner.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ipc_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "timeout": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "testnet": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "MutableMapping[str, str]",
                    "str"
                ]
            }
        },
        "ClefSigner.uri_scheme": {
            "name": "uri_scheme",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "ClefSigner.__ipc_request": {
            "name": "__ipc_request",
            "location": 131,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ClefSigner.is_valid_clef_uri": {
            "name": "is_valid_clef_uri",
            "location": 142,
            "return": [
                "float",
                "T",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "type",
                    "bool",
                    "Type[T]"
                ],
                "uri": [
                    "str",
                    "int",
                    "Type",
                    "List[str]"
                ]
            }
        },
        "ClefSigner.from_signer_uri": {
            "name": "from_signer_uri",
            "location": 147,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "Type[T]",
                    "Optional[str]"
                ],
                "uri": [
                    "bool",
                    "Type[T]",
                    "dict",
                    "str"
                ],
                "testnet": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "ClefSigner.is_connected": {
            "name": "is_connected",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClefSigner.is_device": {
            "name": "is_device",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "walledomain.Account",
                    "List[int]"
                ]
            }
        },
        "ClefSigner.accounts": {
            "name": "accounts",
            "location": 164,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClefSigner.sign_transaction": {
            "name": "sign_transaction",
            "location": 170,
            "return": [
                "str",
                "bytearray",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "pymap.interfaces.backend.BackendInterface",
                    "Optional[Any]",
                    "str"
                ]
            }
        },
        "ClefSigner.sign_message": {
            "name": "sign_message",
            "location": 191,
            "return": [
                "Optional[float]",
                "pathlib.Path",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bytes",
                    "Union[str, \"TrackingCode\"]"
                ],
                "message": [
                    "str",
                    "bytes"
                ],
                "content_type": [
                    "str",
                    "Optional[str]"
                ],
                "validator_address": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "ClefSigner.sign_data_for_validator": {
            "name": "sign_data_for_validator",
            "location": 215,
            "return": [
                "Set[str]",
                "set",
                "str",
                "int",
                "bool",
                "Set[object]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "message": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "validator_address": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "ClefSigner.unlock_account": {
            "name": "unlock_account",
            "location": 223,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        },
        "ClefSigner.lock_account": {
            "name": "lock_account",
            "location": 227,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "walledomain.Account",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Counter"
                ]
            }
        },
        "KeystoreSigner.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "path.Path",
                    "bytes"
                ],
                "testnet": [
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "KeystoreSigner.__del__": {
            "name": "__del__",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KeystoreSigner.uri_scheme": {
            "name": "uri_scheme",
            "location": 258,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "KeystoreSigner.__read_keystore": {
            "name": "__read_keystore",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "KeystoreSigner.__read_keyfile": {
            "name": "__read_keyfile",
            "location": 279,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]"
                ]
            }
        },
        "KeystoreSigner.__handle_keyfile": {
            "name": "__handle_keyfile",
            "location": 286,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "pathlib.Path",
                    "norfs.fs.base.Path",
                    "list",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "KeystoreSigner.__get_signer": {
            "name": "__get_signer",
            "location": 309,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "KeystoreSigner.path": {
            "name": "path",
            "location": 324,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeystoreSigner.from_signer_uri": {
            "name": "from_signer_uri",
            "location": 329,
            "return": [
                "pathlib.Path",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "cmk.base.check_utils.Service"
                ],
                "uri": [
                    "bool",
                    "Type[T]",
                    "dict",
                    "str"
                ],
                "testnet": [
                    "pathlib.Path",
                    "str",
                    "list"
                ]
            }
        },
        "KeystoreSigner.is_device": {
            "name": "is_device",
            "location": 340,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "walledomain.Account",
                    "List[int]"
                ]
            }
        },
        "KeystoreSigner.accounts": {
            "name": "accounts",
            "location": 344,
            "return": [
                "dict",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeystoreSigner.unlock_account": {
            "name": "unlock_account",
            "location": 349,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ],
                "password": [
                    "str",
                    "bytes"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        },
        "KeystoreSigner.lock_account": {
            "name": "lock_account",
            "location": 373,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "eth.abc.DatabaseAPI",
                    "str"
                ]
            }
        },
        "KeystoreSigner.sign_transaction": {
            "name": "sign_transaction",
            "location": 387,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict"
                ]
            }
        },
        "KeystoreSigner.sign_message": {
            "name": "sign_message",
            "location": 405,
            "return": [
                "list",
                "str",
                "bytes",
                "Tuple[nucypher.crypto.kits.UmbralMessageKit, umbral.signing.Signature]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "alerta.database.base.Query",
                    "accounts.models.Account",
                    "str"
                ],
                "message": [
                    "pathlib.Path",
                    "eth.abc.StateAPI",
                    "List[str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/signers/__init__.py": {},
    "nucypher-development/nucypher/blockchain/eth/sol/__conf__.py": {},
    "nucypher-development/nucypher/blockchain/eth/sol/__init__.py": {},
    "nucypher-development/nucypher/blockchain/eth/sol/compile/aggregation.py": {
        "extract_version": {
            "name": "extract_version",
            "location": 60,
            "return": [
                "Type[T]",
                "int",
                "Type",
                "bool",
                "Tuple[float, float]"
            ],
            "arguments": {
                "compiled_contract_outputs": [
                    "str"
                ]
            }
        },
        "validate_merge": {
            "name": "validate_merge",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "existing_version": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "new_version": [
                    "Union[bool, Iterable[str]]",
                    "\"Task\"",
                    "bool"
                ],
                "version_specifier": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "merge_contract_sources": {
            "name": "merge_contract_sources",
            "location": 128,
            "return": [
                "str",
                "Tuple[str]",
                "int",
                "List[str]",
                "Callable[[str], bool]",
                "bytes"
            ],
            "arguments": {}
        },
        "merge_contract_outputs": {
            "name": "merge_contract_outputs",
            "location": 132,
            "return": [
                "bytes",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/nucypher/blockchain/eth/sol/compile/collect.py": {
        "source_filter": {
            "name": "source_filter",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Set[int]",
                    "Optional[str]",
                    "cerulean.path.Path"
                ]
            }
        },
        "collect_sources": {
            "name": "collect_sources",
            "location": 33,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "edgar_code.types.PathLike",
                "Iterable[str]"
            ],
            "arguments": {
                "source_bundle": [
                    "str",
                    "Callable",
                    "List[str]",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/sol/compile/compile.py": {
        "prepare_source_configuration": {
            "name": "prepare_source_configuration",
            "location": 40,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "sources": [
                    "str",
                    "Mapping[str, Any]",
                    "IO[str]",
                    "IO[bytes]"
                ]
            }
        },
        "prepare_remappings_configuration": {
            "name": "prepare_remappings_configuration",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "base_path": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Callable[[str], str]",
                    "Optional[str]",
                    "Path",
                    "Union[str, List]"
                ]
            }
        },
        "compile_sources": {
            "name": "compile_sources",
            "location": 56,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "source_bundle": [
                    "str"
                ],
                "version_check": [
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "multiversion_compile": {
            "name": "multiversion_compile",
            "location": 71,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "source_bundles": [
                    "bool",
                    "Iterable[bytes]",
                    "Callable",
                    "int"
                ],
                "compiler_version_check": [
                    "str",
                    "bytes",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/sol/compile/config.py": {},
    "nucypher-development/nucypher/blockchain/eth/sol/compile/constants.py": {},
    "nucypher-development/nucypher/blockchain/eth/sol/compile/exceptions.py": {},
    "nucypher-development/nucypher/blockchain/eth/sol/compile/solc.py": {
        "__execute": {
            "name": "__execute",
            "location": 27,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "compiler_version": [
                    "pathlib.Path"
                ],
                "input_config": [
                    "str",
                    "Dict[str, Any]",
                    "list",
                    "pathlib.Path",
                    "bool"
                ],
                "allow_paths": [
                    "Dict[pathlib.Path, ModuleSummary]",
                    "Union[io.TextIO, str, pathlib.Path]",
                    "pathlib.Path",
                    "TextIO",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/eth/sol/compile/types.py": {},
    "nucypher-development/nucypher/blockchain/eth/sol/compile/__init__.py": {},
    "nucypher-development/nucypher/blockchain/middleware/retry.py": {
        "RetryRequestMiddleware.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "make_request": [
                    "Optional[str]"
                ],
                "w3": [
                    "str",
                    "List[str]",
                    "int",
                    "float"
                ],
                "retries": [
                    "str",
                    "List[str]",
                    "int",
                    "float"
                ],
                "exponential_backoff": [
                    "str",
                    "List[str]",
                    "int",
                    "float"
                ]
            }
        },
        "RetryRequestMiddleware.is_request_result_retry": {
            "name": "is_request_result_retry",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "List[T]"
                ]
            }
        },
        "RetryRequestMiddleware.__call__": {
            "name": "__call__",
            "location": 62,
            "return": [
                "bool",
                "Dict[str, Any]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "dict",
                    "str",
                    "MutableMapping"
                ],
                "params": [
                    "dict",
                    "str",
                    "MutableMapping"
                ]
            }
        },
        "AlchemyRetryRequestMiddleware.is_request_result_retry": {
            "name": "is_request_result_retry",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "InfuraRetryRequestMiddleware.is_request_result_retry": {
            "name": "is_request_result_retry",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        }
    },
    "nucypher-development/nucypher/blockchain/middleware/__init__.py": {},
    "nucypher-development/nucypher/characters/banners.py": {},
    "nucypher-development/nucypher/characters/base.py": {
        "Character.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "domain": [],
                "known_node_class": [],
                "is_me": [],
                "federated_only": [],
                "checksum_address": [],
                "network_middleware": [],
                "keystore": [],
                "crypto_power": [],
                "crypto_power_ups": [],
                "eth_provider_uri": [],
                "signer": [],
                "registry": [],
                "include_self_in_the_state": []
            }
        },
        "Character.__eq__": {
            "name": "__eq__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Character.__hash__": {
            "name": "__hash__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.__repr__": {
            "name": "__repr__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.__setup_nickname": {
            "name": "__setup_nickname",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": []
            }
        },
        "Character.name": {
            "name": "name",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.stamp": {
            "name": "stamp",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.canonical_address": {
            "name": "canonical_address",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.from_config": {
            "name": "from_config",
            "location": 280,
            "return": [],
            "arguments": {
                "cls": [],
                "config": []
            }
        },
        "Character.from_public_keys": {
            "name": "from_public_keys",
            "location": 284,
            "return": [],
            "arguments": {
                "cls": [],
                "powers_and_material": [],
                "verifying_key": [],
                "encrypting_key": []
            }
        },
        "Character._set_known_node_class": {
            "name": "_set_known_node_class",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "known_node_class": [],
                "federated_only": []
            }
        },
        "Character.store_metadata": {
            "name": "store_metadata",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "Character.encrypt_for": {
            "name": "encrypt_for",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "recipient": [],
                "plaintext": []
            }
        },
        "Character.public_keys": {
            "name": "public_keys",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "power_up_class": []
            }
        },
        "Character.derive_federated_address": {
            "name": "derive_federated_address",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.make_rpc_controller": {
            "name": "make_rpc_controller",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "crash_on_error": []
            }
        },
        "Character.make_cli_controller": {
            "name": "make_cli_controller",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "crash_on_error": []
            }
        },
        "Character.disenchant": {
            "name": "disenchant",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/characters/lawful.py": {
        "Alice.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "federated_only": [],
                "eth_provider_uri": [],
                "signer": [],
                "checksum_address": [],
                "threshold": [],
                "shares": [],
                "rate": [],
                "duration": [],
                "payment_method": [],
                "store_policy_credentials": [],
                "store_character_cards": [],
                "timeout": [],
                "network_middleware": [],
                "controller": []
            }
        },
        "Alice.get_card": {
            "name": "get_card",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alice.add_active_policy": {
            "name": "add_active_policy",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "active_policy": []
            }
        },
        "Alice.generate_kfrags": {
            "name": "generate_kfrags",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "bob": [],
                "label": [],
                "threshold": [],
                "shares": []
            }
        },
        "Alice.create_policy": {
            "name": "create_policy",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "bob": [],
                "label": []
            }
        },
        "Alice.generate_policy_parameters": {
            "name": "generate_policy_parameters",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "threshold": [],
                "shares": [],
                "duration": [],
                "commencement": [],
                "expiration": [],
                "value": [],
                "rate": [],
                "payment_method": []
            }
        },
        "Alice._check_grant_requirements": {
            "name": "_check_grant_requirements",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "policy": []
            }
        },
        "Alice.grant": {
            "name": "grant",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "bob": [],
                "label": [],
                "ursulas": [],
                "timeout": []
            }
        },
        "Alice.get_policy_encrypting_key_from_label": {
            "name": "get_policy_encrypting_key_from_label",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Alice.revoke": {
            "name": "revoke",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "policy": [],
                "onchain": [],
                "offchain": []
            }
        },
        "Alice.decrypt_message_kit": {
            "name": "decrypt_message_kit",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "message_kit": []
            }
        },
        "Alice.make_web_controller": {
            "name": "make_web_controller",
            "location": 438,
            "return": [],
            "arguments": {
                "drone_alice": [],
                "crash_on_error": []
            }
        },
        "Bob.__init__": {
            "name": "__init__",
            "location": 516,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "controller": [],
                "verify_node_bonding": [],
                "eth_provider_uri": []
            }
        },
        "Bob.get_card": {
            "name": "get_card",
            "location": 540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bob._decrypt_treasure_map": {
            "name": "_decrypt_treasure_map",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_treasure_map": [],
                "publisher_verifying_key": []
            }
        },
        "Bob.retrieve": {
            "name": "retrieve",
            "location": 553,
            "return": [],
            "arguments": {
                "self": [],
                "message_kits": [],
                "alice_verifying_key": [],
                "encrypted_treasure_map": [],
                "publisher_verifying_key": []
            }
        },
        "Bob.retrieve_and_decrypt": {
            "name": "retrieve_and_decrypt",
            "location": 614,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bob.make_web_controller": {
            "name": "make_web_controller",
            "location": 636,
            "return": [],
            "arguments": {
                "drone_bob": [],
                "crash_on_error": []
            }
        },
        "Ursula.__init__": {
            "name": "__init__",
            "location": 689,
            "return": [],
            "arguments": {
                "self": [],
                "rest_host": [],
                "rest_port": [],
                "domain": [],
                "is_me": [],
                "certificate": [],
                "certificate_filepath": [],
                "db_filepath": [],
                "availability_check": [],
                "metadata": [],
                "checksum_address": [],
                "operator_address": [],
                "client_password": [],
                "operator_signature_from_metadata": [],
                "eth_provider_uri": [],
                "payment_method": [],
                "abort_on_learning_error": [],
                "federated_only": [],
                "crypto_power": [],
                "known_nodes": []
            }
        },
        "Ursula.__get_hosting_power": {
            "name": "__get_hosting_power",
            "location": 822,
            "return": [],
            "arguments": {
                "self": [],
                "host": []
            }
        },
        "Ursula._make_local_server": {
            "name": "_make_local_server",
            "location": 837,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "db_filepath": []
            }
        },
        "Ursula.__substantiate_stamp": {
            "name": "__substantiate_stamp",
            "location": 849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.operator_signature": {
            "name": "operator_signature",
            "location": 858,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.operator_address": {
            "name": "operator_address",
            "location": 862,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.__preflight": {
            "name": "__preflight",
            "location": 880,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.run": {
            "name": "run",
            "location": 887,
            "return": [],
            "arguments": {
                "self": [],
                "emitter": [],
                "discovery": [],
                "availability": [],
                "worker": [],
                "interactive": [],
                "hendrix": [],
                "start_reactor": [],
                "prometheus_config": [],
                "preflight": [],
                "block_until_ready": [],
                "eager": []
            }
        },
        "Ursula.stop": {
            "name": "stop",
            "location": 987,
            "return": [],
            "arguments": {
                "self": [],
                "halt_reactor": []
            }
        },
        "Ursula._finalize": {
            "name": "_finalize",
            "location": 1003,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_information": {
            "name": "rest_information",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_interface": {
            "name": "rest_interface",
            "location": 1027,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.get_deployer": {
            "name": "get_deployer",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.operator_signature_from_metadata": {
            "name": "operator_signature_from_metadata",
            "location": 1036,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula._generate_metadata": {
            "name": "_generate_metadata",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.metadata": {
            "name": "metadata",
            "location": 1061,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.timestamp": {
            "name": "timestamp",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.from_metadata_bytes": {
            "name": "from_metadata_bytes",
            "location": 1075,
            "return": [],
            "arguments": {
                "cls": [],
                "metadata_bytes": []
            }
        },
        "Ursula.from_rest_url": {
            "name": "from_rest_url",
            "location": 1081,
            "return": [],
            "arguments": {
                "cls": [],
                "network_middleware": [],
                "host": [],
                "port": []
            }
        },
        "Ursula.from_seednode_metadata": {
            "name": "from_seednode_metadata",
            "location": 1090,
            "return": [],
            "arguments": {
                "cls": [],
                "seednode_metadata": []
            }
        },
        "Ursula.seednode_for_network": {
            "name": "seednode_for_network",
            "location": 1101,
            "return": [],
            "arguments": {
                "cls": [],
                "network": []
            }
        },
        "Ursula.from_teacher_uri": {
            "name": "from_teacher_uri",
            "location": 1113,
            "return": [],
            "arguments": {
                "cls": [],
                "federated_only": [],
                "teacher_uri": [],
                "min_stake": [],
                "network_middleware": [],
                "registry": [],
                "retry_attempts": [],
                "retry_interval": []
            }
        },
        "Ursula.from_seed_and_stake_info": {
            "name": "from_seed_and_stake_info",
            "location": 1146,
            "return": [],
            "arguments": {
                "cls": [],
                "seed_uri": [],
                "federated_only": [],
                "minimum_stake": [],
                "registry": [],
                "network_middleware": []
            }
        },
        "Ursula.from_storage": {
            "name": "from_storage",
            "location": 1186,
            "return": [],
            "arguments": {
                "cls": [],
                "node_storage": [],
                "checksum_adress": [],
                "federated_only": []
            }
        },
        "Ursula.datastore": {
            "name": "datastore",
            "location": 1197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_url": {
            "name": "rest_url",
            "location": 1204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_app": {
            "name": "rest_app",
            "location": 1211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.interface_info_with_metadata": {
            "name": "interface_info_with_metadata",
            "location": 1220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula._decrypt_kfrag": {
            "name": "_decrypt_kfrag",
            "location": 1228,
            "return": [],
            "arguments": {
                "self": [],
                "encrypted_kfrag": [],
                "hrac": [],
                "publisher_verifying_key": []
            }
        },
        "Ursula._reencrypt": {
            "name": "_reencrypt",
            "location": 1232,
            "return": [],
            "arguments": {
                "self": [],
                "kfrag": [],
                "capsules": []
            }
        },
        "Ursula.status_info": {
            "name": "status_info",
            "location": 1243,
            "return": [],
            "arguments": {
                "self": [],
                "omit_known_nodes": []
            }
        },
        "LocalUrsulaStatus.to_json": {
            "name": "to_json",
            "location": 1288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enrico.__init__": {
            "name": "__init__",
            "location": 1314,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "policy_encrypting_key": [],
                "controller": []
            }
        },
        "Enrico.encrypt_message": {
            "name": "encrypt_message",
            "location": 1334,
            "return": [],
            "arguments": {
                "self": [],
                "plaintext": []
            }
        },
        "Enrico.from_alice": {
            "name": "from_alice",
            "location": 1341,
            "return": [],
            "arguments": {
                "cls": [],
                "alice": [],
                "label": []
            }
        },
        "Enrico.policy_pubkey": {
            "name": "policy_pubkey",
            "location": 1351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enrico._set_known_node_class": {
            "name": "_set_known_node_class",
            "location": 1356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enrico.make_web_controller": {
            "name": "make_web_controller",
            "location": 1361,
            "return": [],
            "arguments": {
                "drone_enrico": [],
                "crash_on_error": []
            }
        },
        "Alice.make_web_controller.public_keys": {
            "name": "public_keys",
            "location": 453,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.create_policy": {
            "name": "create_policy",
            "location": 460,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.decrypt": {
            "name": "decrypt",
            "location": 468,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.derive_policy_encrypting_key": {
            "name": "derive_policy_encrypting_key",
            "location": 476,
            "return": [],
            "arguments": {
                "label": []
            }
        },
        "Alice.make_web_controller.grant": {
            "name": "grant",
            "location": 484,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.revoke": {
            "name": "revoke",
            "location": 492,
            "return": [],
            "arguments": {}
        },
        "Bob.IncorrectCFragsReceived.__init__": {
            "name": "__init__",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "evidence": []
            }
        },
        "Bob.make_web_controller.public_keys": {
            "name": "public_keys",
            "location": 652,
            "return": [],
            "arguments": {}
        },
        "Bob.make_web_controller.retrieve_and_decrypt": {
            "name": "retrieve_and_decrypt",
            "location": 659,
            "return": [],
            "arguments": {}
        },
        "Ursula.from_teacher_uri.__attempt": {
            "name": "__attempt",
            "location": 1123,
            "return": [],
            "arguments": {
                "attempt": [],
                "interval": []
            }
        },
        "Enrico.make_web_controller.encrypt_message": {
            "name": "encrypt_message",
            "location": 1378,
            "return": [],
            "arguments": {}
        }
    },
    "nucypher-development/nucypher/characters/unlawful.py": {
        "Vladimir.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Vladimir.from_target_ursula": {
            "name": "from_target_ursula",
            "location": 49,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "target_ursula": [
                    "List[str]",
                    "List[float]",
                    "str"
                ],
                "substitute_verifying_key": [
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "str"
                ],
                "sign_metadata": [
                    "bool",
                    "Sequence[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Vladimir.attach_transacting_key": {
            "name": "attach_transacting_key",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable"
                ],
                "blockchain": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "Amonia.from_lawful_alice": {
            "name": "from_lawful_alice",
            "location": 140,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ],
                "alice": [
                    "dict",
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "Amonia.grant_without_paying": {
            "name": "grant_without_paying",
            "location": 145,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Amonia.circumvent_safegaurds_and_grant_without_paying": {
            "name": "circumvent_safegaurds_and_grant_without_paying",
            "location": 154,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Amonia.grant_without_paying.what_do_you_mean_you_dont_tip": {
            "name": "what_do_you_mean_you_dont_tip",
            "location": 148,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "policy": [
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/__init__.py": {},
    "nucypher-development/nucypher/characters/control/controllers.py": {
        "CharacterCLIController.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "Dict[str, object]",
                    "Callable",
                    "str",
                    "tuple"
                ]
            }
        },
        "CharacterCLIController._perform_action": {
            "name": "_perform_action",
            "location": 32,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/characters/control/interfaces.py": {
        "CharacterPublicInterface.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "character": [
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "AliceInterface.create_policy": {
            "name": "create_policy",
            "location": 41,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "List[str]",
                "Optional[str]",
                "story.models.Character"
            ],
            "arguments": {
                "self": [],
                "bob_encrypting_key": [
                    "bytes",
                    "str",
                    "umbral.keys.UmbralPrivateKey",
                    "umbral.keys.UmbralPublicKey"
                ],
                "bob_verifying_key": [
                    "bytes",
                    "str",
                    "umbral.keys.UmbralPrivateKey",
                    "umbral.keys.UmbralPublicKey"
                ],
                "label": [
                    "str"
                ],
                "threshold": [
                    "str",
                    "int"
                ],
                "shares": [
                    "str",
                    "int"
                ],
                "expiration": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "AliceInterface.derive_policy_encrypting_key": {
            "name": "derive_policy_encrypting_key",
            "location": 67,
            "return": [
                "bytes",
                "int",
                "dict",
                "Optional[str]",
                "Dict[str, Union[str, int]]",
                "rsa.PublicKey",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "Callable"
                ]
            }
        },
        "AliceInterface.grant": {
            "name": "grant",
            "location": 73,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bob_encrypting_key": [
                    "List[str]",
                    "umbral.keys.UmbralPrivateKey",
                    "umbral.keys.UmbralPublicKey",
                    "bytes",
                    "int",
                    "str"
                ],
                "bob_verifying_key": [
                    "List[str]",
                    "umbral.keys.UmbralPrivateKey",
                    "umbral.keys.UmbralPublicKey",
                    "bytes",
                    "int",
                    "str"
                ],
                "label": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "threshold": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "shares": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "expiration": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "value": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "rate": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "AliceInterface.revoke": {
            "name": "revoke",
            "location": 105,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "int",
                    "str",
                    "bytes",
                    "Iterator[str]"
                ],
                "bob_verifying_key": [
                    "int",
                    "str",
                    "bytes",
                    "Iterator[str]"
                ]
            }
        },
        "AliceInterface.decrypt": {
            "name": "decrypt",
            "location": 124,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "List[List[str]]"
                ],
                "message_kit": [
                    "str",
                    "bool",
                    "List[List[str]]"
                ]
            }
        },
        "AliceInterface.public_keys": {
            "name": "public_keys",
            "location": 137,
            "return": [
                "int",
                "dict",
                "bytes",
                "Dict[str, float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobInterface.retrieve_and_decrypt": {
            "name": "retrieve_and_decrypt",
            "location": 149,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "Optional[bytes]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "alice_verifying_key": [
                    "bool",
                    "bytes",
                    "List[bytes]",
                    "umbral.params.UmbralParameters",
                    "Iterator[Crypto.PublicKey.RSA.RsaKey]",
                    "str"
                ],
                "message_kits": [
                    "bool",
                    "bytes",
                    "List[bytes]",
                    "umbral.params.UmbralParameters",
                    "Iterator[Crypto.PublicKey.RSA.RsaKey]",
                    "str"
                ],
                "encrypted_treasure_map": [
                    "bool",
                    "bytes",
                    "List[bytes]",
                    "umbral.params.UmbralParameters",
                    "Iterator[Crypto.PublicKey.RSA.RsaKey]",
                    "str"
                ]
            }
        },
        "BobInterface.public_keys": {
            "name": "public_keys",
            "location": 164,
            "return": [
                "int",
                "dict",
                "bytes",
                "Dict[str, float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnricoInterface.encrypt_message": {
            "name": "encrypt_message",
            "location": 177,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "plaintext": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/control/__init__.py": {},
    "nucypher-development/nucypher/characters/control/specifications/alice.py": {
        "PolicyBaseSchema.check_valid_n_and_m": {
            "name": "check_valid_n_and_m",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "PolicyBaseSchema.check_rate_or_value_not_both": {
            "name": "check_rate_or_value_not_both",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "nucypher-development/nucypher/characters/control/specifications/bob.py": {},
    "nucypher-development/nucypher/characters/control/specifications/enrico.py": {
        "EncryptMessage.format_method_arguments": {
            "name": "format_method_arguments",
            "location": 50,
            "return": [
                "bytes",
                "Optional[float]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "Dict[str, Set[str]]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/control/specifications/__init__.py": {},
    "nucypher-development/nucypher/characters/control/specifications/fields/cleartext.py": {
        "Cleartext._serialize": {
            "name": "_serialize",
            "location": 27,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Callable]",
                    "Tuple[str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Cleartext._deserialize": {
            "name": "_deserialize",
            "location": 30,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "memoryview",
                    "int",
                    "Union[str, int]",
                    "Optional[Callable]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/control/specifications/fields/datetime.py": {
        "DateTime._serialize": {
            "name": "_serialize",
            "location": 27,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "DateTime._deserialize": {
            "name": "_deserialize",
            "location": 30,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "OrderedDict",
                    "T",
                    "dict",
                    "List[str]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/control/specifications/fields/file.py": {
        "FileField._deserialize": {
            "name": "_deserialize",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Dict]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/control/specifications/fields/key.py": {
        "Key._serialize": {
            "name": "_serialize",
            "location": 28,
            "return": [
                "str",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Union[int, float, str]",
                    "T",
                    "str"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Key._deserialize": {
            "name": "_deserialize",
            "location": 31,
            "return": [
                "str",
                "float",
                "Iterable[int]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "dict",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "MutableMapping"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/control/specifications/fields/label.py": {
        "Label._serialize": {
            "name": "_serialize",
            "location": 25,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Callable]",
                    "Tuple[str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Label._deserialize": {
            "name": "_deserialize",
            "location": 28,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "dict",
                    "int"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/control/specifications/fields/messagekit.py": {
        "MessageKit._deserialize": {
            "name": "_deserialize",
            "location": 26,
            "return": [
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "attr": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/control/specifications/fields/misc.py": {},
    "nucypher-development/nucypher/characters/control/specifications/fields/treasuremap.py": {
        "EncryptedTreasureMap._deserialize": {
            "name": "_deserialize",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ],
                "attr": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ],
                "data": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "TreasureMap._deserialize": {
            "name": "_deserialize",
            "location": 40,
            "return": [
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "attr": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/characters/control/specifications/fields/__init__.py": {},
    "nucypher-development/nucypher/cli/config.py": {
        "GroupGeneralConfig.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_ipc": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "verbose": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "quiet": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "no_logs": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "console_logs": [
                    "bool"
                ],
                "file_logs": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "sentry_logs": [
                    "bool",
                    "Optional[str]",
                    "Optional[dict]",
                    "Optional[Type[Any]]",
                    "Optional[int]"
                ],
                "log_level": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Optional[bool]",
                    "List[str]"
                ],
                "debug": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/literature.py": {},
    "nucypher-development/nucypher/cli/main.py": {
        "nucypher_cli": {
            "name": "nucypher_cli",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/nucypher/cli/options.py": {
        "option_alice_verifying_key": {
            "name": "option_alice_verifying_key",
            "location": 84,
            "return": [
                "Union[Dict, List]",
                "int",
                "Dict[str, cmk.gui.plugins.views.utils.Painter]",
                "str"
            ],
            "arguments": {
                "required": [
                    "bool",
                    "str",
                    "logging.LogRecord",
                    "nucypher.blockchain.eth.token.Stake"
                ]
            }
        },
        "option_contract_name": {
            "name": "option_contract_name",
            "location": 93,
            "return": [
                "mypy.types.Type",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "required": [
                    "str",
                    "Tuple[str, Dict[str, Any]]",
                    "bool"
                ],
                "valid_options": [
                    "str",
                    "Tuple[str, Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "option_controller_port": {
            "name": "option_controller_port",
            "location": 103,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "default": [
                    "str",
                    "List[List[int]]",
                    "Container[str]",
                    "Callable",
                    "Type[eth.abc.ChainAPI]"
                ]
            }
        },
        "option_discovery_port": {
            "name": "option_discovery_port",
            "location": 111,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "default": [
                    "str",
                    "List[List[int]]",
                    "Container[str]",
                    "Callable",
                    "Type[eth.abc.ChainAPI]"
                ]
            }
        },
        "option_label": {
            "name": "option_label",
            "location": 119,
            "return": [
                "str",
                "float",
                "Callable",
                "bytes",
                "Dict[str, Dict[str, Any]]",
                "Optional[Any]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item"
            ],
            "arguments": {
                "required": [
                    "bool",
                    "logging.LogRecord",
                    "slice",
                    "str"
                ]
            }
        },
        "option_message_kit": {
            "name": "option_message_kit",
            "location": 127,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "required": [
                    "bool",
                    "str",
                    "logging.LogRecord"
                ],
                "multiple": [
                    "bool",
                    "str",
                    "logging.LogRecord"
                ]
            }
        },
        "option_network": {
            "name": "option_network",
            "location": 136,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "required": [
                    "bool",
                    "str"
                ],
                "default": [
                    "bool",
                    "str"
                ],
                "validate": [
                    "bool",
                    "str"
                ]
            }
        },
        "option_policy_encrypting_key": {
            "name": "option_policy_encrypting_key",
            "location": 147,
            "return": [
                "Union[Dict, List]",
                "int",
                "Dict[str, cmk.gui.plugins.views.utils.Painter]",
                "str"
            ],
            "arguments": {
                "required": [
                    "bool",
                    "str",
                    "logging.LogRecord",
                    "nucypher.blockchain.eth.token.Stake"
                ]
            }
        },
        "option_eth_provider_uri": {
            "name": "option_eth_provider_uri",
            "location": 155,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "default": [
                    "bool",
                    "float",
                    "List[List[int]]"
                ],
                "required": [
                    "bool",
                    "float",
                    "List[List[int]]"
                ]
            }
        },
        "group_options": {
            "name": "group_options",
            "location": 165,
            "return": [
                "int",
                "dict",
                "Optional[BaseException]",
                "Tuple[int, int, int, int]",
                "mypy.types.Type"
            ],
            "arguments": {
                "option_class": [
                    "List[dict]",
                    "Callable",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "bool",
                    "travelfootprininsta.types.FeedItem",
                    "str",
                    "Union[Callable, Type]"
                ]
            }
        },
        "wrap_option": {
            "name": "wrap_option",
            "location": 199,
            "return": [
                "int",
                "dict",
                "Optional[BaseException]",
                "Tuple[int, int, int, int]",
                "mypy.types.Type"
            ],
            "arguments": {
                "handler": [
                    "bool",
                    "str",
                    "Exception"
                ]
            }
        },
        "process_middleware": {
            "name": "process_middleware",
            "location": 227,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_networking": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Container[str]]",
                    "bytes"
                ]
            }
        },
        "group_options._decorator": {
            "name": "_decorator",
            "location": 175,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "wrap_option._decorator": {
            "name": "_decorator",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "group_options._decorator.wrapper": {
            "name": "wrapper",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "wrap_option._decorator.wrapper": {
            "name": "wrapper",
            "location": 209,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "bool",
                "types.Resolver",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/nucypher/cli/processes.py": {
        "UrsulaCommandProtocol.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "Iterable[int]",
                    "Callable[[bytes], None]",
                    "int"
                ],
                "emitter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UrsulaCommandProtocol.commands": {
            "name": "commands",
            "location": 73,
            "return": [
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintHelp": {
            "name": "paintHelp",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintKnownNodes": {
            "name": "paintKnownNodes",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintStatus": {
            "name": "paintStatus",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintFleetState": {
            "name": "paintFleetState",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.connectionMade": {
            "name": "connectionMade",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.connectionLost": {
            "name": "connectionLost",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "nucypher.blockchain.eth.multisig.Proposal",
                    "BaseException",
                    "Optional[str]"
                ]
            }
        },
        "UrsulaCommandProtocol.lineReceived": {
            "name": "lineReceived",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "UrsulaCommandProtocol.cycle_teacher": {
            "name": "cycle_teacher",
            "location": 140,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.start_learning": {
            "name": "start_learning",
            "location": 146,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.stop_learning": {
            "name": "stop_learning",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.stop": {
            "name": "stop",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCLineReceiver.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rpc_controller": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "capture_output": [
                    "str",
                    "bool",
                    "float",
                    "tuple",
                    "IO[str]",
                    "Tuple[int]"
                ]
            }
        },
        "JSONRPCLineReceiver.captured_output": {
            "name": "captured_output",
            "location": 189,
            "return": [
                "List[int]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCLineReceiver.connectionMade": {
            "name": "connectionMade",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCLineReceiver.connectionLost": {
            "name": "connectionLost",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "JSONRPCLineReceiver.rawDataReceived": {
            "name": "rawDataReceived",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "JSONRPCLineReceiver.lineReceived": {
            "name": "lineReceived",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/types.py": {
        "ChecksumAddress.convert": {
            "name": "convert",
            "location": 39,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "type"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        },
        "IPv4Address.convert": {
            "name": "convert",
            "location": 51,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        },
        "OperatorIPAddress.convert": {
            "name": "convert",
            "location": 63,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Set[str]"
                ],
                "param": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Set[str]"
                ],
                "ctx": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "DecimalType.convert": {
            "name": "convert",
            "location": 75,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        },
        "DecimalRange.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "min": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "max": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "clamp": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "DecimalRange.convert": {
            "name": "convert",
            "location": 90,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "param": [
                    "str"
                ],
                "ctx": [
                    "str"
                ]
            }
        },
        "NuCypherNetworkName.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validate": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "NuCypherNetworkName.convert": {
            "name": "convert",
            "location": 114,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        },
        "UmbralPublicKeyHex.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validate": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "UmbralPublicKeyHex.convert": {
            "name": "convert",
            "location": 133,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "dict",
                    "bytes"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/utils.py": {
        "setup_emitter": {
            "name": "setup_emitter",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "general_config": [
                    "Optional[List[Any]]",
                    "dict",
                    "cmk.base.config.HostConfig",
                    "str",
                    "Optional[int]"
                ],
                "banner": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ]
            }
        },
        "make_cli_character": {
            "name": "make_cli_character",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "character_config": [
                    "config.Config"
                ],
                "emitter": [
                    "Callable[[list], None]",
                    "cmk.base.config.ConfigCache"
                ],
                "unlock_keystore": [
                    "dict",
                    "eth.VMConfiguration"
                ],
                "unlock_signer": [
                    "dict",
                    "eth.VMConfiguration"
                ],
                "teacher_uri": [
                    "cmk.base.config.ConfigCache",
                    "opentrons.config.robot_configs.robot_config",
                    "config.Config"
                ],
                "min_stake": [
                    "cmk.base.config.ConfigCache",
                    "opentrons.config.robot_configs.robot_config",
                    "config.Config"
                ],
                "json_ipc": [
                    "dict",
                    "sideeye.config.Configuration",
                    "Dict[str, Any]"
                ]
            }
        },
        "establish_deployer_registry": {
            "name": "establish_deployer_registry",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "Optional[float]",
                    "Optional[str]",
                    "bytes",
                    "bool",
                    "Optional[\"AbstractPurpose\"]"
                ],
                "network": [
                    "bool"
                ],
                "registry_infile": [
                    "Optional[float]",
                    "Mapping[str, Tuple[float, float, float]]",
                    "float"
                ],
                "registry_outfile": [
                    "float",
                    "Counter",
                    "bool",
                    "mypy.types.CallableType",
                    "mypy.types.Type"
                ],
                "use_existing_registry": [
                    "bool",
                    "str"
                ],
                "download_registry": [
                    "bool",
                    "str"
                ],
                "dev": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_registry": {
            "name": "get_registry",
            "location": 168,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "network": [
                    "str",
                    "bool",
                    "pricemonitor.config.Coin"
                ],
                "registry_filepath": [
                    "str",
                    "bool",
                    "pricemonitor.config.Coin"
                ]
            }
        },
        "connect_to_blockchain": {
            "name": "connect_to_blockchain",
            "location": 176,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "float",
                    "bool",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str",
                    "web3.Web3",
                    "int",
                    "List[Tuple[int, int]]"
                ],
                "eth_provider_uri": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "debug": [
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "light": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "initialize_deployer_interface": {
            "name": "initialize_deployer_interface",
            "location": 197,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "dict",
                    "list",
                    "int",
                    "bool"
                ],
                "poa": [
                    "float",
                    "List['cirq.Qid']"
                ],
                "eth_provider_uri": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ignore_solidity_check": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gas_strategy": [
                    "float",
                    "List['cirq.Qid']"
                ],
                "max_gas_price": [
                    "float",
                    "List['cirq.Qid']"
                ]
            }
        },
        "get_env_bool": {
            "name": "get_env_bool",
            "location": 216,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "var_name": [
                    "str"
                ],
                "default": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "ensure_config_root": {
            "name": "ensure_config_root",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "config_root": [
                    "str",
                    "TextIO",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ]
            }
        },
        "deployer_pre_launch_warnings": {
            "name": "deployer_pre_launch_warnings",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "Optional[str]"
                ],
                "etherscan": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "hw_wallet": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "parse_event_filters_into_argument_filters": {
            "name": "parse_event_filters_into_argument_filters",
            "location": 241,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "event_filters": [
                    "str",
                    "List[Tuple[str, Callable]]",
                    "events.Event",
                    "int"
                ]
            }
        },
        "retrieve_events": {
            "name": "retrieve_events",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "float",
                    "Optional[Dict]",
                    "Optional[List[str]]",
                    "Optional[AbstractSet]"
                ],
                "agent": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "event_name": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "from_block": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "to_block": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "argument_filters": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "csv_output_file": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "IO[bytes]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/__init__.py": {},
    "nucypher-development/nucypher/cli/actions/auth.py": {
        "get_password_from_prompt": {
            "name": "get_password_from_prompt",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "prompt": [
                    "str"
                ],
                "envvar": [
                    "str"
                ],
                "confirm": [
                    "str"
                ]
            }
        },
        "get_client_password": {
            "name": "get_client_password",
            "location": 50,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "checksum_address": [
                    "str"
                ],
                "envvar": [
                    "str"
                ],
                "confirm": [
                    "str"
                ]
            }
        },
        "unlock_signer_account": {
            "name": "unlock_signer_account",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ],
                "json_ipc": [
                    "pyramid.config.Configurator",
                    "dict",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "get_nucypher_password": {
            "name": "get_nucypher_password",
            "location": 81,
            "return": [
                "str",
                "bool",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "str"
                ],
                "confirm": [
                    "str",
                    "dict",
                    "int"
                ],
                "envvar": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "unlock_nucypher_keystore": {
            "name": "unlock_nucypher_keystore",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "emitter": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "character_configuration": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "recover_keystore": {
            "name": "recover_keystore",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "Optional[Callable]",
                    "models.characters.states.AttributeType",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/actions/collect.py": {
        "collect_keys_from_card": {
            "name": "collect_keys_from_card",
            "location": 38,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Set[str]"
            ],
            "arguments": {
                "emitter": [
                    "str"
                ],
                "card_identifier": [
                    "str",
                    "bool"
                ],
                "force": [
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "collect_bob_public_keys": {
            "name": "collect_bob_public_keys",
            "location": 56,
            "return": [
                "dict",
                "bool",
                "str",
                "IO[bytes]"
            ],
            "arguments": {
                "emitter": [
                    "List[bytes]",
                    "bool",
                    "List[str]",
                    "List[int]",
                    "Set[Tuple[str, str]]"
                ],
                "force": [
                    "List[bytes]",
                    "bool",
                    "List[str]",
                    "List[int]",
                    "Set[Tuple[str, str]]"
                ],
                "card_identifier": [
                    "List[bytes]",
                    "bool",
                    "List[str]",
                    "List[int]",
                    "Set[Tuple[str, str]]"
                ],
                "bob_encrypting_key": [
                    "bytes",
                    "str",
                    "apps.monero.xmr.types.Sc25519",
                    "Tuple[int, int]"
                ],
                "bob_verifying_key": [
                    "bytes",
                    "str",
                    "apps.monero.xmr.types.Sc25519",
                    "Tuple[int, int]"
                ]
            }
        },
        "collect_label": {
            "name": "collect_label",
            "location": 81,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Optional[str]"
                ],
                "bob_identifier": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "collect_expiration": {
            "name": "collect_expiration",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alice": [
                    "str",
                    "Callable",
                    "Optional[Union[str, Any]]"
                ],
                "expiration": [
                    "str",
                    "bool",
                    "Optional[bytes]",
                    "float"
                ],
                "force": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "collect_redundancy_ratio": {
            "name": "collect_redundancy_ratio",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alice": [
                    "Optional[int]",
                    "int",
                    "str",
                    "datetime.datetime",
                    "float",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "threshold": [
                    "float",
                    "ark.types.PrimalDinoCharacter",
                    "Dict[str, Any]"
                ],
                "shares": [
                    "int",
                    "Type['Frame']",
                    "bytes",
                    "AbstractSet[str]"
                ],
                "force": [
                    "str"
                ]
            }
        },
        "collect_policy_rate_and_value": {
            "name": "collect_policy_rate_and_value",
            "location": 111,
            "return": [
                "str",
                "int",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "alice": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "List[Tuple[int, float]]"
                ],
                "rate": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]"
                ],
                "value": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "set"
                ],
                "shares": [
                    "str",
                    "Type",
                    "int"
                ],
                "force": [
                    "Callable[[], None]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "collect_policy_parameters": {
            "name": "collect_policy_parameters",
            "location": 133,
            "return": [
                "int",
                "Dict[str, Any]",
                "List['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "Optional[List[str]]"
                ],
                "alice": [
                    "web3.contracContract",
                    "Callable"
                ],
                "force": [
                    "web3.contracContract",
                    "Callable"
                ],
                "bob_identifier": [
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[Any]",
                    "int"
                ],
                "label": [
                    "Optional[str]",
                    "List[int]",
                    "Optional[List[Any]]",
                    "bool",
                    "int",
                    "Tuple[int, int]"
                ],
                "threshold": [
                    "List[str]",
                    "str"
                ],
                "shares": [
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]",
                    "int"
                ],
                "value": [
                    "int",
                    "bool",
                    "datetime.datetime"
                ],
                "rate": [
                    "int",
                    "bool",
                    "datetime.datetime"
                ],
                "expiration": [
                    "bool",
                    "web3.Web3",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/actions/configure.py": {
        "forget": {
            "name": "forget",
            "location": 48,
            "return": [],
            "arguments": {
                "emitter": [],
                "configuration": []
            }
        },
        "get_config_filepaths": {
            "name": "get_config_filepaths",
            "location": 55,
            "return": [],
            "arguments": {
                "config_class": [],
                "config_root": []
            }
        },
        "get_or_update_configuration": {
            "name": "get_or_update_configuration",
            "location": 73,
            "return": [],
            "arguments": {
                "emitter": [],
                "filepath": [],
                "config_class": [],
                "updates": []
            }
        },
        "destroy_configuration": {
            "name": "destroy_configuration",
            "location": 97,
            "return": [],
            "arguments": {
                "emitter": [],
                "character_config": [],
                "force": []
            }
        },
        "handle_missing_configuration_file": {
            "name": "handle_missing_configuration_file",
            "location": 108,
            "return": [],
            "arguments": {
                "character_config_class": [],
                "init_command_hint": [],
                "config_file": []
            }
        },
        "handle_invalid_configuration_file": {
            "name": "handle_invalid_configuration_file",
            "location": 119,
            "return": [],
            "arguments": {
                "emitter": [],
                "config_class": [],
                "filepath": []
            }
        },
        "collect_operator_ip_address": {
            "name": "collect_operator_ip_address",
            "location": 139,
            "return": [],
            "arguments": {
                "emitter": [],
                "network": [],
                "force": []
            }
        },
        "perform_startup_ip_check": {
            "name": "perform_startup_ip_check",
            "location": 161,
            "return": [],
            "arguments": {
                "emitter": [],
                "ursula": [],
                "force": []
            }
        }
    },
    "nucypher-development/nucypher/cli/actions/confirm.py": {
        "confirm_deployment": {
            "name": "confirm_deployment",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str"
                ],
                "deployer_interface": [
                    "nucypher.blockchain.eth.interfaces.BlockchainDeployerInterface",
                    "Dict[str, str]",
                    "dict",
                    "dss.config.Replica",
                    "int"
                ]
            }
        },
        "confirm_destroy_configuration": {
            "name": "confirm_destroy_configuration",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "config.Config",
                    "nucypher.config.node.CharacterConfiguration",
                    "Dict[str, Any]"
                ]
            }
        },
        "verify_upgrade_details": {
            "name": "verify_upgrade_details",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "blockchain": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "config.Config"
                ],
                "registry": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "config.Config"
                ],
                "deployer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "config.Config"
                ]
            }
        },
        "confirm_staged_grant": {
            "name": "confirm_staged_grant",
            "location": 97,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ],
                "grant_request": [
                    "Optional[bytes]"
                ],
                "federated": [
                    "Optional[bytes]"
                ],
                "seconds_per_period": [
                    "Optional[bytes]"
                ]
            }
        },
        "confirm_staged_grant.prettify_field": {
            "name": "prettify_field",
            "location": 120,
            "return": [
                "List[str]",
                "str",
                "Container[str]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "Type[T]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/actions/select.py": {
        "select_client_account": {
            "name": "select_client_account",
            "location": 49,
            "return": [
                "int",
                "str",
                "Iterable[Any]"
            ],
            "arguments": {
                "emitter": [
                    "Optional[float]",
                    "float",
                    "List[int]"
                ],
                "eth_provider_uri": [
                    "bool",
                    "Optional[Callable[[Any], Any]]",
                    "str",
                    "Optional[int]"
                ],
                "signer": [
                    "int",
                    "str",
                    "bool"
                ],
                "signer_uri": [
                    "int",
                    "str",
                    "bool"
                ],
                "prompt": [
                    "Optional[str]"
                ],
                "default": [
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "registry": [
                    "int",
                    "cmk.gui.config.LoggedInUser",
                    "Dict[str, Any]",
                    "str"
                ],
                "show_eth_balance": [
                    "bool",
                    "int"
                ],
                "show_nu_balance": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ],
                "show_staking": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ],
                "network": [
                    "Dict[str, str]",
                    "bool",
                    "Dict[int, Dict[int, Any]]",
                    "int"
                ],
                "poa": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ]
            }
        },
        "select_network": {
            "name": "select_network",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "pathlib.Path",
                    "Union[str, TextIO]",
                    "Optional[Iterable[Any]]",
                    "List[str]",
                    "str"
                ],
                "network_type": [
                    "str",
                    "recidiviz.common.constants.state.state_supervision_violation.StateSupervisionViolationType"
                ],
                "message": [
                    "str",
                    "Callable",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ]
            }
        },
        "select_config_file": {
            "name": "select_config_file",
            "location": 159,
            "return": [
                "str",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "Union[str, bytes]",
                    "Optional[str]"
                ],
                "config_class": [
                    "str",
                    "Optional[str]",
                    "List[pathlib.Path]"
                ],
                "config_root": [
                    "pathlib.Path",
                    "str",
                    "path.Path",
                    "Optional[str]",
                    "bool"
                ],
                "checksum_address": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "select_card": {
            "name": "select_card",
            "location": 245,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "bytearray",
                    "bool",
                    "float",
                    "Tuple[int, int]"
                ],
                "card_identifier": [
                    "int",
                    "List[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/actions/validate.py": {
        "validate_grant_command": {
            "name": "validate_grant_command",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "bool",
                    "Mapping[str, Any]",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "alice": [
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "str",
                    "float",
                    "int"
                ],
                "force": [
                    "bool",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict"
                ],
                "bob": [
                    "str",
                    "int",
                    "Optional[Union[str, bytes]]",
                    "dict",
                    "Tuple[List[str], List[str]]",
                    "Dict[str, Any]"
                ],
                "bob_verifying_key": [
                    "str",
                    "int",
                    "Optional[Union[str, bytes]]",
                    "dict",
                    "Tuple[List[str], List[str]]",
                    "Dict[str, Any]"
                ],
                "bob_encrypting_key": [
                    "str",
                    "int",
                    "Optional[Union[str, bytes]]",
                    "dict",
                    "Tuple[List[str], List[str]]",
                    "Dict[str, Any]"
                ],
                "label": [
                    "str",
                    "int",
                    "Optional[Union[str, bytes]]",
                    "dict",
                    "Tuple[List[str], List[str]]",
                    "Dict[str, Any]"
                ],
                "expiration": [
                    "str",
                    "int",
                    "Optional[Union[str, bytes]]",
                    "dict",
                    "Tuple[List[str], List[str]]",
                    "Dict[str, Any]"
                ],
                "rate": [
                    "Union[int, float]",
                    "bool"
                ],
                "value": [
                    "Union[int, float]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/actions/__init__.py": {},
    "nucypher-development/nucypher/cli/commands/alice.py": {
        "alice": {
            "name": "alice",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "neuromation.api.config._AuthConfig",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "Path",
                    "pathlib.Path",
                    "bool"
                ],
                "full_config_options": [
                    "sphinx.config.Config",
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "neuromation.api.config._AuthConfig",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ],
                "config_root": [
                    "str",
                    "neuromation.api.config._AuthConfig",
                    "pathlib.Path"
                ],
                "key_material": [
                    "sphinx.config.Config",
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "neuromation.api.config._AuthConfig",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "MutableMapping[str, str]",
                    "List[Dict]",
                    "int",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "Iterable[pathlib.Path]",
                    "baseplate.lib.config.RawConfig"
                ],
                "full_config_options": [
                    "str",
                    "pathlib.Path",
                    "baseplate.lib.config.RawConfig"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "int",
                    "List[Dict]"
                ],
                "config_options": [
                    "pathlib.Path",
                    "bool",
                    "str"
                ],
                "config_file": [
                    "pathlib.Path",
                    "bool",
                    "str"
                ],
                "force": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 371,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "cerise.config.Config",
                    "dict",
                    "pypi2nix.path.Path"
                ],
                "character_options": [
                    "str"
                ],
                "config_file": [
                    "str"
                ],
                "controller_port": [
                    "str",
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict",
                    "Optional[pathlib.Path]"
                ],
                "dry_run": [
                    "Union[str, int]",
                    "str",
                    "Callable[[Any, Any], bool]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "public_keys": {
            "name": "public_keys",
            "location": 407,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "general_config": [
                    "Callable",
                    "Dict[str, Any]"
                ],
                "character_options": [
                    "pathlib.Path",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "bool",
                    "int"
                ],
                "config_file": [
                    "pathlib.Path",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "bool",
                    "int"
                ]
            }
        },
        "make_card": {
            "name": "make_card",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "dict",
                    "int",
                    "str",
                    "Callable"
                ],
                "character_options": [
                    "str",
                    "cerulean.Path",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "config_file": [
                    "str",
                    "cerulean.Path",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "nickname": [
                    "int",
                    "bool",
                    "dict",
                    "str",
                    "pathlib.Path",
                    "Sequence[str]"
                ]
            }
        },
        "derive_policy_pubkey": {
            "name": "derive_policy_pubkey",
            "location": 439,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "general_config": [
                    "Callable",
                    "Dict[str, Any]"
                ],
                "label": [
                    "Dict[str, Any]",
                    "dict",
                    "apistar.types.WSGIEnviron",
                    "Dict[str, Dict[str, str]]"
                ],
                "character_options": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "TextIO",
                    "pathlib.Path"
                ],
                "config_file": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "TextIO",
                    "pathlib.Path"
                ]
            }
        },
        "grant": {
            "name": "grant",
            "location": 456,
            "return": [
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "bytes"
                ],
                "bob": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "bob_encrypting_key": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "bob_verifying_key": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "label": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "value": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "rate": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "expiration": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "threshold": [
                    "raiden.utils.BlockNumber",
                    "raiden.utils.PrivateKey",
                    "str"
                ],
                "shares": [
                    "raiden.utils.BlockNumber",
                    "raiden.utils.PrivateKey",
                    "str"
                ],
                "character_options": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "pathlib.Path"
                ],
                "config_file": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "pathlib.Path"
                ],
                "force": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "revoke": {
            "name": "revoke",
            "location": 543,
            "return": [
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "bob_verifying_key": [
                    "str",
                    "bool"
                ],
                "label": [
                    "str",
                    "bool"
                ],
                "character_options": [
                    "str",
                    "pathlib.Path"
                ],
                "config_file": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 556,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "general_config": [
                    "Callable",
                    "config.ConfigFile",
                    "opentrons.types.Point"
                ],
                "label": [
                    "str",
                    "IO",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "neuromation.api.config._AuthConfig"
                ],
                "message_kit": [
                    "str",
                    "IO",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "neuromation.api.config._AuthConfig"
                ],
                "character_options": [
                    "str",
                    "bool",
                    "cerulean.Path"
                ],
                "config_file": [
                    "str",
                    "bool",
                    "cerulean.Path"
                ]
            }
        },
        "AliceConfigOptions.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dev": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "network": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "eth_provider_uri": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "federated_only": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "discovery_port": [
                    "int",
                    "str",
                    "bool"
                ],
                "pay_with": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "registry_filepath": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "middleware": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "gas_strategy": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "max_gas_price": [
                    "int",
                    "float",
                    "Optional[int]",
                    "starfish.core.types.Number"
                ],
                "signer_uri": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "lonely": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "payment_method": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "payment_provider": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "payment_network": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "AliceConfigOptions.create_config": {
            "name": "create_config",
            "location": 114,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "pathlib.Path",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable[[str], None]"
                ]
            }
        },
        "AliceFullConfigOptions.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "poa": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "light": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "threshold": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "shares": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "duration": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ]
            }
        },
        "AliceFullConfigOptions.generate_config": {
            "name": "generate_config",
            "location": 203,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "bool",
                    "Mapping[str, str]"
                ],
                "config_root": [
                    "str"
                ],
                "key_material": [
                    "str"
                ]
            }
        },
        "AliceFullConfigOptions.get_updates": {
            "name": "get_updates",
            "location": 243,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AliceCharacterOptions.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "hw_wallet": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "teacher_uri": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "min_stake": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ]
            }
        },
        "AliceCharacterOptions.create_character": {
            "name": "create_character",
            "location": 286,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Tuple[int, int]",
                    "raiden.utils.Address",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "bool"
                ],
                "json_ipc": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "load_seednodes": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/commands/bob.py": {
        "bob": {
            "name": "bob",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "neuromation.api.config._AuthConfig",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "pathlib.Path",
                    "Path",
                    "virgene.config.Config"
                ],
                "config_options": [
                    "str",
                    "virgene.config.Config",
                    "neuromation.api.config._AuthConfig"
                ],
                "config_root": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "neuromation.api.config._AuthConfig"
                ],
                "key_material": [
                    "str",
                    "virgene.config.Config",
                    "neuromation.api.config._AuthConfig"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 254,
            "return": [],
            "arguments": {
                "general_config": [
                    "bool",
                    "Callable",
                    "dss.config.Replica"
                ],
                "character_options": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ],
                "config_file": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ],
                "controller_port": [
                    "Union[str, int]",
                    "str",
                    "Callable[[Any, Any], bool]",
                    "int",
                    "bool",
                    "float"
                ],
                "dry_run": [
                    "Union[str, int]",
                    "str",
                    "Callable[[Any, Any], bool]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "MutableMapping[str, str]",
                    "int",
                    "Optional[str]"
                ],
                "config_options": [
                    "str",
                    "pathlib.Path",
                    "baseplate.lib.config.RawConfig",
                    "Optional[str]",
                    "neuromation.api.config._AuthConfig"
                ],
                "config_file": [
                    "pathlib.Path",
                    "str",
                    "Iterable[pathlib.Path]",
                    "baseplate.lib.config.RawConfig"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "int",
                    "List[Dict]"
                ],
                "config_options": [
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "NamedTuple",
                    "str"
                ],
                "config_file": [
                    "pathlib.Path",
                    "bool",
                    "str"
                ],
                "force": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "public_keys": {
            "name": "public_keys",
            "location": 318,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "general_config": [
                    "Callable",
                    "Dict[str, Any]"
                ],
                "character_options": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "Optional[str]",
                    "pathlib.Path",
                    "str",
                    "int",
                    "bool"
                ],
                "config_file": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "Optional[str]",
                    "pathlib.Path",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "make_card": {
            "name": "make_card",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "int",
                    "bool",
                    "dict",
                    "str",
                    "pathlib.Path",
                    "Sequence[str]"
                ],
                "character_options": [
                    "str",
                    "cerulean.Path",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "int"
                ],
                "config_file": [
                    "str",
                    "cerulean.Path",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "int"
                ],
                "nickname": [
                    "int",
                    "bool",
                    "dict",
                    "str",
                    "pathlib.Path",
                    "Sequence[str]"
                ]
            }
        },
        "retrieve_and_decrypt": {
            "name": "retrieve_and_decrypt",
            "location": 352,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "general_config": [
                    "bytes",
                    "TextIO",
                    "str"
                ],
                "character_options": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "config_file": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "alice_verifying_key": [
                    "bytes",
                    "Dict[str, Any]"
                ],
                "treasure_map": [
                    "bytes",
                    "str",
                    "Union[str, bytes]",
                    "dict"
                ],
                "message_kit": [
                    "dict",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "List[str]",
                    "str"
                ],
                "ipfs": [
                    "pypi2nix.path.Path",
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "alice": [
                    "bool",
                    "dict",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "decode": [
                    "dict",
                    "utils.types.OrderedDict_[utils.types.K, utils.types.A]",
                    "Union[str, Dict[str, Any]]",
                    "Union[list, dict]",
                    "Dict[str, dict]",
                    "List[Dict[str, Any]]"
                ],
                "force": [
                    "str",
                    "dict",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "BobConfigOptions.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "eth_provider_uri": [
                    "bool",
                    "int",
                    "float"
                ],
                "network": [
                    "bool",
                    "int",
                    "float"
                ],
                "registry_filepath": [
                    "bool",
                    "int",
                    "float"
                ],
                "checksum_address": [
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "int",
                    "Optional[float]",
                    "bool",
                    "Tuple[int]",
                    "str",
                    "Iterable[Sequence[str]]"
                ],
                "discovery_port": [
                    "bool",
                    "List[str]",
                    "float",
                    "list",
                    "Optional[str]",
                    "int"
                ],
                "dev": [
                    "bool",
                    "int",
                    "float"
                ],
                "middleware": [
                    "bool",
                    "int",
                    "float"
                ],
                "federated_only": [
                    "bool",
                    "int",
                    "float"
                ],
                "gas_strategy": [
                    "bool",
                    "int",
                    "float"
                ],
                "max_gas_price": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "signer_uri": [
                    "bool",
                    "int",
                    "float"
                ],
                "lonely": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "BobConfigOptions.create_config": {
            "name": "create_config",
            "location": 101,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "Dict[str, Any]"
                ],
                "config_file": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "BobConfigOptions.generate_config": {
            "name": "generate_config",
            "location": 140,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "cmk.gui.utils.html.HTML",
                    "Optional[str]"
                ],
                "config_root": [
                    "str"
                ],
                "key_material": [
                    "str"
                ]
            }
        },
        "BobConfigOptions.get_updates": {
            "name": "get_updates",
            "location": 163,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobCharacterOptions.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "teacher_uri": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "min_stake": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ]
            }
        },
        "BobCharacterOptions.create_character": {
            "name": "create_character",
            "location": 205,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "Dict[str, str]"
                ],
                "config_file": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "List[str]",
                    "dict",
                    "Optional[str]"
                ],
                "json_ipc": [
                    "sphinx.config.Config",
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/commands/bond.py": {
        "is_authorized": {
            "name": "is_authorized",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "Exception",
                    "Tuple['cirq.Qid']"
                ],
                "staking_provider": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "agent": [
                    "str",
                    "int"
                ]
            }
        },
        "is_bonded": {
            "name": "is_bonded",
            "location": 64,
            "return": [
                "bool",
                "Optional[Any]",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "agent": [
                    "str",
                    "Optional[str]"
                ],
                "staking_provider": [
                    "str",
                    "Optional[str]"
                ],
                "return_address": [
                    "bool",
                    "list",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "check_bonding_requirements": {
            "name": "check_bonding_requirements",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "float",
                    "nucypher.characters.control.emitters.StdoutEmitter"
                ],
                "agent": [
                    "bytes",
                    "str",
                    "bool",
                    "T",
                    "List[str]"
                ],
                "staking_provider": [
                    "raiden.utils.Address",
                    "str",
                    "bool"
                ]
            }
        },
        "bond": {
            "name": "bond",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "registry_filepath": [
                    "str",
                    "int",
                    "list"
                ],
                "eth_provider_uri": [
                    "int",
                    "Callable",
                    "str"
                ],
                "signer_uri": [
                    "int",
                    "Callable",
                    "str"
                ],
                "operator_address": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "staking_provider": [
                    "int",
                    "Callable",
                    "str"
                ],
                "network": [
                    "str",
                    "Dict[str, Any]"
                ],
                "force": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "unbond": {
            "name": "unbond",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "registry_filepath": [
                    "str",
                    "int",
                    "list"
                ],
                "eth_provider_uri": [
                    "int",
                    "Callable",
                    "str"
                ],
                "signer_uri": [
                    "int",
                    "Callable",
                    "str"
                ],
                "staking_provider": [
                    "str",
                    "int",
                    "float"
                ],
                "network": [
                    "str",
                    "Dict[str, Any]"
                ],
                "force": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/commands/contacts.py": {
        "contacts": {
            "name": "contacts",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "show": {
            "name": "show",
            "location": 44,
            "return": [
                "str",
                "Union[str, Dict]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Callable"
                ],
                "qrcode": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "_list": {
            "name": "_list",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create": {
            "name": "create",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "character_flag": [
                    "Optional[bytes]",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "verifying_key": [
                    "Optional[bytes]",
                    "bytes",
                    "bool",
                    "str",
                    "float",
                    "Union[bytes, str, None]"
                ],
                "encrypting_key": [
                    "Optional[bytes]",
                    "bytes",
                    "bool",
                    "str",
                    "float",
                    "Union[bytes, str, None]"
                ],
                "nickname": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "force": [
                    "Optional[str]",
                    "str",
                    "Union[bytes, str, None]",
                    "bool"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "force": [
                    "str"
                ],
                "card_id": [
                    "str",
                    "int"
                ]
            }
        },
        "import_card": {
            "name": "import_card",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/commands/deploy.py": {
        "deploy": {
            "name": "deploy",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "download_registry": {
            "name": "download_registry",
            "location": 257,
            "return": [],
            "arguments": {
                "general_config": [],
                "config_root": [],
                "registry_outfile": [],
                "network": [],
                "force": []
            }
        },
        "inspect": {
            "name": "inspect",
            "location": 292,
            "return": [],
            "arguments": {
                "general_config": [],
                "eth_provider_uri": [],
                "config_root": [],
                "registry_infile": [],
                "deployer_address": [],
                "poa": [],
                "ignore_solidity_check": [],
                "network": []
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 318,
            "return": [],
            "arguments": {
                "general_config": [],
                "actor_options": [],
                "retarget": [],
                "target_address": [],
                "ignore_deployed": [],
                "confirmations": []
            }
        },
        "rollback": {
            "name": "rollback",
            "location": 400,
            "return": [],
            "arguments": {
                "general_config": [],
                "actor_options": []
            }
        },
        "contracts": {
            "name": "contracts",
            "location": 425,
            "return": [],
            "arguments": {
                "general_config": [],
                "actor_options": [],
                "mode": [],
                "activate": [],
                "gas": [],
                "ignore_deployed": [],
                "confirmations": [],
                "parameters": []
            }
        },
        "transfer_ownership": {
            "name": "transfer_ownership",
            "location": 507,
            "return": [],
            "arguments": {
                "general_config": [],
                "actor_options": [],
                "target_address": [],
                "gas": []
            }
        },
        "ActorOptions.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "eth_provider_uri": [],
                "deployer_address": [],
                "contract_name": [],
                "registry_infile": [],
                "registry_outfile": [],
                "hw_wallet": [],
                "dev": [],
                "force": [],
                "poa": [],
                "config_root": [],
                "etherscan": [],
                "ignore_solidity_check": [],
                "gas_strategy": [],
                "max_gas_price": [],
                "signer_uri": [],
                "network": []
            }
        },
        "ActorOptions.create_actor": {
            "name": "create_actor",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "emitter": []
            }
        }
    },
    "nucypher-development/nucypher/cli/commands/enrico.py": {
        "enrico": {
            "name": "enrico",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 41,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "general_config": [
                    "Dict[str, float]",
                    "int",
                    "Union[bytes, str]",
                    "dict",
                    "Optional[\"AbstractPurpose\"]",
                    "Dict[str, Any]",
                    "str"
                ],
                "policy_encrypting_key": [
                    "str",
                    "int",
                    "List[Tuple[Any, Dict]]"
                ],
                "dry_run": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bytes",
                    "utils.times.Seconds",
                    "torch.utils.data.DataLoader",
                    "List[int]"
                ],
                "http_port": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bytes",
                    "utils.times.Seconds",
                    "torch.utils.data.DataLoader",
                    "List[int]"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 64,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "Optional[int]",
                    "Optional[\"AbstractPurpose\"]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "policy_encrypting_key": [
                    "bool",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[tuple]",
                    "List[bytes]",
                    "Optional[Dict[str, Any]]"
                ],
                "message": [
                    "mypy.options.Options",
                    "str",
                    "IO[bytes]"
                ],
                "file": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[List[Dict]]"
                ],
                "ipfs": [
                    "str",
                    "starlette.types.ASGIApp"
                ]
            }
        },
        "_create_enrico": {
            "name": "_create_enrico",
            "location": 102,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "policy_encrypting_key": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/commands/porter.py": {
        "porter": {
            "name": "porter",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 68,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "general_config": [
                    "Dict[str, Any]",
                    "opentrons.config.robot_configs.robot_config",
                    "cmk.base.config.ConfigCache",
                    "Optional[int]",
                    "str",
                    "cmk.base.config.HostConfig"
                ],
                "network": [
                    "str",
                    "Dict[str, Any]"
                ],
                "eth_provider_uri": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "federated_only": [
                    "dict"
                ],
                "teacher_uri": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ],
                "registry_filepath": [
                    "List[str]",
                    "Dict[str, Any]",
                    "solo.config.app.Config"
                ],
                "min_stake": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ],
                "http_port": [
                    "bool",
                    "str"
                ],
                "tls_certificate_filepath": [
                    "Dict[str, Any]",
                    "Dict[str, Union[int, bool]]"
                ],
                "tls_key_filepath": [
                    "Dict[str, Any]",
                    "Dict[str, Union[int, bool]]"
                ],
                "basic_auth_filepath": [
                    "cmk.utils.type_defs.ServiceName",
                    "dict"
                ],
                "allow_origins": [
                    "Optional[Dict[str, Any]]",
                    "cmk.utils.structured_data.StructuredDataTree",
                    "Mapping[str, Any]"
                ],
                "dry_run": [
                    "types.CoroutineType",
                    "bool",
                    "Dict[str, Any]",
                    "defaultdict"
                ],
                "eager": [
                    "dict"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/commands/status.py": {
        "status": {
            "name": "status",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "network": {
            "name": "network",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "registry_options": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ]
            }
        },
        "staking_providers": {
            "name": "staking_providers",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "registry_options": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "staking_provider_address": [
                    "int",
                    "list"
                ]
            }
        },
        "events": {
            "name": "events",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "bool",
                    "Callable"
                ],
                "registry_options": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "bool",
                    "Callable"
                ],
                "contract_name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "dict",
                    "Optional[int]"
                ],
                "from_block": [
                    "raiden.utils.Optional[raiden.network.rpc.clienTransactionSent]",
                    "raiden.utils.PrivateKey",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.Address"
                ],
                "to_block": [
                    "Optional[str]",
                    "bool",
                    "slice"
                ],
                "event_name": [
                    "str",
                    "int",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Optional[str]"
                ],
                "csv": [
                    "int",
                    "bool",
                    "bytes",
                    "raiden.utils.Secret",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "csv_file": [
                    "str",
                    "bool",
                    "int"
                ],
                "event_filters": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[\"ShippingInfo\"]"
                ],
                "legacy": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "RegistryOptions.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "eth_provider_uri": [
                    "int",
                    "bool",
                    "float"
                ],
                "poa": [
                    "int",
                    "bool",
                    "float"
                ],
                "registry_filepath": [
                    "int",
                    "bool",
                    "float"
                ],
                "light": [
                    "int",
                    "bool",
                    "float"
                ],
                "network": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RegistryOptions.setup": {
            "name": "setup",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "general_config": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/commands/ursula.py": {
        "ursula": {
            "name": "ursula",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "cerise.config.Config",
                    "bool",
                    "dict",
                    "Optional[pathlib.Path]",
                    "pathlib.Path",
                    "str"
                ],
                "config_options": [
                    "dict",
                    "cmk.utils.type_defs.HostName",
                    "Callable",
                    "cmk.base.config.ConfigCache",
                    "config.ConfigFile",
                    "revlibs.connections.config.Config",
                    "config.Config"
                ],
                "force": [
                    "Optional[Sequence]",
                    "dict"
                ],
                "config_root": [
                    "str",
                    "neuromation.api.config._AuthConfig",
                    "virgene.config.Config"
                ],
                "key_material": [
                    "dict",
                    "str",
                    "Callable",
                    "config.Config",
                    "cmk.base.config.ObjectAttributes"
                ]
            }
        },
        "recover": {
            "name": "recover",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "dict",
                    "Callable",
                    "str",
                    "IO[str]",
                    "types.Config",
                    "cmk.base.config.HostConfig"
                ],
                "config_options": [
                    "dict",
                    "Callable",
                    "str",
                    "IO[str]",
                    "types.Config",
                    "cmk.base.config.HostConfig"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "config_options": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "config_file": [
                    "pathlib.Path",
                    "bool",
                    "str"
                ],
                "force": [
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "forget": {
            "name": "forget",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "config_options": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "config_file": [
                    "pathlib.Path",
                    "bool",
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "character_options": [
                    "str"
                ],
                "config_file": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "cerulean.Path"
                ],
                "interactive": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "tsrc.workspace.config.WorkspaceConfig"
                ],
                "dry_run": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "tsrc.workspace.config.WorkspaceConfig"
                ],
                "prometheus": [
                    "int",
                    "bool",
                    "Optional[dict]",
                    "Optional[int]"
                ],
                "metrics_port": [
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "metrics_listen_address": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "metrics_prefix": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "metrics_interval": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "force": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "int",
                    "str",
                    "Optional[dict]"
                ],
                "ip_checkup": [
                    "str"
                ]
            }
        },
        "save_metadata": {
            "name": "save_metadata",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "Optional[dict]",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "character_options": [
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "Optional[str]",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "config_file": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "cerulean.Path",
                    "bool"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "Optional[str]"
                ],
                "config_options": [
                    "str",
                    "pathlib.Path",
                    "bool",
                    "Iterable[str]"
                ],
                "config_file": [
                    "str",
                    "pathlib.Path",
                    "Iterable[pathlib.Path]"
                ],
                "force": [
                    "str",
                    "Optional[str]",
                    "Union[Sequence[str], Sequence[int]]"
                ],
                "action": [
                    "str",
                    "bool"
                ]
            }
        },
        "_pre_launch_warnings": {
            "name": "_pre_launch_warnings",
            "location": 498,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "dict",
                    "str",
                    "bool",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "List[Dict[str, Any]]"
                ],
                "dev": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "force": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "UrsulaConfigOptions.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "eth_provider_uri": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "operator_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "federated_only": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "rest_host": [
                    "str",
                    "list"
                ],
                "rest_port": [
                    "str",
                    "list",
                    "dict"
                ],
                "db_filepath": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "network": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "registry_filepath": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "policy_registry_filepath": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "dev": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "poa": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "light": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "gas_strategy": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "max_gas_price": [
                    "int",
                    "float",
                    "Optional[int]",
                    "starfish.core.types.Number"
                ],
                "signer_uri": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "availability_check": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "lonely": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "payment_method": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "payment_provider": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "payment_network": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "UrsulaConfigOptions.create_config": {
            "name": "create_config",
            "location": 131,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter"
                ],
                "config_file": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "UrsulaConfigOptions.generate_config": {
            "name": "generate_config",
            "location": 189,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Optional[str]",
                    "cmk.gui.utils.html.HTML"
                ],
                "config_root": [
                    "pathlib.Path",
                    "Optional[Callable[[pathlib.Path], int]]",
                    "bytes",
                    "str"
                ],
                "force": [
                    "str"
                ],
                "key_material": [
                    "pathlib.Path",
                    "Optional[Callable[[pathlib.Path], int]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "UrsulaConfigOptions.get_updates": {
            "name": "get_updates",
            "location": 228,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCharacterOptions.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "teacher_uri": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "min_stake": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ]
            }
        },
        "UrsulaCharacterOptions.create_character": {
            "name": "create_character",
            "location": 288,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "Dict[str, Any]",
                "int",
                "sideeye.config.ASCParsingConfig"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Optional[str]",
                    "Optional[path.Path]",
                    "pathlib.Path",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "config_file": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "json_ipc": [
                    "str",
                    "Optional[Any]",
                    "Union[bytes, str]",
                    "Optional[str]",
                    "bool"
                ],
                "load_seednodes": [
                    "bool",
                    "int",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/commands/__init__.py": {},
    "nucypher-development/nucypher/cli/painting/deployment.py": {
        "paint_staged_deployment": {
            "name": "paint_staged_deployment",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [],
                "deployer_interface": [
                    "str",
                    "Optional[cmk.utils.type_defs.ServiceName]",
                    "cmk.utils.type_defs.HostName"
                ],
                "administrator": [
                    "str",
                    "bool",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "recidiviz.utils.regions.Region"
                ]
            }
        },
        "paint_contract_deployment": {
            "name": "paint_contract_deployment",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "bool",
                    "Dict[cmk.utils.type_defs.HostName, cmk.utils.type_defs.TagList]",
                    "Optional[List[str]]",
                    "list",
                    "str",
                    "List[Union[bool, str]]"
                ],
                "contract_name": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, utils.CWLObjectType]",
                    "Callable",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "contract_address": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "receipts": [
                    "dict",
                    "Optional[dict]",
                    "Dict[str, List[str]]"
                ],
                "chain_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "open_in_browser": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "paint_deployer_contract_inspection": {
            "name": "paint_deployer_contract_inspection",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "Tuple[Sequence]",
                    "int",
                    "Union[Sequence[str], str]",
                    "List[str]"
                ],
                "registry": [
                    "cmk.utils.type_defs.HostName",
                    "Union[object, type]"
                ],
                "deployer_address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/painting/help.py": {
        "echo_version": {
            "name": "echo_version",
            "location": 32,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "Dict[str, Any]"
                ],
                "param": [
                    "bool",
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "click.Context",
                    "Dict[str, Any]"
                ]
            }
        },
        "echo_solidity_version": {
            "name": "echo_solidity_version",
            "location": 39,
            "return": [
                "bytes"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "Dict[str, Any]",
                    "bool"
                ],
                "param": [
                    "bool",
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "click.Context",
                    "Dict[str, Any]"
                ]
            }
        },
        "echo_config_root_path": {
            "name": "echo_config_root_path",
            "location": 46,
            "return": [
                "Iterator[object]",
                "Dict[str, Any]",
                "Generator",
                "str",
                "tuple"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Context",
                    "Union[click.Option, click.Parameter]",
                    "click.Parameter",
                    "List[Tuple[str, str]]",
                    "bool",
                    "Tuple[str]"
                ],
                "value": [
                    "click.Context",
                    "Dict[str, Any]"
                ]
            }
        },
        "echo_logging_root_path": {
            "name": "echo_logging_root_path",
            "location": 53,
            "return": [
                "str",
                "Dict[str, Any]",
                "Generator",
                "tuple",
                "Tuple[int, str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ],
                "param": [
                    "click.Context",
                    "List[Tuple[str, str]]",
                    "Union[click.Option, click.Parameter]",
                    "click.Parameter",
                    "Tuple[str]",
                    "bool"
                ],
                "value": [
                    "click.Context",
                    "Dict[str, Any]"
                ]
            }
        },
        "paint_new_installation_help": {
            "name": "paint_new_installation_help",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "bool",
                    "Type[eth.abc.ChainAPI]",
                    "Dict[str, Any]"
                ],
                "new_configuration": [
                    "Dict[str, Any]",
                    "Dict[str, Union[str, int]]",
                    "\"model.InterchainModel\""
                ],
                "filepath": [
                    "bool"
                ]
            }
        },
        "paint_probationary_period_disclaimer": {
            "name": "paint_probationary_period_disclaimer",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "bool"
                ]
            }
        },
        "enforce_probationary_period": {
            "name": "enforce_probationary_period",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "Optional[str]",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ],
                "expiration": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/painting/nodes.py": {
        "build_fleet_state_status": {
            "name": "build_fleet_state_status",
            "location": 23,
            "return": [],
            "arguments": {
                "ursula": []
            }
        },
        "paint_node_status": {
            "name": "paint_node_status",
            "location": 27,
            "return": [],
            "arguments": {
                "emitter": [],
                "ursula": [],
                "start_time": []
            }
        },
        "paint_known_nodes": {
            "name": "paint_known_nodes",
            "location": 77,
            "return": [],
            "arguments": {
                "emitter": [],
                "ursula": []
            }
        }
    },
    "nucypher-development/nucypher/cli/painting/policies.py": {
        "paint_single_card": {
            "name": "paint_single_card",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "str"
                ],
                "card": [],
                "qrcode": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "paint_cards": {
            "name": "paint_cards",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "str"
                ],
                "cards": [
                    "bool",
                    "T",
                    "int"
                ],
                "as_table": [
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/painting/status.py": {
        "paint_contract_status": {
            "name": "paint_contract_status",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "registry": [
                    "str"
                ],
                "emitter": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/painting/transactions.py": {
        "paint_decoded_transaction": {
            "name": "paint_decoded_transaction",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "int",
                    "List[bytes]",
                    "bool"
                ],
                "proposal": [
                    "str",
                    "bool"
                ],
                "contract": [
                    "str",
                    "bool"
                ],
                "registry": [
                    "str",
                    "bool"
                ]
            }
        },
        "paint_receipt_summary": {
            "name": "paint_receipt_summary",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "Optional[str]",
                    "Type",
                    "type"
                ],
                "receipt": [
                    "bool",
                    "float",
                    "Callable[[float], float]"
                ],
                "chain_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "transaction_type": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "eth_provider_uri": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "nucypher-development/nucypher/cli/painting/__init__.py": {},
    "nucypher-development/nucypher/config/base.py": {
        "BaseConfiguration.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "pathlib.Path"
                ],
                "filepath": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "BaseConfiguration.static_payload": {
            "name": "static_payload",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfiguration.generate_filename": {
            "name": "generate_filename",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "dict",
                    "List[str]",
                    "List[Tuple[str, str]]"
                ],
                "modifier": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseConfiguration.default_filepath": {
            "name": "default_filepath",
            "location": 191,
            "return": [
                "str",
                "Union[pathlib.Path, str]",
                "Path",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]"
                ],
                "config_root": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "BaseConfiguration.generate_filepath": {
            "name": "generate_filepath",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Dict[str, Any]",
                    "str"
                ],
                "modifier": [
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "override": [
                    "List[str]",
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseConfiguration._ensure_config_root_exists": {
            "name": "_ensure_config_root_exists",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfiguration.peek": {
            "name": "peek",
            "location": 243,
            "return": [
                "deoplete.util.UserContext",
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception"
                ],
                "filepath": [
                    "str",
                    "Type[T]",
                    "int"
                ],
                "field": [
                    "type",
                    "str"
                ]
            }
        },
        "BaseConfiguration.to_configuration_file": {
            "name": "to_configuration_file",
            "location": 251,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "int"
                ],
                "modifier": [
                    "str",
                    "int",
                    "bytearray",
                    "eth.JournalDBCheckpoint",
                    "Optional[bool]"
                ],
                "override": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseConfiguration.from_configuration_file": {
            "name": "from_configuration_file",
            "location": 258,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "T"
                ],
                "filepath": [
                    "str",
                    "T"
                ]
            }
        },
        "BaseConfiguration._read_configuration_file": {
            "name": "_read_configuration_file",
            "location": 265,
            "return": [
                "bool",
                "str",
                "pathlib.Path",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "filepath": [
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "BaseConfiguration._write_configuration_file": {
            "name": "_write_configuration_file",
            "location": 272,
            "return": [
                "bool",
                "str",
                "pathlib.Path",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "bytes"
                ],
                "override": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "BaseConfiguration.serialize": {
            "name": "serialize",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseConfiguration.deserialize": {
            "name": "deserialize",
            "location": 296,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "payload": [
                    "str",
                    "Type[\"SerializationDialect\"]"
                ],
                "deserializer": [
                    "str",
                    "Type[\"SerializationDialect\"]"
                ],
                "payload_label": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "BaseConfiguration.update": {
            "name": "update",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CharacterConfiguration.__init__": {
            "name": "__init__",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "config_root": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "filepath": [
                    "bool",
                    "List[str]"
                ],
                "dev_mode": [
                    "str",
                    "nucypher.crypto.powers.CryptoPower",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "federated_only": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "checksum_address": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable[[], str]",
                    "dict",
                    "int"
                ],
                "crypto_power": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "keystore": [
                    "bool",
                    "List[str]"
                ],
                "keystore_path": [
                    "pathlib.Path",
                    "Sequence[str]"
                ],
                "learn_on_same_thread": [],
                "abort_on_learning_error": [
                    "str",
                    "dict",
                    "bool",
                    "Exception"
                ],
                "start_learning_now": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "controller_port": [
                    "bool",
                    "int",
                    "Callable[[], int]"
                ],
                "domain": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "network_middleware": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "lonely": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "known_nodes": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "node_storage": [
                    "Optional[int]",
                    "\"Task\"",
                    "raiden.network.proxies.token.Token"
                ],
                "reload_metadata": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "save_metadata": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "poa": [
                    "bool",
                    "rl_algorithms.utils.config.ConfigDict",
                    "int",
                    "str"
                ],
                "light": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "eth_provider_uri": [
                    "bool",
                    "Dict[str, Any]",
                    "raiden.constants.RoutingMode"
                ],
                "gas_strategy": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Optional[dict]",
                    "raiden.constants.EthClient"
                ],
                "max_gas_price": [
                    "bool",
                    "str"
                ],
                "signer_uri": [
                    "Optional[float]",
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]",
                    "Optional[str]",
                    "int",
                    "Sequence[Callable]"
                ],
                "payment_method": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "payment_provider": [
                    "bool",
                    "dict"
                ],
                "payment_network": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "registry": [
                    "bool",
                    "Optional[float]",
                    "str",
                    "int"
                ],
                "registry_filepath": [
                    "bool",
                    "nucypher.blockchain.economics.BaseEconomics",
                    "Optional[float]"
                ],
                "policy_registry": [
                    "Optional[float]",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "policy_registry_filepath": [
                    "nucypher.blockchain.eth.agents.MinerAgent",
                    "int",
                    "Optional[float]"
                ],
                "worker_data": [
                    "bool",
                    "Optional[\"TrackingData\"]",
                    "Tuple[int, str, bytearray]",
                    "dict"
                ]
            }
        },
        "CharacterConfiguration.__call__": {
            "name": "__call__",
            "location": 581,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.keystore": {
            "name": "keystore",
            "location": 585,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.attach_keystore": {
            "name": "attach_keystore",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keystore": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CharacterConfiguration.checksum_address_from_filepath": {
            "name": "checksum_address_from_filepath",
            "location": 592,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Mapping[str, T]"
                ],
                "filepath": [
                    "dict",
                    "str",
                    "Dict[str, Iterable[Any]]",
                    "MutableMapping",
                    "type"
                ]
            }
        },
        "CharacterConfiguration.update": {
            "name": "update",
            "location": 617,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Dict[str, str]",
                "Optional[\"permissions_doc\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.generate": {
            "name": "generate",
            "location": 627,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Optional[str]",
                "dict",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "password": [
                    "Optional[str]",
                    "bytes",
                    "pathlib.Path"
                ],
                "key_material": [
                    "Optional[str]",
                    "bytes",
                    "pathlib.Path"
                ]
            }
        },
        "CharacterConfiguration.cleanup": {
            "name": "cleanup",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.dev_mode": {
            "name": "dev_mode",
            "location": 638,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration._setup_node_storage": {
            "name": "_setup_node_storage",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_storage": [
                    "Callable[[None], bool]"
                ]
            }
        },
        "CharacterConfiguration.forget_nodes": {
            "name": "forget_nodes",
            "location": 659,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.destroy": {
            "name": "destroy",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.generate_parameters": {
            "name": "generate_parameters",
            "location": 668,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.produce": {
            "name": "produce",
            "location": 676,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.assemble": {
            "name": "assemble",
            "location": 683,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "BinaryIO",
                    "Optional[str]",
                    "Type[T]",
                    "bool",
                    "float"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "CharacterConfiguration.from_configuration_file": {
            "name": "from_configuration_file",
            "location": 705,
            "return": [
                "str",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "eth.rlp.transactions.BaseTransaction",
                    "bool",
                    "Optional[str]"
                ],
                "filepath": [
                    "str",
                    "eth.rlp.transactions.BaseTransaction",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "CharacterConfiguration.validate": {
            "name": "validate",
            "location": 715,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.static_payload": {
            "name": "static_payload",
            "location": 731,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 774,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.generate_filepath": {
            "name": "generate_filepath",
            "location": 792,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "List[str]",
                    "List[List[Any]]",
                    "Dict[str, str]",
                    "Iterable[Any]"
                ],
                "modifier": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "override": [
                    "List[str]",
                    "List[List[Any]]",
                    "Dict[str, str]",
                    "Iterable[Any]"
                ]
            }
        },
        "CharacterConfiguration.runtime_filepaths": {
            "name": "runtime_filepaths",
            "location": 798,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.generate_runtime_filepaths": {
            "name": "generate_runtime_filepaths",
            "location": 805,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "config_root": [
                    "str"
                ]
            }
        },
        "CharacterConfiguration._cache_runtime_filepaths": {
            "name": "_cache_runtime_filepaths",
            "location": 812,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.derive_node_power_ups": {
            "name": "derive_node_power_ups",
            "location": 819,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.initialize": {
            "name": "initialize",
            "location": 827,
            "return": [
                "str",
                "pathlib.Path",
                "type",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Callable",
                    "pathlib.Path",
                    "int"
                ],
                "key_material": [
                    "str",
                    "Callable",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "CharacterConfiguration.write_keystore": {
            "name": "write_keystore",
            "location": 854,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "int",
                    "pathlib.Path",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "key_material": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "pathlib.Path"
                ],
                "interactive": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "CharacterConfiguration.load_node_storage": {
            "name": "load_node_storage",
            "location": 872,
            "return": [
                "Union[Sequence, 'SweepFixedValues']",
                "logging.LogRecord",
                "int",
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "int",
                    "Type[tuple]",
                    "str",
                    "Callable[[None], None]",
                    "Dict[str, bool]"
                ],
                "storage_payload": [
                    "type",
                    "dict",
                    "bool"
                ],
                "federated_only": [
                    "set",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "CharacterConfiguration.configure_payment_method": {
            "name": "configure_payment_method",
            "location": 880,
            "return": [
                "int",
                "List[str]",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfiguration.serialize._stringify_paths": {
            "name": "_stringify_paths",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "d": [
                    "str",
                    "Callable[[None], bool]",
                    "Union[str, dict]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/config/characters.py": {
        "UrsulaConfiguration.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rest_host": [
                    "str",
                    "Optional[Dict]",
                    "Pattern",
                    "int",
                    "bool",
                    "Optional[bool]",
                    "Tuple[str]"
                ],
                "operator_address": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "dev_mode": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "db_filepath": [
                    "bool",
                    "bytes",
                    "float",
                    "Optional[dict]"
                ],
                "keystore_path": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "rest_port": [
                    "bool",
                    "Optional[int]",
                    "Optional[Any]",
                    "str",
                    "Callable",
                    "int"
                ],
                "certificate": [
                    "bool",
                    "bytes",
                    "float",
                    "Optional[dict]"
                ],
                "availability_check": [
                    "bytes",
                    "Callable[[str], str]",
                    "Optional[str]",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "UrsulaConfiguration.checksum_address_from_filepath": {
            "name": "checksum_address_from_filepath",
            "location": 81,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Type[Any]"
                ],
                "filepath": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "UrsulaConfiguration.generate_runtime_filepaths": {
            "name": "generate_runtime_filepaths",
            "location": 94,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "IO",
                    "Exception",
                    "List[str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "UrsulaConfiguration.generate_filepath": {
            "name": "generate_filepath",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "modifier": [
                    "Callable"
                ]
            }
        },
        "UrsulaConfiguration.static_payload": {
            "name": "static_payload",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.produce": {
            "name": "produce",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.destroy": {
            "name": "destroy",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.deserialize": {
            "name": "deserialize",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[T]",
                    "bool",
                    "pathlib.Path"
                ],
                "payload": [
                    "int",
                    "dict",
                    "bytes"
                ],
                "deserializer": [
                    "int",
                    "dict",
                    "bytes"
                ],
                "payload_label": [
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "UrsulaConfiguration.assemble": {
            "name": "assemble",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ],
                "filepath": [
                    "bytes",
                    "int",
                    "Type[object]",
                    "dict",
                    "base.Optimizer",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "AliceConfiguration.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "bool",
                    "List['cirq.Circuit']",
                    "int",
                    "float",
                    "str",
                    "Optional[dict]",
                    "Union[float, Tuple[float, float]]"
                ],
                "shares": [
                    "bool",
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "int",
                    "Sequence[cmk.base.check_utils.Service]"
                ],
                "rate": [
                    "bool",
                    "List['cirq.Circuit']",
                    "int",
                    "float",
                    "str",
                    "Optional[dict]",
                    "Union[float, Tuple[float, float]]"
                ],
                "duration": [
                    "bool",
                    "List['cirq.Circuit']",
                    "int",
                    "float",
                    "str",
                    "Optional[dict]",
                    "Union[float, Tuple[float, float]]"
                ],
                "store_policies": [
                    "int"
                ],
                "store_cards": [
                    "int"
                ]
            }
        },
        "AliceConfiguration.static_payload": {
            "name": "static_payload",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AliceConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobConfiguration.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "store_policies": [
                    "int",
                    "bool",
                    "float"
                ],
                "store_cards": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BobConfiguration.static_payload": {
            "name": "static_payload",
            "location": 251,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.produce.MockDatastoreThreadPool.callInThread": {
            "name": "callInThread",
            "location": 136,
            "return": [
                "str",
                "dss.config.Replica"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[..., T]",
                    "Callable"
                ]
            }
        }
    },
    "nucypher-development/nucypher/config/constants.py": {},
    "nucypher-development/nucypher/config/storages.py": {
        "NodeStorage.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "int",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "str"
                ],
                "character_class": [
                    "bool",
                    "int",
                    "Callable[[], int]",
                    "list",
                    "str"
                ],
                "registry": [
                    "int",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        },
        "NodeStorage.__getitem__": {
            "name": "__getitem__",
            "location": 64,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict",
                    "list",
                    "int",
                    "bool"
                ]
            }
        },
        "NodeStorage.__setitem__": {
            "name": "__setitem__",
            "location": 67,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[Any]",
                "\"Namespace\""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "list",
                    "str",
                    "set"
                ]
            }
        },
        "NodeStorage.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.source": {
            "name": "source",
            "location": 75,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.encode_node_bytes": {
            "name": "encode_node_bytes",
            "location": 79,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "node_bytes": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "NodeStorage.decode_node_bytes": {
            "name": "decode_node_bytes",
            "location": 82,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "encoded_node": [
                    "List[str]",
                    "list",
                    "bytes",
                    "str"
                ]
            }
        },
        "NodeStorage._read_common_name": {
            "name": "_read_common_name",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "str",
                    "tuple",
                    "float"
                ]
            }
        },
        "NodeStorage._write_tls_certificate": {
            "name": "_write_tls_certificate",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "int",
                    "bool"
                ],
                "certificate": [
                    "str",
                    "bool",
                    "eth.abc.ComputationAPI"
                ],
                "force": [
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "NodeStorage.store_node_certificate": {
            "name": "store_node_certificate",
            "location": 119,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "cryptography.x509.Certificate",
                    "bool",
                    "int",
                    "List[List[str]]"
                ],
                "port": [
                    "cryptography.x509.Certificate",
                    "bool",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "NodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 123,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list",
                    "bool"
                ],
                "filepath": [
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "NodeStorage.generate_certificate_filepath": {
            "name": "generate_certificate_filepath",
            "location": 128,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NodeStorage.payload": {
            "name": "payload",
            "location": 132,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.from_payload": {
            "name": "from_payload",
            "location": 137,
            "return": [
                "'NodeStorage'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "NodeStorage.initialize": {
            "name": "initialize",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.all": {
            "name": "all",
            "location": 147,
            "return": [
                "builtins.set"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ],
                "certificates_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ]
            }
        },
        "NodeStorage.get": {
            "name": "get",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "federated_only": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "NodeStorage.clear": {
            "name": "clear",
            "location": 157,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_dir": [
                    "str"
                ]
            }
        },
        "ForgetfulNodeStorage.source": {
            "name": "source",
            "location": 176,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.all": {
            "name": "all",
            "location": 180,
            "return": [
                "Set[str]",
                "set",
                "Set[int]",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ],
                "certificates_only": [
                    "SupportsInt",
                    "Sequence[Sequence[Any]]",
                    "bytes",
                    "float",
                    "str",
                    "bool",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ForgetfulNodeStorage.get": {
            "name": "get",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "decorators.CALLABLE_T",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "str"
                ],
                "host": [
                    "str",
                    "int",
                    "Union[str, List[str]]"
                ],
                "stamp": [
                    "str",
                    "int",
                    "Union[str, List[str]]"
                ],
                "certificate_only": [
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.forget": {
            "name": "forget",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.store_node_certificate": {
            "name": "store_node_certificate",
            "location": 210,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 214,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ],
                "filepath": [
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.generate_certificate_filepath": {
            "name": "generate_certificate_filepath",
            "location": 218,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "List[str]",
                    "bytes"
                ],
                "port": [
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "ForgetfulNodeStorage.clear": {
            "name": "clear",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool"
                ],
                "certificates": [
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.payload": {
            "name": "payload",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.from_payload": {
            "name": "from_payload",
            "location": 235,
            "return": [
                "Callable[..., None]",
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "payload": [
                    "dict",
                    "cdp.util.T_JSON_DICT"
                ]
            }
        },
        "ForgetfulNodeStorage.initialize": {
            "name": "initialize",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "click.Path"
                ],
                "storage_root": [
                    "pathlib.Path",
                    "_compapathlib.Path",
                    "str",
                    "Set[str]",
                    "Union[pathlib3x.Path, IO[str]]",
                    "Optional[pathlib.Path]"
                ],
                "metadata_dir": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "certificates_dir": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.source": {
            "name": "source",
            "location": 273,
            "return": [
                "str",
                "pathlib.Path",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.encode_node_bytes": {
            "name": "encode_node_bytes",
            "location": 277,
            "return": [
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "node_bytes": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.decode_node_bytes": {
            "name": "decode_node_bytes",
            "location": 280,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "encoded_node": [
                    "List[str]",
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "LocalFileBasedNodeStorage._generate_storage_filepaths": {
            "name": "_generate_storage_filepaths",
            "location": 284,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config_root": [
                    "str"
                ],
                "storage_root": [
                    "str"
                ],
                "metadata_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "certificates_dir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "LocalFileBasedNodeStorage._cache_storage_filepaths": {
            "name": "_cache_storage_filepaths",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__get_certificate_filename": {
            "name": "__get_certificate_filename",
            "location": 313,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[str, Union[int, bool]]"
                ],
                "port": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[str, Union[int, bool]]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__get_certificate_filepath": {
            "name": "__get_certificate_filepath",
            "location": 316,
            "return": [
                "str",
                "pathlib.Path",
                "path.Path",
                "Optional[Callable[[Any], None]]"
            ],
            "arguments": {
                "self": [],
                "certificate_filename": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "paradigm.catalog.Path"
                ]
            }
        },
        "LocalFileBasedNodeStorage.generate_certificate_filepath": {
            "name": "generate_certificate_filepath",
            "location": 319,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__read_node_tls_certificate": {
            "name": "__read_node_tls_certificate",
            "location": 325,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__generate_metadata_filepath": {
            "name": "__generate_metadata_filepath",
            "location": 338,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "stamp": [
                    "BinaryIO",
                    "Union[Dict[str, Any], List[Any]]",
                    "bytes",
                    "List[str]",
                    "pathlib.Path",
                    "Union[str, bytes]"
                ],
                "metadata_dir": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__read_metadata": {
            "name": "__read_metadata",
            "location": 347,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__write_metadata": {
            "name": "__write_metadata",
            "location": 363,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ],
                "node": [
                    "bytes",
                    "str",
                    "Union[str, bytes]",
                    "bool",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "LocalFileBasedNodeStorage.all": {
            "name": "all",
            "location": 373,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ],
                "certificates_only": [
                    "str",
                    "callable",
                    "Iterable[pathlib.Path]",
                    "list"
                ]
            }
        },
        "LocalFileBasedNodeStorage.get": {
            "name": "get",
            "location": 401,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "stamp": [
                    "str",
                    "pathlib.Path",
                    "dict"
                ],
                "federated_only": [
                    "bytes",
                    "str",
                    "int"
                ],
                "certificate_only": [
                    "bool"
                ]
            }
        },
        "LocalFileBasedNodeStorage.store_node_certificate": {
            "name": "store_node_certificate",
            "location": 409,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "port": [
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "force": [
                    "str",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 413,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage.clear": {
            "name": "clear",
            "location": 418,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool"
                ],
                "certificates": [
                    "bool"
                ]
            }
        },
        "LocalFileBasedNodeStorage.payload": {
            "name": "payload",
            "location": 435,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.from_payload": {
            "name": "from_payload",
            "location": 445,
            "return": [
                "int",
                "Callable[..., None]",
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "payload": [
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage.initialize": {
            "name": "initialize",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.initialize": {
            "name": "initialize",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.clear.__destroy_dir_contents": {
            "name": "__destroy_dir_contents",
            "location": 421,
            "return": [
                "int",
                "Dict[str, Any]",
                "Iterator[object]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/config/util.py": {
        "cast_paths_from": {
            "name": "cast_paths_from",
            "location": 22,
            "return": [
                "int",
                "Dict[str, Any]",
                "pathlib.Path",
                "Type[Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict"
                ],
                "payload": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Callable[[Any], str]",
                    "Dict[str, List[str]]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/config/__init__.py": {},
    "nucypher-development/nucypher/control/controllers.py": {
        "ControllerBase.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "ControllerBase._perform_action": {
            "name": "_perform_action",
            "location": 56,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "eth.abc.BlockHeaderAPI",
                    "eth.abc.AtomicDatabaseAPI",
                    "eth.db.backends.base.BaseDB"
                ],
                "request": []
            }
        },
        "InterfaceControlServer.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "logging.Logger",
                    "str",
                    "Optional[logging.Logger]",
                    "bool",
                    "Callable",
                    "logging.Formatter"
                ],
                "crash_on_error": [
                    "bool",
                    "List[int]",
                    "dict"
                ]
            }
        },
        "InterfaceControlServer._get_interfaces": {
            "name": "_get_interfaces",
            "location": 100,
            "return": [
                "str",
                "Optional[str]",
                "IO",
                "Dict[str, type]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceControlServer.make_control_transport": {
            "name": "make_control_transport",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceControlServer.handle_request": {
            "name": "handle_request",
            "location": 114,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "bool",
                    "str",
                    "Optional[Any]"
                ],
                "control_request": [
                    "bool",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "InterfaceControlServer.test_client": {
            "name": "test_client",
            "location": 118,
            "return": [
                "str",
                "Dict[str, float]",
                "Iterable[Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIController.make_control_transport": {
            "name": "make_control_transport",
            "location": 126,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIController.test_client": {
            "name": "test_client",
            "location": 129,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIController.handle_request": {
            "name": "handle_request",
            "location": 132,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "flask.Response",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str",
                    "Optional[str]",
                    "Union[str, dict]",
                    "dict"
                ],
                "request": [
                    "str",
                    "Optional[str]",
                    "Union[str, dict]",
                    "dict"
                ]
            }
        },
        "JSONRPCController.start": {
            "name": "start",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCController.test_client": {
            "name": "test_client",
            "location": 151,
            "return": [
                "app.utils.models.ModelManager",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCController.make_control_transport": {
            "name": "make_control_transport",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCController.handle_procedure_call": {
            "name": "handle_procedure_call",
            "location": 164,
            "return": [
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "control_request": []
            }
        },
        "JSONRPCController.handle_message": {
            "name": "handle_message",
            "location": 183,
            "return": [
                "bytes",
                "str",
                "int",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any"
                ]
            }
        },
        "JSONRPCController.handle_batch": {
            "name": "handle_batch",
            "location": 196,
            "return": [
                "Dict[str, float]",
                "Dict[str, Dict[str, int]]",
                "flask.Markup",
                "list",
                "constants.ReturnCode"
            ],
            "arguments": {
                "self": [],
                "control_requests": []
            }
        },
        "JSONRPCController.handle_request": {
            "name": "handle_request",
            "location": 208,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "control_request": [
                    "Dict[str, Any]",
                    "aiohttp.web.Response",
                    "requests.Response",
                    "flask.Response",
                    "str"
                ]
            }
        },
        "JSONRPCController.call_interface": {
            "name": "call_interface",
            "location": 232,
            "return": [
                "Response",
                "flask.Response",
                "\"Flow\"",
                "Optional[str]",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "dict",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "request": [
                    "dict",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "request_id": [
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "str",
                    "Mapping"
                ]
            }
        },
        "WebController.test_client": {
            "name": "test_client",
            "location": 257,
            "return": [
                "app.utils.models.ModelManager",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebController.make_control_transport": {
            "name": "make_control_transport",
            "location": 265,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebController.start": {
            "name": "start",
            "location": 272,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "bytes",
                    "str",
                    "pathlib.Path"
                ],
                "tls_key_filepath": [
                    "Union[bytes, str, None]",
                    "bytes",
                    "int",
                    "Union[bytes, str]"
                ],
                "tls_certificate_filepath": [
                    "Union[bytes, str, None]",
                    "bytes",
                    "int",
                    "Union[bytes, str]"
                ],
                "dry_run": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "WebController.__call__": {
            "name": "__call__",
            "location": 304,
            "return": [
                "dict",
                "Dict[str, str]",
                "Mapping[str, Union[int, slice]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebController.json_response_from_worker_pool_exception": {
            "name": "json_response_from_worker_pool_exception",
            "location": 308,
            "return": [
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "int",
                "dict",
                "Response"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "str",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "WebController.handle_request": {
            "name": "handle_request",
            "location": 323,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str"
                ],
                "control_request": [
                    "str",
                    "int",
                    "cmk.gui.plugins.views.utils.ABCDataSource",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "InterfaceControlServer.__init__.set_method": {
            "name": "set_method",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "InterfaceControlServer.__init__.set_method.wrapper": {
            "name": "wrapper",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "nucypher-development/nucypher/control/emitters.py": {
        "null_stream": {
            "name": "null_stream",
            "location": 32,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "StdoutEmitter.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "int",
                    "bool",
                    "float"
                ],
                "verbosity": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StdoutEmitter.clear": {
            "name": "clear",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StdoutEmitter.message": {
            "name": "message",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "int"
                ],
                "color": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "str"
                ],
                "bold": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "str"
                ],
                "verbosity": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "str"
                ]
            }
        },
        "StdoutEmitter.echo": {
            "name": "echo",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "logging.LogRecord",
                    "bytes"
                ],
                "color": [
                    "logging.LogRecord",
                    "bytes"
                ],
                "bold": [
                    "logging.LogRecord",
                    "bytes"
                ],
                "nl": [
                    "logging.LogRecord",
                    "bytes"
                ],
                "verbosity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StdoutEmitter.banner": {
            "name": "banner",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "banner": [
                    "str",
                    "bool"
                ]
            }
        },
        "StdoutEmitter.ipc": {
            "name": "ipc",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Dict[str, str]"
                ],
                "request_id": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "duration": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ]
            }
        },
        "StdoutEmitter.pretty": {
            "name": "pretty",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict",
                    "Dict[bytes, bytes]",
                    "Dict[str, float]",
                    "list",
                    "str"
                ]
            }
        },
        "StdoutEmitter.error": {
            "name": "error",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int",
                    "str",
                    "Exception",
                    "bytes"
                ]
            }
        },
        "StdoutEmitter.get_stream": {
            "name": "get_stream",
            "location": 101,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "str",
                    "bool"
                ]
            }
        },
        "JSONRPCStdoutEmitter.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCStdoutEmitter.assemble_response": {
            "name": "assemble_response",
            "location": 142,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "int"
            ],
            "arguments": {
                "response": [
                    "int",
                    "Optional[int]",
                    "MutableMapping",
                    "dict",
                    "django.http.HttpRequest",
                    "str",
                    "Optional[dict]"
                ],
                "message_id": [
                    "int",
                    "Optional[int]",
                    "MutableMapping",
                    "dict",
                    "django.http.HttpRequest",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "JSONRPCStdoutEmitter.assemble_error": {
            "name": "assemble_error",
            "location": 149,
            "return": [
                "bytes",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "int",
                    "str",
                    "dict",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "code": [
                    "bytes",
                    "int",
                    "str",
                    "dict",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "data": [
                    "bytes",
                    "int",
                    "str",
                    "dict",
                    "List[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "JSONRPCStdoutEmitter.__serialize": {
            "name": "__serialize",
            "location": 157,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "str"
                ],
                "delimiter": [
                    "str",
                    "bytes",
                    "BinaryIO"
                ],
                "as_bytes": [
                    "int",
                    "bool",
                    "bytes",
                    "bytearray",
                    "str"
                ]
            }
        },
        "JSONRPCStdoutEmitter.__write": {
            "name": "__write",
            "location": 173,
            "return": [
                "str",
                "float",
                "bool",
                "Iterator[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "JSONRPCStdoutEmitter.clear": {
            "name": "clear",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCStdoutEmitter.message": {
            "name": "message",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "JSONRPCStdoutEmitter.echo": {
            "name": "echo",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCStdoutEmitter.banner": {
            "name": "banner",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "banner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "JSONRPCStdoutEmitter.ipc": {
            "name": "ipc",
            "location": 194,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "int",
                    "dict"
                ],
                "request_id": [
                    "str",
                    "dict",
                    "bytes",
                    "int"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "JSONRPCStdoutEmitter.error": {
            "name": "error",
            "location": 205,
            "return": [
                "Sequence[int]",
                "float",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "JSONRPCStdoutEmitter.get_stream": {
            "name": "get_stream",
            "location": 222,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebEmitter.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "int",
                    "Union[float, Tuple[float, float]]",
                    "Callable"
                ],
                "crash_on_error": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "WebEmitter._log_exception": {
            "name": "_log_exception",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Union[str, List[str]]",
                    "Dict[str, str]",
                    "int"
                ],
                "error_message": [
                    "int",
                    "str",
                    "Optional[Callable]",
                    "bool"
                ],
                "log_level": [
                    "int",
                    "bool",
                    "Callable",
                    "Union[float, int]"
                ],
                "response_code": [
                    "int",
                    "str",
                    "Optional[Callable]",
                    "bool"
                ]
            }
        },
        "WebEmitter.assemble_response": {
            "name": "assemble_response",
            "location": 254,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "int"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "WebEmitter.exception": {
            "name": "exception",
            "location": 259,
            "return": [
                "flask.Response",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ],
                "error_message": [
                    "int",
                    "str",
                    "list",
                    "Optional[int]"
                ],
                "log_level": [
                    "int",
                    "str",
                    "list",
                    "Optional[int]"
                ],
                "response_code": [
                    "Optional[\"ShippingInfo\"]",
                    "Optional[\"PaymentInfo\"]",
                    "list"
                ]
            }
        },
        "WebEmitter.exception_with_response": {
            "name": "exception_with_response",
            "location": 272,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, str]",
                "int",
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "json_error_response": [
                    "str",
                    "Union[str, dict]",
                    "Optional[str]",
                    "dict",
                    "List[str]",
                    "bool"
                ],
                "e": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ],
                "error_message": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ],
                "response_code": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[int, dict]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "log_level": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "WebEmitter.respond": {
            "name": "respond",
            "location": 288,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "json_response": [
                    "dict",
                    "flask.Response",
                    "aiohttp.web.Response",
                    "pyramid.response.Response"
                ]
            }
        },
        "WebEmitter.get_stream": {
            "name": "get_stream",
            "location": 295,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/control/interfaces.py": {
        "attach_schema": {
            "name": "attach_schema",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "attach_schema.callable": {
            "name": "callable",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "ControlInterface.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "implementer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ControlInterface.connect_cli": {
            "name": "connect_cli",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "action": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "exclude": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "attach_schema.callable.wrapped": {
            "name": "wrapped",
            "location": 28,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "ControlInterface.connect_cli.callable": {
            "name": "callable",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "ControlInterface.connect_cli.callable.wrapped": {
            "name": "wrapped",
            "location": 59,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, int]",
                "dict",
                "List[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/nucypher/control/__init__.py": {},
    "nucypher-development/nucypher/control/specifications/base.py": {
        "BaseSchema.handle_error": {
            "name": "handle_error",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error": [
                    "int",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Optional[int]"
                ],
                "data": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "many": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "nucypher-development/nucypher/control/specifications/exceptions.py": {},
    "nucypher-development/nucypher/control/specifications/__init__.py": {},
    "nucypher-development/nucypher/control/specifications/fields/base.py": {
        "BaseField.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StringList.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StringList._deserialize": {
            "name": "_deserialize",
            "location": 55,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "attr": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Callable",
                    "T"
                ],
                "data": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "PositiveInteger._validate": {
            "name": "_validate",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Base64BytesRepresentation._serialize": {
            "name": "_serialize",
            "location": 73,
            "return": [
                "int",
                "bytes",
                "Union[bytes, bytearray]",
                "bool",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Base64BytesRepresentation._deserialize": {
            "name": "_deserialize",
            "location": 77,
            "return": [
                "int",
                "bytes",
                "Union[bytes, bytearray]",
                "bool",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Union[str, bytes]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/control/specifications/fields/__init__.py": {},
    "nucypher-development/nucypher/crypto/constants.py": {},
    "nucypher-development/nucypher/crypto/keypairs.py": {
        "Keypair.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "bytes",
                    "str"
                ],
                "public_key": [
                    "bytes",
                    "Tuple[int, int]",
                    "int"
                ],
                "generate_keys_if_needed": [
                    "bool",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "Keypair.fingerprint": {
            "name": "fingerprint",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecryptingKeypair.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecryptingKeypair.decrypt_message_kit": {
            "name": "decrypt_message_kit",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message_kit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DecryptingKeypair.decrypt_kfrag": {
            "name": "decrypt_kfrag",
            "location": 111,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "ekfrag": [
                    "str",
                    "List[float]",
                    "List[str]"
                ],
                "hrac": [
                    "str",
                    "List[float]",
                    "List[str]"
                ],
                "publisher_verifying_key": [
                    "str",
                    "List[float]",
                    "List[str]"
                ]
            }
        },
        "DecryptingKeypair.decrypt_treasure_map": {
            "name": "decrypt_treasure_map",
            "location": 114,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "etmap": [
                    "str",
                    "bytes",
                    "Tuple[int]",
                    "bool"
                ],
                "publisher_verifying_key": [
                    "str",
                    "bytes",
                    "Tuple[int]",
                    "bool"
                ]
            }
        },
        "SigningKeypair.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SigningKeypair.sign": {
            "name": "sign",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SigningKeypair.get_signature_stamp": {
            "name": "get_signature_stamp",
            "location": 136,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "HostingKeypair.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "bytes",
                    "Optional[bytes]"
                ],
                "checksum_address": [
                    "int",
                    "str",
                    "dict",
                    "bytes",
                    "bool"
                ],
                "private_key": [
                    "bytes",
                    "bool",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "risesdk.protocol.primitives.Amount"
                ],
                "certificate": [
                    "str",
                    "bytes",
                    "Union[bytes, str]",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]"
                ],
                "certificate_filepath": [
                    "str",
                    "Union[bytes, str]",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]",
                    "pathlib.Path",
                    "Callable[[str], str]"
                ],
                "generate_certificate": [
                    "bool",
                    "Iterable[Tuple[str, Any]]",
                    "Sequence[str]",
                    "str",
                    "int"
                ]
            }
        },
        "HostingKeypair.get_deployer": {
            "name": "get_deployer",
            "location": 189,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "rest_app": [
                    "str",
                    "bool",
                    "tuple",
                    "int"
                ],
                "port": [
                    "str",
                    "bool",
                    "tuple",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/nucypher/crypto/keystore.py": {
        "_assemble_keystore": {
            "name": "_assemble_keystore",
            "location": 82,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "encrypted_secret": [
                    "int",
                    "str",
                    "Mapping[str, pathlib.Path]"
                ],
                "password_salt": [
                    "int",
                    "str",
                    "Mapping[str, pathlib.Path]"
                ],
                "wrapper_salt": [
                    "int",
                    "str",
                    "Mapping[str, pathlib.Path]"
                ]
            }
        },
        "_read_keystore": {
            "name": "_read_keystore",
            "location": 93,
            "return": [
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "os.PathLike"
                ],
                "deserializer": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_write_keystore": {
            "name": "_write_keystore",
            "location": 102,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "payload": [
                    "str",
                    "pathlib.Path",
                    "Optional[Union[str, pathlib.Path]]",
                    "int"
                ],
                "serializer": [
                    "bool",
                    "str",
                    "Dict[int, bool]",
                    "pathlib.Path"
                ]
            }
        },
        "_serialize_keystore": {
            "name": "_serialize_keystore",
            "location": 134,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "payload": [
                    "Mapping[str, object]",
                    "Iterable[int]",
                    "bool"
                ]
            }
        },
        "_deserialize_keystore": {
            "name": "_deserialize_keystore",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "payload": [
                    "int",
                    "str"
                ]
            }
        },
        "generate_keystore_filepath": {
            "name": "generate_keystore_filepath",
            "location": 159,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[\"CustomerReference\"]"
                ],
                "id": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[\"CustomerReference\"]"
                ]
            }
        },
        "validate_keystore_password": {
            "name": "validate_keystore_password",
            "location": 165,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "password": [
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "validate_keystore_filename": {
            "name": "validate_keystore_filename",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_parse_path": {
            "name": "_parse_path",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "cerulean.path.Path"
                ]
            }
        },
        "_derive_hosting_power": {
            "name": "_derive_hosting_power",
            "location": 218,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "host": [
                    "bytes",
                    "str"
                ],
                "private_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Keystore.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "keystore_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Dict[str, pathlib.Path]"
                ]
            }
        },
        "Keystore.__decrypt_keystore": {
            "name": "__decrypt_keystore",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "Keystore.__save": {
            "name": "__save",
            "location": 276,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "secret": [
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "Mapping[str, str]",
                    "Dict[Any, list]",
                    "bool",
                    "dict"
                ],
                "password": [
                    "str"
                ],
                "keystore_dir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Keystore.load": {
            "name": "load",
            "location": 315,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[[str], bool]",
                    "int"
                ],
                "id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "keystore_dir": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "Keystore.import_secure": {
            "name": "import_secure",
            "location": 321,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "pathlib.Path"
                ],
                "key_material": [
                    "str",
                    "int",
                    "BinaryIO",
                    "bool",
                    "bytes",
                    "Union[bytes, str, None]"
                ],
                "password": [
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "keystore_dir": [
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "Keystore.restore": {
            "name": "restore",
            "location": 337,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path"
                ],
                "words": [
                    "str",
                    "bytes",
                    "int"
                ],
                "password": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "keystore_dir": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "Keystore.generate": {
            "name": "generate",
            "location": 346,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "pathlib.Path"
                ],
                "keystore_dir": [
                    "str",
                    "pathlib.Path"
                ],
                "interactive": [
                    "str",
                    "bool"
                ]
            }
        },
        "Keystore._confirm_generate": {
            "name": "_confirm_generate",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "__words": []
            }
        },
        "Keystore.id": {
            "name": "id",
            "location": 388,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keystore.is_unlocked": {
            "name": "is_unlocked",
            "location": 392,
            "return": [
                "str",
                "Dict[str, str]",
                "dict",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodSupervisionType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keystore.lock": {
            "name": "lock",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keystore.unlock": {
            "name": "unlock",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "norfs.fs.base.Path",
                    "dict"
                ]
            }
        },
        "Keystore.derive_crypto_power": {
            "name": "derive_crypto_power",
            "location": 401,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "power_class": [
                    "Optional[Any]",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/crypto/passwords.py": {
        "derive_key_material_from_password": {
            "name": "derive_key_material_from_password",
            "location": 34,
            "return": [
                "str",
                "bool",
                "list",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "password": [
                    "str",
                    "int",
                    "Mapping[str, str]",
                    "Union[str, Tuple[str, ...]]"
                ],
                "salt": [
                    "str",
                    "int",
                    "Mapping[str, str]",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "derive_wrapping_key_from_key_material": {
            "name": "derive_wrapping_key_from_key_material",
            "location": 75,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "key_material": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "int"
                ],
                "salt": [
                    "str",
                    "bytes",
                    "Union[str, bytes]",
                    "int"
                ]
            }
        },
        "secret_box_encrypt": {
            "name": "secret_box_encrypt",
            "location": 94,
            "return": [
                "int",
                "bytearray",
                "Optional[str]"
            ],
            "arguments": {
                "key_material": [
                    "str",
                    "bytes"
                ],
                "salt": [
                    "str",
                    "bytes"
                ],
                "plaintext": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "secret_box_decrypt": {
            "name": "secret_box_decrypt",
            "location": 101,
            "return": [
                "int",
                "bytearray",
                "Optional[str]"
            ],
            "arguments": {
                "key_material": [
                    "str",
                    "bytes"
                ],
                "salt": [
                    "str",
                    "bytes"
                ],
                "ciphertext": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/nucypher/crypto/powers.py": {
        "CryptoPower.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "power_ups": [
                    "Optional[str]",
                    "list",
                    "str",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "CryptoPower.__contains__": {
            "name": "__contains__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "CryptoPower.consume_power_up": {
            "name": "consume_power_up",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "power_up": [
                    "eth.abc.MiningChainAPI",
                    "Optional[Callable]"
                ]
            }
        },
        "CryptoPower.power_ups": {
            "name": "power_ups",
            "location": 85,
            "return": [
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "power_up_class": [
                    "bool",
                    "Hashable",
                    "Set[str]",
                    "Type[T]",
                    "Dict[str, Type]"
                ]
            }
        },
        "CryptoPowerUp.activate": {
            "name": "activate",
            "location": 98,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "signer": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "cache": [
                    "str"
                ]
            }
        },
        "TransactingPower.__enter__": {
            "name": "__enter__",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.__exit__": {
            "name": "__exit__",
            "location": 138,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "TransactingPower.__eq__": {
            "name": "__eq__",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "Union[str, int, float]",
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "TransactingPower.account": {
            "name": "account",
            "location": 152,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.is_device": {
            "name": "is_device",
            "location": 156,
            "return": [
                "int",
                "Iterable[Any]",
                "Optional[str]",
                "bool",
                "List[List[str]]",
                "Match"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.activate": {
            "name": "activate",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "TransactingPower.lock_account": {
            "name": "lock_account",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.unlock": {
            "name": "unlock",
            "location": 172,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "dict"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "TransactingPower.sign_message": {
            "name": "sign_message",
            "location": 180,
            "return": [
                "eth.chains.base.MiningChain",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int"
                ]
            }
        },
        "TransactingPower.sign_transaction": {
            "name": "sign_transaction",
            "location": 188,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "bool",
                    "Type[T]",
                    "Mapping[Any, Any]",
                    "Optional[Any]"
                ]
            }
        },
        "KeyPairBasedPower.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "bytes",
                    "umbral.curvebn.CurveBN",
                    "umbral.keys.UmbralPrivateKey",
                    "BinaryIO"
                ],
                "keypair": [
                    "bytes",
                    "str",
                    "umbral.keys.UmbralPrivateKey"
                ]
            }
        },
        "KeyPairBasedPower.__getattr__": {
            "name": "__getattr__",
            "location": 220,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict"
                ]
            }
        },
        "KeyPairBasedPower.public_key": {
            "name": "public_key",
            "location": 230,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatingPower.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret_key_factory": [
                    "str",
                    "bytes",
                    "Sequence[str]",
                    "Set[str]",
                    "dict"
                ]
            }
        },
        "DelegatingPower._get_privkey_from_label": {
            "name": "_get_privkey_from_label",
            "location": 260,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bytes",
                    "str",
                    "Union[bytes, str]",
                    "Optional[str]",
                    "Hashable"
                ]
            }
        },
        "DelegatingPower.get_pubkey_from_label": {
            "name": "get_pubkey_from_label",
            "location": 263,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Set[str]",
                    "Optional[float]"
                ]
            }
        },
        "DelegatingPower.generate_kfrags": {
            "name": "generate_kfrags",
            "location": 266,
            "return": [
                "bool",
                "Dict[str, str]",
                "list",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "bob_pubkey_enc": [
                    "List[int]",
                    "Callable[[str], int]",
                    "int"
                ],
                "signer": [
                    "List[int]",
                    "Callable[[str], int]",
                    "int"
                ],
                "label": [
                    "List[List[str]]",
                    "Optional[List[Any]]",
                    "Tuple[int]",
                    "str",
                    "slice",
                    "List[Tuple[float, float]]"
                ],
                "threshold": [
                    "List[int]",
                    "Callable[[str], int]",
                    "int"
                ],
                "shares": [
                    "List[int]",
                    "Callable[[str], int]",
                    "int"
                ]
            }
        },
        "DelegatingPower.get_decrypting_power_from_label": {
            "name": "get_decrypting_power_from_label",
            "location": 294,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, int]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "TLSHostingPower.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "public_certificate": [
                    "int",
                    "str",
                    "float"
                ],
                "public_certificate_filepath": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/crypto/signing.py": {
        "SignatureStamp.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verifying_key": [
                    "bytes",
                    "Union[bytes, umbral.keys.UmbralPublicKey]",
                    "str"
                ],
                "signer": [
                    "Mapping[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "SignatureStamp.__bytes__": {
            "name": "__bytes__",
            "location": 32,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__hash__": {
            "name": "__hash__",
            "location": 38,
            "return": [
                "bytes",
                "dict",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "SignatureStamp.__add__": {
            "name": "__add__",
            "location": 44,
            "return": [
                "str",
                "Tuple[float, float]",
                "List[str]",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "List[str]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str",
                    "umbral.curvebn.CurveBN"
                ]
            }
        },
        "SignatureStamp.__radd__": {
            "name": "__radd__",
            "location": 47,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "SignatureStamp.__len__": {
            "name": "__len__",
            "location": 50,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__bool__": {
            "name": "__bool__",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.as_umbral_signer": {
            "name": "as_umbral_signer",
            "location": 56,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.as_umbral_pubkey": {
            "name": "as_umbral_pubkey",
            "location": 59,
            "return": [
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.fingerprint": {
            "name": "fingerprint",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrangerStamp.__call__": {
            "name": "__call__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/crypto/tls.py": {
        "_write_tls_certificate": {
            "name": "_write_tls_certificate",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "certificate": [
                    "float",
                    "List[List[int]]",
                    "int"
                ],
                "full_filepath": [
                    "str",
                    "pathlib.Path"
                ],
                "force": [
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "_read_tls_certificate": {
            "name": "_read_tls_certificate",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "generate_self_signed_certificate": {
            "name": "generate_self_signed_certificate",
            "location": 63,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "host": [
                    "type"
                ],
                "private_key": [
                    "bytes",
                    "List[float]"
                ],
                "days_valid": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "curve": [
                    "dict",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "nucypher-development/nucypher/crypto/utils.py": {
        "canonical_address_from_umbral_key": {
            "name": "canonical_address_from_umbral_key",
            "location": 36,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "public_key": [
                    "bytes",
                    "umbral.poinPoint",
                    "str"
                ]
            }
        },
        "secure_random": {
            "name": "secure_random",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "num_bytes": [
                    "int",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "secure_random_range": {
            "name": "secure_random_range",
            "location": 60,
            "return": [
                "int",
                "Dict[str, str]",
                "float"
            ],
            "arguments": {
                "min": [
                    "int",
                    "Dict[str, str]",
                    "float"
                ],
                "max": [
                    "int",
                    "Dict[str, str]",
                    "float"
                ]
            }
        },
        "keccak_digest": {
            "name": "keccak_digest",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sha256_digest": {
            "name": "sha256_digest",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "recover_address_eip_191": {
            "name": "recover_address_eip_191",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ],
                "signature": [
                    "str",
                    "bytes",
                    "Optional[dict]",
                    "int",
                    "bool"
                ]
            }
        },
        "verify_eip_191": {
            "name": "verify_eip_191",
            "location": 120,
            "return": [
                "bool",
                "str",
                "tuple"
            ],
            "arguments": {
                "address": [
                    "str"
                ],
                "message": [
                    "bytes",
                    "str",
                    "raiden.messages.Message"
                ],
                "signature": [
                    "bytes",
                    "str",
                    "raiden.messages.Message"
                ]
            }
        }
    },
    "nucypher-development/nucypher/crypto/__init__.py": {},
    "nucypher-development/nucypher/datastore/base.py": {
        "DatastoreRecord.__new__": {
            "name": "__new__",
            "location": 55,
            "return": [
                "float",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "str",
                    "Callable[..., T]"
                ]
            }
        },
        "DatastoreRecord.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_transaction": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "record_id": [
                    "int"
                ],
                "writeable": [
                    "Dict[str, List[Any]]",
                    "int",
                    "str",
                    "dict",
                    "List[float]"
                ]
            }
        },
        "DatastoreRecord.__setattr__": {
            "name": "__setattr__",
            "location": 69,
            "return": [
                "str",
                "int",
                "type",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Union[str, int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DatastoreRecord.__getattr__": {
            "name": "__getattr__",
            "location": 112,
            "return": [
                "int",
                "tuple",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "DatastoreRecord.__retrieve_raw_record": {
            "name": "__retrieve_raw_record",
            "location": 135,
            "return": [
                "bool",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "record_field": [
                    "str",
                    "Union[str, Pattern[str]]",
                    "Match[str]"
                ]
            }
        },
        "DatastoreRecord.__write_raw_record": {
            "name": "__write_raw_record",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record_field": [
                    "str",
                    "ImportError",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "DatastoreRecord.__delete_record": {
            "name": "__delete_record",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record_field": [
                    "str",
                    "Callable",
                    "type",
                    "List[str]"
                ]
            }
        },
        "DatastoreRecord.__get_record_field": {
            "name": "__get_record_field",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "bool"
                ]
            }
        },
        "DatastoreRecord.__eq__": {
            "name": "__eq__",
            "location": 179,
            "return": [
                "bool",
                "int",
                "dict",
                "Dict[str, Any]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union['FixedPoint', int]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "DatastoreRecord.__hash__": {
            "name": "__hash__",
            "location": 192,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatastoreRecord.delete": {
            "name": "delete",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/datastore/datastore.py": {
        "DatastoreKey.from_bytestring": {
            "name": "from_bytestring",
            "location": 51,
            "return": [
                "dict",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Counter[str]"
                ],
                "key_bytestring": [
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "DatastoreKey.compare_key": {
            "name": "compare_key",
            "location": 58,
            "return": [
                "bool",
                "Callable[[KT], VT]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "key_bytestring": [
                    "str",
                    "Union[str, int]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Datastore.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Datastore.describe": {
            "name": "describe",
            "location": 98,
            "return": [
                "typing.Type['DatastoreRecord']"
            ],
            "arguments": {
                "self": [],
                "record_type": [
                    "str",
                    "Union[None, int, str]",
                    "Optional[List[str]]"
                ],
                "record_id": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "writeable": [
                    "str",
                    "int"
                ]
            }
        },
        "Datastore.query_by": {
            "name": "query_by",
            "location": 138,
            "return": [
                "DatastoreQueryResult"
            ],
            "arguments": {
                "self": [],
                "record_type": [
                    "dict",
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "filter_func": [
                    "str",
                    "bytes",
                    "tuple",
                    "bool",
                    "dict"
                ],
                "filter_field": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "writeable": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "nevergrad.common.Union[str, pathlib.Path]",
                    "dict"
                ]
            }
        }
    },
    "nucypher-development/nucypher/datastore/models.py": {},
    "nucypher-development/nucypher/datastore/queries.py": {
        "unwrap_records": {
            "name": "unwrap_records",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "get_reencryption_requests": {
            "name": "get_reencryption_requests",
            "location": 48,
            "return": [
                "int",
                "Dict[str, bool]",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm"
            ],
            "arguments": {
                "ds": [
                    "str",
                    "Optional[str]",
                    "Match[str]"
                ]
            }
        },
        "unwrap_records.wrapper": {
            "name": "wrapper",
            "location": 37,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/nucypher/datastore/__init__.py": {},
    "nucypher-development/nucypher/network/exceptions.py": {},
    "nucypher-development/nucypher/network/middleware.py": {
        "NucypherMiddlewareClient.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "bool",
                    "float"
                ],
                "eth_provider_uri": [
                    "int",
                    "bool",
                    "float"
                ],
                "storage": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "NucypherMiddlewareClient.get_certificate": {
            "name": "get_certificate",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "port": [
                    "str",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "timeout": [
                    "str",
                    "int"
                ],
                "retry_attempts": [
                    "int",
                    "bool"
                ],
                "retry_rate": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ],
                "current_attempt": [
                    "int",
                    "str"
                ]
            }
        },
        "NucypherMiddlewareClient.response_cleaner": {
            "name": "response_cleaner",
            "location": 90,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "response": []
            }
        },
        "NucypherMiddlewareClient.verify_and_parse_node_or_host_and_port": {
            "name": "verify_and_parse_node_or_host_and_port",
            "location": 93,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_or_sprout": [
                    "float",
                    "dict",
                    "list"
                ],
                "host": [
                    "int"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "NucypherMiddlewareClient.parse_node_or_host_and_port": {
            "name": "parse_node_or_host_and_port",
            "location": 106,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "str"
                ]
            }
        },
        "NucypherMiddlewareClient.invoke_method": {
            "name": "invoke_method",
            "location": 115,
            "return": [
                "dict",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "NucypherMiddlewareClient.clean_params": {
            "name": "clean_params",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_kwargs": [
                    "Optional[django.http.HttpRequest]",
                    "django.http.HttpRequest",
                    "Exception",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "NucypherMiddlewareClient.node_information": {
            "name": "node_information",
            "location": 128,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "List[Callable]",
                    "Dict[str, Any]"
                ],
                "port": [
                    "int",
                    "List[Callable]",
                    "Dict[str, Any]"
                ]
            }
        },
        "NucypherMiddlewareClient.__getattr__": {
            "name": "__getattr__",
            "location": 136,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[str], T]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "NucypherMiddlewareClient._execute_method": {
            "name": "_execute_method",
            "location": 185,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "dict",
                "Dict[str, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node_or_sprout": [
                    "int",
                    "Union[int, str]",
                    "str"
                ],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "method": [
                    "str",
                    "int"
                ],
                "endpoint": [
                    "str",
                    "int"
                ]
            }
        },
        "NucypherMiddlewareClient.node_selector": {
            "name": "node_selector",
            "location": 219,
            "return": [
                "str",
                "Iterable[Any]",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "NucypherMiddlewareClient.__len__": {
            "name": "__len__",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestMiddleware.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "pathlib.Path",
                    "str",
                    "bool"
                ],
                "eth_provider_uri": [
                    "int",
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "RestMiddleware.request_revocation": {
            "name": "request_revocation",
            "location": 262,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "bytes",
                    "Dict[str, List[Any]]",
                    "dict"
                ],
                "revocation": [
                    "bytes",
                    "Dict[str, List[Any]]",
                    "dict"
                ]
            }
        },
        "RestMiddleware.reencrypt": {
            "name": "reencrypt",
            "location": 271,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "Optional[int]",
                    "django.http.HttpRequest",
                    "int"
                ],
                "reencryption_request_bytes": [
                    "str",
                    "Optional[int]",
                    "django.http.HttpRequest",
                    "int"
                ]
            }
        },
        "RestMiddleware.check_availability": {
            "name": "check_availability",
            "location": 280,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str"
                ],
                "responder": [
                    "str"
                ]
            }
        },
        "RestMiddleware.ping": {
            "name": "ping",
            "location": 288,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "RestMiddleware.get_nodes_via_rest": {
            "name": "get_nodes_via_rest",
            "location": 292,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bytes",
                    "eth.abc.SignedTransactionAPI",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "fleet_state_checksum": [
                    "bool",
                    "Iterable[eth.abc.BlockHeaderAPI]",
                    "int",
                    "django.http.HttpRequest",
                    "Dict[int, dict]"
                ],
                "announce_nodes": [
                    "bool",
                    "Iterable[eth.abc.BlockHeaderAPI]",
                    "int",
                    "django.http.HttpRequest",
                    "Dict[int, dict]"
                ]
            }
        },
        "NucypherMiddlewareClient.__getattr__.method_wrapper": {
            "name": "method_wrapper",
            "location": 141,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "float"
            ],
            "arguments": {
                "path": [
                    "int",
                    "pathlib.Path",
                    "float",
                    "str"
                ],
                "node_or_sprout": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int",
                    "pathlib.Path"
                ],
                "host": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "TextIO",
                    "set",
                    "bool"
                ],
                "port": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "TextIO",
                    "set",
                    "bool"
                ]
            }
        },
        "RestMiddleware.Unreachable.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "RestMiddleware.UnexpectedResponse.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ],
                "status": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "RestMiddleware.NotFound.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RestMiddleware.BadRequest.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "RestMiddleware.PaymentRequired.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RestMiddleware.Unauthorized.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/network/nodes.py": {
        "NodeSprout.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "NodeSprout.__eq__": {
            "name": "__eq__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSprout.__hash__": {
            "name": "__hash__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.checksum_address": {
            "name": "checksum_address",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.canonical_address": {
            "name": "canonical_address",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.nickname": {
            "name": "nickname",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.rest_interface": {
            "name": "rest_interface",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.rest_url": {
            "name": "rest_url",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.metadata": {
            "name": "metadata",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.verifying_key": {
            "name": "verifying_key",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.encrypting_key": {
            "name": "encrypting_key",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.operator_signature_from_metadata": {
            "name": "operator_signature_from_metadata",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.timestamp": {
            "name": "timestamp",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.stamp": {
            "name": "stamp",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.domain": {
            "name": "domain",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.finish": {
            "name": "finish",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.mature": {
            "name": "mature",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoveryCanceller.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoveryCanceller.__call__": {
            "name": "__call__",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "learning_deferred": []
            }
        },
        "Learner.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "domain": [],
                "node_class": [],
                "network_middleware": [],
                "start_learning_now": [],
                "learn_on_same_thread": [],
                "known_nodes": [],
                "seed_nodes": [],
                "node_storage": [],
                "save_metadata": [],
                "abort_on_learning_error": [],
                "lonely": [],
                "verify_node_bonding": [],
                "include_self_in_the_state": []
            }
        },
        "Learner.known_nodes": {
            "name": "known_nodes",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.load_seednodes": {
            "name": "load_seednodes",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "read_storage": [],
                "record_fleet_state": []
            }
        },
        "Learner.read_nodes_from_storage": {
            "name": "read_nodes_from_storage",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.remember_node": {
            "name": "remember_node",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "force_verification_recheck": [],
                "record_fleet_state": [],
                "eager": []
            }
        },
        "Learner.start_learning_loop": {
            "name": "start_learning_loop",
            "location": 494,
            "return": [],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "Learner.stop_learning_loop": {
            "name": "stop_learning_loop",
            "location": 511,
            "return": [],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "Learner.handle_learning_errors": {
            "name": "handle_learning_errors",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "failure": []
            }
        },
        "Learner._crash_gracefully": {
            "name": "_crash_gracefully",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "failure": []
            }
        },
        "Learner.select_teacher_nodes": {
            "name": "select_teacher_nodes",
            "location": 555,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.cycle_teacher_node": {
            "name": "cycle_teacher_node",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.current_teacher_node": {
            "name": "current_teacher_node",
            "location": 573,
            "return": [],
            "arguments": {
                "self": [],
                "cycle": []
            }
        },
        "Learner.learn_about_nodes_now": {
            "name": "learn_about_nodes_now",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "force": []
            }
        },
        "Learner.keep_learning_about_nodes": {
            "name": "keep_learning_about_nodes",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.block_until_number_of_known_nodes_is": {
            "name": "block_until_number_of_known_nodes_is",
            "location": 622,
            "return": [],
            "arguments": {
                "self": [],
                "number_of_nodes_to_know": [],
                "timeout": [],
                "learn_on_this_thread": [],
                "eager": []
            }
        },
        "Learner.block_until_specific_nodes_are_known": {
            "name": "block_until_specific_nodes_are_known",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "addresses": [],
                "timeout": [],
                "allow_missing": [],
                "learn_on_this_thread": []
            }
        },
        "Learner._adjust_learning": {
            "name": "_adjust_learning",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "node_list": []
            }
        },
        "Learner.network_bootstrap": {
            "name": "network_bootstrap",
            "location": 724,
            "return": [],
            "arguments": {
                "self": [],
                "node_list": []
            }
        },
        "Learner.get_nodes_by_ids": {
            "name": "get_nodes_by_ids",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "node_ids": []
            }
        },
        "Learner.write_node_metadata": {
            "name": "write_node_metadata",
            "location": 741,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "serializer": []
            }
        },
        "Learner.verify_from": {
            "name": "verify_from",
            "location": 744,
            "return": [],
            "arguments": {
                "self": [],
                "stranger": [],
                "message": [],
                "signature": []
            }
        },
        "Learner.learn_from_teacher_node": {
            "name": "learn_from_teacher_node",
            "location": 762,
            "return": [],
            "arguments": {
                "self": [],
                "eager": [],
                "canceller": []
            }
        },
        "Teacher.__init__": {
            "name": "__init__",
            "location": 956,
            "return": [],
            "arguments": {
                "self": [],
                "domain": [],
                "certificate": [],
                "certificate_filepath": []
            }
        },
        "Teacher.set_cert_storage_function": {
            "name": "set_cert_storage_function",
            "location": 999,
            "return": [],
            "arguments": {
                "cls": [],
                "node_storage_function": []
            }
        },
        "Teacher.mature": {
            "name": "mature",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.set_federated_mode": {
            "name": "set_federated_mode",
            "location": 1007,
            "return": [],
            "arguments": {
                "cls": [],
                "federated_only": []
            }
        },
        "Teacher.seed_node_metadata": {
            "name": "seed_node_metadata",
            "location": 1014,
            "return": [],
            "arguments": {
                "self": [],
                "as_teacher_uri": []
            }
        },
        "Teacher.bytestring_of_known_nodes": {
            "name": "bytestring_of_known_nodes",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher._operator_is_bonded": {
            "name": "_operator_is_bonded",
            "location": 1033,
            "return": [],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "Teacher._staking_provider_is_really_staking": {
            "name": "_staking_provider_is_really_staking",
            "location": 1045,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "eth_provider_uri": []
            }
        },
        "Teacher.validate_operator": {
            "name": "validate_operator",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "eth_provider_uri": []
            }
        },
        "Teacher.validate_metadata_signature": {
            "name": "validate_metadata_signature",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.validate_metadata": {
            "name": "validate_metadata",
            "location": 1100,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "eth_provider_uri": []
            }
        },
        "Teacher.verify_node": {
            "name": "verify_node",
            "location": 1117,
            "return": [],
            "arguments": {
                "self": [],
                "network_middleware_client": [],
                "registry": [],
                "eth_provider_uri": [],
                "certificate_filepath": [],
                "force": []
            }
        },
        "Learner.keep_learning_about_nodes._discover_or_abort": {
            "name": "_discover_or_abort",
            "location": 606,
            "return": [],
            "arguments": {
                "_first_result": []
            }
        }
    },
    "nucypher-development/nucypher/network/protocols.py": {
        "parse_node_uri": {
            "name": "parse_node_uri",
            "location": 27,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "InterfaceInfo.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "InterfaceInfo.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.uri": {
            "name": "uri",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.formal_uri": {
            "name": "formal_uri",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/network/resources.py": {
        "get_static_resources": {
            "name": "get_static_resources",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/nucypher/network/retrieval.py": {
        "RetrievalPlan.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "treasure_map": [
                    "Tuple[float, float, float]",
                    "int",
                    "str",
                    "List[str]"
                ],
                "retrieval_kits": [
                    "str",
                    "bool"
                ]
            }
        },
        "RetrievalPlan.get_work_order": {
            "name": "get_work_order",
            "location": 88,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetrievalPlan.update": {
            "name": "update",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "work_order": [],
                "cfrags": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, int]"
                ]
            }
        },
        "RetrievalPlan.is_complete": {
            "name": "is_complete",
            "location": 116,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetrievalPlan.results": {
            "name": "results",
            "location": 124,
            "return": [
                "Mapping[str, Any]",
                "nucypher.characters.control.emitters.StdoutEmitter"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetrievalWorkOrder.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "capsules": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RetrievalClient.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "learner": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RetrievalClient._ensure_ursula_availability": {
            "name": "_ensure_ursula_availability",
            "location": 150,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "treasure_map": [
                    "int",
                    "bytearray",
                    "float"
                ],
                "timeout": [
                    "float",
                    "bool",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "RetrievalClient._request_reencryption": {
            "name": "_request_reencryption",
            "location": 185,
            "return": [
                "List[int]",
                "bool",
                "Tuple[int, int]",
                "str",
                "int",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "bytes",
                    "bool"
                ],
                "reencryption_request": [
                    "bytes",
                    "bool"
                ],
                "alice_verifying_key": [
                    "str",
                    "bytes"
                ],
                "policy_encrypting_key": [
                    "str",
                    "bytes"
                ],
                "bob_encrypting_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RetrievalClient.retrieve_cfrags": {
            "name": "retrieve_cfrags",
            "location": 250,
            "return": [
                "str",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "treasure_map": [
                    "List[int]",
                    "int",
                    "Optional[int]",
                    "Sequence[str]"
                ],
                "retrieval_kits": [
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "alice_verifying_key": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ],
                "bob_encrypting_key": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ],
                "bob_verifying_key": [
                    "int",
                    "Dict[str, Any]",
                    "bytes",
                    "Union[bytes, str, None]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/network/server.py": {
        "make_rest_app": {
            "name": "make_rest_app",
            "location": 79,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "db_filepath": [
                    "str",
                    "logging.Logger"
                ],
                "this_node": [
                    "int",
                    "Dict[str, float]"
                ],
                "log": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "_make_rest_app": {
            "name": "_make_rest_app",
            "location": 103,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "datastore": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Mapping[str, Any]"
                ],
                "this_node": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Mapping[str, Any]"
                ],
                "log": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "ProxyRESTServer.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rest_host": [
                    "dict",
                    "Exception",
                    "str"
                ],
                "rest_port": [
                    "dict",
                    "Exception",
                    "str"
                ],
                "hosting_power": [
                    "Callable",
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "rest_app": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "pathlib.Path"
                ],
                "datastore": [
                    "Callable",
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "ProxyRESTServer.rest_url": {
            "name": "rest_url",
            "location": 75,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_make_rest_app.public_information": {
            "name": "public_information",
            "location": 116,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "_make_rest_app.all_known_nodes": {
            "name": "all_known_nodes",
            "location": 122,
            "return": [
                "dict",
                "bool",
                "str",
                "aiocometd.constants.TransportState",
                "medtagger.database.models.Slice",
                "Collection[Any]",
                "\"User\""
            ],
            "arguments": {}
        },
        "_make_rest_app.node_metadata_exchange": {
            "name": "node_metadata_exchange",
            "location": 133,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_make_rest_app.reencrypt": {
            "name": "reencrypt",
            "location": 166,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {}
        },
        "_make_rest_app.revoke": {
            "name": "revoke",
            "location": 226,
            "return": [
                "str",
                "logging.LogRecord",
                "nucypher.characters.control.emitters.StdoutEmitter",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "_make_rest_app.ping": {
            "name": "ping",
            "location": 232,
            "return": [
                "Optional[str]",
                "List[str]",
                "bytes",
                "Tuple[str, bool]",
                "dict",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {}
        },
        "_make_rest_app.check_availability": {
            "name": "check_availability",
            "location": 238,
            "return": [
                "str",
                "botocore.exceptions.ClientError",
                "bool",
                "zerver.models.Realm",
                "Dict[str, bool]"
            ],
            "arguments": {}
        },
        "_make_rest_app.status": {
            "name": "status",
            "location": 270,
            "return": [
                "int",
                "django.http.HttpResponse",
                "Optional[zerver.models.UserProfile]",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/nucypher/network/trackers.py": {
        "OperatorBondedTracker.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OperatorBondedTracker.run": {
            "name": "run",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorBondedTracker._shutdown_ursula": {
            "name": "_shutdown_ursula",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "halt_reactor": [
                    "List[int]",
                    "bool"
                ]
            }
        },
        "OperatorBondedTracker.handle_errors": {
            "name": "handle_errors",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "str",
                    "Sequence"
                ]
            }
        },
        "AvailabilityTracker.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "bool",
                    "float"
                ],
                "enforce_loneliness": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AvailabilityTracker.excuses": {
            "name": "excuses",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.mild_warning": {
            "name": "mild_warning",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.medium_warning": {
            "name": "medium_warning",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.severe_warning": {
            "name": "severe_warning",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.shutdown_everything": {
            "name": "shutdown_everything",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "int"
                ],
                "halt_reactor": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "AvailabilityTracker._halt_reactor": {
            "name": "_halt_reactor",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AvailabilityTracker.handle_measurement_errors": {
            "name": "handle_measurement_errors",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crash_on_error": [
                    "bool",
                    "Callable[[int], None]",
                    "str",
                    "Sequence[Any]"
                ]
            }
        },
        "AvailabilityTracker.status": {
            "name": "status",
            "location": 161,
            "return": [
                "str",
                "set",
                "List[Dict[str, str]]",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.running": {
            "name": "running",
            "location": 170,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.start": {
            "name": "start",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "now": [
                    "int",
                    "bool",
                    "str",
                    "List[int]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "AvailabilityTracker.stop": {
            "name": "stop",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.maintain": {
            "name": "maintain",
            "location": 183,
            "return": [
                "mypy.nodes.OverloadedFuncDef"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.issue_warnings": {
            "name": "issue_warnings",
            "location": 222,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "cascade": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AvailabilityTracker.sample": {
            "name": "sample",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "float",
                    "int",
                    "numpy.random.RandomState"
                ]
            }
        },
        "AvailabilityTracker.score": {
            "name": "score",
            "location": 237,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.record": {
            "name": "record",
            "location": 240,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[int]",
                    "str",
                    "nucypher.config.storages.NodeStorage"
                ],
                "reason": [
                    "str",
                    "int",
                    "Callable",
                    "Union[str, Callable]",
                    "float"
                ]
            }
        },
        "AvailabilityTracker.measure_sample": {
            "name": "measure_sample",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AvailabilityTracker.measure": {
            "name": "measure",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ursula_or_sprout": [
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/network/__init__.py": {},
    "nucypher-development/nucypher/policy/identity.py": {
        "Card.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "character_flag": [
                    "bytes",
                    "int",
                    "umbral.keys.UmbralPublicKey",
                    "bool"
                ],
                "verifying_key": [
                    "bytes",
                    "str",
                    "IO[bytes]",
                    "int"
                ],
                "encrypting_key": [
                    "bytes",
                    "str",
                    "IO[bytes]",
                    "int"
                ],
                "nickname": [
                    "bytes",
                    "PublicKey",
                    "memoryview",
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "Card.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.__eq__": {
            "name": "__eq__",
            "location": 113,
            "return": [
                "bool",
                "Tuple[str]",
                "aiocometd.transports.base.Payload",
                "Union[int, float, complex]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Card.__validate": {
            "name": "__validate",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.__hash": {
            "name": "__hash",
            "location": 124,
            "return": [
                "bytearray",
                "str",
                "int",
                "bytes",
                "Union[str, bytes]",
                "Union[bytes, bytearray]",
                "bool",
                "BinaryIO"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "int",
                    "bytes",
                    "str"
                ],
                "payload": [
                    "str",
                    "Dict[str, Union[str, float]]",
                    "dict"
                ]
            }
        },
        "Card.character": {
            "name": "character",
            "location": 132,
            "return": [
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.__bytes__": {
            "name": "__bytes__",
            "location": 139,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.__hex__": {
            "name": "__hex__",
            "location": 148,
            "return": [
                "eth.chains.base.MiningChain",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.__payload": {
            "name": "__payload",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.from_bytes": {
            "name": "from_bytes",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes",
                    "str"
                ],
                "card_bytes": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Card.from_hex": {
            "name": "from_hex",
            "location": 177,
            "return": [
                "Dict[str, bool]",
                "dict",
                "bool",
                "Dict[str, str]",
                "cmk.base.events.EventContext"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "List[int]",
                    "dict"
                ],
                "hexdata": [
                    "bytes",
                    "str",
                    "List[int]",
                    "dict"
                ]
            }
        },
        "Card.to_hex": {
            "name": "to_hex",
            "location": 180,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.from_base64": {
            "name": "from_base64",
            "location": 184,
            "return": [
                "Dict[str, bool]",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "dict",
                    "List[int]",
                    "Union[int, bytes]",
                    "bool"
                ],
                "b64data": [
                    "bytes",
                    "dict",
                    "List[int]",
                    "Union[int, bytes]",
                    "bool"
                ]
            }
        },
        "Card.to_base64": {
            "name": "to_base64",
            "location": 187,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.to_qr_code": {
            "name": "to_qr_code",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.from_dict": {
            "name": "from_dict",
            "location": 203,
            "return": [
                "Dict[int, Dict[str, Any]]",
                "dict",
                "List[Dict]",
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "Sequence",
                    "Dict[str, Any]"
                ],
                "card": [
                    "dict",
                    "str",
                    "Sequence",
                    "Dict[str, Any]"
                ]
            }
        },
        "Card.to_dict": {
            "name": "to_dict",
            "location": 210,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.describe": {
            "name": "describe",
            "location": 219,
            "return": [
                "str",
                "Generator",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "truncate": [
                    "bytes",
                    "int",
                    "Optional[IO[bytes]]",
                    "Union[str, bytes]",
                    "str"
                ]
            }
        },
        "Card.to_json": {
            "name": "to_json",
            "location": 230,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "as_string": [
                    "str",
                    "int"
                ]
            }
        },
        "Card.from_character": {
            "name": "from_character",
            "location": 242,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "character": [
                    "Mapping[str, Any]",
                    "str"
                ],
                "nickname": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Card.verifying_key": {
            "name": "verifying_key",
            "location": 256,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.encrypting_key": {
            "name": "encrypting_key",
            "location": 260,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.id": {
            "name": "id",
            "location": 264,
            "return": [
                "int",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.nickname": {
            "name": "nickname",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nickname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Card.set_nickname": {
            "name": "set_nickname",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nickname": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "Card.filepath": {
            "name": "filepath",
            "location": 287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.is_saved": {
            "name": "is_saved",
            "location": 294,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.save": {
            "name": "save",
            "location": 298,
            "return": [
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "BinaryIO"
                ],
                "overwrite": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "int"
                ]
            }
        },
        "Card.lookup": {
            "name": "lookup",
            "location": 308,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Iterable[\"Issue\"]"
                ],
                "identifier": [
                    "str"
                ],
                "card_dir": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "List[str]",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "Card.load": {
            "name": "load",
            "location": 325,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "Union[str, List[str]]",
                    "Union[str, pathlib.Path]"
                ],
                "filepath": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "identifier": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "card_dir": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "Union[str, List[str]]",
                    "Union[str, pathlib.Path]"
                ],
                "decoder": [
                    "str",
                    "List[str]",
                    "bool",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "Card.delete": {
            "name": "delete",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/policy/kits.py": {
        "PolicyMessageKit.from_message_kit": {
            "name": "from_message_kit",
            "location": 31,
            "return": [
                "int",
                "dict",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes",
                    "Union[bytes, str]",
                    "Optional[Callable]"
                ],
                "message_kit": [
                    "int",
                    "bytes",
                    "Union[bytes, str]",
                    "Optional[Callable]"
                ],
                "policy_encrypting_key": [
                    "int",
                    "bytes",
                    "Union[bytes, str]",
                    "Optional[Callable]"
                ],
                "threshold": [
                    "int",
                    "bytes",
                    "Union[bytes, str]",
                    "Optional[Callable]"
                ]
            }
        },
        "PolicyMessageKit.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "policy_encrypting_key": [
                    "str",
                    "Tuple[int, int]",
                    "Union[str, int]",
                    "dict"
                ],
                "threshold": [
                    "str",
                    "bool",
                    "MutableMapping[str, Any]",
                    "bytes",
                    "Optional[str]"
                ],
                "result": [
                    "bool",
                    "int",
                    "List[Dict[str, str]]",
                    "str"
                ],
                "message_kit": [
                    "str",
                    "bool",
                    "MutableMapping[str, Any]",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "PolicyMessageKit.as_retrieval_kit": {
            "name": "as_retrieval_kit",
            "location": 49,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyMessageKit.decrypt": {
            "name": "decrypt",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sk": [
                    "str",
                    "int"
                ]
            }
        },
        "PolicyMessageKit.is_decryptable_by_receiver": {
            "name": "is_decryptable_by_receiver",
            "location": 57,
            "return": [
                "Callable[..., None]",
                "List[Union[\"PipeChain\", str]]",
                "Callable[[KT], VT]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyMessageKit.with_result": {
            "name": "with_result",
            "location": 60,
            "return": [
                "List[int]",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "List[Callable]",
                    "dict",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "RetrievalResult.empty": {
            "name": "empty",
            "location": 74,
            "return": [
                "Dict[str, Any]",
                "umbral.keys.UmbralPublicKey",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "RetrievalResult.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cfrags": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RetrievalResult.canonical_addresses": {
            "name": "canonical_addresses",
            "location": 80,
            "return": [
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetrievalResult.with_result": {
            "name": "with_result",
            "location": 84,
            "return": [
                "bool",
                "Tuple[float, float]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Iterable[Tuple[Hashable, Any]]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/policy/payment.py": {
        "ReencryptionPrerequisite.verify": {
            "name": "verify",
            "location": 38,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "payee": [
                    "bool",
                    "rouver.types.StartResponse",
                    "rouver.types.WSGIEnvironment"
                ],
                "request": [
                    "bool",
                    "rouver.types.StartResponse",
                    "rouver.types.WSGIEnvironment"
                ]
            }
        },
        "PaymentMethod.pay": {
            "name": "pay",
            "location": 55,
            "return": [
                "typing.Dict"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PaymentMethod.rate": {
            "name": "rate",
            "location": 61,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentMethod.quote": {
            "name": "quote",
            "location": 66,
            "return": [
                "PaymentMethod.Quote"
            ],
            "arguments": {
                "self": [],
                "shares": [
                    "bool",
                    "str",
                    "int"
                ],
                "duration": [
                    "bool",
                    "str",
                    "int"
                ],
                "commencement": [
                    "bool",
                    "str",
                    "int"
                ],
                "expiration": [
                    "bool",
                    "str",
                    "int"
                ],
                "value": [
                    "bool",
                    "str",
                    "int"
                ],
                "rate": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "PaymentMethod.validate_price": {
            "name": "validate_price",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shares": [
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool",
                    "abc.BaseConfig"
                ],
                "value": [
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool",
                    "abc.BaseConfig"
                ],
                "duration": [
                    "Optional[types.TracebackType]",
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool",
                    "abc.BaseConfig"
                ]
            }
        },
        "ContractPayment.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "eth_provider": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "network": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "registry": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "ContractPayment.agent": {
            "name": "agent",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreeReencryptions.verify": {
            "name": "verify",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "payee": [
                    "bool",
                    "rouver.types.StartResponse",
                    "rouver.types.WSGIEnvironment"
                ],
                "request": [
                    "bool",
                    "rouver.types.StartResponse",
                    "rouver.types.WSGIEnvironment"
                ]
            }
        },
        "FreeReencryptions.pay": {
            "name": "pay",
            "location": 127,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "FreeReencryptions.rate": {
            "name": "rate",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FreeReencryptions.quote": {
            "name": "quote",
            "location": 135,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "shares": [
                    "List[Dict[str, Any]]",
                    "int",
                    "OrderedDict",
                    "Dict[str, List[str]]",
                    "bool"
                ],
                "commencement": [
                    "List[Dict[str, Any]]",
                    "int",
                    "OrderedDict",
                    "Dict[str, List[str]]",
                    "bool"
                ],
                "expiration": [
                    "List[Dict[str, Any]]",
                    "int",
                    "OrderedDict",
                    "Dict[str, List[str]]",
                    "bool"
                ],
                "duration": [
                    "List[Dict[str, Any]]",
                    "int",
                    "OrderedDict",
                    "Dict[str, List[str]]",
                    "bool"
                ]
            }
        },
        "FreeReencryptions.validate_price": {
            "name": "validate_price",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionManagerPayment.verify": {
            "name": "verify",
            "location": 161,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "payee": [
                    "bool",
                    "rouver.types.StartResponse",
                    "rouver.types.WSGIEnvironment"
                ],
                "request": [
                    "int",
                    "eth.abc.BlockHeaderAPI",
                    "Callable[..., Coroutine]"
                ]
            }
        },
        "SubscriptionManagerPayment.pay": {
            "name": "pay",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "bool",
                    "eth.vm.computation.BaseComputation",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "SubscriptionManagerPayment.rate": {
            "name": "rate",
            "location": 179,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionManagerPayment.quote": {
            "name": "quote",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "shares": [
                    "float",
                    "int",
                    "Union[int, Tuple[int, ...]]",
                    "bool"
                ],
                "commencement": [
                    "Optional[float]"
                ],
                "expiration": [
                    "int"
                ],
                "duration": [
                    "int"
                ],
                "value": [
                    "int",
                    "dict",
                    "nucypher.blockchain.eth.token.NU",
                    "Optional[str]"
                ],
                "rate": [
                    "Optional[Tuple[int, ...]]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "SubscriptionManagerPayment.validate_price": {
            "name": "validate_price",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "duration": [
                    "bool",
                    "str",
                    "int"
                ],
                "shares": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/nucypher/policy/policies.py": {
        "Policy.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "publisher": [
                    "raiden.utils.BalanceHash",
                    "bytes",
                    "bool"
                ],
                "label": [
                    "bool",
                    "bytes",
                    "raiden.utils.BalanceHash"
                ],
                "bob": [
                    "raiden.utils.BalanceHash",
                    "bytes",
                    "bool"
                ],
                "kfrags": [
                    "bool",
                    "Callable",
                    "str",
                    "List[str]",
                    "List[float]",
                    "List[int]"
                ],
                "public_key": [
                    "bool",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "threshold": [
                    "raiden.utils.TokenAmount",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Callable]"
                ],
                "expiration": [
                    "raiden.utils.TokenAmount",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Callable]"
                ],
                "commencement": [
                    "raiden.utils.TokenAmount",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Callable]"
                ],
                "value": [
                    "Optional[str]",
                    "Dict[str, str]",
                    "raiden.utils.NetworkTimeout",
                    "Dict[Tuple[int, int], str]",
                    "int",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "raiden.utils.MessageID"
                ],
                "rate": [
                    "raiden.utils.TokenAmount",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Callable]"
                ],
                "duration": [
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.ChannelID",
                    "str",
                    "Optional[str]"
                ],
                "payment_method": [
                    "raiden.utils.BlockIdentifier",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "Policy.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy._make_reservoir": {
            "name": "_make_reservoir",
            "location": 96,
            "return": [
                "nucypher.policy.reservoir.MergedReservoir"
            ],
            "arguments": {
                "self": [],
                "handpicked_addresses": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Policy._publish": {
            "name": "_publish",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ursulas": [
                    "str"
                ]
            }
        },
        "Policy._ping_node": {
            "name": "_ping_node",
            "location": 105,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "IO",
                    "float",
                    "str",
                    "dict"
                ],
                "network_middleware": [
                    "int",
                    "str"
                ]
            }
        },
        "Policy._sample": {
            "name": "_sample",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "str",
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "ursulas": [
                    "dict",
                    "int",
                    "Dict[str, List[str]]"
                ],
                "timeout": [
                    "int",
                    "bool"
                ]
            }
        },
        "Policy.enact": {
            "name": "enact",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ursulas": [
                    "umbral.kfrags.KFrag",
                    "str",
                    "Callable"
                ]
            }
        },
        "FederatedPolicy._make_reservoir": {
            "name": "_make_reservoir",
            "location": 203,
            "return": [
                "eth.vm.computation.BaseComputation",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "handpicked_addresses": [
                    "Callable",
                    "int"
                ]
            }
        },
        "BlockchainPolicy._make_reservoir": {
            "name": "_make_reservoir",
            "location": 211,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "handpicked_addresses": [
                    "Callable",
                    "int"
                ]
            }
        },
        "EnactedPolicy.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hrac": [
                    "int",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "label": [
                    "int",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "public_key": [
                    "List[str]",
                    "str",
                    "dict",
                    "bytes"
                ],
                "threshold": [
                    "int",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "treasure_map": [
                    "int",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "revocation_kit": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "publisher_verifying_key": [
                    "bytes",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "Policy._sample.worker": {
            "name": "worker",
            "location": 133,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "address": [
                    "str",
                    "bool",
                    "slice",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "eth_evm.ChecksumAddress"
                ]
            }
        }
    },
    "nucypher-development/nucypher/policy/reservoir.py": {
        "make_federated_staker_reservoir": {
            "name": "make_federated_staker_reservoir",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "known_nodes": [
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "exclude_addresses": [
                    "List[int]",
                    "Iterable[str]",
                    "str"
                ],
                "include_addresses": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "make_decentralized_staking_provider_reservoir": {
            "name": "make_decentralized_staking_provider_reservoir",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "application_agent": [
                    "int",
                    "float",
                    "str"
                ],
                "exclude_addresses": [
                    "Iterator[int]",
                    "List[int]",
                    "Callable[[], int]"
                ],
                "include_addresses": [
                    "List[Dict[str, int]]",
                    "dict",
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "pagination_size": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "MergedReservoir.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "List[str]",
                    "str",
                    "list",
                    "int",
                    "List[int]"
                ],
                "reservoir": [
                    "int",
                    "List[Tuple[int, float]]",
                    "Tuple[str]",
                    "str",
                    "float"
                ]
            }
        },
        "MergedReservoir.__call__": {
            "name": "__call__",
            "location": 76,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrefetchStrategy.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reservoir": [
                    "int",
                    "bool",
                    "float"
                ],
                "need_successes": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PrefetchStrategy.__call__": {
            "name": "__call__",
            "location": 96,
            "return": [
                "type",
                "Optional[str]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "successes": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/nucypher/policy/revocation.py": {
        "RevocationKit.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "treasure_map": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "signer": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "RevocationKit.__iter__": {
            "name": "__iter__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.__getitem__": {
            "name": "__getitem__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "ursula_address": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RevocationKit.__len__": {
            "name": "__len__",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "RevocationKit.revokable_addresses": {
            "name": "revokable_addresses",
            "location": 49,
            "return": [
                "nucypher.characters.control.emitters.StdoutEmitter",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.add_confirmation": {
            "name": "add_confirmation",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula_address": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "signed_receipt": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/policy/__init__.py": {},
    "nucypher-development/nucypher/utilities/clouddeploy.py": {
        "AnsiblePlayBookResultsCollector.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "AnsiblePlayBookResultsCollector.v2_playbook_on_play_start": {
            "name": "v2_playbook_on_play_start",
            "location": 68,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "play": [
                    "str",
                    "int"
                ]
            }
        },
        "AnsiblePlayBookResultsCollector.v2_playbook_on_task_start": {
            "name": "v2_playbook_on_task_start",
            "location": 78,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "clients.models.Client",
                    "Set[str]"
                ],
                "is_conditional": [
                    "Optional[Any]",
                    "Iterable[str]"
                ]
            }
        },
        "AnsiblePlayBookResultsCollector.v2_runner_on_ok": {
            "name": "v2_runner_on_ok",
            "location": 88,
            "return": [
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "List[Dict]",
                    "ClassVar",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "AnsiblePlayBookResultsCollector.v2_runner_on_failed": {
            "name": "v2_runner_on_failed",
            "location": 112,
            "return": [
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Optional[Any]",
                    "OrderedDict"
                ]
            }
        },
        "AnsiblePlayBookResultsCollector.v2_runner_on_unreachable": {
            "name": "v2_runner_on_unreachable",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Optional[Any]",
                    "OrderedDict"
                ]
            }
        },
        "AnsiblePlayBookResultsCollector.v2_runner_on_skipped": {
            "name": "v2_runner_on_skipped",
            "location": 133,
            "return": [
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "dict",
                    "Optional[Any]",
                    "OrderedDict"
                ]
            }
        },
        "AnsiblePlayBookResultsCollector.v2_playbook_on_stats": {
            "name": "v2_playbook_on_stats",
            "location": 145,
            "return": [
                "str",
                "int",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "dict",
                    "list",
                    "List[str]",
                    "Iterable[Tuple[str, str]]"
                ]
            }
        },
        "AnsiblePlayBookResultsCollector.send_save": {
            "name": "send_save",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "Callable"
                ],
                "color": [
                    "List[Dict[str, str]]",
                    "rotkehlchen.chain.manager.BlockchainBalancesUpdate"
                ]
            }
        },
        "BaseCloudNodeConfigurator.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "stakeholder": [
                    "List[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "stakeholder_config_path": [
                    "bool",
                    "List[str]",
                    "str",
                    "Union[str, os.PathLike]",
                    "int"
                ],
                "blockchain_provider": [
                    "str",
                    "sphinx.config.Config",
                    "Sequence[int]",
                    "dict"
                ],
                "nucypher_image": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "dict"
                ],
                "seed_network": [
                    "bool",
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "str",
                    "Dict[str, str]"
                ],
                "sentry_dsn": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List]"
                ],
                "profile": [
                    "List[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "pre_config": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str",
                    "Callable[[], str]",
                    "pypi2nix.path.Path"
                ],
                "network": [
                    "str",
                    "List[str]",
                    "Optional['Directory']"
                ],
                "namespace": [
                    "dict",
                    "Optional[str]",
                    "str",
                    "pathlib.Path"
                ],
                "action": [
                    "List[float]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "envvars": [
                    "List[str]",
                    "str",
                    "Union[bytes, str]",
                    "bytes",
                    "List[bytes]",
                    "int"
                ],
                "cliargs": [
                    "List[str]",
                    "callable",
                    "List[Dict[str, Any]]",
                    "Path",
                    "str"
                ]
            }
        },
        "BaseCloudNodeConfigurator._write_config": {
            "name": "_write_config",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator.network_config_path": {
            "name": "network_config_path",
            "location": 272,
            "return": [
                "pathlib.Path",
                "Dict[str, cerulean.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator._provider_deploy_attrs": {
            "name": "_provider_deploy_attrs",
            "location": 276,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator._configure_provider_params": {
            "name": "_configure_provider_params",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_profile": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseCloudNodeConfigurator._do_setup_for_instance_creation": {
            "name": "_do_setup_for_instance_creation",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator._format_runtime_options": {
            "name": "_format_runtime_options",
            "location": 285,
            "return": [
                "str",
                "dict",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "node_options": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseCloudNodeConfigurator.chain_id": {
            "name": "chain_id",
            "location": 290,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator.chain_name": {
            "name": "chain_name",
            "location": 294,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator.inventory_path": {
            "name": "inventory_path",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator.update_generate_inventory": {
            "name": "update_generate_inventory",
            "location": 304,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str"
                ]
            }
        },
        "BaseCloudNodeConfigurator.create_nodes": {
            "name": "create_nodes",
            "location": 361,
            "return": [
                "Optional[List[str]]",
                "bool",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "int",
                    "bytes",
                    "Sequence[str]"
                ],
                "unstaked": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "BaseCloudNodeConfigurator._inventory_template": {
            "name": "_inventory_template",
            "location": 390,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator.deploy_nucypher_on_existing_nodes": {
            "name": "deploy_nucypher_on_existing_nodes",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str"
                ],
                "wipe_nucypher": [
                    "str"
                ]
            }
        },
        "BaseCloudNodeConfigurator.update_nucypher_on_existing_nodes": {
            "name": "update_nucypher_on_existing_nodes",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "int",
                    "Type[T]"
                ]
            }
        },
        "BaseCloudNodeConfigurator.get_worker_status": {
            "name": "get_worker_status",
            "location": 479,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseCloudNodeConfigurator.print_worker_logs": {
            "name": "print_worker_logs",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "Type[T]",
                    "Callable"
                ]
            }
        },
        "BaseCloudNodeConfigurator.backup_remote_data": {
            "name": "backup_remote_data",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "Type[T]",
                    "Callable",
                    "type",
                    "int"
                ]
            }
        },
        "BaseCloudNodeConfigurator.stop_worker_process": {
            "name": "stop_worker_process",
            "location": 549,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "BaseCloudNodeConfigurator.restore_from_backup": {
            "name": "restore_from_backup",
            "location": 571,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_host": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "str",
                    "Union[str, pathlib.Path]"
                ],
                "source_path": [
                    "Union[str, pathlib.Path]",
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "BaseCloudNodeConfigurator.get_provider_hosts": {
            "name": "get_provider_hosts",
            "location": 593,
            "return": [
                "str",
                "list",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator.get_all_hosts": {
            "name": "get_all_hosts",
            "location": 599,
            "return": [
                "str",
                "bool",
                "Callable",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator.destroy_resources": {
            "name": "destroy_resources",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseCloudNodeConfigurator._destroy_resources": {
            "name": "_destroy_resources",
            "location": 609,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator.update_captured_instance_data": {
            "name": "update_captured_instance_data",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "results": [
                    "dict",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Dict[str, str]",
                    "str",
                    "OrderedDict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseCloudNodeConfigurator.update_stakeholder_config": {
            "name": "update_stakeholder_config",
            "location": 626,
            "return": [
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCloudNodeConfigurator.give_helpful_hints": {
            "name": "give_helpful_hints",
            "location": 637,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "backup": [
                    "str",
                    "Type[T]",
                    "bool"
                ],
                "playbook": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "BaseCloudNodeConfigurator.format_ssh_cmd": {
            "name": "format_ssh_cmd",
            "location": 664,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "host_data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "DigitalOceanConfigurator.instance_size": {
            "name": "instance_size",
            "location": 675,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOceanConfigurator._provider_deploy_attrs": {
            "name": "_provider_deploy_attrs",
            "location": 681,
            "return": [
                "Set[str]",
                "int",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOceanConfigurator._configure_provider_params": {
            "name": "_configure_provider_params",
            "location": 686,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_profile": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DigitalOceanConfigurator.create_new_node": {
            "name": "create_new_node",
            "location": 705,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Tuple[Any, Any]]",
                "Mapping[int, str]",
                "Union[Dict, List]",
                "bool",
                "Dict[str, str]",
                "Dict[int, str]"
            ],
            "arguments": {
                "self": [],
                "node_name": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "DigitalOceanConfigurator._destroy_resources": {
            "name": "_destroy_resources",
            "location": 751,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Sequence[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AWSNodeConfigurator._provider_deploy_attrs": {
            "name": "_provider_deploy_attrs",
            "location": 801,
            "return": [
                "str",
                "IO[Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSNodeConfigurator._configure_provider_params": {
            "name": "_configure_provider_params",
            "location": 807,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_profile": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "AWSNodeConfigurator.aws_tags": {
            "name": "aws_tags",
            "location": 853,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSNodeConfigurator._create_keypair": {
            "name": "_create_keypair",
            "location": 857,
            "return": [
                "str",
                "int",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSNodeConfigurator._delete_keypair": {
            "name": "_delete_keypair",
            "location": 868,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSNodeConfigurator._ensure_vpc": {
            "name": "_ensure_vpc",
            "location": 876,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSNodeConfigurator._configure_path_to_internet": {
            "name": "_configure_path_to_internet",
            "location": 903,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSNodeConfigurator._do_setup_for_instance_creation": {
            "name": "_do_setup_for_instance_creation",
            "location": 950,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSNodeConfigurator._destroy_resources": {
            "name": "_destroy_resources",
            "location": 960,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Sequence[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AWSNodeConfigurator.create_new_node": {
            "name": "create_new_node",
            "location": 1023,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Tuple[Any, Any]]",
                "Mapping[int, str]",
                "Union[Dict, List]",
                "bool",
                "Dict[str, str]",
                "Dict[int, str]"
            ],
            "arguments": {
                "self": [],
                "node_name": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "AWSNodeConfigurator.format_ssh_cmd": {
            "name": "format_ssh_cmd",
            "location": 1065,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "host_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, bool]]"
                ]
            }
        },
        "GenericConfigurator._write_config": {
            "name": "_write_config",
            "location": 1074,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericConfigurator.create_nodes": {
            "name": "create_nodes",
            "location": 1081,
            "return": [
                "Optional[List[str]]",
                "bool",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node_names": [
                    "str",
                    "bool",
                    "AnyStr",
                    "Optional[str]"
                ],
                "host_address": [
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "Optional[Union[str, Any]]",
                    "int"
                ],
                "login_name": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "key_path": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "ssh_port": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "CloudDeployers.get_deployer": {
            "name": "get_deployer",
            "location": 1117,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/concurrency.py": {
        "Success.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Callable[[None], bool]"
                ],
                "result": [
                    "Counter",
                    "Dict[str, Any]",
                    "bool",
                    "list",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Failure.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Union[bool, List[str]]"
                ],
                "exc_info": [
                    "Dict[str, Any]",
                    "bool",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "FutureResult.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Union[bool, List[str]]"
                ],
                "exc_info": [
                    "Dict[str, Any]",
                    "bool",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "Future.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Future._set": {
            "name": "_set",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Future.set": {
            "name": "set",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[object]"
                ]
            }
        },
        "Future.set_exception": {
            "name": "set_exception",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Future.is_set": {
            "name": "is_set",
            "location": 76,
            "return": [
                "bool",
                "Dict[str, str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Future.get": {
            "name": "get",
            "location": 79,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPoolException.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message_prefix": [
                    "str",
                    "Dict[str, Any]"
                ],
                "failures": [
                    "int",
                    "List[int]",
                    "float",
                    "str"
                ]
            }
        },
        "WorkerPoolException.get_tracebacks": {
            "name": "get_tracebacks",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "bool",
                    "Optional[\"GraphLogger\"]",
                    "Dict[str, List[Any]]",
                    "Optional[dict]",
                    "str"
                ],
                "value_factory": [
                    "Tuple[str]",
                    "int",
                    "List[int]",
                    "List[Tuple[str, int]]",
                    "bytes",
                    "Tuple[int]",
                    "float"
                ],
                "target_successes": [
                    "int",
                    "Tuple[float, float]",
                    "float"
                ],
                "timeout": [
                    "bool",
                    "Optional[\"GraphLogger\"]",
                    "Dict[str, List[Any]]",
                    "Optional[dict]",
                    "str"
                ],
                "stagger_timeout": [
                    "bool",
                    "float",
                    "List[int]",
                    "int"
                ],
                "threadpool_size": [
                    "Optional[int]",
                    "int",
                    "List[\"Issue\"]",
                    "Optional[float]"
                ]
            }
        },
        "WorkerPool.start": {
            "name": "start",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool.cancel": {
            "name": "cancel",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool._stop_threadpool": {
            "name": "_stop_threadpool",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool._check_for_producer_error": {
            "name": "_check_for_producer_error",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool.join": {
            "name": "join",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool._sleep": {
            "name": "_sleep",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "list",
                    "bool",
                    "callable"
                ]
            }
        },
        "WorkerPool.block_until_target_successes": {
            "name": "block_until_target_successes",
            "location": 229,
            "return": [
                "bool",
                "\"Parameter\"",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool.get_failures": {
            "name": "get_failures",
            "location": 244,
            "return": [
                "int",
                "dict",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool.get_successes": {
            "name": "get_successes",
            "location": 251,
            "return": [
                "int",
                "dict",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool._bail_on_timeout": {
            "name": "_bail_on_timeout",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool._worker_wrapper": {
            "name": "_worker_wrapper",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Optional[Sequence[T]]",
                    "tuple",
                    "Sequence[Any]",
                    "list",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "WorkerPool._process_results": {
            "name": "_process_results",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool._produce_values": {
            "name": "_produce_values",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerPool.TimedOut.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Callable[[Any], bool]",
                    "Optional[TextIO]",
                    "Callable"
                ]
            }
        },
        "WorkerPool.OutOfValues.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/utilities/datafeeds.py": {
        "Datafeed._probe_feed": {
            "name": "_probe_feed",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Datafeed.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumGasPriceDatafeed._parse_gas_prices": {
            "name": "_parse_gas_prices",
            "location": 67,
            "return": [
                "Callable",
                "types.Resolver",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumGasPriceDatafeed.get_gas_price": {
            "name": "get_gas_price",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "speed": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "EthereumGasPriceDatafeed.construct_gas_strategy": {
            "name": "construct_gas_strategy",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "speed": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "EthereumGasPriceDatafeed.get_canonical_speed": {
            "name": "get_canonical_speed",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Tuple[eth.abc.SignedTransactionAPI]",
                    "type",
                    "bool",
                    "Dict[str, Any]"
                ],
                "speed": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "EtherchainGasPriceDatafeed._parse_gas_prices": {
            "name": "_parse_gas_prices",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpvestGasPriceDatafeed._parse_gas_prices": {
            "name": "_parse_gas_prices",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZoltuGasPriceDatafeed._parse_gas_prices": {
            "name": "_parse_gas_prices",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumGasPriceDatafeed.construct_gas_strategy.gas_price_strategy": {
            "name": "gas_price_strategy",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ],
                "transaction_params": [
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/ethereum.py": {
        "to_bytes32": {
            "name": "to_bytes32",
            "location": 27,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "int",
                    "Union[str, bytes]",
                    "dict"
                ],
                "hexstr": [
                    "bytes",
                    "int",
                    "Union[str, bytes]",
                    "dict"
                ]
            }
        },
        "to_32byte_hex": {
            "name": "to_32byte_hex",
            "location": 31,
            "return": [
                "int",
                "str",
                "nucypher.characters.control.emitters.StdoutEmitter",
                "bool"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "int"
                ],
                "hexstr": [
                    "bytes",
                    "int"
                ]
            }
        },
        "get_mapping_entry_location": {
            "name": "get_mapping_entry_location",
            "location": 35,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "set",
                "dict"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "int"
                ],
                "mapping_location": [
                    "str",
                    "int",
                    "float",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "get_array_data_location": {
            "name": "get_array_data_location",
            "location": 43,
            "return": [
                "str",
                "Callable",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, Any]",
                "IO"
            ],
            "arguments": {
                "array_location": [
                    "str",
                    "int",
                    "List[int]",
                    "bytes",
                    "float"
                ]
            }
        },
        "encode_constructor_arguments": {
            "name": "encode_constructor_arguments",
            "location": 49,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "web3": [
                    "str",
                    "Pattern"
                ],
                "constructor_function": [
                    "Optional[str]",
                    "Union[str, int]",
                    "Callable",
                    "str"
                ]
            }
        },
        "connect_web3_provider": {
            "name": "connect_web3_provider",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "eth_provider_uri": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/events.py": {
        "generate_events_csv_filepath": {
            "name": "generate_events_csv_filepath",
            "location": 29,
            "return": [
                "str",
                "Union[pathlib.Path, str]",
                "pathlib.Path",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "contract_name": [
                    "str",
                    "dict"
                ],
                "event_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "write_events_to_csv_file": {
            "name": "write_events_to_csv_file",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "csv_file": [
                    "str",
                    "Optional[bytes]",
                    "float"
                ],
                "agent": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "event_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Mapping[Any, str]",
                    "int"
                ],
                "argument_filters": [
                    "int",
                    "Optional[List[str]]",
                    "Dict[str, Exception]",
                    "Type[\"SerializationDialect\"]",
                    "Callable",
                    "Optional[list]",
                    "bool"
                ],
                "from_block": [
                    "int",
                    "Optional[List[str]]",
                    "Dict[str, Exception]",
                    "Type[\"SerializationDialect\"]",
                    "Callable",
                    "Optional[list]",
                    "bool"
                ],
                "to_block": [
                    "int",
                    "Optional[List[str]]",
                    "Dict[str, Exception]",
                    "Type[\"SerializationDialect\"]",
                    "Callable",
                    "Optional[list]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/gas_strategies.py": {
        "max_price_gas_strategy_wrapper": {
            "name": "max_price_gas_strategy_wrapper",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gas_strategy": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "max_gas_price_wei": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "construct_datafeed_median_strategy": {
            "name": "construct_datafeed_median_strategy",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "speed": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "web3_gas_strategy_wrapper": {
            "name": "web3_gas_strategy_wrapper",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3_gas_strategy": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "speed": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "construct_fixed_price_gas_strategy": {
            "name": "construct_fixed_price_gas_strategy",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gas_price": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "denomination": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "max_price_gas_strategy_wrapper._wrapper": {
            "name": "_wrapper",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "construct_datafeed_median_strategy.datafeed_median_gas_price_strategy": {
            "name": "datafeed_median_gas_price_strategy",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "List[List[T]]",
                    "float"
                ],
                "transaction_params": [
                    "int",
                    "List[List[T]]",
                    "float"
                ]
            }
        },
        "web3_gas_strategy_wrapper._wrapper": {
            "name": "_wrapper",
            "location": 104,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {}
        },
        "construct_fixed_price_gas_strategy._fixed_price_strategy": {
            "name": "_fixed_price_strategy",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "web3": [
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ],
                "transaction_params": [
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/logging.py": {
        "initialize_sentry": {
            "name": "initialize_sentry",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "dsn": [
                    "str",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "console_observer": {
            "name": "console_observer",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "sentry_observer": {
            "name": "sentry_observer",
            "location": 152,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_ensure_dir_exists": {
            "name": "_ensure_dir_exists",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "get_json_file_observer": {
            "name": "get_json_file_observer",
            "location": 174,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_text_file_observer": {
            "name": "get_text_file_observer",
            "location": 181,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "initialize_sentry.before_breadcrumb": {
            "name": "before_breadcrumb",
            "location": 57,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "crumb": [
                    "str",
                    "logging.Logger",
                    "Callable",
                    "Optional[logging.Logger]",
                    "Tuple[str]",
                    "Union[None, int, str]",
                    "int"
                ],
                "hint": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "initialize_sentry.before_send": {
            "name": "before_send",
            "location": 63,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]",
                    "config.ConfigManager"
                ],
                "hint": [
                    "str"
                ]
            }
        },
        "GlobalLoggerSettings.set_log_level": {
            "name": "set_log_level",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "int",
                    "ImportError"
                ],
                "log_level_name": [
                    "str",
                    "Callable",
                    "int",
                    "ImportError"
                ]
            }
        },
        "GlobalLoggerSettings.start_console_logging": {
            "name": "start_console_logging",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable[[], Any]",
                    "Type",
                    "str"
                ]
            }
        },
        "GlobalLoggerSettings.stop_console_logging": {
            "name": "stop_console_logging",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "GlobalLoggerSettings.pause_all_logging_while": {
            "name": "pause_all_logging_while",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "List[dict]",
                    "dict"
                ]
            }
        },
        "GlobalLoggerSettings.start_text_file_logging": {
            "name": "start_text_file_logging",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "GlobalLoggerSettings.stop_text_file_logging": {
            "name": "stop_text_file_logging",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Optional[bytes]",
                    "str",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "GlobalLoggerSettings.start_json_file_logging": {
            "name": "start_json_file_logging",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "GlobalLoggerSettings.stop_json_file_logging": {
            "name": "stop_json_file_logging",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[Exception]",
                    "Optional[bytes]",
                    "List[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "GlobalLoggerSettings.start_sentry_logging": {
            "name": "start_sentry_logging",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "Optional[dict]",
                    "Optional[int]"
                ],
                "dsn": [
                    "str",
                    "Optional[str]",
                    "nevergrad.common.Union[str, pathlib.Path]"
                ]
            }
        },
        "GlobalLoggerSettings.stop_sentry_logging": {
            "name": "stop_sentry_logging",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "_SentryInitGuard.init": {
            "name": "init",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "dsn": [
                    "str",
                    "int"
                ]
            }
        },
        "Logger.escape_format_string": {
            "name": "escape_format_string",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "dict"
                ],
                "string": [
                    "str",
                    "bytes",
                    "Tuple[str, str]"
                ]
            }
        },
        "Logger.emit": {
            "name": "emit",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "int"
                ],
                "format": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/networking.py": {
        "validate_operator_ip": {
            "name": "validate_operator_ip",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "ip": [
                    "str"
                ]
            }
        },
        "_request": {
            "name": "_request",
            "location": 70,
            "return": [
                "Optional[bool]",
                "Optional[dict]",
                "dict",
                "Dict[Any, bool]",
                "bool",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool"
                ],
                "certificate": [
                    "str",
                    "bool"
                ]
            }
        },
        "_request_from_node": {
            "name": "_request_from_node",
            "location": 85,
            "return": [
                "Dict[str, Any]",
                "type",
                "Union[int, slice]",
                "str",
                "Union[str, mypy.nodes.SymbolTableNode]"
            ],
            "arguments": {
                "teacher": [
                    "str",
                    "bool"
                ],
                "client": [
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "timeout": [
                    "str"
                ],
                "log": [
                    "logging.Logger",
                    "str"
                ]
            }
        },
        "get_external_ip_from_default_teacher": {
            "name": "get_external_ip_from_default_teacher",
            "location": 113,
            "return": [
                "Iterator[Dict[str, str]]",
                "Mapping[str, Any]",
                "Type"
            ],
            "arguments": {
                "network": [
                    "bool",
                    "float"
                ],
                "federated_only": [
                    "Optional[Union[float, str]]",
                    "float",
                    "nucypher.config.storages.NodeStorage"
                ],
                "registry": [
                    "int",
                    "float",
                    "bytes",
                    "str",
                    "Union[float, int]"
                ],
                "log": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "get_external_ip_from_known_nodes": {
            "name": "get_external_ip_from_known_nodes",
            "location": 161,
            "return": [
                "mypy.nodes.Var",
                "Dict[str, Any]"
            ],
            "arguments": {
                "known_nodes": [
                    "float",
                    "int",
                    "bool",
                    "List[float]",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ],
                "sample_size": [
                    "float",
                    "int",
                    "bool",
                    "List[float]",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ],
                "log": [
                    "str"
                ]
            }
        },
        "get_external_ip_from_centralized_source": {
            "name": "get_external_ip_from_centralized_source",
            "location": 181,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "log": [
                    "str",
                    "int",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "determine_external_ip_address": {
            "name": "determine_external_ip_address",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "network": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "known_nodes": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/seednodes.py": {},
    "nucypher-development/nucypher/utilities/task.py": {
        "SimpleTask.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleTask.running": {
            "name": "running",
            "location": 35,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleTask.start": {
            "name": "start",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "now": [
                    "Optional[Callable[[str], bool]]",
                    "Dict[str, Callable[[], None]]",
                    "int"
                ]
            }
        },
        "SimpleTask.stop": {
            "name": "stop",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleTask.run": {
            "name": "run",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleTask.handle_errors": {
            "name": "handle_errors",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleTask.clean_traceback": {
            "name": "clean_traceback",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "failure": [
                    "str",
                    "nucypher.blockchain.eth.multisig.Proposal",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/__init__.py": {},
    "nucypher-development/nucypher/utilities/porter/porter.py": {
        "Porter.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "int",
                    "Optional[dict]",
                    "Optional[List[str]]"
                ],
                "registry": [
                    "dict",
                    "str",
                    "bool",
                    "Callable",
                    "bytes"
                ],
                "controller": [
                    "int",
                    "float",
                    "List[str]"
                ],
                "federated_only": [
                    "Optional[int]",
                    "bool",
                    "float",
                    "str"
                ],
                "node_class": [
                    "bool",
                    "Optional[List[str]]",
                    "interfaces.InterfaceType",
                    "str",
                    "mypy.nodes.TypeInfo",
                    "dict",
                    "List[str]"
                ],
                "eth_provider_uri": [
                    "int",
                    "float",
                    "List[str]"
                ],
                "execution_timeout": [
                    "bool",
                    "MutableMapping[str, str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Porter.get_ursulas": {
            "name": "get_ursulas",
            "location": 118,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "quantity": [],
                "exclude_ursulas": [],
                "include_ursulas": []
            }
        },
        "Porter.retrieve_cfrags": {
            "name": "retrieve_cfrags",
            "location": 161,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "treasure_map": [],
                "retrieval_kits": [],
                "alice_verifying_key": [],
                "bob_encrypting_key": [],
                "bob_verifying_key": []
            }
        },
        "Porter._make_reservoir": {
            "name": "_make_reservoir",
            "location": 172,
            "return": [
                "eth.vm.computation.BaseComputation",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "List[int]",
                    "bytes"
                ],
                "exclude_ursulas": [
                    "int",
                    "str"
                ],
                "include_ursulas": [
                    "bytes",
                    "int",
                    "BinaryIO",
                    "List[bool]",
                    "eth.vm.computation.BaseComputation",
                    "bytearray"
                ]
            }
        },
        "Porter.make_cli_controller": {
            "name": "make_cli_controller",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "crash_on_error": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Exception"
                ]
            }
        },
        "Porter.make_rpc_controller": {
            "name": "make_rpc_controller",
            "location": 197,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "crash_on_error": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Porter.make_web_controller": {
            "name": "make_web_controller",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "crash_on_error": [
                    "bool",
                    "str"
                ],
                "htpasswd_filepath": [
                    "bool",
                    "str"
                ],
                "cors_allow_origins_list": [
                    "bool",
                    "str"
                ]
            }
        },
        "Porter.get_ursulas.get_ursula_info": {
            "name": "get_ursula_info",
            "location": 125,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "ursula_address": [
                    "str",
                    "bool",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        },
        "Porter.make_web_controller.get_ursulas": {
            "name": "get_ursulas",
            "location": 243,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "Porter.make_web_controller.revoke": {
            "name": "revoke",
            "location": 249,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "Porter.make_web_controller.retrieve_cfrags": {
            "name": "retrieve_cfrags",
            "location": 255,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/nucypher/utilities/porter/__init__.py": {},
    "nucypher-development/nucypher/utilities/porter/control/controllers.py": {
        "PorterCLIController.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "Dict[str, object]",
                    "Callable",
                    "str",
                    "tuple"
                ]
            }
        },
        "PorterCLIController._perform_action": {
            "name": "_perform_action",
            "location": 32,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/utilities/porter/control/interfaces.py": {
        "PorterInterface.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "porter": [
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "PorterInterface.get_ursulas": {
            "name": "get_ursulas",
            "location": 36,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "str",
                    "Union[str, bytes]"
                ],
                "exclude_ursulas": [
                    "str",
                    "Union[str, bytes]"
                ],
                "include_ursulas": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "PorterInterface.revoke": {
            "name": "revoke",
            "location": 48,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PorterInterface.retrieve_cfrags": {
            "name": "retrieve_cfrags",
            "location": 56,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "Optional[bytes]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "treasure_map": [
                    "str",
                    "dict",
                    "Tuple[List[str], List[str], List[str]]"
                ],
                "retrieval_kits": [
                    "str",
                    "dict",
                    "Tuple[List[str], List[str], List[str]]"
                ],
                "alice_verifying_key": [
                    "str",
                    "dict",
                    "Tuple[List[str], List[str], List[str]]"
                ],
                "bob_encrypting_key": [
                    "str",
                    "dict",
                    "Tuple[List[str], List[str], List[str]]"
                ],
                "bob_verifying_key": [
                    "str",
                    "dict",
                    "Tuple[List[str], List[str], List[str]]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/porter/control/__init__.py": {},
    "nucypher-development/nucypher/utilities/porter/control/specifications/porter_schema.py": {
        "option_ursula": {
            "name": "option_ursula",
            "location": 31,
            "return": [
                "int",
                "dict",
                "Iterable[str]",
                "nucypher.characters.control.emitters.StdoutEmitter",
                "bool"
            ],
            "arguments": {}
        },
        "option_bob_encrypting_key": {
            "name": "option_bob_encrypting_key",
            "location": 40,
            "return": [
                "Union[Dict, List]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "AliceGetUrsulas.check_valid_quantity_and_include_ursulas": {
            "name": "check_valid_quantity_and_include_ursulas",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "List[List[Any]]",
                    "pyspark.sql.types.StructType",
                    "Dict[str, Any]"
                ]
            }
        },
        "AliceGetUrsulas.check_include_and_exclude_are_mutually_exclusive": {
            "name": "check_include_and_exclude_are_mutually_exclusive",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/porter/control/specifications/__init__.py": {},
    "nucypher-development/nucypher/utilities/porter/control/specifications/fields/retrieve.py": {
        "RetrievalKit._deserialize": {
            "name": "_deserialize",
            "location": 30,
            "return": [
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "attr": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        },
        "CapsuleFrag._deserialize": {
            "name": "_deserialize",
            "location": 40,
            "return": [
                "int",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "attr": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/porter/control/specifications/fields/ursula.py": {
        "UrsulaChecksumAddress._deserialize": {
            "name": "_deserialize",
            "location": 32,
            "return": [
                "bool",
                "nucypher.characters.control.emitters.StdoutEmitter",
                "dict",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Optional[str]",
                    "types.SchemaTypeOrStr",
                    "str"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/porter/control/specifications/fields/__init__.py": {},
    "nucypher-development/nucypher/utilities/prometheus/collector.py": {
        "MetricsCollector.initialize": {
            "name": "initialize",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MetricsCollector.collect": {
            "name": "collect",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetricsCollector.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetricsCollector.collect": {
            "name": "collect",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaInfoMetricsCollector.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "UrsulaInfoMetricsCollector.initialize": {
            "name": "initialize",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "Hashable",
                    "Dict[str, str]"
                ],
                "registry": [
                    "Hashable",
                    "Dict[str, str]"
                ]
            }
        },
        "UrsulaInfoMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainMetricsCollector.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "eth_provider_uri": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "BlockchainMetricsCollector.initialize": {
            "name": "initialize",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "bool"
                ],
                "registry": [
                    "str",
                    "bool"
                ]
            }
        },
        "BlockchainMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakerMetricsCollector.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "int",
                    "float",
                    "str"
                ],
                "staker_address": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "float"
                ],
                "contract_registry": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "StakerMetricsCollector.initialize": {
            "name": "initialize",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StakerMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorMetricsCollector.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "int",
                    "float",
                    "str"
                ],
                "operator_address": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "float"
                ],
                "contract_registry": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "OperatorMetricsCollector.initialize": {
            "name": "initialize",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "bool"
                ],
                "registry": [
                    "str",
                    "bool"
                ]
            }
        },
        "OperatorMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "event_args_config": [
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Dict[str, bool]",
                    "Dict[str, Any]"
                ],
                "argument_filters": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "contract_agent_class": [
                    "str",
                    "eth.vm.transaction_contexBaseTransactionContext",
                    "eth.abc.TransactionContextAPI",
                    "int",
                    "Callable"
                ],
                "contract_registry": [
                    "int"
                ]
            }
        },
        "EventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registry": [
                    "Dict[str, Any]",
                    "dict",
                    "cmk.base.events.EventContext"
                ]
            }
        },
        "EventMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 229,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventMetricsCollector._event_occurred": {
            "name": "_event_occurred",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "events.shop.ShopOrderCanceled",
                    "Dict[str, Any]"
                ]
            }
        },
        "EventMetricsCollector._get_arg_metric_key": {
            "name": "_get_arg_metric_key",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CommitmentMadeEventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "event_name": [
                    "str",
                    "Dict[str, object]"
                ]
            }
        },
        "CommitmentMadeEventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ],
                "registry": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ]
            }
        },
        "ReStakeEventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "event_name": [
                    "str",
                    "Dict[str, object]"
                ]
            }
        },
        "ReStakeEventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ],
                "registry": [
                    "Optional[int]"
                ]
            }
        },
        "WindDownEventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "event_name": [
                    "str",
                    "Dict[str, object]"
                ]
            }
        },
        "WindDownEventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ],
                "registry": [
                    "Optional[int]"
                ]
            }
        },
        "OperatorBondedEventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "str",
                    "int"
                ],
                "operator_address": [
                    "str",
                    "Optional[str]",
                    "Dict[str, list]",
                    "Optional['SparkSession']",
                    "List[str]"
                ],
                "event_name": [
                    "str"
                ]
            }
        },
        "OperatorBondedEventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ],
                "registry": [
                    "Optional[int]"
                ]
            }
        },
        "OperatorBondedEventMetricsCollector._event_occurred": {
            "name": "_event_occurred",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "[dict]",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/nucypher/utilities/prometheus/metrics.py": {
        "collect_prometheus_metrics": {
            "name": "collect_prometheus_metrics",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics_collectors": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "start_prometheus_exporter": {
            "name": "start_prometheus_exporter",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "ursula": [
                    "str",
                    "bool"
                ],
                "prometheus_config": [
                    "dict",
                    "str"
                ],
                "registry": [
                    "str",
                    "dict",
                    "aiohttp.web.Request",
                    "Callable",
                    "nucypher.config.characters.UrsulaConfiguration"
                ]
            }
        },
        "create_metrics_collectors": {
            "name": "create_metrics_collectors",
            "location": 172,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "ursula": [
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "rl_algorithms.utils.config.ConfigDict",
                    "List[Tuple[str, float]]",
                    "List[Tuple[int, ...]]"
                ],
                "metrics_prefix": [
                    "Optional[preacher.core.value.Value.Context]",
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float",
                    "click.core.Context"
                ]
            }
        },
        "PrometheusMetricsConfig.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Callable",
                    "Callable[..., None]"
                ],
                "metrics_prefix": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "listen_address": [
                    "List[str]",
                    "str",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "collection_interval": [
                    "int",
                    "Callable",
                    "Callable[..., None]"
                ],
                "start_now": [
                    "int",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "MetricsEncoder.default": {
            "name": "default",
            "location": 69,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "trezor.utils.Writer",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "JSONMetricsResource.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JSONMetricsResource.render_GET": {
            "name": "render_GET",
            "location": 85,
            "return": [
                "Callable",
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bool",
                    "Union[int, str]"
                ]
            }
        },
        "JSONMetricsResource.get_exemplar": {
            "name": "get_exemplar",
            "location": 90,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "list"
            ],
            "arguments": {
                "sample": [
                    "str",
                    "bool",
                    "core.job.BaseJob"
                ],
                "metric": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "JSONMetricsResource.get_sample": {
            "name": "get_sample",
            "location": 104,
            "return": [
                "str",
                "dict",
                "List[str]",
                "IO",
                "list",
                "tartare.core.readers.CsvReader",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "str",
                    "Tuple[str]"
                ],
                "metric": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "JSONMetricsResource.get_metric": {
            "name": "get_metric",
            "location": 113,
            "return": [
                "bool",
                "Callable[[], bool]",
                "List[Dict[str, str]]",
                "int",
                "Dict[str, Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str",
                    "bool"
                ]
            }
        },
        "JSONMetricsResource.generate_latest_json": {
            "name": "generate_latest_json",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/nucypher/utilities/prometheus/__init__.py": {},
    "nucypher-development/scripts/demos/demo_endpoint_scratchpad.py": {},
    "nucypher-development/scripts/hooks/nucypher_agents.py": {},
    "nucypher-development/scripts/installation/install_solc.py": {
        "get_solc_config_path": {
            "name": "get_solc_config_path",
            "location": 33,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "get_packaged_solc_version": {
            "name": "get_packaged_solc_version",
            "location": 40,
            "return": [
                "str",
                "Optional[int]",
                "Union[str, Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "get_solc_version": {
            "name": "get_solc_version",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "install_solc": {
            "name": "install_solc",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/scripts/local_fleet/run_local_ursula_fleet.py": {
        "spin_up_federated_ursulas": {
            "name": "spin_up_federated_ursulas",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "quantity": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "spin_up_federated_ursulas.UrsulaProcessProtocol.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "spin_up_federated_ursulas.UrsulaProcessProtocol.processEnded": {
            "name": "processEnded",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "bool",
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/scripts/local_fleet/run_lonely_ursula.py": {},
    "nucypher-development/scripts/local_fleet/run_single_ursula.py": {},
    "nucypher-development/scripts/migrations/configuration_v1_to_v2.py": {
        "configuration_v1_to_v2": {
            "name": "configuration_v1_to_v2",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "nucypher-development/scripts/migrations/configuration_v3_to_v4.py": {
        "configuration_v3_to_v4": {
            "name": "configuration_v3_to_v4",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "nucypher-development/scripts/release/test_package.py": {
        "create_venv": {
            "name": "create_venv",
            "location": 32,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "parent_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "path.Path"
                ]
            }
        },
        "find_wheel": {
            "name": "find_wheel",
            "location": 49,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "project_path": [
                    "pathlib.Path",
                    "List[pathlib.Path]",
                    "Tuple[str, str]"
                ]
            }
        },
        "install_wheel": {
            "name": "install_wheel",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "venv_path": [
                    "pathlib.Path",
                    "str"
                ],
                "wheel_path": [
                    "pathlib.Path",
                    "str"
                ],
                "extras": [
                    "Tuple[str]",
                    "Optional[Tuple[str, ...]]",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_install_local_wheel": {
            "name": "test_install_local_wheel",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/scripts/solidity_doc/generate_doc.py": {
        "merge_and_update": {
            "name": "merge_and_update",
            "location": 40,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "source": [
                    "dict",
                    "str",
                    "Mapping[str, Any]",
                    "Mapping"
                ],
                "destination": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "generate_doc": {
            "name": "generate_doc",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "schema2rst": {
            "name": "schema2rst",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Tuple[Any, Any, Any, Any, Any]",
                    "int",
                    "str",
                    "BinaryIO"
                ],
                "excluded_key": [
                    "bytes",
                    "Tuple[Any, Any, Any, Any, Any]",
                    "int",
                    "str",
                    "BinaryIO"
                ],
                "tree_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "patch": {
            "name": "patch",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "patch._literal": {
            "name": "_literal",
            "location": 109,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "val": [
                    "Callable",
                    "str",
                    "types.CategoryType",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/conftest.py": {
        "__very_pretty_and_insecure_scrypt_do_not_use": {
            "name": "__very_pretty_and_insecure_scrypt_do_not_use",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "request": []
            }
        },
        "monkeysession": {
            "name": "monkeysession",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "dict"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "str"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "items": [
                    "List[T]",
                    "Dict[bytes, bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "check_character_state_after_test": {
            "name": "check_character_state_after_test",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ]
            }
        },
        "mock_datastore": {
            "name": "mock_datastore",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "monkeysession": [
                    "str",
                    "int"
                ]
            }
        },
        "mock_get_external_ip_from_url_source": {
            "name": "mock_get_external_ip_from_url_source",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "session_mocker": []
            }
        },
        "disable_check_grant_requirements": {
            "name": "disable_check_grant_requirements",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "session_mocker": []
            }
        },
        "__very_pretty_and_insecure_scrypt_do_not_use.__insecure_derive": {
            "name": "__insecure_derive",
            "location": 62,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "_scrypt": [
                    "str",
                    "Callable"
                ],
                "key_material": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/constants.py": {},
    "nucypher-development/tests/fixtures.py": {
        "tempfile_path": {
            "name": "tempfile_path",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "temp_dir_path": {
            "name": "temp_dir_path",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_datastore": {
            "name": "test_datastore",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "certificates_tempdir": {
            "name": "certificates_tempdir",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ursula_federated_test_config": {
            "name": "ursula_federated_test_config",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "str",
                    "bool",
                    "dict",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "alice_federated_test_config": {
            "name": "alice_federated_test_config",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "bool",
                    "dict",
                    "pathlib.Path"
                ]
            }
        },
        "bob_federated_test_config": {
            "name": "bob_federated_test_config",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ursula_decentralized_test_config": {
            "name": "ursula_decentralized_test_config",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "str",
                    "Callable[[], Any]",
                    "List[str]",
                    "bool"
                ],
                "temp_dir_path": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "alice_blockchain_test_config": {
            "name": "alice_blockchain_test_config",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "nucypher.cli.config.GroupGeneralConfig",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ],
                "testerchain": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "nucypher.cli.config.GroupGeneralConfig",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ],
                "test_registry": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "nucypher.cli.config.GroupGeneralConfig",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ]
            }
        },
        "bob_blockchain_test_config": {
            "name": "bob_blockchain_test_config",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[\"Frame\"]"
                ],
                "test_registry": [
                    "str",
                    "Optional[\"Frame\"]"
                ]
            }
        },
        "idle_federated_policy": {
            "name": "idle_federated_policy",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "federated_alice": [
                    "Union[BinaryIO, str]",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[pypi2nix.path.Path]"
                ],
                "federated_bob": [
                    "Union[BinaryIO, str]",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[pypi2nix.path.Path]"
                ]
            }
        },
        "enacted_federated_policy": {
            "name": "enacted_federated_policy",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "idle_federated_policy": [
                    "int",
                    "Callable",
                    "str"
                ],
                "federated_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "federated_treasure_map": {
            "name": "federated_treasure_map",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_bob": []
            }
        },
        "idle_blockchain_policy": {
            "name": "idle_blockchain_policy",
            "location": 253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "blockchain_alice": [
                    "int",
                    "trezor.utils.Writer",
                    "cmk.utils.type_defs.UserId"
                ],
                "blockchain_bob": [
                    "str",
                    "bytes",
                    "Union[int, float]"
                ],
                "application_economics": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "enacted_blockchain_policy": {
            "name": "enacted_blockchain_policy",
            "location": 269,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "idle_blockchain_policy": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ],
                "blockchain_ursulas": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        },
        "blockchain_treasure_map": {
            "name": "blockchain_treasure_map",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_blockchain_policy": [],
                "blockchain_bob": []
            }
        },
        "random_blockchain_policy": {
            "name": "random_blockchain_policy",
            "location": 294,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "Optional[str]",
                    "Iterable[int]",
                    "int"
                ],
                "blockchain_alice": [
                    "Union[BinaryIO, str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "blockchain_bob": [
                    "Union[BinaryIO, str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "application_economics": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "capsule_side_channel": {
            "name": "capsule_side_channel",
            "location": 311,
            "return": [
                "str",
                "float",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "int"
                ]
            }
        },
        "capsule_side_channel_blockchain": {
            "name": "capsule_side_channel_blockchain",
            "location": 335,
            "return": [
                "str",
                "float",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "enacted_blockchain_policy": [
                    "int"
                ]
            }
        },
        "random_policy_label": {
            "name": "random_policy_label",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "federated_alice": {
            "name": "federated_alice",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {
                "alice_federated_test_config": [
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "blockchain_alice": {
            "name": "blockchain_alice",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "alice_blockchain_test_config": [
                    "dict",
                    "str",
                    "Optional[str]"
                ],
                "testerchain": [
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "federated_bob": {
            "name": "federated_bob",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {
                "bob_federated_test_config": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "blockchain_bob": {
            "name": "blockchain_bob",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "bob_blockchain_test_config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "testerchain": [
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "federated_ursulas": {
            "name": "federated_ursulas",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Optional[int]",
                    "dict",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "lonely_ursula_maker": {
            "name": "lonely_ursula_maker",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "federated_porter": {
            "name": "federated_porter",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": []
            }
        },
        "blockchain_porter": {
            "name": "blockchain_porter",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "Callable",
                    "str",
                    "Mapping"
                ],
                "testerchain": [
                    "int",
                    "bool",
                    "Dict[Tuple[int, ...], int]",
                    "float",
                    "constants.HttpVersion"
                ],
                "test_registry": [
                    "Callable",
                    "str",
                    "Mapping"
                ]
            }
        },
        "application_economics": {
            "name": "application_economics",
            "location": 487,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_registry": {
            "name": "test_registry",
            "location": 493,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "tests.async_mock.Mock",
                "float"
            ],
            "arguments": {}
        },
        "_make_testerchain": {
            "name": "_make_testerchain",
            "location": 498,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_backend": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Container[str]]",
                    "bytes"
                ]
            }
        },
        "_testerchain": {
            "name": "_testerchain",
            "location": 525,
            "return": [
                "tests.utils.blockchain.TesterBlockchain"
            ],
            "arguments": {}
        },
        "testerchain": {
            "name": "testerchain",
            "location": 531,
            "return": [
                "tests.utils.blockchain.TesterBlockchain"
            ],
            "arguments": {
                "_testerchain": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_mock_testerchain": {
            "name": "_mock_testerchain",
            "location": 558,
            "return": [
                "tests.mock.interfaces.MockBlockchain"
            ],
            "arguments": {}
        },
        "deployer_transacting_power": {
            "name": "deployer_transacting_power",
            "location": 566,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.UserId",
                    "Optional[Iterable[T]]",
                    "bool"
                ]
            }
        },
        "_make_agency": {
            "name": "_make_agency",
            "location": 574,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "web3.contracContract",
                    "int",
                    "str",
                    "Callable",
                    "web3.Web3"
                ],
                "token_economics": [
                    "web3.contracContract",
                    "int",
                    "str",
                    "Callable",
                    "web3.Web3"
                ],
                "deployer_transacting_power": [
                    "Optional[str]",
                    "int",
                    "dict"
                ],
                "threshold_staking": [
                    "web3.contracContract",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "test_registry_source_manager": {
            "name": "test_registry_source_manager",
            "location": 590,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "str",
                    "apistar.interfaces.App"
                ]
            }
        },
        "agency": {
            "name": "agency",
            "location": 596,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "application_economics": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "test_registry_source_manager": [
                    "bool",
                    "Optional[bool]",
                    "Tuple[str]",
                    "tuple",
                    "Optional[bytes]"
                ],
                "deployer_transacting_power": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "list"
                ],
                "threshold_staking": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "agency_local_registry": {
            "name": "agency_local_registry",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "agency": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "test_registry": [
                    "str"
                ]
            }
        },
        "threshold_staking": {
            "name": "threshold_staking",
            "location": 617,
            "return": [
                ""
            ],
            "arguments": {
                "deploy_contract": [
                    "BaseException"
                ]
            }
        },
        "staking_providers": {
            "name": "staking_providers",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "raiden.utils.Address",
                    "list",
                    "patchwork.datastore.Address",
                    "int"
                ],
                "agency": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "raiden.utils.Address",
                    "dict",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ],
                "threshold_staking": [
                    "float",
                    "Dict[str, Any]",
                    "int",
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "blockchain_ursulas": {
            "name": "blockchain_ursulas",
            "location": 661,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "bool",
                    "Sequence[int]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ],
                "staking_providers": [
                    "bool",
                    "Callable[[], None]"
                ],
                "ursula_decentralized_test_config": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "bool",
                    "Sequence[int]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ]
            }
        },
        "policy_rate": {
            "name": "policy_rate",
            "location": 698,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "policy_value": {
            "name": "policy_value",
            "location": 704,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "application_economics": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int",
                    "List[Dict[str, str]]"
                ],
                "policy_rate": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "funded_blockchain": {
            "name": "funded_blockchain",
            "location": 710,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.Address",
                    "raiden.utils.Secret",
                    "List[str]"
                ],
                "agency": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "dict",
                    "int",
                    "constants.HttpVersion",
                    "str"
                ],
                "application_economics": [
                    "raiden.utils.Address",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.WithdrawAmount",
                    "raiden.utils.BlockExpiration"
                ],
                "test_registry": [
                    "raiden.utils.Address",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.WithdrawAmount",
                    "raiden.utils.BlockExpiration"
                ]
            }
        },
        "stakeholder_config_file_location": {
            "name": "stakeholder_config_file_location",
            "location": 731,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "software_stakeholder": {
            "name": "software_stakeholder",
            "location": 741,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Tuple[str, dict]",
                    "bytes",
                    "bool"
                ],
                "agency": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Callable[..., Any]]",
                    "pypi2nix.logger.Logger",
                    "Sequence[str]"
                ],
                "stakeholder_config_file_location": [
                    "List[str]",
                    "bool",
                    "List[Sequence[pathlib.Path]]",
                    "Set[str]",
                    "str"
                ],
                "test_registry": [
                    "str",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "stakeholder_configuration": {
            "name": "stakeholder_configuration",
            "location": 787,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config"
            ],
            "arguments": {
                "testerchain": [
                    "qutebrowser.utils.usertypes.Backend",
                    "str",
                    "List[str]",
                    "Iterable[T]",
                    "Optional[basilisp.lang.interfaces.IPersistentMap]"
                ],
                "agency_local_registry": [
                    "qutebrowser.utils.usertypes.Backend",
                    "str",
                    "List[str]",
                    "Iterable[T]",
                    "Optional[basilisp.lang.interfaces.IPersistentMap]"
                ]
            }
        },
        "manual_operator": {
            "name": "manual_operator",
            "location": 794,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "hackathon.utils.utils.DataMessage",
                    "str",
                    "raiden.utils.Any",
                    "Sequence[int]"
                ]
            }
        },
        "log_in_and_out_of_test": {
            "name": "log_in_and_out_of_test",
            "location": 817,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 827,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "Callable[..., Awaitable]"
                ],
                "test_registry": [
                    "bool",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "get_random_checksum_address": {
            "name": "get_random_checksum_address",
            "location": 840,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {}
        },
        "fleet_of_highperf_mocked_ursulas": {
            "name": "fleet_of_highperf_mocked_ursulas",
            "location": 850,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Optional[int]",
                    "str",
                    "cmk.base.config.HostConfig",
                    "config.Config"
                ],
                "request": [
                    "Optional[str]"
                ]
            }
        },
        "highperf_mocked_alice": {
            "name": "highperf_mocked_alice",
            "location": 889,
            "return": [
                ""
            ],
            "arguments": {
                "fleet_of_highperf_mocked_ursulas": [
                    "bool",
                    "config.Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "highperf_mocked_bob": {
            "name": "highperf_mocked_bob",
            "location": 906,
            "return": [
                "Callable[[bytes], None]",
                "float",
                "str",
                "List[str]",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "fleet_of_highperf_mocked_ursulas": [
                    "bool",
                    "config.Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_emitter": {
            "name": "test_emitter",
            "location": 928,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "tests.async_mock.Mock",
                "float"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "click_runner": {
            "name": "click_runner",
            "location": 936,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "nominal_federated_configuration_fields": {
            "name": "nominal_federated_configuration_fields",
            "location": 942,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_allocation_infile": {
            "name": "mock_allocation_infile",
            "location": 951,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "bool",
                    "str"
                ],
                "application_economics": [
                    "str",
                    "int",
                    "bool"
                ],
                "get_random_checksum_address": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "new_local_registry": {
            "name": "new_local_registry",
            "location": 970,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "custom_filepath": {
            "name": "custom_filepath",
            "location": 981,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "custom_filepath_2": {
            "name": "custom_filepath_2",
            "location": 991,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "worker_configuration_file_location": {
            "name": "worker_configuration_file_location",
            "location": 1003,
            "return": [
                "str",
                "IO[Any]",
                "pathlib.Path",
                "types.StrPath"
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "Sequence[int]",
                    "dict"
                ]
            }
        },
        "stakeholder_configuration_file_location": {
            "name": "stakeholder_configuration_file_location",
            "location": 1009,
            "return": [
                "str",
                "IO[Any]",
                "pathlib.Path",
                "types.StrPath"
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "Sequence[int]",
                    "dict"
                ]
            }
        },
        "mock_teacher_nodes": {
            "name": "mock_teacher_nodes",
            "location": 1015,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "disable_interactive_keystore_generation": {
            "name": "disable_interactive_keystore_generation",
            "location": 1021,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "basic_auth_file": {
            "name": "basic_auth_file",
            "location": 1030,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "os.PathLike"
                ]
            }
        },
        "_make_testerchain._get_buffered_gas_estimate": {
            "name": "_get_buffered_gas_estimate",
            "location": 509,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "web3": [
                    "Callable",
                    "tuple",
                    "Iterable[bool]"
                ],
                "transaction": [
                    "Callable",
                    "tuple",
                    "Iterable[bool]"
                ],
                "gas_buffer": [
                    "Callable",
                    "tuple",
                    "Iterable[bool]"
                ]
            }
        },
        "deploy_contract.wrapped": {
            "name": "wrapped",
            "location": 828,
            "return": [
                "trezor.utils.Writer",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "contract_name": [
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "get_random_checksum_address._get_random_checksum_address": {
            "name": "_get_random_checksum_address",
            "location": 841,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "capsule_side_channel._CapsuleSideChannel.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "capsule_side_channel._CapsuleSideChannel.__call__": {
            "name": "__call__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "capsule_side_channel._CapsuleSideChannel.reset": {
            "name": "reset",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "plaintext_passthrough": []
            }
        },
        "capsule_side_channel_blockchain._CapsuleSideChannel.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "capsule_side_channel_blockchain._CapsuleSideChannel.__call__": {
            "name": "__call__",
            "location": 340,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "pathlib.Path",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "capsule_side_channel_blockchain._CapsuleSideChannel.reset": {
            "name": "reset",
            "location": 348,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "plaintext_passthrough": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "lonely_ursula_maker._PartialUrsulaMaker.__call__": {
            "name": "__call__",
            "location": 433,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "pathlib.Path",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "lonely_ursula_maker._PartialUrsulaMaker.clean": {
            "name": "clean",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/markers.py": {},
    "nucypher-development/tests/run_tests.py": {
        "run": {
            "name": "run",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "NucypherPytestRunner.pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherPytestRunner.pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/test_package.py": {
        "import_mocker": {
            "name": "import_mocker",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_use_vladimir_without_development_installation": {
            "name": "test_use_vladimir_without_development_installation",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "import_mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "jsonlog.tests.capture.Capture"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_get_pyevm_backend_without_development_installation": {
            "name": "test_get_pyevm_backend_without_development_installation",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "import_mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_rpc_test_client_without_development_installation": {
            "name": "test_rpc_test_client_without_development_installation",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "import_mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "TestsImportMocker.mock_import": {
            "name": "mock_import",
            "location": 29,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TestsImportMocker.start": {
            "name": "start",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestsImportMocker.stop": {
            "name": "stop",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestsImportMocker.__enter__": {
            "name": "__enter__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestsImportMocker.__exit__": {
            "name": "__exit__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "nucypher-development/tests/__init__.py": {},
    "nucypher-development/tests/acceptance/blockchain/actors/conftest.py": {},
    "nucypher-development/tests/acceptance/blockchain/actors/test_deployer.py": {
        "test_rapid_deployment": {
            "name": "test_rapid_deployment",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "application_economics": [
                    "bytes",
                    "bool",
                    "str",
                    "int"
                ],
                "test_registry": [],
                "temp_dir_path": [
                    "str",
                    "Optional[str]"
                ],
                "get_random_checksum_address": [
                    "int",
                    "str",
                    "raiden.utils.TokenAmount"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/actors/test_investigator.py": {
        "mock_ursula": {
            "name": "mock_ursula",
            "location": 33,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "pricemonitor.config.Coin",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "account": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "mocker": []
            }
        },
        "test_investigator_requests_slashing": {
            "name": "test_investigator_requests_slashing",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "eth.abc.AtomicDatabaseAPI",
                    "bool",
                    "str"
                ],
                "test_registry": [
                    "str",
                    "int"
                ],
                "agency": [
                    "str"
                ],
                "application_economics": [
                    "str",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ],
                "mocker": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/actors/test_operator.py": {
        "log": {
            "name": "log",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "Exception"
                ]
            }
        },
        "test_work_tracker": {
            "name": "test_work_tracker",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "testerchain": [],
                "test_registry": [],
                "staker": [],
                "agency": [],
                "application_economics": [],
                "ursula_decentralized_test_config": []
            }
        },
        "test_ursula_operator_confirmation": {
            "name": "test_ursula_operator_confirmation",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_decentralized_test_config": [],
                "testerchain": [
                    "int"
                ],
                "threshold_staking": [
                    "web3.contracContract"
                ],
                "agency": [],
                "application_economics": [
                    "tests.conftesWorker",
                    "slice"
                ],
                "test_registry": []
            }
        },
        "test_ursula_operator_confirmation_autopilot": {
            "name": "test_ursula_operator_confirmation_autopilot",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ],
                "ursula_decentralized_test_config": [
                    "Dict[str, Any]"
                ],
                "testerchain": [
                    "Dict[str, Any]"
                ],
                "threshold_staking": [
                    "Dict[str, Any]"
                ],
                "agency": [
                    "Dict[str, Any]"
                ],
                "application_economics": [
                    "Dict[str, Any]"
                ],
                "test_registry": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_work_tracker.start": {
            "name": "start",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_work_tracker.advance_one_period": {
            "name": "advance_one_period",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_work_tracker.check_pending_commitments": {
            "name": "check_pending_commitments",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number_of_commitments": [
                    "str",
                    "int"
                ]
            }
        },
        "test_work_tracker.pending_commitments": {
            "name": "pending_commitments",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_work_tracker.advance_one_cycle": {
            "name": "advance_one_cycle",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_work_tracker.advance_until_replacement_indicated": {
            "name": "advance_until_replacement_indicated",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_work_tracker.verify_unmined_commitment": {
            "name": "verify_unmined_commitment",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_work_tracker.verify_replacement_commitment": {
            "name": "verify_replacement_commitment",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_work_tracker.verify_confirmed": {
            "name": "verify_confirmed",
            "location": 132,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_ursula_operator_confirmation_autopilot.start": {
            "name": "start",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ursula_operator_confirmation_autopilot.verify_confirmed": {
            "name": "verify_confirmed",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_work_tracker.check_pending_commitments._check_pending_commitments": {
            "name": "_check_pending_commitments",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/agents/test_adjudicator_agent.py": {
        "mock_ursula": {
            "name": "mock_ursula",
            "location": 37,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "pricemonitor.config.Coin",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "account": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "mocker": []
            }
        },
        "test_adjudicator_slashes": {
            "name": "test_adjudicator_slashes",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [],
                "testerchain": [],
                "application_economics": [
                    "int",
                    "bool",
                    "float"
                ],
                "test_registry": [
                    "float"
                ],
                "mocker": []
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/agents/test_contract_agency.py": {
        "test_get_agent_with_different_registries": {
            "name": "test_get_agent_with_different_registries",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "application_economics": [
                    "bool"
                ],
                "agency": [
                    "bool"
                ],
                "test_registry": [],
                "agency_local_registry": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/agents/test_pre_application_agent.py": {
        "test_get_min_authorization": {
            "name": "test_get_min_authorization",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "str",
                    "bool"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ],
                "application_economics": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_get_min_seconds": {
            "name": "test_get_min_seconds",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "str",
                    "bool"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ],
                "application_economics": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_authorized_tokens": {
            "name": "test_authorized_tokens",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agency": [],
                "application_economics": [],
                "test_registry": [],
                "staking_providers": [
                    "bool"
                ]
            }
        },
        "test_staking_providers_and_operators_relationships": {
            "name": "test_staking_providers_and_operators_relationships",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agency": [],
                "test_registry": [],
                "threshold_staking": [],
                "application_economics": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_staker_population": {
            "name": "test_get_staker_population",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "bool"
                ],
                "staking_providers": [
                    "blockchain.Blockchain"
                ],
                "test_registry": []
            }
        },
        "test_get_swarm": {
            "name": "test_get_swarm",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "bool"
                ],
                "staking_providers": [
                    "Union[int, str]",
                    "int"
                ],
                "test_registry": []
            }
        },
        "test_sample_staking_providers": {
            "name": "test_sample_staking_providers",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "test_registry": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_get_staking_provider_info": {
            "name": "test_get_staking_provider_info",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [],
                "testerchain": [],
                "test_registry": []
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/agents/test_sampling_distribution.py": {
        "test_sampling_distribution": {
            "name": "test_sampling_distribution",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "test_registry": [
                    "Dict[str, Any]",
                    "Callable",
                    "str"
                ],
                "threshold_staking": [
                    "List[str]",
                    "str"
                ],
                "application_economics": [
                    "str"
                ]
            }
        },
        "probability_reference_no_replacement": {
            "name": "probability_reference_no_replacement",
            "location": 100,
            "return": [
                "int",
                "Sequence[int]"
            ],
            "arguments": {
                "weights": [],
                "idxs": [
                    "List[int]",
                    "Union[List[float], List[int]]",
                    "List[float]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "test_weighted_sampler": {
            "name": "test_weighted_sampler",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "sample_size": [
                    "int",
                    "Tuple[int]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/agents/test_token_agent.py": {
        "agent": {
            "name": "agent",
            "location": 29,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "dict"
                ],
                "test_registry": [
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_token_properties": {
            "name": "test_token_properties",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "agent": []
            }
        },
        "test_get_balance": {
            "name": "test_get_balance",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "int"
                ],
                "application_economics": [
                    "str",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "test_approve_transfer": {
            "name": "test_approve_transfer",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "float"
                ],
                "application_economics": []
            }
        },
        "test_transfer": {
            "name": "test_transfer",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [],
                "application_economics": [
                    "str"
                ]
            }
        },
        "test_approve_and_call": {
            "name": "test_approve_and_call",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "int"
                ],
                "application_economics": [
                    "int"
                ],
                "deploy_contract": []
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/deployers/conftest.py": {
        "token_deployer": {
            "name": "token_deployer",
            "location": 27,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "List[dict]",
                    "str"
                ],
                "test_registry": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "transacting_power": {
            "name": "transacting_power",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str"
                ],
                "test_registry": [
                    "bool",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "deployment_progress": {
            "name": "deployment_progress",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "deployment_progress.DeploymentProgress.update": {
            "name": "update",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/deployers/test_adjudicator_deployer.py": {
        "test_adjudicator_deployer": {
            "name": "test_adjudicator_deployer",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "application_economics": [],
                "deployment_progress": [
                    "Sequence[str]",
                    "float",
                    "int"
                ],
                "test_registry": []
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/deployers/test_interdeployer_integration.py": {
        "test_deploy_ethereum_contracts": {
            "name": "test_deploy_ethereum_contracts",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deployment_progress": [
                    "int"
                ],
                "test_registry": []
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/deployers/test_pre_application_deployer.py": {
        "pre_application_deployer": {
            "name": "pre_application_deployer",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "Callable[..., Awaitable]"
                ],
                "test_registry": [
                    "Callable",
                    "bool",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "str"
                ],
                "application_economics": [
                    "Callable",
                    "bool",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "str"
                ],
                "threshold_staking": [
                    "Callable",
                    "bool",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "str"
                ]
            }
        },
        "test_pre_application_deployment": {
            "name": "test_pre_application_deployment",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "pre_application_deployer": [
                    "Mapping[str, Any]",
                    "str",
                    "Optional[str]"
                ],
                "deployment_progress": [
                    "blockchain.Blockchain",
                    "str",
                    "Iterable[Any]"
                ],
                "test_registry": [],
                "testerchain": [],
                "transacting_power": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Iterable[Tuple[int, int]]"
                ],
                "threshold_staking": []
            }
        },
        "test_make_agent": {
            "name": "test_make_agent",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "pre_application_deployer": [
                    "int",
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_deployment_parameters": {
            "name": "test_deployment_parameters",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "pre_application_deployer": [
                    "int",
                    "str"
                ],
                "test_registry": [
                    "str"
                ],
                "application_economics": []
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/deployers/test_staking_escrow_deployer.py": {
        "staking_escrow_deployer": {
            "name": "staking_escrow_deployer",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "Callable",
                    "dict",
                    "float"
                ],
                "threshold_staking": [
                    "int",
                    "bool",
                    "str"
                ],
                "application_economics": [
                    "int",
                    "bool",
                    "str"
                ],
                "test_registry": [
                    "int",
                    "bool",
                    "str"
                ],
                "deployment_progress": [
                    "str",
                    "bool"
                ],
                "transacting_power": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_staking_escrow_deployment": {
            "name": "test_staking_escrow_deployment",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "staking_escrow_deployer": [],
                "deployment_progress": [],
                "transacting_power": []
            }
        },
        "test_staking_escrow_has_dispatcher": {
            "name": "test_staking_escrow_has_dispatcher",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "test_registry": [
                    "str"
                ],
                "transacting_power": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "test_upgrade": {
            "name": "test_upgrade",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "test_registry": [
                    "str"
                ],
                "application_economics": [
                    "str"
                ],
                "transacting_power": [
                    "str"
                ],
                "threshold_staking": [
                    "str"
                ]
            }
        },
        "test_rollback": {
            "name": "test_rollback",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Dict[str, List[str]]",
                    "int"
                ],
                "test_registry": [
                    "str"
                ],
                "transacting_power": [
                    "str"
                ],
                "threshold_staking": [
                    "str"
                ]
            }
        },
        "test_deploy_bare_upgradeable_contract_deployment": {
            "name": "test_deploy_bare_upgradeable_contract_deployment",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "test_registry": [
                    "str"
                ],
                "application_economics": [
                    "str"
                ],
                "transacting_power": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, int]"
                ],
                "threshold_staking": [
                    "str"
                ]
            }
        },
        "test_deployer_version_management": {
            "name": "test_deployer_version_management",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool",
                    "int"
                ],
                "test_registry": [
                    "int",
                    "List[str]"
                ],
                "application_economics": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_manual_proxy_retargeting": {
            "name": "test_manual_proxy_retargeting",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "test_registry": [
                    "List[str]",
                    "str"
                ],
                "application_economics": [
                    "List[str]",
                    "str"
                ],
                "transacting_power": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/deployers/test_token_deployer.py": {
        "test_token_deployer_and_agent": {
            "name": "test_token_deployer_and_agent",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "deployment_progress": [
                    "int"
                ],
                "test_registry": []
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/interfaces/test_economics_acceptance.py": {
        "test_retrieving_from_blockchain": {
            "name": "test_retrieving_from_blockchain",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "application_economics": [],
                "test_registry": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/interfaces/test_handle_multiversion_contracts.py": {
        "test_deployer_interface_multiversion_contract": {
            "name": "test_deployer_interface_multiversion_contract",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/acceptance/blockchain/interfaces/test_solidity_compiler.py": {
        "test_nucypher_contract_compiled": {
            "name": "test_nucypher_contract_compiled",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "test_registry": [
                    "str"
                ]
            }
        },
        "test_multi_source_compilation": {
            "name": "test_multi_source_compilation",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "float"
                ]
            }
        },
        "test_multi_versions": {
            "name": "test_multi_versions",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/acceptance/blockchain/interfaces/test_testerchain.py": {
        "another_testerchain": {
            "name": "another_testerchain",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_testerchain_creation": {
            "name": "test_testerchain_creation",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "another_testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_multiversion_contract": {
            "name": "test_multiversion_contract",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_block_confirmations": {
            "name": "test_block_confirmations",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "Dict[int, Dict[str, float]]",
                    "Optional[Dict[str, Any]]"
                ],
                "mocker": [
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "raiden.utils.MessageID"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/blockchain/interfaces/test_transacting_power.py": {
        "test_transacting_power_sign_message": {
            "name": "test_transacting_power_sign_message",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        },
        "test_transacting_power_sign_transaction": {
            "name": "test_transacting_power_sign_transaction",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        },
        "test_transacting_power_sign_agent_transaction": {
            "name": "test_transacting_power_sign_agent_transaction",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agency": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "test_registry": []
            }
        }
    },
    "nucypher-development/tests/acceptance/characters/conftest.py": {},
    "nucypher-development/tests/acceptance/characters/test_decentralized_grant.py": {
        "check": {
            "name": "check",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "policy": [
                    "int",
                    "Callable"
                ],
                "bob": [
                    "int",
                    "Callable"
                ],
                "ursulas": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_decentralized_grant_subscription_manager": {
            "name": "test_decentralized_grant_subscription_manager",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "bool"
                ],
                "blockchain_bob": [
                    "bool"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/characters/test_freerider_attacks.py": {
        "test_try_to_post_free_service_by_hacking_enact": {
            "name": "test_try_to_post_free_service_by_hacking_enact",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "bool"
                ],
                "blockchain_alice": [
                    "dict"
                ],
                "blockchain_bob": [
                    "float",
                    "bool"
                ],
                "agency": [
                    "bool"
                ],
                "testerchain": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/characters/test_transacting_power_acceptance.py": {
        "test_character_transacting_power_signing": {
            "name": "test_character_transacting_power_signing",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "agency": [],
                "test_registry": [
                    "str",
                    "Optional[Tuple[float, float]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/characters/test_ursula_prepares_to_act_as_worker.py": {
        "test_stakers_bond_to_ursulas": {
            "name": "test_stakers_bond_to_ursulas",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "tuple"
                ],
                "test_registry": [
                    "str"
                ],
                "staking_providers": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ],
                "ursula_decentralized_test_config": [
                    "str",
                    "tuple"
                ]
            }
        },
        "test_blockchain_ursula_substantiates_stamp": {
            "name": "test_blockchain_ursula_substantiates_stamp",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_blockchain_ursula_verifies_stamp": {
            "name": "test_blockchain_ursula_verifies_stamp",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "remote_vladimir": {
            "name": "remote_vladimir",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_vladimir_cannot_verify_interface_with_ursulas_signing_key": {
            "name": "test_vladimir_cannot_verify_interface_with_ursulas_signing_key",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_vladimir_uses_his_own_signing_key": {
            "name": "test_vladimir_uses_his_own_signing_key",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "tests.async_mock.MagicMock",
                    "str"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "cli_ui.tests.MessageRecorder"
                ],
                "test_registry": [
                    "tests._TestServerFactory"
                ]
            }
        },
        "test_vladimir_invalidity_without_stake": {
            "name": "test_vladimir_invalidity_without_stake",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ],
                "blockchain_alice": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_blockchain_ursulas_reencrypt": {
            "name": "test_blockchain_ursulas_reencrypt",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "int",
                    "float",
                    "bool",
                    "List[Tuple[Any, Any]]"
                ],
                "blockchain_alice": [
                    "int",
                    "str",
                    "Callable",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentAmount"
                ],
                "blockchain_bob": [
                    "int",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.FeeAmount",
                    "str",
                    "float"
                ],
                "policy_value": [
                    "int",
                    "str",
                    "Callable",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentAmount"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/characters/test_ursula_web_status.py": {
        "ursula": {
            "name": "ursula",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_ursula_html_renders": {
            "name": "test_ursula_html_renders",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [],
                "client": []
            }
        },
        "test_decentralized_json_status_endpoint": {
            "name": "test_decentralized_json_status_endpoint",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [],
                "client": [
                    "pypi2nix.path.Path"
                ],
                "omit_known_nodes": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/characters/control/conftest.py": {
        "alice_web_controller_test_client": {
            "name": "alice_web_controller_test_client",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "str"
                ]
            }
        },
        "bob_web_controller_test_client": {
            "name": "bob_web_controller_test_client",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_bob": [
                    "str"
                ]
            }
        },
        "enrico_web_controller_test_client": {
            "name": "enrico_web_controller_test_client",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel_blockchain": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "enrico_web_controller_from_alice": {
            "name": "enrico_web_controller_from_alice",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "Callable",
                    "bytes",
                    "int"
                ],
                "random_policy_label": [
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "alice_rpc_test_client": {
            "name": "alice_rpc_test_client",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "str"
                ]
            }
        },
        "bob_rpc_controller": {
            "name": "bob_rpc_controller",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_bob": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "enrico_rpc_controller_test_client": {
            "name": "enrico_rpc_controller_test_client",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel_blockchain": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "enrico_rpc_controller_from_alice": {
            "name": "enrico_rpc_controller_from_alice",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "Callable",
                    "bytes",
                    "int"
                ],
                "random_policy_label": [
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "create_policy_control_request": {
            "name": "create_policy_control_request",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "blockchain_bob": [
                    "bytes",
                    "str"
                ]
            }
        },
        "grant_control_request": {
            "name": "grant_control_request",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "blockchain_bob": [
                    "bytes"
                ]
            }
        },
        "retrieve_control_request": {
            "name": "retrieve_control_request",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "blockchain_alice": [
                    "bool",
                    "int"
                ],
                "blockchain_bob": [
                    "bool",
                    "int"
                ],
                "enacted_blockchain_policy": [
                    "int",
                    "List[bytes]",
                    "bytes"
                ],
                "capsule_side_channel_blockchain": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "encrypt_control_request": {
            "name": "encrypt_control_request",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/acceptance/characters/control/test_rpc_control_blockchain.py": {
        "test_enrico_rpc_character_control_encrypt_message": {
            "name": "test_enrico_rpc_character_control_encrypt_message",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "enrico_rpc_controller_test_client": [],
                "encrypt_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bob_rpc_character_control_retrieve_with_tmap": {
            "name": "test_bob_rpc_character_control_retrieve_with_tmap",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_blockchain_policy": [
                    "bool",
                    "int",
                    "bytes"
                ],
                "blockchain_bob": [
                    "str",
                    "int",
                    "bool",
                    "Union[str, float]"
                ],
                "bob_rpc_controller": [
                    "bool",
                    "str",
                    "int"
                ],
                "retrieve_control_request": [
                    "Tuple[int, int, bool]",
                    "Optional[str]"
                ]
            }
        },
        "test_alice_rpc_character_control_create_policy": {
            "name": "test_alice_rpc_character_control_create_policy",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "create_policy_control_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ]
            }
        },
        "test_alice_rpc_character_control_bad_input": {
            "name": "test_alice_rpc_character_control_bad_input",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "create_policy_control_request": [
                    "bool"
                ]
            }
        },
        "test_alice_rpc_character_control_derive_policy_encrypting_key": {
            "name": "test_alice_rpc_character_control_derive_policy_encrypting_key",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": []
            }
        },
        "test_alice_rpc_character_control_grant": {
            "name": "test_alice_rpc_character_control_grant",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/characters/control/test_treasure_map_field_non_federated.py": {
        "test_treasure_map": {
            "name": "test_treasure_map",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_blockchain_policy": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/characters/control/test_web_control_blockchain.py": {
        "test_label_whose_b64_representation_is_invalid_utf8": {
            "name": "test_label_whose_b64_representation_is_invalid_utf8",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [],
                "create_policy_control_request": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_alice_web_character_control_create_policy": {
            "name": "test_alice_web_character_control_create_policy",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "create_policy_control_request": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_alice_web_character_control_derive_policy_encrypting_key": {
            "name": "test_alice_web_character_control_derive_policy_encrypting_key",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_alice_web_character_control_grant": {
            "name": "test_alice_web_character_control_grant",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "dict",
                    "flask.testing.FlaskClient"
                ],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_alice_web_character_control_grant_error_messages": {
            "name": "test_alice_web_character_control_grant_error_messages",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]"
                ],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_alice_character_control_revoke": {
            "name": "test_alice_character_control_revoke",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "blockchain_bob": []
            }
        },
        "test_alice_character_control_decrypt": {
            "name": "test_alice_character_control_decrypt",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "dict",
                    "flask.testing.FlaskClient"
                ],
                "enacted_blockchain_policy": [
                    "str"
                ],
                "capsule_side_channel_blockchain": [
                    "str"
                ]
            }
        },
        "test_bob_web_character_control_retrieve": {
            "name": "test_bob_web_character_control_retrieve",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_bob_web_character_control_retrieve_multiple_kits": {
            "name": "test_bob_web_character_control_retrieve_multiple_kits",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "Dict[str, str]",
                    "flask.testing.FlaskClient"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ],
                "capsule_side_channel_blockchain": []
            }
        },
        "test_bob_web_character_control_retrieve_with_tmap": {
            "name": "test_bob_web_character_control_retrieve_with_tmap",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_blockchain_policy": [
                    "int",
                    "bool"
                ],
                "bob_web_controller_test_client": [
                    "str",
                    "flask.testing.FlaskClient",
                    "Dict[str, str]"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_enrico_web_character_control_encrypt_message": {
            "name": "test_enrico_web_character_control_encrypt_message",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "enrico_web_controller_test_client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "encrypt_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_web_character_control_lifecycle": {
            "name": "test_web_character_control_lifecycle",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "bool"
                ],
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "enrico_web_controller_from_alice": [
                    "bool"
                ],
                "blockchain_alice": [
                    "Callable[[], int]",
                    "str"
                ],
                "blockchain_bob": [
                    "slice"
                ],
                "blockchain_ursulas": [
                    "bool"
                ],
                "random_policy_label": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/lifecycle.py": {
        "run_entire_cli_lifecycle": {
            "name": "run_entire_cli_lifecycle",
            "location": 98,
            "return": [
                "str",
                "Union[str, Dict]",
                "bool"
            ],
            "arguments": {
                "click_runner": [
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "random_policy_label": [
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "ursulas": [
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "custom_filepath": [
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "custom_filepath_2": [
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "registry_filepath": [
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "testerchain": [
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MockSideChannel.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_message_kit": {
            "name": "save_message_kit",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_kit": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]",
                    "float"
                ]
            }
        },
        "MockSideChannel.fetch_message_kit": {
            "name": "fetch_message_kit",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_policy": {
            "name": "save_policy",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "int",
                    "str"
                ]
            }
        },
        "MockSideChannel.fetch_policy": {
            "name": "fetch_policy",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_alice_pubkey": {
            "name": "save_alice_pubkey",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[\"PNBuffer\"]",
                    "list",
                    "str"
                ]
            }
        },
        "MockSideChannel.fetch_alice_pubkey": {
            "name": "fetch_alice_pubkey",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_bob_public_keys": {
            "name": "save_bob_public_keys",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "public_keys": [
                    "list",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MockSideChannel.fetch_bob_public_keys": {
            "name": "fetch_bob_public_keys",
            "location": 86,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_treasure_map": {
            "name": "save_treasure_map",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "treasure_map": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]",
                    "float"
                ]
            }
        },
        "MockSideChannel.fetch_treasure_map": {
            "name": "fetch_treasure_map",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "run_entire_cli_lifecycle.enrico_encrypts": {
            "name": "enrico_encrypts",
            "location": 233,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {}
        },
        "run_entire_cli_lifecycle._alice_decrypts": {
            "name": "_alice_decrypts",
            "location": 252,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "encrypt_result": [
                    "int",
                    "List[datetime.time]",
                    "Optional[List[str]]",
                    "Union[int, float]"
                ]
            }
        },
        "run_entire_cli_lifecycle._run_teacher": {
            "name": "_run_teacher",
            "location": 299,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "_encrypt_result": [
                    "bool",
                    "int"
                ]
            }
        },
        "run_entire_cli_lifecycle._grant": {
            "name": "_grant",
            "location": 303,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "teacher_uri": []
            }
        },
        "run_entire_cli_lifecycle._bob_retrieves": {
            "name": "_bob_retrieves",
            "location": 344,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "_grant_result": [
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_alice.py": {
        "test_missing_configuration_file": {
            "name": "test_missing_configuration_file",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "default_filepath_mock": [],
                "click_runner": [
                    "bool",
                    "cmk.base.config.ConfigCache"
                ],
                "test_registry_source_manager": [
                    "bool",
                    "str",
                    "List[str]",
                    "dss.config.Replica",
                    "tests.fixtures.cloud_uploader.Uploader"
                ]
            }
        },
        "test_initialize_alice_defaults": {
            "name": "test_initialize_alice_defaults",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "custom_filepath": [
                    "Dict[str, Any]"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ],
                "blockchain_ursulas": [],
                "tmpdir": []
            }
        },
        "test_alice_control_starts_with_mocked_keystore": {
            "name": "test_alice_control_starts_with_mocked_keystore",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mocker": [],
                "monkeypatch": [
                    "tests.basilisp.helpers.CompileFn",
                    "Type",
                    "tests.async_mock.Mock"
                ],
                "custom_filepath": [
                    "tests.basilisp.helpers.CompileFn",
                    "Type",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_initialize_alice_with_custom_configuration_root": {
            "name": "test_initialize_alice_with_custom_configuration_root",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "base.Connection"
                ],
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_alice_control_starts_with_preexisting_configuration": {
            "name": "test_alice_control_starts_with_preexisting_configuration",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": []
            }
        },
        "test_alice_make_card": {
            "name": "test_alice_make_card",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "custom_filepath": [],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_alice_cannot_init_with_dev_flag": {
            "name": "test_alice_cannot_init_with_dev_flag",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_alice_derive_policy_pubkey": {
            "name": "test_alice_derive_policy_pubkey",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_alice_public_keys": {
            "name": "test_alice_public_keys",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": []
            }
        },
        "test_alice_view_preexisting_configuration": {
            "name": "test_alice_view_preexisting_configuration",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": [
                    "tests.e2e.Helper"
                ]
            }
        },
        "test_alice_destroy": {
            "name": "test_alice_destroy",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": []
            }
        },
        "test_alice_control_starts_with_mocked_keystore.MockKeystore.derive_crypto_power": {
            "name": "derive_crypto_power",
            "location": 83,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "power_class": [
                    "type"
                ]
            }
        },
        "test_alice_control_starts_with_mocked_keystore.MockKeystore.unlock": {
            "name": "unlock",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "password": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_bob.py": {
        "test_missing_configuration_file": {
            "name": "test_missing_configuration_file",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "default_filepath_mock": [],
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI",
                    "neuromation.cli.rooRoot",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_initialize_bob_with_custom_configuration_root": {
            "name": "test_initialize_bob_with_custom_configuration_root",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": []
            }
        },
        "test_bob_control_starts_with_preexisting_configuration": {
            "name": "test_bob_control_starts_with_preexisting_configuration",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": [
                    "tests.basilisp.helpers.CompileFn",
                    "pathlib.Path",
                    "deeplearning.ml4pl.models.logger.Logger",
                    "backup.config.Config"
                ]
            }
        },
        "test_bob_make_card": {
            "name": "test_bob_make_card",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "custom_filepath": [],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "pathlib.Path",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "test_bob_view_with_preexisting_configuration": {
            "name": "test_bob_view_with_preexisting_configuration",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": []
            }
        },
        "test_bob_public_keys": {
            "name": "test_bob_public_keys",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "pathlib.Path"
                ]
            }
        },
        "test_bob_retrieve_and_decrypt": {
            "name": "test_bob_retrieve_and_decrypt",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "capsule_side_channel": [
                    "pathlib.Path",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Dict[str, Any]",
                    "str"
                ],
                "enacted_federated_policy": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "custom_filepath_2": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "federated_alice": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "federated_bob": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": []
            }
        },
        "test_bob_destroy": {
            "name": "test_bob_destroy",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": []
            }
        },
        "test_bob_retrieve_and_decrypt.substitute_bob": {
            "name": "substitute_bob",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/acceptance/cli/test_cli_config.py": {
        "test_initialize_via_cli": {
            "name": "test_initialize_via_cli",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "config_class": [
                    "cmk.base.config.HostConfig",
                    "bool",
                    "str",
                    "pymap.config.IMAPConfig"
                ],
                "custom_filepath": [
                    "dict",
                    "str",
                    "int",
                    "bool"
                ],
                "click_runner": [
                    "cmk.base.config.HostConfig",
                    "Optional[int]",
                    "cmk.base.config.ConfigCache"
                ],
                "monkeypatch": []
            }
        },
        "test_reconfigure_via_cli": {
            "name": "test_reconfigure_via_cli",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "pyshgp.push.config.PushConfig",
                    "raiden.constants.EthClient",
                    "Optional[List[Any]]"
                ],
                "custom_filepath": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ],
                "config_class": [
                    "str",
                    "List[str]"
                ],
                "monkeypatch": [
                    "bool",
                    "Optional[Callable[[str], bool]]",
                    "str"
                ],
                "test_registry": [
                    "Iterable[str]",
                    "str",
                    "bool",
                    "Callable"
                ],
                "test_registry_source_manager": [
                    "Iterable[str]",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_reconfigure_via_cli.fake_get_latest_registry": {
            "name": "fake_get_latest_registry",
            "location": 78,
            "return": [
                "str",
                "Union[int, float, complex]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/acceptance/cli/test_contacts.py": {
        "patch_card_directory": {
            "name": "patch_card_directory",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "session_mocker": []
            }
        },
        "alice_verifying_key": {
            "name": "alice_verifying_key",
            "location": 42,
            "return": [
                "Dict[str, str]",
                "str",
                "pathlib.Path",
                "Mapping",
                "Callable",
                "Dict[pathlib.Path, types.Lines]"
            ],
            "arguments": {}
        },
        "bob_nickname": {
            "name": "bob_nickname",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "alice_nickname": {
            "name": "alice_nickname",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "bob_verifying_key": {
            "name": "bob_verifying_key",
            "location": 57,
            "return": [
                "Dict[str, str]",
                "str",
                "pathlib.Path",
                "Mapping",
                "Callable",
                "Dict[pathlib.Path, types.Lines]"
            ],
            "arguments": {}
        },
        "bob_encrypting_key": {
            "name": "bob_encrypting_key",
            "location": 62,
            "return": [
                "Dict[str, str]",
                "str",
                "pathlib.Path",
                "Mapping",
                "Callable",
                "Dict[pathlib.Path, types.Lines]"
            ],
            "arguments": {}
        },
        "test_card_directory_autocreation": {
            "name": "test_card_directory_autocreation",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_list_cards_with_none_created": {
            "name": "test_list_cards_with_none_created",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "certificates_tempdir": []
            }
        },
        "test_create_alice_card_interactive": {
            "name": "test_create_alice_card_interactive",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Optional[str]"
                ],
                "alice_verifying_key": [
                    "str",
                    "pathlib.Path",
                    "bytes"
                ],
                "alice_nickname": [
                    "str",
                    "pathlib.Path",
                    "bytes"
                ],
                "mocker": [
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "test_create_alice_card_inline": {
            "name": "test_create_alice_card_inline",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "pathlib.Path",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "alice_verifying_key": [
                    "str",
                    "Set[int]"
                ],
                "alice_nickname": [
                    "str",
                    "Set[int]"
                ]
            }
        },
        "test_create_bob_card_interactive": {
            "name": "test_create_bob_card_interactive",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "List[str]"
                ],
                "bob_nickname": [
                    "str",
                    "bytes",
                    "Iterator[str]",
                    "IO[bytes]"
                ],
                "bob_encrypting_key": [
                    "str",
                    "bytes",
                    "Iterator[str]",
                    "IO[bytes]"
                ],
                "bob_verifying_key": [
                    "str",
                    "bytes",
                    "Iterator[str]",
                    "IO[bytes]"
                ]
            }
        },
        "test_create_bob_card_inline": {
            "name": "test_create_bob_card_inline",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "pathlib.Path",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "alice_verifying_key": [
                    "str",
                    "Set[int]"
                ],
                "alice_nickname": [
                    "str",
                    "Set[int]"
                ]
            }
        },
        "test_show_unknown_card": {
            "name": "test_show_unknown_card",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "alice_nickname": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "alice_verifying_key": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_show_alice_card": {
            "name": "test_show_alice_card",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "alice_nickname": [
                    "list",
                    "Counter",
                    "int",
                    "List[str]"
                ],
                "alice_verifying_key": [
                    "dict",
                    "Callable",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_show_bob_card": {
            "name": "test_show_bob_card",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "int"
                ],
                "bob_nickname": [
                    "bool",
                    "str"
                ],
                "bob_encrypting_key": [
                    "bytes",
                    "float",
                    "Optional[\"TrackingData\"]",
                    "str",
                    "Optional[dict]",
                    "Union[str, bytes]"
                ],
                "bob_verifying_key": [
                    "bytes",
                    "float",
                    "Optional[\"TrackingData\"]",
                    "str",
                    "Optional[dict]",
                    "Union[str, bytes]"
                ]
            }
        },
        "test_list_card": {
            "name": "test_list_card",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "int"
                ],
                "bob_nickname": [
                    "dict",
                    "bytes",
                    "bool",
                    "OrderedDict",
                    "str"
                ],
                "bob_encrypting_key": [
                    "float",
                    "str",
                    "Union[str, bytes]",
                    "bool",
                    "Union[bytes, str, None]"
                ],
                "bob_verifying_key": [
                    "float",
                    "str",
                    "Union[str, bytes]",
                    "bool",
                    "Union[bytes, str, None]"
                ],
                "alice_nickname": [
                    "dict",
                    "bytes",
                    "bool",
                    "OrderedDict",
                    "str"
                ],
                "alice_verifying_key": [
                    "float",
                    "str",
                    "Union[str, bytes]",
                    "bool",
                    "Union[bytes, str, None]"
                ]
            }
        },
        "test_delete_card": {
            "name": "test_delete_card",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Dict[str, Any]"
                ],
                "bob_nickname": [
                    "bool",
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_decentralized_cli_lifecycle.py": {
        "test_decentralized_cli_lifecycle": {
            "name": "test_decentralized_cli_lifecycle",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "float",
                    "Optional[bool]",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "testerchain": [
                    "float",
                    "Optional[bool]",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "random_policy_label": [
                    "float",
                    "Optional[bool]",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "blockchain_ursulas": [
                    "bool"
                ],
                "custom_filepath": [
                    "float",
                    "Optional[bool]",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "custom_filepath_2": [
                    "float",
                    "Optional[bool]",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "agency_local_registry": [
                    "float",
                    "Optional[bool]",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "mocker": []
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_enrico.py": {
        "test_enrico_encrypt": {
            "name": "test_enrico_encrypt",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_enrico_control_starts": {
            "name": "test_enrico_control_starts",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": []
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_federated_cli_lifecycle.py": {
        "test_federated_cli_lifecycle": {
            "name": "test_federated_cli_lifecycle",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Callable",
                    "int",
                    "float"
                ],
                "random_policy_label": [
                    "Callable",
                    "int",
                    "float"
                ],
                "federated_ursulas": [
                    "Callable",
                    "int",
                    "float"
                ],
                "custom_filepath": [
                    "Callable",
                    "int",
                    "float"
                ],
                "custom_filepath_2": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_mixed_configurations.py": {
        "custom_filepath": {
            "name": "custom_filepath",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_destroy_with_no_configurations": {
            "name": "test_destroy_with_no_configurations",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": [
                    "tests.basilisp.helpers.CompileFn",
                    "backup.config.Config"
                ]
            }
        },
        "test_coexisting_configurations": {
            "name": "test_coexisting_configurations",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "str"
                ],
                "custom_filepath": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "agency_local_registry": [
                    "pathlib.Path",
                    "tsrc.teshelpers.cli.CLI",
                    "solo.config.app.Config"
                ],
                "mocker": [
                    "Callable",
                    "cli_ui.tests.MessageRecorder",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_corrupted_configuration": {
            "name": "test_corrupted_configuration",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "str",
                    "tsrc.teshelpers.cli.CLI"
                ],
                "custom_filepath": [],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "agency_local_registry": [
                    "tsrc.teshelpers.cli.CLI",
                    "Exception",
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_porter.py": {
        "federated_teacher_uri": {
            "name": "federated_teacher_uri",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "bool"
                ],
                "federated_ursulas": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        },
        "blockchain_teacher_uri": {
            "name": "blockchain_teacher_uri",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "bool"
                ],
                "blockchain_ursulas": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        },
        "test_federated_porter_cli_run_simple": {
            "name": "test_federated_porter_cli_run_simple",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "tests.e2e.Helper"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "federated_teacher_uri": [
                    "str",
                    "tests.fixtures.cloud_uploader.Uploader"
                ]
            }
        },
        "test_federated_porter_cli_run_teacher_must_be_provided": {
            "name": "test_federated_porter_cli_run_teacher_must_be_provided",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_federated_porter_cli_run_tls_filepath_and_certificate": {
            "name": "test_federated_porter_cli_run_tls_filepath_and_certificate",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "IO[str]",
                    "Dict[str, Any]",
                    "tsrc.teshelpers.cli.CLI",
                    "str"
                ],
                "federated_ursulas": [
                    "path.Path",
                    "pathlib.Path",
                    "cli_ui.tests.MessageRecorder"
                ],
                "tempfile_path": [
                    "pathlib.Path",
                    "str",
                    "pypi2nix.path.Path",
                    "path.Path"
                ],
                "temp_dir_path": [
                    "pathlib.Path",
                    "bool",
                    "str",
                    "List[int]",
                    "path.Path",
                    "pypi2nix.path.Path"
                ],
                "federated_teacher_uri": [
                    "pathlib.Path",
                    "pypi2nix.path.Path",
                    "str"
                ]
            }
        },
        "test_federated_cli_run_https": {
            "name": "test_federated_cli_run_https",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "IO[str]",
                    "str",
                    "neuromation.cli.rooRoot",
                    "pathlib.Path"
                ],
                "federated_ursulas": [
                    "path.Path",
                    "cli_ui.tests.MessageRecorder",
                    "Dict[str, Sequence[str]]",
                    "pathlib.Path"
                ],
                "temp_dir_path": [
                    "path.Path",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "federated_teacher_uri": [
                    "pypi2nix.path.Path",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_federated_cli_run_https_with_cors_origin": {
            "name": "test_federated_cli_run_https_with_cors_origin",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "IO[str]",
                    "str",
                    "neuromation.cli.rooRoot",
                    "pathlib.Path"
                ],
                "federated_ursulas": [
                    "path.Path",
                    "cli_ui.tests.MessageRecorder",
                    "Dict[str, Sequence[str]]",
                    "pathlib.Path"
                ],
                "temp_dir_path": [
                    "path.Path",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "federated_teacher_uri": [
                    "pypi2nix.path.Path",
                    "path.Path",
                    "str"
                ]
            }
        },
        "test_federated_cli_run_https_with_empty_string_cors_origin": {
            "name": "test_federated_cli_run_https_with_empty_string_cors_origin",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "IO[str]",
                    "str",
                    "neuromation.cli.rooRoot"
                ],
                "federated_ursulas": [
                    "path.Path",
                    "cli_ui.tests.MessageRecorder",
                    "Dict[str, Sequence[str]]"
                ],
                "temp_dir_path": [
                    "path.Path",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "federated_teacher_uri": [
                    "pypi2nix.path.Path",
                    "Optional[str]",
                    "path.Path"
                ]
            }
        },
        "test_federated_cli_run_https_basic_auth": {
            "name": "test_federated_cli_run_https_basic_auth",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "pathlib.Path",
                    "Union[dict, list]",
                    "Optional[int]",
                    "str"
                ],
                "federated_ursulas": [
                    "str",
                    "int",
                    "List[str]",
                    "cli_ui.tests.MessageRecorder",
                    "dss.config.Replica",
                    "tests.fixtures.cloud_uploader.Uploader"
                ],
                "federated_teacher_uri": [
                    "pypi2nix.path.Path",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "temp_dir_path": [
                    "pypi2nix.path.Path",
                    "str",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "basic_auth_file": [
                    "pypi2nix.path.Path",
                    "pathlib.Path",
                    "Optional[str]"
                ]
            }
        },
        "test_blockchain_porter_cli_run_simple": {
            "name": "test_blockchain_porter_cli_run_simple",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "tests.e2e.Helper"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "agency_local_registry": [
                    "path.Path",
                    "str"
                ],
                "blockchain_teacher_uri": [
                    "path.Path",
                    "str"
                ]
            }
        },
        "test_blockchain_porter_cli_run_provider_required": {
            "name": "test_blockchain_porter_cli_run_provider_required",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "pathlib.Path"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "agency_local_registry": [
                    "str",
                    "List[str]"
                ],
                "blockchain_teacher_uri": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_blockchain_porter_cli_run_network_defaults_to_mainnet": {
            "name": "test_blockchain_porter_cli_run_network_defaults_to_mainnet",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture"
                ],
                "agency_local_registry": [
                    "pathlib.Path",
                    "str"
                ],
                "blockchain_teacher_uri": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_blockchain_porter_cli_run_https": {
            "name": "test_blockchain_porter_cli_run_https",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "pathlib.Path"
                ],
                "blockchain_ursulas": [
                    "str",
                    "dss.config.Replica",
                    "tests.fixtures.cloud_uploader.Uploader",
                    "int",
                    "bool"
                ],
                "testerchain": [
                    "str",
                    "dss.config.Replica",
                    "tests.fixtures.cloud_uploader.Uploader",
                    "int",
                    "bool"
                ],
                "agency_local_registry": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "temp_dir_path": [
                    "pypi2nix.path.Path",
                    "pathlib.Path"
                ],
                "blockchain_teacher_uri": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_blockchain_porter_cli_run_https_with_cors_origin": {
            "name": "test_blockchain_porter_cli_run_https_with_cors_origin",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "pathlib.Path"
                ],
                "blockchain_ursulas": [
                    "str",
                    "dss.config.Replica",
                    "tests.fixtures.cloud_uploader.Uploader",
                    "int",
                    "bool"
                ],
                "testerchain": [
                    "str",
                    "dss.config.Replica",
                    "tests.fixtures.cloud_uploader.Uploader",
                    "int",
                    "bool"
                ],
                "agency_local_registry": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "temp_dir_path": [
                    "pypi2nix.path.Path",
                    "pathlib.Path"
                ],
                "blockchain_teacher_uri": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_blockchain_porter_cli_run_https_basic_auth": {
            "name": "test_blockchain_porter_cli_run_https_basic_auth",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "blockchain_ursulas": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock"
                ],
                "blockchain_teacher_uri": [
                    "path.Path",
                    "str"
                ],
                "testerchain": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock"
                ],
                "agency_local_registry": [
                    "path.Path",
                    "str"
                ],
                "temp_dir_path": [
                    "pathlib.Path",
                    "tests.e2e.Helper",
                    "Optional[str]"
                ],
                "basic_auth_file": [
                    "path.Path",
                    "str"
                ]
            }
        },
        "_write_random_data": {
            "name": "_write_random_data",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "type"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_rpc_ipc_transport.py": {
        "rpc_protocol": {
            "name": "rpc_protocol",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_alice_rpc_controller_creation": {
            "name": "test_alice_rpc_controller_creation",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str",
                    "float"
                ]
            }
        },
        "test_rpc_invalid_input": {
            "name": "test_rpc_invalid_input",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "rpc_protocol": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "federated_alice": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TransportTrap.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportTrap.__enter__": {
            "name": "__enter__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportTrap.__exit__": {
            "name": "__exit__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "TransportTrap.read": {
            "name": "read",
            "location": 42,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "str",
                    "Iterator[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TransportTrap.write": {
            "name": "write",
            "location": 54,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "float",
                    "dict"
                ]
            }
        },
        "TransportTrap.flush": {
            "name": "flush",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_staking_provider_bonding_cli.py": {
        "operator_address": {
            "name": "operator_address",
            "location": 27,
            "return": [
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "staking_provider_address": {
            "name": "staking_provider_address",
            "location": 33,
            "return": [
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_nucypher_bond_help": {
            "name": "test_nucypher_bond_help",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "int"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "authorized_staking_provider": {
            "name": "authorized_staking_provider",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "Callable",
                    "str"
                ],
                "threshold_staking": [
                    "float"
                ],
                "staking_provider_address": [
                    "float"
                ],
                "application_economics": [
                    "float",
                    "config.Config"
                ]
            }
        },
        "exec_bond": {
            "name": "exec_bond",
            "location": 53,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "click_runner": [
                    "Type",
                    "dict",
                    "Dict[str, Any]"
                ],
                "operator_address": [
                    "str",
                    "int"
                ],
                "staking_provider_address": [
                    "str",
                    "int"
                ]
            }
        },
        "exec_unbond": {
            "name": "exec_unbond",
            "location": 67,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "click_runner": [
                    "Type",
                    "dict",
                    "Dict[str, Any]"
                ],
                "staking_provider_address": [
                    "str"
                ]
            }
        },
        "test_nucypher_bond_unauthorized": {
            "name": "test_nucypher_bond_unauthorized",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "operator_address": [],
                "staking_provider_address": []
            }
        },
        "test_nucypher_bond": {
            "name": "test_nucypher_bond",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "operator_address": [],
                "authorized_staking_provider": []
            }
        },
        "test_nucypher_rebond_too_soon": {
            "name": "test_nucypher_rebond_too_soon",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "operator_address": [],
                "staking_provider_address": []
            }
        },
        "test_nucypher_rebond_operator": {
            "name": "test_nucypher_rebond_operator",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "float"
                ],
                "operator_address": [],
                "staking_provider_address": [],
                "application_economics": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_nucypher_unbond_operator": {
            "name": "test_nucypher_unbond_operator",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "staking_provider_address": [],
                "application_economics": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/test_status.py": {
        "test_nucypher_status_network": {
            "name": "test_nucypher_status_network",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [],
                "agency_local_registry": []
            }
        },
        "test_nucypher_status_events": {
            "name": "test_nucypher_status_events",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "int",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "dict",
                    "Dict[int, dict]"
                ],
                "testerchain": [
                    "Type",
                    "cmk.base.config.ExitSpec",
                    "bool",
                    "Callable"
                ],
                "agency_local_registry": [
                    "int",
                    "str"
                ],
                "staking_providers": [
                    "Union[str, float]",
                    "bool",
                    "int"
                ],
                "temp_dir_path": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/deploy/conftest.py": {
        "monkeypatch_confirmations": {
            "name": "monkeypatch_confirmations",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "monkeypatch": [
                    "str",
                    "int"
                ]
            }
        },
        "monkeypatch_confirmations.block_until_enough_confirmations": {
            "name": "block_until_enough_confirmations",
            "location": 25,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "ethclient": [
                    "Sequence[Any]",
                    "Iterable[str]",
                    "str"
                ],
                "transaction_hash": [
                    "bytes",
                    "str",
                    "Type",
                    "Union[int, float]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/deploy/test_deploy_cli.py": {
        "registry_filepath": {
            "name": "registry_filepath",
            "location": 39,
            "return": [
                "pathlib.Path",
                "int",
                "Tuple[eth_Hash32, eth.JournalDBCheckpoint]",
                "str"
            ],
            "arguments": {
                "temp_dir_path": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_deploy_single_contract": {
            "name": "test_deploy_single_contract",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "tempfile_path": [
                    "path.Path",
                    "Optional[str]",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_deploy_signer_uri_testnet_check": {
            "name": "test_deploy_signer_uri_testnet_check",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mocker": [
                    "cli_ui.tests.MessageRecorder"
                ],
                "tempfile_path": [
                    "Optional[str]",
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ]
            }
        },
        "test_upgrade_contracts": {
            "name": "test_upgrade_contracts",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "test_registry_source_manager": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "test_registry": [
                    "path.Path"
                ],
                "testerchain": [
                    "str",
                    "bool"
                ],
                "registry_filepath": [
                    "tests.e2e.Helper"
                ],
                "agency": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_rollback": {
            "name": "test_rollback",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [],
                "registry_filepath": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "agency": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/deploy/test_deploy_cli_commands.py": {
        "test_nucypher_deploy_inspect_no_deployments": {
            "name": "test_nucypher_deploy_inspect_no_deployments",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.async_mock.MagicMock"
                ],
                "new_local_registry": [
                    "pathlib.Path"
                ]
            }
        },
        "test_nucypher_deploy_inspect_fully_deployed": {
            "name": "test_nucypher_deploy_inspect_fully_deployed",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "agency_local_registry": []
            }
        },
        "test_transfer_ownership": {
            "name": "test_transfer_ownership",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [],
                "agency_local_registry": []
            }
        },
        "test_bare_contract_deployment_to_alternate_registry": {
            "name": "test_bare_contract_deployment_to_alternate_registry",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "agency_local_registry": []
            }
        },
        "test_manual_proxy_retargeting": {
            "name": "test_manual_proxy_retargeting",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "click_runner": [],
                "application_economics": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_manual_deployment_of_idle_network": {
            "name": "test_manual_deployment_of_idle_network",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.setup.SetupTest"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/ursula/test_federated_ursula.py": {
        "test_initialize_ursula_defaults": {
            "name": "test_initialize_ursula_defaults",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_initialize_custom_configuration_root": {
            "name": "test_initialize_custom_configuration_root",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_configuration_file_contents": {
            "name": "test_configuration_file_contents",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "backup.config.Config"
                ],
                "nominal_federated_configuration_fields": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_ursula_view_configuration": {
            "name": "test_ursula_view_configuration",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Callable",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "click_runner": [
                    "str",
                    "Dict[str, Any]"
                ],
                "nominal_federated_configuration_fields": [
                    "bool"
                ]
            }
        },
        "test_run_federated_ursula_from_config_file": {
            "name": "test_run_federated_ursula_from_config_file",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "dict",
                    "bool",
                    "path.Path"
                ],
                "click_runner": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_ursula_save_metadata": {
            "name": "test_ursula_save_metadata",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_ursula_destroy_configuration": {
            "name": "test_ursula_destroy_configuration",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [],
                "click_runner": [
                    "tests.basilisp.helpers.CompileFn",
                    "pathlib.Path"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/ursula/test_local_keystore_integration.py": {
        "mock_funded_account_password_keystore": {
            "name": "mock_funded_account_password_keystore",
            "location": 46,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "pathlib.Path",
                    "str",
                    "List[int]",
                    "Union[str, pathlib.Path]"
                ],
                "testerchain": [
                    "Optional[int]"
                ],
                "threshold_staking": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, List[str]]",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "dict"
                ],
                "application_economics": [
                    "pyramid.config.Configurator",
                    "Optional[str]",
                    "str",
                    "dict",
                    "List[Tuple[str, Any]]",
                    "bool"
                ],
                "test_registry": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "test_ursula_and_local_keystore_signer_integration": {
            "name": "test_ursula_and_local_keystore_signer_integration",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI",
                    "pathlib.Path",
                    "str"
                ],
                "tmp_path": [
                    "path.Path",
                    "tests.fixtures.cloud_uploader.Uploader",
                    "pathlib.Path",
                    "str"
                ],
                "staking_providers": [
                    "path.Path",
                    "bool",
                    "cli_ui.tests.MessageRecorder",
                    "List[str]"
                ],
                "application_economics": [
                    "path.Path",
                    "bool",
                    "cli_ui.tests.MessageRecorder",
                    "List[str]"
                ],
                "mocker": [
                    "List[str]"
                ],
                "mock_funded_account_password_keystore": [
                    "List[str]",
                    "pathlib.Path"
                ],
                "testerchain": [
                    "tsrc.teshelpers.cli.CLI"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/ursula/test_run_ursula.py": {
        "test_missing_configuration_file": {
            "name": "test_missing_configuration_file",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "_default_filepath_mock": [],
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI",
                    "neuromation.cli.rooRoot",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_ursula_startup_ip_checkup": {
            "name": "test_ursula_startup_ip_checkup",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_ursula_run_with_prometheus_but_no_metrics_port": {
            "name": "test_ursula_run_with_prometheus_but_no_metrics_port",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": []
            }
        },
        "test_run_lone_federated_default_development_ursula": {
            "name": "test_run_lone_federated_default_development_ursula",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "solo.config.app.Config"
                ]
            }
        },
        "test_federated_ursula_learns_via_cli": {
            "name": "test_federated_ursula_learns_via_cli",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_persistent_node_storage_integration": {
            "name": "test_persistent_node_storage_integration",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI"
                ],
                "custom_filepath": [
                    "tsrc.teshelpers.cli.CLI",
                    "Dict[str, Any]"
                ],
                "testerchain": [],
                "blockchain_ursulas": [],
                "agency_local_registry": [
                    "tests.e2e.Helper",
                    "Exception"
                ]
            }
        },
        "test_ursula_run_ip_checkup": {
            "name": "test_ursula_run_ip_checkup",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "custom_filepath": [
                    "str"
                ],
                "click_runner": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "monkeypatch": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.fixtures.cloud_uploader.Uploader"
                ]
            }
        },
        "test_federated_ursula_learns_via_cli.run_ursula": {
            "name": "run_ursula",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_ursula_run_ip_checkup.set_staking_provider_address": {
            "name": "set_staking_provider_address",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "operator": [
                    "str",
                    "raiden.utils.Address"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/cli/ursula/test_ursula_command.py": {
        "capture_output": {
            "name": "capture_output",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ursula": {
            "name": "ursula",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "federated_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "protocol": {
            "name": "protocol",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_ursula_command_protocol_creation": {
            "name": "test_ursula_command_protocol_creation",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [
                    "str",
                    "float"
                ]
            }
        },
        "test_ursula_command_help": {
            "name": "test_ursula_command_help",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "protocol": [],
                "ursula": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_ursula_command_status": {
            "name": "test_ursula_command_status",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "protocol": [],
                "ursula": []
            }
        },
        "test_ursula_command_known_nodes": {
            "name": "test_ursula_command_known_nodes",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "protocol": [],
                "ursula": []
            }
        },
        "test_ursula_command_help.FakeTransport.write": {
            "name": "write",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/learning/test_fault_tolerance.py": {
        "test_blockchain_ursula_stamp_verification_tolerance": {
            "name": "test_blockchain_ursula_stamp_verification_tolerance",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Sequence[str]]",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_invalid_operators_tolerance": {
            "name": "test_invalid_operators_tolerance",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[str]",
                    "float",
                    "bool",
                    "raiden.utils.SignedTransaction"
                ],
                "test_registry": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "blockchain_ursulas": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "agency": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "idle_staker": [
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Dict"
                ],
                "application_economics": [
                    "int",
                    "str"
                ],
                "ursula_decentralized_test_config": [
                    "str",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ]
            }
        },
        "test_blockchain_ursula_stamp_verification_tolerance.warning_trapper": {
            "name": "warning_trapper",
            "location": 38,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "test_blockchain_ursula_stamp_verification_tolerance.bad_bytestring_of_known_nodes": {
            "name": "bad_bytestring_of_known_nodes",
            "location": 71,
            "return": [
                "bool",
                "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                "int"
            ],
            "arguments": {}
        },
        "test_invalid_operators_tolerance.warning_trapper": {
            "name": "warning_trapper",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Sequence",
                    "list",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/network/test_availability.py": {
        "test_availability_tracker_success": {
            "name": "test_availability_tracker_success",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_availability_tracker_integration": {
            "name": "test_availability_tracker_integration",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "monkeypatch": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_availability_tracker_success.measure": {
            "name": "measure",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_availability_tracker_success.maintain": {
            "name": "maintain",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_availability_tracker_success.raise_to_maximum": {
            "name": "raise_to_maximum",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_availability_tracker_integration.maintain": {
            "name": "maintain",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_availability_tracker_success.maintain.issue_warnings": {
            "name": "issue_warnings",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "tracker": [
                    "dict",
                    "str",
                    "bytearray",
                    "bytes"
                ]
            }
        },
        "test_availability_tracker_integration.maintain.mock_node_information_endpoint": {
            "name": "mock_node_information_endpoint",
            "location": 111,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "List[dict]"
            ],
            "arguments": {
                "middleware": [
                    "bool",
                    "T",
                    "Awaitable[Any]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "int"
                ],
                "port": [
                    "str",
                    "list",
                    "Optional[Union[str, Any]]",
                    "Optional[Mapping[str, str]]",
                    "BinaryIO"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/network/test_network_actors.py": {
        "test_all_blockchain_ursulas_know_about_all_other_ursulas": {
            "name": "test_all_blockchain_ursulas_know_about_all_other_ursulas",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str"
                ],
                "agency": [
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_blockchain_alice_finds_ursula_via_rest": {
            "name": "test_blockchain_alice_finds_ursula_via_rest",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [],
                "blockchain_ursulas": [
                    "str"
                ]
            }
        },
        "test_vladimir_illegal_interface_key_does_not_propagate": {
            "name": "test_vladimir_illegal_interface_key_does_not_propagate",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_alice_refuses_to_select_node_unless_ursula_is_valid": {
            "name": "test_alice_refuses_to_select_node_unless_ursula_is_valid",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [],
                "idle_blockchain_policy": [
                    "tests.async_mock.Mock",
                    "int"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_vladimir_illegal_interface_key_does_not_propagate.warning_trapper": {
            "name": "warning_trapper",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Sequence",
                    "list",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/network/test_static_files.py": {
        "test_ursula_serves_statics": {
            "name": "test_ursula_serves_statics",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": []
            }
        },
        "test_ursula_serves_statics.check_static_service": {
            "name": "check_static_service",
            "location": 45,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "node": [
                    "str"
                ],
                "cert_file": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "test_ursula_serves_statics.check_static_file_not_there": {
            "name": "check_static_file_not_there",
            "location": 56,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "node": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "cert_file": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/porter/test_decentralized_porter.py": {
        "test_get_ursulas": {
            "name": "test_get_ursulas",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter": [
                    "tests.setup.SetupTest"
                ],
                "blockchain_ursulas": [
                    "int",
                    "list",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ]
            }
        },
        "test_retrieve_cfrags": {
            "name": "test_retrieve_cfrags",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "random_blockchain_policy": [
                    "bool"
                ],
                "blockchain_bob": [
                    "str",
                    "int"
                ],
                "blockchain_alice": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/porter/control/conftest.py": {
        "blockchain_porter_web_controller": {
            "name": "blockchain_porter_web_controller",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter": [
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[T]"
                ]
            }
        },
        "blockchain_porter_basic_auth_web_controller": {
            "name": "blockchain_porter_basic_auth_web_controller",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter": [
                    "str"
                ],
                "basic_auth_file": [
                    "str"
                ]
            }
        },
        "blockchain_porter_rpc_controller": {
            "name": "blockchain_porter_rpc_controller",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/porter/control/test_porter_rpc_control_blockchain.py": {
        "test_get_ursulas": {
            "name": "test_get_ursulas",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter_rpc_controller": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "blockchain_ursulas": [
                    "int",
                    "list",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ]
            }
        },
        "test_retrieve_cfrags": {
            "name": "test_retrieve_cfrags",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter": [],
                "blockchain_porter_rpc_controller": [
                    "str"
                ],
                "random_blockchain_policy": [
                    "bool"
                ],
                "blockchain_bob": [
                    "bool"
                ],
                "blockchain_alice": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/porter/control/test_porter_web_control_blockchain.py": {
        "test_get_ursulas": {
            "name": "test_get_ursulas",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter_web_controller": [],
                "blockchain_ursulas": [
                    "int",
                    "list",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ]
            }
        },
        "test_retrieve_cfrags": {
            "name": "test_retrieve_cfrags",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter": [],
                "blockchain_porter_web_controller": [],
                "random_blockchain_policy": [
                    "bool"
                ],
                "blockchain_bob": [],
                "blockchain_alice": []
            }
        },
        "test_get_ursulas_basic_auth": {
            "name": "test_get_ursulas_basic_auth",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_porter_basic_auth_web_controller": []
            }
        }
    },
    "nucypher-development/tests/acceptance/utilities/test_concurrency.py": {
        "join_worker_pool": {
            "name": "join_worker_pool",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "generate_workers": {
            "name": "generate_workers",
            "location": 78,
            "return": [
                "bool",
                "Optional[str]",
                "float",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "rules": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "seed": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_wait_for_successes": {
            "name": "test_wait_for_successes",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "join_worker_pool": [
                    "Type",
                    "str",
                    "int"
                ]
            }
        },
        "test_wait_for_successes_out_of_values": {
            "name": "test_wait_for_successes_out_of_values",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "join_worker_pool": [
                    "dict"
                ]
            }
        },
        "test_wait_for_successes_timed_out": {
            "name": "test_wait_for_successes_timed_out",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "join_worker_pool": []
            }
        },
        "test_join": {
            "name": "test_join",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "join_worker_pool": [
                    "str",
                    "float"
                ]
            }
        },
        "test_batched_value_generation": {
            "name": "test_batched_value_generation",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "join_worker_pool": []
            }
        },
        "test_cancel_waiting_workers": {
            "name": "test_cancel_waiting_workers",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "join_worker_pool": [
                    "str",
                    "float"
                ]
            }
        },
        "test_buggy_factory_raises_on_block": {
            "name": "test_buggy_factory_raises_on_block",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_buggy_factory_raises_on_join": {
            "name": "test_buggy_factory_raises_on_join",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "AllAtOnceFactory.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "AllAtOnceFactory.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [
                "type",
                "Optional[BaseException]",
                "Union[int, None]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "_successes": [
                    "dict"
                ]
            }
        },
        "join_worker_pool.register": {
            "name": "register",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "pool": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "OperatorRule.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fails": [
                    "int",
                    "float",
                    "tuple",
                    "Union[str, float]"
                ],
                "timeout_min": [
                    "int",
                    "float",
                    "tuple",
                    "Union[str, float]"
                ],
                "timeout_max": [
                    "int",
                    "float",
                    "tuple",
                    "Union[str, float]"
                ]
            }
        },
        "OperatorOutcome.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fails": [
                    "int",
                    "float",
                    "str"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "OperatorOutcome.__call__": {
            "name": "__call__",
            "location": 70,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Callable",
                    "Callable[[object], Any]"
                ]
            }
        },
        "generate_workers.worker": {
            "name": "worker",
            "location": 90,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "value": [
                    "float",
                    "Iterable[object]",
                    "int",
                    "bool"
                ]
            }
        },
        "BatchFactory.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "BatchFactory.__call__": {
            "name": "__call__",
            "location": 240,
            "return": [
                "type",
                "Optional[BaseException]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "successes": [
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "BuggyFactory.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "BuggyFactory.__call__": {
            "name": "__call__",
            "location": 332,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "successes": [
                    "dict"
                ]
            }
        }
    },
    "nucypher-development/tests/acceptance/utilities/test_prometheus_collectors.py": {
        "test_ursula_info_metrics_collector": {
            "name": "test_ursula_info_metrics_collector",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "tests.async_mock.MagicMock",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "blockchain_ursulas": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "int"
                ],
                "agency": [
                    "tests.async_mock.MagicMock",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_blockchain_metrics_collector": {
            "name": "test_blockchain_metrics_collector",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_staker_metrics_collector": {
            "name": "test_staker_metrics_collector",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "dict",
                    "str"
                ],
                "staking_providers": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "test_worker_metrics_collector": {
            "name": "test_worker_metrics_collector",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "Dict[Any, Dict[Any, str]]"
                ],
                "blockchain_ursulas": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "test_staking_events_metric_collectors": {
            "name": "test_staking_events_metric_collectors",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]"
                ],
                "blockchain_ursulas": [
                    "int"
                ]
            }
        },
        "test_all_metrics_collectors_sanity_collect": {
            "name": "test_all_metrics_collectors_sanity_collect",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "blockchain_ursulas": [
                    "int"
                ]
            }
        },
        "initialize_collectors": {
            "name": "initialize_collectors",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics_collectors": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "testerchain": [
                    "slice",
                    "str",
                    "Callable",
                    "Tuple[float, float]"
                ],
                "collector_registry": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/test_contracts_upgradeability.py": {
        "download_github_dir": {
            "name": "download_github_dir",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "source_link": [
                    "str"
                ],
                "target_folder": [
                    "str"
                ]
            }
        },
        "download_github_file": {
            "name": "download_github_file",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "source_link": [
                    "str"
                ],
                "target_folder": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "deploy_base_contract": {
            "name": "deploy_base_contract",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_interface": [
                    "str",
                    "int",
                    "starfish.core.types.PerImageSliceSpotResults",
                    "Optional[\"AbstractPurpose\"]"
                ],
                "deployer": [
                    "str",
                    "float",
                    "bool",
                    "dict"
                ],
                "transacting_power": [
                    "int",
                    "tuple",
                    "Optional[float]"
                ],
                "skipt_test": [
                    "bool",
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "nucypher.network.middleware.RestMiddleware",
                    "str"
                ]
            }
        },
        "skip_test": {
            "name": "skip_test",
            "location": 152,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "blockchain_interface": [
                    "List[str]",
                    "cmk.utils.type_defs.UserId",
                    "str",
                    "Optional[str]"
                ],
                "contract_name": [
                    "str",
                    "dict",
                    "IO",
                    "bool"
                ]
            }
        },
        "prepare_staker": {
            "name": "prepare_staker",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_interface": [
                    "int",
                    "Callable",
                    "str"
                ],
                "deployer": [
                    "bytes",
                    "Dict[str, Any]",
                    "bool"
                ],
                "transacting_power": [
                    "float",
                    "T",
                    "bool"
                ]
            }
        },
        "test_upgradeability": {
            "name": "test_upgradeability",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "temp_dir_path": [
                    "Optional[str]",
                    "str",
                    "pypi2nix.path.Path",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/base/test_dispatcher.py": {
        "test_dispatcher": {
            "name": "test_dispatcher",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": []
            }
        },
        "test_selfdestruct": {
            "name": "test_selfdestruct",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": []
            }
        },
        "test_receive_fallback": {
            "name": "test_receive_fallback",
            "location": 564,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": [
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/lib/test_signature_verifier.py": {
        "get_signature_recovery_value": {
            "name": "get_signature_recovery_value",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "defaultdict",
                    "Dict[rchain.crypto.PrivateKey, int]",
                    "dict",
                    "int",
                    "Optional[dict]",
                    "Optional[str]",
                    "str",
                    "Mapping[str, str]",
                    "bytes"
                ],
                "signature": [
                    "bytes"
                ],
                "public_key": [
                    "str",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "pubkey_as_address": {
            "name": "pubkey_as_address",
            "location": 77,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "umbral_pubkey": [
                    "str"
                ]
            }
        },
        "pubkey_as_uncompressed_bytes": {
            "name": "pubkey_as_uncompressed_bytes",
            "location": 84,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "umbral_pubkey": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "signature_verifier": {
            "name": "signature_verifier",
            "location": 92,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "deploy_contract": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_recover": {
            "name": "test_recover",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "raiden.tests.fuzz.utils.SendSecretRevealInNode",
                    "Callable[[dict], None]",
                    "raiden.utils.SecretRegistryAddress",
                    "accounts.models.Account",
                    "Optional[str]"
                ]
            }
        },
        "test_address": {
            "name": "test_address",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "str"
                ]
            }
        },
        "test_hash": {
            "name": "test_hash",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "test_verify": {
            "name": "test_verify",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "str",
                    "Callable",
                    "bool",
                    "Callable[[str], None]"
                ]
            }
        },
        "test_verify_eip191": {
            "name": "test_verify_eip191",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/lib/test_snapshot.py": {
        "snapshot": {
            "name": "snapshot",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "test_snapshot": {
            "name": "test_snapshot",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "snapshot": [
                    "int",
                    "str",
                    "float"
                ],
                "block_number": [
                    "bytes",
                    "Union[bytes, str]",
                    "TextIO"
                ],
                "value": [
                    "bytes",
                    "Union[bytes, str]",
                    "TextIO"
                ]
            }
        },
        "test_snapshot.encode": {
            "name": "encode",
            "location": 46,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "_time": [
                    "str",
                    "float",
                    "T"
                ],
                "_value": [
                    "str",
                    "float",
                    "T"
                ]
            }
        },
        "test_snapshot.decode": {
            "name": "decode",
            "location": 49,
            "return": [
                "float"
            ],
            "arguments": {
                "_snapshot": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/lib/test_umbral_deserializer.py": {
        "deserializer": {
            "name": "deserializer",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "fragments": {
            "name": "fragments",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_capsule": {
            "name": "test_capsule",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "deserializer": [
                    "List[int]",
                    "Optional[Exception]",
                    "bool"
                ],
                "fragments": [
                    "str",
                    "float"
                ]
            }
        },
        "test_cfrag": {
            "name": "test_cfrag",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "deserializer": [
                    "Union[int, float]"
                ],
                "fragments": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/main/application/conftest.py": {
        "threshold_staking": {
            "name": "threshold_staking",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract": [
                    "BaseException"
                ]
            }
        },
        "pre_application": {
            "name": "pre_application",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "Callable",
                    "str"
                ],
                "threshold_staking": [
                    "float",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "bool",
                    "Sequence['cirq.Qid']"
                ],
                "application_economics": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/main/application/test_operator.py": {
        "test_bond_operator": {
            "name": "test_bond_operator",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "threshold_staking": [
                    "Optional[str]",
                    "dict"
                ],
                "pre_application": [],
                "application_economics": [
                    "str",
                    "float"
                ]
            }
        },
        "test_confirm_address": {
            "name": "test_confirm_address",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "threshold_staking": [
                    "Optional[str]",
                    "dict"
                ],
                "pre_application": [
                    "Optional[str]"
                ],
                "application_economics": [
                    "str",
                    "float"
                ],
                "deploy_contract": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/main/staking_escrow/conftest.py": {
        "token": {
            "name": "token",
            "location": 29,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "deploy_contract": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "worklock": {
            "name": "worklock",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "token": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "threshold_staking": {
            "name": "threshold_staking",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deploy_contract": [
                    "BaseException"
                ]
            }
        },
        "escrow": {
            "name": "escrow",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "tuple",
                    "Iterable[Tuple[str, dict]]"
                ],
                "token": [
                    "str",
                    "int"
                ],
                "worklock": [
                    "str"
                ],
                "threshold_staking": [
                    "str"
                ],
                "request": [
                    "Optional[str]",
                    "List[List[str]]",
                    "List[int]",
                    "int"
                ],
                "deploy_contract": [
                    "str",
                    "Dict[str, int]",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/main/staking_escrow/test_staking_escrow.py": {
        "test_staking_from_worklock": {
            "name": "test_staking_from_worklock",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "token": [
                    "str"
                ],
                "worklock": [
                    "str",
                    "nucypher.types.Period.Delta",
                    "nucypher.types.NuNits",
                    "Dict[str, Optional[str]]"
                ],
                "escrow": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_slashing": {
            "name": "test_slashing",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "str"
                ],
                "worklock": [
                    "str"
                ],
                "threshold_staking": [
                    "bool"
                ],
                "escrow": [
                    "Optional[str]"
                ]
            }
        },
        "test_request_merge": {
            "name": "test_request_merge",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "threshold_staking": [
                    "Dict[str, Any]"
                ],
                "escrow": [
                    "dict"
                ]
            }
        },
        "test_withdraw": {
            "name": "test_withdraw",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "dict"
                ],
                "token": [
                    "str",
                    "eth.vm.computation.BaseComputation"
                ],
                "worklock": [],
                "threshold_staking": [
                    "Callable[[List, bool], None]"
                ],
                "escrow": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_vesting": {
            "name": "test_vesting",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "List[List[int]]",
                    "float"
                ],
                "token": [
                    "str",
                    "Tuple[str]"
                ],
                "worklock": [],
                "escrow": [
                    "Callable"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/main/staking_escrow/test_staking_escrow_additional.py": {
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "deploy_contract": [
                    "str",
                    "Callable",
                    "Hashable"
                ]
            }
        },
        "test_measure_work": {
            "name": "test_measure_work",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bytes"
                ],
                "token": [
                    "str",
                    "web3.contracContract",
                    "Tuple[str]"
                ],
                "worklock": [
                    "web3.contracContract"
                ],
                "escrow": [
                    "web3.contracContract",
                    "Callable"
                ]
            }
        },
        "test_snapshots": {
            "name": "test_snapshots",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "float"
                ],
                "token": [
                    "str",
                    "web3.contracContract",
                    "Tuple[str]"
                ],
                "escrow": [
                    "Callable",
                    "web3.contracContract",
                    "Iterable[Any]",
                    "bool",
                    "str"
                ],
                "worklock": [
                    "web3.contracContract"
                ],
                "threshold_staking": [
                    "str",
                    "List[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.async_mock.MagicMock",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "nucypher-development/tests/contracts/main/token/test_token.py": {
        "test_create_token": {
            "name": "test_create_token",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": [
                    "dict"
                ]
            }
        },
        "test_approve_and_call": {
            "name": "test_approve_and_call",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": []
            }
        }
    },
    "nucypher-development/tests/integration/conftest.py": {
        "mock_contract_agency": {
            "name": "mock_contract_agency",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "module_mocker": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "application_economics": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "mock_application_agent": {
            "name": "mock_application_agent",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "List[str]",
                    "bool",
                    "cli_ui.tests.MessageRecorder"
                ],
                "application_economics": [
                    "str",
                    "List[str]",
                    "bool",
                    "cli_ui.tests.MessageRecorder"
                ],
                "mock_contract_agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "mock_adjudicator_agent": {
            "name": "mock_adjudicator_agent",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "List[str]",
                    "bool",
                    "cli_ui.tests.MessageRecorder"
                ],
                "application_economics": [
                    "str",
                    "List[str]",
                    "bool",
                    "cli_ui.tests.MessageRecorder"
                ],
                "mock_contract_agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "mock_stdin": {
            "name": "mock_stdin",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Iterable",
                    "List[str]"
                ]
            }
        },
        "mock_testerchain": {
            "name": "mock_testerchain",
            "location": 94,
            "return": [
                "tests.mock.interfaces.MockBlockchain"
            ],
            "arguments": {
                "_mock_testerchain": [
                    "Sequence[str]",
                    "List[str]",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "mock_interface": {
            "name": "mock_interface",
            "location": 99,
            "return": [
                "str",
                "pathlib2.Path",
                "Tuple[int, int]",
                "pathlib.Path",
                "pypi2nix.path.Path"
            ],
            "arguments": {
                "module_mocker": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_registry": {
            "name": "test_registry",
            "location": 106,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "tests.async_mock.Mock",
                "float"
            ],
            "arguments": {}
        },
        "test_registry_source_manager": {
            "name": "test_registry_source_manager",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [
                    "mock.Mock",
                    "tests.async_mock.MagicMock",
                    "mock.MagicMock",
                    "Callable",
                    "pathlib.Path"
                ],
                "test_registry": []
            }
        },
        "mock_accounts": {
            "name": "mock_accounts",
            "location": 138,
            "return": [
                "dict",
                "cmk.utils.type_defs.UserId",
                "int",
                "Exception",
                "str"
            ],
            "arguments": {}
        },
        "mock_account": {
            "name": "mock_account",
            "location": 148,
            "return": [
                "bool",
                "Type",
                "str"
            ],
            "arguments": {
                "mock_accounts": [
                    "str"
                ]
            }
        },
        "operator_account": {
            "name": "operator_account",
            "location": 153,
            "return": [
                "dict",
                "str",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "src.config.user_config.UserConfig",
                "Optional[\"permissions_doc\"]"
            ],
            "arguments": {
                "mock_accounts": [
                    "str",
                    "list",
                    "mock.Mock",
                    "bool",
                    "Optional[Dict]",
                    "List[Union[Any, Any]]"
                ],
                "mock_testerchain": [
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "bool",
                    "BinaryIO",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "operator_address": {
            "name": "operator_address",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "operator_account": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "custom_config_filepath": {
            "name": "custom_config_filepath",
            "location": 165,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "Optional[int]",
                    "dict",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "patch_keystore": {
            "name": "patch_keystore",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "mock_accounts": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ],
                "monkeypatch": [
                    "Iterable[str]",
                    "Dict[str, int]",
                    "str",
                    "int",
                    "eth.abc.BlockHeaderAPI"
                ],
                "mocker": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ]
            }
        },
        "mock_keystore": {
            "name": "mock_keystore",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Hashable",
                    "float",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "alice_blockchain_test_config": {
            "name": "alice_blockchain_test_config",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [],
                "test_registry": []
            }
        },
        "bob_blockchain_test_config": {
            "name": "bob_blockchain_test_config",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [],
                "test_registry": []
            }
        },
        "ursula_decentralized_test_config": {
            "name": "ursula_decentralized_test_config",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [],
                "test_registry": []
            }
        },
        "patch_keystore.successful_mock_keyfile_reader": {
            "name": "successful_mock_keyfile_reader",
            "location": 172,
            "return": [
                "Dict[str, str]",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "_keystore": [
                    "bool",
                    "str",
                    "pathlib.Path",
                    "Iterable[str]",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/blockchain/test_currency.py": {
        "test_NU": {
            "name": "test_NU",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "application_economics": []
            }
        }
    },
    "nucypher-development/tests/integration/blockchain/test_exact_economics_model.py": {
        "test_exact_economics": {
            "name": "test_exact_economics",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/integration/blockchain/test_keystore_signer_filesystem_integration.py": {
        "mock_key": {
            "name": "mock_key",
            "location": 48,
            "return": [
                "str",
                "Mapping",
                "bool",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "mock_account": {
            "name": "mock_account",
            "location": 54,
            "return": [
                "dict",
                "int",
                "Exception",
                "str"
            ],
            "arguments": {
                "mock_key": [
                    "str",
                    "Union[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "mock_keystore": {
            "name": "mock_keystore",
            "location": 60,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mock_account": [
                    "str"
                ],
                "tmp_path_factory": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "good_signer": {
            "name": "good_signer",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_account": [
                    "str"
                ],
                "mock_keystore": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "unknown_address": {
            "name": "unknown_address",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_invalid_keystore": {
            "name": "test_invalid_keystore",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_signer_reads_keystore_from_disk": {
            "name": "test_signer_reads_keystore_from_disk",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "mock_account": [
                    "bool"
                ],
                "mock_key": [
                    "bool"
                ],
                "temp_dir_path": []
            }
        },
        "test_create_signer_from_keystore_directory": {
            "name": "test_create_signer_from_keystore_directory",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "mock_account": [],
                "mock_keystore": []
            }
        },
        "test_create_signer_from_keystore_file": {
            "name": "test_create_signer_from_keystore_file",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "mock_account": [],
                "mock_keystore": []
            }
        },
        "test_keystore_locking": {
            "name": "test_keystore_locking",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "mock_account": [],
                "good_signer": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "unknown_address": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": []
            }
        },
        "test_list_keystore_accounts": {
            "name": "test_list_keystore_accounts",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "good_signer": [],
                "mock_account": [
                    "int"
                ]
            }
        },
        "test_keystore_sign_message": {
            "name": "test_keystore_sign_message",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "good_signer": [
                    "Callable",
                    "Optional[str]"
                ],
                "mock_account": [
                    "Callable",
                    "Optional[str]"
                ],
                "mock_key": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_keystore_sign_transaction": {
            "name": "test_keystore_sign_transaction",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "good_signer": [
                    "Dict[str, Any]",
                    "Dict[str, Sequence[Any]]"
                ],
                "mock_account": []
            }
        }
    },
    "nucypher-development/tests/integration/characters/federated_encrypt_and_decrypt.py": {
        "test_sign_cleartext_and_encrypt": {
            "name": "test_sign_cleartext_and_encrypt",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str",
                    "int"
                ],
                "federated_bob": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_alice_can_decrypt": {
            "name": "test_alice_can_decrypt",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/characters/test_bob_handles_frags.py": {
        "_policy_info_kwargs": {
            "name": "_policy_info_kwargs",
            "location": 31,
            "return": [
                "dict",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "enacted_policy": [
                    "float",
                    "cmk.utils.type_defs.UserId",
                    "Optional[Iterable[T]]",
                    "bool"
                ]
            }
        },
        "_make_message_kits": {
            "name": "_make_message_kits",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "policy_pubkey": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_retrieval_kit": {
            "name": "test_retrieval_kit",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str",
                    "Dict[str, Any]"
                ],
                "federated_ursulas": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_single_retrieve": {
            "name": "test_single_retrieve",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_bob": [
                    "float"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_use_external_cache": {
            "name": "test_use_external_cache",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str"
                ],
                "federated_bob": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/characters/test_bob_joins_policy_and_retrieves.py": {
        "test_federated_bob_full_retrieve_flow": {
            "name": "test_federated_bob_full_retrieve_flow",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [],
                "federated_bob": [
                    "pyshgp.push.config.PushConfig",
                    "float"
                ],
                "federated_alice": [],
                "capsule_side_channel": [],
                "federated_treasure_map": [],
                "enacted_federated_policy": []
            }
        },
        "test_bob_retrieves": {
            "name": "test_bob_retrieves",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "Set[int]",
                    "str"
                ],
                "certificates_tempdir": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_bob_retrieves_with_treasure_map": {
            "name": "test_bob_retrieves_with_treasure_map",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "federated_ursulas": [
                    "bool",
                    "str",
                    "int"
                ],
                "enacted_federated_policy": [
                    "pyshgp.push.config.PushConfig",
                    "bool"
                ],
                "capsule_side_channel": []
            }
        },
        "test_bob_retrieves_too_late": {
            "name": "test_bob_retrieves_too_late",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [],
                "federated_ursulas": [
                    "bool"
                ],
                "enacted_federated_policy": [
                    "pyshgp.push.config.PushConfig",
                    "bool"
                ],
                "capsule_side_channel": []
            }
        }
    },
    "nucypher-development/tests/integration/characters/test_federated_grant_and_revoke.py": {
        "test_federated_grant": {
            "name": "test_federated_grant",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "bool"
                ],
                "federated_bob": [
                    "bool"
                ],
                "federated_ursulas": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_federated_alice_can_decrypt": {
            "name": "test_federated_alice_can_decrypt",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_revocation": {
            "name": "test_revocation",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "bool"
                ],
                "federated_bob": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/characters/test_specifications.py": {
        "make_header": {
            "name": "make_header",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "brand": [
                    "int",
                    "Callable",
                    "bytes",
                    "Optional[str]"
                ],
                "major": [
                    "int",
                    "Callable",
                    "str"
                ],
                "minor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_various_field_validations_by_way_of_alice_grant": {
            "name": "test_various_field_validations_by_way_of_alice_grant",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "bytes",
                    "Optional[bytes]",
                    "IO[bytes]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_treasure_map_validation": {
            "name": "test_treasure_map_validation",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "bytes"
                ],
                "federated_bob": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_messagekit_validation": {
            "name": "test_messagekit_validation",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel": [
                    "slice"
                ]
            }
        },
        "test_key_validation": {
            "name": "test_key_validation",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "dict",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/characters/test_ursula_startup.py": {
        "test_new_federated_ursula_announces_herself": {
            "name": "test_new_federated_ursula_announces_herself",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "lonely_ursula_maker": [
                    "int",
                    "str",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_node_deployer": {
            "name": "test_node_deployer",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": []
            }
        }
    },
    "nucypher-development/tests/integration/characters/control/conftest.py": {
        "alice_web_controller_test_client": {
            "name": "alice_web_controller_test_client",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ]
            }
        },
        "bob_web_controller_test_client": {
            "name": "bob_web_controller_test_client",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "str"
                ]
            }
        },
        "enrico_web_controller_test_client": {
            "name": "enrico_web_controller_test_client",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel": [
                    "str"
                ]
            }
        },
        "enrico_web_controller_from_alice": {
            "name": "enrico_web_controller_from_alice",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "Callable",
                    "bytes",
                    "int"
                ],
                "random_policy_label": [
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "alice_rpc_test_client": {
            "name": "alice_rpc_test_client",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ]
            }
        },
        "bob_rpc_controller": {
            "name": "bob_rpc_controller",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "enrico_rpc_controller_test_client": {
            "name": "enrico_rpc_controller_test_client",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel": [
                    "str"
                ]
            }
        },
        "enrico_rpc_controller_from_alice": {
            "name": "enrico_rpc_controller_from_alice",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "Callable",
                    "bytes",
                    "int"
                ],
                "random_policy_label": [
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "create_policy_control_request": {
            "name": "create_policy_control_request",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "federated_bob": [
                    "bytes",
                    "str"
                ]
            }
        },
        "grant_control_request": {
            "name": "grant_control_request",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "federated_bob": [
                    "bytes"
                ]
            }
        },
        "retrieve_control_request": {
            "name": "retrieve_control_request",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "federated_bob": [
                    "bool",
                    "int"
                ],
                "enacted_federated_policy": [
                    "int",
                    "bytes",
                    "List[bytes]"
                ],
                "capsule_side_channel": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "float"
                ]
            }
        },
        "encrypt_control_request": {
            "name": "encrypt_control_request",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/integration/characters/control/test_rpc_control_federated.py": {
        "test_alice_rpc_character_control_create_policy": {
            "name": "test_alice_rpc_character_control_create_policy",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "create_policy_control_request": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ]
            }
        },
        "test_alice_rpc_character_control_derive_policy_encrypting_key": {
            "name": "test_alice_rpc_character_control_derive_policy_encrypting_key",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": []
            }
        },
        "test_alice_rpc_character_control_grant": {
            "name": "test_alice_rpc_character_control_grant",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_enrico_rpc_character_control_encrypt_message": {
            "name": "test_enrico_rpc_character_control_encrypt_message",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "enrico_rpc_controller_test_client": [],
                "encrypt_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bob_rpc_character_control_retrieve": {
            "name": "test_bob_rpc_character_control_retrieve",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "bob_rpc_controller": [
                    "int",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Dict[str, str]"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/characters/control/test_web_control_federated.py": {
        "test_label_whose_b64_representation_is_invalid_utf8": {
            "name": "test_label_whose_b64_representation_is_invalid_utf8",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [],
                "create_policy_control_request": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_alice_web_character_control_create_policy": {
            "name": "test_alice_web_character_control_create_policy",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "create_policy_control_request": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_alice_web_character_control_derive_policy_encrypting_key": {
            "name": "test_alice_web_character_control_derive_policy_encrypting_key",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_alice_web_character_control_grant": {
            "name": "test_alice_web_character_control_grant",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "dict",
                    "flask.testing.FlaskClient"
                ],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_alice_character_control_revoke": {
            "name": "test_alice_character_control_revoke",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "federated_bob": []
            }
        },
        "test_alice_character_control_decrypt": {
            "name": "test_alice_character_control_decrypt",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "dict",
                    "flask.testing.FlaskClient"
                ],
                "enacted_federated_policy": [],
                "capsule_side_channel": [
                    "str",
                    "slice"
                ]
            }
        },
        "test_bob_web_character_control_retrieve": {
            "name": "test_bob_web_character_control_retrieve",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_bob_web_character_control_retrieve_again": {
            "name": "test_bob_web_character_control_retrieve_again",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_bob_web_character_control_retrieve_multiple_kits": {
            "name": "test_bob_web_character_control_retrieve_multiple_kits",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "Dict[str, str]",
                    "flask.testing.FlaskClient"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ],
                "capsule_side_channel": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_enrico_web_character_control_encrypt_message": {
            "name": "test_enrico_web_character_control_encrypt_message",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "enrico_web_controller_test_client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "encrypt_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_web_character_control_lifecycle": {
            "name": "test_web_character_control_lifecycle",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "bool"
                ],
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "enrico_web_controller_from_alice": [
                    "bool"
                ],
                "federated_alice": [
                    "Callable[[], int]",
                    "str"
                ],
                "federated_bob": [
                    "slice"
                ],
                "federated_ursulas": [
                    "bool"
                ],
                "random_policy_label": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/cli/test_bonding_cli_functionality.py": {
        "mock_transacting_power": {
            "name": "mock_transacting_power",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "module_mocker": [
                    "str"
                ]
            }
        },
        "operator_address": {
            "name": "operator_address",
            "location": 42,
            "return": [
                "Type",
                "Type[T]",
                "bool",
                "str"
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "bool",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "staking_provider_address": {
            "name": "staking_provider_address",
            "location": 48,
            "return": [
                "Type",
                "Type[T]",
                "bool",
                "str"
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "bool",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_nucypher_bond_help": {
            "name": "test_nucypher_bond_help",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "int"
                ],
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Generator[None, Any, None]"
                ]
            }
        },
        "exec_bond": {
            "name": "exec_bond",
            "location": 58,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "types.AsyncHookCallback",
                    "List[str]",
                    "Optional[str]",
                    "starlette.types.Send",
                    "starlette.types.Scope",
                    "starlette.types.Receive",
                    "Type[BaseException]"
                ],
                "operator_address": [
                    "str",
                    "int"
                ],
                "staking_provider_address": [
                    "str",
                    "int"
                ]
            }
        },
        "exec_unbond": {
            "name": "exec_unbond",
            "location": 70,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "types.AsyncHookCallback",
                    "List[str]",
                    "Optional[str]",
                    "starlette.types.Send",
                    "starlette.types.Scope",
                    "starlette.types.Receive",
                    "Type[BaseException]"
                ],
                "staking_provider_address": [
                    "str"
                ]
            }
        },
        "test_nucypher_bond_unauthorized": {
            "name": "test_nucypher_bond_unauthorized",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests._TestServerFactory",
                    "Callable[[], int]",
                    "tests.async_mock.MagicMock"
                ],
                "operator_address": [],
                "staking_provider_address": [],
                "mock_application_agent": []
            }
        },
        "test_nucypher_unexpected_beneficiary": {
            "name": "test_nucypher_unexpected_beneficiary",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mock_testerchain": [],
                "operator_address": [],
                "staking_provider_address": [],
                "mock_application_agent": []
            }
        },
        "test_nucypher_bond": {
            "name": "test_nucypher_bond",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests._TestServerFactory",
                    "Callable[[], int]",
                    "tests.async_mock.MagicMock"
                ],
                "operator_address": [],
                "staking_provider_address": [],
                "mock_application_agent": []
            }
        },
        "test_nucypher_unbond_operator": {
            "name": "test_nucypher_unbond_operator",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "pyshgp.push.config.PushConfig"
                ],
                "mock_testerchain": [
                    "tests.async_mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "staking_provider_address": [],
                "mock_application_agent": [],
                "operator_address": []
            }
        },
        "test_nucypher_rebond_too_soon": {
            "name": "test_nucypher_rebond_too_soon",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mock_testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "operator_address": [],
                "staking_provider_address": [],
                "mock_application_agent": []
            }
        },
        "test_nucypher_bond_already_claimed_operator": {
            "name": "test_nucypher_bond_already_claimed_operator",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mock_testerchain": [],
                "operator_address": [],
                "staking_provider_address": [],
                "mock_application_agent": []
            }
        },
        "test_nucypher_rebond_operator": {
            "name": "test_nucypher_rebond_operator",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mock_testerchain": [],
                "operator_address": [],
                "staking_provider_address": [],
                "mock_application_agent": []
            }
        }
    },
    "nucypher-development/tests/integration/cli/test_ursula_local_keystore_cli_functionality.py": {
        "mock_account_password_keystore": {
            "name": "mock_account_password_keystore",
            "location": 38,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "pathman.path.Path"
                ]
            }
        },
        "test_ursula_init_with_local_keystore_signer": {
            "name": "test_ursula_init_with_local_keystore_signer",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "IO[str]",
                    "tsrc.teshelpers.cli.CLI",
                    "pathlib.Path",
                    "neuromation.cli.rooRoot"
                ],
                "temp_dir_path": [
                    "pathlib.Path",
                    "str"
                ],
                "mocker": [],
                "mock_testerchain": [
                    "tests.e2e.Helper"
                ],
                "mock_account_password_keystore": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/cli/actions/test_auth_actions.py": {
        "test_get_password_from_prompt_cli_action": {
            "name": "test_get_password_from_prompt_cli_action",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_stdin": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "confirm": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": []
            }
        },
        "test_get_client_password_with_invalid_address": {
            "name": "test_get_client_password_with_invalid_address",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": []
            }
        },
        "test_get_client_password": {
            "name": "test_get_client_password",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [],
                "mock_account": [],
                "confirm": [],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_get_nucypher_password": {
            "name": "test_get_nucypher_password",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [],
                "mock_account": [],
                "confirm": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_unlock_nucypher_keystore_invalid_password": {
            "name": "test_unlock_nucypher_keystore_invalid_password",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Callable"
                ],
                "test_emitter": [],
                "alice_blockchain_test_config": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "list"
                ],
                "capsys": [
                    "str",
                    "Optional[str]",
                    "Union[str, float]",
                    "bool"
                ],
                "tmpdir": [
                    "str",
                    "Dict[str, Any]"
                ],
                "test_registry_source_manager": [
                    "str"
                ]
            }
        },
        "test_unlock_nucypher_keystore_dev_mode": {
            "name": "test_unlock_nucypher_keystore_dev_mode",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str"
                ],
                "test_emitter": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ],
                "capsys": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "alice_blockchain_test_config": [
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_unlock_nucypher_keystore": {
            "name": "test_unlock_nucypher_keystore",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "str"
                ],
                "test_emitter": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ],
                "capsys": [
                    "str",
                    "bool",
                    "Union[str, float]",
                    "Optional[Dict[str, Any]]",
                    "tests.conftesWorker",
                    "Optional[str]"
                ],
                "alice_blockchain_test_config": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "patch_keystore": [
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/cli/actions/test_config_actions.py": {
        "config": {
            "name": "config",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "request": [],
                "mocker": []
            }
        },
        "test_forget_cli_action": {
            "name": "test_forget_cli_action",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "alice_blockchain_test_config": [
                    "str",
                    "pathlib.Path",
                    "tests.e2e.Helper"
                ],
                "test_emitter": [
                    "str",
                    "pathlib.Path",
                    "tests.e2e.Helper"
                ],
                "mock_stdin": [],
                "mocker": [
                    "nauta.config.NautaPlatformConfig",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_update_configuration_cli_action": {
            "name": "test_update_configuration_cli_action",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "baseplate.lib.config.RawConfig",
                    "bytes"
                ],
                "test_emitter": [
                    "Callable",
                    "trinity.config.ChainConfig",
                    "str",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "test_registry_source_manager": [
                    "bool",
                    "str"
                ],
                "capsys": [
                    "str",
                    "dict",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_handle_update_missing_configuration_file_cli_action": {
            "name": "test_handle_update_missing_configuration_file_cli_action",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "sphinx.config.Config",
                    "baseplate.lib.config.RawConfig",
                    "path.Path",
                    "virgene.config.Config",
                    "Dict[str, str]"
                ],
                "test_emitter": [
                    "pathlib.Path",
                    "path.Path",
                    "Optional[str]",
                    "str"
                ],
                "test_registry_source_manager": [
                    "str",
                    "pathlib.Path",
                    "baseplate.lib.config.RawConfig",
                    "bool"
                ],
                "mocker": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_handle_update_invalid_configuration_file_cli_action": {
            "name": "test_handle_update_invalid_configuration_file_cli_action",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "baseplate.lib.config.RawConfig",
                    "virgene.config.Config",
                    "dict",
                    "path.Path"
                ],
                "test_emitter": [
                    "pathlib.Path",
                    "path.Path",
                    "Optional[str]",
                    "str"
                ],
                "test_registry_source_manager": [
                    "str",
                    "pathlib.Path",
                    "baseplate.lib.config.RawConfig",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "capsys": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "test_destroy_configuration_cli_action": {
            "name": "test_destroy_configuration_cli_action",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "config.Config",
                    "sideeye.config.Configuration",
                    "backup.config.Config"
                ],
                "test_emitter": [
                    "str"
                ],
                "capsys": [
                    "str",
                    "list"
                ],
                "mocker": [
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "mock_stdin": []
            }
        },
        "test_handle_missing_configuration_file_cli_action": {
            "name": "test_handle_missing_configuration_file_cli_action",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "sphinx.config.Config",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_handle_invalid_configuration_file_cli_action": {
            "name": "test_handle_invalid_configuration_file_cli_action",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "config": [
                    "str",
                    "dict",
                    "tbump.config.Config",
                    "neuromation.api.config._AuthConfig",
                    "pathlib.Path"
                ],
                "test_emitter": [
                    "neuromation.api.config._AuthConfig",
                    "pathlib.Path",
                    "str"
                ],
                "capsys": [],
                "bad_config_payload": [
                    "str"
                ]
            }
        },
        "test_handle_corrupted_configuration_file_cli_action": {
            "name": "test_handle_corrupted_configuration_file_cli_action",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "config": [
                    "str",
                    "dict",
                    "tbump.config.Config",
                    "neuromation.api.config._AuthConfig",
                    "pathlib.Path"
                ],
                "test_emitter": [
                    "neuromation.api.config._AuthConfig",
                    "pathlib.Path",
                    "str"
                ],
                "capsys": [
                    "str",
                    "Optional[str]"
                ],
                "side_effect": [
                    "Optional[str]",
                    "Callable",
                    "str",
                    "dss.config.Replica",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/cli/actions/test_confirm_actions.py": {
        "test_confirm_deployment_cli_action": {
            "name": "test_confirm_deployment_cli_action",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_stdin": [],
                "test_emitter": [],
                "capsys": [],
                "mock_testerchain": []
            }
        }
    },
    "nucypher-development/tests/integration/cli/actions/test_select_client_account.py": {
        "test_select_client_account": {
            "name": "test_select_client_account",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "test_emitter": [],
                "mock_testerchain": [
                    "mock.Mock"
                ],
                "selection": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_select_client_account_with_no_accounts": {
            "name": "test_select_client_account_with_no_accounts",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_stdin": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "test_emitter": [
                    "unittesmock.Mock"
                ],
                "mock_testerchain": [
                    "unittesmock.Mock"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_select_client_account_ambiguous_source": {
            "name": "test_select_client_account_ambiguous_source",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [
                    "mock.Mock",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "test_emitter": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_testerchain": [
                    "mock.Mock",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_select_client_account_valid_sources": {
            "name": "test_select_client_account_valid_sources",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_stdin": [
                    "unittesmock.Mock"
                ],
                "test_emitter": [],
                "mock_testerchain": [
                    "unittesmock.Mock",
                    "mock.Mock",
                    "tests.async_mock.Mock"
                ],
                "patch_keystore": [
                    "mock.Mock"
                ],
                "mock_accounts": [
                    "mock.Mock"
                ],
                "selection": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_select_client_account_with_balance_display": {
            "name": "test_select_client_account_with_balance_display",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "test_emitter": [],
                "mock_testerchain": [
                    "unittesmock.Mock"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "test_registry_source_manager": [
                    "unittesmock.Mock"
                ],
                "mock_staking_agent": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_token_agent": [
                    "unittesmock.Mock"
                ],
                "selection": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "show_staking": [
                    "mock.Mock",
                    "click.testing.CliRunner",
                    "tests.utils.CliObjectRunner"
                ],
                "show_eth": [
                    "mock.Mock",
                    "click.testing.CliRunner",
                    "tests.utils.CliObjectRunner"
                ],
                "show_tokens": [
                    "mock.Mock",
                    "click.testing.CliRunner",
                    "tests.utils.CliObjectRunner"
                ],
                "stake_info": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/cli/actions/test_select_config_file.py": {
        "test_select_config_file_with_no_config_files": {
            "name": "test_select_config_file_with_no_config_files",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "str"
                ],
                "capsys": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "alice_blockchain_test_config": [
                    "bool",
                    "int"
                ],
                "temp_dir_path": [
                    "pathlib.Path",
                    "str",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "test_auto_select_config_file": {
            "name": "test_auto_select_config_file",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "str"
                ],
                "capsys": [
                    "str",
                    "dict",
                    "bool",
                    "int",
                    "pathlib.Path"
                ],
                "alice_blockchain_test_config": [
                    "bool",
                    "str",
                    "Callable[[], None]",
                    "Optional[str]",
                    "List[str]"
                ],
                "temp_dir_path": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "mock_stdin": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_interactive_select_config_file": {
            "name": "test_interactive_select_config_file",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "str",
                    "Callable",
                    "Iterable[str]"
                ],
                "capsys": [
                    "str",
                    "dict",
                    "bool",
                    "int",
                    "pathlib.Path"
                ],
                "alice_blockchain_test_config": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "temp_dir_path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "mock_stdin": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "mock_accounts": [
                    "dict",
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[Dict]"
                ],
                "patch_keystore": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/cli/actions/test_select_network.py": {
        "test_select_network_cli_action_eth": {
            "name": "test_select_network_cli_action_eth",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "str",
                    "pydantic.networks.EmailStr",
                    "bool",
                    "dict"
                ],
                "capsys": [
                    "str"
                ],
                "mock_stdin": [
                    "str",
                    "int"
                ],
                "user_input": [
                    "str",
                    "int"
                ]
            }
        },
        "test_select_network_cli_action_neither": {
            "name": "test_select_network_cli_action_neither",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/config/test_base_configuration.py": {
        "expected_configuration_filepaths": {
            "name": "expected_configuration_filepaths",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_base_configuration_defaults": {
            "name": "test_base_configuration_defaults",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_configuration_implementation": {
            "name": "test_configuration_implementation",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_configuration_creation": {
            "name": "test_configuration_creation",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_configuration_filepath_utilities": {
            "name": "test_configuration_filepath_utilities",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_configuration_preservation": {
            "name": "test_configuration_preservation",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "RestorableTestItem.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "RestorableTestItem.static_payload": {
            "name": "static_payload",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_configuration_implementation.NoNameItem.static_payload": {
            "name": "static_payload",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_configuration_implementation.BareMinimumConfigurableItem.static_payload": {
            "name": "static_payload",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/integration/config/test_character_configuration.py": {
        "test_federated_development_character_configurations": {
            "name": "test_federated_development_character_configurations",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "character": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]",
                    "dict"
                ],
                "configuration": [
                    "str",
                    "tests.e2e.Helper",
                    "pathlib.Path"
                ]
            }
        },
        "test_default_character_configuration_preservation": {
            "name": "test_default_character_configuration_preservation",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "configuration_class": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "mock_testerchain": [
                    "Callable",
                    "Literal",
                    "str",
                    "Callable[..., None]",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "test_registry_source_manager": [
                    "Callable",
                    "Literal",
                    "str",
                    "Callable[..., None]",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "tmpdir": [
                    "str"
                ],
                "test_registry": [
                    "NamedTuple",
                    "dict"
                ]
            }
        },
        "test_ursula_development_configuration": {
            "name": "test_ursula_development_configuration",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "federated_only": [
                    "str",
                    "tests.e2e.Helper",
                    "tests.basilisp.helpers.CompileFn",
                    "pathlib.Path"
                ]
            }
        },
        "test_destroy_configuration": {
            "name": "test_destroy_configuration",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "sphinx.config.Config",
                    "bytes"
                ],
                "test_emitter": [
                    "int"
                ],
                "capsys": [
                    "str",
                    "int",
                    "dict",
                    "config.Config"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/config/test_configuration_persistence.py": {
        "test_alices_powers_are_persistent": {
            "name": "test_alices_powers_are_persistent",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "str"
                ],
                "temp_dir_path": []
            }
        }
    },
    "nucypher-development/tests/integration/config/test_keystore_integration.py": {
        "test_generate_alice_keystore": {
            "name": "test_generate_alice_keystore",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "str"
                ]
            }
        },
        "test_characters_use_keystore": {
            "name": "test_characters_use_keystore",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "str"
                ],
                "test_registry_source_manager": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_tls_hosting_certificate_remains_the_same": {
            "name": "test_tls_hosting_certificate_remains_the_same",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "str"
                ],
                "mocker": []
            }
        }
    },
    "nucypher-development/tests/integration/config/test_storages.py": {
        "make_header": {
            "name": "make_header",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "brand": [
                    "int",
                    "Callable",
                    "bytes",
                    "cmk.utils.type_defs.HostName",
                    "Optional[str]"
                ],
                "major": [
                    "int",
                    "Callable",
                    "str"
                ],
                "minor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseTestNodeStorageBackends.light_ursula": {
            "name": "light_ursula",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseTestNodeStorageBackends._read_and_write_metadata": {
            "name": "_read_and_write_metadata",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "node_storage": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "BaseTestNodeStorageBackends.test_read_and_write_to_storage": {
            "name": "test_read_and_write_to_storage",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "light_ursula": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestTemporaryFileBasedNodeStorage.test_invalid_metadata": {
            "name": "test_invalid_metadata",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "light_ursula": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/learning/test_discovery_phases.py": {
        "test_alice_can_learn_about_a_whole_bunch_of_ursulas": {
            "name": "test_alice_can_learn_about_a_whole_bunch_of_ursulas",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "highperf_mocked_alice": []
            }
        },
        "test_alice_verifies_ursula_just_in_time": {
            "name": "test_alice_verifies_ursula_just_in_time",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "fleet_of_highperf_mocked_ursulas": [
                    "mock.Mock"
                ],
                "highperf_mocked_alice": [
                    "tests.e2e.Helper"
                ],
                "highperf_mocked_bob": [
                    "flask.Flask"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/learning/test_domains.py": {
        "test_learner_learns_about_domains_separately": {
            "name": "test_learner_learns_about_domains_separately",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "lonely_ursula_maker": [],
                "caplog": [
                    "pathlib.Path"
                ]
            }
        },
        "test_learner_restores_metadata_from_storage": {
            "name": "test_learner_restores_metadata_from_storage",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "lonely_ursula_maker": [],
                "tmpdir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_learner_ignores_stored_nodes_from_other_domains": {
            "name": "test_learner_ignores_stored_nodes_from_other_domains",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "lonely_ursula_maker": [],
                "tmpdir": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_learner_with_empty_storage_uses_fallback_nodes": {
            "name": "test_learner_with_empty_storage_uses_fallback_nodes",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "lonely_ursula_maker": [],
                "mocker": []
            }
        },
        "test_learner_uses_both_nodes_from_storage_and_fallback_nodes": {
            "name": "test_learner_uses_both_nodes_from_storage_and_fallback_nodes",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "lonely_ursula_maker": [
                    "Dict[str, Any]",
                    "cmk.base.config.HostConfig"
                ],
                "tmpdir": [
                    "Type",
                    "dict"
                ],
                "mocker": []
            }
        }
    },
    "nucypher-development/tests/integration/learning/test_firstula_circumstances.py": {
        "test_proper_seed_node_instantiation": {
            "name": "test_proper_seed_node_instantiation",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "lonely_ursula_maker": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_get_cert_from_running_seed_node": {
            "name": "test_get_cert_from_running_seed_node",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "lonely_ursula_maker": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/learning/test_fleet_state.py": {
        "test_all_nodes_have_same_fleet_state": {
            "name": "test_all_nodes_have_same_fleet_state",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": []
            }
        },
        "test_teacher_nodes_cycle": {
            "name": "test_teacher_nodes_cycle",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_nodes_with_equal_fleet_state_do_not_send_anew": {
            "name": "test_nodes_with_equal_fleet_state_do_not_send_anew",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_old_state_is_preserved": {
            "name": "test_old_state_is_preserved",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "Set[int]",
                    "int"
                ],
                "lonely_ursula_maker": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_state_is_recorded_after_learning": {
            "name": "test_state_is_recorded_after_learning",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "lonely_ursula_maker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_teacher_records_new_fleet_state_upon_hearing_about_new_node": {
            "name": "test_teacher_records_new_fleet_state_upon_hearing_about_new_node",
            "location": 129,
            "return": [],
            "arguments": {
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ],
                "lonely_ursula_maker": [
                    "tests.basilisp.helpers.CompileFn",
                    "Type",
                    "dict"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/network/test_failure_modes.py": {
        "test_alice_can_grant_even_when_the_first_nodes_she_tries_are_down": {
            "name": "test_alice_can_grant_even_when_the_first_nodes_she_tries_are_down",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": [
                    "bool"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "Sequence[Sequence]",
                    "Set[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "test_node_has_changed_cert": {
            "name": "test_node_has_changed_cert",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/network/test_network_upgrade.py": {
        "test_federated_nodes_connect_via_tls_and_verify": {
            "name": "test_federated_nodes_connect_via_tls_and_verify",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "lonely_ursula_maker": []
            }
        },
        "test_federated_nodes_connect_via_tls_and_verify.check_node_with_cert": {
            "name": "check_node_with_cert",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "BinaryIO",
                    "List[str]"
                ],
                "cert_file": [
                    "str",
                    "dict",
                    "List[List[str]]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/network/test_node_storage.py": {
        "test_one_node_stores_a_bunch_of_others": {
            "name": "test_one_node_stores_a_bunch_of_others",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [],
                "lonely_ursula_maker": []
            }
        },
        "test_one_node_stores_a_bunch_of_others.start_lonely_learning_loop": {
            "name": "start_lonely_learning_loop",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/integration/network/test_treasure_map_integration.py": {
        "test_alice_creates_policy_with_correct_hrac": {
            "name": "test_alice_creates_policy_with_correct_hrac",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": [],
                "idle_federated_policy": []
            }
        },
        "test_alice_does_not_update_with_old_ursula_info": {
            "name": "test_alice_does_not_update_with_old_ursula_info",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_ursulas": []
            }
        }
    },
    "nucypher-development/tests/integration/porter/conftest.py": {
        "random_federated_treasure_map_data": {
            "name": "random_federated_treasure_map_data",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str",
                    "dict",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "federated_bob": [
                    "str",
                    "dict",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "federated_ursulas": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/porter/test_federated_porter.py": {
        "test_get_ursulas": {
            "name": "test_get_ursulas",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter": [
                    "tests.setup.SetupTest"
                ],
                "federated_ursulas": [
                    "int",
                    "list",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ]
            }
        },
        "test_retrieve_cfrags": {
            "name": "test_retrieve_cfrags",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "federated_bob": [
                    "str",
                    "int"
                ],
                "federated_alice": [
                    "str",
                    "int"
                ],
                "enacted_federated_policy": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/porter/test_porter_specifications.py": {
        "test_alice_get_ursulas_schema": {
            "name": "test_alice_get_ursulas_schema",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "get_random_checksum_address": [
                    "List[str]",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "test_alice_revoke": {
            "name": "test_alice_revoke",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bob_retrieve_cfrags": {
            "name": "test_bob_retrieve_cfrags",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter": [],
                "enacted_federated_policy": [
                    "int"
                ],
                "federated_bob": [
                    "int"
                ],
                "federated_alice": [
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/porter/control/conftest.py": {
        "federated_porter_web_controller": {
            "name": "federated_porter_web_controller",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter": [
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[T]"
                ]
            }
        },
        "federated_porter_basic_auth_web_controller": {
            "name": "federated_porter_basic_auth_web_controller",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter": [
                    "str"
                ],
                "basic_auth_file": [
                    "str"
                ]
            }
        },
        "federated_porter_rpc_controller": {
            "name": "federated_porter_rpc_controller",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/porter/control/test_porter_rpc_control_federated.py": {
        "test_get_ursulas": {
            "name": "test_get_ursulas",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter_rpc_controller": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "federated_ursulas": [
                    "int",
                    "list",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ]
            }
        },
        "test_retrieve_cfrags": {
            "name": "test_retrieve_cfrags",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter": [],
                "federated_porter_rpc_controller": [
                    "str"
                ],
                "enacted_federated_policy": [
                    "bool",
                    "int"
                ],
                "federated_bob": [
                    "bool",
                    "int"
                ],
                "federated_alice": [
                    "bool",
                    "int"
                ],
                "random_federated_treasure_map_data": [
                    "str",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "nucypher-development/tests/integration/porter/control/test_porter_web_control_federated.py": {
        "test_get_ursulas": {
            "name": "test_get_ursulas",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter_web_controller": [],
                "federated_ursulas": [
                    "int",
                    "list",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ]
            }
        },
        "test_retrieve_cfrags": {
            "name": "test_retrieve_cfrags",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter": [],
                "federated_porter_web_controller": [],
                "enacted_federated_policy": [
                    "Dict[str, Any]"
                ],
                "federated_bob": [
                    "Dict[str, Any]"
                ],
                "federated_alice": [
                    "Dict[str, Any]"
                ],
                "random_federated_treasure_map_data": [
                    "str",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_endpoints_basic_auth": {
            "name": "test_endpoints_basic_auth",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "federated_porter_basic_auth_web_controller": [],
                "random_federated_treasure_map_data": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "enacted_federated_policy": [],
                "federated_bob": [],
                "federated_alice": []
            }
        }
    },
    "nucypher-development/tests/metrics/estimate_gas.py": {
        "mock_ursula": {
            "name": "mock_ursula",
            "location": 126,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "account": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "estimate_gas": {
            "name": "estimate_gas",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "analyzer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AnalyzeGas.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeGas.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "AnalyzeGas.paint_line": {
            "name": "paint_line",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "estimates": [
                    "str"
                ],
                "gas_used": [
                    "str"
                ]
            }
        },
        "AnalyzeGas.to_json_file": {
            "name": "to_json_file",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeGas.start_collection": {
            "name": "start_collection",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "estimate_gas.transact_and_log": {
            "name": "transact_and_log",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "label": [
                    "str",
                    "logging.Logger",
                    "List[Exception]"
                ],
                "function": [
                    "str",
                    "int"
                ],
                "transaction": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "estimate_gas.transact": {
            "name": "transact",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "str",
                    "Callable[[], object]",
                    "int"
                ],
                "transaction": [
                    "Dict[str, Any]",
                    "dict",
                    "Type",
                    "Type[T]",
                    "bool",
                    "List[str]",
                    "T"
                ]
            }
        },
        "estimate_gas.deploy_contract": {
            "name": "deploy_contract",
            "location": 555,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "contract_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "nucypher-development/tests/metrics/grant_availability.py": {
        "make_random_bob": {
            "name": "make_random_bob",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "metric_grant": {
            "name": "metric_grant",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alice": [],
                "ursulas": []
            }
        },
        "collect": {
            "name": "collect",
            "location": 126,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "alice": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ursulas": [
                    "int",
                    "Callable",
                    "str"
                ],
                "iterations": [
                    "int",
                    "str"
                ]
            }
        },
        "make_alice": {
            "name": "make_alice",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "known_nodes": [
                    "Dict[str, Any]",
                    "Callable",
                    "float"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "aggregate_nodes": {
            "name": "aggregate_nodes",
            "location": 196,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/mock/agents.py": {
        "MockContractAgent.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "agent_class": [
                    "Optional[str]",
                    "bool",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "MockContractAgent.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockContractAgent.__setup_mock": {
            "name": "__setup_mock",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent_class": [
                    "Callable[..., None]",
                    "Type[nucypher.blockchain.eth.agents.Agent]"
                ]
            }
        },
        "MockContractAgent.__get_interface_calls": {
            "name": "__get_interface_calls",
            "location": 115,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "str"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "MockContractAgent.__is_contract_method": {
            "name": "__is_contract_method",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "agent_class": [
                    "str",
                    "Dict[str, str]"
                ],
                "method_name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "MockContractAgent.__collect_contract_api": {
            "name": "__collect_contract_api",
            "location": 131,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[str], T]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "bool",
                    "Type",
                    "set"
                ],
                "agent_class": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MockContractAgent.all_transactions": {
            "name": "all_transactions",
            "location": 142,
            "return": [
                "str",
                "List[str]",
                "Tuple[str]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockContractAgent.contract_calls": {
            "name": "contract_calls",
            "location": 148,
            "return": [
                "str",
                "enum.Enum",
                "Callable[[str], None]",
                "Iterable[Sequence[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockContractAgent.get_unexpected_transactions": {
            "name": "get_unexpected_transactions",
            "location": 153,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "allowed": [
                    "str"
                ]
            }
        },
        "MockContractAgent.assert_only_transactions": {
            "name": "assert_only_transactions",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "MockContractAgent.assert_no_transactions": {
            "name": "assert_no_transactions",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockContractAgent.reset": {
            "name": "reset",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clear_side_effects": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "clear_return_values": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "MockContractAgency.get_agent": {
            "name": "get_agent",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ],
                "agent_class": [
                    "bool",
                    "Type[nucypher.blockchain.eth.agents.Agent]"
                ]
            }
        },
        "MockContractAgency.get_agent_by_contract_name": {
            "name": "get_agent_by_contract_name",
            "location": 192,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "contract_name": [
                    "str",
                    "dict",
                    "Set[str]",
                    "list"
                ]
            }
        },
        "MockContractAgency.reset": {
            "name": "reset",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "nucypher-development/tests/mock/datastore.py": {
        "mock_lmdb_open": {
            "name": "mock_lmdb_open",
            "location": 28,
            "return": [
                "str",
                "List[str]",
                "IO",
                "pathlib.Path",
                "int"
            ],
            "arguments": {
                "db_path": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Optional[float]",
                    "bytes"
                ],
                "map_size": [
                    "str",
                    "IO",
                    "pathlib.Path",
                    "bool",
                    "int"
                ]
            }
        },
        "MockEnvironment.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockEnvironment.begin": {
            "name": "begin",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "write": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MockTransaction.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[str, Any]",
                    "dict",
                    "Match"
                ],
                "write": [
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "MockTransaction.__enter__": {
            "name": "__enter__",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTransaction.__exit__": {
            "name": "__exit__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "MockTransaction.put": {
            "name": "put",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Union[str, int]",
                    "Optional[bytes]",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ],
                "overwrite": [
                    "int",
                    "str",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "Dict[str, str]"
                ]
            }
        },
        "MockTransaction.get": {
            "name": "get",
            "location": 76,
            "return": [
                "Optional[bool]",
                "Optional[Dict[str, Any]]",
                "Optional[str]",
                "str",
                "Iterable[Sequence[str]]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "MockTransaction.delete": {
            "name": "delete",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "MockTransaction.commit": {
            "name": "commit",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTransaction.abort": {
            "name": "abort",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTransaction._invalidate": {
            "name": "_invalidate",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTransaction.cursor": {
            "name": "cursor",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockCursor.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tx": [
                    "Optional[List[dict]]",
                    "dict"
                ]
            }
        },
        "MockCursor.set_range": {
            "name": "set_range",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[Hashable]",
                    "Optional[int]"
                ]
            }
        },
        "MockCursor.key": {
            "name": "key",
            "location": 126,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockCursor.iternext": {
            "name": "iternext",
            "location": 129,
            "return": [
                "Iterator[str]",
                "List[int]",
                "list",
                "str",
                "List[str]",
                "Iterator[T]",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "slice",
                    "bool"
                ],
                "values": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/mock/interfaces.py": {
        "mock_registry_source_manager": {
            "name": "mock_registry_source_manager",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "bool",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "MockBlockchain.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockEthereumClient.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "w3": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "MockEthereumClient.connect": {
            "name": "connect",
            "location": 87,
            "return": [
                "str",
                "int",
                "Dict[str, List]"
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_registry_source_manager.MockRegistrySource.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_registry_source_manager.MockRegistrySource.get_publication_endpoint": {
            "name": "get_publication_endpoint",
            "location": 49,
            "return": [
                "str",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_registry_source_manager.MockRegistrySource.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 52,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/mock/io.py": {
        "MockStdinWrapper.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStdinWrapper.line": {
            "name": "line",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Pattern[str]",
                    "Dict[int, str]",
                    "int"
                ]
            }
        },
        "MockStdinWrapper.password": {
            "name": "password",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int"
                ],
                "confirm": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MockStdinWrapper.empty": {
            "name": "empty",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStdinBase.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStdinBase.line": {
            "name": "line",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "MockStdinBase._readline": {
            "name": "_readline",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStdinBase.empty": {
            "name": "empty",
            "location": 57,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGetpass.__call__": {
            "name": "__call__",
            "location": 66,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "List[int]",
                    "int",
                    "Tuple[Union[int, slice], Union[int, slice]]"
                ]
            }
        },
        "MockStdin.readline": {
            "name": "readline",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/mock/performance_mocks.py": {
        "fake_keep_learning": {
            "name": "fake_keep_learning",
            "location": 31,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "selfish": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "learner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "do_not_create_cert": {
            "name": "do_not_create_cert",
            "location": 135,
            "return": [
                "str",
                "bool",
                "float",
                "List[dict]"
            ],
            "arguments": {}
        },
        "simple_remember": {
            "name": "simple_remember",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [
                    "dict"
                ],
                "node": [
                    "dict"
                ]
            }
        },
        "mock_secret_source": {
            "name": "mock_secret_source",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_determine_good_serials": {
            "name": "_determine_good_serials",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "start": [
                    "bool",
                    "int",
                    "Union[str, list]"
                ],
                "end": [
                    "bool",
                    "int",
                    "Union[str, list]"
                ]
            }
        },
        "NotAPublicKey._tick": {
            "name": "_tick",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "NotAPublicKey.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serial": [
                    "str",
                    "int"
                ]
            }
        },
        "NotAPublicKey.__bytes__": {
            "name": "__bytes__",
            "location": 69,
            "return": [
                "int",
                "str",
                "bytes",
                "Union[bytes, bytearray]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPublicKey.reset": {
            "name": "reset",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type",
                    "int",
                    "bool",
                    "complex",
                    "bytes",
                    "Type"
                ]
            }
        },
        "NotAPublicKey.from_bytes": {
            "name": "from_bytes",
            "location": 77,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "some_bytes": [
                    "int",
                    "str"
                ]
            }
        },
        "NotAPublicKey.from_int": {
            "name": "from_int",
            "location": 81,
            "return": [
                "dict",
                "List[int]",
                "Callable",
                "Sequence"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes"
                ],
                "serial": [
                    "str",
                    "bytes"
                ]
            }
        },
        "NotAPublicKey.i_want_to_be_a_real_boy": {
            "name": "i_want_to_be_a_real_boy",
            "location": 84,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPublicKey.__eq__": {
            "name": "__eq__",
            "location": 87,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "bool",
                    "eth_keys.datatypes.Signature",
                    "bytearray",
                    "str"
                ]
            }
        },
        "NotAPrivateKey.public_key": {
            "name": "public_key",
            "location": 93,
            "return": [
                "str",
                "bytes",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotASignature.__bytes__": {
            "name": "__bytes__",
            "location": 101,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotASigner.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret_key": [
                    "str",
                    "bytes",
                    "int",
                    "MutableMapping",
                    "dict"
                ]
            }
        },
        "NotASigner.sign": {
            "name": "sign",
            "location": 110,
            "return": [
                "Mapping",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NotACert.public_bytes": {
            "name": "public_bytes",
            "location": 124,
            "return": [
                "str",
                "int",
                "bytearray",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "does_not_matter": [
                    "bool",
                    "Union[str, Iterable[str]]",
                    "int"
                ]
            }
        },
        "NotACert.public_key": {
            "name": "public_key",
            "location": 127,
            "return": [
                "str",
                "bytes",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotARestApp.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "this_node": [
                    "bool",
                    "Type[T]",
                    "List[str]",
                    "Dict[str, str]",
                    "str"
                ],
                "db_filepath": [
                    "bool",
                    "Type[T]",
                    "List[str]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "NotARestApp.create_with_not_a_datastore": {
            "name": "create_with_not_a_datastore",
            "location": 154,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "list",
                    "str"
                ]
            }
        },
        "NotARestApp.replace_route": {
            "name": "replace_route",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Iterable[str]"
                ],
                "route_name": [
                    "str",
                    "Exception",
                    "Iterable[str]"
                ],
                "new_route": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NotARestApp.actual_rest_app": {
            "name": "actual_rest_app",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotARestApp.test_client": {
            "name": "test_client",
            "location": 184,
            "return": [
                "tests.basilisp.helpers.CompileFn"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerificationTracker.fake_verify_node": {
            "name": "fake_verify_node",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Optional[Exception]",
                    "str",
                    "Set[str]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "VerificationTracker.fake_verify_metadata": {
            "name": "fake_verify_metadata",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "NotACert.Subject.get_attributes_for_oid": {
            "name": "get_attributes_for_oid",
            "location": 116,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotARestApp._ViewFunctions.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_old_view_functions": [
                    "bool",
                    "str"
                ]
            }
        },
        "NotARestApp._ViewFunctions.__getitem__": {
            "name": "__getitem__",
            "location": 168,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "route_name": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/mock/serials.py": {},
    "nucypher-development/tests/unit/conftest.py": {
        "mock_ethereum_client": {
            "name": "mock_ethereum_client",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "mocker": [
                    "Mapping[str, Any]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_blockchain_economics_model.py": {
        "test_rough_economics": {
            "name": "test_rough_economics",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_economic_parameter_aliases": {
            "name": "test_economic_parameter_aliases",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/unit/test_blockchain_events.py": {
        "test_contract_events_throttler_to_block_check": {
            "name": "test_contract_events_throttler_to_block_check",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_contract_events_throttler_inclusive_block_ranges": {
            "name": "test_contract_events_throttler_inclusive_block_ranges",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/unit/test_blockchain_interface.py": {
        "mock_testerchain": {
            "name": "mock_testerchain",
            "location": 29,
            "return": [
                "tests.mock.interfaces.MockBlockchain"
            ],
            "arguments": {
                "_mock_testerchain": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_get_gas_strategy": {
            "name": "test_get_gas_strategy",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_use_pending_nonce_when_building_payload": {
            "name": "test_use_pending_nonce_when_building_payload",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [],
                "mocker": [
                    "mock.Mock"
                ]
            }
        },
        "test_use_pending_nonce_when_building_payload.mock_get_transaction_count": {
            "name": "mock_get_transaction_count",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "sender": [
                    "int",
                    "bool",
                    "str"
                ],
                "block_identifier": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_use_pending_nonce_when_building_payload.simulate_successful_transaction": {
            "name": "simulate_successful_transaction",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_use_pending_nonce_when_building_payload.simulate_pending_transaction": {
            "name": "simulate_pending_transaction",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_use_pending_nonce_when_building_payload.simulate_clearing_transactions": {
            "name": "simulate_clearing_transactions",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "how_many": [
                    "float",
                    "List[str]",
                    "List[Tuple[int, float, float]]"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_blockchain_utils.py": {
        "test_epoch_to_period": {
            "name": "test_epoch_to_period",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_period_to_epoch": {
            "name": "test_period_to_epoch",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_estimate_block_number_for_period": {
            "name": "test_estimate_block_number_for_period",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/unit/test_block_confirmations.py": {
        "receipt": {
            "name": "receipt",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_check_transaction_is_on_chain": {
            "name": "test_check_transaction_is_on_chain",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_ethereum_client": [],
                "receipt": []
            }
        },
        "test_block_until_enough_confirmations": {
            "name": "test_block_until_enough_confirmations",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_ethereum_client": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "receipt": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_wait_for_receipt_no_confirmations": {
            "name": "test_wait_for_receipt_no_confirmations",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_ethereum_client": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "mock.Mock"
                ],
                "receipt": []
            }
        },
        "test_wait_for_receipt_with_confirmations": {
            "name": "test_wait_for_receipt_with_confirmations",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ],
                "mock_ethereum_client": [
                    "mock.Mock",
                    "mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "receipt": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_bytestring_types.py": {
        "test_message_kit_serialization_via_enrico": {
            "name": "test_message_kit_serialization_via_enrico",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_card.py": {
        "test_character_card": {
            "name": "test_character_card",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "character_class": [
                    "int",
                    "str"
                ],
                "capsys": [
                    "tests.hints.CleavageCall",
                    "tests.hints.RightAccumulatorCall",
                    "tests.hints.LeftAccumulatorCall",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_contract_versioning.py": {
        "test_devdoc_regex_pattern": {
            "name": "test_devdoc_regex_pattern",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "full_match": [
                    "str",
                    "Mapping[str, List[str]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_control.py": {
        "test_positive_integer_field": {
            "name": "test_positive_integer_field",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_list_field": {
            "name": "test_string_list_field",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_base64_representation_field": {
            "name": "test_base64_representation_field",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/unit/test_controllers.py": {
        "test_web_controller_handling_worker_pool_exception": {
            "name": "test_web_controller_handling_worker_pool_exception",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_web_controller_handling_worker_pool_exception.get_ursulas_method": {
            "name": "get_ursulas_method",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_web_controller_handling_worker_pool_exception.get_ursulas": {
            "name": "get_ursulas",
            "location": 50,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/unit/test_datafeeds.py": {
        "test_probe_datafeed": {
            "name": "test_probe_datafeed",
            "location": 90,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_canonical_speed_names": {
            "name": "test_canonical_speed_names",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_etherchain": {
            "name": "test_etherchain",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_upvest": {
            "name": "test_upvest",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "test_zoltu": {
            "name": "test_zoltu",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "test_datafeed_median_gas_price_strategy": {
            "name": "test_datafeed_median_gas_price_strategy",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_datafeed_median_gas_price_strategy.construct_mock_gas_strategy": {
            "name": "construct_mock_gas_strategy",
            "location": 227,
            "return": [],
            "arguments": {
                "gas_price": []
            }
        },
        "test_datafeed_median_gas_price_strategy.construct_mock_gas_strategy._mock_gas_strategy": {
            "name": "_mock_gas_strategy",
            "location": 228,
            "return": [],
            "arguments": {
                "web3": [],
                "tx": []
            }
        }
    },
    "nucypher-development/tests/unit/test_decorators.py": {
        "test_validate_checksum_address": {
            "name": "test_validate_checksum_address",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "get_random_checksum_address": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_validate_checksum_address.just_one_address": {
            "name": "just_one_address",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "checksum_address": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "test_validate_checksum_address.optional_checksum_address": {
            "name": "optional_checksum_address",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "whatever": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable[[], None]",
                    "str"
                ],
                "staking_address": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable[[], None]",
                    "str"
                ]
            }
        },
        "test_validate_checksum_address.multiple_checksum_addresses": {
            "name": "multiple_checksum_addresses",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "whatever": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable[[], None]",
                    "str"
                ],
                "operator_address": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable[[], None]",
                    "str"
                ],
                "staking_address": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_external_ip_utilities.py": {
        "mock_requests": {
            "name": "mock_requests",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Dict[str, Union[bool, str]]",
                    "bool",
                    "T"
                ]
            }
        },
        "mock_client": {
            "name": "mock_client",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "mock_default_teachers": {
            "name": "mock_default_teachers",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_get_external_ip_from_centralized_source": {
            "name": "test_get_external_ip_from_centralized_source",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "mock_requests": []
            }
        },
        "test_get_external_ip_from_empty_known_nodes": {
            "name": "test_get_external_ip_from_empty_known_nodes",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "mock_requests": []
            }
        },
        "test_get_external_ip_from_known_nodes_with_one_known_node": {
            "name": "test_get_external_ip_from_known_nodes_with_one_known_node",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "mock_requests": []
            }
        },
        "test_get_external_ip_from_known_nodes": {
            "name": "test_get_external_ip_from_known_nodes",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "mock_client": []
            }
        },
        "test_get_external_ip_from_known_nodes_client": {
            "name": "test_get_external_ip_from_known_nodes_client",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_client": []
            }
        },
        "test_get_external_ip_default_teacher_unreachable": {
            "name": "test_get_external_ip_default_teacher_unreachable",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "adam.perception.perception_graph.PerceptionGraph"
                ]
            }
        },
        "test_get_external_ip_from_default_teacher": {
            "name": "test_get_external_ip_from_default_teacher",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_client": [],
                "mock_requests": []
            }
        },
        "test_get_external_ip_default_unknown_network": {
            "name": "test_get_external_ip_default_unknown_network",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_external_ip_cascade_failure": {
            "name": "test_get_external_ip_cascade_failure",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_requests": [
                    "List[T]"
                ]
            }
        },
        "Dummy.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "canonical_address": [
                    "raiden.network.proxies.proxy_manager.ProxyManager",
                    "int",
                    "str"
                ]
            }
        },
        "Dummy.mature": {
            "name": "mature",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dummy.verify_node": {
            "name": "verify_node",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Dummy.rest_url": {
            "name": "rest_url",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dummy.rest_interface": {
            "name": "rest_interface",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dummy.metadata": {
            "name": "metadata",
            "location": 75,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/unit/test_gas_strategies.py": {
        "test_fixed_price_gas_strategy": {
            "name": "test_fixed_price_gas_strategy",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_max_price_gas_strategy": {
            "name": "test_max_price_gas_strategy",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "monkeypatch": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_logging.py": {
        "naive_print_observer": {
            "name": "naive_print_observer",
            "location": 27,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "get_json_observer_for_file": {
            "name": "get_json_observer_for_file",
            "location": 31,
            "return": [],
            "arguments": {
                "logfile": []
            }
        },
        "expected_processing": {
            "name": "expected_processing",
            "location": 38,
            "return": [],
            "arguments": {
                "string_with_curly_braces": []
            }
        },
        "test_twisted_logger_doesnt_like_curly_braces": {
            "name": "test_twisted_logger_doesnt_like_curly_braces",
            "location": 84,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_twisted_json_logger_doesnt_like_curly_braces_either": {
            "name": "test_twisted_json_logger_doesnt_like_curly_braces_either",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_but_nucypher_logger_is_cool_with_that": {
            "name": "test_but_nucypher_logger_is_cool_with_that",
            "location": 123,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_even_nucypher_json_logger_is_cool": {
            "name": "test_even_nucypher_json_logger_is_cool",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "get_json_observer_for_file.json_observer": {
            "name": "json_observer",
            "location": 32,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "nucypher-development/tests/unit/test_operator_bonded_tracker.py": {
        "test_operator_never_bonded": {
            "name": "test_operator_never_bonded",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "get_random_checksum_address": [
                    "int",
                    "str"
                ]
            }
        },
        "test_operator_bonded_but_becomes_unbonded": {
            "name": "test_operator_bonded_but_becomes_unbonded",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "get_random_checksum_address": [
                    "str",
                    "Optional[str]",
                    "Union[int, None]"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_porter_unit.py": {
        "test_ursula_checksum_address_field": {
            "name": "test_ursula_checksum_address_field",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "get_random_checksum_address": [
                    "int",
                    "str"
                ]
            }
        },
        "test_ursula_checksum_address_string_list_field": {
            "name": "test_ursula_checksum_address_string_list_field",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "get_random_checksum_address": [
                    "str"
                ]
            }
        },
        "test_retrieval_kit_field": {
            "name": "test_retrieval_kit_field",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "get_random_checksum_address": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "test_retrieval_kit_field.run_tests_on_kit": {
            "name": "run_tests_on_kit",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "kit": [
                    "Optional[bool]",
                    "bool",
                    "Optional[complex]"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_prometheus.py": {
        "test_prometheus_metrics_config": {
            "name": "test_prometheus_metrics_config",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_base_metrics_collector": {
            "name": "test_base_metrics_collector",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestGenerateJSON.setUp": {
            "name": "setUp",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.tearDown": {
            "name": "tearDown",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.custom_collector": {
            "name": "custom_collector",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metric_family": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestGenerateJSON.test_counter": {
            "name": "test_counter",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_counter_name_unit_append": {
            "name": "test_counter_name_unit_append",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_counter_total": {
            "name": "test_counter_total",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_gauge": {
            "name": "test_gauge",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_summary": {
            "name": "test_summary",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_histogram": {
            "name": "test_histogram",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_gaugehistogram": {
            "name": "test_gaugehistogram",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_info": {
            "name": "test_info",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_enum": {
            "name": "test_enum",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_unicode": {
            "name": "test_unicode",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_escaping": {
            "name": "test_escaping",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_nonnumber": {
            "name": "test_nonnumber",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_timestamp": {
            "name": "test_timestamp",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_base_metrics_collector.TestBastMetricsCollector.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_base_metrics_collector.TestBastMetricsCollector.initialize": {
            "name": "initialize",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_base_metrics_collector.TestBastMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.custom_collector.CustomCollector.collect": {
            "name": "collect",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_nonnumber.MyNumber.__repr__": {
            "name": "__repr__",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_nonnumber.MyNumber.__float__": {
            "name": "__float__",
            "location": 255,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_nonnumber.MyCollector.collect": {
            "name": "collect",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_timestamp.MyCollector.collect": {
            "name": "collect",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/unit/test_registry_basics.py": {
        "test_contract_registry": {
            "name": "test_contract_registry",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "tempfile_path": [
                    "pathlib.Path",
                    "str",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_web3_clients.py": {
        "test_client_no_provider": {
            "name": "test_client_no_provider",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_geth_web3_client": {
            "name": "test_geth_web3_client",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_autodetect_provider_type_file": {
            "name": "test_autodetect_provider_type_file",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "tempfile_path": []
            }
        },
        "test_autodetect_provider_type_file_none_existent": {
            "name": "test_autodetect_provider_type_file_none_existent",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_file": {
            "name": "test_detect_provider_type_file",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_ipc": {
            "name": "test_detect_provider_type_ipc",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_http": {
            "name": "test_detect_provider_type_http",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_https": {
            "name": "test_detect_provider_type_https",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_ws": {
            "name": "test_detect_provider_type_ws",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_infura_web3_client": {
            "name": "test_infura_web3_client",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_alchemy_web3_client": {
            "name": "test_alchemy_web3_client",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parity_web3_client": {
            "name": "test_parity_web3_client",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ganache_web3_client": {
            "name": "test_ganache_web3_client",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gas_prices": {
            "name": "test_gas_prices",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock"
                ],
                "mock_ethereum_client": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "SyncedMockW3Eth.getBlock": {
            "name": "getBlock",
            "location": 74,
            "return": [
                "int",
                "datetime.timedelta",
                "Optional[datetime.tzinfo]",
                "str"
            ],
            "arguments": {
                "self": [],
                "blockNumber": [
                    "int",
                    "eth.rlp.blocks.BaseBlock",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "MockedW3GethWithPeers.admin": {
            "name": "admin",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedW3GethWithNoPeers.admin": {
            "name": "admin",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncedMockWeb3.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "SyncedMockWeb3.clientVersion": {
            "name": "clientVersion",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncedMockWeb3.isConnected": {
            "name": "isConnected",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterfaceTestBase._configure_registry": {
            "name": "_configure_registry",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterfaceTestBase._setup_solidity": {
            "name": "_setup_solidity",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterfaceTestBase.attach_middleware": {
            "name": "attach_middleware",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTypeTestClient.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected_provider_class": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "actual_provider_to_attach": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ProviderTypeTestClient._attach_eth_provider": {
            "name": "_attach_eth_provider",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraTestClient._attach_eth_provider": {
            "name": "_attach_eth_provider",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlchemyTestClient._attach_eth_provider": {
            "name": "_attach_eth_provider",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GethClientTestBlockchain._attach_eth_provider": {
            "name": "_attach_eth_provider",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParityClientTestInterface._attach_eth_provider": {
            "name": "_attach_eth_provider",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GanacheClientTestInterface._attach_eth_provider": {
            "name": "_attach_eth_provider",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedW3GethWithPeers.admin.GethAdmin.peers": {
            "name": "peers",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedW3GethWithNoPeers.admin.GethAdmin.peers": {
            "name": "peers",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/unit/test_web3_middleware.py": {
        "test_is_request_result_retry": {
            "name": "test_is_request_result_retry",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "retry_middleware_class": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "test_request_with_retry": {
            "name": "test_request_with_retry",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "retry_middleware_class": [
                    "Dict[str, str]"
                ]
            }
        },
        "test_request_with_non_retry_exception": {
            "name": "test_request_with_non_retry_exception",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "retry_middleware_class": []
            }
        },
        "test_request_success_with_no_retry": {
            "name": "test_request_success_with_no_retry",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "retry_middleware_class": [
                    "Dict[str, str]"
                ]
            }
        },
        "test_request_with_retry_exponential_backoff": {
            "name": "test_request_with_retry_exponential_backoff",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_alchemy_request_with_retry": {
            "name": "test_alchemy_request_with_retry",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_infura_request_with_retry": {
            "name": "test_infura_request_with_retry",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_request_with_non_retry_exception.forbidden_request": {
            "name": "forbidden_request",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "method": [
                    "VT",
                    "Iterable[str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Callable[..., str]"
                ],
                "params": [
                    "VT",
                    "Iterable[str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Callable[..., str]"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/test_web3_signers.py": {
        "mock_account": {
            "name": "mock_account",
            "location": 44,
            "return": [
                "dict",
                "int",
                "Exception",
                "str"
            ],
            "arguments": {}
        },
        "simple_trezor_uri": {
            "name": "simple_trezor_uri",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_blank_keystore_uri": {
            "name": "test_blank_keystore_uri",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_trezor_transaction_format": {
            "name": "test_trezor_transaction_format",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_trezor": {
            "name": "mock_trezor",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "str",
                    "dict"
                ],
                "mock_account": [
                    "eth.rlp.headers.CollationHeader"
                ]
            }
        },
        "test_trezor_signer_creation_from_uri": {
            "name": "test_trezor_signer_creation_from_uri",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "mock_trezor": [
                    "Generator[None, Any, None]"
                ],
                "simple_trezor_uri": [
                    "slice"
                ]
            }
        },
        "test_trezor_signer_uri_slip44_paths": {
            "name": "test_trezor_signer_uri_slip44_paths",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "mock_trezor": [],
                "simple_trezor_uri": []
            }
        },
        "test_trezor_sign_transaction": {
            "name": "test_trezor_sign_transaction",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "mock_trezor": [],
                "mock_account": []
            }
        },
        "mock_trezor.FakeTrezorClient.call": {
            "name": "call",
            "location": 80,
            "return": [
                "str",
                "bool",
                "List[float]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "mock_trezor.FakeTrezorClient.get_device_id": {
            "name": "get_device_id",
            "location": 84,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_trezor.FakeTrezorClient.get_address": {
            "name": "get_address",
            "location": 87,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/unit/test_work_tracker_error_handling.py": {
        "log": {
            "name": "log",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "float",
                    "pypi2nix.logger.Logger",
                    "logging.Logger"
                ]
            }
        },
        "test_worker_failure_resilience": {
            "name": "test_worker_failure_resilience",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_worker_failure_non_resilience": {
            "name": "test_worker_failure_non_resilience",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_worker_rate_limiting": {
            "name": "test_worker_rate_limiting",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_worker_stopped_after_required_executions": {
            "name": "test_worker_stopped_after_required_executions",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "num_executions": [
                    "str",
                    "Union[Literal[-1], Literal]",
                    "Dict[str, Union[Any, int, str]]",
                    "bool"
                ]
            }
        },
        "WorkTrackerArbitraryFailureConditions.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "clock": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "abort_on_error": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "WorkTrackerArbitraryFailureConditions._do_work": {
            "name": "_do_work",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerArbitraryFailureConditions.staking_agent": {
            "name": "staking_agent",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerArbitraryFailureConditions._crash_gracefully": {
            "name": "_crash_gracefully",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "WorkTrackerArbitraryFailureConditions.check_success_conditions": {
            "name": "check_success_conditions",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerThatFailsHalfTheTime.check_success_conditions": {
            "name": "check_success_conditions",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerTrackExecutions.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "clock": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "num_executions_before_stop": [
                    "Callable",
                    "Union[int, List]"
                ]
            }
        },
        "WorkTrackerTrackExecutions._do_work": {
            "name": "_do_work",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerTrackExecutions.stop": {
            "name": "stop",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerTrackExecutions._configure": {
            "name": "_configure",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerTrackExecutions._prep_work_state": {
            "name": "_prep_work_state",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerTrackExecutions._final_work_prep_before_transaction": {
            "name": "_final_work_prep_before_transaction",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerTrackExecutions._fire_commitment": {
            "name": "_fire_commitment",
            "location": 108,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerTrackExecutions._should_do_work_now": {
            "name": "_should_do_work_now",
            "location": 111,
            "return": [
                "Optional[int]",
                "Callable",
                "str",
                "Callable[..., Awaitable]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerTrackExecutions._WorkTrackerBase__track_pending_commitments": {
            "name": "_WorkTrackerBase__track_pending_commitments",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_worker_failure_resilience.advance_one_cycle": {
            "name": "advance_one_cycle",
            "location": 124,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_worker_failure_resilience.checkworkstate": {
            "name": "checkworkstate",
            "location": 127,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_worker_failure_resilience.start": {
            "name": "start",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_worker_failure_resilience.warning_trapper": {
            "name": "warning_trapper",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Sequence",
                    "list",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_worker_failure_non_resilience.advance_one_cycle": {
            "name": "advance_one_cycle",
            "location": 167,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_worker_failure_non_resilience.checkworkstate": {
            "name": "checkworkstate",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_worker_failure_non_resilience.start": {
            "name": "start",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "test_worker_failure_non_resilience.critical_trapper": {
            "name": "critical_trapper",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "str",
                    "Sequence[Any]"
                ]
            }
        },
        "WorkTrackerThatFailsFor12HoursThenSucceeds.check_success_conditions": {
            "name": "check_success_conditions",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTrackerThatFailsFor12HoursThenSucceeds.random_interval": {
            "name": "random_interval",
            "location": 206,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "fails": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "test_worker_rate_limiting.advance_one_cycle": {
            "name": "advance_one_cycle",
            "location": 228,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_worker_rate_limiting.checkfailures": {
            "name": "checkfailures",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_worker_rate_limiting.start": {
            "name": "start",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "test_worker_stopped_after_required_executions.start": {
            "name": "start",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_worker_stopped_after_required_executions.advance_one_cycle": {
            "name": "advance_one_cycle",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WorkTrackerArbitraryFailureConditions.staking_agent.MockStakingAgent.get_current_period": {
            "name": "get_current_period",
            "location": 62,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/unit/characters/test_character_serialization.py": {
        "test_serialize_ursula": {
            "name": "test_serialize_ursula",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/characters/test_character_sign_and_verify.py": {
        "test_actor_without_signing_power_cannot_sign": {
            "name": "test_actor_without_signing_power_cannot_sign",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_actor_with_signing_power_can_sign": {
            "name": "test_actor_with_signing_power_can_sign",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_anybody_can_verify": {
            "name": "test_anybody_can_verify",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_anybody_can_encrypt": {
            "name": "test_anybody_can_encrypt",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/unit/characters/control/test_character_fields.py": {
        "test_file": {
            "name": "test_file",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_date_time": {
            "name": "test_date_time",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_key": {
            "name": "test_key",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_message_kit": {
            "name": "test_message_kit",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str"
                ],
                "federated_alice": [
                    "str"
                ]
            }
        },
        "test_treasure_map": {
            "name": "test_treasure_map",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/cli/test_help.py": {
        "test_echo_nucypher_version": {
            "name": "test_echo_nucypher_version",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ]
            }
        },
        "test_nucypher_help_message": {
            "name": "test_nucypher_help_message",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Callable"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "test_character_help_messages": {
            "name": "test_character_help_messages",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "entry_point_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "entry_point": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_character_sub_command_help_messages": {
            "name": "test_character_sub_command_help_messages",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Dict[str, int]",
                    "Dict[str, Any]"
                ],
                "entry_point_name": [
                    "Union[dict, list]",
                    "str",
                    "int",
                    "eth.vm.computation.BaseComputation",
                    "list"
                ],
                "entry_point": [
                    "Optional[str]",
                    "str",
                    "list"
                ]
            }
        },
        "test_nucypher_deploy_help_message": {
            "name": "test_nucypher_deploy_help_message",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_echo_solidity_version": {
            "name": "test_echo_solidity_version",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ]
            }
        },
        "test_echo_config_root": {
            "name": "test_echo_config_root",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": []
            }
        },
        "test_echo_logging_root": {
            "name": "test_echo_logging_root",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": []
            }
        },
        "test_contacts_help": {
            "name": "test_contacts_help",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ]
            }
        },
        "test_contacts_show_help": {
            "name": "test_contacts_show_help",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/crypto/test_keccak_sanity.py": {
        "TestCrypto.test_secure_random": {
            "name": "test_secure_random",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_secure_random_range": {
            "name": "test_secure_random_range",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_keccak_digest": {
            "name": "test_keccak_digest",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/unit/crypto/test_keypairs.py": {
        "test_gen_keypair_if_needed": {
            "name": "test_gen_keypair_if_needed",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keypair_with_umbral_keys": {
            "name": "test_keypair_with_umbral_keys",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keypair_serialization": {
            "name": "test_keypair_serialization",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keypair_fingerprint": {
            "name": "test_keypair_fingerprint",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_signing": {
            "name": "test_signing",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/unit/crypto/test_keystore.py": {
        "test_invalid_keystore_path_parts": {
            "name": "test_invalid_keystore_path_parts",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "tmp_path_factory": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_invalid_keystore_file_type": {
            "name": "test_invalid_keystore_file_type",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "str"
                ],
                "tmp_path_factory": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_keystore_instantiation_defaults": {
            "name": "test_keystore_instantiation_defaults",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path_factory": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_keystore_generation_defaults": {
            "name": "test_keystore_generation_defaults",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path_factory": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_keystore_invalid_password": {
            "name": "test_keystore_invalid_password",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_keystore_generate_report_interactive_false": {
            "name": "test_keystore_generate_report_interactive_false",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_keystore_derive_crypto_power_without_unlock": {
            "name": "test_keystore_derive_crypto_power_without_unlock",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_keystore_serializer": {
            "name": "test_keystore_serializer",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keystore_lock_unlock": {
            "name": "test_keystore_lock_unlock",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_write_keystore_file": {
            "name": "test_write_keystore_file",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "pathlib.Path",
                    "os.PathLike"
                ]
            }
        },
        "test_decrypt_keystore": {
            "name": "test_decrypt_keystore",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_keystore_persistence": {
            "name": "test_keystore_persistence",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_restore_keystore_from_mnemonic": {
            "name": "test_restore_keystore_from_mnemonic",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path"
                ],
                "mocker": [
                    "pathlib.Path"
                ]
            }
        },
        "test_import_custom_keystore": {
            "name": "test_import_custom_keystore",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_derive_signing_power": {
            "name": "test_derive_signing_power",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_derive_decrypting_power": {
            "name": "test_derive_decrypting_power",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_derive_delegating_power": {
            "name": "test_derive_delegating_power",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_derive_hosting_power": {
            "name": "test_derive_hosting_power",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/datastore/conftest.py": {
        "mock_or_real_datastore": {
            "name": "mock_or_real_datastore",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "mock_or_real_lmdb_env": {
            "name": "mock_or_real_lmdb_env",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Iterable[int]"
                ]
            }
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "metafunc": [
                    "List[str]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "nucypher-development/tests/unit/datastore/test_datastore.py": {
        "test_datastore_create": {
            "name": "test_datastore_create",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_datastore_describe": {
            "name": "test_datastore_describe",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "mock_or_real_datastore": []
            }
        },
        "test_datastore_query_by": {
            "name": "test_datastore_query_by",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "mock_or_real_datastore": []
            }
        },
        "test_datastore_record_read": {
            "name": "test_datastore_record_read",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "mock_or_real_lmdb_env": []
            }
        },
        "test_datastore_record_write": {
            "name": "test_datastore_record_write",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "mock_or_real_lmdb_env": []
            }
        },
        "test_key_tuple": {
            "name": "test_key_tuple",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/utils/blockchain.py": {
        "token_airdrop": {
            "name": "token_airdrop",
            "location": 50,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "token_agent": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "amount": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "transacting_power": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "addresses": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "free_gas_price_strategy": {
            "name": "free_gas_price_strategy",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "w3": [
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ],
                "transaction_params": [
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ]
            }
        },
        "token_airdrop.txs": {
            "name": "txs",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TesterBlockchain.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_accounts": [
                    "int",
                    "float",
                    "str",
                    "core.types.FBAccessToken",
                    "Optional[str]"
                ],
                "poa": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "light": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "eth_airdrop": [
                    "bool"
                ],
                "free_transactions": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "List[int]",
                    "str",
                    "Optional[int]"
                ],
                "compile_now": [
                    "str",
                    "Optional[bool]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "TesterBlockchain.attach_middleware": {
            "name": "attach_middleware",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.__generate_insecure_unlocked_accounts": {
            "name": "__generate_insecure_unlocked_accounts",
            "location": 146,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TesterBlockchain.ether_airdrop": {
            "name": "ether_airdrop",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "bool",
                    "float",
                    "List[float]",
                    "nucypher.blockchain.eth.token.NU"
                ]
            }
        },
        "TesterBlockchain.time_travel": {
            "name": "time_travel",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hours": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Iterable['cirq.Qid']"
                ],
                "seconds": [
                    "bool",
                    "Union[int, float]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "TesterBlockchain.bootstrap_network": {
            "name": "bootstrap_network",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]"
                ],
                "registry": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "economics": [
                    "Dict[str, Any]",
                    "str",
                    "tests.hints.Strategy[tests.hints.Strategy]"
                ]
            }
        },
        "TesterBlockchain.etherbase_account": {
            "name": "etherbase_account",
            "location": 244,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.alice_account": {
            "name": "alice_account",
            "location": 248,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.bob_account": {
            "name": "bob_account",
            "location": 252,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.ursula_account": {
            "name": "ursula_account",
            "location": 255,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "TesterBlockchain.stake_provider_account": {
            "name": "stake_provider_account",
            "location": 260,
            "return": [
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TesterBlockchain.ursulas_accounts": {
            "name": "ursulas_accounts",
            "location": 266,
            "return": [
                "List[str]",
                "List[T]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.stake_providers_accounts": {
            "name": "stake_providers_accounts",
            "location": 270,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.unassigned_accounts": {
            "name": "unassigned_accounts",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.wait_for_receipt": {
            "name": "wait_for_receipt",
            "location": 280,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "txhash": [
                    "bool",
                    "int",
                    "Mapping[str, Any]",
                    "str",
                    "Callable"
                ],
                "timeout": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TesterBlockchain.get_block_number": {
            "name": "get_block_number",
            "location": 288,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Optional[int]",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.read_storage_slot": {
            "name": "read_storage_slot",
            "location": 291,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bytes",
                    "Optional[str]",
                    "Any",
                    "str",
                    "Sequence[int]"
                ],
                "slot": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-development/tests/utils/config.py": {
        "assemble": {
            "name": "assemble",
            "location": 36,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "federated": [
                    "str",
                    "Tuple[float, float]",
                    "int"
                ],
                "checksum_address": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ],
                "eth_provider_uri": [
                    "bool",
                    "Optional[List[int]]",
                    "dict"
                ],
                "test_registry": [
                    "bool",
                    "Optional[List[int]]",
                    "dict"
                ],
                "known_nodes": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "make_ursula_test_configuration": {
            "name": "make_ursula_test_configuration",
            "location": 66,
            "return": [
                "str",
                "backup.config.Config"
            ],
            "arguments": {
                "rest_port": [
                    "bool",
                    "List[Dict]",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, str]"
                ],
                "payment_provider": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "make_alice_test_configuration": {
            "name": "make_alice_test_configuration",
            "location": 82,
            "return": [
                "str",
                "backup.config.Config",
                "solo.configurator.registry.Registry",
                "Mapping[str, Any]",
                "cerise.config.Config"
            ],
            "arguments": {
                "payment_provider": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "make_bob_test_configuration": {
            "name": "make_bob_test_configuration",
            "location": 95,
            "return": [
                "str",
                "backup.config.Config",
                "solo.configurator.registry.Registry",
                "Mapping[str, Any]",
                "cerise.config.Config"
            ],
            "arguments": {}
        }
    },
    "nucypher-development/tests/utils/controllers.py": {
        "get_fields": {
            "name": "get_fields",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "interface": [
                    "str",
                    "Optional[str]"
                ],
                "method_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "validate_json_rpc_response_data": {
            "name": "validate_json_rpc_response_data",
            "location": 38,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "response": [
                    "Dict[str, List[str]]",
                    "str",
                    "Callable",
                    "dict"
                ],
                "method_name": [
                    "str",
                    "Union[str, \"TrackingCode\"]"
                ],
                "interface": [
                    "str",
                    "Union[str, \"TrackingCode\"]"
                ]
            }
        },
        "TestRPCResponse.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]"
                ],
                "payload": [
                    "str",
                    "Optional[str]"
                ],
                "success": [
                    "Optional[Callable[[], bool]]",
                    "bool",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "error": [
                    "Optional[Callable[[], bool]]",
                    "bool",
                    "int",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "TestRPCResponse.__bytes__": {
            "name": "__bytes__",
            "location": 63,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCResponse.error_code": {
            "name": "error_code",
            "location": 67,
            "return": [
                "dict",
                "str",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCResponse.content": {
            "name": "content",
            "location": 74,
            "return": [
                "Union[str, IO]",
                "bytes",
                "IO[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCResponse.from_string": {
            "name": "from_string",
            "location": 81,
            "return": [
                "str",
                "dict",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int"
                ],
                "response_line": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "JSONRPCTestClient.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rpc_controller": [
                    "float",
                    "int",
                    "Type[T]",
                    "tuple"
                ]
            }
        },
        "JSONRPCTestClient.assemble_request": {
            "name": "assemble_request",
            "location": 129,
            "return": [
                "dict",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "str"
                ]
            }
        },
        "JSONRPCTestClient.receive": {
            "name": "receive",
            "location": 140,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "List[str]",
                    "io.BufferedReader",
                    "bytes"
                ]
            }
        },
        "JSONRPCTestClient.send": {
            "name": "send",
            "location": 148,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "malformed": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/utils/matchers.py": {
        "IsType.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected_type": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "Union[int, bytes]",
                    "type",
                    "dict"
                ]
            }
        },
        "IsType.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Type",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "IsType.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "BaseException",
                "int",
                "Callable[..., None]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-development/tests/utils/middleware.py": {
        "_TestMiddlewareClient.response_cleaner": {
            "name": "response_cleaner",
            "location": 41,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "response": [
                    "requests.models.Response",
                    "Mapping[str, object]",
                    "dict",
                    "Response",
                    "Dict[str, Any]",
                    "scrapy.http.Response"
                ]
            }
        },
        "_TestMiddlewareClient._get_mock_client_by_ursula": {
            "name": "_get_mock_client_by_ursula",
            "location": 45,
            "return": [
                "str",
                "Optional[str]",
                "Union[Sequence[str], Sequence[int]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ]
            }
        },
        "_TestMiddlewareClient._get_mock_client_by_url": {
            "name": "_get_mock_client_by_url",
            "location": 49,
            "return": [
                "str",
                "Optional[str]",
                "Union[Sequence[str], Sequence[int]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_TestMiddlewareClient._get_mock_client_by_port": {
            "name": "_get_mock_client_by_port",
            "location": 53,
            "return": [
                "flask.Flask",
                "Optional[str]",
                "str",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str"
                ]
            }
        },
        "_TestMiddlewareClient._get_ursula_by_port": {
            "name": "_get_ursula_by_port",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "_TestMiddlewareClient.parse_node_or_host_and_port": {
            "name": "parse_node_or_host_and_port",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "host": [
                    "str",
                    "Tuple[str]"
                ],
                "port": [
                    "str",
                    "list",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "_TestMiddlewareClient.invoke_method": {
            "name": "invoke_method",
            "location": 81,
            "return": [
                "dict",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "_TestMiddlewareClient.clean_params": {
            "name": "clean_params",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_kwargs": [
                    "tests.e2e.Helper"
                ]
            }
        },
        "_TestMiddlewareClient.get_certificate": {
            "name": "get_certificate",
            "location": 90,
            "return": [
                "str",
                "path.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "MockRestMiddlewareForLargeFleetTests.get_nodes_via_rest": {
            "name": "get_nodes_via_rest",
            "location": 109,
            "return": [
                "bool",
                "str",
                "MutableMapping[str, int]",
                "List[str]",
                "List[Optional[str]]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, str]",
                    "int",
                    "str",
                    "dict",
                    "bool"
                ],
                "fleet_state_checksum": [
                    "Callable",
                    "bool"
                ],
                "announce_nodes": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "SluggishLargeFleetMiddleware.put_treasure_map_on_node": {
            "name": "put_treasure_map_on_node",
            "location": 123,
            "return": [
                "bool",
                "List[object]",
                "Iterable",
                "str",
                "Tuple[int, Dict[str, Any]]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "_MiddlewareClientWithConnectionProblems.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_MiddlewareClientWithConnectionProblems._get_ursula_by_port": {
            "name": "_get_ursula_by_port",
            "location": 137,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "raiden.utils.Any",
                    "str"
                ]
            }
        },
        "_MiddlewareClientWithConnectionProblems.get": {
            "name": "get",
            "location": 143,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIsDownMiddleware.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIsDownMiddleware.node_is_down": {
            "name": "node_is_down",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "NodeIsDownMiddleware.node_is_up": {
            "name": "node_is_up",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list",
                    "bytes"
                ]
            }
        },
        "NodeIsDownMiddleware.all_nodes_up": {
            "name": "all_nodes_up",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIsDownMiddleware.all_nodes_down": {
            "name": "all_nodes_down",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvilMiddleWare.propagate_shitty_interface_id": {
            "name": "propagate_shitty_interface_id",
            "location": 182,
            "return": [
                "bytes",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "bytes",
                    "Optional[Exception]",
                    "Dict[str, List[Any]]"
                ],
                "shitty_metadata": [
                    "str",
                    "purplship.providers.purolator.utils.Settings"
                ]
            }
        },
        "EvilMiddleWare.upload_arbitrary_data": {
            "name": "upload_arbitrary_data",
            "location": 194,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "path": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "nucypher-development/tests/utils/policy.py": {
        "generate_random_label": {
            "name": "generate_random_label",
            "location": 31,
            "return": [
                "str",
                "Dict[str, str]",
                "bytearray",
                "Union[bytes, bytearray]",
                "int"
            ],
            "arguments": {}
        },
        "retrieval_request_setup": {
            "name": "retrieval_request_setup",
            "location": 44,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, str]]",
                "Dict[int, List[str]]"
            ],
            "arguments": {
                "enacted_policy": [
                    "nucypher.blockchain.eth.agents.MinerAgent",
                    "int",
                    "List[int]"
                ],
                "bob": [
                    "bool",
                    "float",
                    "int",
                    "List[int]"
                ],
                "alice": [
                    "int",
                    "bool",
                    "List[Tuple[str, str]]",
                    "float"
                ],
                "original_message": [
                    "str",
                    "int",
                    "Dict[Tuple[str, str], Exception]"
                ],
                "encode_for_rest": [
                    "bool",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]",
                    "Callable",
                    "Union[int, None]",
                    "Union[float, None]"
                ]
            }
        },
        "retrieval_params_decode_from_rest": {
            "name": "retrieval_params_decode_from_rest",
            "location": 67,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "retrieval_params": [
                    "List[List[int]]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nucypher-development/tests/utils/ursula.py": {
        "select_test_port": {
            "name": "select_test_port",
            "location": 31,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "make_federated_ursulas": {
            "name": "make_federated_ursulas",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula_config": [
                    "Callable",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "int",
                    "Mapping[str, str]"
                ],
                "quantity": [
                    "int",
                    "float",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "know_each_other": [
                    "bool",
                    "float"
                ]
            }
        },
        "make_decentralized_ursulas": {
            "name": "make_decentralized_ursulas",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula_config": [
                    "cmk.base.config.ConfigCache",
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ObjectAttributes"
                ],
                "staking_provider_addresses": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "operator_addresses": [
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "commit_now": [
                    "dict",
                    "eth.VMConfiguration"
                ]
            }
        },
        "make_ursula_for_staking_provider": {
            "name": "make_ursula_for_staking_provider",
            "location": 116,
            "return": [
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "staking_provider": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker",
                    "bool",
                    "Dict[int, Dict[int, Any]]"
                ],
                "operator_address": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker",
                    "bool",
                    "Dict[int, Dict[int, Any]]"
                ],
                "blockchain": [
                    "bool",
                    "str",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "nucypher.blockchain.eth.interfaces.BlockchainInterface",
                    "dict"
                ],
                "ursula_config": [
                    "bool",
                    "str",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "nucypher.blockchain.eth.interfaces.BlockchainInterface",
                    "dict"
                ],
                "ursulas_to_learn_about": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "can.interfaces.vector.xlclass.XLportHandle"
                ]
            }
        },
        "start_pytest_ursula_services": {
            "name": "start_pytest_ursula_services",
            "location": 139,
            "return": [
                "str",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "ursula": [
                    "TextIO",
                    "str"
                ]
            }
        }
    }
}
{
    "nucypher-master/setup.py": {
        "read_requirements": {
            "name": "read_requirements",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "dict"
                ]
            }
        },
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostDevelopCommand.run": {
            "name": "run",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/deploy/ansible/inventory/ec2.py": {
        "Ec2Inventory._empty_inventory": {
            "name": "_empty_inventory",
            "location": 259,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.is_cache_valid": {
            "name": "is_cache_valid",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.read_settings": {
            "name": "read_settings",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.parse_cli_args": {
            "name": "parse_cli_args",
            "location": 540,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.do_api_calls_update_cache": {
            "name": "do_api_calls_update_cache",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.connect": {
            "name": "connect",
            "location": 573,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.boto_fix_security_token_in_profile": {
            "name": "boto_fix_security_token_in_profile",
            "location": 582,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "connect_args": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Ec2Inventory.connect_to_aws": {
            "name": "connect_to_aws",
            "location": 589,
            "return": [
                "str",
                "int",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "int",
                    "bool",
                    "float"
                ],
                "region": [
                    "Optional[float]",
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Ec2Inventory.get_instances_by_region": {
            "name": "get_instances_by_region",
            "location": 610,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "List[str]"
                ]
            }
        },
        "Ec2Inventory.tags_match_filters": {
            "name": "tags_match_filters",
            "location": 661,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "dict"
                ]
            }
        },
        "Ec2Inventory.get_rds_instances_by_region": {
            "name": "get_rds_instances_by_region",
            "location": 688,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "int",
                    "Optional[Iterable[T]]",
                    "bool"
                ]
            }
        },
        "Ec2Inventory.include_rds_clusters_by_region": {
            "name": "include_rds_clusters_by_region",
            "location": 730,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bytearray"
                ]
            }
        },
        "Ec2Inventory.get_elasticache_clusters_by_region": {
            "name": "get_elasticache_clusters_by_region",
            "location": 793,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.get_elasticache_replication_groups_by_region": {
            "name": "get_elasticache_replication_groups_by_region",
            "location": 836,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.get_auth_error_message": {
            "name": "get_auth_error_message",
            "location": 870,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.fail_with_error": {
            "name": "fail_with_error",
            "location": 887,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "err_msg": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "err_operation": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ]
            }
        },
        "Ec2Inventory.get_instance": {
            "name": "get_instance",
            "location": 895,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bytes",
                    "List[int]",
                    "str"
                ],
                "instance_id": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_instance": {
            "name": "add_instance",
            "location": 903,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict"
                ],
                "region": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Ec2Inventory.add_rds_instance": {
            "name": "add_rds_instance",
            "location": 1098,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Union[int, str]"
                ],
                "region": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_cluster": {
            "name": "add_elasticache_cluster",
            "location": 1219,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "cluster": [],
                "region": [
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_node": {
            "name": "add_elasticache_node",
            "location": 1318,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "cluster": [
                    "dict",
                    "type"
                ],
                "region": [
                    "bytes",
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_replication_group": {
            "name": "add_elasticache_replication_group",
            "location": 1405,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "replication_group": [
                    "int",
                    "Type"
                ],
                "region": [
                    "str",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "Ec2Inventory.get_route53_records": {
            "name": "get_route53_records",
            "location": 1458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.get_instance_route53_names": {
            "name": "get_instance_route53_names",
            "location": 1485,
            "return": [
                "str",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "Union[Sequence[str], Sequence[int]]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "Ec2Inventory.get_host_info_dict_from_instance": {
            "name": "get_host_info_dict_from_instance",
            "location": 1506,
            "return": [
                "str",
                "bool",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Ec2Inventory.get_host_info_dict_from_describe_dict": {
            "name": "get_host_info_dict_from_describe_dict",
            "location": 1559,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "describe_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Ec2Inventory.get_host_info": {
            "name": "get_host_info",
            "location": 1644,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.push": {
            "name": "push",
            "location": 1663,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "my_dict": [
                    "dict",
                    "str",
                    "Callable"
                ],
                "key": [
                    "dict",
                    "str",
                    "Callable"
                ],
                "element": [
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Callable]"
                ]
            }
        },
        "Ec2Inventory.push_group": {
            "name": "push_group",
            "location": 1673,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "my_dict": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "key": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "element": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "Ec2Inventory.get_inventory_from_cache": {
            "name": "get_inventory_from_cache",
            "location": 1682,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.load_index_from_cache": {
            "name": "load_index_from_cache",
            "location": 1690,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.write_to_cache": {
            "name": "write_to_cache",
            "location": 1696,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Dict[str, float]",
                    "bytes",
                    "List[str]",
                    "Mapping[str, Any]"
                ],
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Ec2Inventory.uncammelize": {
            "name": "uncammelize",
            "location": 1703,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T",
                    "KT",
                    "Union[int, slice]",
                    "bytes"
                ]
            }
        },
        "Ec2Inventory.to_safe": {
            "name": "to_safe",
            "location": 1707,
            "return": [
                "bool",
                "List[Dict[str, str]]",
                "list",
                "Tuple[Sequence]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Ec2Inventory.json_format_dict": {
            "name": "json_format_dict",
            "location": 1714,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ],
                "pretty": [
                    "bool",
                    "Optional[bool]",
                    "list",
                    "memoryview",
                    "Iterable[bytes]",
                    "List[Dict]"
                ]
            }
        }
    },
    "nucypher-master/docs/source/conf.py": {
        "remove_module_license": {
            "name": "remove_module_license",
            "location": 221,
            "return": [],
            "arguments": {
                "app": [],
                "what": [],
                "name": [],
                "obj": [],
                "options": [],
                "lines": []
            }
        },
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 226,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 264,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "nucypher-master/examples/populate_mario_box.py": {
        "mario_box_cli": {
            "name": "mario_box_cli",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "plaintext_dir": [
                    "str",
                    "dict",
                    "IO"
                ],
                "alice_config": [
                    "str"
                ],
                "label": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "outfile": [
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-master/examples/finnegans_wake_demo/finnegans-wake-demo.py": {},
    "nucypher-master/examples/heartbeat_demo/alicia.py": {},
    "nucypher-master/examples/heartbeat_demo/doctor.py": {},
    "nucypher-master/examples/heartbeat_demo/doctor_keys.py": {
        "generate_doctor_keys": {
            "name": "generate_doctor_keys",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_get_keys": {
            "name": "_get_keys",
            "location": 48,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "file": [
                    "str",
                    "Optional[str]"
                ],
                "key_class": [
                    "str",
                    "bytes",
                    "Union[bytes, str]",
                    "Union[str, bytes]",
                    "int"
                ]
            }
        },
        "get_doctor_pubkeys": {
            "name": "get_doctor_pubkeys",
            "location": 60,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_doctor_privkeys": {
            "name": "get_doctor_privkeys",
            "location": 64,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/examples/heartbeat_demo/heart_monitor.py": {
        "generate_heart_rate_samples": {
            "name": "generate_heart_rate_samples",
            "location": 28,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "policy_pubkey": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "samples": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "save_as_file": [
                    "bool",
                    "str",
                    "List[List[str]]"
                ]
            }
        }
    },
    "nucypher-master/newsfragments/validate_files.py": {},
    "nucypher-master/nucypher/exceptions.py": {
        "DevelopmentInstallationRequired.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "importable_name": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/types.py": {},
    "nucypher-master/nucypher/__about__.py": {},
    "nucypher-master/nucypher/__init__.py": {},
    "nucypher-master/nucypher/blockchain/economics.py": {
        "BaseEconomics.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "initial_supply": [
                    "int",
                    "bool",
                    "float"
                ],
                "total_supply": [
                    "int",
                    "bool",
                    "float"
                ],
                "issuance_decay_coefficient": [
                    "int",
                    "bool",
                    "float"
                ],
                "lock_duration_coefficient_1": [
                    "int",
                    "bool",
                    "float"
                ],
                "lock_duration_coefficient_2": [
                    "int",
                    "bool",
                    "float"
                ],
                "maximum_rewarded_periods": [
                    "int",
                    "bool",
                    "float"
                ],
                "first_phase_supply": [
                    "int",
                    "bool",
                    "float"
                ],
                "first_phase_max_issuance": [
                    "int",
                    "bool",
                    "float"
                ],
                "hours_per_period": [
                    "int",
                    "bool",
                    "float"
                ],
                "minimum_locked_periods": [
                    "int",
                    "bool",
                    "float"
                ],
                "minimum_allowed_locked": [
                    "int",
                    "List[str]",
                    "Callable",
                    "str"
                ],
                "maximum_allowed_locked": [
                    "int",
                    "List[str]",
                    "Callable",
                    "str"
                ],
                "minimum_worker_periods": [
                    "int",
                    "bool",
                    "float"
                ],
                "hash_algorithm": [
                    "int"
                ],
                "base_penalty": [
                    "str",
                    "int",
                    "bool"
                ],
                "penalty_history_coefficient": [
                    "int",
                    "bool",
                    "float"
                ],
                "percentage_penalty_coefficient": [
                    "int",
                    "bool",
                    "float"
                ],
                "reward_coefficient": [
                    "int",
                    "bool",
                    "float"
                ],
                "worklock_supply": [
                    "int",
                    "bool",
                    "float"
                ],
                "bidding_start_date": [
                    "int"
                ],
                "bidding_end_date": [
                    "int",
                    "Union[str, int]"
                ],
                "cancellation_end_date": [
                    "int",
                    "Union[str, int]"
                ],
                "worklock_boosting_refund_rate": [
                    "int",
                    "bool",
                    "float"
                ],
                "worklock_commitment_duration": [
                    "int",
                    "bool",
                    "float"
                ],
                "worklock_min_allowed_bid": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseEconomics.erc20_initial_supply": {
            "name": "erc20_initial_supply",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEconomics.erc20_reward_supply": {
            "name": "erc20_reward_supply",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEconomics.erc20_total_supply": {
            "name": "erc20_total_supply",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEconomics.staking_deployment_parameters": {
            "name": "staking_deployment_parameters",
            "location": 213,
            "return": [
                "str",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEconomics.slashing_deployment_parameters": {
            "name": "slashing_deployment_parameters",
            "location": 237,
            "return": [
                "str",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEconomics.worklock_deployment_parameters": {
            "name": "worklock_deployment_parameters",
            "location": 249,
            "return": [
                "str",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEconomics.bidding_duration": {
            "name": "bidding_duration",
            "location": 270,
            "return": [
                "str",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEconomics.cancellation_window_duration": {
            "name": "cancellation_window_duration",
            "location": 275,
            "return": [
                "int",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardTokenEconomics.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "initial_supply": [
                    "str",
                    "float"
                ],
                "first_phase_supply": [
                    "int",
                    "bool",
                    "float"
                ],
                "first_phase_duration": [
                    "int",
                    "bool",
                    "float"
                ],
                "decay_half_life": [
                    "float",
                    "str"
                ],
                "reward_saturation": [
                    "int",
                    "bool",
                    "float"
                ],
                "small_stake_multiplier": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StandardTokenEconomics.first_phase_final_period": {
            "name": "first_phase_final_period",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardTokenEconomics.token_supply_at_period": {
            "name": "token_supply_at_period",
            "location": 391,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "Optional[Mapping[str, Any]]",
                    "int",
                    "Tuple[int, str]",
                    "str"
                ]
            }
        },
        "StandardTokenEconomics.cumulative_rewards_at_period": {
            "name": "cumulative_rewards_at_period",
            "location": 418,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "Tuple[float, float]",
                    "float"
                ]
            }
        },
        "StandardTokenEconomics.rewards_during_period": {
            "name": "rewards_during_period",
            "location": 421,
            "return": [
                "int",
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "Tuple[float, float]",
                    "float"
                ]
            }
        },
        "EconomicsFactory.get_economics": {
            "name": "get_economics",
            "location": 431,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Set[str]]",
                    "str",
                    "int"
                ],
                "registry": [
                    "str",
                    "memoryview",
                    "bytes",
                    "Dict[str, Union[str, int]]",
                    "List[str]",
                    "Type"
                ]
            }
        },
        "EconomicsFactory.retrieve_from_blockchain": {
            "name": "retrieve_from_blockchain",
            "location": 441,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "registry": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/__init__.py": {},
    "nucypher-master/nucypher/blockchain/eth/actors.py": {
        "BaseActor.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "domains": [],
                "checksum_address": []
            }
        },
        "BaseActor.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseActor.__eq__": {
            "name": "__eq__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseActor.eth_balance": {
            "name": "eth_balance",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenActor.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "NucypherTokenActor.token_balance": {
            "name": "token_balance",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractAdministrator.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "deployer_address": [],
                "client_password": [],
                "signer": [],
                "staking_escrow_test_mode": [],
                "is_transacting": [],
                "economics": []
            }
        },
        "ContractAdministrator.__repr__": {
            "name": "__repr__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractAdministrator.recruit_sidekick": {
            "name": "recruit_sidekick",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "sidekick_address": [],
                "sidekick_password": []
            }
        },
        "ContractAdministrator.activate_deployer": {
            "name": "activate_deployer",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "refresh": []
            }
        },
        "ContractAdministrator.activate_sidekick": {
            "name": "activate_sidekick",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "refresh": []
            }
        },
        "ContractAdministrator.__get_deployer": {
            "name": "__get_deployer",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": []
            }
        },
        "ContractAdministrator.deploy_contract": {
            "name": "deploy_contract",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": [],
                "gas_limit": [],
                "deployment_mode": [],
                "ignore_deployed": [],
                "progress": [],
                "confirmations": [],
                "deployment_parameters": [],
                "emitter": []
            }
        },
        "ContractAdministrator.upgrade_contract": {
            "name": "upgrade_contract",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": [],
                "ignore_deployed": []
            }
        },
        "ContractAdministrator.retarget_proxy": {
            "name": "retarget_proxy",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": [],
                "target_address": [],
                "just_build_transaction": []
            }
        },
        "ContractAdministrator.rollback_contract": {
            "name": "rollback_contract",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "contract_name": []
            }
        },
        "ContractAdministrator.deploy_network_contracts": {
            "name": "deploy_network_contracts",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "interactive": [],
                "emitter": [],
                "etherscan": [],
                "ignore_deployed": []
            }
        },
        "ContractAdministrator.batch_deposits": {
            "name": "batch_deposits",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "allocation_data_filepath": [],
                "interactive": [],
                "emitter": [],
                "gas_limit": []
            }
        },
        "ContractAdministrator.save_deployment_receipts": {
            "name": "save_deployment_receipts",
            "location": 487,
            "return": [],
            "arguments": {
                "self": [],
                "receipts": [],
                "filename_prefix": []
            }
        },
        "ContractAdministrator.set_fee_rate_range": {
            "name": "set_fee_rate_range",
            "location": 505,
            "return": [],
            "arguments": {
                "self": [],
                "minimum": [],
                "default": [],
                "maximum": [],
                "transaction_gas_limit": []
            }
        },
        "Allocator.__init__": {
            "name": "__init__",
            "location": 528,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [],
                "registry": [],
                "deployer_address": []
            }
        },
        "Allocator.__process_allocation_data": {
            "name": "__process_allocation_data",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "Allocator.__approve_token_transfer": {
            "name": "__approve_token_transfer",
            "location": 565,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "deployer_address": []
            }
        },
        "Allocator._add_substake": {
            "name": "_add_substake",
            "location": 581,
            "return": [],
            "arguments": {
                "self": [],
                "staker": [],
                "amount": [],
                "lock_periods": []
            }
        },
        "Allocator.deposit_next_batch": {
            "name": "deposit_next_batch",
            "location": 606,
            "return": [],
            "arguments": {
                "self": [],
                "sender_address": [],
                "gas_limit": []
            }
        },
        "Allocator.pending_deposits": {
            "name": "pending_deposits",
            "location": 654,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSigActor.__init__": {
            "name": "__init__",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trustee.__init__": {
            "name": "__init__",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": [],
                "client_password": []
            }
        },
        "Trustee.add_authorization": {
            "name": "add_authorization",
            "location": 692,
            "return": [],
            "arguments": {
                "self": [],
                "authorization": [],
                "proposal": []
            }
        },
        "Trustee._combine_authorizations": {
            "name": "_combine_authorizations",
            "location": 702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trustee.execute": {
            "name": "execute",
            "location": 723,
            "return": [],
            "arguments": {
                "self": [],
                "proposal": []
            }
        },
        "Trustee.create_transaction_proposal": {
            "name": "create_transaction_proposal",
            "location": 738,
            "return": [],
            "arguments": {
                "self": [],
                "transaction": []
            }
        },
        "Trustee.propose_adding_owner": {
            "name": "propose_adding_owner",
            "location": 746,
            "return": [],
            "arguments": {
                "self": [],
                "new_owner_address": [],
                "evidence": []
            }
        },
        "Trustee.propose_removing_owner": {
            "name": "propose_removing_owner",
            "location": 752,
            "return": [],
            "arguments": {
                "self": [],
                "owner_address": []
            }
        },
        "Trustee.propose_changing_threshold": {
            "name": "propose_changing_threshold",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "new_threshold": []
            }
        },
        "Executive.__init__": {
            "name": "__init__",
            "location": 768,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": [],
                "signer": [],
                "client_password": []
            }
        },
        "Executive.authorize_proposal": {
            "name": "authorize_proposal",
            "location": 785,
            "return": [],
            "arguments": {
                "self": [],
                "proposal": []
            }
        },
        "Staker.__init__": {
            "name": "__init__",
            "location": 805,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "individual_allocation": []
            }
        },
        "Staker.is_contract": {
            "name": "is_contract",
            "location": 837,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.to_dict": {
            "name": "to_dict",
            "location": 840,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.is_staking": {
            "name": "is_staking",
            "location": 851,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.locked_tokens": {
            "name": "locked_tokens",
            "location": 856,
            "return": [],
            "arguments": {
                "self": [],
                "periods": []
            }
        },
        "Staker.current_stake": {
            "name": "current_stake",
            "location": 864,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.active_stakes": {
            "name": "active_stakes",
            "location": 869,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.sorted_stakes": {
            "name": "sorted_stakes",
            "location": 875,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.__filter_divisible_stakes": {
            "name": "__filter_divisible_stakes",
            "location": 880,
            "return": [],
            "arguments": {
                "self": [],
                "stake": []
            }
        },
        "Staker.divisible_stakes": {
            "name": "divisible_stakes",
            "location": 890,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.divide_stake": {
            "name": "divide_stake",
            "location": 896,
            "return": [],
            "arguments": {
                "self": [],
                "stake_index": [],
                "target_value": [],
                "additional_periods": [],
                "expiration": []
            }
        },
        "Staker.initialize_stake": {
            "name": "initialize_stake",
            "location": 936,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "lock_periods": [],
                "expiration": [],
                "entire_balance": []
            }
        },
        "Staker.prolong_stake": {
            "name": "prolong_stake",
            "location": 980,
            "return": [],
            "arguments": {
                "self": [],
                "stake_index": [],
                "additional_periods": [],
                "expiration": []
            }
        },
        "Staker.deposit": {
            "name": "deposit",
            "location": 1015,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "lock_periods": []
            }
        },
        "Staker.is_restaking": {
            "name": "is_restaking",
            "location": 1027,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker._set_restaking": {
            "name": "_set_restaking",
            "location": 1033,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Staker.enable_restaking": {
            "name": "enable_restaking",
            "location": 1040,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.enable_restaking_lock": {
            "name": "enable_restaking_lock",
            "location": 1046,
            "return": [],
            "arguments": {
                "self": [],
                "release_period": []
            }
        },
        "Staker.restaking_lock_enabled": {
            "name": "restaking_lock_enabled",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.disable_restaking": {
            "name": "disable_restaking",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.is_winding_down": {
            "name": "is_winding_down",
            "location": 1068,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker._set_winding_down": {
            "name": "_set_winding_down",
            "location": 1074,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Staker.enable_winding_down": {
            "name": "enable_winding_down",
            "location": 1081,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.disable_winding_down": {
            "name": "disable_winding_down",
            "location": 1085,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.bond_worker": {
            "name": "bond_worker",
            "location": 1096,
            "return": [],
            "arguments": {
                "self": [],
                "worker_address": []
            }
        },
        "Staker.worker_address": {
            "name": "worker_address",
            "location": 1106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.unbond_worker": {
            "name": "unbond_worker",
            "location": 1120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.mint": {
            "name": "mint",
            "location": 1134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.calculate_staking_reward": {
            "name": "calculate_staking_reward",
            "location": 1142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.calculate_policy_fee": {
            "name": "calculate_policy_fee",
            "location": 1146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.collect_policy_fee": {
            "name": "collect_policy_fee",
            "location": 1153,
            "return": [],
            "arguments": {
                "self": [],
                "collector_address": []
            }
        },
        "Staker.collect_staking_reward": {
            "name": "collect_staking_reward",
            "location": 1168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.withdraw": {
            "name": "withdraw",
            "location": 1180,
            "return": [],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "Staker.withdraw_preallocation_tokens": {
            "name": "withdraw_preallocation_tokens",
            "location": 1191,
            "return": [],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "Staker.withdraw_preallocation_eth": {
            "name": "withdraw_preallocation_eth",
            "location": 1203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.missing_commitments": {
            "name": "missing_commitments",
            "location": 1212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.set_min_fee_rate": {
            "name": "set_min_fee_rate",
            "location": 1219,
            "return": [],
            "arguments": {
                "self": [],
                "min_rate": []
            }
        },
        "Staker.min_fee_rate": {
            "name": "min_fee_rate",
            "location": 1231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Staker.raw_min_fee_rate": {
            "name": "raw_min_fee_rate",
            "location": 1238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker.__init__": {
            "name": "__init__",
            "location": 1261,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "work_tracker": [],
                "worker_address": [],
                "start_working_now": [],
                "block_until_ready": []
            }
        },
        "Worker.block_until_ready": {
            "name": "block_until_ready",
            "location": 1298,
            "return": [],
            "arguments": {
                "self": [],
                "poll_rate": [],
                "timeout": []
            }
        },
        "Worker.eth_balance": {
            "name": "eth_balance",
            "location": 1354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker.token_balance": {
            "name": "token_balance",
            "location": 1361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker.last_committed_period": {
            "name": "last_committed_period",
            "location": 1371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker.commit_to_next_period": {
            "name": "commit_to_next_period",
            "location": 1377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker.missing_commitments": {
            "name": "missing_commitments",
            "location": 1383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockchainPolicyAuthor.__init__": {
            "name": "__init__",
            "location": 1392,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": [],
                "rate": [],
                "duration_periods": []
            }
        },
        "BlockchainPolicyAuthor.default_rate": {
            "name": "default_rate",
            "location": 1414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockchainPolicyAuthor.generate_policy_parameters": {
            "name": "generate_policy_parameters",
            "location": 1418,
            "return": [],
            "arguments": {
                "self": [],
                "number_of_ursulas": [],
                "duration_periods": [],
                "expiration": [],
                "value": [],
                "rate": []
            }
        },
        "BlockchainPolicyAuthor.recruit": {
            "name": "recruit",
            "location": 1461,
            "return": [],
            "arguments": {
                "self": [],
                "quantity": []
            }
        },
        "BlockchainPolicyAuthor.create_policy": {
            "name": "create_policy",
            "location": 1472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Investigator.__init__": {
            "name": "__init__",
            "location": 1492,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "Investigator.request_evaluation": {
            "name": "request_evaluation",
            "location": 1497,
            "return": [],
            "arguments": {
                "self": [],
                "evidence": []
            }
        },
        "Investigator.was_this_evidence_evaluated": {
            "name": "was_this_evidence_evaluated",
            "location": 1501,
            "return": [],
            "arguments": {
                "self": [],
                "evidence": []
            }
        },
        "Wallet.__init__": {
            "name": "__init__",
            "location": 1513,
            "return": [],
            "arguments": {
                "self": [],
                "client_addresses": [],
                "provider_uri": [],
                "signer": []
            }
        },
        "Wallet.__contains__": {
            "name": "__contains__",
            "location": 1530,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "Wallet.active_account": {
            "name": "active_account",
            "location": 1534,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wallet.__get_accounts": {
            "name": "__get_accounts",
            "location": 1537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wallet.accounts": {
            "name": "accounts",
            "location": 1545,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wallet.activate_account": {
            "name": "activate_account",
            "location": 1549,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": [],
                "signer": [],
                "password": []
            }
        },
        "Wallet.eth_balance": {
            "name": "eth_balance",
            "location": 1571,
            "return": [],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "Wallet.token_balance": {
            "name": "token_balance",
            "location": 1574,
            "return": [],
            "arguments": {
                "self": [],
                "account": [],
                "registry": []
            }
        },
        "StakeHolder.__init__": {
            "name": "__init__",
            "location": 1588,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "initial_address": [],
                "checksum_addresses": [],
                "signer": [],
                "password": []
            }
        },
        "StakeHolder.assimilate": {
            "name": "assimilate",
            "location": 1613,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": [],
                "password": []
            }
        },
        "StakeHolder.all_stakes": {
            "name": "all_stakes",
            "location": 1647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakeHolder.get_staker": {
            "name": "get_staker",
            "location": 1656,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "StakeHolder.get_stakers": {
            "name": "get_stakers",
            "location": 1663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakeHolder.total_stake": {
            "name": "total_stake",
            "location": 1671,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.__init__": {
            "name": "__init__",
            "location": 1705,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": [],
                "transacting": [],
                "signer": [],
                "client_password": []
            }
        },
        "Bidder.ensure_bidding_is_open": {
            "name": "ensure_bidding_is_open",
            "location": 1726,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Bidder._ensure_bidding_is_closed": {
            "name": "_ensure_bidding_is_closed",
            "location": 1737,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Bidder._ensure_cancellation_window": {
            "name": "_ensure_cancellation_window",
            "location": 1744,
            "return": [],
            "arguments": {
                "self": [],
                "ensure_closed": [],
                "message": []
            }
        },
        "Bidder.place_bid": {
            "name": "place_bid",
            "location": 1760,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Bidder.claim": {
            "name": "claim",
            "location": 1769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.cancel_bid": {
            "name": "cancel_bid",
            "location": 1788,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder._get_max_bonus_bid_from_max_stake": {
            "name": "_get_max_bonus_bid_from_max_stake",
            "location": 1798,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.get_whales": {
            "name": "get_whales",
            "location": 1806,
            "return": [],
            "arguments": {
                "self": [],
                "force_read": []
            }
        },
        "Bidder._get_all_bonus_bidders": {
            "name": "_get_all_bonus_bidders",
            "location": 1816,
            "return": [],
            "arguments": {
                "self": [],
                "force_read": []
            }
        },
        "Bidder._reduce_bids": {
            "name": "_reduce_bids",
            "location": 1830,
            "return": [],
            "arguments": {
                "self": [],
                "whales": []
            }
        },
        "Bidder.force_refund": {
            "name": "force_refund",
            "location": 1855,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.verify_bidding_correctness": {
            "name": "verify_bidding_correctness",
            "location": 1876,
            "return": [],
            "arguments": {
                "self": [],
                "gas_limit": []
            }
        },
        "Bidder.refund_deposit": {
            "name": "refund_deposit",
            "location": 1899,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.withdraw_compensation": {
            "name": "withdraw_compensation",
            "location": 1906,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.get_deposited_eth": {
            "name": "get_deposited_eth",
            "location": 1919,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.has_claimed": {
            "name": "has_claimed",
            "location": 1924,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.completed_work": {
            "name": "completed_work",
            "location": 1929,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.remaining_work": {
            "name": "remaining_work",
            "location": 1935,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.refunded_work": {
            "name": "refunded_work",
            "location": 1943,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.available_refund": {
            "name": "available_refund",
            "location": 1948,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.available_compensation": {
            "name": "available_compensation",
            "location": 1953,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bidder.available_claim": {
            "name": "available_claim",
            "location": 1958,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trustee._combine_authorizations.order_by_address": {
            "name": "order_by_address",
            "location": 708,
            "return": [],
            "arguments": {
                "executive_address_to_sort": []
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/agents.py": {
        "EthereumContractAgent.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "provider_uri": [],
                "contract": [],
                "transaction_gas": []
            }
        },
        "EthereumContractAgent.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.__eq__": {
            "name": "__eq__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EthereumContractAgent.contract": {
            "name": "contract",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.contract_address": {
            "name": "contract_address",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.owner": {
            "name": "owner",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenAgent.get_balance": {
            "name": "get_balance",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "NucypherTokenAgent.get_allowance": {
            "name": "get_allowance",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "spender": []
            }
        },
        "NucypherTokenAgent.increase_allowance": {
            "name": "increase_allowance",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "sender_address": [],
                "target_address": [],
                "increase": []
            }
        },
        "NucypherTokenAgent.approve_transfer": {
            "name": "approve_transfer",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "target_address": [],
                "sender_address": []
            }
        },
        "NucypherTokenAgent.transfer": {
            "name": "transfer",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "target_address": [],
                "sender_address": []
            }
        },
        "NucypherTokenAgent.approve_and_call": {
            "name": "approve_and_call",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "target_address": [],
                "sender_address": [],
                "call_data": [],
                "gas_limit": []
            }
        },
        "StakingEscrowAgent.get_staker_population": {
            "name": "get_staker_population",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowAgent.get_current_period": {
            "name": "get_current_period",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowAgent.get_stakers": {
            "name": "get_stakers",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowAgent.partition_stakers_by_activity": {
            "name": "partition_stakers_by_activity",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowAgent.get_all_active_stakers": {
            "name": "get_all_active_stakers",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "pagination_size": []
            }
        },
        "StakingEscrowAgent.get_all_locked_tokens": {
            "name": "get_all_locked_tokens",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "pagination_size": []
            }
        },
        "StakingEscrowAgent.get_global_locked_tokens": {
            "name": "get_global_locked_tokens",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "at_period": []
            }
        },
        "StakingEscrowAgent.get_staker_info": {
            "name": "get_staker_info",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.get_locked_tokens": {
            "name": "get_locked_tokens",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "periods": []
            }
        },
        "StakingEscrowAgent.owned_tokens": {
            "name": "owned_tokens",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.get_substake_info": {
            "name": "get_substake_info",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "stake_index": []
            }
        },
        "StakingEscrowAgent.get_raw_substake_info": {
            "name": "get_raw_substake_info",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "stake_index": []
            }
        },
        "StakingEscrowAgent.get_all_stakes": {
            "name": "get_all_stakes",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.deposit_tokens": {
            "name": "deposit_tokens",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "amount": [],
                "lock_periods": [],
                "sender_address": []
            }
        },
        "StakingEscrowAgent.construct_batch_deposit_parameters": {
            "name": "construct_batch_deposit_parameters",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "deposits": []
            }
        },
        "StakingEscrowAgent.batch_deposit": {
            "name": "batch_deposit",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "stakers": [],
                "number_of_substakes": [],
                "amounts": [],
                "lock_periods": [],
                "sender_address": [],
                "dry_run": [],
                "gas_limit": []
            }
        },
        "StakingEscrowAgent.divide_stake": {
            "name": "divide_stake",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "stake_index": [],
                "target_value": [],
                "periods": []
            }
        },
        "StakingEscrowAgent.prolong_stake": {
            "name": "prolong_stake",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "stake_index": [],
                "periods": []
            }
        },
        "StakingEscrowAgent.get_last_committed_period": {
            "name": "get_last_committed_period",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.get_worker_from_staker": {
            "name": "get_worker_from_staker",
            "location": 481,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.get_staker_from_worker": {
            "name": "get_staker_from_worker",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "worker_address": []
            }
        },
        "StakingEscrowAgent.bond_worker": {
            "name": "bond_worker",
            "location": 491,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "worker_address": []
            }
        },
        "StakingEscrowAgent.release_worker": {
            "name": "release_worker",
            "location": 497,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.commit_to_next_period": {
            "name": "commit_to_next_period",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "worker_address": []
            }
        },
        "StakingEscrowAgent.mint": {
            "name": "mint",
            "location": 510,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.calculate_staking_reward": {
            "name": "calculate_staking_reward",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.collect_staking_reward": {
            "name": "collect_staking_reward",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.withdraw": {
            "name": "withdraw",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "amount": []
            }
        },
        "StakingEscrowAgent.get_flags": {
            "name": "get_flags",
            "location": 548,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.is_restaking": {
            "name": "is_restaking",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.is_restaking_locked": {
            "name": "is_restaking_locked",
            "location": 559,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.set_restaking": {
            "name": "set_restaking",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "value": []
            }
        },
        "StakingEscrowAgent.lock_restaking": {
            "name": "lock_restaking",
            "location": 574,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "release_period": []
            }
        },
        "StakingEscrowAgent.get_restake_unlock_period": {
            "name": "get_restake_unlock_period",
            "location": 581,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.is_winding_down": {
            "name": "is_winding_down",
            "location": 587,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.set_winding_down": {
            "name": "set_winding_down",
            "location": 592,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "value": []
            }
        },
        "StakingEscrowAgent.is_taking_snapshots": {
            "name": "is_taking_snapshots",
            "location": 603,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "StakingEscrowAgent.set_snapshots": {
            "name": "set_snapshots",
            "location": 608,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "activate": []
            }
        },
        "StakingEscrowAgent.staking_parameters": {
            "name": "staking_parameters",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowAgent.swarm": {
            "name": "swarm",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowAgent.sample": {
            "name": "sample",
            "location": 661,
            "return": [],
            "arguments": {
                "self": [],
                "quantity": [],
                "duration": [],
                "additional_ursulas": [],
                "attempts": [],
                "pagination_size": []
            }
        },
        "StakingEscrowAgent.get_completed_work": {
            "name": "get_completed_work",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "bidder_address": []
            }
        },
        "StakingEscrowAgent.get_missing_commitments": {
            "name": "get_missing_commitments",
            "location": 734,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "StakingEscrowAgent.is_test_contract": {
            "name": "is_test_contract",
            "location": 751,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowAgent.worklock": {
            "name": "worklock",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowAgent.adjudicator": {
            "name": "adjudicator",
            "location": 761,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowAgent.policy_manager": {
            "name": "policy_manager",
            "location": 766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolicyManagerAgent.create_policy": {
            "name": "create_policy",
            "location": 780,
            "return": [],
            "arguments": {
                "self": [],
                "policy_id": [],
                "author_address": [],
                "value": [],
                "end_timestamp": [],
                "node_addresses": [],
                "owner_address": []
            }
        },
        "PolicyManagerAgent.fetch_policy": {
            "name": "fetch_policy",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "policy_id": []
            }
        },
        "PolicyManagerAgent.fetch_arrangement_addresses_from_policy_txid": {
            "name": "fetch_arrangement_addresses_from_policy_txid",
            "location": 805,
            "return": [],
            "arguments": {
                "self": [],
                "txhash": [],
                "timeout": []
            }
        },
        "PolicyManagerAgent.revoke_policy": {
            "name": "revoke_policy",
            "location": 813,
            "return": [],
            "arguments": {
                "self": [],
                "policy_id": [],
                "author_address": []
            }
        },
        "PolicyManagerAgent.collect_policy_fee": {
            "name": "collect_policy_fee",
            "location": 820,
            "return": [],
            "arguments": {
                "self": [],
                "collector_address": [],
                "staker_address": []
            }
        },
        "PolicyManagerAgent.fetch_policy_arrangements": {
            "name": "fetch_policy_arrangements",
            "location": 827,
            "return": [],
            "arguments": {
                "self": [],
                "policy_id": []
            }
        },
        "PolicyManagerAgent.revoke_arrangement": {
            "name": "revoke_arrangement",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "policy_id": [],
                "node_address": [],
                "author_address": []
            }
        },
        "PolicyManagerAgent.calculate_refund": {
            "name": "calculate_refund",
            "location": 840,
            "return": [],
            "arguments": {
                "self": [],
                "policy_id": [],
                "author_address": []
            }
        },
        "PolicyManagerAgent.collect_refund": {
            "name": "collect_refund",
            "location": 846,
            "return": [],
            "arguments": {
                "self": [],
                "policy_id": [],
                "author_address": []
            }
        },
        "PolicyManagerAgent.get_fee_amount": {
            "name": "get_fee_amount",
            "location": 852,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "PolicyManagerAgent.get_fee_rate_range": {
            "name": "get_fee_rate_range",
            "location": 857,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolicyManagerAgent.get_min_fee_rate": {
            "name": "get_min_fee_rate",
            "location": 863,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "PolicyManagerAgent.get_raw_min_fee_rate": {
            "name": "get_raw_min_fee_rate",
            "location": 869,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "PolicyManagerAgent.set_min_fee_rate": {
            "name": "set_min_fee_rate",
            "location": 875,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": [],
                "min_rate": []
            }
        },
        "PreallocationEscrowAgent.__init__": {
            "name": "__init__",
            "location": 898,
            "return": [],
            "arguments": {
                "self": [],
                "beneficiary": [],
                "registry": [],
                "allocation_registry": []
            }
        },
        "PreallocationEscrowAgent.__read_interface": {
            "name": "__read_interface",
            "location": 915,
            "return": [],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "PreallocationEscrowAgent.__fetch_principal_contract": {
            "name": "__fetch_principal_contract",
            "location": 921,
            "return": [],
            "arguments": {
                "self": [],
                "contract_address": []
            }
        },
        "PreallocationEscrowAgent.__set_owner": {
            "name": "__set_owner",
            "location": 932,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.__read_principal": {
            "name": "__read_principal",
            "location": 936,
            "return": [],
            "arguments": {
                "self": [],
                "contract_address": []
            }
        },
        "PreallocationEscrowAgent.owner": {
            "name": "owner",
            "location": 942,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.beneficiary": {
            "name": "beneficiary",
            "location": 947,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.interface_contract": {
            "name": "interface_contract",
            "location": 951,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.principal_contract": {
            "name": "principal_contract",
            "location": 957,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.initial_locked_amount": {
            "name": "initial_locked_amount",
            "location": 965,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.available_balance": {
            "name": "available_balance",
            "location": 970,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.unvested_tokens": {
            "name": "unvested_tokens",
            "location": 991,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.end_timestamp": {
            "name": "end_timestamp",
            "location": 996,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.lock": {
            "name": "lock",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "periods": []
            }
        },
        "PreallocationEscrowAgent.withdraw_tokens": {
            "name": "withdraw_tokens",
            "location": 1006,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PreallocationEscrowAgent.withdraw_eth": {
            "name": "withdraw_eth",
            "location": 1012,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.deposit_as_staker": {
            "name": "deposit_as_staker",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "lock_periods": []
            }
        },
        "PreallocationEscrowAgent.withdraw_as_staker": {
            "name": "withdraw_as_staker",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PreallocationEscrowAgent.bond_worker": {
            "name": "bond_worker",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": [],
                "worker_address": []
            }
        },
        "PreallocationEscrowAgent.release_worker": {
            "name": "release_worker",
            "location": 1036,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.mint": {
            "name": "mint",
            "location": 1041,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.collect_policy_fee": {
            "name": "collect_policy_fee",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowAgent.set_min_fee_rate": {
            "name": "set_min_fee_rate",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": [],
                "min_rate": []
            }
        },
        "PreallocationEscrowAgent.set_restaking": {
            "name": "set_restaking",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PreallocationEscrowAgent.lock_restaking": {
            "name": "lock_restaking",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": [],
                "release_period": []
            }
        },
        "PreallocationEscrowAgent.set_winding_down": {
            "name": "set_winding_down",
            "location": 1077,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AdjudicatorAgent.evaluate_cfrag": {
            "name": "evaluate_cfrag",
            "location": 1094,
            "return": [],
            "arguments": {
                "self": [],
                "evidence": [],
                "sender_address": []
            }
        },
        "AdjudicatorAgent.was_this_evidence_evaluated": {
            "name": "was_this_evidence_evaluated",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": [],
                "evidence": []
            }
        },
        "AdjudicatorAgent.staking_escrow_contract": {
            "name": "staking_escrow_contract",
            "location": 1111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.hash_algorithm": {
            "name": "hash_algorithm",
            "location": 1116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.base_penalty": {
            "name": "base_penalty",
            "location": 1121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.penalty_history_coefficient": {
            "name": "penalty_history_coefficient",
            "location": 1126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.percentage_penalty_coefficient": {
            "name": "percentage_penalty_coefficient",
            "location": 1131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.reward_coefficient": {
            "name": "reward_coefficient",
            "location": 1136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorAgent.penalty_history": {
            "name": "penalty_history",
            "location": 1140,
            "return": [],
            "arguments": {
                "self": [],
                "staker_address": []
            }
        },
        "AdjudicatorAgent.slashing_parameters": {
            "name": "slashing_parameters",
            "location": 1144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.bid": {
            "name": "bid",
            "location": 1170,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.cancel_bid": {
            "name": "cancel_bid",
            "location": 1179,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.force_refund": {
            "name": "force_refund",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": [],
                "addresses": []
            }
        },
        "WorkLockAgent.verify_bidding_correctness": {
            "name": "verify_bidding_correctness",
            "location": 1194,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": [],
                "gas_limit": [],
                "gas_to_save_state": []
            }
        },
        "WorkLockAgent.claim": {
            "name": "claim",
            "location": 1206,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.refund": {
            "name": "refund",
            "location": 1215,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.withdraw_compensation": {
            "name": "withdraw_compensation",
            "location": 1222,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.check_claim": {
            "name": "check_claim",
            "location": 1229,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.get_refunded_work": {
            "name": "get_refunded_work",
            "location": 1238,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.get_available_refund": {
            "name": "get_available_refund",
            "location": 1247,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.get_available_compensation": {
            "name": "get_available_compensation",
            "location": 1252,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.get_deposited_eth": {
            "name": "get_deposited_eth",
            "location": 1257,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.lot_value": {
            "name": "lot_value",
            "location": 1263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.get_bonus_lot_value": {
            "name": "get_bonus_lot_value",
            "location": 1272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.get_remaining_work": {
            "name": "get_remaining_work",
            "location": 1281,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "WorkLockAgent.get_bonus_eth_supply": {
            "name": "get_bonus_eth_supply",
            "location": 1287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.get_eth_supply": {
            "name": "get_eth_supply",
            "location": 1292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.boosting_refund": {
            "name": "boosting_refund",
            "location": 1300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.slowing_refund": {
            "name": "slowing_refund",
            "location": 1306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.get_bonus_refund_rate": {
            "name": "get_bonus_refund_rate",
            "location": 1311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.get_base_refund_rate": {
            "name": "get_base_refund_rate",
            "location": 1319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.get_base_deposit_rate": {
            "name": "get_base_deposit_rate",
            "location": 1327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.get_bonus_deposit_rate": {
            "name": "get_bonus_deposit_rate",
            "location": 1333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.eth_to_tokens": {
            "name": "eth_to_tokens",
            "location": 1341,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "WorkLockAgent.eth_to_work": {
            "name": "eth_to_work",
            "location": 1346,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "WorkLockAgent.work_to_eth": {
            "name": "work_to_eth",
            "location": 1351,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "WorkLockAgent.get_bidders_population": {
            "name": "get_bidders_population",
            "location": 1356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.get_bidders": {
            "name": "get_bidders",
            "location": 1361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.is_claiming_available": {
            "name": "is_claiming_available",
            "location": 1368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.estimate_verifying_correctness": {
            "name": "estimate_verifying_correctness",
            "location": 1374,
            "return": [],
            "arguments": {
                "self": [],
                "gas_limit": [],
                "gas_to_save_state": []
            }
        },
        "WorkLockAgent.next_bidder_to_check": {
            "name": "next_bidder_to_check",
            "location": 1379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.bidders_checked": {
            "name": "bidders_checked",
            "location": 1384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.minimum_allowed_bid": {
            "name": "minimum_allowed_bid",
            "location": 1391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.start_bidding_date": {
            "name": "start_bidding_date",
            "location": 1397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.end_bidding_date": {
            "name": "end_bidding_date",
            "location": 1403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.end_cancellation_date": {
            "name": "end_cancellation_date",
            "location": 1409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkLockAgent.worklock_parameters": {
            "name": "worklock_parameters",
            "location": 1414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSigAgent.nonce": {
            "name": "nonce",
            "location": 1438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSigAgent.get_owner": {
            "name": "get_owner",
            "location": 1443,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MultiSigAgent.number_of_owners": {
            "name": "number_of_owners",
            "location": 1449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSigAgent.owners": {
            "name": "owners",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSigAgent.threshold": {
            "name": "threshold",
            "location": 1459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSigAgent.is_owner": {
            "name": "is_owner",
            "location": 1464,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_address": []
            }
        },
        "MultiSigAgent.build_add_owner_tx": {
            "name": "build_add_owner_tx",
            "location": 1469,
            "return": [],
            "arguments": {
                "self": [],
                "new_owner_address": []
            }
        },
        "MultiSigAgent.build_remove_owner_tx": {
            "name": "build_remove_owner_tx",
            "location": 1483,
            "return": [],
            "arguments": {
                "self": [],
                "owner_address": []
            }
        },
        "MultiSigAgent.build_change_threshold_tx": {
            "name": "build_change_threshold_tx",
            "location": 1495,
            "return": [],
            "arguments": {
                "self": [],
                "threshold": []
            }
        },
        "MultiSigAgent.get_unsigned_transaction_hash": {
            "name": "get_unsigned_transaction_hash",
            "location": 1505,
            "return": [],
            "arguments": {
                "self": [],
                "trustee_address": [],
                "target_address": [],
                "value": [],
                "data": [],
                "nonce": []
            }
        },
        "MultiSigAgent.execute": {
            "name": "execute",
            "location": 1517,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "r": [],
                "s": [],
                "destination": [],
                "value": [],
                "data": [],
                "sender_address": []
            }
        },
        "ContractAgency.get_agent": {
            "name": "get_agent",
            "location": 1538,
            "return": [],
            "arguments": {
                "cls": [],
                "agent_class": [],
                "registry": [],
                "provider_uri": []
            }
        },
        "ContractAgency._contract_name_to_agent_name": {
            "name": "_contract_name_to_agent_name",
            "location": 1562,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "ContractAgency.get_agent_by_contract_name": {
            "name": "get_agent_by_contract_name",
            "location": 1570,
            "return": [],
            "arguments": {
                "cls": [],
                "contract_name": [],
                "registry": [],
                "provider_uri": []
            }
        },
        "StakingEscrowAgent.get_all_active_stakers.checksum_address": {
            "name": "checksum_address",
            "location": 310,
            "return": [],
            "arguments": {
                "address": []
            }
        },
        "StakingEscrowAgent.staking_parameters._call_function_by_name": {
            "name": "_call_function_by_name",
            "location": 640,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "PreallocationEscrowAgent.StakingInterfaceAgent._generate_beneficiary_agency": {
            "name": "_generate_beneficiary_agency",
            "location": 894,
            "return": [],
            "arguments": {
                "self": [],
                "principal_address": []
            }
        },
        "AdjudicatorAgent.slashing_parameters._call_function_by_name": {
            "name": "_call_function_by_name",
            "location": 1153,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "WorkLockAgent.worklock_parameters._call_function_by_name": {
            "name": "_call_function_by_name",
            "location": 1425,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/clients.py": {
        "EthereumClient.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "w3": [
                    "float",
                    "int",
                    "Tuple[int, int]"
                ],
                "node_technology": [
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "version": [
                    "float",
                    "int",
                    "Tuple[int, int]"
                ],
                "platform": [
                    "float",
                    "int",
                    "Tuple[int, int]"
                ],
                "backend": [
                    "float",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "EthereumClient._get_variant": {
            "name": "_get_variant",
            "location": 164,
            "return": [
                "str",
                "int",
                "nucypher.blockchain.eth.deployers.BaseContractDeployer"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "w3": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "EthereumClient.from_w3": {
            "name": "from_w3",
            "location": 168,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Iterable[str]]",
                    "Dict[str, Any]",
                    "config.Config",
                    "dict"
                ],
                "w3": [
                    "str",
                    "int"
                ]
            }
        },
        "EthereumClient.peers": {
            "name": "peers",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.chain_name": {
            "name": "chain_name",
            "location": 218,
            "return": [
                "type",
                "types.TracebackType",
                "Dict[str, str]",
                "BaseException",
                "Exception",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.syncing": {
            "name": "syncing",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.lock_account": {
            "name": "lock_account",
            "location": 228,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "walledomain.Account",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Counter"
                ]
            }
        },
        "EthereumClient.unlock_account": {
            "name": "unlock_account",
            "location": 233,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        },
        "EthereumClient.is_connected": {
            "name": "is_connected",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.etherbase": {
            "name": "etherbase",
            "location": 243,
            "return": [
                "str",
                "Iterable[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.accounts": {
            "name": "accounts",
            "location": 247,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "pxl.config.Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.get_balance": {
            "name": "get_balance",
            "location": 250,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "web3.Web3"
                ]
            }
        },
        "EthereumClient.inject_middleware": {
            "name": "inject_middleware",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "middleware": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EthereumClient.add_middleware": {
            "name": "add_middleware",
            "location": 256,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "middleware": [
                    "Callable",
                    "str",
                    "Union[str, bytes]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "EthereumClient.chain_id": {
            "name": "chain_id",
            "location": 260,
            "return": [
                "mypy.types.Type",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.net_version": {
            "name": "net_version",
            "location": 269,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.get_contract": {
            "name": "get_contract",
            "location": 272,
            "return": [
                "str",
                "List[str]",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.gas_price": {
            "name": "gas_price",
            "location": 276,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.block_number": {
            "name": "block_number",
            "location": 280,
            "return": [
                "str",
                "Type",
                "Iterable[int]",
                "trezor.messages.TxInputType.TxInputType",
                "starlette.types.Scope"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.coinbase": {
            "name": "coinbase",
            "location": 284,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.wait_for_receipt": {
            "name": "wait_for_receipt",
            "location": 287,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "Optional[bytes]"
                ],
                "timeout": [
                    "int",
                    "float"
                ],
                "confirmations": [
                    "float",
                    "Optional[bytes]"
                ]
            }
        },
        "EthereumClient.block_until_enough_confirmations": {
            "name": "block_until_enough_confirmations",
            "location": 318,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "float",
                    "str",
                    "Iterable[T]",
                    "dict",
                    "web3.contracContract"
                ],
                "timeout": [
                    "float",
                    "str",
                    "web3.contracContract",
                    "dict",
                    "eth_evm.ChecksumAddress"
                ],
                "confirmations": [
                    "bool",
                    "dict",
                    "int",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "EthereumClient._calculate_confirmations_timeout": {
            "name": "_calculate_confirmations_timeout",
            "location": 341,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "confirmations": [
                    "str",
                    "dict"
                ]
            }
        },
        "EthereumClient.check_transaction_is_on_chain": {
            "name": "check_transaction_is_on_chain",
            "location": 345,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "receipt": [
                    "float",
                    "web3.types.Wei"
                ]
            }
        },
        "EthereumClient.sign_transaction": {
            "name": "sign_transaction",
            "location": 361,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]",
                    "eth.rlp.headers.BlockHeader",
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "EthereumClient.get_transaction": {
            "name": "get_transaction",
            "location": 364,
            "return": [
                "str",
                "dict",
                "bool",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "str",
                    "Optional[str]",
                    "int",
                    "dict",
                    "Optional[bool]"
                ]
            }
        },
        "EthereumClient.send_transaction": {
            "name": "send_transaction",
            "location": 367,
            "return": [
                "str",
                "IO[str]",
                "Iterable[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "EthereumClient.send_raw_transaction": {
            "name": "send_raw_transaction",
            "location": 370,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "transaction_bytes": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "EthereumClient.sign_message": {
            "name": "sign_message",
            "location": 373,
            "return": [
                "str",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "web3.contracContract"
                ],
                "message": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "web3.contracContract"
                ]
            }
        },
        "EthereumClient.get_blocktime": {
            "name": "get_blocktime",
            "location": 381,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient._has_latest_block": {
            "name": "_has_latest_block",
            "location": 386,
            "return": [
                "int",
                "T",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumClient.sync": {
            "name": "sync",
            "location": 391,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "quiet": [
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "GethClient._get_variant": {
            "name": "_get_variant",
            "location": 435,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "w3": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "GethClient.is_local": {
            "name": "is_local",
            "location": 441,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "GethClient.peers": {
            "name": "peers",
            "location": 446,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GethClient.new_account": {
            "name": "new_account",
            "location": 449,
            "return": [
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GethClient.unlock_account": {
            "name": "unlock_account",
            "location": 453,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ],
                "password": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "duration": [
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "GethClient.lock_account": {
            "name": "lock_account",
            "location": 471,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "GethClient.sign_transaction": {
            "name": "sign_transaction",
            "location": 474,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "GethClient.wallets": {
            "name": "wallets",
            "location": 488,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParityClient.peers": {
            "name": "peers",
            "location": 495,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParityClient.new_account": {
            "name": "new_account",
            "location": 501,
            "return": [
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ParityClient.unlock_account": {
            "name": "unlock_account",
            "location": 505,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "ParityClient.lock_account": {
            "name": "lock_account",
            "location": 508,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "GanacheClient.unlock_account": {
            "name": "unlock_account",
            "location": 515,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GanacheClient.sync": {
            "name": "sync",
            "location": 518,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraClient.unlock_account": {
            "name": "unlock_account",
            "location": 526,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraClient.sync": {
            "name": "sync",
            "location": 529,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumTesterClient.unlock_account": {
            "name": "unlock_account",
            "location": 536,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "duration": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "EthereumTesterClient.lock_account": {
            "name": "lock_account",
            "location": 547,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "eth.rlp.headers.BlockHeader"
                ]
            }
        },
        "EthereumTesterClient.sync": {
            "name": "sync",
            "location": 556,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumTesterClient.new_account": {
            "name": "new_account",
            "location": 559,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "EthereumTesterClient.__get_signing_key": {
            "name": "__get_signing_key",
            "location": 564,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bytes",
                    "dict",
                    "eth.rlp.headers.BlockHeader"
                ]
            }
        },
        "EthereumTesterClient.sign_transaction": {
            "name": "sign_transaction",
            "location": 573,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "EthereumTesterClient.sign_message": {
            "name": "sign_message",
            "location": 581,
            "return": [
                "List[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "dict",
                    "str",
                    "eth.abc.BlockHeaderAPI",
                    "Callable"
                ],
                "message": [
                    "str",
                    "Optional[constants.ChannelList]",
                    "bytearray"
                ]
            }
        },
        "NuCypherGethProcess.__init__": {
            "name": "__init__",
            "location": 600,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geth_kwargs": [
                    "str",
                    "dict",
                    "bool"
                ],
                "stdout_logfile_path": [
                    "str",
                    "dict",
                    "bool"
                ],
                "stderr_logfile_path": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "NuCypherGethProcess.provider_uri": {
            "name": "provider_uri",
            "location": 611,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str",
                    "float",
                    "Tuple[str, float]"
                ]
            }
        },
        "NuCypherGethProcess.start": {
            "name": "start",
            "location": 624,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]"
                ],
                "extra_delay": [
                    "int",
                    "List[Exception]",
                    "Dict[str, str]",
                    "float",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "NuCypherGethProcess.ensure_account_exists": {
            "name": "ensure_account_exists",
            "location": 632,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "NuCypherGethDevProcess.__init__": {
            "name": "__init__",
            "location": 645,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "dict"
                ]
            }
        },
        "NuCypherGethDevProcess.start": {
            "name": "start",
            "location": 658,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "types.Bounds.Input",
                    "Callable",
                    "Tuple[int, int]",
                    "Tuple[float, float]",
                    "eth.abc.ChainAPI"
                ],
                "extra_delay": [
                    "int",
                    "List[Exception]",
                    "Dict[str, str]",
                    "float",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "NuCypherGethDevnetProcess.__init__": {
            "name": "__init__",
            "location": 677,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "Optional[bool]"
                ],
                "overrides": [
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "NuCypherGethDevnetProcess.initialize_blockchain": {
            "name": "initialize_blockchain",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "overwrite": [
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "NuCypherGethGoerliProcess.__init__": {
            "name": "__init__",
            "location": 755,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "Optional[bool]"
                ],
                "overrides": [
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "EthereumClient.ChainReorganizationDetected.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "receipt": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "EthereumClient.sync.check_for_timeout": {
            "name": "check_for_timeout",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "t": [
                    "int",
                    "snorkel.types.DataPoint"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/constants.py": {},
    "nucypher-master/nucypher/blockchain/eth/decorators.py": {
        "validate_checksum_address": {
            "name": "validate_checksum_address",
            "location": 48,
            "return": [
                "int",
                "Optional[str]",
                "bytearray"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "only_me": {
            "name": "only_me",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "save_receipt": {
            "name": "save_receipt",
            "location": 119,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "actor_method": [
                    "Iterable[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[int]",
                    "Iterable",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "contract_api": {
            "name": "contract_api",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "interface": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "validate_checksum_address.wrapped": {
            "name": "wrapped",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "only_me.wrapped": {
            "name": "wrapped",
            "location": 112,
            "return": [],
            "arguments": {
                "actor": []
            }
        },
        "save_receipt.wrapped": {
            "name": "wrapped",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [
                    "int",
                    "str"
                ]
            }
        },
        "contract_api.decorator": {
            "name": "decorator",
            "location": 141,
            "return": [
                "str",
                "datetime.date"
            ],
            "arguments": {
                "agent_method": [
                    "str",
                    "Optional[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/deployers.py": {
        "BaseContractDeployer.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "economics": [
                    "dict",
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[bool]"
                ],
                "deployer_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "BaseContractDeployer.economics": {
            "name": "economics",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.contract_address": {
            "name": "contract_address",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.deployer_address": {
            "name": "deployer_address",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.contract": {
            "name": "contract",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.dispatcher": {
            "name": "dispatcher",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.is_deployed": {
            "name": "is_deployed",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_version": [
                    "str",
                    "Sequence[str]",
                    "List[float]",
                    "Set[str]"
                ]
            }
        },
        "BaseContractDeployer.check_deployment_readiness": {
            "name": "check_deployment_readiness",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_version": [
                    "str",
                    "eth.abc.ComputationAPI",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "ignore_deployed": [
                    "Optional[str]",
                    "Optional[guillotina.db.interfaces.ITransaction]"
                ],
                "fail": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "additional_rules": [
                    "List[Tuple[bool, str]]",
                    "list",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Optional[str]",
                    "List[Tuple[float, str]]"
                ]
            }
        },
        "BaseContractDeployer.deploy": {
            "name": "deploy",
            "location": 154,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "deployment_mode": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "gas_limit": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "progress": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "emitter": [
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        },
        "BaseContractDeployer.make_agent": {
            "name": "make_agent",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer.get_latest_enrollment": {
            "name": "get_latest_enrollment",
            "location": 165,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractDeployer._get_deployed_contract": {
            "name": "_get_deployed_contract",
            "location": 173,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OwnableContractMixin.transfer_ownership": {
            "name": "transfer_ownership",
            "location": 193,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_owner": [
                    "bool",
                    "web3.contracContract"
                ],
                "transaction_gas_limit": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "int"
                ]
            }
        },
        "UpgradeableContractMixin.deploy": {
            "name": "deploy",
            "location": 230,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "deployment_mode": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ],
                "gas_limit": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ],
                "progress": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ],
                "contract_version": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ],
                "ignore_deployed": [
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "List[List[int]]"
                ]
            }
        },
        "UpgradeableContractMixin.get_principal_contract": {
            "name": "get_principal_contract",
            "location": 245,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeableContractMixin.get_proxy_contract": {
            "name": "get_proxy_contract",
            "location": 257,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeableContractMixin.get_proxy_deployer": {
            "name": "get_proxy_deployer",
            "location": 266,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeableContractMixin.retarget": {
            "name": "retarget",
            "location": 274,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "target_address": [
                    "Optional[Callable]",
                    "str",
                    "Optional[Any]",
                    "int"
                ],
                "gas_limit": [
                    "Optional[Callable]",
                    "str",
                    "Optional[Any]",
                    "int"
                ],
                "just_build_transaction": [
                    "bool",
                    "Callable[[], None]",
                    "Dict[str, str]",
                    "List[int]"
                ]
            }
        },
        "UpgradeableContractMixin.upgrade": {
            "name": "upgrade",
            "location": 299,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "str",
                    "bool"
                ],
                "contract_version": [
                    "str",
                    "int",
                    "List[Tuple[int, int]]",
                    "bool"
                ],
                "ignore_deployed": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "tuple",
                    "Optional[int]"
                ]
            }
        },
        "UpgradeableContractMixin.rollback": {
            "name": "rollback",
            "location": 334,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "UpgradeableContractMixin._finish_bare_deployment": {
            "name": "_finish_bare_deployment",
            "location": 348,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "deployment_receipt": [
                    "str",
                    "nucypher.blockchain.eth.deployers.BaseContractDeployer",
                    "int"
                ],
                "progress": [
                    "list",
                    "List[str]",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "NucypherTokenDeployer.deploy": {
            "name": "deploy",
            "location": 366,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "int",
                    "str",
                    "bool"
                ],
                "progress": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "confirmations": [
                    "int",
                    "str",
                    "bool"
                ],
                "deployment_mode": [
                    "str",
                    "bool"
                ],
                "ignore_deployed": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "emitter": [
                    "bool",
                    "raiden.constants.Environment",
                    "str"
                ]
            }
        },
        "ProxyContractDeployer.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_contract": [
                    "int",
                    "bool"
                ],
                "bare": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "ProxyContractDeployer.deploy": {
            "name": "deploy",
            "location": 418,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "List[str]"
                ],
                "progress": [
                    "int",
                    "Callable",
                    "str"
                ],
                "confirmations": [
                    "List[str]"
                ]
            }
        },
        "ProxyContractDeployer._validate_retarget": {
            "name": "_validate_retarget",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_target": [
                    "str",
                    "Dict[str, Any]",
                    "Match[str]",
                    "int"
                ]
            }
        },
        "ProxyContractDeployer.retarget": {
            "name": "retarget",
            "location": 440,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_target": [
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "gas_limit": []
            }
        },
        "ProxyContractDeployer.build_retarget_transaction": {
            "name": "build_retarget_transaction",
            "location": 450,
            "return": [
                "bytes",
                "bool",
                "str",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "new_target": [
                    "str",
                    "int",
                    "List[int]",
                    "Optional[int]"
                ],
                "gas_limit": [
                    "str",
                    "Awaitable",
                    "Callable[[T], T]"
                ]
            }
        },
        "ProxyContractDeployer.rollback": {
            "name": "rollback",
            "location": 460,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[int]"
                ]
            }
        },
        "StakingEscrowDeployer.__init__": {
            "name": "__init__",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_mode": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "int",
                    "str"
                ]
            }
        },
        "StakingEscrowDeployer._deploy_essential": {
            "name": "_deploy_essential",
            "location": 504,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "contract_version": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "gas_limit": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "confirmations": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "StakingEscrowDeployer.deploy": {
            "name": "deploy",
            "location": 536,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "deployment_mode": [
                    "str",
                    "float",
                    "int"
                ],
                "gas_limit": [
                    "int",
                    "Dict[str, float]",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]",
                    "str"
                ],
                "progress": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "contract_version": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "ignore_deployed": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "confirmations": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "emitter": [
                    "str",
                    "Type",
                    "List[str]",
                    "int"
                ]
            }
        },
        "StakingEscrowDeployer.activate": {
            "name": "activate",
            "location": 625,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "bytes",
                    "Dict[str, str]",
                    "Optional[int]"
                ],
                "progress": [
                    "bytes",
                    "dict",
                    "Dict[str, List[Any]]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, float]"
                ],
                "emitter": [
                    "str",
                    "bytes"
                ],
                "confirmations": [
                    "int",
                    "str"
                ]
            }
        },
        "StakingEscrowDeployer.ready_to_activate": {
            "name": "ready_to_activate",
            "location": 664,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakingEscrowDeployer.is_active": {
            "name": "is_active",
            "location": 676,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyManagerDeployer.__init__": {
            "name": "__init__",
            "location": 698,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyManagerDeployer.check_deployment_readiness": {
            "name": "check_deployment_readiness",
            "location": 706,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyManagerDeployer._deploy_essential": {
            "name": "_deploy_essential",
            "location": 714,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "contract_version": [
                    "str",
                    "bool"
                ],
                "gas_limit": [
                    "str",
                    "bool"
                ],
                "confirmations": [
                    "str",
                    "bool"
                ]
            }
        },
        "PolicyManagerDeployer.deploy": {
            "name": "deploy",
            "location": 725,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "deployment_mode": [
                    "str",
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "gas_limit": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "progress": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "contract_version": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "ignore_deployed": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "confirmations": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "emitter": [
                    "str",
                    "Optional[\"Address\"]",
                    "Type",
                    "List[str]"
                ]
            }
        },
        "PolicyManagerDeployer.set_fee_rate_range": {
            "name": "set_fee_rate_range",
            "location": 798,
            "return": [
                "Set[str]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "default": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "maximum": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "gas_limit": [
                    "int",
                    "bool",
                    "str"
                ],
                "confirmations": [
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ]
            }
        },
        "StakingInterfaceRouterDeployer.rollback": {
            "name": "rollback",
            "location": 830,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StakingInterfaceDeployer.__init__": {
            "name": "__init__",
            "location": 842,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StakingInterfaceDeployer._deploy_essential": {
            "name": "_deploy_essential",
            "location": 868,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "contract_version": [
                    "str",
                    "IO"
                ],
                "gas_limit": [
                    "str",
                    "IO"
                ],
                "confirmations": [
                    "str",
                    "IO"
                ]
            }
        },
        "StakingInterfaceDeployer.deploy": {
            "name": "deploy",
            "location": 885,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "deployment_mode": [
                    "str",
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "gas_limit": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "progress": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "contract_version": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "ignore_deployed": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "confirmations": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "emitter": [
                    "str",
                    "Type",
                    "List[str]",
                    "int",
                    "Optional[\"Address\"]"
                ]
            }
        },
        "PreallocationEscrowDeployer.__init__": {
            "name": "__init__",
            "location": 950,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allocation_registry": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "sidekick_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "PreallocationEscrowDeployer.make_agent": {
            "name": "make_agent",
            "location": 965,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowDeployer.allocation_registry": {
            "name": "allocation_registry",
            "location": 974,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowDeployer.assign_beneficiary": {
            "name": "assign_beneficiary",
            "location": 978,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int",
                    "float"
                ],
                "use_sidekick": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable[[], int]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "progress": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "PreallocationEscrowDeployer.initial_deposit": {
            "name": "initial_deposit",
            "location": 993,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [],
                "duration_seconds": [
                    "str",
                    "Union[float, int, str]",
                    "Sequence[str]"
                ],
                "progress": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "PreallocationEscrowDeployer.enroll_principal_contract": {
            "name": "enroll_principal_contract",
            "location": 1006,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PreallocationEscrowDeployer.deploy": {
            "name": "deploy",
            "location": 1013,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ],
                "use_sidekick": [
                    "bool",
                    "raiden.constants.Environment",
                    "str"
                ],
                "progress": [
                    "float",
                    "int",
                    "bytes",
                    "bool"
                ],
                "ignore_deployed": [
                    "float",
                    "int",
                    "bytes",
                    "bool"
                ],
                "emitter": [
                    "bool",
                    "tuple",
                    "float"
                ]
            }
        },
        "PreallocationEscrowDeployer.get_contract_abi": {
            "name": "get_contract_abi",
            "location": 1040,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorDeployer.__init__": {
            "name": "__init__",
            "location": 1053,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorDeployer.check_deployment_readiness": {
            "name": "check_deployment_readiness",
            "location": 1061,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdjudicatorDeployer._deploy_essential": {
            "name": "_deploy_essential",
            "location": 1069,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "contract_version": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "gas_limit": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "confirmations": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AdjudicatorDeployer.deploy": {
            "name": "deploy",
            "location": 1091,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "deployment_mode": [
                    "str",
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "gas_limit": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "progress": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "contract_version": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "ignore_deployed": [
                    "float",
                    "List[int]",
                    "int"
                ],
                "emitter": [
                    "str",
                    "Optional[\"Address\"]",
                    "Type",
                    "List[str]"
                ],
                "confirmations": [
                    "float",
                    "List[int]",
                    "int"
                ]
            }
        },
        "WorklockDeployer.__init__": {
            "name": "__init__",
            "location": 1173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorklockDeployer._deploy_essential": {
            "name": "_deploy_essential",
            "location": 1179,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "List[str]"
                ],
                "confirmations": [
                    "List[str]"
                ]
            }
        },
        "WorklockDeployer.deploy": {
            "name": "deploy",
            "location": 1195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "progress": [
                    "Dict[str, Any]",
                    "int",
                    "r2c.lib.registry.RegistryData"
                ],
                "confirmations": [
                    "Optional[float]",
                    "float"
                ],
                "deployment_mode": [
                    "str",
                    "bool"
                ],
                "ignore_deployed": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "emitter": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "WorklockDeployer.fund": {
            "name": "fund",
            "location": 1243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sender_address": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "web3.contracContract"
                ],
                "progress": [
                    "bytes",
                    "dict",
                    "Dict[str, List[Any]]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, float]"
                ],
                "confirmations": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "web3.contracContract"
                ],
                "emitter": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MultiSigDeployer._deploy_essential": {
            "name": "_deploy_essential",
            "location": 1283,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "int",
                    "bool",
                    "List[str]",
                    "eth.abc.StateAPI"
                ],
                "owners": [
                    "int",
                    "List[str]",
                    "List[int]"
                ],
                "gas_limit": [
                    "str",
                    "bool"
                ],
                "confirmations": [
                    "str",
                    "bool"
                ]
            }
        },
        "MultiSigDeployer.deploy": {
            "name": "deploy",
            "location": 1302,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "deployment_mode": [
                    "str",
                    "int",
                    "Exception"
                ],
                "gas_limit": [
                    "float",
                    "Iterable[str]",
                    "int",
                    "str",
                    "Callable",
                    "list"
                ],
                "progress": [
                    "str",
                    "bool",
                    "int"
                ],
                "ignore_deployed": [
                    "str",
                    "bool",
                    "int"
                ],
                "emitter": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/events.py": {
        "EventRecord.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        },
        "EventRecord.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractEvents.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "str",
                    "MutableMapping",
                    "List[str]"
                ]
            }
        },
        "ContractEvents.__get_web3_event_by_name": {
            "name": "__get_web3_event_by_name",
            "location": 50,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "str"
                ]
            }
        },
        "ContractEvents.__getitem__": {
            "name": "__getitem__",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "str"
                ]
            }
        },
        "ContractEvents.__getattr__": {
            "name": "__getattr__",
            "location": 74,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Collection[str]"
                ]
            }
        },
        "ContractEvents.__iter__": {
            "name": "__iter__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractEvents.__getitem__.wrapper": {
            "name": "wrapper",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "from_block": [
                    "str",
                    "bool",
                    "Optional[\"Texte\"]",
                    "Optional[Any]"
                ],
                "to_block": [
                    "str",
                    "bool",
                    "Optional[\"Texte\"]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/interfaces.py": {
        "BlockchainInterface.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "poa": [
                    "int",
                    "bool",
                    "float"
                ],
                "light": [
                    "int",
                    "bool",
                    "float"
                ],
                "provider_process": [
                    "int",
                    "bool",
                    "float"
                ],
                "provider_uri": [
                    "int",
                    "bool",
                    "float"
                ],
                "provider": [
                    "int",
                    "bool",
                    "float"
                ],
                "gas_strategy": [
                    "str",
                    "dict",
                    "Dict[str, Set[str]]",
                    "bool"
                ]
            }
        },
        "BlockchainInterface.__repr__": {
            "name": "__repr__",
            "location": 231,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.from_dict": {
            "name": "from_dict",
            "location": 236,
            "return": [
                "Dict[int, Dict[str, Any]]",
                "dict",
                "List[Dict]",
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "bool",
                    "T",
                    "type"
                ],
                "payload": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BlockchainInterface.to_dict": {
            "name": "to_dict",
            "location": 241,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.is_connected": {
            "name": "is_connected",
            "location": 246,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.get_gas_strategy": {
            "name": "get_gas_strategy",
            "location": 255,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type"
                ],
                "gas_strategy": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockchainInterface.attach_middleware": {
            "name": "attach_middleware",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.connect": {
            "name": "connect",
            "location": 282,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.sync": {
            "name": "sync",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "emitter": [
                    "Optional[Any]",
                    "float",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "BlockchainInterface.provider": {
            "name": "provider",
            "location": 357,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface._attach_provider": {
            "name": "_attach_provider",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "Callable",
                    "str"
                ],
                "provider_uri": []
            }
        },
        "BlockchainInterface.__transaction_failed": {
            "name": "__transaction_failed",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "Exception"
                ],
                "transaction_dict": [
                    "Optional[str]",
                    "dict"
                ],
                "contract_function": [
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "BlockchainInterface.__log_transaction": {
            "name": "__log_transaction",
            "location": 443,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "bytes"
                ],
                "contract_function": [
                    "web3.contracContract",
                    "web3.Web3",
                    "web3.contracContractFunction",
                    "Callable"
                ]
            }
        },
        "BlockchainInterface.build_transaction": {
            "name": "build_transaction",
            "location": 467,
            "return": [
                "str",
                "int",
                "utils.JSON",
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_function": [
                    "str",
                    "Dict[str, object]"
                ],
                "sender_address": [
                    "bool",
                    "str",
                    "float"
                ],
                "payload": [
                    "int",
                    "Callable[[], None]",
                    "Optional[bool]",
                    "Optional[Sequence[str]]"
                ],
                "transaction_gas_limit": [
                    "float",
                    "int"
                ]
            }
        },
        "BlockchainInterface.sign_and_broadcast_transaction": {
            "name": "sign_and_broadcast_transaction",
            "location": 504,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "str",
                    "List[dict]"
                ],
                "transaction_name": [
                    "str",
                    "int"
                ],
                "confirmations": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "BlockchainInterface.get_blocktime": {
            "name": "get_blocktime",
            "location": 579,
            "return": [
                "bool",
                "dict",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.send_transaction": {
            "name": "send_transaction",
            "location": 583,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "contract_function": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "dict",
                    "Type[T]"
                ],
                "sender_address": [
                    "int",
                    "bool",
                    "dict",
                    "str"
                ],
                "payload": [
                    "int",
                    "bool",
                    "dict",
                    "str"
                ],
                "transaction_gas_limit": [
                    "int",
                    "bool",
                    "dict",
                    "str"
                ],
                "confirmations": [
                    "Optional[str]",
                    "Type[T]",
                    "Optional[\"Scope\"]"
                ]
            }
        },
        "BlockchainInterface.get_contract_by_name": {
            "name": "get_contract_by_name",
            "location": 607,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostName]"
                ],
                "contract_name": [
                    "str",
                    "list",
                    "dict",
                    "Optional[List[str]]"
                ],
                "contract_version": [
                    "str",
                    "list",
                    "dict",
                    "Optional[List[str]]"
                ],
                "enrollment_version": [
                    "Sequence[str]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "proxy_name": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "IO"
                ],
                "use_proxy_address": [
                    "bool",
                    "str",
                    "Iterable[Tuple[str, str, str]]",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainInterface.__get_enrollment_version_index": {
            "name": "__get_enrollment_version_index",
            "location": 691,
            "return": [
                "str"
            ],
            "arguments": {
                "version_index": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "enrollments": [
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "contract_version": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainDeployerInterface.__init__": {
            "name": "__init__",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "str",
                    "bool"
                ],
                "ignore_solidity_check": [
                    "str",
                    "bool"
                ],
                "dry_run": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "BlockchainDeployerInterface.connect": {
            "name": "connect",
            "location": 733,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainDeployerInterface._setup_solidity": {
            "name": "_setup_solidity",
            "location": 738,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "compiler": [
                    "nucypher.blockchain.eth.sol.compile.SolidityCompiler",
                    "Dict[str, object]",
                    "str"
                ]
            }
        },
        "BlockchainDeployerInterface.deploy_contract": {
            "name": "deploy_contract",
            "location": 751,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "deployer_address": [
                    "str",
                    "int",
                    "bool"
                ],
                "registry": [
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "bool",
                    "str",
                    "Callable"
                ],
                "contract_name": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "int"
                ]
            }
        },
        "BlockchainDeployerInterface.find_raw_contract_data": {
            "name": "find_raw_contract_data",
            "location": 815,
            "return": [
                "Dict[str, Any]",
                "str",
                "List[str]",
                "Dict[str, float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "dict"
                ],
                "requested_version": [
                    "str",
                    "requests.sessions.Session",
                    "Dict[str, str]",
                    "Dict[str, Union[int, str]]"
                ]
            }
        },
        "BlockchainDeployerInterface.get_contract_factory": {
            "name": "get_contract_factory",
            "location": 851,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "version": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainDeployerInterface._wrap_contract": {
            "name": "_wrap_contract",
            "location": 860,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "wrapper_contract": [
                    "str",
                    "Sequence[int]"
                ],
                "target_contract": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "BlockchainDeployerInterface.get_proxy_contract": {
            "name": "get_proxy_contract",
            "location": 877,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "bool"
                ],
                "target_address": [
                    "str",
                    "Dict[str, str]"
                ],
                "proxy_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "BlockchainInterfaceFactory.__new__": {
            "name": "__new__",
            "location": 937,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "BlockchainInterfaceFactory.is_interface_initialized": {
            "name": "is_interface_initialized",
            "location": 943,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "type"
                ],
                "provider_uri": [
                    "str",
                    "dict",
                    "type"
                ]
            }
        },
        "BlockchainInterfaceFactory.register_interface": {
            "name": "register_interface",
            "location": 950,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "interface": [
                    "Dict[str, Any]"
                ],
                "sync": [
                    "int",
                    "Callable[[str], int]",
                    "bytes",
                    "List[int]"
                ],
                "emitter": [
                    "int",
                    "Callable[[str], int]",
                    "bytes",
                    "List[int]"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "BlockchainInterfaceFactory.initialize_interface": {
            "name": "initialize_interface",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]",
                    "Optional[List[float]]",
                    "str",
                    "Union[int, float]"
                ],
                "provider_uri": [
                    "str",
                    "List[str]",
                    "List[float]",
                    "Sequence[int]",
                    "Optional[Set[str]]",
                    "int"
                ],
                "sync": [
                    "bool",
                    "str",
                    "Union[int, float]",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]"
                ],
                "emitter": [
                    "bool",
                    "str",
                    "Union[int, float]",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]"
                ],
                "interface_class": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainInterfaceFactory.get_interface": {
            "name": "get_interface",
            "location": 991,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "provider_uri": [
                    "str",
                    "Optional[str]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "BlockchainInterfaceFactory.get_or_create_interface": {
            "name": "get_or_create_interface",
            "location": 1017,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "provider_uri": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "BlockchainInterface.TransactionFailed.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "purplship.providers.purolator.utils.Settings",
                    "Optional[Dict[str, int]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "transaction_dict": [
                    "int",
                    "str",
                    "Sequence[MutableSet[int]]"
                ],
                "contract_function": [
                    "tuple",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BlockchainInterface.TransactionFailed.default": {
            "name": "default",
            "location": 131,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.TransactionFailed.insufficient_eth": {
            "name": "insufficient_eth",
            "location": 136,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/multisig.py": {
        "Proposal.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trustee_address": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "Tuple[int]"
                ],
                "target_address": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Union[str, IO[bytes]]"
                ],
                "value": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "Dict[str, int]",
                    "Tuple[int]"
                ],
                "data": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Iterable[dict]",
                    "dict",
                    "str",
                    "int"
                ],
                "nonce": [
                    "float",
                    "int"
                ],
                "digest": [
                    "float",
                    "int"
                ]
            }
        },
        "Proposal.from_transaction": {
            "name": "from_transaction",
            "location": 42,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Dict[str, Any]",
                "Iterable[str]",
                "type"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "T",
                    "int",
                    "List[int]"
                ],
                "transaction": [
                    "bytes",
                    "dict",
                    "Type[Any]"
                ],
                "multisig_agent": [
                    "bytes",
                    "dict",
                    "Type[Any]"
                ],
                "trustee_address": [
                    "bytes",
                    "dict",
                    "Type[Any]"
                ]
            }
        },
        "Proposal.application_specific_data": {
            "name": "application_specific_data",
            "location": 55,
            "return": [
                "str",
                "OrderedDict",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proposal.decode_transaction_data": {
            "name": "decode_transaction_data",
            "location": 80,
            "return": [
                "Sequence['cirq.Qid']",
                "Callable",
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "int"
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "str",
                    "bool",
                    "int",
                    "dict"
                ],
                "registry": [
                    "List[Dict]",
                    "str"
                ]
            }
        },
        "Proposal.write": {
            "name": "write",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "Proposal.from_file": {
            "name": "from_file",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str",
                    "Optional[str]",
                    "Union[int, bytes]",
                    "Mapping[str, T]",
                    "Dict[str, Iterable[Any]]"
                ],
                "filepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "Authorization.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "dict",
                    "Dict[str, str]",
                    "List[T]",
                    "float"
                ],
                "s": [
                    "int",
                    "dict",
                    "Dict[str, str]",
                    "List[T]",
                    "float"
                ],
                "v": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "bool",
                    "Mapping"
                ]
            }
        },
        "Authorization.recover_executive_address": {
            "name": "recover_executive_address",
            "location": 133,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "proposal": [
                    "str",
                    "IO",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Authorization.__bytes__": {
            "name": "__bytes__",
            "location": 137,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authorization.serialize": {
            "name": "serialize",
            "location": 140,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authorization.deserialize": {
            "name": "deserialize",
            "location": 144,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "dict",
                    "int"
                ],
                "data": [
                    "bytes",
                    "list",
                    "Mapping[str, str]",
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "Authorization.from_hex": {
            "name": "from_hex",
            "location": 149,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "hexstr": [
                    "bytes",
                    "str",
                    "List[int]",
                    "int",
                    "Optional[Union[str, Any]]",
                    "dict",
                    "bool"
                ]
            }
        },
        "Authorization._write": {
            "name": "_write",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "Authorization.from_file": {
            "name": "from_file",
            "location": 159,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable",
                    "Optional[Dict]",
                    "str",
                    "Hashable",
                    "int"
                ],
                "filepath": [
                    "str",
                    "bytes",
                    "List[dict]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/networks.py": {
        "NetworksInventory.get_ethereum_chain_id": {
            "name": "get_ethereum_chain_id",
            "location": 35,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Union[str, int]",
                    "Dict[str, Any]",
                    "Union[int, slice]"
                ],
                "network": [
                    "Union[str, int]",
                    "Dict[str, Any]",
                    "Union[int, slice]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/providers.py": {
        "_get_IPC_provider": {
            "name": "_get_IPC_provider",
            "location": 34,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "provider_uri": [
                    "str",
                    "bool"
                ]
            }
        },
        "_get_HTTP_provider": {
            "name": "_get_HTTP_provider",
            "location": 42,
            "return": [
                "dict",
                "bytes",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "provider_uri": [
                    "str",
                    "bool"
                ]
            }
        },
        "_get_websocket_provider": {
            "name": "_get_websocket_provider",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "provider_uri": [
                    "str",
                    "bool"
                ]
            }
        },
        "_get_infura_provider": {
            "name": "_get_infura_provider",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "provider_uri": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "_get_auto_provider": {
            "name": "_get_auto_provider",
            "location": 83,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "provider_uri": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "_get_pyevm_test_backend": {
            "name": "_get_pyevm_test_backend",
            "location": 92,
            "return": [
                "list",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "_get_ethereum_tester": {
            "name": "_get_ethereum_tester",
            "location": 106,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "test_backend": [
                    "str"
                ]
            }
        },
        "_get_pyevm_test_provider": {
            "name": "_get_pyevm_test_provider",
            "location": 112,
            "return": [
                "list",
                "str",
                "List[str]"
            ],
            "arguments": {
                "provider_uri": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_get_mock_test_provider": {
            "name": "_get_mock_test_provider",
            "location": 120,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "provider_uri": [
                    "str",
                    "Callable",
                    "django.contrib.gis.db.backends.postgis.schema.PostGISSchemaEditor",
                    "bool"
                ]
            }
        },
        "_get_test_geth_parity_provider": {
            "name": "_get_test_geth_parity_provider",
            "location": 127,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "provider_uri": [
                    "bool",
                    "str"
                ]
            }
        },
        "_get_tester_ganache": {
            "name": "_get_tester_ganache",
            "location": 140,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "provider_uri": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/registry.py": {
        "CanonicalRegistrySource.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "network": [
                    "str",
                    "dict"
                ],
                "registry_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CanonicalRegistrySource.get_publication_endpoint": {
            "name": "get_publication_endpoint",
            "location": 57,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanonicalRegistrySource.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 61,
            "return": [
                "typing.Union[builtins.str, builtins.bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanonicalRegistrySource.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubRegistrySource.get_publication_endpoint": {
            "name": "get_publication_endpoint",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubRegistrySource.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 80,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedRegistrySource.get_publication_endpoint": {
            "name": "get_publication_endpoint",
            "location": 106,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddedRegistrySource.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 110,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistrySourceManager.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "List[str]",
                    "Optional[str]",
                    "Mapping"
                ],
                "only_primary": [
                    "str",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "Callable",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "RegistrySourceManager.__getitem__": {
            "name": "__getitem__",
            "location": 149,
            "return": [
                "str",
                "List[str]",
                "os.PathLike"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RegistrySourceManager.get_primary_sources": {
            "name": "get_primary_sources",
            "location": 153,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "IO",
                    "bytes",
                    "List[str]",
                    "Optional[Container[str]]"
                ]
            }
        },
        "RegistrySourceManager.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 156,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "registry_class": [
                    "dict",
                    "bool"
                ],
                "network": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "BaseContractRegistry.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseContractRegistry.__eq__": {
            "name": "__eq__",
            "location": 229,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "BaseContractRegistry.__repr__": {
            "name": "__repr__",
            "location": 234,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.id": {
            "name": "id",
            "location": 239,
            "return": [
                "int",
                "str",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry._destroy": {
            "name": "_destroy",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.write": {
            "name": "write",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseContractRegistry.read": {
            "name": "read",
            "location": 256,
            "return": [
                "typing.Union[builtins.list, builtins.dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.from_latest_publication": {
            "name": "from_latest_publication",
            "location": 260,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseContractRegistry.source": {
            "name": "source",
            "location": 278,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.enrolled_names": {
            "name": "enrolled_names",
            "location": 282,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.enrolled_addresses": {
            "name": "enrolled_addresses",
            "location": 287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseContractRegistry.enroll": {
            "name": "enroll",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "int"
                ],
                "contract_address": [
                    "str",
                    "int"
                ],
                "contract_abi": [
                    "str"
                ],
                "contract_version": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseContractRegistry.search": {
            "name": "search",
            "location": 311,
            "return": [
                "dict",
                "str",
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "str"
                ],
                "contract_version": [
                    "str",
                    "Callable",
                    "bool",
                    "Iterable[str]",
                    "Optional[bool]",
                    "Optional[str]",
                    "List[str]"
                ],
                "contract_address": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "LocalContractRegistry.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "LocalContractRegistry.__repr__": {
            "name": "__repr__",
            "location": 361,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalContractRegistry.filepath": {
            "name": "filepath",
            "location": 366,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalContractRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LocalContractRegistry.read": {
            "name": "read",
            "location": 373,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalContractRegistry.write": {
            "name": "write",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "list",
                    "dict",
                    "\"Project\""
                ]
            }
        },
        "LocalContractRegistry._destroy": {
            "name": "_destroy",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalContractRegistry.from_dict": {
            "name": "from_dict",
            "location": 420,
            "return": [
                "Dict[int, Dict[str, Any]]",
                "dict",
                "List[Dict]",
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable",
                    "bool",
                    "T",
                    "type"
                ],
                "payload": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "LocalContractRegistry.to_dict": {
            "name": "to_dict",
            "location": 425,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContractRegistry.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContractRegistry.clear": {
            "name": "clear",
            "location": 436,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryContractRegistry.commit": {
            "name": "commit",
            "location": 441,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "InMemoryContractRegistry.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryContractRegistry.clear": {
            "name": "clear",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryContractRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 466,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InMemoryContractRegistry.write": {
            "name": "write",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "InMemoryContractRegistry.read": {
            "name": "read",
            "location": 472,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryContractRegistry.commit": {
            "name": "commit",
            "location": 482,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "overwrite": [
                    "str"
                ]
            }
        },
        "InMemoryContractRegistry._destroy": {
            "name": "_destroy",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllocationRegistry.__init__": {
            "name": "__init__",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "AllocationRegistry.search": {
            "name": "search",
            "location": 523,
            "return": [
                "dict",
                "str",
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "bool",
                    "str"
                ],
                "contract_address": [
                    "dict",
                    "str",
                    "list"
                ]
            }
        },
        "AllocationRegistry.is_beneficiary_enrolled": {
            "name": "is_beneficiary_enrolled",
            "location": 557,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "str",
                    "bool"
                ]
            }
        },
        "AllocationRegistry.enroll": {
            "name": "enroll",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "str",
                    "float"
                ],
                "contract_address": [
                    "List[Dict]",
                    "str",
                    "List[str]"
                ],
                "contract_abi": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "InMemoryAllocationRegistry.__init__": {
            "name": "__init__",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryAllocationRegistry.clear": {
            "name": "clear",
            "location": 588,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryAllocationRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 591,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InMemoryAllocationRegistry.write": {
            "name": "write",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "InMemoryAllocationRegistry.read": {
            "name": "read",
            "location": 597,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndividualAllocationRegistry.__init__": {
            "name": "__init__",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "Optional[str]",
                    "path.Path",
                    "List[str]",
                    "Dict[str, str]",
                    "str"
                ],
                "contract_address": [
                    "Optional[str]",
                    "path.Path",
                    "List[str]",
                    "Dict[str, str]",
                    "str"
                ],
                "contract_abi": [
                    "int",
                    "str"
                ],
                "network": [
                    "int"
                ]
            }
        },
        "IndividualAllocationRegistry.from_allocation_file": {
            "name": "from_allocation_file",
            "location": 644,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "List[int]"
                ],
                "filepath": [
                    "str",
                    "bytes",
                    "List[dict]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/signers.py": {
        "Signer.from_signer_uri": {
            "name": "from_signer_uri",
            "location": 64,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Exception",
                    "Mapping[str, Any]"
                ],
                "uri": [
                    "Optional[int]",
                    "Dict[str, Any]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Signer.is_device": {
            "name": "is_device",
            "location": 74,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "walledomain.Account",
                    "List[int]"
                ]
            }
        },
        "Signer.accounts": {
            "name": "accounts",
            "location": 81,
            "return": [
                "pathlib.Path",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signer.unlock_account": {
            "name": "unlock_account",
            "location": 85,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        },
        "Signer.lock_account": {
            "name": "lock_account",
            "location": 89,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "walledomain.Account",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Counter"
                ]
            }
        },
        "Signer.sign_transaction": {
            "name": "sign_transaction",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]",
                    "eth.rlp.headers.BlockHeader",
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Signer.sign_message": {
            "name": "sign_message",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "walledomain.Account",
                    "List[int]"
                ],
                "message": [
                    "walledomain.Account",
                    "List[int]"
                ]
            }
        },
        "Web3Signer.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        },
        "Web3Signer.from_signer_uri": {
            "name": "from_signer_uri",
            "location": 110,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Sequence",
                    "trezor.messages.TxRequesTxRequest",
                    "Mapping[str, Any]",
                    "bytes"
                ],
                "uri": [
                    "dict",
                    "eth.abc.ComputationAPI"
                ]
            }
        },
        "Web3Signer.is_connected": {
            "name": "is_connected",
            "location": 120,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Signer.accounts": {
            "name": "accounts",
            "location": 124,
            "return": [
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Signer.is_device": {
            "name": "is_device",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ]
            }
        },
        "Web3Signer.unlock_account": {
            "name": "unlock_account",
            "location": 141,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "Iterable[str]"
                ],
                "password": [
                    "str"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "Web3Signer.lock_account": {
            "name": "lock_account",
            "location": 149,
            "return": [
                "dict",
                "Dict[str, Any]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "eth.rlp.headers.BlockHeader",
                    "int"
                ]
            }
        },
        "Web3Signer.sign_message": {
            "name": "sign_message",
            "location": 157,
            "return": [
                "list",
                "str",
                "bytes",
                "Tuple[nucypher.crypto.kits.UmbralMessageKit, umbral.signing.Signature]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Web3Signer.sign_transaction": {
            "name": "sign_transaction",
            "location": 161,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ClefSigner.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ipc_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "timeout": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "ClefSigner.__ipc_request": {
            "name": "__ipc_request",
            "location": 186,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ClefSigner.is_valid_clef_uri": {
            "name": "is_valid_clef_uri",
            "location": 197,
            "return": [
                "float",
                "T",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "type",
                    "bool",
                    "Type[T]"
                ],
                "uri": [
                    "str",
                    "int",
                    "Type",
                    "List[str]"
                ]
            }
        },
        "ClefSigner.from_signer_uri": {
            "name": "from_signer_uri",
            "location": 202,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "uri": [
                    "bool",
                    "Type[T]",
                    "dict",
                    "str"
                ]
            }
        },
        "ClefSigner.is_connected": {
            "name": "is_connected",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClefSigner.is_device": {
            "name": "is_device",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "walledomain.Account",
                    "List[int]"
                ]
            }
        },
        "ClefSigner.accounts": {
            "name": "accounts",
            "location": 217,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClefSigner.sign_transaction": {
            "name": "sign_transaction",
            "location": 223,
            "return": [
                "str",
                "bytearray",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "pymap.interfaces.backend.BackendInterface",
                    "Optional[Any]",
                    "str"
                ]
            }
        },
        "ClefSigner.sign_message": {
            "name": "sign_message",
            "location": 244,
            "return": [
                "Optional[float]",
                "pathlib.Path",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bytes",
                    "Union[str, \"TrackingCode\"]"
                ],
                "message": [
                    "str",
                    "bytes"
                ],
                "content_type": [
                    "str",
                    "Optional[str]"
                ],
                "validator_address": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "ClefSigner.sign_data_for_validator": {
            "name": "sign_data_for_validator",
            "location": 268,
            "return": [
                "Set[str]",
                "set",
                "str",
                "int",
                "bool",
                "Set[object]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "message": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "validator_address": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "ClefSigner.unlock_account": {
            "name": "unlock_account",
            "location": 276,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        },
        "ClefSigner.lock_account": {
            "name": "lock_account",
            "location": 280,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "bool",
                    "walledomain.Account",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Counter"
                ]
            }
        },
        "KeystoreSigner.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "path.Path",
                    "bytes"
                ]
            }
        },
        "KeystoreSigner.__del__": {
            "name": "__del__",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KeystoreSigner.__read_keystore": {
            "name": "__read_keystore",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "TextIO",
                    "str",
                    "Union[str, pathlib.Path]",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "KeystoreSigner.__read_keyfile": {
            "name": "__read_keyfile",
            "location": 329,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "os.PathLike"
                ]
            }
        },
        "KeystoreSigner.__handle_keyfile": {
            "name": "__handle_keyfile",
            "location": 336,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "List[str]",
                    "pathlib.Path",
                    "norfs.fs.base.Path",
                    "list",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "KeystoreSigner.__get_signer": {
            "name": "__get_signer",
            "location": 359,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "KeystoreSigner.path": {
            "name": "path",
            "location": 374,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeystoreSigner.from_signer_uri": {
            "name": "from_signer_uri",
            "location": 379,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "type"
                ],
                "uri": [
                    "bool",
                    "Type[T]",
                    "dict",
                    "str"
                ]
            }
        },
        "KeystoreSigner.is_device": {
            "name": "is_device",
            "location": 387,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "walledomain.Account",
                    "List[int]"
                ]
            }
        },
        "KeystoreSigner.accounts": {
            "name": "accounts",
            "location": 391,
            "return": [
                "dict",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeystoreSigner.unlock_account": {
            "name": "unlock_account",
            "location": 396,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str"
                ],
                "password": [
                    "str",
                    "bytes"
                ],
                "duration": [
                    "str",
                    "bool"
                ]
            }
        },
        "KeystoreSigner.lock_account": {
            "name": "lock_account",
            "location": 416,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "eth.abc.DatabaseAPI",
                    "str"
                ]
            }
        },
        "KeystoreSigner.sign_transaction": {
            "name": "sign_transaction",
            "location": 430,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "dict"
                ]
            }
        },
        "KeystoreSigner.sign_message": {
            "name": "sign_message",
            "location": 448,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "accounts.models.Account",
                    "str"
                ],
                "message": [
                    "pathlib.Path",
                    "eth.abc.StateAPI",
                    "List[str]"
                ]
            }
        },
        "Signer.AccountLocked.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "List[str]",
                    "Sized",
                    "list"
                ]
            }
        },
        "Signer.UnknownAccount.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "List[str]",
                    "Sized",
                    "list"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/token.py": {
        "NU.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int"
                ],
                "denomination": [
                    "int",
                    "List[Tuple[int, float]]",
                    "Tuple[str]",
                    "str",
                    "float"
                ]
            }
        },
        "NU.ZERO": {
            "name": "ZERO",
            "location": 81,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "NU.from_nunits": {
            "name": "from_nunits",
            "location": 85,
            "return": [
                "str",
                "bytes",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Union[int, float, str]",
                    "float",
                    "type",
                    "str"
                ],
                "value": [
                    "int",
                    "Union[int, float, str]",
                    "float",
                    "type",
                    "str"
                ]
            }
        },
        "NU.from_tokens": {
            "name": "from_tokens",
            "location": 89,
            "return": [
                "str",
                "bytes",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Union[int, float, str]",
                    "int",
                    "type",
                    "str"
                ],
                "value": [
                    "Union[int, float, str]",
                    "int",
                    "type",
                    "str"
                ]
            }
        },
        "NU.to_tokens": {
            "name": "to_tokens",
            "location": 92,
            "return": [
                "List[str]",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.to_nunits": {
            "name": "to_nunits",
            "location": 96,
            "return": [
                "str",
                "int",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.__eq__": {
            "name": "__eq__",
            "location": 100,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__bool__": {
            "name": "__bool__",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.__radd__": {
            "name": "__radd__",
            "location": 109,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__add__": {
            "name": "__add__",
            "location": 112,
            "return": [
                "str",
                "List[int]",
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "NU.__sub__": {
            "name": "__sub__",
            "location": 115,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__rmul__": {
            "name": "__rmul__",
            "location": 118,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__mul__": {
            "name": "__mul__",
            "location": 121,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__floordiv__": {
            "name": "__floordiv__",
            "location": 124,
            "return": [
                "str",
                "List[int]",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "SupportsInt",
                    "int",
                    "str"
                ]
            }
        },
        "NU.__gt__": {
            "name": "__gt__",
            "location": 127,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__ge__": {
            "name": "__ge__",
            "location": 130,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__lt__": {
            "name": "__lt__",
            "location": 133,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__le__": {
            "name": "__le__",
            "location": 136,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "raiden.utils.Any",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "NU.__int__": {
            "name": "__int__",
            "location": 139,
            "return": [
                "eth.chains.base.MiningChain"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.__round__": {
            "name": "__round__",
            "location": 143,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "decimals": [
                    "str",
                    "bool"
                ]
            }
        },
        "NU.__repr__": {
            "name": "__repr__",
            "location": 146,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NU.__str__": {
            "name": "__str__",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staking_agent": [
                    "MutableMapping[str, Any]",
                    "List[List[str]]",
                    "str",
                    "bool",
                    "tuple",
                    "Optional[str]"
                ],
                "checksum_address": [
                    "logging.Logger",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "value": [
                    "str",
                    "float",
                    "int"
                ],
                "first_locked_period": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "float"
                ],
                "final_locked_period": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "index": [
                    "str",
                    "logging.Logger",
                    "Tuple[str, int]",
                    "bool"
                ],
                "economics": [
                    "bytes",
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "validate_now": [
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Stake.__repr__": {
            "name": "__repr__",
            "location": 214,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.__eq__": {
            "name": "__eq__",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "Stake.address_index_ordering_key": {
            "name": "address_index_ordering_key",
            "location": 244,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.is_expired": {
            "name": "is_expired",
            "location": 253,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.is_active": {
            "name": "is_active",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.from_stake_info": {
            "name": "from_stake_info",
            "location": 263,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[str]",
                    "Union[List[str], List[Any]]"
                ],
                "checksum_address": [
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[str]",
                    "Union[List[str], List[Any]]"
                ],
                "index": [
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[str]",
                    "Union[List[str], List[Any]]"
                ],
                "stake_info": [
                    "Tuple[int, int, int]",
                    "int",
                    "bool",
                    "float"
                ],
                "economics": [
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "Sequence[str]",
                    "Union[List[str], List[Any]]"
                ]
            }
        },
        "Stake.to_stake_info": {
            "name": "to_stake_info",
            "location": 286,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.duration": {
            "name": "duration",
            "location": 295,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.periods_remaining": {
            "name": "periods_remaining",
            "location": 301,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.time_remaining": {
            "name": "time_remaining",
            "location": 306,
            "return": [
                "int",
                "Match",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "slang": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Stake.describe": {
            "name": "describe",
            "location": 320,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.__handle_validation_failure": {
            "name": "__handle_validation_failure",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "rulebook": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Stake.validate": {
            "name": "validate",
            "location": 343,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.validate_value": {
            "name": "validate_value",
            "location": 346,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool",
                "int",
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "raise_on_fail": [
                    "bool",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "Stake.validate_duration": {
            "name": "validate_duration",
            "location": 360,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "raise_on_fail": [
                    "bool",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "Stake.sync": {
            "name": "sync",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stake.divide": {
            "name": "divide",
            "location": 395,
            "return": [
                "str",
                "int",
                "List[str]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "target_value": [
                    "str",
                    "Match[str]"
                ],
                "additional_periods": [
                    "decimal.Decimal",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "Stake.initialize_stake": {
            "name": "initialize_stake",
            "location": 463,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Deque[int]",
                    "Callable"
                ],
                "staker": [
                    "int",
                    "Optional[float]",
                    "bytes"
                ],
                "amount": [
                    "str",
                    "Optional[int]",
                    "int",
                    "constants.Status",
                    "Optional[dict]"
                ],
                "lock_periods": [
                    "str",
                    "int",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "Stake.prolong": {
            "name": "prolong",
            "location": 492,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "additional_periods": [
                    "str",
                    "int",
                    "Optional[List[int]]",
                    "Optional[Callable]",
                    "Optional[bool]"
                ]
            }
        },
        "WorkTracker.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "int",
                    "bool",
                    "float"
                ],
                "refresh_rate": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WorkTracker.current_period": {
            "name": "current_period",
            "location": 528,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTracker.stop": {
            "name": "stop",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTracker.start": {
            "name": "start",
            "location": 536,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "act_now": [
                    "int"
                ],
                "requirement_func": [
                    "int"
                ],
                "force": [
                    "List[Dict[str, Any]]",
                    "int",
                    "Callable[[], bool]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "WorkTracker._crash_gracefully": {
            "name": "_crash_gracefully",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WorkTracker.handle_working_errors": {
            "name": "handle_working_errors",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTracker.__check_work_requirement": {
            "name": "__check_work_requirement",
            "location": 575,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkTracker._do_work": {
            "name": "_do_work",
            "location": 587,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StakeList.__init__": {
            "name": "__init__",
            "location": 622,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "List[int]"
                ],
                "checksum_address": [
                    "str",
                    "int"
                ]
            }
        },
        "StakeList.updated": {
            "name": "updated",
            "location": 645,
            "return": [
                "int",
                "str",
                "Optional[bool]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakeList.initial_period": {
            "name": "initial_period",
            "location": 649,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakeList.terminal_period": {
            "name": "terminal_period",
            "location": 653,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakeList.refresh": {
            "name": "refresh",
            "location": 657,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakeList.__read_stakes": {
            "name": "__read_stakes",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/utils.py": {
        "epoch_to_period": {
            "name": "epoch_to_period",
            "location": 27,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "epoch": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "seconds_per_period": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "datetime_to_period": {
            "name": "datetime_to_period",
            "location": 32,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "datetime": [
                    "str"
                ],
                "seconds_per_period": [
                    "str"
                ]
            }
        },
        "period_to_epoch": {
            "name": "period_to_epoch",
            "location": 38,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "period": [],
                "seconds_per_period": []
            }
        },
        "datetime_at_period": {
            "name": "datetime_at_period",
            "location": 43,
            "return": [
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "period": [
                    "int",
                    "bool",
                    "List[int]",
                    "Optional[str]",
                    "str"
                ],
                "seconds_per_period": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[int]"
                ],
                "start_of_period": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "calculate_period_duration": {
            "name": "calculate_period_duration",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "future_time": [
                    "maya.MayaDT",
                    "float",
                    "int"
                ],
                "seconds_per_period": [
                    "int",
                    "maya.MayaDT",
                    "list",
                    "float"
                ],
                "now": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Union[bool, int]]",
                    "bool",
                    "Union[int, float, None]",
                    "float"
                ]
            }
        },
        "etherscan_url": {
            "name": "etherscan_url",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "item": [
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "network": [
                    "Optional[str]",
                    "Optional[dict]",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "is_token": [
                    "str"
                ]
            }
        },
        "prettify_eth_amount": {
            "name": "prettify_eth_amount",
            "location": 94,
            "return": [
                "float",
                "str",
                "Iterable[int]",
                "bool",
                "T"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "original_denomination": [
                    "int",
                    "decimal.Decimal",
                    "str"
                ]
            }
        },
        "get_transaction_name": {
            "name": "get_transaction_name",
            "location": 123,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "contract_function": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/__init__.py": {},
    "nucypher-master/nucypher/blockchain/eth/sol/compile.py": {
        "SolidityCompiler.default_contract_dir": {
            "name": "default_contract_dir",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "SolidityCompiler.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_dirs": [
                    "Callable[[int], float]",
                    "List[int]",
                    "IO[str]",
                    "str"
                ],
                "ignore_solidity_check": [
                    "str",
                    "bool"
                ]
            }
        },
        "SolidityCompiler.compile": {
            "name": "compile",
            "location": 75,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SolidityCompiler._compile": {
            "name": "_compile",
            "location": 111,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "self": [],
                "root_source_dir": [
                    "str"
                ],
                "other_source_dirs": [
                    "Dict[str, Dict]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/blockchain/eth/sol/__conf__.py": {},
    "nucypher-master/nucypher/blockchain/eth/sol/__init__.py": {},
    "nucypher-master/nucypher/characters/banners.py": {},
    "nucypher-master/nucypher/characters/base.py": {
        "Character.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "domains": [],
                "known_node_class": [],
                "is_me": [],
                "federated_only": [],
                "checksum_address": [],
                "network_middleware": [],
                "keyring": [],
                "keyring_root": [],
                "crypto_power": [],
                "crypto_power_ups": [],
                "provider_uri": [],
                "signer": [],
                "registry": []
            }
        },
        "Character.__eq__": {
            "name": "__eq__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Character.__hash__": {
            "name": "__hash__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.__repr__": {
            "name": "__repr__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.name": {
            "name": "name",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.stamp": {
            "name": "stamp",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.canonical_public_address": {
            "name": "canonical_public_address",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "address_bytes": []
            }
        },
        "Character.checksum_address": {
            "name": "checksum_address",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.from_config": {
            "name": "from_config",
            "location": 304,
            "return": [],
            "arguments": {
                "cls": [],
                "config": []
            }
        },
        "Character.from_public_keys": {
            "name": "from_public_keys",
            "location": 308,
            "return": [],
            "arguments": {
                "cls": [],
                "powers_and_material": [],
                "verifying_key": [],
                "encrypting_key": []
            }
        },
        "Character.store_metadata": {
            "name": "store_metadata",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "Character.encrypt_for": {
            "name": "encrypt_for",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "recipient": [],
                "plaintext": [],
                "sign": [],
                "sign_plaintext": []
            }
        },
        "Character.verify_from": {
            "name": "verify_from",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "stranger": [],
                "message_kit": [],
                "signature": [],
                "decrypt": [],
                "label": []
            }
        },
        "Character.decrypt": {
            "name": "decrypt",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "message_kit": [],
                "label": []
            }
        },
        "Character.sign": {
            "name": "sign",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Character.public_keys": {
            "name": "public_keys",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "power_up_class": []
            }
        },
        "Character._set_checksum_address": {
            "name": "_set_checksum_address",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.make_rpc_controller": {
            "name": "make_rpc_controller",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "crash_on_error": []
            }
        },
        "Character.make_cli_controller": {
            "name": "make_cli_controller",
            "location": 516,
            "return": [],
            "arguments": {
                "self": [],
                "crash_on_error": []
            }
        }
    },
    "nucypher-master/nucypher/characters/chaotic.py": {
        "Felix.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_filepath": [
                    "str",
                    "bool",
                    "int"
                ],
                "rest_host": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, list]"
                ],
                "rest_port": [
                    "str",
                    "bool",
                    "Dict[str, list]",
                    "Optional['SparkSession']"
                ],
                "client_password": [
                    "float",
                    "Dict[str, Any]"
                ],
                "crash_on_error": [
                    "str",
                    "Optional[str]"
                ],
                "distribute_ether": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "registry": []
            }
        },
        "Felix.__repr__": {
            "name": "__repr__",
            "location": 143,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Felix.make_web_app": {
            "name": "make_web_app",
            "location": 148,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "self": []
            }
        },
        "Felix.create_tables": {
            "name": "create_tables",
            "location": 266,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Felix.start": {
            "name": "start",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "bool",
                    "Optional[Callable[[], None]]",
                    "Dict[str, Any]",
                    "float"
                ],
                "port": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ],
                "web_services": [
                    "bool"
                ],
                "distribution": [
                    "bool",
                    "Callable[[models.characters.character_base.Character, models.characters.character_base.Character], None]"
                ],
                "crash_on_error": [
                    "str",
                    "int",
                    "Union[str, Iterable[str]]",
                    "bool"
                ]
            }
        },
        "Felix.start_distribution": {
            "name": "start_distribution",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "Optional[Callable[[str], bool]]",
                    "Sequence[int]",
                    "Dict[str, Callable[[], None]]",
                    "T",
                    "list"
                ]
            }
        },
        "Felix.stop_distribution": {
            "name": "stop_distribution",
            "location": 301,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Felix.__calculate_disbursement": {
            "name": "__calculate_disbursement",
            "location": 307,
            "return": [
                "float",
                "str",
                "models.characters.mods_base.SlotTypes"
            ],
            "arguments": {
                "self": [],
                "recipient": [
                    "int",
                    "float"
                ]
            }
        },
        "Felix.__transfer": {
            "name": "__transfer",
            "location": 326,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "disbursement": [
                    "str",
                    "bool"
                ],
                "recipient_address": [
                    "str"
                ]
            }
        },
        "Felix.airdrop_tokens": {
            "name": "airdrop_tokens",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Felix.__do_airdrop": {
            "name": "__do_airdrop",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Felix.make_web_app.status": {
            "name": "status",
            "location": 194,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "Felix.make_web_app.register": {
            "name": "register",
            "location": 223,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "Felix.airdrop_tokens.siphon_invalid_entries": {
            "name": "siphon_invalid_entries",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "candidate": [
                    "Dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        },
        "Felix.make_web_app.Recipient.__repr__": {
            "name": "__repr__",
            "location": 182,
            "return": [
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/characters/lawful.py": {
        "Alice.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "federated_only": [],
                "signer": [],
                "checksum_address": [],
                "client_password": [],
                "cache_password": [],
                "m": [],
                "n": [],
                "rate": [],
                "duration_periods": [],
                "timeout": [],
                "network_middleware": [],
                "controller": []
            }
        },
        "Alice.add_active_policy": {
            "name": "add_active_policy",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "active_policy": []
            }
        },
        "Alice.generate_kfrags": {
            "name": "generate_kfrags",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "bob": [],
                "label": [],
                "m": [],
                "n": []
            }
        },
        "Alice.create_policy": {
            "name": "create_policy",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "bob": [],
                "label": []
            }
        },
        "Alice.generate_policy_parameters": {
            "name": "generate_policy_parameters",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "m": [],
                "n": [],
                "duration_periods": [],
                "expiration": []
            }
        },
        "Alice.grant": {
            "name": "grant",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "bob": [],
                "label": [],
                "handpicked_ursulas": [],
                "discover_on_this_thread": [],
                "timeout": [],
                "publish_treasure_map": []
            }
        },
        "Alice.get_policy_encrypting_key_from_label": {
            "name": "get_policy_encrypting_key_from_label",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Alice.revoke": {
            "name": "revoke",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "policy": []
            }
        },
        "Alice.decrypt_message_kit": {
            "name": "decrypt_message_kit",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "message_kit": [],
                "data_source": [],
                "label": []
            }
        },
        "Alice.make_web_controller": {
            "name": "make_web_controller",
            "location": 368,
            "return": [],
            "arguments": {
                "drone_alice": [],
                "crash_on_error": []
            }
        },
        "Bob.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [],
            "arguments": {
                "self": [],
                "controller": []
            }
        },
        "Bob._pick_treasure_map": {
            "name": "_pick_treasure_map",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "treasure_map": [],
                "map_id": []
            }
        },
        "Bob.peek_at_treasure_map": {
            "name": "peek_at_treasure_map",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "treasure_map": [],
                "map_id": []
            }
        },
        "Bob.follow_treasure_map": {
            "name": "follow_treasure_map",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "treasure_map": [],
                "map_id": [],
                "block": [],
                "new_thread": [],
                "timeout": [],
                "allow_missing": []
            }
        },
        "Bob.get_treasure_map": {
            "name": "get_treasure_map",
            "location": 533,
            "return": [],
            "arguments": {
                "self": [],
                "alice_verifying_key": [],
                "label": []
            }
        },
        "Bob.make_compass_for_alice": {
            "name": "make_compass_for_alice",
            "location": 555,
            "return": [],
            "arguments": {
                "self": [],
                "alice": []
            }
        },
        "Bob.construct_policy_hrac": {
            "name": "construct_policy_hrac",
            "location": 558,
            "return": [],
            "arguments": {
                "self": [],
                "verifying_key": [],
                "label": []
            }
        },
        "Bob.construct_hrac_and_map_id": {
            "name": "construct_hrac_and_map_id",
            "location": 562,
            "return": [],
            "arguments": {
                "self": [],
                "verifying_key": [],
                "label": []
            }
        },
        "Bob.get_treasure_map_from_known_ursulas": {
            "name": "get_treasure_map_from_known_ursulas",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "network_middleware": [],
                "map_id": []
            }
        },
        "Bob.work_orders_for_capsules": {
            "name": "work_orders_for_capsules",
            "location": 598,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bob.get_reencrypted_cfrags": {
            "name": "get_reencrypted_cfrags",
            "location": 662,
            "return": [],
            "arguments": {
                "self": [],
                "work_order": [],
                "retain_cfrags": []
            }
        },
        "Bob.join_policy": {
            "name": "join_policy",
            "location": 673,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "alice_verifying_key": [],
                "node_list": [],
                "block": []
            }
        },
        "Bob.retrieve": {
            "name": "retrieve",
            "location": 679,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bob.make_web_controller": {
            "name": "make_web_controller",
            "location": 844,
            "return": [],
            "arguments": {
                "drone_bob": [],
                "crash_on_error": []
            }
        },
        "Ursula.__init__": {
            "name": "__init__",
            "location": 907,
            "return": [],
            "arguments": {
                "self": [],
                "rest_host": [],
                "rest_port": [],
                "domains": [],
                "certificate": [],
                "certificate_filepath": [],
                "db_filepath": [],
                "is_me": [],
                "interface_signature": [],
                "timestamp": [],
                "availability_check": [],
                "prune_datastore": [],
                "decentralized_identity_evidence": [],
                "checksum_address": [],
                "worker_address": [],
                "block_until_ready": [],
                "work_tracker": [],
                "start_working_now": [],
                "client_password": [],
                "abort_on_learning_error": [],
                "federated_only": [],
                "start_learning_now": [],
                "crypto_power": [],
                "tls_curve": [],
                "known_nodes": []
            }
        },
        "Ursula.__prune_arrangements": {
            "name": "__prune_arrangements",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.run": {
            "name": "run",
            "location": 1098,
            "return": [],
            "arguments": {
                "self": [],
                "emitter": [],
                "hendrix": [],
                "learning": [],
                "availability": [],
                "worker": [],
                "pruning": [],
                "interactive": [],
                "start_reactor": [],
                "prometheus_config": []
            }
        },
        "Ursula.stop": {
            "name": "stop",
            "location": 1178,
            "return": [],
            "arguments": {
                "self": [],
                "halt_reactor": []
            }
        },
        "Ursula.rest_information": {
            "name": "rest_information",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_interface": {
            "name": "rest_interface",
            "location": 1200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.get_deployer": {
            "name": "get_deployer",
            "location": 1203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_server_certificate": {
            "name": "rest_server_certificate",
            "location": 1208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.__bytes__": {
            "name": "__bytes__",
            "location": 1211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.from_rest_url": {
            "name": "from_rest_url",
            "location": 1239,
            "return": [],
            "arguments": {
                "cls": [],
                "network_middleware": [],
                "host": [],
                "port": [],
                "certificate_filepath": [],
                "federated_only": []
            }
        },
        "Ursula.from_seednode_metadata": {
            "name": "from_seednode_metadata",
            "location": 1256,
            "return": [],
            "arguments": {
                "cls": [],
                "seednode_metadata": []
            }
        },
        "Ursula.from_teacher_uri": {
            "name": "from_teacher_uri",
            "location": 1267,
            "return": [],
            "arguments": {
                "cls": [],
                "federated_only": [],
                "teacher_uri": [],
                "min_stake": [],
                "network_middleware": [],
                "registry": [],
                "retry_attempts": [],
                "retry_interval": []
            }
        },
        "Ursula.from_seed_and_stake_info": {
            "name": "from_seed_and_stake_info",
            "location": 1300,
            "return": [],
            "arguments": {
                "cls": [],
                "seed_uri": [],
                "federated_only": [],
                "minimum_stake": [],
                "registry": [],
                "network_middleware": []
            }
        },
        "Ursula.internal_splitter": {
            "name": "internal_splitter",
            "location": 1354,
            "return": [],
            "arguments": {
                "cls": [],
                "splittable": [],
                "partial": []
            }
        },
        "Ursula.from_bytes": {
            "name": "from_bytes",
            "location": 1372,
            "return": [],
            "arguments": {
                "cls": [],
                "ursula_as_bytes": [],
                "version": [],
                "registry": []
            }
        },
        "Ursula.from_processed_bytes": {
            "name": "from_processed_bytes",
            "location": 1404,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Ursula.batch_from_bytes": {
            "name": "batch_from_bytes",
            "location": 1429,
            "return": [],
            "arguments": {
                "cls": [],
                "ursulas_as_bytes": [],
                "registry": [],
                "fail_fast": []
            }
        },
        "Ursula.from_storage": {
            "name": "from_storage",
            "location": 1456,
            "return": [],
            "arguments": {
                "cls": [],
                "node_storage": [],
                "checksum_adress": [],
                "federated_only": []
            }
        },
        "Ursula.datastore": {
            "name": "datastore",
            "location": 1467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_url": {
            "name": "rest_url",
            "location": 1474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_app": {
            "name": "rest_app",
            "location": 1481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.interface_info_with_metadata": {
            "name": "interface_info_with_metadata",
            "location": 1490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.work_orders": {
            "name": "work_orders",
            "location": 1498,
            "return": [],
            "arguments": {
                "self": [],
                "bob": []
            }
        },
        "Ursula._reencrypt": {
            "name": "_reencrypt",
            "location": 1506,
            "return": [],
            "arguments": {
                "self": [],
                "kfrag": [],
                "work_order": [],
                "alice_verifying_key": []
            }
        },
        "Enrico.__init__": {
            "name": "__init__",
            "location": 1539,
            "return": [],
            "arguments": {
                "self": [],
                "policy_encrypting_key": [],
                "controller": []
            }
        },
        "Enrico.encrypt_message": {
            "name": "encrypt_message",
            "location": 1553,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Enrico.from_alice": {
            "name": "from_alice",
            "location": 1563,
            "return": [],
            "arguments": {
                "cls": [],
                "alice": [],
                "label": []
            }
        },
        "Enrico.policy_pubkey": {
            "name": "policy_pubkey",
            "location": 1574,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Enrico.make_web_controller": {
            "name": "make_web_controller",
            "location": 1579,
            "return": [],
            "arguments": {
                "drone_enrico": [],
                "crash_on_error": []
            }
        },
        "Alice.make_web_controller.public_keys": {
            "name": "public_keys",
            "location": 383,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.create_policy": {
            "name": "create_policy",
            "location": 390,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.decrypt": {
            "name": "decrypt",
            "location": 399,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.derive_policy_encrypting_key": {
            "name": "derive_policy_encrypting_key",
            "location": 407,
            "return": [],
            "arguments": {
                "label": []
            }
        },
        "Alice.make_web_controller.grant": {
            "name": "grant",
            "location": 415,
            "return": [],
            "arguments": {}
        },
        "Alice.make_web_controller.revoke": {
            "name": "revoke",
            "location": 423,
            "return": [],
            "arguments": {}
        },
        "Bob.IncorrectCFragsReceived.__init__": {
            "name": "__init__",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "evidence": []
            }
        },
        "Bob.make_web_controller.public_keys": {
            "name": "public_keys",
            "location": 861,
            "return": [],
            "arguments": {}
        },
        "Bob.make_web_controller.join_policy": {
            "name": "join_policy",
            "location": 868,
            "return": [],
            "arguments": {}
        },
        "Bob.make_web_controller.retrieve": {
            "name": "retrieve",
            "location": 877,
            "return": [],
            "arguments": {}
        },
        "Ursula.from_teacher_uri.__attempt": {
            "name": "__attempt",
            "location": 1277,
            "return": [],
            "arguments": {
                "attempt": [],
                "interval": []
            }
        },
        "Enrico.make_web_controller.encrypt_message": {
            "name": "encrypt_message",
            "location": 1596,
            "return": [],
            "arguments": {}
        }
    },
    "nucypher-master/nucypher/characters/unlawful.py": {
        "Vladimir.from_target_ursula": {
            "name": "from_target_ursula",
            "location": 45,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "Optional[bytes]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "defaultdict"
                ],
                "target_ursula": [
                    "str",
                    "int",
                    "dict",
                    "Tuple[int, int]"
                ],
                "claim_signing_key": [
                    "bool",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "attach_transacting_key": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Vladimir.attach_transacting_key": {
            "name": "attach_transacting_key",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Callable"
                ],
                "blockchain": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "Amonia.from_lawful_alice": {
            "name": "from_lawful_alice",
            "location": 110,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ],
                "alice": [
                    "dict",
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "Amonia.enact_without_tabulating_responses": {
            "name": "enact_without_tabulating_responses",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "policy": [
                    "int",
                    "bool"
                ],
                "network_middleware": [
                    "str",
                    "int",
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex"
                ]
            }
        },
        "Amonia.grant_without_paying": {
            "name": "grant_without_paying",
            "location": 127,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Amonia.circumvent_safegaurds_and_grant_without_paying": {
            "name": "circumvent_safegaurds_and_grant_without_paying",
            "location": 138,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Amonia.grant_while_paying_the_wrong_nodes": {
            "name": "grant_while_paying_the_wrong_nodes",
            "location": 147,
            "return": [
                "float",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "ursulas_to_trick_into_working_for_free": [
                    "float",
                    "int",
                    "str",
                    "raiden.utils.FeeAmount"
                ],
                "ursulas_to_pay_instead": [
                    "Union[bool, Iterable[str]]",
                    "int",
                    "bool",
                    "Union[Callable, str]"
                ]
            }
        },
        "Amonia.grant_without_paying.what_do_you_mean_you_dont_tip": {
            "name": "what_do_you_mean_you_dont_tip",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "policy": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Callable[[Mapping], T]"
                ]
            }
        },
        "Amonia.grant_while_paying_the_wrong_nodes.publish_wrong_payee_address_to_blockchain": {
            "name": "publish_wrong_payee_address_to_blockchain",
            "location": 157,
            "return": [
                "int",
                "str",
                "Union[int, float]",
                "List[int]"
            ],
            "arguments": {
                "policy": [
                    "hackathon.utils.utils.DataMessage",
                    "Exception"
                ]
            }
        }
    },
    "nucypher-master/nucypher/characters/__init__.py": {},
    "nucypher-master/nucypher/characters/control/controllers.py": {
        "CharacterControllerBase.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterControllerBase._perform_action": {
            "name": "_perform_action",
            "location": 54,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "eth.abc.BlockHeaderAPI",
                    "eth.abc.AtomicDatabaseAPI",
                    "eth.db.backends.base.BaseDB"
                ],
                "request": []
            }
        },
        "CharacterControlServer.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "logging.Logger",
                    "str",
                    "Optional[logging.Logger]"
                ],
                "interface": [
                    "str",
                    "bool",
                    "Optional[Callable[[], None]]",
                    "List[str]"
                ],
                "start_learning": [
                    "str",
                    "bool",
                    "Optional[Callable[[], None]]",
                    "List[str]"
                ],
                "crash_on_error": [
                    "str",
                    "bool",
                    "Optional[Callable[[], None]]",
                    "List[str]"
                ]
            }
        },
        "CharacterControlServer._get_interfaces": {
            "name": "_get_interfaces",
            "location": 110,
            "return": [
                "str",
                "Optional[str]",
                "IO",
                "Dict[str, type]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterControlServer.make_control_transport": {
            "name": "make_control_transport",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterControlServer.handle_request": {
            "name": "handle_request",
            "location": 124,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "bool",
                    "str",
                    "Optional[Any]"
                ],
                "control_request": [
                    "bool",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "CharacterControlServer.test_client": {
            "name": "test_client",
            "location": 128,
            "return": [
                "str",
                "Dict[str, float]",
                "Iterable[Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIController.make_control_transport": {
            "name": "make_control_transport",
            "location": 136,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIController.test_client": {
            "name": "test_client",
            "location": 139,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIController.handle_request": {
            "name": "handle_request",
            "location": 142,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str",
                    "Optional[str]",
                    "Union[str, dict]",
                    "dict"
                ],
                "request": [
                    "str",
                    "Optional[str]",
                    "Union[str, dict]",
                    "dict"
                ]
            }
        },
        "JSONRPCController.start": {
            "name": "start",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCController.test_client": {
            "name": "test_client",
            "location": 156,
            "return": [
                "app.utils.models.ModelManager",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCController.make_control_transport": {
            "name": "make_control_transport",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCController.handle_procedure_call": {
            "name": "handle_procedure_call",
            "location": 169,
            "return": [
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "control_request": []
            }
        },
        "JSONRPCController.handle_message": {
            "name": "handle_message",
            "location": 188,
            "return": [
                "bytes",
                "str",
                "int",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Any"
                ]
            }
        },
        "JSONRPCController.handle_batch": {
            "name": "handle_batch",
            "location": 201,
            "return": [
                "Dict[str, float]",
                "Dict[str, Dict[str, int]]",
                "flask.Markup",
                "list",
                "constants.ReturnCode"
            ],
            "arguments": {
                "self": [],
                "control_requests": []
            }
        },
        "JSONRPCController.handle_request": {
            "name": "handle_request",
            "location": 213,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "control_request": [
                    "Dict[str, Any]",
                    "aiohttp.web.Response",
                    "requests.Response",
                    "flask.Response",
                    "str"
                ]
            }
        },
        "JSONRPCController.call_interface": {
            "name": "call_interface",
            "location": 237,
            "return": [
                "Response",
                "flask.Response",
                "\"Flow\"",
                "Optional[str]",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "dict",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "request": [
                    "dict",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "request_id": [
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "str",
                    "Mapping"
                ]
            }
        },
        "WebController.test_client": {
            "name": "test_client",
            "location": 261,
            "return": [
                "app.utils.models.ModelManager",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebController.make_control_transport": {
            "name": "make_control_transport",
            "location": 269,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebController.start": {
            "name": "start",
            "location": 277,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "http_port": [
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "dry_run": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "WebController.__call__": {
            "name": "__call__",
            "location": 287,
            "return": [
                "dict",
                "Dict[str, str]",
                "Mapping[str, Union[int, slice]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebController.handle_request": {
            "name": "handle_request",
            "location": 290,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str"
                ],
                "control_request": [
                    "str",
                    "Dict[str, Any]",
                    "Type['Declared']",
                    "dict"
                ]
            }
        },
        "CharacterControlServer.__init__.set_method": {
            "name": "set_method",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "CharacterControlServer.__init__.set_method.wrapper": {
            "name": "wrapper",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "nucypher-master/nucypher/characters/control/emitters.py": {
        "null_stream": {
            "name": "null_stream",
            "location": 30,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "StdoutEmitter.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "int",
                    "bool",
                    "float"
                ],
                "verbosity": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StdoutEmitter.clear": {
            "name": "clear",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StdoutEmitter.message": {
            "name": "message",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "int"
                ],
                "color": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "str"
                ],
                "bold": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "str"
                ],
                "verbosity": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "str"
                ]
            }
        },
        "StdoutEmitter.echo": {
            "name": "echo",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes"
                ],
                "color": [
                    "bytes"
                ],
                "bold": [
                    "bytes"
                ],
                "nl": [
                    "bytes"
                ],
                "verbosity": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StdoutEmitter.banner": {
            "name": "banner",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "banner": [
                    "str",
                    "bool"
                ]
            }
        },
        "StdoutEmitter.ipc": {
            "name": "ipc",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Dict[str, str]"
                ],
                "request_id": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "duration": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ]
            }
        },
        "StdoutEmitter.error": {
            "name": "error",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int",
                    "str",
                    "Exception",
                    "bytes"
                ]
            }
        },
        "StdoutEmitter.get_stream": {
            "name": "get_stream",
            "location": 91,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "str",
                    "bool"
                ]
            }
        },
        "JSONRPCStdoutEmitter.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCStdoutEmitter.assemble_response": {
            "name": "assemble_response",
            "location": 132,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "int"
            ],
            "arguments": {
                "response": [
                    "int",
                    "Optional[int]",
                    "MutableMapping",
                    "dict",
                    "str",
                    "Optional[dict]"
                ],
                "message_id": [
                    "int",
                    "Optional[int]",
                    "MutableMapping",
                    "dict",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "JSONRPCStdoutEmitter.assemble_error": {
            "name": "assemble_error",
            "location": 139,
            "return": [
                "bytes",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "int",
                    "str",
                    "dict",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "code": [
                    "bytes",
                    "int",
                    "str",
                    "dict",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "data": [
                    "bytes",
                    "int",
                    "str",
                    "dict",
                    "List[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "JSONRPCStdoutEmitter.__serialize": {
            "name": "__serialize",
            "location": 147,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "str"
                ],
                "delimiter": [
                    "str",
                    "bytes",
                    "BinaryIO"
                ],
                "as_bytes": [
                    "int",
                    "bool",
                    "bytes",
                    "bytearray",
                    "str"
                ]
            }
        },
        "JSONRPCStdoutEmitter.__write": {
            "name": "__write",
            "location": 163,
            "return": [
                "str",
                "float",
                "bool",
                "Iterator[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "JSONRPCStdoutEmitter.clear": {
            "name": "clear",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCStdoutEmitter.message": {
            "name": "message",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "JSONRPCStdoutEmitter.echo": {
            "name": "echo",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCStdoutEmitter.banner": {
            "name": "banner",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "banner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "JSONRPCStdoutEmitter.ipc": {
            "name": "ipc",
            "location": 184,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "int",
                    "dict"
                ],
                "request_id": [
                    "str",
                    "dict",
                    "bytes",
                    "int"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "JSONRPCStdoutEmitter.error": {
            "name": "error",
            "location": 195,
            "return": [
                "Sequence[int]",
                "float",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "JSONRPCStdoutEmitter.get_stream": {
            "name": "get_stream",
            "location": 212,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebEmitter.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sink": [
                    "int",
                    "Union[float, Tuple[float, float]]",
                    "Callable"
                ],
                "crash_on_error": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "WebEmitter.assemble_response": {
            "name": "assemble_response",
            "location": 238,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "int"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "WebEmitter.exception": {
            "name": "exception",
            "location": 243,
            "return": [
                "Iterable[str]",
                "IO[str]",
                "str",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "drone_character": [
                    "str",
                    "int"
                ],
                "e": [
                    "Optional[str]",
                    "int",
                    "str",
                    "list"
                ],
                "error_message": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "log_level": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[bool]",
                    "int",
                    "Dict[str, Any]"
                ],
                "response_code": [
                    "Optional[str]",
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "WebEmitter.respond": {
            "name": "respond",
            "location": 256,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "drone_character": [
                    "scrapy.http.Response",
                    "phial.wrappers.Response"
                ],
                "response": [
                    "scrapy.http.Response",
                    "phial.wrappers.Response"
                ]
            }
        },
        "WebEmitter.get_stream": {
            "name": "get_stream",
            "location": 264,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/characters/control/interfaces.py": {
        "attach_schema": {
            "name": "attach_schema",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "attach_schema.callable": {
            "name": "callable",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "CharacterPublicInterface.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "character": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CharacterPublicInterface.connect_cli": {
            "name": "connect_cli",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "action": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "AliceInterface.create_policy": {
            "name": "create_policy",
            "location": 69,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "bob_encrypting_key": [
                    "str",
                    "bool",
                    "bytes",
                    "dict",
                    "Union[str, bytes]",
                    "int"
                ],
                "bob_verifying_key": [
                    "str",
                    "bool",
                    "bytes",
                    "dict",
                    "Union[str, bytes]",
                    "int"
                ],
                "label": [
                    "str",
                    "int"
                ],
                "m": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "n": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "expiration": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AliceInterface.derive_policy_encrypting_key": {
            "name": "derive_policy_encrypting_key",
            "location": 95,
            "return": [
                "bytes",
                "int",
                "dict",
                "Optional[str]",
                "Dict[str, Union[str, int]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "Callable"
                ]
            }
        },
        "AliceInterface.grant": {
            "name": "grant",
            "location": 101,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bob_encrypting_key": [
                    "str",
                    "bool",
                    "dict",
                    "Union[str, bytes]",
                    "int",
                    "bytes"
                ],
                "bob_verifying_key": [
                    "str",
                    "bool",
                    "dict",
                    "Union[str, bytes]",
                    "int",
                    "bytes"
                ],
                "label": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "m": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "n": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "expiration": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "value": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "rate": [
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "AliceInterface.revoke": {
            "name": "revoke",
            "location": 131,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bytes",
                    "str",
                    "Callable",
                    "crypto.PointG2",
                    "raiden.utils.Callable"
                ],
                "bob_verifying_key": [
                    "bytes",
                    "str",
                    "Callable",
                    "crypto.PointG2",
                    "raiden.utils.Callable"
                ]
            }
        },
        "AliceInterface.decrypt": {
            "name": "decrypt",
            "location": 150,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Union[bytes, str]",
                    "bool",
                    "Optional[str]"
                ],
                "message_kit": [
                    "bytes",
                    "int",
                    "raiden.utils.PrivateKey"
                ]
            }
        },
        "AliceInterface.public_keys": {
            "name": "public_keys",
            "location": 177,
            "return": [
                "int",
                "dict",
                "bytes",
                "Dict[str, float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobInterface.join_policy": {
            "name": "join_policy",
            "location": 189,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bytes",
                    "str"
                ],
                "alice_verifying_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "BobInterface.retrieve": {
            "name": "retrieve",
            "location": 198,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "Optional[bytes]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bytes",
                    "Optional[bytes]",
                    "str",
                    "raiden_contracts.utils.type_aliases.PrivateKey",
                    "List[str]"
                ],
                "policy_encrypting_key": [
                    "bytes",
                    "int",
                    "str",
                    "crypto.PointG1"
                ],
                "alice_verifying_key": [
                    "bytes",
                    "int",
                    "crypto.PointG1"
                ],
                "message_kit": [
                    "bytes"
                ],
                "treasure_map": [
                    "bytes",
                    "raiden.utils.BalanceHash",
                    "Union[bytes, str, None]",
                    "Union[bytes, str]"
                ]
            }
        },
        "BobInterface.public_keys": {
            "name": "public_keys",
            "location": 231,
            "return": [
                "int",
                "dict",
                "bytes",
                "Dict[str, float]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnricoInterface.encrypt_message": {
            "name": "encrypt_message",
            "location": 244,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "attach_schema.callable.wrapped": {
            "name": "wrapped",
            "location": 34,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "CharacterPublicInterface.connect_cli.callable": {
            "name": "callable",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "CharacterPublicInterface.connect_cli.callable.wrapped": {
            "name": "wrapped",
            "location": 58,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, int]",
                "dict",
                "List[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/nucypher/characters/control/__init__.py": {},
    "nucypher-master/nucypher/characters/control/specifications/alice.py": {
        "PolicyBaseSchema.check_valid_n_and_m": {
            "name": "check_valid_n_and_m",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "PolicyBaseSchema.check_rate_or_value_not_both": {
            "name": "check_rate_or_value_not_both",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/base.py": {
        "BaseSchema.handle_error": {
            "name": "handle_error",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error": [
                    "int",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Optional[int]"
                ],
                "data": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "many": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/bob.py": {},
    "nucypher-master/nucypher/characters/control/specifications/enrico.py": {},
    "nucypher-master/nucypher/characters/control/specifications/exceptions.py": {},
    "nucypher-master/nucypher/characters/control/specifications/__init__.py": {},
    "nucypher-master/nucypher/characters/control/specifications/fields/base.py": {
        "BaseField.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/fields/cleartext.py": {
        "Cleartext._serialize": {
            "name": "_serialize",
            "location": 27,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "Union[str, Dict[str, Any]]",
                    "IO[str]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "Cleartext._deserialize": {
            "name": "_deserialize",
            "location": 30,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "memoryview",
                    "int",
                    "Union[str, int]",
                    "Optional[Callable]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/fields/datetime.py": {
        "DateTime._serialize": {
            "name": "_serialize",
            "location": 26,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "DateTime._deserialize": {
            "name": "_deserialize",
            "location": 29,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "OrderedDict",
                    "T",
                    "dict",
                    "List[str]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/fields/key.py": {
        "Key._serialize": {
            "name": "_serialize",
            "location": 27,
            "return": [
                "str",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Union[int, float, str]",
                    "T",
                    "str"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Key._deserialize": {
            "name": "_deserialize",
            "location": 30,
            "return": [
                "int",
                "str",
                "Union[int, Tuple[int, ...]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "dict",
                    "Dict[str, int]",
                    "Union[str, bytes]",
                    "Iterable[bytes]",
                    "str"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "Key._validate": {
            "name": "_validate",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/fields/label.py": {
        "Label._serialize": {
            "name": "_serialize",
            "location": 25,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Callable]",
                    "Tuple[str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Label._deserialize": {
            "name": "_deserialize",
            "location": 28,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "dict",
                    "int"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/fields/messagekit.py": {
        "UmbralMessageKit._serialize": {
            "name": "_serialize",
            "location": 29,
            "return": [
                "str",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "nucypher.crypto.kits.UmbralMessageKit",
                    "bytes",
                    "str",
                    "int",
                    "bool"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "UmbralMessageKit._deserialize": {
            "name": "_deserialize",
            "location": 32,
            "return": [
                "int",
                "Type[T]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "Dict[str, int]",
                    "Iterable[bytes]",
                    "Union[str, bytes]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "UmbralMessageKit._validate": {
            "name": "_validate",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/fields/misc.py": {
        "PositiveInteger._validate": {
            "name": "_validate",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "ics.types.ContextDict",
                    "ics.types.ExtraParams",
                    "ics.types.DatetimeLike",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "click.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/fields/treasuremap.py": {
        "TreasureMap._serialize": {
            "name": "_serialize",
            "location": 32,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "umbral.signing.Signature",
                    "bytes",
                    "float",
                    "int",
                    "str",
                    "Union[bytes, str]"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "TreasureMap._deserialize": {
            "name": "_deserialize",
            "location": 35,
            "return": [
                "int",
                "bytes",
                "Union[bytes, bytearray]",
                "bool",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Union[str, bytes]"
                ],
                "attr": [
                    "dict",
                    "str"
                ],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "TreasureMap._validate": {
            "name": "_validate",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/characters/control/specifications/fields/__init__.py": {},
    "nucypher-master/nucypher/cli/config.py": {
        "GroupGeneralConfig.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "json_ipc": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "verbose": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "quiet": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "no_logs": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "console_logs": [
                    "bool"
                ],
                "file_logs": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "sentry_logs": [
                    "bool",
                    "Optional[str]",
                    "Optional[dict]",
                    "Optional[Type[Any]]",
                    "Optional[int]"
                ],
                "log_level": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Optional[bool]",
                    "List[str]"
                ],
                "debug": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/literature.py": {},
    "nucypher-master/nucypher/cli/main.py": {
        "nucypher_cli": {
            "name": "nucypher_cli",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/nucypher/cli/options.py": {
        "option_controller_port": {
            "name": "option_controller_port",
            "location": 66,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "default": [
                    "str",
                    "List[List[int]]",
                    "Container[str]",
                    "Callable",
                    "Type[eth.abc.ChainAPI]"
                ]
            }
        },
        "option_discovery_port": {
            "name": "option_discovery_port",
            "location": 74,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "default": [
                    "str",
                    "List[List[int]]",
                    "Container[str]",
                    "Callable",
                    "Type[eth.abc.ChainAPI]"
                ]
            }
        },
        "option_label": {
            "name": "option_label",
            "location": 82,
            "return": [
                "str",
                "float",
                "Callable",
                "bytes",
                "Dict[str, Dict[str, Any]]",
                "Optional[Any]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item"
            ],
            "arguments": {
                "required": [
                    "bool",
                    "slice",
                    "str"
                ]
            }
        },
        "option_message_kit": {
            "name": "option_message_kit",
            "location": 90,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "required": [
                    "bool",
                    "str"
                ]
            }
        },
        "option_network": {
            "name": "option_network",
            "location": 98,
            "return": [
                "str",
                "int",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "required": [
                    "int",
                    "bool",
                    "str"
                ],
                "default": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "option_policy_encrypting_key": {
            "name": "option_policy_encrypting_key",
            "location": 107,
            "return": [
                "Union[Dict, List]",
                "int",
                "Dict[str, cmk.gui.plugins.views.utils.Painter]",
                "str"
            ],
            "arguments": {
                "required": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.token.Stake"
                ]
            }
        },
        "option_provider_uri": {
            "name": "option_provider_uri",
            "location": 115,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "default": [
                    "bool",
                    "float",
                    "List[List[int]]"
                ],
                "required": [
                    "bool",
                    "float",
                    "List[List[int]]"
                ]
            }
        },
        "group_options": {
            "name": "group_options",
            "location": 125,
            "return": [
                "int",
                "dict",
                "Optional[BaseException]",
                "Tuple[int, int, int, int]",
                "mypy.types.Type"
            ],
            "arguments": {
                "option_class": [
                    "List[dict]",
                    "Callable",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "bool",
                    "travelfootprininsta.types.FeedItem",
                    "str",
                    "Union[Callable, Type]"
                ]
            }
        },
        "wrap_option": {
            "name": "wrap_option",
            "location": 159,
            "return": [
                "int",
                "dict",
                "Optional[BaseException]",
                "Tuple[int, int, int, int]",
                "mypy.types.Type"
            ],
            "arguments": {
                "handler": [
                    "bool",
                    "str",
                    "Exception"
                ]
            }
        },
        "process_middleware": {
            "name": "process_middleware",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_networking": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Container[str]]",
                    "bytes"
                ]
            }
        },
        "group_options._decorator": {
            "name": "_decorator",
            "location": 135,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "wrap_option._decorator": {
            "name": "_decorator",
            "location": 166,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "group_options._decorator.wrapper": {
            "name": "wrapper",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "wrap_option._decorator.wrapper": {
            "name": "wrapper",
            "location": 169,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "bool",
                "types.Resolver",
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/nucypher/cli/processes.py": {
        "get_geth_provider_process": {
            "name": "get_geth_provider_process",
            "location": 237,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "start_now": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "UrsulaCommandProtocol.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "Iterable[int]",
                    "Callable[[bytes], None]",
                    "int"
                ],
                "emitter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UrsulaCommandProtocol.commands": {
            "name": "commands",
            "location": 75,
            "return": [
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintHelp": {
            "name": "paintHelp",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintKnownNodes": {
            "name": "paintKnownNodes",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintStakes": {
            "name": "paintStakes",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintStatus": {
            "name": "paintStatus",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintFleetState": {
            "name": "paintFleetState",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.connectionMade": {
            "name": "connectionMade",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.connectionLost": {
            "name": "connectionLost",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "nucypher.blockchain.eth.multisig.Proposal",
                    "BaseException",
                    "Optional[str]"
                ]
            }
        },
        "UrsulaCommandProtocol.lineReceived": {
            "name": "lineReceived",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "UrsulaCommandProtocol.cycle_teacher": {
            "name": "cycle_teacher",
            "location": 153,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.start_learning": {
            "name": "start_learning",
            "location": 159,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.stop_learning": {
            "name": "stop_learning",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.commit_to_next_period": {
            "name": "commit_to_next_period",
            "location": 171,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.stop": {
            "name": "stop",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCLineReceiver.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rpc_controller": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "capture_output": [
                    "str",
                    "bool",
                    "float",
                    "tuple",
                    "IO[str]",
                    "Tuple[int]"
                ]
            }
        },
        "JSONRPCLineReceiver.captured_output": {
            "name": "captured_output",
            "location": 208,
            "return": [
                "List[int]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCLineReceiver.connectionMade": {
            "name": "connectionMade",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONRPCLineReceiver.connectionLost": {
            "name": "connectionLost",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "JSONRPCLineReceiver.rawDataReceived": {
            "name": "rawDataReceived",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "JSONRPCLineReceiver.lineReceived": {
            "name": "lineReceived",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/types.py": {
        "ChecksumAddress.convert": {
            "name": "convert",
            "location": 30,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "type"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        },
        "IPv4Address.convert": {
            "name": "convert",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        },
        "DecimalType.convert": {
            "name": "convert",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        },
        "DecimalRange.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "min": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "max": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "clamp": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "DecimalRange.convert": {
            "name": "convert",
            "location": 69,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "param": [
                    "str"
                ],
                "ctx": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/utils.py": {
        "setup_emitter": {
            "name": "setup_emitter",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "general_config": [
                    "Optional[List[Any]]",
                    "dict",
                    "cmk.base.config.HostConfig",
                    "str",
                    "Optional[int]"
                ],
                "banner": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ]
            }
        },
        "make_cli_character": {
            "name": "make_cli_character",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "character_config": [
                    "nucypher.config.characters.UrsulaConfiguration",
                    "bool",
                    "nucypher.blockchain.eth.interfaces.BlockchainInterface"
                ],
                "emitter": [
                    "nucypher.config.characters.UrsulaConfiguration",
                    "bool",
                    "nucypher.blockchain.eth.interfaces.BlockchainInterface"
                ],
                "unlock_keyring": [
                    "bool"
                ],
                "teacher_uri": [
                    "bool",
                    "str",
                    "float"
                ],
                "min_stake": [
                    "bool",
                    "str",
                    "float"
                ],
                "load_preferred_teachers": [
                    "bool"
                ]
            }
        },
        "establish_deployer_registry": {
            "name": "establish_deployer_registry",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[float]"
                ],
                "registry_infile": [
                    "Mapping[str, Tuple[float, float, float]]",
                    "bytes",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "registry_outfile": [
                    "float",
                    "bool",
                    "Dict[str, Any]",
                    "Counter",
                    "Tuple[int, int]",
                    "int"
                ],
                "use_existing_registry": [
                    "bool",
                    "str"
                ],
                "download_registry": [
                    "bool",
                    "str"
                ],
                "dev": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_registry": {
            "name": "get_registry",
            "location": 146,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "network": [
                    "str",
                    "bool",
                    "pricemonitor.config.Coin"
                ],
                "registry_filepath": [
                    "str",
                    "bool",
                    "pricemonitor.config.Coin"
                ]
            }
        },
        "connect_to_blockchain": {
            "name": "connect_to_blockchain",
            "location": 154,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "bool",
                    "float",
                    "str"
                ],
                "provider_uri": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "eth.HeaderParams"
                ],
                "light": [
                    "bool",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str"
                ]
            }
        },
        "initialize_deployer_interface": {
            "name": "initialize_deployer_interface",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "Optional[bool]",
                    "int",
                    "dict"
                ],
                "poa": [
                    "int",
                    "Callable",
                    "str"
                ],
                "provider_uri": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ignore_solidity_check": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gas_strategy": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_env_bool": {
            "name": "get_env_bool",
            "location": 196,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "var_name": [
                    "str"
                ],
                "default": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "ensure_config_root": {
            "name": "ensure_config_root",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "config_root": [
                    "str"
                ]
            }
        },
        "deployer_pre_launch_warnings": {
            "name": "deployer_pre_launch_warnings",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "Optional[str]"
                ],
                "etherscan": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "hw_wallet": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/__init__.py": {},
    "nucypher-master/nucypher/cli/actions/auth.py": {
        "get_password_from_prompt": {
            "name": "get_password_from_prompt",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "prompt": [
                    "str"
                ],
                "envvar": [
                    "str"
                ],
                "confirm": [
                    "str"
                ]
            }
        },
        "get_client_password": {
            "name": "get_client_password",
            "location": 48,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "checksum_address": [
                    "str"
                ],
                "envvar": [
                    "str"
                ],
                "confirm": [
                    "str"
                ]
            }
        },
        "get_nucypher_password": {
            "name": "get_nucypher_password",
            "location": 56,
            "return": [
                "str",
                "bool",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "confirm": [
                    "str",
                    "dict",
                    "int"
                ],
                "envvar": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "unlock_nucypher_keyring": {
            "name": "unlock_nucypher_keyring",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "emitter": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "character_configuration": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/actions/configure.py": {
        "forget": {
            "name": "forget",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ],
                "configuration": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_or_update_configuration": {
            "name": "get_or_update_configuration",
            "location": 46,
            "return": [
                "bool",
                "cerise.config.Config",
                "dict"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "Optional[str]"
                ],
                "filepath": [
                    "Optional[Dict[str, bytes]]",
                    "str"
                ],
                "config_class": [
                    "Optional[Dict[str, bytes]]",
                    "str"
                ],
                "updates": [
                    "Optional[str]",
                    "Optional[dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "destroy_configuration": {
            "name": "destroy_configuration",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "character_config": [
                    "dict",
                    "Dict[str, Any]",
                    "config.Config"
                ],
                "force": [
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "handle_missing_configuration_file": {
            "name": "handle_missing_configuration_file",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "character_config_class": [
                    "str",
                    "kedro.config.ConfigLoader",
                    "bool",
                    "Type['Model']"
                ],
                "init_command_hint": [
                    "str",
                    "kedro.config.ConfigLoader",
                    "Optional[Dict]"
                ],
                "config_file": [
                    "str",
                    "bool",
                    "Type['Model']"
                ]
            }
        },
        "handle_invalid_configuration_file": {
            "name": "handle_invalid_configuration_file",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "Optional[str]",
                    "zaimcsvconverter.config.SFCardViewerConfig",
                    "_vendor.traitlets.config.Config",
                    "str"
                ],
                "config_class": [
                    "str",
                    "baseplate.lib.config.RawConfig",
                    "Optional[str]"
                ],
                "filepath": [
                    "str",
                    "Dict[str, str]",
                    "cmk.base.config.HostConfig",
                    "dict"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/actions/confirm.py": {
        "confirm_deployment": {
            "name": "confirm_deployment",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str"
                ],
                "deployer_interface": [
                    "nucypher.blockchain.eth.interfaces.BlockchainDeployerInterface",
                    "Dict[str, str]",
                    "dict",
                    "dss.config.Replica",
                    "int"
                ]
            }
        },
        "confirm_enable_restaking_lock": {
            "name": "confirm_enable_restaking_lock",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "int",
                    "str",
                    "dict"
                ],
                "staking_address": [
                    "int",
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter"
                ],
                "release_period": [
                    "int",
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter"
                ]
            }
        },
        "confirm_enable_restaking": {
            "name": "confirm_enable_restaking",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str",
                    "bytes",
                    "dict"
                ],
                "staking_address": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "confirm_enable_winding_down": {
            "name": "confirm_enable_winding_down",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ],
                "staking_address": [
                    "str"
                ]
            }
        },
        "confirm_staged_stake": {
            "name": "confirm_staged_stake",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "staker_address": [
                    "int",
                    "str",
                    "nucypher.blockchain.eth.token.NU",
                    "Union[str, bytes]",
                    "float"
                ],
                "value": [
                    "int",
                    "str",
                    "nucypher.blockchain.eth.token.NU",
                    "Union[str, bytes]",
                    "float"
                ],
                "lock_periods": [
                    "int",
                    "str",
                    "nucypher.blockchain.eth.token.NU",
                    "Union[str, bytes]",
                    "float"
                ]
            }
        },
        "confirm_large_stake": {
            "name": "confirm_large_stake",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "nucypher.blockchain.eth.token.NU",
                    "int",
                    "str",
                    "bool"
                ],
                "lock_periods": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "confirm_destroy_configuration": {
            "name": "confirm_destroy_configuration",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "config.Config",
                    "nucypher.config.node.CharacterConfiguration",
                    "Dict[str, Any]",
                    "app.config.HealthCheckConfig"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/actions/select.py": {
        "select_stake": {
            "name": "select_stake",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "stakeholder": [
                    "str",
                    "Optional[str]"
                ],
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "dict",
                    "int",
                    "Optional[int]",
                    "eth.abc.ChainDatabaseAPI",
                    "bool"
                ],
                "divisible": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "staker_address": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "select_client_account": {
            "name": "select_client_account",
            "location": 87,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "emitter": [
                    "web3.Web3",
                    "bool"
                ],
                "provider_uri": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ],
                "signer": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ],
                "signer_uri": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ],
                "wallet": [
                    "int",
                    "bool",
                    "str",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]"
                ],
                "prompt": [
                    "Optional[str]"
                ],
                "default": [
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "registry": [
                    "Union[float, int]",
                    "bool",
                    "Optional[float]",
                    "int",
                    "tuple",
                    "Dict[str, web3.contracContract]"
                ],
                "show_eth_balance": [
                    "bool",
                    "int"
                ],
                "show_nu_balance": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ],
                "show_staking": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ],
                "network": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ],
                "poa": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "int"
                ]
            }
        },
        "select_client_account_for_staking": {
            "name": "select_client_account_for_staking",
            "location": 178,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "int",
                    "str"
                ],
                "stakeholder": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "staking_address": [
                    "int",
                    "solo.config.app.Config"
                ],
                "individual_allocation": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "force": [
                    "bool",
                    "str",
                    "list",
                    "IO[str]"
                ]
            }
        },
        "select_network": {
            "name": "select_network",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "Optional[int]",
                    "Dict[int, dict]"
                ]
            }
        },
        "select_config_file": {
            "name": "select_config_file",
            "location": 224,
            "return": [
                "str"
            ],
            "arguments": {
                "emitter": [
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "str",
                    "Union[str, bytes, IO[bytes]]",
                    "Union[str, bytes]"
                ],
                "config_class": [
                    "str",
                    "int"
                ],
                "config_root": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "checksum_address": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/actions/__init__.py": {},
    "nucypher-master/nucypher/cli/commands/alice.py": {
        "alice": {
            "name": "alice",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "neuromation.api.config._AuthConfig",
                    "baseplate.lib.config.RawConfig",
                    "cmk.utils.type_defs.HostName"
                ],
                "full_config_options": [
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "sphinx.config.Config",
                    "Dict[str, Dict[str, str]]",
                    "List[str]",
                    "Optional[str]"
                ],
                "config_root": [
                    "Dict[str, Any]",
                    "str",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "Dict[str, str]"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "MutableMapping[str, str]",
                    "List[Dict]",
                    "int",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "baseplate.lib.config.RawConfig"
                ],
                "full_config_options": [
                    "str",
                    "baseplate.lib.config.RawConfig"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "int",
                    "List[Dict]"
                ],
                "config_options": [
                    "bool",
                    "str"
                ],
                "config_file": [
                    "bool",
                    "str"
                ],
                "force": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 360,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "cerise.config.Config",
                    "dict"
                ],
                "character_options": [
                    "str"
                ],
                "config_file": [
                    "str"
                ],
                "controller_port": [
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict",
                    "str",
                    "Callable[[str], None]"
                ],
                "dry_run": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[int]"
                ]
            }
        },
        "public_keys": {
            "name": "public_keys",
            "location": 396,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "general_config": [
                    "Callable",
                    "Dict[str, Any]"
                ],
                "character_options": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "bool",
                    "int"
                ],
                "config_file": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "bool",
                    "int"
                ]
            }
        },
        "derive_policy_pubkey": {
            "name": "derive_policy_pubkey",
            "location": 409,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "general_config": [
                    "Callable",
                    "config.ConfigFile",
                    "Dict[str, Any]"
                ],
                "label": [
                    "Dict[str, Any]",
                    "dict",
                    "apistar.types.WSGIEnviron",
                    "Dict[str, Dict[str, str]]"
                ],
                "character_options": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "virgene.config.Config"
                ],
                "config_file": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "virgene.config.Config"
                ]
            }
        },
        "grant": {
            "name": "grant",
            "location": 421,
            "return": [
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool"
                ],
                "bob_encrypting_key": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "bob_verifying_key": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "label": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "types.TracebackType"
                ],
                "rate": [
                    "bool"
                ],
                "expiration": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "m": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "n": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "character_options": [
                    "str"
                ],
                "config_file": [
                    "str"
                ]
            }
        },
        "revoke": {
            "name": "revoke",
            "location": 470,
            "return": [
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool"
                ],
                "bob_verifying_key": [
                    "str",
                    "bool"
                ],
                "label": [
                    "str",
                    "bool"
                ],
                "character_options": [
                    "str"
                ],
                "config_file": [
                    "str"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 483,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "general_config": [
                    "Callable",
                    "config.ConfigFile",
                    "opentrons.types.Point"
                ],
                "label": [
                    "str",
                    "IO",
                    "Dict[str, str]",
                    "neuromation.api.config._AuthConfig"
                ],
                "message_kit": [
                    "str",
                    "IO",
                    "Dict[str, str]",
                    "neuromation.api.config._AuthConfig"
                ],
                "character_options": [
                    "str",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "AliceConfigOptions.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dev": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "network": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "AsyncGenerator",
                    "List[str]",
                    "Set[starfish.core.types.Axes]",
                    "cmk.utils.type_defs.HostName"
                ],
                "provider_uri": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "geth": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "federated_only": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "discovery_port": [
                    "int",
                    "str",
                    "bool"
                ],
                "pay_with": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "registry_filepath": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "middleware": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "gas_strategy": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "signer_uri": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "AliceConfigOptions.create_config": {
            "name": "create_config",
            "location": 119,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AliceFullConfigOptions.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "Dict[str, int]",
                    "int",
                    "float",
                    "str"
                ],
                "poa": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "light": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "m": [
                    "int",
                    "float"
                ],
                "n": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "duration_periods": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "AliceFullConfigOptions.generate_config": {
            "name": "generate_config",
            "location": 190,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "bool"
                ],
                "config_root": [
                    "str"
                ]
            }
        },
        "AliceFullConfigOptions.get_updates": {
            "name": "get_updates",
            "location": 225,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AliceCharacterOptions.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "hw_wallet": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "teacher_uri": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "min_stake": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ]
            }
        },
        "AliceCharacterOptions.create_character": {
            "name": "create_character",
            "location": 264,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Tuple[int, int]",
                    "raiden.utils.Address",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "bool"
                ],
                "json_ipc": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "load_seednodes": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/bob.py": {
        "bob": {
            "name": "bob",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "neuromation.api.config._AuthConfig",
                    "baseplate.lib.config.RawConfig",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial"
                ],
                "config_options": [
                    "str",
                    "NamedTuple"
                ],
                "config_root": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Optional[Dict]",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "Dict[str, str]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 214,
            "return": [],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "bool",
                    "List[str]",
                    "Optional[dict]"
                ],
                "character_options": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "config_file": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "controller_port": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[int]"
                ],
                "dry_run": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Sequence[int]"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "MutableMapping[str, str]",
                    "int",
                    "Optional[str]"
                ],
                "config_options": [
                    "str",
                    "baseplate.lib.config.RawConfig",
                    "Optional[str]",
                    "neuromation.api.config._AuthConfig"
                ],
                "config_file": [
                    "str",
                    "baseplate.lib.config.RawConfig"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "int",
                    "List[Dict]"
                ],
                "config_options": [
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "NamedTuple",
                    "str"
                ],
                "config_file": [
                    "bool",
                    "str"
                ],
                "force": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "public_keys": {
            "name": "public_keys",
            "location": 276,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "general_config": [
                    "int"
                ],
                "character_options": [
                    "str",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "dict"
                ]
            }
        },
        "retrieve": {
            "name": "retrieve",
            "location": 289,
            "return": [
                "int",
                "Optional[str]",
                "List[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "character_options": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "TextIO",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ],
                "config_file": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "TextIO",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ],
                "label": [
                    "bytes",
                    "str",
                    "float"
                ],
                "policy_encrypting_key": [
                    "bytes",
                    "str",
                    "float"
                ],
                "alice_verifying_key": [
                    "bytes",
                    "str",
                    "float"
                ],
                "message_kit": [
                    "bytes",
                    "str",
                    "float"
                ]
            }
        },
        "BobConfigOptions.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_uri": [
                    "bool",
                    "float",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "network": [
                    "Optional[str]",
                    "str"
                ],
                "registry_filepath": [
                    "bool",
                    "float",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "checksum_address": [
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "int",
                    "Optional[float]",
                    "Tuple[int]",
                    "bool",
                    "str"
                ],
                "discovery_port": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "list",
                    "float"
                ],
                "dev": [
                    "bool",
                    "float",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "middleware": [
                    "bool",
                    "float",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "federated_only": [
                    "bool",
                    "float",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "gas_strategy": [
                    "bool",
                    "float",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "signer_uri": [
                    "bool",
                    "float",
                    "int",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "BobConfigOptions.create_config": {
            "name": "create_config",
            "location": 85,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter"
                ],
                "config_file": [
                    "str"
                ]
            }
        },
        "BobConfigOptions.generate_config": {
            "name": "generate_config",
            "location": 114,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "bool",
                    "BinaryIO"
                ],
                "config_root": [
                    "str",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        },
        "BobConfigOptions.get_updates": {
            "name": "get_updates",
            "location": 134,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BobCharacterOptions.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "teacher_uri": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "min_stake": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ]
            }
        },
        "BobCharacterOptions.create_character": {
            "name": "create_character",
            "location": 172,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Dict[str, str]"
                ],
                "config_file": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/deploy.py": {
        "deploy": {
            "name": "deploy",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "download_registry": {
            "name": "download_registry",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "config_root": [
                    "str"
                ],
                "registry_outfile": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "network": [
                    "Dict[str, str]",
                    "str"
                ],
                "force": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "inspect": {
            "name": "inspect",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "provider_uri": [],
                "config_root": [
                    "neuromation.cli.rooRoot"
                ],
                "registry_infile": [
                    "Dict[str, Any]",
                    "foolbox.types.BoundsInput"
                ],
                "deployer_address": [
                    "Dict[str, Any]",
                    "str",
                    "int"
                ],
                "poa": [],
                "ignore_solidity_check": []
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "Dict[str, bool]",
                    "Optional[Callable]",
                    "str",
                    "float"
                ],
                "actor_options": [
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "retarget": [
                    "bool"
                ],
                "target_address": [
                    "bool",
                    "Dict[str, Any]",
                    "Union[str, int, kornia.constants.Resample]",
                    "str"
                ],
                "ignore_deployed": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "Optional[List[Any]]",
                    "Union[str, int, kornia.constants.Resample]",
                    "dict",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides"
                ],
                "multisig": [
                    "float",
                    "int",
                    "dict",
                    "mypy.types.CallableType",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "rollback": {
            "name": "rollback",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "Dict[str, bool]",
                    "Optional[Callable]",
                    "str",
                    "float"
                ],
                "actor_options": [
                    "str",
                    "List[str]",
                    "bool",
                    "float",
                    "Callable"
                ]
            }
        },
        "contracts": {
            "name": "contracts",
            "location": 403,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "general_config": [
                    "Callable",
                    "dict",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str",
                    "nucypher.config.characters.UrsulaConfiguration"
                ],
                "actor_options": [
                    "bool",
                    "Union[str, int, kornia.constants.Resample]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable[[str], bool]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "mode": [
                    "mypy.options.Options",
                    "str",
                    "bool"
                ],
                "activate": [
                    "dict",
                    "bool",
                    "str",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "gas": [
                    "bool",
                    "Iterable[str]"
                ],
                "ignore_deployed": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "confirmations": [
                    "bool",
                    "Iterable[str]"
                ],
                "parameters": [
                    "Sequence[float]",
                    "mode.utils.types.graphs._T"
                ]
            }
        },
        "allocations": {
            "name": "allocations",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "Dict[str, bool]",
                    "Optional[Callable]",
                    "str",
                    "float"
                ],
                "actor_options": [
                    "int",
                    "nucypher.network.middleware.RestMiddleware",
                    "Optional[float]",
                    "bool",
                    "float"
                ],
                "allocation_infile": [
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str",
                    "cmk.base.config.HostConfig",
                    "Callable",
                    "bool"
                ],
                "gas": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "transfer_tokens": {
            "name": "transfer_tokens",
            "location": 531,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "Callable",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "actor_options": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName"
                ],
                "target_address": [
                    "starlette.types.Receive",
                    "starlette.types.Scope",
                    "Dict[str, Any]",
                    "str",
                    "sideeye.config.ASCParsingConfig"
                ],
                "value": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "transfer_ownership": {
            "name": "transfer_ownership",
            "location": 559,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "Dict[str, bool]",
                    "Optional[Callable]",
                    "str",
                    "float"
                ],
                "actor_options": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "target_address": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "cmk.utils.type_defs.EventRule"
                ],
                "gas": [
                    "aiogram.types.Message",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ]
            }
        },
        "set_range": {
            "name": "set_range",
            "location": 598,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "Callable",
                    "bool",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "actor_options": [
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "float",
                    "int",
                    "bool"
                ],
                "minimum": [
                    "routemaster_sdk.types.StateMachine",
                    "config.Config",
                    "dict",
                    "Dict[Any, int]"
                ],
                "default": [
                    "dict",
                    "Tuple[str, Any]"
                ],
                "maximum": [
                    "int",
                    "Dict[int, dict]",
                    "Dict[str, Union[str, Any]]"
                ]
            }
        },
        "ActorOptions.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_uri": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "deployer_address": [
                    "str",
                    "bool",
                    "List[int]",
                    "Optional[float]",
                    "Set[str]",
                    "dict"
                ],
                "contract_name": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Sequence[str]"
                ],
                "registry_infile": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "registry_outfile": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "hw_wallet": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "dev": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "force": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "poa": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "config_root": [
                    "str",
                    "bool"
                ],
                "etherscan": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "se_test_mode": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, etl.config.dw.DataWarehouseSchema]",
                    "Optional[\"InventoryMode\"]"
                ],
                "ignore_solidity_check": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "gas_strategy": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ],
                "signer_uri": [
                    "int",
                    "float",
                    "bool",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        },
        "ActorOptions.create_actor": {
            "name": "create_actor",
            "location": 154,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "bool",
                    "int",
                    "List[int]",
                    "Callable[[str], bool]",
                    "bytes"
                ],
                "is_multisig": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/enrico.py": {
        "enrico": {
            "name": "enrico",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 40,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "general_config": [
                    "Dict[str, float]",
                    "int",
                    "Union[bytes, str]",
                    "dict",
                    "Optional[\"AbstractPurpose\"]",
                    "Dict[str, Any]",
                    "str"
                ],
                "policy_encrypting_key": [
                    "str",
                    "int",
                    "List[Tuple[Any, Dict]]"
                ],
                "dry_run": [
                    "str",
                    "dict",
                    "Union[bytearray, memoryview]",
                    "bool"
                ],
                "http_port": [
                    "str",
                    "dict",
                    "Union[bytearray, memoryview]",
                    "bool"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 62,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool"
                ],
                "policy_encrypting_key": [
                    "baseplate.lib.config.EndpointConfiguration",
                    "bytes",
                    "metrics_backend.utils.Address"
                ],
                "message": [
                    "str",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "_create_enrico": {
            "name": "_create_enrico",
            "location": 71,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "policy_encrypting_key": [
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/felix.py": {
        "felix": {
            "name": "felix",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "config_options": [
                    "dict",
                    "config.ConfigFile",
                    "Optional[int]"
                ],
                "config_root": [
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "Set[str]",
                    "dict"
                ],
                "discovery_port": [
                    "Dict[str, Any]",
                    "str",
                    "config.Config",
                    "Optional[str]",
                    "cmk.utils.type_defs.OptionalConfigSerial",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "config_options": [
                    "dict",
                    "str",
                    "cerise.config.Config",
                    "Optional[dict]",
                    "Optional[Dict[str, Any]]",
                    "baseplate.lib.config.RawConfig"
                ],
                "config_file": [
                    "bool",
                    "str"
                ],
                "force": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "createdb": {
            "name": "createdb",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "Optional[dict]",
                    "Optional[str]",
                    "opentrons.types.Point"
                ],
                "character_options": [
                    "Optional[dict]",
                    "Optional[str]",
                    "opentrons.types.Point"
                ],
                "config_file": [
                    "str",
                    "virgene.config.Config",
                    "Optional[str]",
                    "bool"
                ],
                "force": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "view": {
            "name": "view",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "Optional[dict]",
                    "Optional[str]",
                    "opentrons.types.Point"
                ],
                "character_options": [
                    "Optional[dict]",
                    "Optional[str]",
                    "opentrons.types.Point"
                ],
                "config_file": [
                    "str",
                    "virgene.config.Config",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "accounts": {
            "name": "accounts",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "Optional[dict]",
                    "dict",
                    "Optional[str]"
                ],
                "character_options": [
                    "Optional[dict]",
                    "dict",
                    "Optional[str]"
                ],
                "config_file": [
                    "str",
                    "Optional[str]",
                    "virgene.config.Config"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "Optional[dict]",
                    "bool"
                ],
                "character_options": [
                    "Optional[dict]",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "int"
                ],
                "dry_run": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "FelixConfigOptions.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geth": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]",
                    "str"
                ],
                "dev": [
                    "int",
                    "Dict[int, dict]",
                    "tuple",
                    "str",
                    "bool"
                ],
                "network": [
                    "Optional[bool]",
                    "Optional[str]",
                    "int",
                    "Optional[List[Any]]",
                    "Optional[Exception]",
                    "Optional[float]",
                    "bool"
                ],
                "provider_uri": [
                    "Sequence[Sequence[float]]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, List[Any]]",
                    "Optional[dict]"
                ],
                "host": [
                    "Sequence[Sequence[float]]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, List[Any]]",
                    "Optional[dict]"
                ],
                "db_filepath": [
                    "Sequence[Sequence[float]]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, List[Any]]",
                    "Optional[dict]"
                ],
                "checksum_address": [
                    "int",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "Iterable[Sequence[str]]",
                    "bool",
                    "Optional[float]",
                    "List[str]"
                ],
                "registry_filepath": [
                    "Sequence[Sequence[float]]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, List[Any]]",
                    "Optional[dict]"
                ],
                "poa": [
                    "Sequence[Sequence[float]]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, List[Any]]",
                    "Optional[dict]"
                ],
                "port": [
                    "Sequence[Sequence[float]]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, List[Any]]",
                    "Optional[dict]"
                ]
            }
        },
        "FelixConfigOptions.create_config": {
            "name": "create_config",
            "location": 97,
            "return": [
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Optional[List]",
                    "Callable[[str], None]"
                ],
                "config_file": [
                    "str",
                    "Optional[List]",
                    "Callable[[str], None]"
                ]
            }
        },
        "FelixConfigOptions.generate_config": {
            "name": "generate_config",
            "location": 116,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "dict",
                    "str"
                ],
                "discovery_port": [
                    "dict",
                    "str"
                ]
            }
        },
        "FelixCharacterOptions.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "teacher_uri": [
                    "Set[int]",
                    "int",
                    "bool",
                    "str",
                    "dict"
                ],
                "min_stake": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "middleware": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ]
            }
        },
        "FelixCharacterOptions.create_character": {
            "name": "create_character",
            "location": 156,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Optional[str]",
                    "Dict[str, bytes]",
                    "Dict[str, 'LabwareDefinition']",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "Type['Model']",
                    "bool"
                ],
                "debug": [
                    "list",
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/multisig.py": {
        "multisig": {
            "name": "multisig",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "inspect": {
            "name": "inspect",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "blockchain_options": [
                    "bool",
                    "trinity.config.ChainConfig"
                ]
            }
        },
        "propose": {
            "name": "propose",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "Dict[str, Any]"
                ],
                "blockchain_options": [
                    "bool",
                    "int"
                ],
                "multisig_options": [
                    "bool",
                    "int",
                    "raiden.storage.utils.TimestampedEvent"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "Dict[str, Any]"
                ],
                "blockchain_options": [
                    "bool",
                    "int"
                ],
                "multisig_options": [
                    "bool",
                    "int",
                    "raiden.storage.utils.TimestampedEvent"
                ],
                "proposal": [
                    "Optional[str]",
                    "bytes",
                    "Optional[int]",
                    "monkq.config.Setting",
                    "str"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "Dict[str, Any]"
                ],
                "blockchain_options": [
                    "bool",
                    "int"
                ],
                "multisig_options": [
                    "bool",
                    "int",
                    "raiden.storage.utils.TimestampedEvent"
                ],
                "proposal": [
                    "Optional[str]",
                    "bytes",
                    "Optional[int]",
                    "monkq.config.Setting",
                    "str"
                ]
            }
        },
        "BlockchainOptions.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_uri": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "geth": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "poa": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "registry_filepath": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "light": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "network": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "BlockchainOptions.connect_blockchain": {
            "name": "connect_blockchain",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "bytearray",
                    "Tuple[int, int]"
                ],
                "debug": [
                    "bool",
                    "Exception",
                    "str"
                ]
            }
        },
        "MultiSigOptions.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "Optional[str]",
                    "str",
                    "Optional[Iterable[Any]]",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "signer_uri": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "hw_wallet": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "MultiSigOptions.__create_executive": {
            "name": "__create_executive",
            "location": 116,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "eth.vm.computation.BaseComputation"
                ],
                "transacting": [
                    "bool",
                    "float"
                ]
            }
        },
        "MultiSigOptions.create_executive": {
            "name": "create_executive",
            "location": 127,
            "return": [
                "int",
                "bool",
                "Optional[cmk.utils.type_defs.HostName]",
                "str"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "Iterable",
                    "bytes",
                    "bool",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "MultiSigOptions.create_transactingless_executive": {
            "name": "create_transactingless_executive",
            "location": 130,
            "return": [
                "bool",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "foolbox.types.BoundsInput",
                    "solo.config.app.Config",
                    "core.types.UserRole",
                    "raiden.utils.Address",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "MultiSigOptions.__create_trustee": {
            "name": "__create_trustee",
            "location": 133,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "eth.vm.computation.BaseComputation"
                ],
                "transacting": [
                    "bool",
                    "float"
                ]
            }
        },
        "MultiSigOptions.create_trustee": {
            "name": "create_trustee",
            "location": 141,
            "return": [
                "int",
                "bool",
                "Optional[cmk.utils.type_defs.HostName]",
                "str"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "Iterable",
                    "bytes",
                    "bool",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "MultiSigOptions.create_transactingless_trustee": {
            "name": "create_transactingless_trustee",
            "location": 144,
            "return": [
                "bool",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "foolbox.types.BoundsInput",
                    "solo.config.app.Config",
                    "core.types.UserRole",
                    "raiden.utils.Address",
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/stake.py": {
        "stake": {
            "name": "stake",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init_stakeholder": {
            "name": "init_stakeholder",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "MutableMapping[str, str]",
                    "dict",
                    "int"
                ],
                "config_root": [
                    "Dict[str, Any]",
                    "str",
                    "NamedTuple",
                    "config.Config",
                    "bool"
                ],
                "force": [
                    "str",
                    "Optional[List]"
                ],
                "config_options": [
                    "Dict[str, Any]",
                    "str",
                    "NamedTuple",
                    "config.Config",
                    "bool"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "MutableMapping[str, str]",
                    "List[Dict]",
                    "int"
                ],
                "config_file": [
                    "str",
                    "Optional[str]"
                ],
                "config_options": [
                    "str",
                    "dict"
                ]
            }
        },
        "list_stakes": {
            "name": "list_stakes",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "Optional[List[Any]]",
                    "int",
                    "float"
                ],
                "staker_options": [
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "Dict[str, Any]"
                ],
                "config_file": [
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "Dict[str, Any]"
                ],
                "all": [
                    "int"
                ]
            }
        },
        "accounts": {
            "name": "accounts",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "int",
                    "bool",
                    "str",
                    "List[Callable]"
                ],
                "staker_options": [
                    "str",
                    "dict",
                    "sphinx.config.Config"
                ],
                "config_file": [
                    "str",
                    "dict",
                    "sphinx.config.Config"
                ]
            }
        },
        "bond_worker": {
            "name": "bond_worker",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "transacting_staker_options": [
                    "str",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "force": [
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ],
                "worker_address": [
                    "str",
                    "Optional[str]",
                    "sideeye.config.ASCParsingConfig"
                ]
            }
        },
        "unbond_worker": {
            "name": "unbond_worker",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "transacting_staker_options": [
                    "str",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "force": [
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "dict",
                    "str"
                ],
                "transacting_staker_options": [
                    "Optional[str]",
                    "bool",
                    "metrics_backend.utils.Address"
                ],
                "config_file": [
                    "List[str]",
                    "Optional[str]",
                    "types.InterruptCallback"
                ],
                "force": [
                    "bool"
                ],
                "value": [
                    "bool",
                    "cmk.base.config.HostConfig",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "lock_periods": [
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        },
        "restake": {
            "name": "restake",
            "location": 534,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "transacting_staker_options": [
                    "str",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "enable": [
                    "Callable",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "lock_until": [
                    "List[str]"
                ],
                "force": [
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ]
            }
        },
        "winddown": {
            "name": "winddown",
            "location": 581,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "transacting_staker_options": [
                    "str",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "enable": [
                    "Callable",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "lock_until": [
                    "Callable",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "force": [
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ]
            }
        },
        "divide": {
            "name": "divide",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "dict",
                    "str",
                    "Optional[str]"
                ],
                "transacting_staker_options": [
                    "IO[Any]"
                ],
                "config_file": [
                    "List[str]"
                ],
                "force": [
                    "bool",
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ],
                "value": [
                    "bool",
                    "List[str]",
                    "types.InterruptCallback",
                    "rl_algorithms.utils.config.ConfigDict",
                    "BaseException"
                ],
                "lock_periods": [
                    "Callable",
                    "Optional[float]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "bool"
                ],
                "index": [
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "prolong": {
            "name": "prolong",
            "location": 715,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "transacting_staker_options": [
                    "str",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "force": [
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ],
                "lock_periods": [
                    "str",
                    "bool"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "collect_reward": {
            "name": "collect_reward",
            "location": 784,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "transacting_staker_options": [
                    "str",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "staking_reward": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "policy_fee": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "withdraw_address": [
                    "str",
                    "foolbox.types.BoundsInput",
                    "bool",
                    "int"
                ],
                "force": [
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ]
            }
        },
        "preallocation": {
            "name": "preallocation",
            "location": 835,
            "return": [
                "dict",
                "Callable",
                "List[str]"
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "transacting_staker_options": [
                    "str",
                    "dict"
                ],
                "config_file": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "action": [
                    "Callable",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "force": [
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ]
            }
        },
        "events": {
            "name": "events",
            "location": 879,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "str",
                    "dict",
                    "MutableMapping[str, str]"
                ],
                "staker_options": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "config_file": [
                    "str",
                    "BinaryIO",
                    "Optional[Mapping]"
                ],
                "event_name": [
                    "apistar.interfaces.Auth",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "set_min_rate": {
            "name": "set_min_rate",
            "location": 919,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "int",
                    "bool",
                    "str",
                    "List[Callable]",
                    "Mapping[str, Any]"
                ],
                "transacting_staker_options": [
                    "str"
                ],
                "config_file": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "force": [
                    "Sequence[int]",
                    "Optional[cmk.utils.type_defs.CheckPluginName]"
                ],
                "min_rate": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "cmk.utils.type_defs.HostName",
                    "bool",
                    "cmk.base.config.HostConfig"
                ]
            }
        },
        "StakeHolderConfigOptions.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_uri": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "poa": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "light": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "registry_filepath": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "network": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "signer_uri": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "StakeHolderConfigOptions.create_config": {
            "name": "create_config",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str"
                ],
                "config_file": [
                    "str"
                ]
            }
        },
        "StakeHolderConfigOptions.generate_config": {
            "name": "generate_config",
            "location": 138,
            "return": [
                "dict",
                "cerise.config.Config"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "dict"
                ]
            }
        },
        "StakeHolderConfigOptions.get_updates": {
            "name": "get_updates",
            "location": 161,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakerOptions.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "staking_address": [
                    "str",
                    "List[cmk.utils.type_defs.HostName]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "StakerOptions.create_character": {
            "name": "create_character",
            "location": 192,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "sphinx.config.Config"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Optional[str]"
                ],
                "config_file": [
                    "str",
                    "Optional[str]"
                ],
                "initial_address": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "TextIO",
                    "Optional[Set[int]]"
                ]
            }
        },
        "StakerOptions.get_blockchain": {
            "name": "get_blockchain",
            "location": 198,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingStakerOptions.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_options": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "dict",
                    "Dict[str, List[str]]",
                    "int",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides"
                ],
                "hw_wallet": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "List[Dict[str, Any]]",
                    "list",
                    "dict",
                    "bytes",
                    "str"
                ],
                "beneficiary_address": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "allocation_filepath": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "List[Dict[str, Any]]",
                    "list",
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "TransactingStakerOptions.create_character": {
            "name": "create_character",
            "location": 219,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "Optional[str]",
                    "str"
                ],
                "config_file": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TransactingStakerOptions.get_blockchain": {
            "name": "get_blockchain",
            "location": 260,
            "return": [
                "str",
                "bool",
                "exporwiki.types.PrimalEngramEntry",
                "raiden.utils.TokenAmount",
                "raiden.utils.BlockNumber"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingStakerOptions.get_password": {
            "name": "get_password",
            "location": 263,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "str"
                ],
                "client_account": [
                    "Iterator[Tuple[hermes.types.UserType, hermes.types.EmailAddressType]]",
                    "str",
                    "raiden_libs.types.Address"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/status.py": {
        "status": {
            "name": "status",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "network": {
            "name": "network",
            "location": 86,
            "return": [],
            "arguments": {
                "general_config": [],
                "registry_options": []
            }
        },
        "stakers": {
            "name": "stakers",
            "location": 96,
            "return": [],
            "arguments": {
                "general_config": [],
                "registry_options": [],
                "staking_address": []
            }
        },
        "locked_tokens": {
            "name": "locked_tokens",
            "location": 109,
            "return": [],
            "arguments": {
                "general_config": [],
                "registry_options": [],
                "periods": []
            }
        },
        "events": {
            "name": "events",
            "location": 125,
            "return": [],
            "arguments": {
                "general_config": [],
                "registry_options": [],
                "contract_name": [],
                "from_block": [],
                "to_block": [],
                "event_name": []
            }
        },
        "fee_range": {
            "name": "fee_range",
            "location": 170,
            "return": [],
            "arguments": {
                "general_config": [],
                "registry_options": []
            }
        },
        "RegistryOptions.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "provider_uri": [],
                "geth": [],
                "poa": [],
                "registry_filepath": [],
                "light": [],
                "network": []
            }
        },
        "RegistryOptions.setup": {
            "name": "setup",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "general_config": []
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/ursula.py": {
        "ursula": {
            "name": "ursula",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "cerise.config.Config"
                ],
                "config_options": [
                    "pyramid.config.Configurator",
                    "config.Config",
                    "str"
                ],
                "force": [
                    "baseplate.lib.config.RawConfig",
                    "dict",
                    "cerise.config.Config"
                ],
                "config_root": [
                    "str",
                    "neuromation.api.config._AuthConfig",
                    "cerise.config.Config"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "config_options": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "TextIO"
                ],
                "force": [
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "forget": {
            "name": "forget",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Mapping[str, Any]]"
                ],
                "config_options": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "config_file": [
                    "bool",
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 369,
            "return": [
                "int",
                "float",
                "mypy.types.Type"
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "character_options": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "config_file": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "bool"
                ],
                "interactive": [
                    "str",
                    "List[str]",
                    "dss.config.Replica",
                    "Dict[str, Any]"
                ],
                "dry_run": [
                    "str",
                    "List[str]",
                    "dss.config.Replica",
                    "Dict[str, Any]"
                ],
                "metrics_port": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "metrics_listen_address": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "metrics_prefix": [
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "prometheus": [
                    "bool",
                    "str",
                    "int",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "save_metadata": {
            "name": "save_metadata",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "Optional[dict]",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "character_options": [
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "Optional[str]",
                    "jumeaux.domain.config.vo.Config",
                    "Optional[int]"
                ],
                "config_file": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "str",
                    "Optional[str]"
                ],
                "config_options": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "config_file": [
                    "str"
                ]
            }
        },
        "commit_to_next_period": {
            "name": "commit_to_next_period",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "bool",
                    "Optional[dict]",
                    "str"
                ],
                "character_options": [
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "config_file": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_pre_launch_warnings": {
            "name": "_pre_launch_warnings",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "dict",
                    "str",
                    "bool",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "List[Dict[str, Any]]"
                ],
                "dev": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "force": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "UrsulaConfigOptions.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "geth": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "provider_uri": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "worker_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "federated_only": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "rest_host": [
                    "str",
                    "list"
                ],
                "rest_port": [
                    "str",
                    "list",
                    "dict"
                ],
                "db_filepath": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "network": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "AsyncGenerator",
                    "List[str]",
                    "Set[starfish.core.types.Axes]",
                    "cmk.utils.type_defs.HostName"
                ],
                "registry_filepath": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "dev": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "poa": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "light": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "gas_strategy": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "signer_uri": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "availability_check": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "UrsulaConfigOptions.create_config": {
            "name": "create_config",
            "location": 130,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter"
                ],
                "config_file": [
                    "str",
                    "Optional[List]",
                    "Callable[[str], None]"
                ]
            }
        },
        "UrsulaConfigOptions.generate_config": {
            "name": "generate_config",
            "location": 176,
            "return": [
                "str",
                "bool",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "dict"
                ],
                "config_root": [
                    "dict",
                    "bool",
                    "str",
                    "cerise.config.Config"
                ],
                "force": [
                    "str",
                    "Tuple[int, int]",
                    "List[str]"
                ]
            }
        },
        "UrsulaConfigOptions.get_updates": {
            "name": "get_updates",
            "location": 215,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCharacterOptions.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_options": [
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "lonely": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "teacher_uri": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ],
                "min_stake": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[List, List, List]",
                    "bool",
                    "int"
                ]
            }
        },
        "UrsulaCharacterOptions.create_character": {
            "name": "create_character",
            "location": 264,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "Dict[str, Any]",
                "int",
                "sideeye.config.ASCParsingConfig"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "config_file": [
                    "str",
                    "bool"
                ],
                "json_ipc": [],
                "load_seednodes": [
                    "bool",
                    "int",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/worklock.py": {
        "worklock": {
            "name": "worklock",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "status": {
            "name": "status",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "worklock_options": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ]
            }
        },
        "bid": {
            "name": "bid",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "bool",
                    "Callable"
                ],
                "worklock_options": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "force": [
                    "bool",
                    "cmk.utils.type_defs.Ruleset",
                    "Optional[bool]",
                    "Literal[True]"
                ],
                "hw_wallet": [
                    "bool",
                    "Dict[str, Any]",
                    "List[etl.config.dw.DataWarehouseSchema]"
                ],
                "value": [
                    "decimal.Decimal",
                    "bool",
                    "dict"
                ]
            }
        },
        "cancel_bid": {
            "name": "cancel_bid",
            "location": 235,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "worklock_options": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "force": [
                    "bool"
                ],
                "hw_wallet": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable]",
                    "types.Preprocessing",
                    "bool"
                ]
            }
        },
        "claim": {
            "name": "claim",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "worklock_options": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "force": [
                    "bool"
                ],
                "hw_wallet": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable]",
                    "types.Preprocessing",
                    "bool"
                ]
            }
        },
        "remaining_work": {
            "name": "remaining_work",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "worklock_options": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ]
            }
        },
        "refund": {
            "name": "refund",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "worklock_options": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "force": [
                    "bool"
                ],
                "hw_wallet": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable]",
                    "types.Preprocessing",
                    "bool"
                ]
            }
        },
        "enable_claiming": {
            "name": "enable_claiming",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "general_config": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "worklock_options": [
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "force": [
                    "bool",
                    "List[etl.config.dw.DataWarehouseSchema]",
                    "int",
                    "bytes"
                ],
                "hw_wallet": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable]",
                    "types.Preprocessing",
                    "bool"
                ],
                "gas_limit": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "WorkLockOptions.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bidder_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "signer_uri": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "provider_uri": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "registry_filepath": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "network": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "WorkLockOptions.setup": {
            "name": "setup",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "general_config": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ]
            }
        },
        "WorkLockOptions.get_bidder_address": {
            "name": "get_bidder_address",
            "location": 107,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "registry": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "WorkLockOptions.__create_bidder": {
            "name": "__create_bidder",
            "location": 117,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "raiden.constants.EthClient",
                    "eth.vm.computation.BaseComputation"
                ],
                "transacting": [
                    "int",
                    "eth.abc.MessageAPI",
                    "nucypher.blockchain.eth.registry.AllocationRegistry",
                    "Dict[int, Dict[int, Any]]"
                ],
                "hw_wallet": [
                    "bool",
                    "float"
                ]
            }
        },
        "WorkLockOptions.create_bidder": {
            "name": "create_bidder",
            "location": 134,
            "return": [
                "Tuple[int, int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "bool",
                    "str"
                ],
                "hw_wallet": [
                    "bool",
                    "str"
                ]
            }
        },
        "WorkLockOptions.create_transactionless_bidder": {
            "name": "create_transactionless_bidder",
            "location": 137,
            "return": [
                "bool",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "foolbox.types.BoundsInput",
                    "solo.config.app.Config",
                    "core.types.UserRole",
                    "raiden.utils.Address",
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/commands/__init__.py": {},
    "nucypher-master/nucypher/cli/painting/deployment.py": {
        "paint_staged_deployment": {
            "name": "paint_staged_deployment",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [],
                "deployer_interface": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "administrator": [
                    "str",
                    "bool",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "recidiviz.utils.regions.Region"
                ]
            }
        },
        "paint_deployment_delay": {
            "name": "paint_deployment_delay",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "bool"
                ],
                "delay": [
                    "int",
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "paint_contract_deployment": {
            "name": "paint_contract_deployment",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "bool",
                    "Dict[cmk.utils.type_defs.HostName, cmk.utils.type_defs.TagList]",
                    "Optional[List[str]]",
                    "list",
                    "str",
                    "List[Union[bool, str]]"
                ],
                "contract_name": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, utils.CWLObjectType]",
                    "Callable",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "contract_address": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "receipts": [
                    "dict",
                    "Optional[dict]",
                    "Dict[str, List[str]]"
                ],
                "chain_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "open_in_browser": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "paint_deployer_contract_inspection": {
            "name": "paint_deployer_contract_inspection",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "Tuple[Sequence]",
                    "int",
                    "Union[Sequence[str], str]",
                    "List[str]"
                ],
                "registry": [
                    "cmk.utils.type_defs.HostName",
                    "Union[object, type]"
                ],
                "deployer_address": [
                    "int",
                    "str",
                    "eth.abc.MessageAPI"
                ]
            }
        },
        "paint_input_allocation_file": {
            "name": "paint_input_allocation_file",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "emitter": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "allocations": [
                    "str",
                    "int",
                    "Set[str]",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/painting/help.py": {
        "echo_version": {
            "name": "echo_version",
            "location": 24,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "Dict[str, Any]"
                ],
                "param": [
                    "bool",
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "click.Context",
                    "Dict[str, Any]"
                ]
            }
        },
        "echo_solidity_version": {
            "name": "echo_solidity_version",
            "location": 31,
            "return": [
                "bytes"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "Dict[str, Any]",
                    "bool"
                ],
                "param": [
                    "bool",
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "click.Context",
                    "Dict[str, Any]"
                ]
            }
        },
        "paint_new_installation_help": {
            "name": "paint_new_installation_help",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "List[str]"
                ],
                "new_configuration": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/painting/multisig.py": {
        "paint_multisig_contract_info": {
            "name": "paint_multisig_contract_info",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "bool",
                    "Optional[float]",
                    "Optional[int]",
                    "dict",
                    "str"
                ],
                "multisig_agent": [
                    "bool"
                ],
                "token_agent": [
                    "str"
                ]
            }
        },
        "paint_multisig_proposed_transaction": {
            "name": "paint_multisig_proposed_transaction",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "int"
                ],
                "proposal": [
                    "str"
                ],
                "contract": [
                    "str",
                    "int"
                ],
                "registry": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/painting/nodes.py": {
        "build_fleet_state_status": {
            "name": "build_fleet_state_status",
            "location": 23,
            "return": [],
            "arguments": {
                "ursula": []
            }
        },
        "paint_node_status": {
            "name": "paint_node_status",
            "location": 40,
            "return": [],
            "arguments": {
                "emitter": [],
                "ursula": [],
                "start_time": []
            }
        },
        "paint_known_nodes": {
            "name": "paint_known_nodes",
            "location": 87,
            "return": [],
            "arguments": {
                "emitter": [],
                "ursula": []
            }
        }
    },
    "nucypher-master/nucypher/cli/painting/staking.py": {
        "paint_stakes": {
            "name": "paint_stakes",
            "location": 33,
            "return": [],
            "arguments": {
                "emitter": [],
                "stakeholder": [],
                "paint_inactive": [],
                "staker_address": []
            }
        },
        "prettify_stake": {
            "name": "prettify_stake",
            "location": 97,
            "return": [],
            "arguments": {
                "stake": [],
                "index": []
            }
        },
        "paint_staged_stake_division": {
            "name": "paint_staged_stake_division",
            "location": 115,
            "return": [],
            "arguments": {
                "emitter": [],
                "stakeholder": [],
                "original_stake": [],
                "target_value": [],
                "extension": []
            }
        },
        "paint_staged_stake": {
            "name": "paint_staged_stake",
            "location": 139,
            "return": [],
            "arguments": {
                "emitter": [],
                "stakeholder": [],
                "staking_address": [],
                "stake_value": [],
                "lock_periods": [],
                "start_period": [],
                "unlock_period": [],
                "division_message": []
            }
        },
        "paint_staking_confirmation": {
            "name": "paint_staking_confirmation",
            "location": 178,
            "return": [],
            "arguments": {
                "emitter": [],
                "staker": [],
                "new_stake": []
            }
        },
        "paint_staking_accounts": {
            "name": "paint_staking_accounts",
            "location": 186,
            "return": [],
            "arguments": {
                "emitter": [],
                "wallet": [],
                "registry": []
            }
        },
        "paint_fee_rate_range": {
            "name": "paint_fee_rate_range",
            "location": 202,
            "return": [],
            "arguments": {
                "emitter": [],
                "policy_agent": []
            }
        },
        "paint_min_rate": {
            "name": "paint_min_rate",
            "location": 213,
            "return": [],
            "arguments": {
                "emitter": [],
                "registry": [],
                "policy_agent": [],
                "staker_address": []
            }
        }
    },
    "nucypher-master/nucypher/cli/painting/status.py": {
        "paint_contract_status": {
            "name": "paint_contract_status",
            "location": 34,
            "return": [],
            "arguments": {
                "registry": [],
                "emitter": []
            }
        },
        "paint_preallocation_status": {
            "name": "paint_preallocation_status",
            "location": 80,
            "return": [],
            "arguments": {
                "emitter": [],
                "preallocation_agent": [],
                "token_agent": []
            }
        },
        "paint_locked_tokens_status": {
            "name": "paint_locked_tokens_status",
            "location": 111,
            "return": [],
            "arguments": {
                "emitter": [],
                "agent": [],
                "periods": []
            }
        },
        "paint_stakers": {
            "name": "paint_stakers",
            "location": 143,
            "return": [],
            "arguments": {
                "emitter": [],
                "stakers": [],
                "staking_agent": [],
                "policy_agent": []
            }
        }
    },
    "nucypher-master/nucypher/cli/painting/transactions.py": {
        "paint_decoded_transaction": {
            "name": "paint_decoded_transaction",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "int",
                    "List[bytes]",
                    "bool"
                ],
                "proposal": [
                    "str",
                    "bool"
                ],
                "contract": [
                    "str",
                    "bool"
                ],
                "registry": [
                    "str",
                    "bool"
                ]
            }
        },
        "paint_receipt_summary": {
            "name": "paint_receipt_summary",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "Optional[str]",
                    "Type",
                    "type"
                ],
                "receipt": [
                    "bool",
                    "float",
                    "Callable[[float], float]"
                ],
                "chain_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "transaction_type": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "provider_uri": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "nucypher-master/nucypher/cli/painting/worklock.py": {
        "paint_bidding_notice": {
            "name": "paint_bidding_notice",
            "location": 28,
            "return": [],
            "arguments": {
                "emitter": [],
                "bidder": []
            }
        },
        "paint_worklock_claim": {
            "name": "paint_worklock_claim",
            "location": 37,
            "return": [],
            "arguments": {
                "emitter": [],
                "bidder_address": [],
                "network": [],
                "provider_uri": []
            }
        },
        "paint_worklock_status": {
            "name": "paint_worklock_status",
            "location": 44,
            "return": [],
            "arguments": {
                "emitter": [],
                "registry": []
            }
        },
        "paint_bidder_status": {
            "name": "paint_bidder_status",
            "location": 121,
            "return": [],
            "arguments": {
                "emitter": [],
                "bidder": []
            }
        }
    },
    "nucypher-master/nucypher/cli/painting/__init__.py": {},
    "nucypher-master/nucypher/config/base.py": {
        "BaseConfiguration.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "Optional[str]",
                    "Optional[dict]"
                ],
                "filepath": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseConfiguration.static_payload": {
            "name": "static_payload",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfiguration.generate_filename": {
            "name": "generate_filename",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "dict",
                    "List[str]",
                    "List[Tuple[str, str]]"
                ],
                "modifier": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseConfiguration.default_filepath": {
            "name": "default_filepath",
            "location": 161,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "config_root": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseConfiguration.generate_filepath": {
            "name": "generate_filepath",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Match[str]"
                ],
                "modifier": [
                    "str"
                ],
                "override": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[str]"
                ]
            }
        },
        "BaseConfiguration._ensure_config_root_exists": {
            "name": "_ensure_config_root_exists",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfiguration.peek": {
            "name": "peek",
            "location": 213,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception"
                ],
                "filepath": [
                    "str",
                    "Type[T]",
                    "int"
                ],
                "field": [
                    "type",
                    "str"
                ]
            }
        },
        "BaseConfiguration.to_configuration_file": {
            "name": "to_configuration_file",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "int"
                ],
                "modifier": [
                    "str",
                    "int",
                    "bytearray",
                    "Optional[bool]"
                ],
                "override": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseConfiguration.from_configuration_file": {
            "name": "from_configuration_file",
            "location": 228,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "T"
                ],
                "filepath": [
                    "str",
                    "T"
                ]
            }
        },
        "BaseConfiguration._read_configuration_file": {
            "name": "_read_configuration_file",
            "location": 235,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "filepath": [
                    "str",
                    "bytes",
                    "List[dict]"
                ]
            }
        },
        "BaseConfiguration._write_configuration_file": {
            "name": "_write_configuration_file",
            "location": 242,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "int",
                    "float"
                ],
                "override": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseConfiguration.serialize": {
            "name": "serialize",
            "location": 250,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseConfiguration.deserialize": {
            "name": "deserialize",
            "location": 258,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "int",
                    "Type[T]",
                    "bool"
                ],
                "payload": [
                    "Type",
                    "float",
                    "type"
                ],
                "deserializer": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "BaseConfiguration.update": {
            "name": "update",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "bool",
                    "str"
                ],
                "modifier": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/config/characters.py": {
        "UrsulaConfiguration.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worker_address": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable[[], str]"
                ],
                "dev_mode": [
                    "bool",
                    "str",
                    "Tuple[str]",
                    "Optional[List[str]]"
                ],
                "db_filepath": [
                    "str",
                    "bytes"
                ],
                "rest_host": [
                    "str",
                    "Callable",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides",
                    "bool"
                ],
                "rest_port": [
                    "bool",
                    "int"
                ],
                "tls_curve": [
                    "str",
                    "bytes"
                ],
                "certificate": [
                    "str",
                    "bytes"
                ],
                "availability_check": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "UrsulaConfiguration.generate_runtime_filepaths": {
            "name": "generate_runtime_filepaths",
            "location": 74,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "List[str]",
                    "dict",
                    "Union[str, int]"
                ]
            }
        },
        "UrsulaConfiguration.generate_filepath": {
            "name": "generate_filepath",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "modifier": [
                    "Callable",
                    "float",
                    "Callable[..., None]"
                ]
            }
        },
        "UrsulaConfiguration.static_payload": {
            "name": "static_payload",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.produce": {
            "name": "produce",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.attach_keyring": {
            "name": "attach_keyring",
            "location": 119,
            "return": [
                "Callable",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "UrsulaConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "tuple",
                    "Optional[str]"
                ]
            }
        },
        "UrsulaConfiguration.destroy": {
            "name": "destroy",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AliceConfiguration.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "bool",
                    "str"
                ],
                "n": [
                    "int"
                ],
                "rate": [
                    "int",
                    "str",
                    "bool"
                ],
                "duration_periods": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "AliceConfiguration.static_payload": {
            "name": "static_payload",
            "location": 169,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AliceConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 178,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "BobConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 193,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "FelixConfiguration.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_filepath": [
                    "str"
                ],
                "rest_host": [
                    "str",
                    "bool"
                ],
                "rest_port": [
                    "Union[float, str]",
                    "float",
                    "str"
                ],
                "tls_curve": [
                    "Set[str]"
                ],
                "certificate": [
                    "Set[str]"
                ]
            }
        },
        "FelixConfiguration.static_payload": {
            "name": "static_payload",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FelixConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 239,
            "return": [
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "StakeHolderConfiguration.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checksum_addresses": [
                    "Optional[str]",
                    "str",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "StakeHolderConfiguration.static_payload": {
            "name": "static_payload",
            "location": 257,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakeHolderConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 274,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakeHolderConfiguration.__setup_node_storage": {
            "name": "__setup_node_storage",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_storage": [
                    "dcos_e2e.node.Node",
                    "bool",
                    "str"
                ]
            }
        },
        "StakeHolderConfiguration.assemble": {
            "name": "assemble",
            "location": 282,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "StakeHolderConfiguration.generate_runtime_filepaths": {
            "name": "generate_runtime_filepaths",
            "location": 291,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "config_root": [
                    "str"
                ]
            }
        },
        "StakeHolderConfiguration.initialize": {
            "name": "initialize",
            "location": 297,
            "return": [
                "Callable",
                "Dict[str, Dict[str, Any]]",
                "Callable[[str], None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "StakeHolderConfiguration.generate": {
            "name": "generate",
            "location": 321,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Optional[str]",
                "dict",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type"
                ]
            }
        },
        "StakeHolderConfiguration.to_configuration_file": {
            "name": "to_configuration_file",
            "location": 328,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "override": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Tuple[str]",
                    "bool"
                ]
            }
        },
        "UrsulaConfiguration.produce.MockDatastoreThreadPool.callInThread": {
            "name": "callInThread",
            "location": 113,
            "return": [
                "str",
                "dss.config.Replica"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[..., T]",
                    "Callable"
                ]
            }
        }
    },
    "nucypher-master/nucypher/config/constants.py": {},
    "nucypher-master/nucypher/config/keyring.py": {
        "unlock_required": {
            "name": "unlock_required",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_assemble_key_data": {
            "name": "_assemble_key_data",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "key_data": [
                    "dict",
                    "raiden.network.proxies.secret_registry.SecretRegistry",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "master_salt": [
                    "dict",
                    "raiden.network.proxies.secret_registry.SecretRegistry",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "wrap_salt": [
                    "dict",
                    "raiden.network.proxies.secret_registry.SecretRegistry",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "_read_keyfile": {
            "name": "_read_keyfile",
            "location": 99,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "keypath": [
                    "int",
                    "Callable",
                    "str"
                ],
                "deserializer": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "_write_private_keyfile": {
            "name": "_write_private_keyfile",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "keypath": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Dict[str, Any]"
                ],
                "key_data": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Optional[Dict]",
                    "Optional[str]"
                ],
                "serializer": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "_write_public_keyfile": {
            "name": "_write_public_keyfile",
            "location": 147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "keypath": [
                    "str",
                    "Optional[int]"
                ],
                "key_data": [
                    "bytes",
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "_write_tls_certificate": {
            "name": "_write_tls_certificate",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "certificate": [
                    "float",
                    "List[List[int]]",
                    "int"
                ],
                "full_filepath": [
                    "str",
                    "Union[str, float]"
                ],
                "force": [
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "_read_tls_public_certificate": {
            "name": "_read_tls_public_certificate",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "_derive_wrapping_key_from_key_material": {
            "name": "_derive_wrapping_key_from_key_material",
            "location": 203,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "salt": [
                    "str",
                    "int",
                    "bytes",
                    "crypto.PointG2"
                ],
                "key_material": [
                    "str",
                    "int",
                    "bytes",
                    "crypto.PointG2"
                ]
            }
        },
        "_generate_encryption_keys": {
            "name": "_generate_encryption_keys",
            "location": 225,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "cryptography.x509.Certificate"
            ],
            "arguments": {}
        },
        "_generate_signing_keys": {
            "name": "_generate_signing_keys",
            "location": 232,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "cryptography.x509.Certificate"
            ],
            "arguments": {}
        },
        "_generate_wallet": {
            "name": "_generate_wallet",
            "location": 240,
            "return": [
                "int",
                "str",
                "twisted.python.failure.Failure",
                "Union[str, Dict]"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        },
        "_generate_tls_keys": {
            "name": "_generate_tls_keys",
            "location": 247,
            "return": [
                "str",
                "bool",
                "Sequence[Sequence[Any]]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "host": [
                    "str",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "int"
                ],
                "checksum_address": [
                    "str",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "int"
                ],
                "curve": [
                    "str",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "int"
                ]
            }
        },
        "unlock_required.wrapped": {
            "name": "wrapped",
            "location": 80,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "keyring": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "_PrivateKeySerializer.__serialize": {
            "name": "__serialize",
            "location": 254,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key_metadata": [
                    "Dict[str, bytes]",
                    "bool",
                    "Optional[int]",
                    "Optional[Type[Any]]"
                ],
                "encoding": [
                    "str"
                ],
                "nested_serializer": [
                    "Callable",
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_PrivateKeySerializer.__deserialize": {
            "name": "__deserialize",
            "location": 272,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key_metadata": [
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurvePrivateKeyWithSerialization",
                    "libqtile.config.Key"
                ],
                "encoding": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "float"
                ],
                "nested_deserializer": [
                    "str",
                    "int"
                ]
            }
        },
        "_PrivateKeySerializer.__call__": {
            "name": "__call__",
            "location": 288,
            "return": [
                "str",
                "dict",
                "IO[bytes]",
                "bool",
                "List[str]",
                "Tuple[int, List[str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Match[bytes]",
                    "Union[bytes, str]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "NucypherKeyring.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "int"
                ],
                "keyring_root": [
                    "str"
                ],
                "root_key_path": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "pub_root_key_path": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]"
                ],
                "signing_key_path": [
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "BinaryIO",
                    "List[str]"
                ],
                "pub_signing_key_path": [
                    "str",
                    "Optional[str]"
                ],
                "delegating_key_path": [
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "BinaryIO",
                    "List[str]"
                ],
                "tls_key_path": [
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "BinaryIO",
                    "List[str]"
                ],
                "tls_certificate_path": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "NucypherKeyring.__del__": {
            "name": "__del__",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.checksum_address": {
            "name": "checksum_address",
            "location": 383,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.signing_public_key": {
            "name": "signing_public_key",
            "location": 387,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.encrypting_public_key": {
            "name": "encrypting_public_key",
            "location": 393,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "cryptography.x509.Certificate"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.certificate_filepath": {
            "name": "certificate_filepath",
            "location": 399,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.keyring_root": {
            "name": "keyring_root",
            "location": 403,
            "return": [
                "bob_emploi.frontend.server.scoring_base.ScoringProject",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring._generate_base_filepaths": {
            "name": "_generate_base_filepaths",
            "location": 410,
            "return": [
                "str"
            ],
            "arguments": {
                "keyring_root": [
                    "str",
                    "bytes"
                ]
            }
        },
        "NucypherKeyring._generate_key_filepaths": {
            "name": "_generate_key_filepaths",
            "location": 416,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "public_key_dir": [
                    "str",
                    "List[str]"
                ],
                "private_key_dir": [
                    "str",
                    "List[str]"
                ],
                "account": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "NucypherKeyring.__decrypt_keyfile": {
            "name": "__decrypt_keyfile",
            "location": 432,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key_path": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "NucypherKeyring.account": {
            "name": "account",
            "location": 444,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.is_unlocked": {
            "name": "is_unlocked",
            "location": 448,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.lock": {
            "name": "lock",
            "location": 451,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.unlock": {
            "name": "unlock",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "NucypherKeyring.derive_crypto_power": {
            "name": "derive_crypto_power",
            "location": 472,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "power_class": [
                    "Type",
                    "bytes"
                ]
            }
        },
        "NucypherKeyring.generate": {
            "name": "generate",
            "location": 513,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "checksum_address": [
                    "str",
                    "bool"
                ],
                "password": [
                    "bool",
                    "str"
                ],
                "encrypting": [
                    "bool",
                    "str"
                ],
                "rest": [
                    "bool",
                    "str"
                ],
                "host": [
                    "bool",
                    "str"
                ],
                "curve": [
                    "bool",
                    "str"
                ],
                "keyring_root": [
                    "bool",
                    "str"
                ]
            }
        },
        "NucypherKeyring.validate_password": {
            "name": "validate_password",
            "location": 662,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str, str]",
                    "List[str]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str, str]",
                    "List[str]"
                ]
            }
        },
        "NucypherKeyring.destroy": {
            "name": "destroy",
            "location": 680,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.generate.__serialize_pem": {
            "name": "__serialize_pem",
            "location": 647,
            "return": [
                "MutableMapping[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "pk": [
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/nucypher/config/node.py": {
        "CharacterConfiguration.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "config_root": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "filepath": [
                    "bool",
                    "int",
                    "Dict[str, str]"
                ],
                "dev_mode": [
                    "str",
                    "nucypher.crypto.powers.CryptoPower",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "federated_only": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "checksum_address": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Callable[[], str]",
                    "dict",
                    "int"
                ],
                "crypto_power": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "keyring": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "keyring_root": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "learn_on_same_thread": [],
                "abort_on_learning_error": [
                    "str",
                    "dict",
                    "bool",
                    "Exception"
                ],
                "start_learning_now": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "controller_port": [
                    "bool",
                    "int",
                    "Callable[[], int]"
                ],
                "domains": [
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ],
                "interface_signature": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "network_middleware": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "known_nodes": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "node_storage": [
                    "Optional[int]",
                    "\"Task\"",
                    "raiden.network.proxies.token.Token"
                ],
                "reload_metadata": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "save_metadata": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "poa": [
                    "bool",
                    "rl_algorithms.utils.config.ConfigDict",
                    "int",
                    "str"
                ],
                "light": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "sync": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "provider_uri": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "provider_process": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "gas_strategy": [
                    "str",
                    "Optional[dict]",
                    "int",
                    "dict"
                ],
                "signer_uri": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str"
                ],
                "registry": [
                    "Optional[float]",
                    "bool"
                ],
                "registry_filepath": [
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "CharacterConfiguration.__call__": {
            "name": "__call__",
            "location": 234,
            "return": [
                "int",
                "float",
                "Union[base.Criterion, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.checksum_address_from_filepath": {
            "name": "checksum_address_from_filepath",
            "location": 238,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Exception",
                    "config.CommentSymbol",
                    "Mapping[str, T]"
                ],
                "filepath": [
                    "int",
                    "Type[T]",
                    "str",
                    "type",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "CharacterConfiguration.update": {
            "name": "update",
            "location": 275,
            "return": [
                "nucypher.characters.control.emitters.StdoutEmitter",
                "Dict[int, dict]",
                "float",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.generate": {
            "name": "generate",
            "location": 284,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Optional[str]",
                "dict",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "password": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "CharacterConfiguration.cleanup": {
            "name": "cleanup",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.dev_mode": {
            "name": "dev_mode",
            "location": 296,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.__setup_node_storage": {
            "name": "__setup_node_storage",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_storage": [
                    "Callable[[str], str]"
                ]
            }
        },
        "CharacterConfiguration.forget_nodes": {
            "name": "forget_nodes",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.destroy": {
            "name": "destroy",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.generate_parameters": {
            "name": "generate_parameters",
            "location": 319,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.produce": {
            "name": "produce",
            "location": 334,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.assemble": {
            "name": "assemble",
            "location": 341,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "BinaryIO",
                    "int",
                    "float"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "CharacterConfiguration.from_configuration_file": {
            "name": "from_configuration_file",
            "location": 359,
            "return": [
                "str",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "eth.rlp.transactions.BaseTransaction",
                    "bool",
                    "Optional[str]"
                ],
                "filepath": [
                    "str",
                    "eth.rlp.transactions.BaseTransaction",
                    "bool",
                    "Optional[str]"
                ],
                "provider_process": [
                    "int",
                    "type",
                    "Mapping[str, T]"
                ]
            }
        },
        "CharacterConfiguration.validate": {
            "name": "validate",
            "location": 370,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.static_payload": {
            "name": "static_payload",
            "location": 386,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 427,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.generate_filepath": {
            "name": "generate_filepath",
            "location": 440,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "List[str]",
                    "List[List[Any]]",
                    "Dict[str, str]",
                    "Iterable[Any]"
                ],
                "modifier": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "override": [
                    "List[str]",
                    "List[List[Any]]",
                    "Dict[str, str]",
                    "Iterable[Any]"
                ]
            }
        },
        "CharacterConfiguration.runtime_filepaths": {
            "name": "runtime_filepaths",
            "location": 446,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.generate_runtime_filepaths": {
            "name": "generate_runtime_filepaths",
            "location": 453,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "config_root": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CharacterConfiguration._cache_runtime_filepaths": {
            "name": "_cache_runtime_filepaths",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.attach_keyring": {
            "name": "attach_keyring",
            "location": 467,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "CharacterConfiguration.derive_node_power_ups": {
            "name": "derive_node_power_ups",
            "location": 477,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterConfiguration.initialize": {
            "name": "initialize",
            "location": 485,
            "return": [
                "Callable",
                "Dict[str, Dict[str, Any]]",
                "Callable[[str], None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "CharacterConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 510,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ],
                "checksum_address": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CharacterConfiguration.load_node_storage": {
            "name": "load_node_storage",
            "location": 546,
            "return": [
                "Union[Sequence, 'SweepFixedValues']",
                "int",
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "int",
                    "Type[tuple]",
                    "str",
                    "Callable[[None], None]",
                    "Dict[str, bool]"
                ],
                "storage_payload": [
                    "type",
                    "dict",
                    "bool"
                ],
                "federated_only": [
                    "set",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/nucypher/config/storages.py": {
        "NodeStorage.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "float",
                    "int"
                ],
                "character_class": [
                    "bool",
                    "int",
                    "str"
                ],
                "serializer": [
                    "bool",
                    "float",
                    "int"
                ],
                "deserializer": [
                    "bool",
                    "float",
                    "int"
                ],
                "registry": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "NodeStorage.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict",
                    "list",
                    "int",
                    "bool"
                ]
            }
        },
        "NodeStorage.__setitem__": {
            "name": "__setitem__",
            "location": 76,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[Any]",
                "\"Namespace\""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "list",
                    "str",
                    "set"
                ]
            }
        },
        "NodeStorage.__delitem__": {
            "name": "__delitem__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "NodeStorage.__iter__": {
            "name": "__iter__",
            "location": 82,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.source": {
            "name": "source",
            "location": 87,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage._read_common_name": {
            "name": "_read_common_name",
            "location": 91,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "str",
                    "tuple",
                    "float"
                ]
            }
        },
        "NodeStorage._write_tls_certificate": {
            "name": "_write_tls_certificate",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "int",
                    "bool"
                ],
                "host": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "force": [
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "NodeStorage.store_node_certificate": {
            "name": "store_node_certificate",
            "location": 143,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "cryptography.x509.Certificate",
                    "bool",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "NodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 147,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list",
                    "bool"
                ],
                "filepath": [
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "NodeStorage.generate_certificate_filepath": {
            "name": "generate_certificate_filepath",
            "location": 152,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "NodeStorage.payload": {
            "name": "payload",
            "location": 156,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.from_payload": {
            "name": "from_payload",
            "location": 161,
            "return": [
                "'NodeStorage'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "NodeStorage.initialize": {
            "name": "initialize",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.all": {
            "name": "all",
            "location": 171,
            "return": [
                "builtins.set"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ],
                "certificates_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ]
            }
        },
        "NodeStorage.get": {
            "name": "get",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "federated_only": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "NodeStorage.remove": {
            "name": "remove",
            "location": 181,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "NodeStorage.clear": {
            "name": "clear",
            "location": 186,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_dir": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ForgetfulNodeStorage.source": {
            "name": "source",
            "location": 205,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.all": {
            "name": "all",
            "location": 209,
            "return": [
                "Set[str]",
                "set",
                "Set[int]",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ],
                "certificates_only": [
                    "SupportsInt",
                    "Sequence[Sequence[Any]]",
                    "bytes",
                    "float",
                    "str",
                    "bool",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ForgetfulNodeStorage.get": {
            "name": "get",
            "location": 213,
            "return": [
                "List[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "int"
                ],
                "host": [
                    "str",
                    "int"
                ],
                "checksum_address": [
                    "str",
                    "int"
                ],
                "certificate_only": [
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.forget": {
            "name": "forget",
            "location": 234,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.store_node_certificate": {
            "name": "store_node_certificate",
            "location": 239,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "str",
                    "List[Dict]"
                ]
            }
        },
        "ForgetfulNodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 245,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "filepath": [
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.generate_certificate_filepath": {
            "name": "generate_certificate_filepath",
            "location": 250,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.remove": {
            "name": "remove",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str"
                ],
                "metadata": [
                    "bool",
                    "Optional[bool]"
                ],
                "certificate": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "ForgetfulNodeStorage.clear": {
            "name": "clear",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool"
                ],
                "certificates": [
                    "bool"
                ]
            }
        },
        "ForgetfulNodeStorage.payload": {
            "name": "payload",
            "location": 275,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgetfulNodeStorage.from_payload": {
            "name": "from_payload",
            "location": 280,
            "return": [
                "Callable[..., None]",
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "payload": [
                    "dict"
                ]
            }
        },
        "ForgetfulNodeStorage.initialize": {
            "name": "initialize",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteForgetfulNodeStorage.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_filepath": [
                    "sqlite3.Connection",
                    "Set[str]"
                ]
            }
        },
        "SQLiteForgetfulNodeStorage.__del__": {
            "name": "__del__",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteForgetfulNodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 318,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ],
                "filepath": [
                    "str",
                    "dict"
                ]
            }
        },
        "SQLiteForgetfulNodeStorage.remove": {
            "name": "remove",
            "location": 323,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str"
                ],
                "metadata": [
                    "bool",
                    "List[str]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "certificate": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SQLiteForgetfulNodeStorage.clear": {
            "name": "clear",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "List[object]",
                    "List[str]",
                    "Iterable"
                ],
                "certificates": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SQLiteForgetfulNodeStorage.initialize": {
            "name": "initialize",
            "location": 342,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteForgetfulNodeStorage.init_db_tables": {
            "name": "init_db_tables",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLiteForgetfulNodeStorage.__write_node_metadata": {
            "name": "__write_node_metadata",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str",
                    "int"
                ],
                "storage_root": [
                    "str",
                    "Set[str]"
                ],
                "metadata_dir": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "certificates_dir": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.source": {
            "name": "source",
            "location": 395,
            "return": [
                "str",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage._generate_storage_filepaths": {
            "name": "_generate_storage_filepaths",
            "location": 400,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config_root": [
                    "str"
                ],
                "storage_root": [
                    "str"
                ],
                "metadata_dir": [
                    "str"
                ],
                "certificates_dir": [
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage._cache_storage_filepaths": {
            "name": "_cache_storage_filepaths",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__get_certificate_filename": {
            "name": "__get_certificate_filename",
            "location": 429,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__get_certificate_filepath": {
            "name": "__get_certificate_filepath",
            "location": 432,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "certificate_filename": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.generate_certificate_filepath": {
            "name": "generate_certificate_filepath",
            "location": 436,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__read_tls_public_certificate": {
            "name": "__read_tls_public_certificate",
            "location": 442,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[Any]",
                    "int"
                ],
                "checksum_address": [
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__generate_metadata_filepath": {
            "name": "__generate_metadata_filepath",
            "location": 462,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str"
                ],
                "metadata_dir": [
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__read_metadata": {
            "name": "__read_metadata",
            "location": 467,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "Callable",
                    "str"
                ],
                "federated_only": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__write_metadata": {
            "name": "__write_metadata",
            "location": 480,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "ValueError",
                    "int",
                    "Dict[str, str]"
                ],
                "node": [
                    "str",
                    "bytes",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "LocalFileBasedNodeStorage.all": {
            "name": "all",
            "location": 490,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "certificates_only": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "LocalFileBasedNodeStorage.get": {
            "name": "get",
            "location": 510,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "federated_only": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "certificate_only": [
                    "bool"
                ]
            }
        },
        "LocalFileBasedNodeStorage.store_node_certificate": {
            "name": "store_node_certificate",
            "location": 518,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "dict",
                    "bool"
                ],
                "force": [
                    "dict",
                    "bool"
                ]
            }
        },
        "LocalFileBasedNodeStorage.store_node_metadata": {
            "name": "store_node_metadata",
            "location": 522,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "filepath": [
                    "Optional[Mapping[str, Any]]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage.save_node": {
            "name": "save_node",
            "location": 528,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "dict",
                    "list"
                ],
                "force": [
                    "bool",
                    "Pattern"
                ]
            }
        },
        "LocalFileBasedNodeStorage.remove": {
            "name": "remove",
            "location": 534,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int",
                    "Union[str, int]"
                ],
                "metadata": [
                    "bool",
                    "Optional[bool]"
                ],
                "certificate": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.clear": {
            "name": "clear",
            "location": 548,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool"
                ],
                "certificates": [
                    "bool"
                ]
            }
        },
        "LocalFileBasedNodeStorage.payload": {
            "name": "payload",
            "location": 569,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.from_payload": {
            "name": "from_payload",
            "location": 579,
            "return": [
                "int",
                "Callable[..., None]",
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "type"
                ],
                "payload": [
                    "dict",
                    "Exception",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.initialize": {
            "name": "initialize",
            "location": 587,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.__init__": {
            "name": "__init__",
            "location": 604,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.initialize": {
            "name": "initialize",
            "location": 617,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.clear.__destroy_dir_contents": {
            "name": "__destroy_dir_contents",
            "location": 551,
            "return": [
                "int",
                "Dict[str, Any]",
                "Iterator[object]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/config/__init__.py": {},
    "nucypher-master/nucypher/crypto/api.py": {
        "secure_random": {
            "name": "secure_random",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "num_bytes": [
                    "int",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "secure_random_range": {
            "name": "secure_random_range",
            "location": 62,
            "return": [
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "float"
            ],
            "arguments": {
                "min": [
                    "int",
                    "Dict[str, str]",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                    "float"
                ],
                "max": [
                    "int",
                    "Dict[str, str]",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                    "float"
                ]
            }
        },
        "keccak_digest": {
            "name": "keccak_digest",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "sha256_digest": {
            "name": "sha256_digest",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ecdsa_sign": {
            "name": "ecdsa_sign",
            "location": 112,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "message": [
                    "List[bytes]",
                    "bytes",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "private_key": [
                    "Optional[Callable]",
                    "str",
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "recover_address_eip_191": {
            "name": "recover_address_eip_191",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Signature",
                    "int"
                ],
                "signature": [
                    "str",
                    "bytes",
                    "Optional[dict]",
                    "int",
                    "bool"
                ]
            }
        },
        "verify_eip_191": {
            "name": "verify_eip_191",
            "location": 138,
            "return": [
                "bool",
                "str",
                "tuple"
            ],
            "arguments": {
                "address": [
                    "str"
                ],
                "message": [
                    "bytes",
                    "str",
                    "raiden.messages.Message"
                ],
                "signature": [
                    "bytes",
                    "str",
                    "raiden.messages.Message"
                ]
            }
        },
        "verify_ecdsa": {
            "name": "verify_ecdsa",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "int",
                    "str"
                ],
                "signature": [
                    "bytes",
                    "int",
                    "str"
                ],
                "public_key": [
                    "bytes",
                    "int",
                    "str",
                    "keys.GlobalKeys",
                    "umbral.keys.UmbralPublicKey",
                    "Optional[str]"
                ]
            }
        },
        "__generate_self_signed_certificate": {
            "name": "__generate_self_signed_certificate",
            "location": 174,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "curve": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "bytes"
                ],
                "private_key": [
                    "str",
                    "cryptography.hazmabackends.openssl.ec._EllipticCurvePrivateKey"
                ],
                "days_valid": [
                    "int",
                    "str",
                    "datetime.date"
                ],
                "checksum_address": [
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "generate_teacher_certificate": {
            "name": "generate_teacher_certificate",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "checksum_address": [
                    "str",
                    "dict"
                ]
            }
        },
        "generate_self_signed_certificate": {
            "name": "generate_self_signed_certificate",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "read_certificate_pseudonym": {
            "name": "read_certificate_pseudonym",
            "location": 221,
            "return": [
                "str",
                "Union[str, List[str]]",
                "int"
            ],
            "arguments": {
                "certificate": [
                    "bool"
                ]
            }
        },
        "encrypt_and_sign": {
            "name": "encrypt_and_sign",
            "location": 232,
            "return": [
                "list",
                "str",
                "bytes",
                "Tuple[nucypher.crypto.kits.UmbralMessageKit, umbral.signing.Signature]"
            ],
            "arguments": {
                "recipient_pubkey_enc": [
                    "int",
                    "Callable",
                    "str"
                ],
                "plaintext": [
                    "int",
                    "Callable",
                    "str"
                ],
                "signer": [
                    "str"
                ],
                "sign_plaintext": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/crypto/constants.py": {},
    "nucypher-master/nucypher/crypto/kits.py": {
        "CryptoKit.split_bytes": {
            "name": "split_bytes",
            "location": 33,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "bool",
                    "Type[T]"
                ],
                "some_bytes": [
                    "int",
                    "str"
                ]
            }
        },
        "CryptoKit.from_bytes": {
            "name": "from_bytes",
            "location": 41,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Iterable[str]",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "int",
                    "bool"
                ],
                "some_bytes": [
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "MessageKit.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsule": [
                    "str",
                    "bool"
                ],
                "sender_verifying_key": [
                    "Tuple[int, int]",
                    "Optional[bytes]",
                    "bytearray",
                    "bytes"
                ],
                "ciphertext": [
                    "str",
                    "bool"
                ],
                "signature": [
                    "str",
                    "bool"
                ]
            }
        },
        "MessageKit.to_bytes": {
            "name": "to_bytes",
            "location": 61,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "include_alice_pubkey": [
                    "bytes",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MessageKit.splitter": {
            "name": "splitter",
            "location": 74,
            "return": [
                "float",
                "T",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "MessageKit.signature": {
            "name": "signature",
            "location": 81,
            "return": [
                "int",
                "Set[str]",
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageKit.__bytes__": {
            "name": "__bytes__",
            "location": 84,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyMessageKit.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyMessageKit.sender": {
            "name": "sender",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enrico": [
                    "str",
                    "int"
                ]
            }
        },
        "PolicyMessageKit.__bytes__": {
            "name": "__bytes__",
            "location": 106,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "int",
                    "bool",
                    "float"
                ],
                "signer": [
                    "int",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "RevocationKit.__iter__": {
            "name": "__iter__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.__getitem__": {
            "name": "__getitem__",
            "location": 124,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "Set[str]",
                    "Iterable[str]",
                    "Iterable[int]",
                    "int"
                ]
            }
        },
        "RevocationKit.__len__": {
            "name": "__len__",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.__eq__": {
            "name": "__eq__",
            "location": 130,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "RevocationKit.revokable_addresses": {
            "name": "revokable_addresses",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevocationKit.add_confirmation": {
            "name": "add_confirmation",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "signed_receipt": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/crypto/powers.py": {
        "CryptoPower.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "power_ups": [
                    "Optional[str]",
                    "list",
                    "str",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "CryptoPower.__contains__": {
            "name": "__contains__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "CryptoPower.consume_power_up": {
            "name": "consume_power_up",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "power_up": [
                    "eth.abc.MiningChainAPI",
                    "Optional[Callable]"
                ]
            }
        },
        "CryptoPower.power_ups": {
            "name": "power_ups",
            "location": 83,
            "return": [
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "power_up_class": [
                    "bool",
                    "Hashable",
                    "Set[str]",
                    "Type[T]",
                    "Dict[str, Type]"
                ]
            }
        },
        "CryptoPowerUp.activate": {
            "name": "activate",
            "location": 96,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "signer": [
                    "str",
                    "Iterable[str]"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "cache": [
                    "str"
                ]
            }
        },
        "TransactingPower.__enter__": {
            "name": "__enter__",
            "location": 136,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.__exit__": {
            "name": "__exit__",
            "location": 139,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "TransactingPower.blockchain": {
            "name": "blockchain",
            "location": 147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.is_active": {
            "name": "is_active",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.account": {
            "name": "account",
            "location": 160,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.is_unlocked": {
            "name": "is_unlocked",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.is_device": {
            "name": "is_device",
            "location": 168,
            "return": [
                "int",
                "Iterable[Any]",
                "Optional[str]",
                "bool",
                "List[List[str]]",
                "Match"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.activate": {
            "name": "activate",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "List[str]",
                    "Union[List, str]"
                ]
            }
        },
        "TransactingPower.lock_account": {
            "name": "lock_account",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactingPower.unlock_account": {
            "name": "unlock_account",
            "location": 186,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "dict"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "TransactingPower.sign_message": {
            "name": "sign_message",
            "location": 196,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool"
                ]
            }
        },
        "TransactingPower.sign_transaction": {
            "name": "sign_transaction",
            "location": 202,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_dict": [
                    "bool",
                    "Type[T]",
                    "Mapping[Any, Any]",
                    "Optional[Any]"
                ]
            }
        },
        "KeyPairBasedPower.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "str",
                    "umbral.curvebn.CurveBN",
                    "keys.NamespaceKeys",
                    "keys.CleanupKeys",
                    "umbral.keys.UmbralPrivateKey",
                    "bytes"
                ],
                "keypair": [
                    "bytes",
                    "str",
                    "umbral.keys.UmbralPrivateKey"
                ]
            }
        },
        "KeyPairBasedPower.__getattr__": {
            "name": "__getattr__",
            "location": 236,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict"
                ]
            }
        },
        "KeyPairBasedPower.public_key": {
            "name": "public_key",
            "location": 246,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatingPower.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keying_material": [
                    "Union[bytes, str, None]",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[Union[str, int]]"
                ],
                "password": [
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "DelegatingPower._get_privkey_from_label": {
            "name": "_get_privkey_from_label",
            "location": 280,
            "return": [
                "str",
                "bytes",
                "dict",
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Awaitable[Any]",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "DelegatingPower.get_pubkey_from_label": {
            "name": "get_pubkey_from_label",
            "location": 283,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DelegatingPower.generate_kfrags": {
            "name": "generate_kfrags",
            "location": 286,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Tuple[bool, bool, bool]"
            ],
            "arguments": {
                "self": [],
                "bob_pubkey_enc": [
                    "int",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "signer": [
                    "int",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "label": [
                    "Tuple[int]",
                    "Sequence[Sequence[float]]",
                    "Dict[int, str]",
                    "List[str]",
                    "str"
                ],
                "m": [
                    "int",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "n": [
                    "int",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "DelegatingPower.get_decrypting_power_from_label": {
            "name": "get_decrypting_power_from_label",
            "location": 314,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, int]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/crypto/signing.py": {
        "SignatureStamp.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verifying_key": [
                    "bytes",
                    "Union[bytes, umbral.keys.UmbralPublicKey]",
                    "str"
                ],
                "signer": [
                    "Mapping[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "SignatureStamp.__bytes__": {
            "name": "__bytes__",
            "location": 38,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__call__": {
            "name": "__call__",
            "location": 41,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__hash__": {
            "name": "__hash__",
            "location": 44,
            "return": [
                "bytes",
                "dict",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__eq__": {
            "name": "__eq__",
            "location": 47,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "SignatureStamp.__add__": {
            "name": "__add__",
            "location": 50,
            "return": [
                "str",
                "Tuple[float, float]",
                "List[str]",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "List[str]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str",
                    "umbral.curvebn.CurveBN"
                ]
            }
        },
        "SignatureStamp.__radd__": {
            "name": "__radd__",
            "location": 53,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "SignatureStamp.__len__": {
            "name": "__len__",
            "location": 56,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__bool__": {
            "name": "__bool__",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.as_umbral_pubkey": {
            "name": "as_umbral_pubkey",
            "location": 62,
            "return": [
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.fingerprint": {
            "name": "fingerprint",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrangerStamp.__call__": {
            "name": "__call__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/crypto/splitters.py": {},
    "nucypher-master/nucypher/crypto/utils.py": {
        "fingerprint_from_key": {
            "name": "fingerprint_from_key",
            "location": 29,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "public_key": [
                    "str"
                ]
            }
        },
        "construct_policy_id": {
            "name": "construct_policy_id",
            "location": 37,
            "return": [
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "label": [
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "stamp": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "canonical_address_from_umbral_key": {
            "name": "canonical_address_from_umbral_key",
            "location": 45,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "public_key": [
                    "bytes",
                    "Union[str, bytes]",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "recover_pubkey_from_signature": {
            "name": "recover_pubkey_from_signature",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "Optional[bytes]",
                    "str",
                    "Sequence[str]"
                ],
                "signature": [
                    "int",
                    "bytes",
                    "List[bytes]",
                    "str"
                ],
                "v_value_to_try": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "is_prehashed": [
                    "dict",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "type",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "get_signature_recovery_value": {
            "name": "get_signature_recovery_value",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "str",
                    "dict",
                    "bytes"
                ],
                "signature": [
                    "bytes",
                    "str"
                ],
                "public_key": [
                    "str",
                    "Optional[str]",
                    "TextIO",
                    "Dict[str, str]"
                ],
                "is_prehashed": [
                    "str"
                ]
            }
        },
        "get_coordinates_as_bytes": {
            "name": "get_coordinates_as_bytes",
            "location": 120,
            "return": [
                "bool",
                "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                "Tuple[int, int]"
            ],
            "arguments": {
                "point": [
                    "dict",
                    "bytes",
                    "ByteString",
                    "Tuple[int, int, bytearray]",
                    "Callable[[bytes], bytes]",
                    "List[bytes]",
                    "int"
                ],
                "x_coord": [
                    "float",
                    "int",
                    "str"
                ],
                "y_coord": [
                    "float",
                    "int",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/crypto/__init__.py": {},
    "nucypher-master/nucypher/datastore/datastore.py": {
        "Datastore.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqlalchemy_engine": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Datastore.__commit": {
            "name": "__commit",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "Datastore.add_key": {
            "name": "add_key",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "umbral.keys.UmbralPublicKey",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "is_signing": [
                    "str",
                    "umbral.keys.UmbralPublicKey",
                    "List[int]"
                ],
                "session": [
                    "str",
                    "dict"
                ]
            }
        },
        "Datastore.get_key": {
            "name": "get_key",
            "location": 90,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.session.Session",
                    "models.Queue",
                    "str"
                ],
                "session": [
                    "zerver.models.UserProfile",
                    "grouper.models.base.session.Session",
                    "str"
                ]
            }
        },
        "Datastore.del_key": {
            "name": "del_key",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "bytes",
                    "sqlalchemy.orm.session.Session",
                    "Dict[str, Any]",
                    "T",
                    "tracim.models.auth.User",
                    "dict"
                ],
                "session": [
                    "grouper.models.user.User",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "Datastore.add_policy_arrangement": {
            "name": "add_policy_arrangement",
            "location": 122,
            "return": [
                "int",
                "Iterable[str]",
                "List[django.db.models.query.QuerySet]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "expiration": [
                    "int",
                    "str",
                    "Optional[int]",
                    "raiden.utils.Address",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "arrangement_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "raiden.utils.Address",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "kfrag": [
                    "int",
                    "str",
                    "Optional[int]",
                    "raiden.utils.Address",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "alice_verifying_key": [
                    "bool",
                    "bytes",
                    "Union[bytes, str, None]",
                    "Union[Mapping, str]"
                ],
                "alice_signature": [
                    "int",
                    "str",
                    "Optional[int]",
                    "raiden.utils.Address",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "session": [
                    "Optional[str]",
                    "Callable",
                    "Optional[Dict]",
                    "Dict[int, dict]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Datastore.get_policy_arrangement": {
            "name": "get_policy_arrangement",
            "location": 154,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "bytes",
                    "int",
                    "sqlalchemy.orm.Session",
                    "grouper.models.base.session.Session",
                    "transfer.models.ArticleID"
                ],
                "session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "List[int]"
                ]
            }
        },
        "Datastore.get_all_policy_arrangements": {
            "name": "get_all_policy_arrangements",
            "location": 166,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "Datastore.attach_kfrag_to_saved_arrangement": {
            "name": "attach_kfrag_to_saved_arrangement",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "str",
                    "raiden_contracts.utils.type_aliases.PrivateKey",
                    "bytes"
                ],
                "id_as_hex": [
                    "int",
                    "Optional[int]",
                    "order.transfer.models.OrderNumberSequenceID"
                ],
                "kfrag": [
                    "int",
                    "str",
                    "bool",
                    "rchain.crypto.PrivateKey",
                    "bytes"
                ],
                "session": [
                    "str",
                    "Type[T]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Datastore.del_policy_arrangement": {
            "name": "del_policy_arrangement",
            "location": 189,
            "return": [
                "int",
                "Sequence[int]",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "bytes",
                    "int",
                    "sqlalchemy.orm.Session",
                    "metrics_backend.utils.ChannelIdentifier",
                    "transfer.models.ChannelID"
                ],
                "session": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "str"
                ]
            }
        },
        "Datastore.del_expired_policy_arrangements": {
            "name": "del_expired_policy_arrangements",
            "location": 199,
            "return": [
                "int",
                "Sequence[int]",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "str",
                    "myaku.datastore.Query"
                ],
                "now": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "float",
                    "Optional[str]",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "Datastore.save_workorder": {
            "name": "save_workorder",
            "location": 217,
            "return": [
                "int",
                "Sequence[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "bob_verifying_key": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "bob_signature": [
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[str, Any]",
                    "float"
                ],
                "arrangement_id": [
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[str, Any]",
                    "float"
                ],
                "session": [
                    "Optional[str]",
                    "Optional[zerver.models.UserProfile]",
                    "str"
                ]
            }
        },
        "Datastore.get_workorders": {
            "name": "get_workorders",
            "location": 242,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "transfer.models.ListID"
                ],
                "bob_verifying_key": [
                    "str",
                    "int",
                    "bytes"
                ],
                "session": [
                    "sqlalchemy.orm.Session",
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "Datastore.del_workorders": {
            "name": "del_workorders",
            "location": 273,
            "return": [
                "int",
                "Sequence[int]",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "session": [
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "sqlalchemy.orm.scoping.scoped_session",
                    "dict",
                    "int",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/nucypher/datastore/keypairs.py": {
        "Keypair.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "bytes",
                    "str",
                    "keys.NamespaceKeys"
                ],
                "public_key": [
                    "bytes",
                    "Tuple[int, int]",
                    "keys.MailboxKeys",
                    "keys.NamespaceKeys",
                    "int"
                ],
                "generate_keys_if_needed": [
                    "bool",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "Keypair.serialize_pubkey": {
            "name": "serialize_pubkey",
            "location": 69,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "as_b64": [
                    "list",
                    "bytes",
                    "Tuple[int, int, bytearray]",
                    "bool",
                    "int"
                ]
            }
        },
        "Keypair.fingerprint": {
            "name": "fingerprint",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecryptingKeypair.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecryptingKeypair.decrypt": {
            "name": "decrypt",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message_kit": [
                    "int",
                    "Callable"
                ]
            }
        },
        "SigningKeypair.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SigningKeypair.sign": {
            "name": "sign",
            "location": 119,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodSupervisionType]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "IO"
                ]
            }
        },
        "SigningKeypair.get_signature_stamp": {
            "name": "get_signature_stamp",
            "location": 130,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "HostingKeypair.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "bytes",
                    "Optional[bytes]"
                ],
                "checksum_address": [
                    "str",
                    "bytes",
                    "Optional[bytes]"
                ],
                "private_key": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "keys.CleanupKeys",
                    "keys.NamespaceKeys"
                ],
                "curve": [
                    "bytes",
                    "Union[bytes, str]",
                    "str",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]"
                ],
                "certificate": [
                    "str",
                    "Union[bytes, str]",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]",
                    "argonautica.config.Backend",
                    "int"
                ],
                "certificate_filepath": [
                    "str",
                    "Union[bytes, str]",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]"
                ],
                "generate_certificate": [
                    "bool",
                    "Iterable[Tuple[str, Any]]",
                    "Sequence[str]",
                    "str",
                    "int"
                ]
            }
        },
        "HostingKeypair.get_deployer": {
            "name": "get_deployer",
            "location": 192,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "rest_app": [
                    "dict",
                    "bool",
                    "Dict[Any, int]",
                    "str",
                    "int"
                ],
                "port": [
                    "dict",
                    "bool",
                    "Dict[Any, int]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/nucypher/datastore/threading.py": {
        "ThreadedSession.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqlalchemy_engine": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ThreadedSession.__enter__": {
            "name": "__enter__",
            "location": 25,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedSession.__exit__": {
            "name": "__exit__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "nucypher-master/nucypher/datastore/__init__.py": {},
    "nucypher-master/nucypher/datastore/db/models.py": {
        "Key.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "str",
                    "bytes",
                    "List[Callable]",
                    "list",
                    "int"
                ],
                "key_data": [
                    "dict",
                    "int"
                ],
                "is_signing": [
                    "str",
                    "bytes",
                    "List[Callable]",
                    "list",
                    "int"
                ]
            }
        },
        "Key.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.from_umbral_key": {
            "name": "from_umbral_key",
            "location": 43,
            "return": [
                "str",
                "dict",
                "Dict[rchain.crypto.PrivateKey, int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "List[str]"
                ],
                "umbral_key": [
                    "bytes",
                    "str",
                    "raiden_contracts.utils.type_aliases.PrivateKey",
                    "List[str]"
                ],
                "is_signing": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "PolicyArrangement.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expiration": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "id": [
                    "str",
                    "Optional[str]"
                ],
                "kfrag": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "alice_verifying_key": [
                    "Optional[float]",
                    "Tuple[int, int]",
                    "Union[str, int]",
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]",
                    "MutableMapping",
                    "Optional[Dict[str, Any]]"
                ],
                "alice_signature": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "PolicyArrangement.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workorder.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bob_verifying_key_id": [
                    "str",
                    "Optional[str]"
                ],
                "bob_signature": [
                    "str",
                    "bool",
                    "Type",
                    "int",
                    "Iterable[List[Any]]",
                    "Optional[utils.OutputCallbackType]",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "arrangement_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "Workorder.__repr__": {
            "name": "__repr__",
            "location": 94,
            "return": [
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/datastore/db/__init__.py": {
        "set_secure_delete_pragma": {
            "name": "set_secure_delete_pragma",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "dbapi_connection": [
                    "str",
                    "int"
                ],
                "connection_record": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/network/exceptions.py": {},
    "nucypher-master/nucypher/network/middleware.py": {
        "NucypherMiddlewareClient.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "NucypherMiddlewareClient.response_cleaner": {
            "name": "response_cleaner",
            "location": 42,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "response": []
            }
        },
        "NucypherMiddlewareClient.verify_and_parse_node_or_host_and_port": {
            "name": "verify_and_parse_node_or_host_and_port",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_or_sprout": [
                    "float",
                    "dict",
                    "list"
                ],
                "host": [
                    "int"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "NucypherMiddlewareClient.parse_node_or_host_and_port": {
            "name": "parse_node_or_host_and_port",
            "location": 58,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "set",
                    "list",
                    "int",
                    "str",
                    "Set[str]"
                ],
                "host": [
                    "str",
                    "Tuple[str]"
                ],
                "port": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "NucypherMiddlewareClient.invoke_method": {
            "name": "invoke_method",
            "location": 72,
            "return": [
                "dict",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "NucypherMiddlewareClient.clean_params": {
            "name": "clean_params",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_kwargs": [
                    "Exception"
                ]
            }
        },
        "NucypherMiddlewareClient.node_information": {
            "name": "node_information",
            "location": 85,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "int",
                "twisted.python.failure.Failure",
                "str"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "MutableMapping[str, Any]"
                ],
                "port": [
                    "int",
                    "MutableMapping[str, Any]"
                ],
                "certificate_filepath": [
                    "int",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "NucypherMiddlewareClient.__getattr__": {
            "name": "__getattr__",
            "location": 94,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[str], T]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method_name": [
                    "str",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "NucypherMiddlewareClient.node_selector": {
            "name": "node_selector",
            "location": 134,
            "return": [
                "str",
                "Iterable[Any]",
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "NucypherMiddlewareClient.__len__": {
            "name": "__len__",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestMiddleware.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "RestMiddleware.get_certificate": {
            "name": "get_certificate",
            "location": 163,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "str",
                    "int"
                ],
                "retry_attempts": [
                    "int",
                    "bool"
                ],
                "retry_rate": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Union[str, int]"
                ],
                "current_attempt": [
                    "int",
                    "str"
                ]
            }
        },
        "RestMiddleware.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 189,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "arrangement": [
                    "Optional[Exception]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "RestMiddleware.enact_policy": {
            "name": "enact_policy",
            "location": 197,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "kfrag_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "payload": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "RestMiddleware.reencrypt": {
            "name": "reencrypt",
            "location": 204,
            "return": [
                "list",
                "str",
                "bytes",
                "Tuple[nucypher.crypto.kits.UmbralMessageKit, umbral.signing.Signature]"
            ],
            "arguments": {
                "self": [],
                "work_order": [
                    "Optional[Exception]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "RestMiddleware.revoke_arrangement": {
            "name": "revoke_arrangement",
            "location": 210,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int"
                ],
                "revocation": [
                    "int"
                ]
            }
        },
        "RestMiddleware.get_competitive_rate": {
            "name": "get_competitive_rate",
            "location": 219,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestMiddleware.get_treasure_map_from_node": {
            "name": "get_treasure_map_from_node",
            "location": 222,
            "return": [
                "Dict[str, Any]",
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "map_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Union[str, int]"
                ]
            }
        },
        "RestMiddleware.put_treasure_map_on_node": {
            "name": "put_treasure_map_on_node",
            "location": 228,
            "return": [
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "map_id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "map_payload": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "RestMiddleware.send_work_order_payload_to_ursula": {
            "name": "send_work_order_payload_to_ursula",
            "location": 235,
            "return": [
                "Optional[Tuple]",
                "List[Callable]",
                "dict",
                "Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "work_order": [
                    "str",
                    "int",
                    "Callable[[str], None]",
                    "List[str]"
                ]
            }
        },
        "RestMiddleware.check_rest_availability": {
            "name": "check_rest_availability",
            "location": 243,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "initiator": [
                    "str",
                    "bool"
                ],
                "responder": [
                    "str",
                    "bool"
                ]
            }
        },
        "RestMiddleware.get_nodes_via_rest": {
            "name": "get_nodes_via_rest",
            "location": 251,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict",
                    "Union[str, dict]",
                    "Optional[str]"
                ],
                "announce_nodes": [
                    "bytes",
                    "str",
                    "Dict[bytes, bytes]",
                    "umbral.keys.UmbralPublicKey"
                ],
                "nodes_i_need": [
                    "str",
                    "int",
                    "List[str]",
                    "Callable[[str], str]",
                    "bool",
                    "list"
                ],
                "fleet_checksum": [
                    "str",
                    "int",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "NucypherMiddlewareClient.__getattr__.method_wrapper": {
            "name": "method_wrapper",
            "location": 99,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "float"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Tuple[str]",
                    "IO",
                    "bool"
                ],
                "node_or_sprout": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "host": [
                    "str",
                    "int",
                    "Callable"
                ],
                "port": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "certificate_filepath": [
                    "int",
                    "dict",
                    "Optional[Any]"
                ]
            }
        },
        "RestMiddleware.UnexpectedResponse.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ],
                "status": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "RestMiddleware.NotFound.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RestMiddleware.BadRequest.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "Optional[int]",
                    "Type[\"ExtractableWordnet\"]",
                    "dict"
                ]
            }
        }
    },
    "nucypher-master/nucypher/network/nodes.py": {
        "icon_from_checksum": {
            "name": "icon_from_checksum",
            "location": 60,
            "return": [],
            "arguments": {
                "checksum": [],
                "nickname_metadata": [],
                "number_of_nodes": []
            }
        },
        "FleetStateTracker.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.__setitem__": {
            "name": "__setitem__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "FleetStateTracker.__getitem__": {
            "name": "__getitem__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "FleetStateTracker.__bool__": {
            "name": "__bool__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.__contains__": {
            "name": "__contains__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "FleetStateTracker.__iter__": {
            "name": "__iter__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.__len__": {
            "name": "__len__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.__eq__": {
            "name": "__eq__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FleetStateTracker.__repr__": {
            "name": "__repr__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.checksum": {
            "name": "checksum",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "checksum_value": []
            }
        },
        "FleetStateTracker.nickname": {
            "name": "nickname",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.nickname_metadata": {
            "name": "nickname_metadata",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.icon": {
            "name": "icon",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.addresses": {
            "name": "addresses",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.icon_html": {
            "name": "icon_html",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.snapshot": {
            "name": "snapshot",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.record_fleet_state": {
            "name": "record_fleet_state",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "additional_nodes_to_track": []
            }
        },
        "FleetStateTracker.start_tracking_state": {
            "name": "start_tracking_state",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "additional_nodes_to_track": []
            }
        },
        "FleetStateTracker.sorted": {
            "name": "sorted",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.shuffled": {
            "name": "shuffled",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.abridged_states_dict": {
            "name": "abridged_states_dict",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FleetStateTracker.abridged_state_details": {
            "name": "abridged_state_details",
            "location": 212,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "NodeSprout.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "node_metadata": []
            }
        },
        "NodeSprout.__hash__": {
            "name": "__hash__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.__repr__": {
            "name": "__repr__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.__bytes__": {
            "name": "__bytes__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.stamp": {
            "name": "stamp",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSprout.mature": {
            "name": "mature",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "domains": [],
                "node_class": [],
                "network_middleware": [],
                "start_learning_now": [],
                "learn_on_same_thread": [],
                "known_nodes": [],
                "seed_nodes": [],
                "node_storage": [],
                "save_metadata": [],
                "abort_on_learning_error": [],
                "lonely": []
            }
        },
        "Learner.known_nodes": {
            "name": "known_nodes",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.load_seednodes": {
            "name": "load_seednodes",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "read_storage": [],
                "retry_attempts": []
            }
        },
        "Learner.read_nodes_from_storage": {
            "name": "read_nodes_from_storage",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.remember_node": {
            "name": "remember_node",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "force_verification_recheck": [],
                "record_fleet_state": [],
                "eager": []
            }
        },
        "Learner.start_learning_loop": {
            "name": "start_learning_loop",
            "location": 493,
            "return": [],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "Learner.stop_learning_loop": {
            "name": "stop_learning_loop",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "Learner.handle_learning_errors": {
            "name": "handle_learning_errors",
            "location": 533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner._crash_gracefully": {
            "name": "_crash_gracefully",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "failure": []
            }
        },
        "Learner.select_teacher_nodes": {
            "name": "select_teacher_nodes",
            "location": 554,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.cycle_teacher_node": {
            "name": "cycle_teacher_node",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.current_teacher_node": {
            "name": "current_teacher_node",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "cycle": []
            }
        },
        "Learner.learn_about_nodes_now": {
            "name": "learn_about_nodes_now",
            "location": 589,
            "return": [],
            "arguments": {
                "self": [],
                "force": []
            }
        },
        "Learner.keep_learning_about_nodes": {
            "name": "keep_learning_about_nodes",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Learner.learn_about_specific_nodes": {
            "name": "learn_about_specific_nodes",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "addresses": []
            }
        },
        "Learner.block_until_number_of_known_nodes_is": {
            "name": "block_until_number_of_known_nodes_is",
            "location": 613,
            "return": [],
            "arguments": {
                "self": [],
                "number_of_nodes_to_know": [],
                "timeout": [],
                "learn_on_this_thread": [],
                "eager": []
            }
        },
        "Learner.block_until_specific_nodes_are_known": {
            "name": "block_until_specific_nodes_are_known",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "addresses": [],
                "timeout": [],
                "allow_missing": [],
                "learn_on_this_thread": []
            }
        },
        "Learner._adjust_learning": {
            "name": "_adjust_learning",
            "location": 688,
            "return": [],
            "arguments": {
                "self": [],
                "node_list": []
            }
        },
        "Learner._push_certain_newly_discovered_nodes_here": {
            "name": "_push_certain_newly_discovered_nodes_here",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "queue_to_push": [],
                "node_addresses": []
            }
        },
        "Learner.network_bootstrap": {
            "name": "network_bootstrap",
            "location": 714,
            "return": [],
            "arguments": {
                "self": [],
                "node_list": []
            }
        },
        "Learner.get_nodes_by_ids": {
            "name": "get_nodes_by_ids",
            "location": 719,
            "return": [],
            "arguments": {
                "self": [],
                "node_ids": []
            }
        },
        "Learner.write_node_metadata": {
            "name": "write_node_metadata",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "serializer": []
            }
        },
        "Learner.verify_from": {
            "name": "verify_from",
            "location": 734,
            "return": [],
            "arguments": {
                "self": [],
                "stranger": [],
                "message_kit": [],
                "signature": []
            }
        },
        "Learner.learn_from_teacher_node": {
            "name": "learn_from_teacher_node",
            "location": 764,
            "return": [],
            "arguments": {
                "self": [],
                "eager": []
            }
        },
        "Teacher.__init__": {
            "name": "__init__",
            "location": 933,
            "return": [],
            "arguments": {
                "self": [],
                "domains": [],
                "certificate": [],
                "certificate_filepath": [],
                "interface_signature": [],
                "timestamp": [],
                "decentralized_identity_evidence": []
            }
        },
        "Teacher.set_cert_storage_function": {
            "name": "set_cert_storage_function",
            "location": 997,
            "return": [],
            "arguments": {
                "cls": [],
                "node_storage_function": []
            }
        },
        "Teacher.mature": {
            "name": "mature",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.set_federated_mode": {
            "name": "set_federated_mode",
            "location": 1007,
            "return": [],
            "arguments": {
                "cls": [],
                "federated_only": []
            }
        },
        "Teacher.from_tls_hosting_power": {
            "name": "from_tls_hosting_power",
            "location": 1011,
            "return": [],
            "arguments": {
                "cls": [],
                "tls_hosting_power": []
            }
        },
        "Teacher.seed_node_metadata": {
            "name": "seed_node_metadata",
            "location": 1020,
            "return": [],
            "arguments": {
                "self": [],
                "as_teacher_uri": []
            }
        },
        "Teacher.sorted_nodes": {
            "name": "sorted_nodes",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.bytestring_of_known_nodes": {
            "name": "bytestring_of_known_nodes",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.update_snapshot": {
            "name": "update_snapshot",
            "location": 1043,
            "return": [],
            "arguments": {
                "self": [],
                "checksum": [],
                "updated": [],
                "number_of_known_nodes": []
            }
        },
        "Teacher._stamp_has_valid_signature_by_worker": {
            "name": "_stamp_has_valid_signature_by_worker",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher._worker_is_bonded_to_staker": {
            "name": "_worker_is_bonded_to_staker",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "Teacher._staker_is_really_staking": {
            "name": "_staker_is_really_staking",
            "location": 1094,
            "return": [],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "Teacher.validate_worker": {
            "name": "validate_worker",
            "location": 1114,
            "return": [],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "Teacher.validate_metadata": {
            "name": "validate_metadata",
            "location": 1148,
            "return": [],
            "arguments": {
                "self": [],
                "registry": []
            }
        },
        "Teacher.verify_node": {
            "name": "verify_node",
            "location": 1165,
            "return": [],
            "arguments": {
                "self": [],
                "network_middleware_client": [],
                "registry": [],
                "certificate_filepath": [],
                "force": []
            }
        },
        "Teacher.decentralized_identity_evidence": {
            "name": "decentralized_identity_evidence",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.worker_address": {
            "name": "worker_address",
            "location": 1243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.substantiate_stamp": {
            "name": "substantiate_stamp",
            "location": 1251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.validate_interface": {
            "name": "validate_interface",
            "location": 1261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher._signable_interface_info_message": {
            "name": "_signable_interface_info_message",
            "location": 1274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher._sign_and_date_interface_info": {
            "name": "_sign_and_date_interface_info",
            "location": 1278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher._interface_signature": {
            "name": "_interface_signature",
            "location": 1284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.timestamp": {
            "name": "timestamp",
            "location": 1293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.timestamp_bytes": {
            "name": "timestamp_bytes",
            "location": 1301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.nickname_icon": {
            "name": "nickname_icon",
            "location": 1309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.nickname_icon_html": {
            "name": "nickname_icon_html",
            "location": 1312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.nickname_icon_details": {
            "name": "nickname_icon_details",
            "location": 1326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.known_nodes_details": {
            "name": "known_nodes_details",
            "location": 1337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.node_details": {
            "name": "node_details",
            "location": 1344,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "Teacher.abridged_node_details": {
            "name": "abridged_node_details",
            "location": 1371,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/network/protocols.py": {
        "parse_node_uri": {
            "name": "parse_node_uri",
            "location": 26,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "InterfaceInfo.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "InterfaceInfo.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.from_bytes": {
            "name": "from_bytes",
            "location": 75,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "url_string": [
                    "str",
                    "bytes",
                    "List[int]",
                    "AnyStr"
                ]
            }
        },
        "InterfaceInfo.uri": {
            "name": "uri",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.formal_uri": {
            "name": "formal_uri",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.__bytes__": {
            "name": "__bytes__",
            "location": 89,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.__add__": {
            "name": "__add__",
            "location": 92,
            "return": [
                "str",
                "bytearray",
                "Union[str, bytes]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bytes",
                    "dict",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "InterfaceInfo.__radd__": {
            "name": "__radd__",
            "location": 95,
            "return": [
                "bool",
                "models.characters.states.AttributeType",
                "type",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "InterfaceInfo.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/network/server.py": {
        "make_rest_app": {
            "name": "make_rest_app",
            "location": 79,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "db_filepath": [
                    "str",
                    "int",
                    "bool"
                ],
                "this_node": [
                    "str",
                    "int",
                    "bool"
                ],
                "serving_domains": [
                    "str",
                    "int",
                    "bool"
                ],
                "log": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ProxyRESTServer.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rest_host": [
                    "dict",
                    "Exception",
                    "str"
                ],
                "rest_port": [
                    "dict",
                    "Exception",
                    "str"
                ],
                "hosting_power": [
                    "Callable",
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "rest_app": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "datastore": [
                    "Callable",
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "ProxyRESTServer.rest_url": {
            "name": "rest_url",
            "location": 75,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_rest_app.public_information": {
            "name": "public_information",
            "location": 114,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "make_rest_app.ping": {
            "name": "ping",
            "location": 125,
            "return": [
                "Dict[str, Any]",
                "str",
                "botocore.exceptions.ClientError",
                "Optional[Dict]"
            ],
            "arguments": {}
        },
        "make_rest_app.all_known_nodes": {
            "name": "all_known_nodes",
            "location": 164,
            "return": [
                "dict",
                "int",
                "Collection[Any]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "make_rest_app.node_metadata_exchange": {
            "name": "node_metadata_exchange",
            "location": 175,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "make_rest_app.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 236,
            "return": [
                "int",
                "twisted.python.failure.Failure",
                "List[str]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "make_rest_app.set_policy": {
            "name": "set_policy",
            "location": 256,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Dict[int, dict]",
                "Optional[Dict[str, Any]]",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "id_as_hex": [
                    "str",
                    "Optional[str]",
                    "django.db.models.QuerySet",
                    "List[int]",
                    "Optional[bool]",
                    "raiden.utils.Secret"
                ]
            }
        },
        "make_rest_app.revoke_arrangement": {
            "name": "revoke_arrangement",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "id_as_hex": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "make_rest_app.reencrypt_via_rest": {
            "name": "reencrypt_via_rest",
            "location": 339,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "id_as_hex": [
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "make_rest_app.provide_treasure_map": {
            "name": "provide_treasure_map",
            "location": 383,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "treasure_map_id": [
                    "str",
                    "int"
                ]
            }
        },
        "make_rest_app.receive_treasure_map": {
            "name": "receive_treasure_map",
            "location": 402,
            "return": [
                "List[str]",
                "Optional[str]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "treasure_map_id": [
                    "str",
                    "raiden.utils.ChainID",
                    "falcon.Response"
                ]
            }
        },
        "make_rest_app.status": {
            "name": "status",
            "location": 426,
            "return": [
                "dict",
                "Response",
                "aiocometd.constants.TransportState",
                "str",
                "\"User\""
            ],
            "arguments": {}
        },
        "TLSHostingPower.__init__": {
            "name": "__init__",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "public_certificate": [
                    "int",
                    "str",
                    "float"
                ],
                "public_certificate_filepath": [
                    "int",
                    "float",
                    "pathpy.core.network.Network",
                    "str"
                ]
            }
        },
        "make_rest_app.node_metadata_exchange.learn_about_announced_nodes": {
            "name": "learn_about_announced_nodes",
            "location": 193,
            "return": [
                "set",
                "Pattern"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/nucypher/network/teachers.py": {},
    "nucypher-master/nucypher/network/trackers.py": {
        "AvailabilityTracker.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "bool",
                    "float"
                ],
                "enforce_loneliness": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AvailabilityTracker.excuses": {
            "name": "excuses",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.mild_warning": {
            "name": "mild_warning",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.medium_warning": {
            "name": "medium_warning",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.severe_warning": {
            "name": "severe_warning",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.shutdown_everything": {
            "name": "shutdown_everything",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "int"
                ],
                "halt_reactor": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "AvailabilityTracker._halt_reactor": {
            "name": "_halt_reactor",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AvailabilityTracker.handle_measurement_errors": {
            "name": "handle_measurement_errors",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crash_on_error": [
                    "bool",
                    "Callable[[int], None]",
                    "str",
                    "Sequence[Any]"
                ]
            }
        },
        "AvailabilityTracker.status": {
            "name": "status",
            "location": 119,
            "return": [
                "str",
                "set",
                "List[Dict[str, str]]",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.running": {
            "name": "running",
            "location": 128,
            "return": [
                "str",
                "Callable[[Mapping], Awaitable]",
                "Callable[[], Awaitable[Mapping]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.start": {
            "name": "start",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "now": [
                    "int",
                    "bool",
                    "str",
                    "List[int]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "AvailabilityTracker.stop": {
            "name": "stop",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.maintain": {
            "name": "maintain",
            "location": 141,
            "return": [
                "mypy.nodes.OverloadedFuncDef"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.issue_warnings": {
            "name": "issue_warnings",
            "location": 180,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "cascade": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AvailabilityTracker.sample": {
            "name": "sample",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "float",
                    "int",
                    "numpy.random.RandomState"
                ]
            }
        },
        "AvailabilityTracker.score": {
            "name": "score",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvailabilityTracker.record": {
            "name": "record",
            "location": 198,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[int]",
                    "str",
                    "nucypher.config.storages.NodeStorage"
                ],
                "reason": [
                    "str",
                    "int",
                    "Callable",
                    "Union[str, Callable]",
                    "float"
                ]
            }
        },
        "AvailabilityTracker.measure_sample": {
            "name": "measure_sample",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AvailabilityTracker.measure": {
            "name": "measure",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ursula_or_sprout": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "nucypher-master/nucypher/network/__init__.py": {},
    "nucypher-master/nucypher/network/nicknames/__init__.py": {
        "nicename": {
            "name": "nicename",
            "location": 40,
            "return": [],
            "arguments": {
                "symbol": []
            }
        },
        "nickname_from_seed": {
            "name": "nickname_from_seed",
            "location": 48,
            "return": [],
            "arguments": {
                "seed": [],
                "number_of_pairs": []
            }
        }
    },
    "nucypher-master/nucypher/policy/collections.py": {
        "TreasureMap.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Mapping[str, str]]",
                    "Optional[str]"
                ],
                "destinations": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "message_kit": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "public_signature": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "hrac": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TreasureMap.prepare_for_publication": {
            "name": "prepare_for_publication",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bob_encrypting_key": [
                    "bytes",
                    "str"
                ],
                "bob_verifying_key": [
                    "bytes",
                    "Optional[str]",
                    "str"
                ],
                "alice_stamp": [
                    "bytes",
                    "int",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TreasureMap._set_payload": {
            "name": "_set_payload",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.__bytes__": {
            "name": "__bytes__",
            "location": 128,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap._verifying_key": {
            "name": "_verifying_key",
            "location": 135,
            "return": [
                "str",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.m": {
            "name": "m",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.destinations": {
            "name": "destinations",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.nodes_as_bytes": {
            "name": "nodes_as_bytes",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.add_arrangement": {
            "name": "add_arrangement",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arrangement": [
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str",
                    "float"
                ]
            }
        },
        "TreasureMap.public_id": {
            "name": "public_id",
            "location": 164,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.from_bytes": {
            "name": "from_bytes",
            "location": 175,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "T"
                ],
                "bytes_representation": [
                    "str",
                    "umbral.params.UmbralParameters",
                    "int",
                    "rotkehlchen.tests.utils.rotkehlchen.BalancesTestSetup",
                    "Dict[str, Union[str, int, bool]]"
                ],
                "verify": [
                    "int",
                    "Deque[int]"
                ]
            }
        },
        "TreasureMap.public_verify": {
            "name": "public_verify",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.orient": {
            "name": "orient",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "compass": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TreasureMap.check_for_sufficient_destinations": {
            "name": "check_for_sufficient_destinations",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.__eq__": {
            "name": "__eq__",
            "location": 220,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "bool",
                    "eth_keys.datatypes.Signature",
                    "bytearray",
                    "str"
                ]
            }
        },
        "TreasureMap.__iter__": {
            "name": "__iter__",
            "location": 223,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.__len__": {
            "name": "__len__",
            "location": 226,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.__repr__": {
            "name": "__repr__",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyCredential.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alice_verifying_key": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "label": [
                    "bool",
                    "str",
                    "List[dict]"
                ],
                "expiration": [
                    "bool",
                    "str",
                    "List[dict]"
                ],
                "policy_pubkey": [
                    "bool",
                    "str",
                    "List[dict]"
                ],
                "treasure_map": [
                    "bool",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "PolicyCredential.to_json": {
            "name": "to_json",
            "location": 247,
            "return": [
                "str",
                "src.autoks.backend.model.RawGPModelType",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyCredential.from_json": {
            "name": "from_json",
            "location": 264,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict",
                    "Optional[Exception]",
                    "str",
                    "OrderedDict"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "raiden.utils.Dict"
                ]
            }
        },
        "PolicyCredential.__eq__": {
            "name": "__eq__",
            "location": 287,
            "return": [
                "str",
                "bytes",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "WorkOrder.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bob": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ],
                "arrangement_id": [
                    "str",
                    "int"
                ],
                "alice_address": [
                    "str",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ],
                "tasks": [
                    "bool",
                    "str",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "Optional[bool]"
                ],
                "receipt_signature": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ],
                "ursula": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ],
                "blockhash": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "WorkOrder.__repr__": {
            "name": "__repr__",
            "location": 351,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]",
                "int",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.__eq__": {
            "name": "__eq__",
            "location": 357,
            "return": [
                "bool",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "WorkOrder.__len__": {
            "name": "__len__",
            "location": 360,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.construct_by_bob": {
            "name": "construct_by_bob",
            "location": 364,
            "return": [
                "Dict[str, Dict[str, int]]",
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "arrangement_id": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "alice_verifying": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bytes",
                    "int"
                ],
                "capsules": [
                    "list",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "ursula": [
                    "Optional[int]",
                    "int",
                    "list",
                    "raiden.utils.Nonce"
                ],
                "bob": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "WorkOrder.from_rest_payload": {
            "name": "from_rest_payload",
            "location": 392,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "bool",
                "Type[T]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "IO[bytes]"
                ],
                "arrangement_id": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "int"
                ],
                "rest_payload": [
                    "str",
                    "int",
                    "bytes",
                    "Callable"
                ],
                "ursula": [
                    "str",
                    "int",
                    "dict",
                    "hackathon.utils.utils.DataMessage"
                ],
                "alice_address": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "WorkOrder.payload": {
            "name": "payload",
            "location": 433,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.complete": {
            "name": "complete",
            "location": 438,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cfrags_and_signatures": [
                    "int",
                    "list",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "Callable",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "WorkOrder.sanitize": {
            "name": "sanitize",
            "location": 467,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.__init__": {
            "name": "__init__",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.__contains__": {
            "name": "__contains__",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "WorkOrderHistory.__getitem__": {
            "name": "__getitem__",
            "location": 481,
            "return": [
                "utils.Node",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "int",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "raiden.utils.Dict",
                    "List[str]",
                    "Mapping[str, utils.mssql_counters.Section]"
                ]
            }
        },
        "WorkOrderHistory.__setitem__": {
            "name": "__setitem__",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "WorkOrderHistory.__len__": {
            "name": "__len__",
            "location": 487,
            "return": [
                "bool",
                "int",
                "str",
                "mode.utils.Counter[faustypes.TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.ursulas": {
            "name": "ursulas",
            "location": 491,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.most_recent_replete": {
            "name": "most_recent_replete",
            "location": 494,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "capsule": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WorkOrderHistory.save_work_order": {
            "name": "save_work_order",
            "location": 500,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "work_order": [
                    "str"
                ],
                "as_replete": [
                    "type",
                    "int",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "raiden.utils.Any"
                ]
            }
        },
        "WorkOrderHistory.by_checksum_address": {
            "name": "by_checksum_address",
            "location": 509,
            "return": [
                "dict",
                "List[str]",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Tuple[type]"
                ]
            }
        },
        "WorkOrderHistory.by_capsule": {
            "name": "by_capsule",
            "location": 512,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "capsule": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Revocation.__init__": {
            "name": "__init__",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "str",
                    "int",
                    "Tuple[int, str]"
                ],
                "signer": [
                    "str",
                    "int",
                    "Iterable[List[Any]]",
                    "bool"
                ],
                "signature": [
                    "str",
                    "Optional[bool]",
                    "dict",
                    "int",
                    "float"
                ]
            }
        },
        "Revocation.__bytes__": {
            "name": "__bytes__",
            "location": 544,
            "return": [
                "int",
                "dict",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Revocation.__repr__": {
            "name": "__repr__",
            "location": 547,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Revocation.__len__": {
            "name": "__len__",
            "location": 550,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Revocation.__eq__": {
            "name": "__eq__",
            "location": 553,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "bool",
                    "eth_keys.datatypes.Signature",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Revocation.from_bytes": {
            "name": "from_bytes",
            "location": 557,
            "return": [
                "str",
                "Dict[str, str]",
                "tuple",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "backend.src.sheets_commands.sheeColumn",
                    "backend.src.sheets_commands.sheeGrid"
                ],
                "revocation_bytes": [
                    "Callable",
                    "Optional[float]",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Revocation.verify_signature": {
            "name": "verify_signature",
            "location": 561,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "alice_pubkey": [
                    "int"
                ]
            }
        },
        "IndisputableEvidence.__init__": {
            "name": "__init__",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "work_order": [],
                "delegating_pubkey": [
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ],
                "receiving_pubkey": [
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ],
                "verifying_pubkey": [
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ]
            }
        },
        "IndisputableEvidence.get_proof_challenge_scalar": {
            "name": "get_proof_challenge_scalar",
            "location": 605,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndisputableEvidence.precompute_values": {
            "name": "precompute_values",
            "location": 628,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndisputableEvidence.evaluation_arguments": {
            "name": "evaluation_arguments",
            "location": 728,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.PRETask.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capsule": [
                    "int",
                    "Iterator[int]",
                    "float",
                    "torch.utils.data.DataLoader",
                    "bool",
                    "Tuple[int]"
                ],
                "signature": [
                    "int",
                    "Iterator[int]",
                    "float",
                    "torch.utils.data.DataLoader",
                    "bool",
                    "Tuple[int]"
                ],
                "cfrag": [
                    "int",
                    "Iterator[int]",
                    "float",
                    "torch.utils.data.DataLoader",
                    "bool",
                    "Tuple[int]"
                ],
                "cfrag_signature": [
                    "int",
                    "Iterator[int]",
                    "float",
                    "torch.utils.data.DataLoader",
                    "bool",
                    "Tuple[int]"
                ]
            }
        },
        "WorkOrder.PRETask.get_specification": {
            "name": "get_specification",
            "location": 303,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Optional[str]",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "ursula_pubkey": [
                    "int",
                    "bool",
                    "str",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "alice_address": [
                    "int",
                    "bool",
                    "str",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "blockhash": [
                    "int",
                    "bool",
                    "str",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "ursula_identity_evidence": [
                    "int",
                    "bool",
                    "str",
                    "umbral.keys.UmbralPrivateKey"
                ]
            }
        },
        "WorkOrder.PRETask.__bytes__": {
            "name": "__bytes__",
            "location": 311,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.PRETask.from_bytes": {
            "name": "from_bytes",
            "location": 318,
            "return": [
                "Callable[[str, Any], Tuple[bytes, int]]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bytes"
                ],
                "data": [
                    "bytes",
                    "int",
                    "str",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "WorkOrder.PRETask.attach_work_result": {
            "name": "attach_work_result",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cfrag": [
                    "bool",
                    "list",
                    "int",
                    "Dict[str, Tuple[str, str]]"
                ],
                "reencryption_signature": [
                    "bool",
                    "list",
                    "int",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        }
    },
    "nucypher-master/nucypher/policy/policies.py": {
        "Arrangement.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "Dict[str, str]",
                    "List[int]",
                    "Mapping[str, Any]",
                    "bool",
                    "int",
                    "str"
                ],
                "expiration": [
                    "Dict[str, str]",
                    "List[int]",
                    "Mapping[str, Any]",
                    "bool",
                    "int",
                    "str"
                ],
                "ursula": [
                    "Dict[str, str]",
                    "List[int]",
                    "Mapping[str, Any]",
                    "bool",
                    "int",
                    "str"
                ],
                "arrangement_id": [
                    "bytes",
                    "str",
                    "int",
                    "bytearray"
                ],
                "kfrag": [
                    "Dict[str, str]",
                    "List[int]",
                    "Mapping[str, Any]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Arrangement.__bytes__": {
            "name": "__bytes__",
            "location": 84,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.from_bytes": {
            "name": "from_bytes",
            "location": 88,
            "return": [
                "raiden.utils.signer.Signer",
                "List[Dict[str, Any]]",
                "itsim.network.location.Location",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "bytes",
                    "dict"
                ],
                "arrangement_as_bytes": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "Arrangement.encrypt_payload_for_ursula": {
            "name": "encrypt_payload_for_ursula",
            "location": 94,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.payload": {
            "name": "payload",
            "location": 99,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.revoke": {
            "name": "revoke",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainArrangement.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "bool",
                    "int"
                ],
                "ursula": [
                    "bool",
                    "int"
                ],
                "rate": [
                    "int",
                    "bool",
                    "float"
                ],
                "expiration": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "duration_periods": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BlockchainArrangement.__repr__": {
            "name": "__repr__",
            "location": 144,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainArrangement.revoke": {
            "name": "revoke",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainArrangement.payload": {
            "name": "payload",
            "location": 158,
            "return": [
                "str",
                "int",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "label": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "expiration": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "bob": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "kfrags": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "List[List[Any]]"
                ],
                "public_key": [
                    "List[int]",
                    "Tuple[dict, int]",
                    "bool",
                    "Dict[str, Any]",
                    "List[float]",
                    "dict",
                    "List[str]",
                    "bytes"
                ],
                "m": [
                    "List[List[str]]",
                    "float"
                ],
                "alice_signature": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "List[List[Any]]"
                ]
            }
        },
        "Policy.n": {
            "name": "n",
            "location": 227,
            "return": [
                "float",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.id": {
            "name": "id",
            "location": 231,
            "return": [
                "bool",
                "bytes",
                "cmk.utils.type_defs.UserId",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginNameStr"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.__repr__": {
            "name": "__repr__",
            "location": 234,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.accepted_ursulas": {
            "name": "accepted_ursulas",
            "location": 238,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.hrac": {
            "name": "hrac",
            "location": 241,
            "return": [
                "str",
                "eth.vm.computation.BaseComputation",
                "dict",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.publish_treasure_map": {
            "name": "publish_treasure_map",
            "location": 257,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "bool",
                    "Any",
                    "pywirelessmbus.utils.IMSTMessage"
                ]
            }
        },
        "Policy.credential": {
            "name": "credential",
            "location": 296,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "with_treasure_map": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Policy.__assign_kfrags": {
            "name": "__assign_kfrags",
            "location": 312,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.enact": {
            "name": "enact",
            "location": 332,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "publish": [
                    "bool"
                ]
            }
        },
        "Policy.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 374,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "str",
                    "Optional[int]"
                ],
                "ursula": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "arrangement": [
                    "List[Dict]",
                    "bool"
                ]
            }
        },
        "Policy.make_arrangements": {
            "name": "make_arrangements",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "bool",
                    "int",
                    "pathpy.core.network.Network",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ],
                "handpicked_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Policy.make_arrangement": {
            "name": "make_arrangement",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Policy.sample_essential": {
            "name": "sample_essential",
            "location": 414,
            "return": [
                "typing.Set[nucypher.characters.lawful.Ursula]"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "handpicked_ursulas": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Policy.sample": {
            "name": "sample",
            "location": 417,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "handpicked_ursulas": [
                    "str",
                    "List[int]",
                    "Set[int]",
                    "Union[tuple, list]",
                    "Optional[int]"
                ]
            }
        },
        "Policy._consider_arrangements": {
            "name": "_consider_arrangements",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "bool",
                    "List[str]",
                    "Union[int, Tuple[int, int]]",
                    "List[Tuple[int, int]]",
                    "int"
                ],
                "candidate_ursulas": [
                    "List[str]",
                    "list",
                    "List[Dict]",
                    "List[List[str]]"
                ],
                "consider_everyone": [
                    "Sequence[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "FederatedPolicy.make_arrangements": {
            "name": "make_arrangements",
            "location": 471,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FederatedPolicy.sample_essential": {
            "name": "sample_essential",
            "location": 481,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "list",
                    "Optional[Union[str, Any]]",
                    "Iterable[Tuple[str, str]]",
                    "List[str]"
                ],
                "handpicked_ursulas": [
                    "List[int]",
                    "str",
                    "Set[int]",
                    "Optional[int]",
                    "list",
                    "Sequence[Hashable]"
                ]
            }
        },
        "FederatedPolicy.make_arrangement": {
            "name": "make_arrangement",
            "location": 489,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "Union[int, slice]",
                    "str"
                ]
            }
        },
        "BlockchainPolicy.__init__": {
            "name": "__init__",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "str",
                    "Union[int, float]",
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "tuple",
                    "dict"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]"
                ],
                "rate": [
                    "List[Tuple[int, float]]",
                    "abc.BaseConfig",
                    "int",
                    "float",
                    "str"
                ],
                "duration_periods": [
                    "List[Tuple[int, float]]",
                    "abc.BaseConfig",
                    "int",
                    "float",
                    "str"
                ],
                "expiration": [
                    "str",
                    "Union[int, float]",
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "tuple",
                    "dict"
                ]
            }
        },
        "BlockchainPolicy.validate_fee_value": {
            "name": "validate_fee_value",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainPolicy.generate_policy_parameters": {
            "name": "generate_policy_parameters",
            "location": 547,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "n": [
                    "Callable",
                    "raiden.utils.Callable",
                    "str",
                    "int",
                    "Optional[Any]",
                    "Optional[Tuple[int, int]]",
                    "Optional[float]"
                ],
                "duration_periods": [
                    "Optional[float]",
                    "Callable",
                    "raiden.utils.Callable",
                    "Optional[Tuple[int, int]]",
                    "str",
                    "Optional[Any]"
                ],
                "value": [
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "rate": [
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "BlockchainPolicy.__find_ursulas": {
            "name": "__find_ursulas",
            "location": 579,
            "return": [
                "str",
                "bool",
                "Tuple[str, Optional[str]]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ether_addresses": [
                    "List[str]",
                    "str",
                    "Optional[List[\"Address\"]]"
                ],
                "target_quantity": [
                    "int",
                    "str",
                    "float",
                    "Iterable[List[str]]",
                    "Iterable[List[Any]]",
                    "tuple",
                    "bool",
                    "List[List[int]]"
                ],
                "timeout": [
                    "int",
                    "Union[None, int]"
                ]
            }
        },
        "BlockchainPolicy.sample_essential": {
            "name": "sample_essential",
            "location": 616,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ],
                "handpicked_ursulas": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BlockchainPolicy.publish_to_blockchain": {
            "name": "publish_to_blockchain",
            "location": 632,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainPolicy.make_arrangement": {
            "name": "make_arrangement",
            "location": 652,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "T",
                    "Optional[Callable]",
                    "str"
                ]
            }
        },
        "BlockchainPolicy.enact": {
            "name": "enact",
            "location": 660,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Callable",
                    "str"
                ],
                "publish": [
                    "bool",
                    "List[object]",
                    "List[str]",
                    "Iterable"
                ]
            }
        }
    },
    "nucypher-master/nucypher/policy/__init__.py": {},
    "nucypher-master/nucypher/utilities/logging.py": {
        "initialize_sentry": {
            "name": "initialize_sentry",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "dsn": [
                    "str",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "console_observer": {
            "name": "console_observer",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "sentry_observer": {
            "name": "sentry_observer",
            "location": 144,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_ensure_dir_exists": {
            "name": "_ensure_dir_exists",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "get_json_file_observer": {
            "name": "get_json_file_observer",
            "location": 166,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "get_text_file_observer": {
            "name": "get_text_file_observer",
            "location": 173,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "initialize_sentry.before_breadcrumb": {
            "name": "before_breadcrumb",
            "location": 49,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "crumb": [
                    "str",
                    "logging.Logger",
                    "Callable",
                    "Optional[logging.Logger]",
                    "Tuple[str]",
                    "Union[None, int, str]",
                    "int"
                ],
                "hint": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "initialize_sentry.before_send": {
            "name": "before_send",
            "location": 55,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]",
                    "config.ConfigManager"
                ],
                "hint": [
                    "str"
                ]
            }
        },
        "GlobalLoggerSettings.set_log_level": {
            "name": "set_log_level",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "int",
                    "ImportError"
                ],
                "log_level_name": [
                    "str",
                    "Callable",
                    "int",
                    "ImportError"
                ]
            }
        },
        "GlobalLoggerSettings.start_console_logging": {
            "name": "start_console_logging",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable[[], Any]",
                    "Type",
                    "str"
                ]
            }
        },
        "GlobalLoggerSettings.stop_console_logging": {
            "name": "stop_console_logging",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Union[str, pathlib.Path, bytes, BinaryIO]",
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "GlobalLoggerSettings.pause_all_logging_while": {
            "name": "pause_all_logging_while",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "List[dict]",
                    "dict"
                ]
            }
        },
        "GlobalLoggerSettings.start_text_file_logging": {
            "name": "start_text_file_logging",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[bytes]",
                    "bytes",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "GlobalLoggerSettings.stop_text_file_logging": {
            "name": "stop_text_file_logging",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Optional[bytes]",
                    "str",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "GlobalLoggerSettings.start_json_file_logging": {
            "name": "start_json_file_logging",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "GlobalLoggerSettings.stop_json_file_logging": {
            "name": "stop_json_file_logging",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[Exception]",
                    "Optional[bytes]",
                    "List[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "GlobalLoggerSettings.start_sentry_logging": {
            "name": "start_sentry_logging",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "Optional[dict]",
                    "Optional[int]"
                ],
                "dsn": [
                    "str",
                    "Optional[str]",
                    "nevergrad.common.Union[str, pathlib.Path]"
                ]
            }
        },
        "GlobalLoggerSettings.stop_sentry_logging": {
            "name": "stop_sentry_logging",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "_SentryInitGuard.init": {
            "name": "init",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "dsn": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/nucypher/utilities/networking.py": {
        "get_external_ip_from_centralized_source": {
            "name": "get_external_ip_from_centralized_source",
            "location": 30,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "determine_external_ip_address": {
            "name": "determine_external_ip_address",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "int"
                ],
                "force": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/nucypher/utilities/seednodes.py": {
        "load_static_nodes": {
            "name": "load_static_nodes",
            "location": 40,
            "return": [
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "domains": [
                    "str",
                    "List[str]"
                ],
                "filepath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "aggregate_seednode_uris": {
            "name": "aggregate_seednode_uris",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "domains": [
                    "set",
                    "str"
                ],
                "highest_priority": [
                    "List[str]",
                    "str",
                    "float",
                    "int",
                    "Container"
                ]
            }
        },
        "load_seednodes": {
            "name": "load_seednodes",
            "location": 81,
            "return": [
                "int",
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "min_stake": [
                    "bool",
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "nucypher.network.middleware.RestMiddleware",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer"
                ],
                "federated_only": [
                    "bool",
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "nucypher.network.middleware.RestMiddleware",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer"
                ],
                "network_domains": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[Dict], bool]]",
                    "dict",
                    "bool",
                    "float",
                    "int"
                ],
                "network_middleware": [
                    "bool",
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "nucypher.network.middleware.RestMiddleware",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer"
                ],
                "teacher_uris": [
                    "str",
                    "dict",
                    "int",
                    "Optional[Callable[[Dict], bool]]",
                    "bool",
                    "float"
                ],
                "registry": [
                    "bool",
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "nucypher.network.middleware.RestMiddleware",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer"
                ]
            }
        }
    },
    "nucypher-master/nucypher/utilities/__init__.py": {},
    "nucypher-master/nucypher/utilities/prometheus/collector.py": {
        "MetricsCollector.initialize": {
            "name": "initialize",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MetricsCollector.collect": {
            "name": "collect",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetricsCollector.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetricsCollector.collect": {
            "name": "collect",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaInfoMetricsCollector.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "UrsulaInfoMetricsCollector.initialize": {
            "name": "initialize",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "Hashable",
                    "Dict[str, str]"
                ],
                "registry": [
                    "Hashable",
                    "Dict[str, str]"
                ]
            }
        },
        "UrsulaInfoMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainMetricsCollector.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider_uri": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "BlockchainMetricsCollector.initialize": {
            "name": "initialize",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "bool"
                ],
                "registry": [
                    "str",
                    "bool"
                ]
            }
        },
        "BlockchainMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StakerMetricsCollector.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "contract_registry": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "StakerMetricsCollector.initialize": {
            "name": "initialize",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry"
                ],
                "registry": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry"
                ]
            }
        },
        "StakerMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerMetricsCollector.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "contract_registry": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "WorkerMetricsCollector.initialize": {
            "name": "initialize",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "Mapping"
                ],
                "registry": [
                    "str",
                    "Mapping"
                ]
            }
        },
        "WorkerMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkLockMetricsCollector.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "contract_registry": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "WorkLockMetricsCollector.initialize": {
            "name": "initialize",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "Mapping",
                    "prometheus_clienregistry.CollectorRegistry"
                ],
                "registry": [
                    "str",
                    "Mapping",
                    "prometheus_clienregistry.CollectorRegistry"
                ]
            }
        },
        "WorkLockMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "event_args_config": [
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Dict[int, List[str]]"
                ],
                "argument_filters": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Callable[[Dict], Any]]"
                ],
                "contract_agent": [
                    "Optional[\"Frame\"]",
                    "Dict[str, str]"
                ]
            }
        },
        "EventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "registry": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "EventMetricsCollector._collect_internal": {
            "name": "_collect_internal",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventMetricsCollector._event_occurred": {
            "name": "_event_occurred",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "EventMetricsCollector._get_arg_metric_key": {
            "name": "_get_arg_metric_key",
            "location": 304,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arg_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ReStakeEventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "str",
                    "Dict[str, str]",
                    "Dict[int, Set[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "event_name": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "ReStakeEventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ],
                "registry": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ]
            }
        },
        "WindDownEventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "str",
                    "Dict[str, str]",
                    "Dict[int, Set[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "event_name": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "WindDownEventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ],
                "registry": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ]
            }
        },
        "WorkerBondedEventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "str",
                    "Optional[str]",
                    "Dict[str, list]",
                    "Optional['SparkSession']",
                    "List[str]"
                ],
                "worker_address": [
                    "str",
                    "Optional[str]",
                    "Dict[str, list]",
                    "Optional['SparkSession']",
                    "List[str]"
                ],
                "event_name": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "WorkerBondedEventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ],
                "registry": [
                    "str",
                    "prometheus_clienregistry.CollectorRegistry",
                    "Mapping"
                ]
            }
        },
        "WorkerBondedEventMetricsCollector._event_occurred": {
            "name": "_event_occurred",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "[dict]",
                    "Callable",
                    "int"
                ]
            }
        },
        "BidRefundCompositeEventMetricsCollector.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "Optional[List[str]]",
                    "List[Tuple[str, float]]",
                    "List[Tuple[int, ...]]"
                ],
                "contract_registry": [
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "Optional[str]",
                    "str"
                ],
                "metrics_prefix": [
                    "Optional[List[str]]",
                    "List[Tuple[str, float]]",
                    "List[Tuple[int, ...]]"
                ]
            }
        },
        "BidRefundCompositeEventMetricsCollector.initialize": {
            "name": "initialize",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_prefix": [
                    "str",
                    "int",
                    "prometheus_clienregistry.CollectorRegistry"
                ],
                "registry": [
                    "str",
                    "int",
                    "prometheus_clienregistry.CollectorRegistry"
                ]
            }
        },
        "BidRefundCompositeEventMetricsCollector.collect": {
            "name": "collect",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BidRefundCompositeEventMetricsCollector.BidRefundCommonCollector.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "staker_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "BidRefundCompositeEventMetricsCollector.BidRefundCommonCollector.add_common_metric": {
            "name": "add_common_metric",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "BidRefundCompositeEventMetricsCollector.BidRefundCommonCollector._event_occurred": {
            "name": "_event_occurred",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "[dict]",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/nucypher/utilities/prometheus/metrics.py": {
        "collect_prometheus_metrics": {
            "name": "collect_prometheus_metrics",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics_collectors": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "start_prometheus_exporter": {
            "name": "start_prometheus_exporter",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "ursula": [
                    "str",
                    "bool"
                ],
                "prometheus_config": [
                    "dict",
                    "str"
                ],
                "registry": [
                    "str",
                    "dict",
                    "aiohttp.web.Request",
                    "Callable",
                    "nucypher.config.characters.UrsulaConfiguration"
                ]
            }
        },
        "create_metrics_collectors": {
            "name": "create_metrics_collectors",
            "location": 167,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "ursula": [
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "rl_algorithms.utils.config.ConfigDict",
                    "List[Tuple[str, float]]",
                    "List[Tuple[int, ...]]"
                ],
                "metrics_prefix": [
                    "recidiviz.utils.regions.Region",
                    "bool",
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "create_staking_events_metric_collectors": {
            "name": "create_staking_events_metric_collectors",
            "location": 209,
            "return": [
                "Tuple[bytes]",
                "float",
                "Dict[str, List[str]]",
                "str"
            ],
            "arguments": {
                "ursula": [],
                "metrics_prefix": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Union[None, str]"
                ]
            }
        },
        "create_worklock_events_metric_collectors": {
            "name": "create_worklock_events_metric_collectors",
            "location": 281,
            "return": [
                "Tuple[bytes]",
                "float",
                "Dict[str, List[str]]",
                "str"
            ],
            "arguments": {
                "ursula": [
                    "bool",
                    "str"
                ],
                "metrics_prefix": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_policy_events_metric_collectors": {
            "name": "create_policy_events_metric_collectors",
            "location": 313,
            "return": [
                "Tuple[bytes]",
                "float",
                "Dict[str, List[str]]",
                "str"
            ],
            "arguments": {
                "ursula": [
                    "str"
                ],
                "metrics_prefix": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "PrometheusMetricsConfig.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "Callable",
                    "Callable[..., None]"
                ],
                "metrics_prefix": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "listen_address": [
                    "List[str]",
                    "str",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "collection_interval": [
                    "int",
                    "Callable",
                    "Callable[..., None]"
                ],
                "start_now": [
                    "int",
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "MetricsEncoder.default": {
            "name": "default",
            "location": 64,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "trezor.utils.Writer",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "JSONMetricsResource.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JSONMetricsResource.render_GET": {
            "name": "render_GET",
            "location": 80,
            "return": [
                "Callable",
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bool",
                    "Union[int, str]"
                ]
            }
        },
        "JSONMetricsResource.get_exemplar": {
            "name": "get_exemplar",
            "location": 85,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "list"
            ],
            "arguments": {
                "sample": [
                    "str",
                    "bool",
                    "core.job.BaseJob"
                ],
                "metric": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "JSONMetricsResource.get_sample": {
            "name": "get_sample",
            "location": 99,
            "return": [
                "str",
                "dict",
                "List[str]",
                "IO",
                "list",
                "tartare.core.readers.CsvReader",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "str",
                    "Tuple[str]"
                ],
                "metric": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "JSONMetricsResource.get_metric": {
            "name": "get_metric",
            "location": 108,
            "return": [
                "bool",
                "Callable[[], bool]",
                "List[Dict[str, str]]",
                "int",
                "Dict[str, Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str",
                    "bool"
                ]
            }
        },
        "JSONMetricsResource.generate_latest_json": {
            "name": "generate_latest_json",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/nucypher/utilities/prometheus/__init__.py": {},
    "nucypher-master/scripts/demos/demo_endpoint_scratchpad.py": {},
    "nucypher-master/scripts/hooks/nucypher_agents.py": {},
    "nucypher-master/scripts/installation/install_solc.py": {
        "get_solc_config_path": {
            "name": "get_solc_config_path",
            "location": 37,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "get_packaged_solc_version": {
            "name": "get_packaged_solc_version",
            "location": 43,
            "return": [
                "str",
                "Optional[int]",
                "Union[str, Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "get_solc_version": {
            "name": "get_solc_version",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "install_solc": {
            "name": "install_solc",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/scripts/local_fleet/run_local_ursula_fleet.py": {
        "spin_up_federated_ursulas": {
            "name": "spin_up_federated_ursulas",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "quantity": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "spin_up_federated_ursulas.UrsulaProcessProtocol.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "spin_up_federated_ursulas.UrsulaProcessProtocol.processEnded": {
            "name": "processEnded",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "bool",
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nucypher-master/scripts/local_fleet/run_lonely_ursula.py": {},
    "nucypher-master/scripts/local_fleet/run_single_ursula.py": {},
    "nucypher-master/scripts/release/test_package.py": {
        "create_venv": {
            "name": "create_venv",
            "location": 15,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "parent_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "path.Path"
                ]
            }
        },
        "find_wheel": {
            "name": "find_wheel",
            "location": 32,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "project_path": [
                    "pathlib.Path",
                    "List[pathlib.Path]",
                    "Tuple[str, str]"
                ]
            }
        },
        "install_wheel": {
            "name": "install_wheel",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "venv_path": [
                    "pathlib.Path",
                    "str"
                ],
                "wheel_path": [
                    "pathlib.Path",
                    "str"
                ],
                "extras": [
                    "Tuple[str]",
                    "Optional[Tuple[str, ...]]",
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "test_install_local_wheel": {
            "name": "test_install_local_wheel",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/conftest.py": {
        "__very_pretty_and_insecure_scrypt_do_not_use": {
            "name": "__very_pretty_and_insecure_scrypt_do_not_use",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "monkeymodule": {
            "name": "monkeymodule",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "items": [
                    "List[T]",
                    "Dict[bytes, bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "__very_pretty_and_insecure_scrypt_do_not_use.__insecure_derive": {
            "name": "__insecure_derive",
            "location": 59,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/constants.py": {},
    "nucypher-master/tests/fixtures.py": {
        "tempfile_path": {
            "name": "tempfile_path",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "temp_dir_path": {
            "name": "temp_dir_path",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_datastore": {
            "name": "test_datastore",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "certificates_tempdir": {
            "name": "certificates_tempdir",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ursula_federated_test_config": {
            "name": "ursula_federated_test_config",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "str",
                    "bool",
                    "dict",
                    "io.BytesIO",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "alice_federated_test_config": {
            "name": "alice_federated_test_config",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "bool",
                    "dict"
                ]
            }
        },
        "bob_federated_test_config": {
            "name": "bob_federated_test_config",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ursula_decentralized_test_config": {
            "name": "ursula_decentralized_test_config",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "test_registry": [
                    "bool",
                    "Dict[str, str]",
                    "raiden.utils.Address.Hex",
                    "list",
                    "str"
                ]
            }
        },
        "alice_blockchain_test_config": {
            "name": "alice_blockchain_test_config",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "bool",
                    "random.Random"
                ],
                "testerchain": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "bool",
                    "random.Random"
                ],
                "test_registry": [
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "bool",
                    "random.Random"
                ]
            }
        },
        "bob_blockchain_test_config": {
            "name": "bob_blockchain_test_config",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "recidiviz.utils.regions.Region"
                ],
                "testerchain": [
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "recidiviz.utils.regions.Region"
                ],
                "test_registry": [
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "recidiviz.utils.regions.Region"
                ]
            }
        },
        "idle_federated_policy": {
            "name": "idle_federated_policy",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "federated_alice": [
                    "bool",
                    "dict",
                    "Callable",
                    "models.characters.mods_base.Mod"
                ],
                "federated_bob": [
                    "bool",
                    "dict",
                    "Callable",
                    "models.characters.mods_base.Mod"
                ]
            }
        },
        "enacted_federated_policy": {
            "name": "enacted_federated_policy",
            "location": 239,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "idle_federated_policy": [
                    "str",
                    "trezor.utils.Writer",
                    "web3.Web3"
                ],
                "federated_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "idle_blockchain_policy": {
            "name": "idle_blockchain_policy",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "models.characters.states.Stateful",
                    "cmk.utils.type_defs.UserId",
                    "str",
                    "bool"
                ],
                "blockchain_alice": [
                    "bool",
                    "Callable[[str], None]",
                    "str",
                    "int"
                ],
                "blockchain_bob": [
                    "bool",
                    "Callable[[str], None]",
                    "str",
                    "int"
                ],
                "token_economics": [
                    "str",
                    "Exception"
                ]
            }
        },
        "enacted_blockchain_policy": {
            "name": "enacted_blockchain_policy",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "idle_blockchain_policy": [
                    "dict",
                    "list",
                    "float",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "blockchain_ursulas": [
                    "dict",
                    "list",
                    "float",
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "capsule_side_channel": {
            "name": "capsule_side_channel",
            "location": 288,
            "return": [
                "str",
                "float",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "int"
                ]
            }
        },
        "capsule_side_channel_blockchain": {
            "name": "capsule_side_channel_blockchain",
            "location": 312,
            "return": [
                "str",
                "float",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "enacted_blockchain_policy": [
                    "int"
                ]
            }
        },
        "random_policy_label": {
            "name": "random_policy_label",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "federated_alice": {
            "name": "federated_alice",
            "location": 345,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alice_federated_test_config": [
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "blockchain_alice": {
            "name": "blockchain_alice",
            "location": 351,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alice_blockchain_test_config": [
                    "dict",
                    "str",
                    "Optional[str]"
                ],
                "testerchain": [
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "federated_bob": {
            "name": "federated_bob",
            "location": 357,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bob_federated_test_config": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "blockchain_bob": {
            "name": "blockchain_bob",
            "location": 363,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bob_blockchain_test_config": [
                    "Dict[str, Any]",
                    "int"
                ],
                "testerchain": [
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "federated_ursulas": {
            "name": "federated_ursulas",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Optional[int]",
                    "dict",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "make_token_economics": {
            "name": "make_token_economics",
            "location": 379,
            "return": [
                "str",
                "float",
                "ignite.engine.Engine"
            ],
            "arguments": {
                "blockchain": [
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "token_economics": {
            "name": "token_economics",
            "location": 406,
            "return": [
                "int",
                "logging.LogRecord",
                "str",
                "list"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "logging.LogRecord",
                    "str",
                    "list"
                ]
            }
        },
        "solidity_compiler": {
            "name": "solidity_compiler",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_registry": {
            "name": "test_registry",
            "location": 418,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "tests.async_mock.Mock",
                "float"
            ],
            "arguments": {}
        },
        "_make_testerchain": {
            "name": "_make_testerchain",
            "location": 423,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_backend": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Container[str]]",
                    "bytes"
                ]
            }
        },
        "_testerchain": {
            "name": "_testerchain",
            "location": 450,
            "return": [
                "tests.utils.blockchain.TesterBlockchain"
            ],
            "arguments": {}
        },
        "testerchain": {
            "name": "testerchain",
            "location": 456,
            "return": [
                "tests.utils.blockchain.TesterBlockchain"
            ],
            "arguments": {
                "_testerchain": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_make_agency": {
            "name": "_make_agency",
            "location": 487,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Callable",
                    "int"
                ],
                "test_registry": [
                    "web3.contracContract",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "str",
                    "Callable",
                    "int"
                ],
                "token_economics": [
                    "web3.contracContract",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_registry_source_manager": {
            "name": "test_registry_source_manager",
            "location": 563,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "test_registry": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "agency": {
            "name": "agency",
            "location": 569,
            "return": [
                "typing.Tuple[nucypher.blockchain.eth.agents.NucypherTokenAgent, nucypher.blockchain.eth.agents.StakingEscrowAgent, nucypher.blockchain.eth.agents.PolicyManagerAgent]"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "float",
                    "random.Random",
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "test_registry": [
                    "bool",
                    "float",
                    "random.Random",
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "token_economics": [
                    "bool",
                    "float",
                    "random.Random",
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "test_registry_source_manager": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "agency_local_registry": {
            "name": "agency_local_registry",
            "location": 580,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "agency": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "test_registry": [
                    "str"
                ]
            }
        },
        "stakers": {
            "name": "stakers",
            "location": 589,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "raiden.utils.TokenAmount",
                    "datetime.datetime",
                    "raiden.utils.Address",
                    "float",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "agency": [
                    "Dict[str, Any]",
                    "int",
                    "List[List[int]]",
                    "Optional[int]"
                ],
                "token_economics": [
                    "int",
                    "list"
                ],
                "test_registry": [
                    "Callable",
                    "Optional[float]",
                    "bool",
                    "int",
                    "raiden.utils.MessageID"
                ]
            }
        },
        "blockchain_ursulas": {
            "name": "blockchain_ursulas",
            "location": 635,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "Sequence[int]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ],
                "stakers": [
                    "bool",
                    "int",
                    "float"
                ],
                "ursula_decentralized_test_config": [
                    "bool",
                    "Sequence[int]",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str"
                ]
            }
        },
        "idle_staker": {
            "name": "idle_staker",
            "location": 653,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bytes",
                    "eth.vm.computation.BaseComputation",
                    "bool",
                    "baseplate.lib.config.EndpointConfiguration"
                ],
                "agency": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "stake_value": {
            "name": "stake_value",
            "location": 674,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "token_economics": [
                    "str",
                    "Optional[Match]",
                    "bool",
                    "List[List[str]]",
                    "Optional[Union[int, str]]",
                    "List[str]"
                ]
            }
        },
        "policy_rate": {
            "name": "policy_rate",
            "location": 680,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "policy_value": {
            "name": "policy_value",
            "location": 686,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "token_economics": [
                    "bool",
                    "str",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "List[Tuple[str, str]]"
                ],
                "policy_rate": [
                    "bool",
                    "str",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "funded_blockchain": {
            "name": "funded_blockchain",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "datetime.date",
                    "ledmatrix.utilities.colors.Color",
                    "raiden.tests.integration.network.proxies.BalanceProof"
                ],
                "agency": [
                    "bool",
                    "int",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "list",
                    "List[List[int]]"
                ],
                "token_economics": [
                    "raiden.utils.TokenAmount",
                    "datetime.datetime",
                    "raiden.utils.Address",
                    "float",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.MonitoringServiceAddress"
                ],
                "test_registry": [
                    "raiden.utils.TokenAmount",
                    "datetime.datetime",
                    "raiden.utils.Address",
                    "float",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.MonitoringServiceAddress"
                ]
            }
        },
        "_mock_ursula_reencrypts": {
            "name": "_mock_ursula_reencrypts",
            "location": 713,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "pricemonitor.config.Coin",
                "str"
            ],
            "arguments": {
                "ursula": [
                    "str",
                    "int",
                    "bool",
                    "bytes"
                ],
                "corrupt_cfrag": [
                    "str",
                    "Dict[str, BinaryIO]",
                    "bool",
                    "float"
                ]
            }
        },
        "mock_ursula_reencrypts": {
            "name": "mock_ursula_reencrypts",
            "location": 762,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "instant_geth_dev_node": {
            "name": "instant_geth_dev_node",
            "location": 767,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "stakeholder_config_file_location": {
            "name": "stakeholder_config_file_location",
            "location": 778,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "software_stakeholder": {
            "name": "software_stakeholder",
            "location": 788,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Tuple[str, dict]",
                    "bytes",
                    "bool"
                ],
                "agency": [
                    "bool",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "float",
                    "int"
                ],
                "stakeholder_config_file_location": [
                    "List[str]",
                    "bool",
                    "Set[str]",
                    "str"
                ],
                "test_registry": [
                    "bool",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "stakeholder_configuration": {
            "name": "stakeholder_configuration",
            "location": 830,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config"
            ],
            "arguments": {
                "testerchain": [
                    "Optional[umbral.curve.Curve]",
                    "qutebrowser.utils.usertypes.Backend",
                    "str",
                    "List[str]",
                    "Iterable[T]",
                    "Optional[basilisp.lang.interfaces.IPersistentMap]"
                ],
                "agency_local_registry": [
                    "Optional[umbral.curve.Curve]",
                    "qutebrowser.utils.usertypes.Backend",
                    "str",
                    "List[str]",
                    "Iterable[T]",
                    "Optional[basilisp.lang.interfaces.IPersistentMap]"
                ]
            }
        },
        "manual_staker": {
            "name": "manual_staker",
            "location": 837,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContractFunction",
                    "Dict[str, Any]",
                    "cmk.gui.plugins.views.utils.ABCDataSource"
                ],
                "agency": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "manual_worker": {
            "name": "manual_worker",
            "location": 861,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "hackathon.utils.utils.DataMessage",
                    "str",
                    "raiden.utils.Any",
                    "Sequence[int]"
                ]
            }
        },
        "log_in_and_out_of_test": {
            "name": "log_in_and_out_of_test",
            "location": 881,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 890,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "Callable[..., Awaitable]"
                ],
                "test_registry": [
                    "bool",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "get_random_checksum_address": {
            "name": "get_random_checksum_address",
            "location": 902,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {}
        },
        "mock_transacting_power_activation": {
            "name": "mock_transacting_power_activation",
            "location": 912,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Dict[str, BinaryIO]",
                    "bool",
                    "float"
                ]
            }
        },
        "fleet_of_highperf_mocked_ursulas": {
            "name": "fleet_of_highperf_mocked_ursulas",
            "location": 923,
            "return": [
                "int",
                "str",
                "Iterable[Any]",
                "datetime.timedelta"
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Optional[int]",
                    "str",
                    "cmk.base.config.HostConfig",
                    "config.Config"
                ],
                "request": [
                    "Optional[str]"
                ]
            }
        },
        "highperf_mocked_alice": {
            "name": "highperf_mocked_alice",
            "location": 941,
            "return": [
                "Callable[[bytes], None]",
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "fleet_of_highperf_mocked_ursulas": [
                    "bool",
                    "config.Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "highperf_mocked_bob": {
            "name": "highperf_mocked_bob",
            "location": 956,
            "return": [
                "Callable[[bytes], None]",
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "fleet_of_highperf_mocked_ursulas": [
                    "bool",
                    "config.Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_emitter": {
            "name": "test_emitter",
            "location": 975,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "tests.async_mock.Mock",
                "float"
            ],
            "arguments": {
                "mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "click_runner": {
            "name": "click_runner",
            "location": 983,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "nominal_federated_configuration_fields": {
            "name": "nominal_federated_configuration_fields",
            "location": 989,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_allocation_infile": {
            "name": "mock_allocation_infile",
            "location": 997,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "token_economics": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "List[str]",
                    "List[List[str]]"
                ],
                "get_random_checksum_address": [
                    "str",
                    "int",
                    "bool",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "new_local_registry": {
            "name": "new_local_registry",
            "location": 1016,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "custom_filepath": {
            "name": "custom_filepath",
            "location": 1027,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "custom_filepath_2": {
            "name": "custom_filepath_2",
            "location": 1037,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "worker_configuration_file_location": {
            "name": "worker_configuration_file_location",
            "location": 1049,
            "return": [
                "str",
                "IO[Any]"
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "Sequence[int]",
                    "sqlalchemy.Table",
                    "dict",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "stakeholder_configuration_file_location": {
            "name": "stakeholder_configuration_file_location",
            "location": 1056,
            "return": [
                "str",
                "IO[Any]"
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "Sequence[int]",
                    "sqlalchemy.Table",
                    "dict",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "_make_testerchain._get_buffered_gas_estimate": {
            "name": "_get_buffered_gas_estimate",
            "location": 434,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "web3": [
                    "Callable",
                    "tuple",
                    "Iterable[bool]"
                ],
                "transaction": [
                    "Callable",
                    "tuple",
                    "Iterable[bool]"
                ],
                "gas_buffer": [
                    "Callable",
                    "tuple",
                    "Iterable[bool]"
                ]
            }
        },
        "deploy_contract.wrapped": {
            "name": "wrapped",
            "location": 891,
            "return": [
                "str",
                "Dict[str, int]",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "contract_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_random_checksum_address._get_random_checksum_address": {
            "name": "_get_random_checksum_address",
            "location": 903,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "mock_transacting_power_activation._mock_transacting_power_activation": {
            "name": "_mock_transacting_power_activation",
            "location": 913,
            "return": [
                ""
            ],
            "arguments": {
                "password": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ],
                "account": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ]
            }
        },
        "capsule_side_channel._CapsuleSideChannel.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "capsule_side_channel._CapsuleSideChannel.__call__": {
            "name": "__call__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "capsule_side_channel._CapsuleSideChannel.reset": {
            "name": "reset",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "plaintext_passthrough": []
            }
        },
        "capsule_side_channel_blockchain._CapsuleSideChannel.__init__": {
            "name": "__init__",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "capsule_side_channel_blockchain._CapsuleSideChannel.__call__": {
            "name": "__call__",
            "location": 317,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "capsule_side_channel_blockchain._CapsuleSideChannel.reset": {
            "name": "reset",
            "location": 325,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "plaintext_passthrough": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/markers.py": {},
    "nucypher-master/tests/run_tests.py": {
        "run": {
            "name": "run",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "NucypherPytestRunner.pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherPytestRunner.pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/tests/test_package.py": {
        "import_mocker": {
            "name": "import_mocker",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_use_vladimir_without_development_installation": {
            "name": "test_use_vladimir_without_development_installation",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "import_mocker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "jsonlog.tests.capture.Capture"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_get_pyevm_backend_without_development_installation": {
            "name": "test_get_pyevm_backend_without_development_installation",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "import_mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_rpc_test_client_without_development_installation": {
            "name": "test_rpc_test_client_without_development_installation",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "import_mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "TestsImportMocker.mock_import": {
            "name": "mock_import",
            "location": 29,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TestsImportMocker.start": {
            "name": "start",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestsImportMocker.stop": {
            "name": "stop",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestsImportMocker.__enter__": {
            "name": "__enter__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestsImportMocker.__exit__": {
            "name": "__exit__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "nucypher-master/tests/__init__.py": {},
    "nucypher-master/tests/acceptance/test_transacting_power.py": {
        "test_transacting_power_sign_message": {
            "name": "test_transacting_power_sign_message",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_transacting_power_sign_transaction": {
            "name": "test_transacting_power_sign_transaction",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        },
        "test_transacting_power_sign_agent_transaction": {
            "name": "test_transacting_power_sign_agent_transaction",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agency": [
                    "ultron8.api.models.user.UserInDB",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "test_registry": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/test_economics_acceptance.py": {
        "test_retrieving_from_blockchain": {
            "name": "test_retrieving_from_blockchain",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "token_economics": [
                    "List[str]",
                    "str",
                    "Sequence[str]"
                ],
                "test_registry": [
                    "Dict[str, Union[Any, Any]]",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/actors/conftest.py": {
        "staker": {
            "name": "staker",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "List[bool]",
                    "int"
                ],
                "agency": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[Set[str]]",
                    "float"
                ],
                "test_registry": [
                    "int",
                    "Dict[str, int]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/actors/test_bidder.py": {
        "test_create_bidder": {
            "name": "test_create_bidder",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool"
                ],
                "test_registry": [
                    "str"
                ],
                "agency": [
                    "str",
                    "bool"
                ],
                "token_economics": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bidding": {
            "name": "test_bidding",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "bool"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "int",
                    "bool",
                    "str",
                    "Callable"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_cancel_bid": {
            "name": "test_cancel_bid",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "float"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "List[int]",
                    "int",
                    "Union[str, float]"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_get_remaining_work": {
            "name": "test_get_remaining_work",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "agency": [
                    "str",
                    "int"
                ],
                "token_economics": [
                    "str",
                    "int"
                ],
                "test_registry": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_verify_correctness_before_refund": {
            "name": "test_verify_correctness_before_refund",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [],
                "test_registry": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ]
            }
        },
        "test_force_refund": {
            "name": "test_force_refund",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "random.Random",
                    "tuple"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "Union[str, float]"
                ],
                "test_registry": [
                    "str",
                    "int"
                ]
            }
        },
        "test_verify_correctness": {
            "name": "test_verify_correctness",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ]
            }
        },
        "test_withdraw_compensation": {
            "name": "test_withdraw_compensation",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ]
            }
        },
        "test_claim": {
            "name": "test_claim",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/actors/test_deployer.py": {
        "test_rapid_deployment": {
            "name": "test_rapid_deployment",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "token_economics": [
                    "int",
                    "List[bool]",
                    "bytes"
                ],
                "test_registry": [
                    "raiden.utils.TokenAmount",
                    "set",
                    "raiden.storage.utils.TimestampedEvent",
                    "str",
                    "int",
                    "float",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "tmpdir": [
                    "str",
                    "Sequence[str]",
                    "raiden.utils.ChannelMap",
                    "raiden.utils.NodeNetworkStateMap",
                    "random.Random",
                    "raiden.utils.BlockNumber",
                    "List[int]"
                ],
                "get_random_checksum_address": [
                    "Optional[int]",
                    "int",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Locksroot",
                    "raiden.utils.LockedAmount",
                    "Optional[float]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/actors/test_investigator.py": {
        "mock_ursula": {
            "name": "mock_ursula",
            "location": 29,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "account": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "mocker": []
            }
        },
        "test_investigator_requests_slashing": {
            "name": "test_investigator_requests_slashing",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Optional[bool]"
                ],
                "test_registry": [
                    "int",
                    "list",
                    "str"
                ],
                "agency": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "mock_ursula_reencrypts": [
                    "str"
                ],
                "token_economics": [
                    "int",
                    "bool"
                ],
                "mock_transacting_power_activation": [
                    "str",
                    "bool"
                ],
                "mocker": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/actors/test_multisig_actors.py": {
        "test_trustee_proposes_multisig_management_operations": {
            "name": "test_trustee_proposes_multisig_management_operations",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int"
                ],
                "test_registry": []
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/actors/test_policy_author.py": {
        "author": {
            "name": "author",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "dict"
                ],
                "agency": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "test_registry": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "bytes"
                ]
            }
        },
        "test_create_policy_author": {
            "name": "test_create_policy_author",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agency": [
                    "str",
                    "bool"
                ],
                "test_registry": []
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/actors/test_staker.py": {
        "test_staker_locking_tokens": {
            "name": "test_staker_locking_tokens",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool"
                ],
                "agency": [
                    "str",
                    "bool",
                    "int"
                ],
                "staker": [],
                "token_economics": [
                    "raiden.utils.TokenNetworkAddress",
                    "str",
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "bool",
                    "Tuple[str, dict]",
                    "raiden.utils.Callable"
                ],
                "mock_transacting_power_activation": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_staker_divides_stake": {
            "name": "test_staker_divides_stake",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "staker": [
                    "str",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Address"
                ],
                "token_economics": [
                    "raiden.utils.Address",
                    "Set[str]",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "test_staker_manages_restaking": {
            "name": "test_staker_manages_restaking",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "test_registry": [
                    "raiden.utils.Callable",
                    "str",
                    "Callable",
                    "raiden.utils.SecretRegistryAddress"
                ],
                "staker": [
                    "str"
                ]
            }
        },
        "test_staker_collects_staking_reward": {
            "name": "test_staker_collects_staking_reward",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "raiden.utils.MessageID",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "str"
                ],
                "test_registry": [
                    "str",
                    "eth.rlp.accounts.Account"
                ],
                "staker": [
                    "str",
                    "int",
                    "Dict[int, Dict[str, float]]"
                ],
                "blockchain_ursulas": [
                    "str",
                    "bool"
                ],
                "agency": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "tests.conftesWorker",
                    "bool"
                ],
                "token_economics": [
                    "str",
                    "int",
                    "raiden.utils.PaymentID",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.TargetAddress"
                ],
                "mock_transacting_power_activation": [],
                "ursula_decentralized_test_config": [
                    "str",
                    "eth.rlp.accounts.Account"
                ]
            }
        },
        "test_staker_manages_winding_down": {
            "name": "test_staker_manages_winding_down",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[bool]",
                    "float",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "test_registry": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ],
                "staker": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ],
                "token_economics": [
                    "bool",
                    "Union[str, Pattern]",
                    "int",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ],
                "ursula_decentralized_test_config": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "test_set_min_fee_rate": {
            "name": "test_set_min_fee_rate",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool",
                    "int"
                ],
                "test_registry": [
                    "str",
                    "bool",
                    "int"
                ],
                "staker": [
                    "str",
                    "Dict[str, Any]",
                    "Union[str, Sequence[str]]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/actors/test_worker.py": {
        "test_worker_auto_commitments": {
            "name": "test_worker_auto_commitments",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "testerchain": [],
                "test_registry": [],
                "staker": [],
                "agency": [],
                "token_economics": [],
                "mock_transacting_power_activation": [],
                "ursula_decentralized_test_config": []
            }
        },
        "test_worker_auto_commitments.start": {
            "name": "start",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_worker_auto_commitments.time_travel": {
            "name": "time_travel",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "test_worker_auto_commitments.verify": {
            "name": "verify",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/agents/test_adjudicator_agent.py": {
        "mock_ursula": {
            "name": "mock_ursula",
            "location": 30,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "account": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "mocker": []
            }
        },
        "test_adjudicator_slashes": {
            "name": "test_adjudicator_slashes",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "slice",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.components.withings.common.ComponentFactory"
                ],
                "testerchain": [],
                "mock_ursula_reencrypts": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "token_economics": [
                    "float"
                ],
                "test_registry": [],
                "mock_transacting_power_activation": [],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/agents/test_policy_manager_agent.py": {
        "policy_meta": {
            "name": "policy_meta",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "bytes",
                    "int"
                ],
                "agency": [
                    "Sequence[str]",
                    "nucypher.crypto.kits.UmbralMessageKit",
                    "bool"
                ],
                "token_economics": [
                    "int",
                    "List[int]",
                    "Sequence[T]"
                ],
                "blockchain_ursulas": [
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_create_policy": {
            "name": "test_create_policy",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "agency": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]"
                ],
                "token_economics": [
                    "str"
                ],
                "mock_transacting_power_activation": [
                    "str"
                ]
            }
        },
        "test_fetch_policy_arrangements": {
            "name": "test_fetch_policy_arrangements",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_revoke_arrangement": {
            "name": "test_revoke_arrangement",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_revoke_policy": {
            "name": "test_revoke_policy",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_calculate_refund": {
            "name": "test_calculate_refund",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "policy_meta": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_transacting_power_activation": [
                    "tests.async_mock.Mock",
                    "Optional[Exception]"
                ]
            }
        },
        "test_collect_refund": {
            "name": "test_collect_refund",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "agency": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_set_min_fee_rate": {
            "name": "test_set_min_fee_rate",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool",
                    "int"
                ],
                "test_registry": [
                    "str"
                ],
                "agency": [
                    "str",
                    "bool",
                    "int"
                ],
                "policy_meta": [
                    "str",
                    "int"
                ]
            }
        },
        "test_collect_policy_fee": {
            "name": "test_collect_policy_fee",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "policy_meta": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "token_economics": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_transacting_power_activation": [
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/agents/test_preallocation_escrow_agent.py": {
        "allocation_value": {
            "name": "allocation_value",
            "location": 35,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "token_economics": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Tuple[int, int]",
                    "List[int]",
                    "Sequence[str]"
                ]
            }
        },
        "agent": {
            "name": "agent",
            "location": 41,
            "return": [
                "nucypher.blockchain.eth.agents.PreallocationEscrowAgent"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "test_registry": [
                    "int",
                    "str",
                    "nucypher.blockchain.eth.actors.Staker",
                    "raiden.utils.TokenAmount",
                    "float"
                ],
                "allocation_value": [
                    "bytes",
                    "dict",
                    "Dict[str, float]"
                ],
                "agency": [
                    "str",
                    "bool",
                    "int",
                    "mode.utils.times.Seconds"
                ],
                "mock_transacting_power_activation": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_preallocation_escrow_agent_represents_beneficiary": {
            "name": "test_preallocation_escrow_agent_represents_beneficiary",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.Mock"
                ],
                "agency": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_read_beneficiary": {
            "name": "test_read_beneficiary",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.setup.SetupTest"
                ],
                "agent": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_read_allocation": {
            "name": "test_read_allocation",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "agency": [
                    "str"
                ],
                "allocation_value": []
            }
        },
        "test_read_timestamp": {
            "name": "test_read_timestamp",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "Callable[[str], None]",
                    "Optional[str]"
                ]
            }
        },
        "test_deposit_and_withdraw_as_staker": {
            "name": "test_deposit_and_withdraw_as_staker",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "agent": [],
                "agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "allocation_value": [
                    "qutebrowser.utils.usertypes.Backend",
                    "int"
                ],
                "token_economics": [
                    "float",
                    "Callable"
                ],
                "mock_transacting_power_activation": []
            }
        },
        "test_collect_policy_fees": {
            "name": "test_collect_policy_fees",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "raiden.tests.fuzz.utils.SendSecretRevealInNode",
                    "raiden.utils.SecretRegistryAddress",
                    "str"
                ],
                "agent": [],
                "agency": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "token_economics": [
                    "int",
                    "raiden.utils.Address",
                    "bool",
                    "str",
                    "raiden.utils.Callable"
                ],
                "mock_transacting_power_activation": []
            }
        },
        "test_beneficiary_withdraws_tokens": {
            "name": "test_beneficiary_withdraws_tokens",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agent": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "agency": [
                    "slice",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "allocation_value": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_transacting_power_activation": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "int"
                ],
                "token_economics": []
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/agents/test_sampling_distribution.py": {
        "token_economics": {
            "name": "token_economics",
            "location": 28,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {}
        },
        "token": {
            "name": "token",
            "location": 46,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "token_economics": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "deploy_contract": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "test_sampling_distribution": {
            "name": "test_sampling_distribution",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "token": [
                    "str",
                    "Optional[str]"
                ],
                "deploy_contract": [
                    "str",
                    "Optional[str]"
                ],
                "token_economics": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/agents/test_staking_escrow_agent.py": {
        "test_unknown_contract": {
            "name": "test_unknown_contract",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "test_registry": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_deposit_tokens": {
            "name": "test_deposit_tokens",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests._TestServerFactory",
                    "str",
                    "bool",
                    "set"
                ],
                "agency": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]"
                ],
                "token_economics": [
                    "Callable",
                    "Iterable[Tuple[str, dict]]",
                    "int"
                ],
                "mock_transacting_power_activation": []
            }
        },
        "test_locked_tokens": {
            "name": "test_locked_tokens",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes"
                ],
                "agency": [
                    "List[int]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "int",
                    "str"
                ],
                "token_economics": [
                    "Iterable[Tuple[str, dict]]",
                    "int"
                ]
            }
        },
        "test_get_all_stakes": {
            "name": "test_get_all_stakes",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "agency": [
                    "str",
                    "Optional[bool]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "int",
                    "Union[str, float]",
                    "List[int]"
                ],
                "token_economics": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "test_stakers_and_workers_relationships": {
            "name": "test_stakers_and_workers_relationships",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int"
                ],
                "agency": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_get_staker_population": {
            "name": "test_get_staker_population",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ],
                "stakers": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "float"
                ]
            }
        },
        "test_get_swarm": {
            "name": "test_get_swarm",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ],
                "blockchain_ursulas": [
                    "str"
                ]
            }
        },
        "test_sample_stakers": {
            "name": "test_sample_stakers",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_get_current_period": {
            "name": "test_get_current_period",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ],
                "testerchain": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_commit_to_next_period": {
            "name": "test_commit_to_next_period",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "testerchain": [],
                "mock_transacting_power_activation": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_divide_stake": {
            "name": "test_divide_stake",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bytes"
                ],
                "token_economics": [
                    "str",
                    "Tuple[str, dict]"
                ]
            }
        },
        "test_prolong_stake": {
            "name": "test_prolong_stake",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [],
                "testerchain": [],
                "test_registry": []
            }
        },
        "test_disable_restaking": {
            "name": "test_disable_restaking",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [],
                "testerchain": [],
                "test_registry": []
            }
        },
        "test_lock_restaking": {
            "name": "test_lock_restaking",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [],
                "testerchain": [
                    "int"
                ],
                "test_registry": []
            }
        },
        "test_collect_staking_reward": {
            "name": "test_collect_staking_reward",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "testerchain": [],
                "mock_transacting_power_activation": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_winding_down": {
            "name": "test_winding_down",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "str"
                ],
                "testerchain": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "test_registry": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ]
            }
        },
        "test_batch_deposit": {
            "name": "test_batch_deposit",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "List[str]",
                    "bool"
                ],
                "agency": [
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "List[int]",
                    "int"
                ],
                "token_economics": [
                    "str",
                    "int",
                    "List[int]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ],
                "mock_transacting_power_activation": [
                    "str",
                    "bool"
                ],
                "get_random_checksum_address": [
                    "int",
                    "str"
                ]
            }
        },
        "test_winding_down.check_last_period": {
            "name": "check_last_period",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/acceptance/blockchain/agents/test_token_agent.py": {
        "agent": {
            "name": "agent",
            "location": 26,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "dict"
                ],
                "test_registry": [
                    "bool"
                ]
            }
        },
        "test_token_properties": {
            "name": "test_token_properties",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_get_balance": {
            "name": "test_get_balance",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "bool"
                ],
                "token_economics": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "List[int]"
                ]
            }
        },
        "test_approve_transfer": {
            "name": "test_approve_transfer",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "Callable",
                    "float"
                ],
                "token_economics": [
                    "List[str]",
                    "str"
                ],
                "mock_transacting_power_activation": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_transfer": {
            "name": "test_transfer",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "float"
                ],
                "token_economics": [],
                "mock_transacting_power_activation": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_approve_and_call": {
            "name": "test_approve_and_call",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [],
                "token_economics": [
                    "int"
                ],
                "mock_transacting_power_activation": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "deploy_contract": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/agents/test_worklock_agent.py": {
        "test_create_worklock_agent": {
            "name": "test_create_worklock_agent",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool"
                ],
                "test_registry": [
                    "guillotina.db.orm.interfaces.IBaseObject"
                ],
                "agency": [
                    "str",
                    "bool"
                ],
                "token_economics": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bidding": {
            "name": "test_bidding",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str",
                    "Dict[str, Any]"
                ],
                "test_registry": []
            }
        },
        "test_get_deposited_eth": {
            "name": "test_get_deposited_eth",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "agency": [
                    "str",
                    "int"
                ],
                "token_economics": [
                    "List[int]"
                ],
                "test_registry": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_get_base_deposit_rate": {
            "name": "test_get_base_deposit_rate",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ],
                "token_economics": [
                    "Optional[Any]",
                    "int",
                    "str"
                ],
                "test_registry": [
                    "int",
                    "str"
                ]
            }
        },
        "test_get_base_refund_rate": {
            "name": "test_get_base_refund_rate",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "agency": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "token_economics": [
                    "Optional[Any]"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "Union[str, int, float]"
                ]
            }
        },
        "test_cancel_bid": {
            "name": "test_cancel_bid",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "List[str]"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_get_remaining_work": {
            "name": "test_get_remaining_work",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool"
                ],
                "agency": [
                    "str",
                    "int"
                ],
                "token_economics": [
                    "str",
                    "int"
                ],
                "test_registry": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_early_claim": {
            "name": "test_early_claim",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "List[str]"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_cancel_after_bidding": {
            "name": "test_cancel_after_bidding",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "float"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "List[int]",
                    "int",
                    "Union[str, float]"
                ],
                "test_registry": []
            }
        },
        "test_claim_before_checking": {
            "name": "test_claim_before_checking",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool",
                    "int"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_force_refund": {
            "name": "test_force_refund",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "bytes"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_verify_correctness": {
            "name": "test_verify_correctness",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "List[str]"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_withdraw_compensation": {
            "name": "test_withdraw_compensation",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "list",
                    "str"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_successful_claim": {
            "name": "test_successful_claim",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "List[str]"
                ],
                "agency": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ],
                "test_registry": [
                    "set"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/clients/test_geth_integration.py": {
        "test_geth_EIP_191_client_signature_integration": {
            "name": "test_geth_EIP_191_client_signature_integration",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "instant_geth_dev_node": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_geth_create_new_account": {
            "name": "test_geth_create_new_account",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "instant_geth_dev_node": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_geth_deployment_integration": {
            "name": "test_geth_deployment_integration",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "instant_geth_dev_node": [
                    "bool",
                    "int"
                ],
                "test_registry": [
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/clients/test_syncing.py": {
        "test_synced_geth_client": {
            "name": "test_synced_geth_client",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unsynced_geth_client": {
            "name": "test_unsynced_geth_client",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_peers_unsynced_geth_client": {
            "name": "test_no_peers_unsynced_geth_client",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/conftest.py": {
        "token_deployer": {
            "name": "token_deployer",
            "location": 25,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "test_registry": [
                    "str"
                ]
            }
        },
        "staking_escrow_deployer": {
            "name": "staking_escrow_deployer",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [],
                "token_deployer": [
                    "float",
                    "bool",
                    "Optional[int]",
                    "List[List[int]]",
                    "int"
                ],
                "test_registry": []
            }
        },
        "policy_manager_deployer": {
            "name": "policy_manager_deployer",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "staking_escrow_deployer": [
                    "Optional[List[Any]]",
                    "int",
                    "float",
                    "Callable[..., None]",
                    "Callable"
                ],
                "testerchain": [
                    "int",
                    "str",
                    "float"
                ],
                "test_registry": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "staking_interface_deployer": {
            "name": "staking_interface_deployer",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "staking_escrow_deployer": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "dict",
                    "int",
                    "str"
                ],
                "testerchain": [
                    "int",
                    "str",
                    "float"
                ],
                "test_registry": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "adjudicator_deployer": {
            "name": "adjudicator_deployer",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "policy_manager_deployer": [
                    "Optional[List[Any]]",
                    "int",
                    "float",
                    "Callable[..., None]",
                    "Callable"
                ],
                "testerchain": [
                    "int",
                    "float",
                    "bool"
                ],
                "test_registry": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "deployment_progress": {
            "name": "deployment_progress",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "deployment_progress.DeploymentProgress.update": {
            "name": "update",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_adjudicator_deployer.py": {
        "test_adjudicator_deployer": {
            "name": "test_adjudicator_deployer",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "List[int]",
                    "int",
                    "str"
                ],
                "token_economics": [],
                "deployment_progress": [
                    "str",
                    "Iterable[str]",
                    "float",
                    "int",
                    "OrderedDict"
                ],
                "test_registry": [
                    "float"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_deploy_idle_network.py": {
        "test_deploy_idle_network": {
            "name": "test_deploy_idle_network",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deployment_progress": [
                    "str",
                    "int",
                    "raiden.utils.Callable",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Address"
                ],
                "test_registry": [
                    "int"
                ]
            }
        },
        "test_stake_in_idle_network": {
            "name": "test_stake_in_idle_network",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress",
                    "Callable",
                    "raiden.utils.PaymentNetworkID",
                    "float"
                ],
                "token_economics": [
                    "int",
                    "float",
                    "raiden.utils.NetworkTimeout"
                ],
                "test_registry": [
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "tuple"
                ]
            }
        },
        "test_activate_network": {
            "name": "test_activate_network",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token_economics": [
                    "bool",
                    "int"
                ],
                "test_registry": []
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_deploy_preallocations.py": {
        "test_deploy_and_allocate": {
            "name": "test_deploy_and_allocate",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "agency": [
                    "str",
                    "List[int]",
                    "int",
                    "Sequence[str]"
                ],
                "token_economics": [
                    "bytes",
                    "bool"
                ],
                "test_registry": [
                    "random.Random"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_interdeployer_integration.py": {
        "test_deploy_ethereum_contracts": {
            "name": "test_deploy_ethereum_contracts",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deployment_progress": [
                    "int",
                    "str"
                ],
                "test_registry": [
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_multisig_deployer.py": {
        "test_multisig_deployer_and_agent": {
            "name": "test_multisig_deployer_and_agent",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int"
                ],
                "deployment_progress": [],
                "test_registry": []
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_policy_manager_deployer.py": {
        "test_policy_manager_deployment": {
            "name": "test_policy_manager_deployment",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "policy_manager_deployer": [],
                "staking_escrow_deployer": [],
                "deployment_progress": [
                    "str"
                ]
            }
        },
        "test_make_agent": {
            "name": "test_make_agent",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "policy_manager_deployer": [
                    "int",
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_deployment_parameters": {
            "name": "test_deployment_parameters",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "policy_manager_deployer": [],
                "staking_escrow_deployer": [],
                "test_registry": [
                    "int"
                ]
            }
        },
        "test_policy_manager_has_dispatcher": {
            "name": "test_policy_manager_has_dispatcher",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "policy_manager_deployer": [
                    "Callable[[List, bool], None]"
                ],
                "testerchain": [
                    "Callable[[List, bool], None]"
                ],
                "test_registry": [
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "test_upgrade": {
            "name": "test_upgrade",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "test_registry": []
            }
        },
        "test_rollback": {
            "name": "test_rollback",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "test_registry": [
                    "int",
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ]
            }
        },
        "test_set_fee_range": {
            "name": "test_set_fee_range",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "policy_manager_deployer": [
                    "Callable[[List, bool], None]",
                    "str"
                ],
                "test_registry": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_preallocation_escrow_deployer.py": {
        "test_staking_interface_deployer": {
            "name": "test_staking_interface_deployer",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str"
                ],
                "deployment_progress": [
                    "bool",
                    "str",
                    "blockchain.Blockchain"
                ],
                "test_registry": []
            }
        },
        "test_deploy_multiple_preallocations": {
            "name": "test_deploy_multiple_preallocations",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "dict"
                ],
                "test_registry": [
                    "str"
                ]
            }
        },
        "test_upgrade_staking_interface": {
            "name": "test_upgrade_staking_interface",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Dict[str, List[str]]",
                    "int",
                    "Dict[Any, Dict[str, Any]]"
                ],
                "test_registry": [
                    "str",
                    "Dict[str, List[str]]",
                    "int",
                    "Dict[Any, Dict[str, Any]]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_staking_escrow_deployer.py": {
        "test_staking_escrow_deployment": {
            "name": "test_staking_escrow_deployment",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "staking_escrow_deployer": [
                    "str",
                    "blockchain.Blockchain"
                ],
                "deployment_progress": [
                    "str",
                    "blockchain.Blockchain"
                ]
            }
        },
        "test_make_agent": {
            "name": "test_make_agent",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "staking_escrow_deployer": [
                    "int",
                    "str"
                ],
                "test_registry": []
            }
        },
        "test_deployment_parameters": {
            "name": "test_deployment_parameters",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "staking_escrow_deployer": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ],
                "token_deployer": [
                    "str",
                    "dict",
                    "int"
                ],
                "token_economics": [
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "eth.abc.ReceiptAPI",
                    "Mapping"
                ],
                "test_registry": [
                    "Optional[bool]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "test_staking_escrow_has_dispatcher": {
            "name": "test_staking_escrow_has_dispatcher",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "staking_escrow_deployer": [
                    "Callable[[List, bool], None]"
                ],
                "testerchain": [
                    "Callable[[List, bool], None]"
                ],
                "test_registry": [
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "test_upgrade": {
            "name": "test_upgrade",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "token_economics": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_rollback": {
            "name": "test_rollback",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "List[str]",
                    "str",
                    "int"
                ],
                "test_registry": [
                    "int",
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ]
            }
        },
        "test_deploy_bare_upgradeable_contract_deployment": {
            "name": "test_deploy_bare_upgradeable_contract_deployment",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "test_registry": [
                    "nucypher.blockchain.eth.deployers.NucypherTokenDeployer"
                ],
                "token_economics": [
                    "str"
                ]
            }
        },
        "test_deployer_version_management": {
            "name": "test_deployer_version_management",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "str"
                ],
                "test_registry": [
                    "Callable",
                    "str"
                ],
                "token_economics": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_manual_proxy_retargeting": {
            "name": "test_manual_proxy_retargeting",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "test_registry": [
                    "str"
                ],
                "token_economics": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_token_deployer.py": {
        "test_token_deployer_and_agent": {
            "name": "test_token_deployer_and_agent",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "List[str]"
                ],
                "deployment_progress": [
                    "blockchain.Blockchain",
                    "float"
                ],
                "test_registry": []
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/deployers/test_worklock_deployer.py": {
        "baseline_deployment": {
            "name": "baseline_deployment",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "adjudicator_deployer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "worklock_deployer": {
            "name": "worklock_deployer",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "baseline_deployment": [
                    "str",
                    "bool"
                ],
                "testerchain": [
                    "int",
                    "float",
                    "str"
                ],
                "test_registry": [
                    "int",
                    "float",
                    "str"
                ],
                "token_economics": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_worklock_deployment": {
            "name": "test_worklock_deployment",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "worklock_deployer": [
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "baseline_deployment": [
                    "bool"
                ],
                "staking_escrow_deployer": [
                    "Optional[Callable[..., Any]]",
                    "bool",
                    "str"
                ],
                "deployment_progress": [
                    "int",
                    "List[int]",
                    "list",
                    "List[float]"
                ],
                "test_registry": [
                    "List[Tuple[int, int, float]]"
                ],
                "testerchain": [
                    "bool"
                ]
            }
        },
        "test_make_agent": {
            "name": "test_make_agent",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "worklock_deployer": [],
                "test_registry": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_deployment_parameters": {
            "name": "test_deployment_parameters",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "worklock_deployer": [
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "test_registry": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "token_economics": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/interfaces/test_chains.py": {
        "another_testerchain": {
            "name": "another_testerchain",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "solidity_compiler": [
                    "str",
                    "types.Ty"
                ]
            }
        },
        "test_testerchain_creation": {
            "name": "test_testerchain_creation",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "another_testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_multiversion_contract": {
            "name": "test_multiversion_contract",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_block_confirmations": {
            "name": "test_block_confirmations",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Dict[str, Any]",
                    "int",
                    "raiden.utils.BlockIdentifier"
                ],
                "test_registry": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "path.Path"
                ],
                "mocker": [
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "raiden.utils.MessageID"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/interfaces/test_preallocation_registry.py": {
        "test_individual_allocation_registry": {
            "name": "test_individual_allocation_registry",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "get_random_checksum_address": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "test_registry": [
                    "Optional[str]",
                    "str",
                    "list",
                    "bool",
                    "int"
                ],
                "tempfile_path": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "testerchain": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "test_registry_source_manager": [
                    "Optional[str]",
                    "str",
                    "list",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/blockchain/interfaces/test_solidity_compiler.py": {
        "test_nucypher_contract_compiled": {
            "name": "test_nucypher_contract_compiled",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "test_registry": [
                    "lightbus.path.BusPath"
                ]
            }
        },
        "test_multi_source_compilation": {
            "name": "test_multi_source_compilation",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "float"
                ]
            }
        },
        "test_multi_versions": {
            "name": "test_multi_versions",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/acceptance/blockchain/interfaces/test_token_and_stake.py": {
        "test_stake": {
            "name": "test_stake",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bytes"
                ],
                "token_economics": [
                    "Callable",
                    "web3.contracContract",
                    "web3.Web3"
                ],
                "agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bytes"
                ]
            }
        },
        "test_stake_equality": {
            "name": "test_stake_equality",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "token_economics": [
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "web3.contracContract"
                ],
                "get_random_checksum_address": [
                    "Optional[str]",
                    "eth.rlp.headers.CollationHeader"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_stake_integration": {
            "name": "test_stake_integration",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "stakers": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/characters/conftest.py": {},
    "nucypher-master/tests/acceptance/characters/test_decentralized_grant.py": {
        "test_decentralized_grant": {
            "name": "test_decentralized_grant",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, float]"
                ],
                "blockchain_bob": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, float]"
                ],
                "agency": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/characters/test_freerider_attacks.py": {
        "test_policy_simple_sinpa": {
            "name": "test_policy_simple_sinpa",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "blockchain_alice": [
                    "str",
                    "float"
                ],
                "blockchain_bob": [
                    "bool",
                    "str",
                    "Union[int, float]",
                    "float"
                ],
                "agency": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "testerchain": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_try_to_post_free_arrangement_by_hacking_enact": {
            "name": "test_try_to_post_free_arrangement_by_hacking_enact",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "bool"
                ],
                "blockchain_alice": [
                    "dict"
                ],
                "blockchain_bob": [
                    "bool",
                    "str"
                ],
                "agency": [
                    "bool"
                ],
                "testerchain": [
                    "bool"
                ]
            }
        },
        "test_pay_a_flunky_instead_of_the_arranged_ursula": {
            "name": "test_pay_a_flunky_instead_of_the_arranged_ursula",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "str",
                    "boggle.models.board.Board"
                ],
                "blockchain_bob": [
                    "str",
                    "Iterable[str]"
                ],
                "blockchain_ursulas": [
                    "str",
                    "boggle.models.board.Board"
                ],
                "ursula_decentralized_test_config": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "testerchain": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/characters/test_stakeholder.py": {
        "test_software_stakeholder_configuration": {
            "name": "test_software_stakeholder_configuration",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "int"
                ],
                "test_registry": [
                    "bool",
                    "str",
                    "int"
                ],
                "stakeholder_configuration": [
                    "str"
                ],
                "stakeholder_config_file_location": [
                    "str"
                ]
            }
        },
        "test_initialize_stake_with_existing_account": {
            "name": "test_initialize_stake_with_existing_account",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool"
                ],
                "software_stakeholder": [
                    "bool"
                ],
                "stake_value": [
                    "Callable",
                    "bool"
                ],
                "token_economics": [
                    "Callable",
                    "int"
                ],
                "test_registry": [
                    "float"
                ]
            }
        },
        "test_divide_stake": {
            "name": "test_divide_stake",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "software_stakeholder": [
                    "dict"
                ],
                "token_economics": [
                    "List[int]"
                ],
                "test_registry": [
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "test_bond_worker": {
            "name": "test_bond_worker",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "software_stakeholder": [],
                "manual_worker": [],
                "test_registry": []
            }
        },
        "test_collect_inflation_rewards": {
            "name": "test_collect_inflation_rewards",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "software_stakeholder": [],
                "manual_worker": [
                    "tests.utils.CliObjectRunner",
                    "int"
                ],
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "test_registry": [],
                "mock_transacting_power_activation": []
            }
        }
    },
    "nucypher-master/tests/acceptance/characters/test_transacting_power_acceptance.py": {
        "test_character_transacting_power_signing": {
            "name": "test_character_transacting_power_signing",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "agency": [],
                "test_registry": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/characters/test_ursula_prepares_to_act_as_worker.py": {
        "test_stakers_bond_to_ursulas": {
            "name": "test_stakers_bond_to_ursulas",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tuple",
                    "float",
                    "int"
                ],
                "test_registry": [
                    "str"
                ],
                "stakers": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ],
                "ursula_decentralized_test_config": [
                    "tuple",
                    "float",
                    "int"
                ]
            }
        },
        "test_blockchain_ursula_substantiates_stamp": {
            "name": "test_blockchain_ursula_substantiates_stamp",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_blockchain_ursula_verifies_stamp": {
            "name": "test_blockchain_ursula_verifies_stamp",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_vladimir_cannot_verify_interface_with_ursulas_signing_key": {
            "name": "test_vladimir_cannot_verify_interface_with_ursulas_signing_key",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_vladimir_invalidity_without_stake": {
            "name": "test_vladimir_invalidity_without_stake",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ],
                "blockchain_alice": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_vladimir_uses_his_own_signing_key": {
            "name": "test_vladimir_uses_his_own_signing_key",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder",
                    "bool"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_blockchain_ursulas_reencrypt": {
            "name": "test_blockchain_ursulas_reencrypt",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "int",
                    "float",
                    "bool",
                    "List[Tuple[Any, Any]]"
                ],
                "blockchain_alice": [
                    "str",
                    "int"
                ],
                "blockchain_bob": [
                    "str",
                    "int"
                ],
                "policy_value": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/characters/test_ursula_web_status.py": {
        "ursula": {
            "name": "ursula",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [
                    "bool"
                ]
            }
        },
        "test_ursula_html_renders": {
            "name": "test_ursula_html_renders",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [],
                "client": []
            }
        },
        "test_decentralized_json_status_endpoint": {
            "name": "test_decentralized_json_status_endpoint",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [],
                "client": []
            }
        }
    },
    "nucypher-master/tests/acceptance/characters/control/conftest.py": {
        "alice_web_controller_test_client": {
            "name": "alice_web_controller_test_client",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "str"
                ]
            }
        },
        "bob_web_controller_test_client": {
            "name": "bob_web_controller_test_client",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_bob": [
                    "str"
                ]
            }
        },
        "enrico_web_controller_test_client": {
            "name": "enrico_web_controller_test_client",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel_blockchain": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "enrico_web_controller_from_alice": {
            "name": "enrico_web_controller_from_alice",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "Callable",
                    "bytes",
                    "int"
                ],
                "random_policy_label": [
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "alice_rpc_test_client": {
            "name": "alice_rpc_test_client",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "str"
                ]
            }
        },
        "bob_rpc_controller": {
            "name": "bob_rpc_controller",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_bob": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "enrico_rpc_controller_test_client": {
            "name": "enrico_rpc_controller_test_client",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel_blockchain": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "enrico_rpc_controller_from_alice": {
            "name": "enrico_rpc_controller_from_alice",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "Callable",
                    "bytes",
                    "int"
                ],
                "random_policy_label": [
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "create_policy_control_request": {
            "name": "create_policy_control_request",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "blockchain_bob": [
                    "bytes",
                    "str"
                ]
            }
        },
        "grant_control_request": {
            "name": "grant_control_request",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "blockchain_bob": [
                    "bytes"
                ]
            }
        },
        "join_control_request": {
            "name": "join_control_request",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "blockchain_bob": [
                    "bytes"
                ],
                "enacted_blockchain_policy": [
                    "bytes",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "retrieve_control_request": {
            "name": "retrieve_control_request",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "blockchain_bob": [
                    "bool",
                    "int"
                ],
                "enacted_blockchain_policy": [
                    "bytes",
                    "str"
                ],
                "capsule_side_channel_blockchain": [
                    "int",
                    "bool"
                ]
            }
        },
        "encrypt_control_request": {
            "name": "encrypt_control_request",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/acceptance/characters/control/test_rpc_control_blockchain.py": {
        "get_fields": {
            "name": "get_fields",
            "location": 27,
            "return": [
                "str",
                "int",
                "guillotina.interfaces.IResource"
            ],
            "arguments": {
                "interface": [
                    "str",
                    "Optional[str]"
                ],
                "method_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "validate_json_rpc_response_data": {
            "name": "validate_json_rpc_response_data",
            "location": 41,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "response": [
                    "Dict[str, List[str]]",
                    "str",
                    "Callable",
                    "dict"
                ],
                "method_name": [
                    "str",
                    "Union[str, \"TrackingCode\"]"
                ],
                "interface": [
                    "str",
                    "Union[str, \"TrackingCode\"]"
                ]
            }
        },
        "test_alice_rpc_character_control_create_policy": {
            "name": "test_alice_rpc_character_control_create_policy",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "create_policy_control_request": []
            }
        },
        "test_alice_rpc_character_control_bad_input": {
            "name": "test_alice_rpc_character_control_bad_input",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "create_policy_control_request": [
                    "bool"
                ]
            }
        },
        "test_alice_rpc_character_control_derive_policy_encrypting_key": {
            "name": "test_alice_rpc_character_control_derive_policy_encrypting_key",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": []
            }
        },
        "test_alice_rpc_character_control_grant": {
            "name": "test_alice_rpc_character_control_grant",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bob_rpc_character_control_join_policy": {
            "name": "test_bob_rpc_character_control_join_policy",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "bob_rpc_controller": [
                    "int",
                    "Dict[str, str]"
                ],
                "join_control_request": [
                    "str",
                    "Optional[str]"
                ],
                "enacted_federated_policy": [
                    "bytes",
                    "list",
                    "bool"
                ]
            }
        },
        "test_enrico_rpc_character_control_encrypt_message": {
            "name": "test_enrico_rpc_character_control_encrypt_message",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "enrico_rpc_controller_test_client": [],
                "encrypt_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bob_rpc_character_control_retrieve": {
            "name": "test_bob_rpc_character_control_retrieve",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "bob_rpc_controller": [
                    "int",
                    "Dict[str, str]"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_bob_rpc_character_control_retrieve_with_tmap": {
            "name": "test_bob_rpc_character_control_retrieve_with_tmap",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_blockchain_policy": [
                    "bytes"
                ],
                "blockchain_bob": [],
                "blockchain_alice": [],
                "bob_rpc_controller": [
                    "str"
                ],
                "retrieve_control_request": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/characters/control/test_web_control_blockchain.py": {
        "test_label_whose_b64_representation_is_invalid_utf8": {
            "name": "test_label_whose_b64_representation_is_invalid_utf8",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [],
                "create_policy_control_request": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_alice_web_character_control_create_policy": {
            "name": "test_alice_web_character_control_create_policy",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "create_policy_control_request": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_alice_web_character_control_derive_policy_encrypting_key": {
            "name": "test_alice_web_character_control_derive_policy_encrypting_key",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_alice_web_character_control_grant": {
            "name": "test_alice_web_character_control_grant",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "dict",
                    "flask.testing.FlaskClient"
                ],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_alice_web_character_control_grant_error_messages": {
            "name": "test_alice_web_character_control_grant_error_messages",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]"
                ],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_alice_character_control_revoke": {
            "name": "test_alice_character_control_revoke",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "blockchain_bob": []
            }
        },
        "test_alice_character_control_decrypt": {
            "name": "test_alice_character_control_decrypt",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "dict",
                    "flask.testing.FlaskClient"
                ],
                "enacted_blockchain_policy": [
                    "str"
                ],
                "capsule_side_channel_blockchain": [
                    "str"
                ]
            }
        },
        "test_bob_character_control_join_policy": {
            "name": "test_bob_character_control_join_policy",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "enacted_blockchain_policy": [
                    "bytes"
                ]
            }
        },
        "test_bob_web_character_control_retrieve": {
            "name": "test_bob_web_character_control_retrieve",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_bob_web_character_control_retrieve_with_tmap": {
            "name": "test_bob_web_character_control_retrieve_with_tmap",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_blockchain_policy": [
                    "int",
                    "bool"
                ],
                "bob_web_controller_test_client": [
                    "str",
                    "flask.testing.FlaskClient",
                    "Dict[str, str]"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_enrico_web_character_control_encrypt_message": {
            "name": "test_enrico_web_character_control_encrypt_message",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "enrico_web_controller_test_client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "encrypt_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_web_character_control_lifecycle": {
            "name": "test_web_character_control_lifecycle",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "bool"
                ],
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "enrico_web_controller_from_alice": [
                    "bool"
                ],
                "blockchain_alice": [
                    "Callable[[], int]",
                    "str"
                ],
                "blockchain_bob": [
                    "slice"
                ],
                "blockchain_ursulas": [
                    "bool"
                ],
                "random_policy_label": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_alice.py": {
        "test_missing_configuration_file": {
            "name": "test_missing_configuration_file",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "default_filepath_mock": [],
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI",
                    "neuromation.cli.rooRoot",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_initialize_alice_defaults": {
            "name": "test_initialize_alice_defaults",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "custom_filepath": [
                    "Container",
                    "str"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_alice_control_starts_with_mocked_keyring": {
            "name": "test_alice_control_starts_with_mocked_keyring",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mocker": [
                    "tests.setup.SetupTest"
                ],
                "monkeypatch": [
                    "tests.async_mock.Mock",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_initialize_alice_with_custom_configuration_root": {
            "name": "test_initialize_alice_with_custom_configuration_root",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "tbump.config.Config",
                    "jumeaux.domain.config.vo.Config",
                    "str"
                ],
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "monkeypatch": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_alice_control_starts_with_preexisting_configuration": {
            "name": "test_alice_control_starts_with_preexisting_configuration",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": [
                    "str"
                ]
            }
        },
        "test_alice_cannot_init_with_dev_flag": {
            "name": "test_alice_cannot_init_with_dev_flag",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_alice_derive_policy_pubkey": {
            "name": "test_alice_derive_policy_pubkey",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_alice_public_keys": {
            "name": "test_alice_public_keys",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": []
            }
        },
        "test_alice_view_preexisting_configuration": {
            "name": "test_alice_view_preexisting_configuration",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": [
                    "str",
                    "int",
                    "tests.fixtures.cloud_uploader.Uploader"
                ]
            }
        },
        "test_alice_destroy": {
            "name": "test_alice_destroy",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": []
            }
        },
        "test_alice_control_starts_with_mocked_keyring.MockKeyring.unlock": {
            "name": "unlock",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "password": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_bob.py": {
        "test_missing_configuration_file": {
            "name": "test_missing_configuration_file",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "default_filepath_mock": [],
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI",
                    "neuromation.cli.rooRoot",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_bob_public_keys": {
            "name": "test_bob_public_keys",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": []
            }
        },
        "test_initialize_bob_with_custom_configuration_root": {
            "name": "test_initialize_bob_with_custom_configuration_root",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "cmk.utils.type_defs.UserId",
                    "tbump.config.Config",
                    "jumeaux.domain.config.vo.Config",
                    "str"
                ],
                "click_runner": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_bob_control_starts_with_preexisting_configuration": {
            "name": "test_bob_control_starts_with_preexisting_configuration",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_bob_view_with_preexisting_configuration": {
            "name": "test_bob_view_with_preexisting_configuration",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "custom_filepath": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_bob_retrieves_twice_via_cli": {
            "name": "test_bob_retrieves_twice_via_cli",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "capsule_side_channel": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Dict[str, Any]",
                    "str"
                ],
                "enacted_federated_policy": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "custom_filepath_2": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "federated_alice": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mocker": [
                    "mock.MagicMock",
                    "raiden.utils.Address"
                ]
            }
        },
        "test_bob_destroy": {
            "name": "test_bob_destroy",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_bob_retrieves_twice_via_cli.substitute_bob": {
            "name": "substitute_bob",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/acceptance/cli/test_cli_config.py": {
        "test_initialize_via_cli": {
            "name": "test_initialize_via_cli",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "config_class": [
                    "cmk.base.config.HostConfig",
                    "Optional[dict]",
                    "config.Config",
                    "cmk.base.config.ConfigCache"
                ],
                "custom_filepath": [
                    "dict",
                    "Exception",
                    "config.Config",
                    "str"
                ],
                "click_runner": [
                    "Optional[Dict[str, str]]"
                ],
                "monkeypatch": []
            }
        },
        "test_reconfigure_via_cli": {
            "name": "test_reconfigure_via_cli",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "pyshgp.push.config.PushConfig",
                    "raiden.constants.EthClient"
                ],
                "custom_filepath": [
                    "str"
                ],
                "config_class": [
                    "str"
                ],
                "monkeypatch": [
                    "str",
                    "Callable"
                ],
                "test_registry": [
                    "bool",
                    "Iterable[str]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_reconfigure_via_cli.fake_get_latest_registry": {
            "name": "fake_get_latest_registry",
            "location": 68,
            "return": [
                "str",
                "Union[int, float, complex]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/acceptance/cli/test_cli_lifecycle.py": {
        "test_federated_cli_lifecycle": {
            "name": "test_federated_cli_lifecycle",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "testerchain": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "random_policy_label": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "federated_ursulas": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "custom_filepath": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "custom_filepath_2": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "test_decentralized_cli_lifecycle": {
            "name": "test_decentralized_cli_lifecycle",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "testerchain": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "random_policy_label": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "blockchain_ursulas": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "custom_filepath": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "custom_filepath_2": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ],
                "agency_local_registry": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "_cli_lifecycle": {
            "name": "_cli_lifecycle",
            "location": 126,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [],
                "random_policy_label": [],
                "ursulas": [],
                "custom_filepath": [],
                "custom_filepath_2": [],
                "registry_filepath": []
            }
        },
        "MockSideChannel.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_message_kit": {
            "name": "save_message_kit",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_kit": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]",
                    "float"
                ]
            }
        },
        "MockSideChannel.fetch_message_kit": {
            "name": "fetch_message_kit",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_policy": {
            "name": "save_policy",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "int",
                    "str"
                ]
            }
        },
        "MockSideChannel.fetch_policy": {
            "name": "fetch_policy",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_alice_pubkey": {
            "name": "save_alice_pubkey",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[\"PNBuffer\"]",
                    "list",
                    "str"
                ]
            }
        },
        "MockSideChannel.fetch_alice_pubkey": {
            "name": "fetch_alice_pubkey",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockSideChannel.save_bob_public_keys": {
            "name": "save_bob_public_keys",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "public_keys": [
                    "list",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MockSideChannel.fetch_bob_public_keys": {
            "name": "fetch_bob_public_keys",
            "location": 88,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_cli_lifecycle.enrico_encrypts": {
            "name": "enrico_encrypts",
            "location": 254,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {}
        },
        "_cli_lifecycle._alice_decrypts": {
            "name": "_alice_decrypts",
            "location": 273,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "encrypt_result": [
                    "int",
                    "List[datetime.time]",
                    "Optional[List[str]]",
                    "Union[int, float]"
                ]
            }
        },
        "_cli_lifecycle._run_teacher": {
            "name": "_run_teacher",
            "location": 319,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "_encrypt_result": [
                    "bool",
                    "int"
                ]
            }
        },
        "_cli_lifecycle._grant": {
            "name": "_grant",
            "location": 323,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "teacher_uri": [
                    "bool"
                ]
            }
        },
        "_cli_lifecycle._bob_retrieves": {
            "name": "_bob_retrieves",
            "location": 360,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "_grant_result": [
                    "List[str]",
                    "bool",
                    "Iterable",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_deploy.py": {
        "registry_filepath": {
            "name": "registry_filepath",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "temp_dir_path": [
                    "str"
                ]
            }
        },
        "test_echo_solidity_version": {
            "name": "test_echo_solidity_version",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_nucypher_deploy_contracts": {
            "name": "test_nucypher_deploy_contracts",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "bool"
                ],
                "token_economics": [
                    "str"
                ],
                "registry_filepath": [
                    "str",
                    "Optional[bool]",
                    "int"
                ],
                "testerchain": [
                    "str"
                ]
            }
        },
        "test_deploy_single_contract": {
            "name": "test_deploy_single_contract",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "tempfile_path": [
                    "str"
                ]
            }
        },
        "test_transfer_tokens": {
            "name": "test_transfer_tokens",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "registry_filepath": [
                    "bool",
                    "tests.e2e.Helper"
                ]
            }
        },
        "test_upgrade_contracts": {
            "name": "test_upgrade_contracts",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "registry_filepath": [
                    "str"
                ],
                "testerchain": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_rollback": {
            "name": "test_rollback",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [],
                "registry_filepath": [
                    "dict"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_deploy_commands.py": {
        "test_nucypher_deploy_inspect_no_deployments": {
            "name": "test_nucypher_deploy_inspect_no_deployments",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.async_mock.MagicMock"
                ],
                "new_local_registry": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_set_range": {
            "name": "test_set_range",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.async_mock.Mock"
                ],
                "agency_local_registry": []
            }
        },
        "test_nucypher_deploy_inspect_fully_deployed": {
            "name": "test_nucypher_deploy_inspect_fully_deployed",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "agency_local_registry": []
            }
        },
        "test_transfer_ownership": {
            "name": "test_transfer_ownership",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [],
                "agency_local_registry": []
            }
        },
        "test_bare_contract_deployment_to_alternate_registry": {
            "name": "test_bare_contract_deployment_to_alternate_registry",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "agency_local_registry": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_manual_proxy_retargeting": {
            "name": "test_manual_proxy_retargeting",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[Callable[[Any], Any]]"
                ],
                "click_runner": [
                    "str"
                ],
                "token_economics": [
                    "str",
                    "Optional[Callable[[Any], Any]]"
                ]
            }
        },
        "test_batch_deposits": {
            "name": "test_batch_deposits",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "slice"
                ],
                "agency_local_registry": [],
                "mock_allocation_infile": [],
                "token_economics": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_manual_deployment_of_idle_network": {
            "name": "test_manual_deployment_of_idle_network",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.setup.SetupTest"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_enrico.py": {
        "test_enrico_encrypt": {
            "name": "test_enrico_encrypt",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_enrico_control_starts": {
            "name": "test_enrico_control_starts",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": []
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_felix.py": {
        "test_missing_configuration_file": {
            "name": "test_missing_configuration_file",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "default_filepath_mock": [],
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI",
                    "neuromation.cli.rooRoot",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_run_felix": {
            "name": "test_run_felix",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "str",
                    "tsrc.teshelpers.cli.CLI"
                ],
                "testerchain": [
                    "str"
                ],
                "agency_local_registry": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_run_felix.run_felix": {
            "name": "run_felix",
            "location": 88,
            "return": [
                "bool",
                "int",
                "Coroutine"
            ],
            "arguments": {}
        },
        "test_run_felix.request_felix_landing_page": {
            "name": "request_felix_landing_page",
            "location": 100,
            "return": [
                "twisted.internedefer.Deferred",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str",
                "Iterator[Any]",
                "bytes"
            ],
            "arguments": {
                "_result": [
                    "Callable",
                    "Sequence",
                    "dict"
                ]
            }
        },
        "test_run_felix.time_travel": {
            "name": "time_travel",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "_result": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "test_run_felix.confirm_airdrop": {
            "name": "confirm_airdrop",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "_results": [
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_help.py": {
        "test_echo_nucypher_version": {
            "name": "test_echo_nucypher_version",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ]
            }
        },
        "test_nucypher_help_message": {
            "name": "test_nucypher_help_message",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Callable"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "test_character_help_messages": {
            "name": "test_character_help_messages",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "entry_point_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "entry_point": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_character_sub_command_help_messages": {
            "name": "test_character_sub_command_help_messages",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Dict[str, int]",
                    "Dict[str, Any]"
                ],
                "entry_point_name": [
                    "Union[dict, list]",
                    "str",
                    "int",
                    "list"
                ],
                "entry_point": [
                    "Optional[str]",
                    "str",
                    "list"
                ]
            }
        },
        "test_nucypher_deploy_help_message": {
            "name": "test_nucypher_deploy_help_message",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_mixed_configurations.py": {
        "custom_filepath": {
            "name": "custom_filepath",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_destroy_with_no_configurations": {
            "name": "test_destroy_with_no_configurations",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": [
                    "tests.basilisp.helpers.CompileFn",
                    "backup.config.Config"
                ]
            }
        },
        "test_coexisting_configurations": {
            "name": "test_coexisting_configurations",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "str"
                ],
                "custom_filepath": [
                    "pathlib.Path",
                    "path.Path"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "agency_local_registry": [
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_corrupted_configuration": {
            "name": "test_corrupted_configuration",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "str",
                    "tsrc.teshelpers.cli.CLI"
                ],
                "custom_filepath": [],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "agency_local_registry": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_multisig_cli.py": {
        "multisig_owners": {
            "name": "multisig_owners",
            "location": 36,
            "return": [
                "Iterable[int]",
                "str",
                "IO[str]",
                "bool"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "Optional[str]",
                    "Tuple[str, int]",
                    "str",
                    "bytearray"
                ]
            }
        },
        "multisig_parameters_filepath": {
            "name": "multisig_parameters_filepath",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "multisig_owners": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, str]",
                    "Set[str]",
                    "Tuple[Any, Any, Any]"
                ],
                "temp_dir_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_deploy_multisig_contract": {
            "name": "test_deploy_multisig_contract",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Callable[[List, bool], None]",
                    "Callable"
                ],
                "multisig_parameters_filepath": [],
                "multisig_owners": [
                    "str",
                    "Callable",
                    "Tuple[str]",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "new_local_registry": [
                    "float"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_rpc_ipc_transport.py": {
        "rpc_protocol": {
            "name": "rpc_protocol",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_alice_rpc_controller_creation": {
            "name": "test_alice_rpc_controller_creation",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str",
                    "float"
                ]
            }
        },
        "test_rpc_invalid_input": {
            "name": "test_rpc_invalid_input",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "rpc_protocol": [
                    "int",
                    "Sequence[int]",
                    "str"
                ],
                "federated_alice": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TransportTrap.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportTrap.__enter__": {
            "name": "__enter__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportTrap.__exit__": {
            "name": "__exit__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "TransportTrap.read": {
            "name": "read",
            "location": 42,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "str",
                    "Iterator[str]",
                    "Iterable[str]"
                ]
            }
        },
        "TransportTrap.write": {
            "name": "write",
            "location": 54,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "float",
                    "dict"
                ]
            }
        },
        "TransportTrap.flush": {
            "name": "flush",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_status.py": {
        "test_nucypher_status_network": {
            "name": "test_nucypher_status_network",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [],
                "agency_local_registry": []
            }
        },
        "test_nucypher_status_stakers": {
            "name": "test_nucypher_status_stakers",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.e2e.Helper",
                    "dict"
                ],
                "agency_local_registry": [],
                "stakers": [
                    "int"
                ]
            }
        },
        "test_nucypher_status_fee_range": {
            "name": "test_nucypher_status_fee_range",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "agency_local_registry": [],
                "stakers": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture"
                ]
            }
        },
        "test_nucypher_status_locked_tokens": {
            "name": "test_nucypher_status_locked_tokens",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [],
                "agency_local_registry": [],
                "stakers": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "jsonlog.tests.capture.Capture"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/test_worklock_cli.py": {
        "bids": {
            "name": "bids",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "test_status": {
            "name": "test_status",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Callable",
                    "type",
                    "str"
                ],
                "testerchain": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool",
                    "Callable",
                    "str",
                    "web3.contracContract"
                ],
                "agency_local_registry": [],
                "token_economics": [
                    "bool"
                ]
            }
        },
        "test_bid": {
            "name": "test_bid",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "web3.contracContract"
                ],
                "testerchain": [
                    "float"
                ],
                "agency_local_registry": [],
                "token_economics": [],
                "bids": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_cancel_bid": {
            "name": "test_cancel_bid",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "web3.contracContract",
                    "bool",
                    "Callable"
                ],
                "testerchain": [
                    "str"
                ],
                "agency_local_registry": [],
                "token_economics": [
                    "str"
                ],
                "bids": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_enable_claiming": {
            "name": "test_enable_claiming",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "web3.contracContract"
                ],
                "testerchain": [
                    "web3.Web3",
                    "tests.async_mock.Mock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "agency_local_registry": [],
                "token_economics": [
                    "web3.Web3",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_claim": {
            "name": "test_claim",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "web3.contracContract",
                    "bool",
                    "Callable"
                ],
                "testerchain": [],
                "agency_local_registry": [],
                "token_economics": []
            }
        },
        "test_remaining_work": {
            "name": "test_remaining_work",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "testerchain": [],
                "agency_local_registry": [],
                "token_economics": []
            }
        },
        "test_refund": {
            "name": "test_refund",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "web3.contracContract"
                ],
                "testerchain": [],
                "agency_local_registry": [
                    "float",
                    "Callable",
                    "web3.contracContract",
                    "qutebrowser.utils.usertypes.Backend",
                    "raiden.utils.SecreRegistryAddress"
                ],
                "token_economics": []
            }
        },
        "test_participant_status": {
            "name": "test_participant_status",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "str",
                    "int"
                ],
                "testerchain": [],
                "agency_local_registry": [
                    "float"
                ],
                "token_economics": [
                    "bool",
                    "float",
                    "pyshgp.push.config.PushConfig",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/ursula/test_federated_ursula.py": {
        "test_initialize_ursula_defaults": {
            "name": "test_initialize_ursula_defaults",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mocker": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_initialize_custom_configuration_root": {
            "name": "test_initialize_custom_configuration_root",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [],
                "click_runner": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_configuration_file_contents": {
            "name": "test_configuration_file_contents",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "Tuple[str]"
                ],
                "nominal_federated_configuration_fields": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_ursula_view_configuration": {
            "name": "test_ursula_view_configuration",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "str"
                ],
                "click_runner": [
                    "str",
                    "Dict[str, Any]"
                ],
                "nominal_federated_configuration_fields": [
                    "bool"
                ]
            }
        },
        "test_run_federated_ursula_from_config_file": {
            "name": "test_run_federated_ursula_from_config_file",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "str"
                ],
                "click_runner": [
                    "str"
                ]
            }
        },
        "test_ursula_save_metadata": {
            "name": "test_ursula_save_metadata",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": [
                    "tests.basilisp.helpers.CompileFn",
                    "tests.setup.SetupTest"
                ]
            }
        },
        "test_ursula_destroy_configuration": {
            "name": "test_ursula_destroy_configuration",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "int",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "click_runner": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/ursula/test_local_keystore_integration.py": {
        "mock_funded_account_password_keystore": {
            "name": "mock_funded_account_password_keystore",
            "location": 43,
            "return": [
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "Optional[str]"
                ],
                "testerchain": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "list"
                ]
            }
        },
        "test_ursula_and_local_keystore_signer_integration": {
            "name": "test_ursula_and_local_keystore_signer_integration",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "tmp_path": [
                    "tests.fixtures.cloud_uploader.Uploader"
                ],
                "manual_staker": [
                    "Callable",
                    "bool"
                ],
                "stake_value": [
                    "Callable",
                    "Optional[str]"
                ],
                "token_economics": [
                    "Callable",
                    "Optional[str]"
                ],
                "mocker": [],
                "mock_funded_account_password_keystore": [
                    "tests.clienMDMClient",
                    "str",
                    "List[str]"
                ],
                "testerchain": [
                    "tsrc.teshelpers.cli.CLI",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/ursula/test_run_ursula.py": {
        "test_missing_configuration_file": {
            "name": "test_missing_configuration_file",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "default_filepath_mock": [],
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI",
                    "neuromation.cli.rooRoot",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_ursula_rest_host_determination": {
            "name": "test_ursula_rest_host_determination",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "Dict[str, Any]"
                ],
                "mocker": []
            }
        },
        "test_run_lone_federated_default_development_ursula": {
            "name": "test_run_lone_federated_default_development_ursula",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "solo.config.app.Config"
                ]
            }
        },
        "test_federated_ursula_learns_via_cli": {
            "name": "test_federated_ursula_learns_via_cli",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_persistent_node_storage_integration": {
            "name": "test_persistent_node_storage_integration",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI"
                ],
                "custom_filepath": [
                    "dict",
                    "tbump.config.Config",
                    "str",
                    "cmk.utils.type_defs.UserId"
                ],
                "testerchain": [],
                "blockchain_ursulas": [],
                "agency_local_registry": [
                    "str"
                ]
            }
        },
        "test_federated_ursula_learns_via_cli.run_teacher": {
            "name": "run_teacher",
            "location": 112,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {}
        },
        "test_federated_ursula_learns_via_cli.run_ursula": {
            "name": "run_ursula",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "teacher_uri": [
                    "Awaitable",
                    "Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/ursula/test_stakeholder_and_ursula.py": {
        "test_missing_configuration_file": {
            "name": "test_missing_configuration_file",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "default_filepath_mock": [],
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI",
                    "neuromation.cli.rooRoot",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_new_stakeholder": {
            "name": "test_new_stakeholder",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]"
                ],
                "custom_filepath": [
                    "Exception"
                ],
                "agency_local_registry": [],
                "testerchain": [
                    "jsonlog.tests.capture.Capture",
                    "bool",
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_stake_init": {
            "name": "test_stake_init",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "stakeholder_configuration_file_location": [
                    "str",
                    "config.Config",
                    "Dict[str, Any]",
                    "dict"
                ],
                "stake_value": [],
                "token_economics": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[dict]"
                ],
                "testerchain": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "agency_local_registry": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "manual_staker": [
                    "int",
                    "raiden.utils.PaymentNetworkID",
                    "Optional[str]"
                ]
            }
        },
        "test_stake_list": {
            "name": "test_stake_list",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "int"
                ],
                "stakeholder_configuration_file_location": [
                    "raiden.constants.Environment",
                    "tuple",
                    "str",
                    "Dict[str, Any]"
                ],
                "stake_value": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[float]"
                ],
                "agency_local_registry": [
                    "str",
                    "bool"
                ],
                "testerchain": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_staker_divide_stakes": {
            "name": "test_staker_divide_stakes",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "bool"
                ],
                "stakeholder_configuration_file_location": [
                    "List[str]",
                    "Tuple[int, int]"
                ],
                "token_economics": [
                    "str",
                    "List[str]"
                ],
                "manual_staker": [
                    "Tuple[str, str]",
                    "str",
                    "Dict[str, Any]",
                    "Type[MutableMapping]",
                    "Dict[str, str]",
                    "dict",
                    "List[str]",
                    "Optional[str]"
                ],
                "testerchain": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "agency_local_registry": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_stake_prolong": {
            "name": "test_stake_prolong",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "agency_local_registry": [
                    "str"
                ],
                "manual_staker": [
                    "dict",
                    "int"
                ],
                "manual_worker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "stakeholder_configuration_file_location": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_stake_bond_worker": {
            "name": "test_stake_bond_worker",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "agency_local_registry": [
                    "str"
                ],
                "manual_staker": [],
                "manual_worker": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "int"
                ],
                "stakeholder_configuration_file_location": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_ursula_init": {
            "name": "test_ursula_init",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "tests.setup.SetupTest"
                ],
                "custom_filepath": [
                    "tsrc.teshelpers.cli.CLI",
                    "tests.e2e.Helper"
                ],
                "agency_local_registry": [
                    "tsrc.teshelpers.cli.CLI",
                    "tests.e2e.Helper"
                ],
                "manual_staker": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock"
                ],
                "manual_worker": [
                    "tsrc.teshelpers.cli.CLI",
                    "tests.e2e.Helper"
                ],
                "testerchain": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_ursula_run": {
            "name": "test_ursula_run",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "manual_worker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "manual_staker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "custom_filepath": [
                    "str"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_stake_restake": {
            "name": "test_stake_restake",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.e2e.Helper",
                    "Dict[str, Any]"
                ],
                "manual_staker": [
                    "int",
                    "str"
                ],
                "custom_filepath": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "agency_local_registry": [
                    "str"
                ],
                "stakeholder_configuration_file_location": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository"
                ]
            }
        },
        "test_stake_winddown": {
            "name": "test_stake_winddown",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tests.e2e.Helper",
                    "Dict[str, Any]"
                ],
                "manual_staker": [
                    "int",
                    "str"
                ],
                "custom_filepath": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "agency_local_registry": [
                    "str"
                ],
                "stakeholder_configuration_file_location": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "int",
                    "config.ConfigFile"
                ]
            }
        },
        "test_collect_rewards_integration": {
            "name": "test_collect_rewards_integration",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Optional[str]",
                    "bool"
                ],
                "testerchain": [
                    "int",
                    "Callable",
                    "str"
                ],
                "agency_local_registry": [
                    "bool"
                ],
                "stakeholder_configuration_file_location": [
                    "baseplate.lib.config.RawConfig",
                    "str"
                ],
                "blockchain_alice": [
                    "int",
                    "List[str]",
                    "str",
                    "Callable",
                    "float",
                    "bytes"
                ],
                "blockchain_bob": [
                    "int",
                    "bool"
                ],
                "random_policy_label": [
                    "int",
                    "bool"
                ],
                "manual_staker": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "manual_worker": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "token_economics": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "bool",
                    "float"
                ],
                "mock_transacting_power_activation": [
                    "str",
                    "float",
                    "List[str]",
                    "int"
                ],
                "policy_value": [
                    "int",
                    "bool"
                ],
                "policy_rate": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_stake_unbond_worker": {
            "name": "test_stake_unbond_worker",
            "location": 568,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "manual_staker": [
                    "int",
                    "str"
                ],
                "manual_worker": [],
                "agency_local_registry": [],
                "stakeholder_configuration_file_location": [
                    "taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_set_min_rate": {
            "name": "test_set_min_rate",
            "location": 600,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "tests.e2e.Helper"
                ],
                "manual_staker": [
                    "int",
                    "str"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ],
                "agency_local_registry": [
                    "str",
                    "bool"
                ],
                "stakeholder_configuration_file_location": [
                    "IO[str]",
                    "neuromation.cli.rooRoot"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/ursula/test_stake_via_allocation_contract.py": {
        "mock_allocation_registry": {
            "name": "mock_allocation_registry",
            "location": 52,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "pricemonitor.config.Coin",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "raiden.utils.Secret",
                    "float",
                    "raiden.utils.ChannelID"
                ],
                "agency_local_registry": [
                    "int",
                    "raiden.utils.Secret",
                    "float",
                    "raiden.utils.ChannelID"
                ],
                "token_economics": [
                    "float",
                    "int"
                ]
            }
        },
        "beneficiary": {
            "name": "beneficiary",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.Web3",
                    "raiden.utils.TokenNetworkID",
                    "cmk.utils.type_defs.ServiceDetails",
                    "cmk.utils.type_defs.ServiceState",
                    "cmk.utils.type_defs.ServiceName",
                    "web3.contracContract"
                ],
                "mock_allocation_registry": [
                    "bytes"
                ]
            }
        },
        "individual_allocation": {
            "name": "individual_allocation",
            "location": 95,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "beneficiary": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "preallocation_escrow_agent": {
            "name": "preallocation_escrow_agent",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "beneficiary": [
                    "bool",
                    "int",
                    "str",
                    "List[utils.CWLObjectType]",
                    "Optional[Callable[[Any], None]]",
                    "float"
                ],
                "agency_local_registry": [
                    "bool",
                    "int",
                    "str",
                    "List[utils.CWLObjectType]",
                    "Optional[Callable[[Any], None]]",
                    "float"
                ],
                "mock_allocation_registry": [
                    "float",
                    "List[str]"
                ],
                "test_registry_source_manager": [
                    "float",
                    "List[str]"
                ],
                "individual_allocation": [
                    "bool",
                    "int",
                    "str",
                    "List[utils.CWLObjectType]",
                    "Optional[Callable[[Any], None]]",
                    "float"
                ]
            }
        },
        "test_stake_via_contract": {
            "name": "test_stake_via_contract",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "tsrc.teshelpers.cli.CLI"
                ],
                "custom_filepath": [
                    "pypi2nix.logger.Logger"
                ],
                "agency_local_registry": [],
                "mock_allocation_registry": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "int"
                ],
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "stakeholder_configuration_file_location": [
                    "bool"
                ],
                "stake_value": [
                    "bool"
                ],
                "token_economics": [],
                "agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "beneficiary": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "int"
                ],
                "preallocation_escrow_agent": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_stake_bond_worker": {
            "name": "test_stake_bond_worker",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "beneficiary": [
                    "bool",
                    "int",
                    "raiden.utils.Secret"
                ],
                "mock_allocation_registry": [
                    "str",
                    "tests.async_mock.MagicMock",
                    "int"
                ],
                "agency_local_registry": [
                    "bool",
                    "int",
                    "raiden.utils.Secret"
                ],
                "manual_worker": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "individual_allocation": [
                    "bool",
                    "int",
                    "raiden.utils.Secret"
                ],
                "stakeholder_configuration_file_location": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_stake_unbond_worker": {
            "name": "test_stake_unbond_worker",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "Dict[str, Any]"
                ],
                "testerchain": [
                    "int",
                    "float"
                ],
                "token_economics": [
                    "int",
                    "float"
                ],
                "beneficiary": [
                    "bool",
                    "str",
                    "Optional[random.Random]",
                    "int",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "preallocation_escrow_agent": [
                    "str",
                    "Optional[str]"
                ],
                "mock_allocation_registry": [
                    "bool",
                    "str",
                    "float",
                    "list",
                    "Set[str]"
                ],
                "manual_worker": [
                    "str",
                    "bool",
                    "raiden.constants.EthClient",
                    "raiden.utils.Iterator[raiden.utils.Port]"
                ],
                "agency_local_registry": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ],
                "individual_allocation": [
                    "bool",
                    "str",
                    "Optional[random.Random]",
                    "int",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "stakeholder_configuration_file_location": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_stake_restake": {
            "name": "test_stake_restake",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "pyshgp.push.config.PushConfig"
                ],
                "beneficiary": [
                    "neuromation.cli.rooRoot"
                ],
                "preallocation_escrow_agent": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mock_allocation_registry": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests._TestServerFactory",
                    "Callable[[], int]",
                    "Generator[None, Any, None]"
                ],
                "agency_local_registry": [
                    "str"
                ],
                "manual_worker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests._TestServerFactory",
                    "Callable[[], int]",
                    "Generator[None, Any, None]"
                ],
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "slice",
                    "tests.conftesWorker"
                ],
                "individual_allocation": [
                    "neuromation.cli.rooRoot"
                ],
                "stakeholder_configuration_file_location": []
            }
        },
        "test_stake_winddown": {
            "name": "test_stake_winddown",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "pyshgp.push.config.PushConfig"
                ],
                "beneficiary": [
                    "str",
                    "neuromation.cli.rooRoot",
                    "tests.utils.CliObjectRunner"
                ],
                "preallocation_escrow_agent": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "mock_allocation_registry": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests._TestServerFactory",
                    "Callable[[], int]",
                    "Generator[None, Any, None]"
                ],
                "agency_local_registry": [
                    "str"
                ],
                "manual_worker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests._TestServerFactory",
                    "Callable[[], int]",
                    "Generator[None, Any, None]"
                ],
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "tests._TestServerFactory",
                    "Callable[[], int]",
                    "Generator[None, Any, None]"
                ],
                "individual_allocation": [
                    "str",
                    "neuromation.cli.rooRoot",
                    "tests.utils.CliObjectRunner"
                ],
                "stakeholder_configuration_file_location": []
            }
        },
        "test_ursula_init": {
            "name": "test_ursula_init",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Dict[str, Any]",
                    "web3.contracContract",
                    "tests.setup.SetupTest"
                ],
                "custom_filepath": [
                    "tsrc.teshelpers.cli.CLI",
                    "tests.e2e.Helper"
                ],
                "agency_local_registry": [
                    "tsrc.teshelpers.cli.CLI",
                    "tests.e2e.Helper"
                ],
                "preallocation_escrow_agent": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock"
                ],
                "manual_worker": [
                    "tsrc.teshelpers.cli.CLI",
                    "tests.e2e.Helper"
                ],
                "testerchain": [
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "test_ursula_run": {
            "name": "test_ursula_run",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "manual_worker": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "custom_filepath": [
                    "str"
                ],
                "testerchain": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_collect_rewards_integration": {
            "name": "test_collect_rewards_integration",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "Optional[str]",
                    "bool"
                ],
                "testerchain": [
                    "int",
                    "Callable",
                    "str"
                ],
                "agency_local_registry": [
                    "float",
                    "Sequence[str]",
                    "str",
                    "Callable[..., Awaitable]"
                ],
                "stakeholder_configuration_file_location": [
                    "dict"
                ],
                "blockchain_alice": [
                    "int",
                    "List[str]",
                    "str",
                    "Callable",
                    "float",
                    "bytes"
                ],
                "blockchain_bob": [
                    "int",
                    "bool"
                ],
                "random_policy_label": [
                    "int",
                    "bool"
                ],
                "beneficiary": [
                    "Dict[str, Any]",
                    "raiden.constants.EthClient",
                    "Callable",
                    "bool"
                ],
                "preallocation_escrow_agent": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "mock_allocation_registry": [
                    "bool",
                    "str"
                ],
                "manual_worker": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "token_economics": [
                    "int",
                    "str",
                    "bool",
                    "Union[int, float]",
                    "Optional[int]",
                    "random.Random"
                ],
                "mock_transacting_power_activation": [
                    "str",
                    "float",
                    "List[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "stake_value": [
                    "bool",
                    "str"
                ],
                "policy_value": [
                    "int",
                    "bool"
                ],
                "policy_rate": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_withdraw_from_preallocation": {
            "name": "test_withdraw_from_preallocation",
            "location": 652,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "bool",
                    "str"
                ],
                "testerchain": [
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "agency_local_registry": [
                    "float",
                    "Optional[Callable[[str], bool]]"
                ],
                "stakeholder_configuration_file_location": [
                    "dict"
                ],
                "beneficiary": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ],
                "preallocation_escrow_agent": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/cli/ursula/test_ursula_command.py": {
        "capture_output": {
            "name": "capture_output",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ursula": {
            "name": "ursula",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "federated_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "protocol": {
            "name": "protocol",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_ursula_command_protocol_creation": {
            "name": "test_ursula_command_protocol_creation",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [
                    "str",
                    "float"
                ]
            }
        },
        "test_ursula_command_help": {
            "name": "test_ursula_command_help",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "protocol": [
                    "Iterable[T]"
                ],
                "ursula": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_ursula_command_status": {
            "name": "test_ursula_command_status",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "protocol": [],
                "ursula": []
            }
        },
        "test_ursula_command_known_nodes": {
            "name": "test_ursula_command_known_nodes",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "protocol": [],
                "ursula": []
            }
        },
        "test_ursula_command_help.FakeTransport.write": {
            "name": "write",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/learning/test_fault_tolerance.py": {
        "test_blockchain_ursula_stamp_verification_tolerance": {
            "name": "test_blockchain_ursula_stamp_verification_tolerance",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Sequence[str]]",
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_invalid_workers_tolerance": {
            "name": "test_invalid_workers_tolerance",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Optional[bool]",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "test_registry": [
                    "raiden.utils.SecretRegistryAddress",
                    "raiden.network.proxies.proxy_manager.ProxyManager",
                    "bool",
                    "float",
                    "int"
                ],
                "blockchain_ursulas": [
                    "str",
                    "float",
                    "Dict[str, Any]"
                ],
                "agency": [
                    "str",
                    "float",
                    "Dict[str, Any]"
                ],
                "idle_staker": [
                    "Optional[str]",
                    "str",
                    "cmk.gui.utils.html.HTML",
                    "bool"
                ],
                "token_economics": [
                    "str",
                    "Sequence[str]",
                    "float",
                    "Optional[List[Any]]",
                    "int",
                    "raiden.utils.PaymentHashInvoice",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "ursula_decentralized_test_config": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_blockchain_ursula_stamp_verification_tolerance.warning_trapper": {
            "name": "warning_trapper",
            "location": 37,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "test_invalid_workers_tolerance.warning_trapper": {
            "name": "warning_trapper",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Sequence",
                    "list",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/network/test_availability.py": {
        "test_availability_tracker_success": {
            "name": "test_availability_tracker_success",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_availability_tracker_integration": {
            "name": "test_availability_tracker_integration",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ],
                "monkeypatch": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_availability_tracker_success.measure": {
            "name": "measure",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_availability_tracker_success.maintain": {
            "name": "maintain",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_availability_tracker_success.raise_to_maximum": {
            "name": "raise_to_maximum",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_availability_tracker_integration.maintain": {
            "name": "maintain",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_availability_tracker_success.maintain.issue_warnings": {
            "name": "issue_warnings",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "tracker": [
                    "dict",
                    "str",
                    "bytearray",
                    "bytes"
                ]
            }
        },
        "test_availability_tracker_integration.maintain.mock_node_information_endpoint": {
            "name": "mock_node_information_endpoint",
            "location": 109,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "List[dict]"
            ],
            "arguments": {
                "middleware": [
                    "bool",
                    "T",
                    "Awaitable[Any]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "int"
                ],
                "port": [
                    "str",
                    "list",
                    "Optional[Union[str, Any]]",
                    "Optional[Mapping[str, str]]",
                    "BinaryIO"
                ]
            }
        }
    },
    "nucypher-master/tests/acceptance/network/test_network_actors.py": {
        "test_all_blockchain_ursulas_know_about_all_other_ursulas": {
            "name": "test_all_blockchain_ursulas_know_about_all_other_ursulas",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str",
                    "bool",
                    "tests.async_mock.Mock"
                ],
                "agency": [
                    "Dict[str, float]",
                    "tests.async_mock.Mock",
                    "str",
                    "int"
                ]
            }
        },
        "test_blockchain_alice_finds_ursula_via_rest": {
            "name": "test_blockchain_alice_finds_ursula_via_rest",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [],
                "blockchain_ursulas": [
                    "str"
                ]
            }
        },
        "test_vladimir_illegal_interface_key_does_not_propagate": {
            "name": "test_vladimir_illegal_interface_key_does_not_propagate",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_alice_refuses_to_make_arrangement_unless_ursula_is_valid": {
            "name": "test_alice_refuses_to_make_arrangement_unless_ursula_is_valid",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "tests.basilisp.helpers.CompileFn",
                    "Type"
                ],
                "idle_blockchain_policy": [
                    "tests.basilisp.helpers.CompileFn",
                    "Type"
                ],
                "blockchain_ursulas": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/test_contracts_upgradeability.py": {
        "download_github_dir": {
            "name": "download_github_dir",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "source_link": [
                    "str"
                ],
                "target_folder": [
                    "str"
                ]
            }
        },
        "download_github_file": {
            "name": "download_github_file",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "source_link": [
                    "str"
                ],
                "target_folder": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "deploy_earliest_contract": {
            "name": "deploy_earliest_contract",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_interface": [
                    "nucypher.blockchain.eth.interfaces.BlockchainDeployerInterface",
                    "str"
                ],
                "deployer": [
                    "nucypher.blockchain.eth.deployers.BaseContractDeployer",
                    "str"
                ]
            }
        },
        "test_upgradeability": {
            "name": "test_upgradeability",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "temp_dir_path": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "token_economics": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/base/test_dispatcher.py": {
        "test_dispatcher": {
            "name": "test_dispatcher",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": []
            }
        },
        "test_selfdestruct": {
            "name": "test_selfdestruct",
            "location": 446,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": []
            }
        },
        "test_receive_fallback": {
            "name": "test_receive_fallback",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": [
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/base/test_issuer.py": {
        "token": {
            "name": "token",
            "location": 29,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str"
                ],
                "deploy_contract": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_issuer": {
            "name": "test_issuer",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "bytes"
                ],
                "deploy_contract": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_issuance_first_phase": {
            "name": "test_issuance_first_phase",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[bool]"
                ],
                "deploy_contract": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[bool]"
                ]
            }
        },
        "test_issuance_second_phase": {
            "name": "test_issuance_second_phase",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[bool]"
                ],
                "deploy_contract": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[bool]"
                ]
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "str",
                    "dict",
                    "bytes",
                    "bool",
                    "int",
                    "Optional[bool]"
                ],
                "deploy_contract": [
                    "str",
                    "dict",
                    "bytes",
                    "bool",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "test_issuer.calculate_first_phase_reward": {
            "name": "calculate_first_phase_reward",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "locked": [
                    "int",
                    "Callable",
                    "str"
                ],
                "total_locked": [
                    "int",
                    "Callable",
                    "str"
                ],
                "locked_periods": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_issuer.calculate_second_phase_reward": {
            "name": "calculate_second_phase_reward",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "locked": [
                    "int",
                    "Callable",
                    "str"
                ],
                "total_locked": [
                    "int",
                    "Callable",
                    "str"
                ],
                "locked_periods": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/base/test_multisig.py": {
        "sign_hash": {
            "name": "sign_hash",
            "location": 27,
            "return": [
                "Optional[float]",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "testerchain": [
                    "dict",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]",
                    "int"
                ],
                "account": [
                    "str",
                    "eth.abc.BlockHeaderAPI"
                ],
                "data_hash": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Mapping[str, str]"
                ]
            }
        },
        "test_execute": {
            "name": "test_execute",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "raiden.utils.PrivateKey"
                ],
                "deploy_contract": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "execute_transaction": {
            "name": "execute_transaction",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "Union[str, int]",
                    "Sized"
                ],
                "multisig": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "raiden.utils.Secret"
                ],
                "accounts": [
                    "str",
                    "Optional[str]"
                ],
                "tx": [
                    "str",
                    "Optional[str]",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ]
            }
        },
        "test_owners_management": {
            "name": "test_owners_management",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ],
                "deploy_contract": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/integration/test_contract_economics.py": {
        "test_reward": {
            "name": "test_reward",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "float"
                ],
                "agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "token_economics": [
                    "str",
                    "List[str]"
                ],
                "mock_transacting_power_activation": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/integration/test_intercontract_integration.py": {
        "pytest_namespace": {
            "name": "pytest_namespace",
            "location": 36,
            "return": [
                "str",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "token_economics": {
            "name": "token_economics",
            "location": 45,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {}
        },
        "token": {
            "name": "token",
            "location": 66,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "token_economics": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "deploy_contract": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "escrow_bare": {
            "name": "escrow_bare",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "aiocometd.constants.TransportState"
                ],
                "token": [
                    "str",
                    "Optional[str]"
                ],
                "token_economics": [
                    "str",
                    "Optional[str]"
                ],
                "deploy_contract": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "escrow_dispatcher": {
            "name": "escrow_dispatcher",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "escrow_bare": [
                    "int",
                    "list",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "escrow": {
            "name": "escrow",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "raiden.utils.Address",
                    "dict",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "escrow_bare": [
                    "str",
                    "raiden.utils.Address",
                    "dict",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "escrow_dispatcher": [
                    "str",
                    "raiden.utils.Address",
                    "dict",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "policy_manager_bare": {
            "name": "policy_manager_bare",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "escrow": [
                    "int",
                    "list",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "policy_manager_dispatcher": {
            "name": "policy_manager_dispatcher",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "policy_manager_bare": [
                    "int",
                    "list",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "policy_manager": {
            "name": "policy_manager",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "raiden.utils.Address",
                    "cmk.utils.type_defs.EventRule"
                ],
                "policy_manager_bare": [
                    "raiden.utils.Address",
                    "cmk.utils.type_defs.EventRule"
                ],
                "policy_manager_dispatcher": [
                    "raiden.utils.Address",
                    "cmk.utils.type_defs.EventRule"
                ],
                "escrow": [
                    "bytes",
                    "Optional[int]",
                    "slice",
                    "float"
                ]
            }
        },
        "adjudicator_bare": {
            "name": "adjudicator_bare",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "List[int]",
                    "str",
                    "bool"
                ],
                "token_economics": [
                    "bytes"
                ],
                "escrow": [
                    "bytes"
                ],
                "deploy_contract": [
                    "bytes"
                ]
            }
        },
        "adjudicator_dispatcher": {
            "name": "adjudicator_dispatcher",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "adjudicator_bare": [
                    "int",
                    "list",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "adjudicator": {
            "name": "adjudicator",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "raiden.utils.Address",
                    "dict",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "adjudicator_bare": [
                    "str",
                    "raiden.utils.Address",
                    "dict",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "adjudicator_dispatcher": [
                    "str",
                    "raiden.utils.Address",
                    "dict",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "escrow": [
                    "int",
                    "slice"
                ]
            }
        },
        "mock_ursula": {
            "name": "mock_ursula",
            "location": 153,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "account": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "mocker": []
            }
        },
        "generate_args_for_slashing": {
            "name": "generate_args_for_slashing",
            "location": 166,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "mock_ursula_reencrypts": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "meeshkan.core.api.Api"
                ],
                "ursula": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "meeshkan.core.api.Api"
                ]
            }
        },
        "staking_interface": {
            "name": "staking_interface",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "List[int]",
                    "str",
                    "bool"
                ],
                "token": [
                    "str",
                    "bytes",
                    "int",
                    "List[List[str]]",
                    "List[str]"
                ],
                "escrow": [
                    "str",
                    "bytes",
                    "int",
                    "List[List[str]]",
                    "List[str]"
                ],
                "policy_manager": [
                    "str",
                    "bytes",
                    "int",
                    "List[List[str]]",
                    "List[str]"
                ],
                "worklock": [
                    "str",
                    "bytes",
                    "int",
                    "List[List[str]]",
                    "List[str]"
                ],
                "deploy_contract": [
                    "str",
                    "bytes",
                    "int",
                    "List[List[str]]",
                    "List[str]"
                ]
            }
        },
        "staking_interface_router": {
            "name": "staking_interface_router",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "staking_interface": [
                    "int",
                    "list",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "worklock": {
            "name": "worklock",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "raiden.utils.TokenAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.Secret",
                    "raiden.utils.SecretHash",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.TokenAddress"
                ],
                "token": [
                    "str",
                    "Optional[int]",
                    "Dict[Tuple[int, int], str]",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Address"
                ],
                "escrow": [
                    "str",
                    "Optional[int]",
                    "Dict[Tuple[int, int], str]",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Address"
                ],
                "token_economics": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Sequence"
                ],
                "deploy_contract": [
                    "str",
                    "Optional[int]",
                    "Dict[Tuple[int, int], str]",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Address"
                ]
            }
        },
        "multisig": {
            "name": "multisig",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "cmk.utils.type_defs.UserId",
                    "trezor.utils.Writer"
                ],
                "escrow": [
                    "int",
                    "slice",
                    "web3.types.Wei"
                ],
                "policy_manager": [
                    "Dict[str, Any]",
                    "int"
                ],
                "adjudicator": [
                    "int",
                    "slice",
                    "web3.types.Wei"
                ],
                "staking_interface_router": [
                    "int",
                    "web3.contracContract",
                    "str",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "execute_multisig_transaction": {
            "name": "execute_multisig_transaction",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "Sized",
                    "Union[str, int]"
                ],
                "multisig": [
                    "web3.contracContract",
                    "Dict[str, Any]",
                    "raiden.utils.Secret",
                    "int",
                    "str"
                ],
                "accounts": [
                    "str",
                    "Optional[str]"
                ],
                "tx": [
                    "Optional[str]",
                    "str",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry"
                ]
            }
        },
        "preallocation_escrow_1": {
            "name": "preallocation_escrow_1",
            "location": 257,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "Sequence[int]",
                    "bytes"
                ],
                "staking_interface": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "staking_interface_router": [
                    "int",
                    "list",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "preallocation_escrow_interface_1": {
            "name": "preallocation_escrow_interface_1",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "raiden.utils.Address",
                    "dict",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "staking_interface": [
                    "str",
                    "raiden.utils.Address",
                    "dict",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "preallocation_escrow_1": [
                    "str",
                    "raiden.utils.Address",
                    "dict",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "preallocation_escrow_2": {
            "name": "preallocation_escrow_2",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "dict",
                    "Callable"
                ],
                "token": [
                    "bytes",
                    "str",
                    "raiden.utils.Address",
                    "eth.abc.StateAPI",
                    "eth.AccountState"
                ],
                "staking_interface": [
                    "List[int]",
                    "str",
                    "bool"
                ],
                "staking_interface_router": [
                    "str"
                ],
                "deploy_contract": [
                    "str"
                ]
            }
        },
        "test_batch_deposit": {
            "name": "test_batch_deposit",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Callable",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "float"
                ],
                "token_economics": [
                    "raiden.utils.TokenNetworkAddress",
                    "Tuple[str, dict]",
                    "Iterable[Tuple[str, dict]]",
                    "int"
                ],
                "token": [
                    "str",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenAmount"
                ],
                "escrow": [
                    "str",
                    "int",
                    "Union[str, int, float]"
                ]
            }
        },
        "test_worklock_phases": {
            "name": "test_worklock_phases",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Callable",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "float"
                ],
                "token_economics": [
                    "raiden.utils.TokenNetworkAddress",
                    "pathfinding_service.api.PFSApi",
                    "Iterable[Tuple[str, dict]]",
                    "int",
                    "raiden.utils.Callable",
                    "Callable",
                    "web3.contracContract",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "str"
                ],
                "token": [
                    "raiden.utils.Address",
                    "str",
                    "pathfinding_service.api.PFSApi",
                    "raiden.utils.Callable"
                ],
                "escrow": [
                    "raiden.utils.Address",
                    "web3.contracContract",
                    "Callable",
                    "raiden.utils.PaymentNetworkID"
                ],
                "preallocation_escrow_1": [
                    "raiden.utils.TokenAmount",
                    "set",
                    "Optional[str]"
                ],
                "preallocation_escrow_interface_1": [
                    "web3.contracContract",
                    "str",
                    "int"
                ],
                "worklock": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_staking": {
            "name": "test_staking",
            "location": 534,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Callable",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "float"
                ],
                "token_economics": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ],
                "token": [
                    "raiden.utils.Secret",
                    "web3.contracContract"
                ],
                "escrow": [
                    "str",
                    "pathfinding_service.api.PFSApi",
                    "web3.contracContract",
                    "raiden.utils.Callable",
                    "Callable"
                ],
                "multisig": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID"
                ],
                "preallocation_escrow_1": [
                    "web3.contracContract",
                    "str",
                    "raiden.utils.Callable",
                    "pathfinding_service.api.PFSApi",
                    "Callable",
                    "bool"
                ],
                "preallocation_escrow_interface_1": [
                    "Dict[str, Set[str]]",
                    "raiden.utils.Secret",
                    "raiden.utils.ProportionalFeeAmount"
                ],
                "preallocation_escrow_2": [
                    "str",
                    "int"
                ]
            }
        },
        "test_policy": {
            "name": "test_policy",
            "location": 658,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Callable"
                ],
                "token_economics": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]",
                    "List[str]",
                    "raiden.utils.List[raiden.utils.Address]"
                ],
                "token": [
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.ChannelID",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.Address",
                    "str"
                ],
                "escrow": [
                    "web3.contracContract",
                    "raiden.utils.Callable",
                    "pathfinding_service.api.PFSApi",
                    "str",
                    "Optional[str]",
                    "Callable"
                ],
                "policy_manager": [
                    "raiden.utils.Address",
                    "str",
                    "bytes",
                    "int"
                ],
                "preallocation_escrow_interface_1": [
                    "web3.contracContract",
                    "str",
                    "int"
                ],
                "preallocation_escrow_1": [
                    "raiden.utils.Address",
                    "web3.contracContract",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.NetworkTimeout"
                ]
            }
        },
        "test_upgrading_and_rollback": {
            "name": "test_upgrading_and_rollback",
            "location": 913,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Callable",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "float"
                ],
                "token_economics": [
                    "str"
                ],
                "token": [
                    "str",
                    "dict",
                    "raiden.utils.TokenAddress",
                    "int",
                    "bool"
                ],
                "escrow": [
                    "web3.contracContract",
                    "raiden.utils.Secret"
                ],
                "escrow_dispatcher": [
                    "web3.contracContract",
                    "raiden.utils.Secret"
                ],
                "policy_manager": [],
                "policy_manager_dispatcher": [
                    "web3.contracContract",
                    "raiden.utils.Secret",
                    "int",
                    "List[List[int]]"
                ],
                "staking_interface_router": [
                    "web3.contracContract",
                    "raiden.utils.Secret",
                    "int",
                    "List[List[int]]"
                ],
                "multisig": [
                    "web3.contracContract",
                    "raiden.utils.Secret",
                    "raiden.utils.MonitoringServiceAddress"
                ],
                "worklock": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "raiden.utils.Address",
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "raiden.utils.Callable",
                    "str",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "deploy_contract": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_slashing": {
            "name": "test_slashing",
            "location": 1031,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "token_economics": [
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "tuple",
                    "raiden.utils.List[raiden.utils.FeeAmount]"
                ],
                "token": [
                    "web3.contracContract",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.Secret",
                    "raiden.utils.SecretHash",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.ChannelID",
                    "Dict[str, Any]"
                ],
                "escrow": [
                    "int",
                    "web3.contracContract"
                ],
                "adjudicator": [
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.TokenNetworkAddress",
                    "Callable",
                    "raiden.utils.TokenAddress"
                ],
                "preallocation_escrow_1": [
                    "web3.contracContract",
                    "str"
                ],
                "mock_ursula_reencrypts": [
                    "str",
                    "tests._TestServerFactory",
                    "Optional[int]",
                    "bool"
                ],
                "mocker": [
                    "int"
                ]
            }
        },
        "test_upgrading_adjudicator": {
            "name": "test_upgrading_adjudicator",
            "location": 1141,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Callable",
                    "float"
                ],
                "token_economics": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "raiden.utils.TokenNetworkAddress",
                    "Optional[str]",
                    "raiden.utils.List[raiden.utils.Address]"
                ],
                "escrow": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "raiden.utils.TokenNetworkAddress",
                    "Optional[str]",
                    "raiden.utils.List[raiden.utils.Address]"
                ],
                "adjudicator": [
                    "web3.contracContract",
                    "Dict[str, Union[str, Any]]"
                ],
                "adjudicator_dispatcher": [
                    "web3.contracContract"
                ],
                "multisig": [
                    "web3.contracContract",
                    "Dict[str, Set[str]]"
                ],
                "deploy_contract": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "raiden.utils.TokenNetworkAddress",
                    "Optional[str]",
                    "raiden.utils.List[raiden.utils.Address]"
                ]
            }
        },
        "test_another_slashing": {
            "name": "test_another_slashing",
            "location": 1202,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.components.withings.common.ComponentFactory"
                ],
                "token_economics": [
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "tuple",
                    "raiden.utils.List[raiden.utils.FeeAmount]"
                ],
                "token": [
                    "web3.contracContract",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.ChannelID",
                    "str",
                    "raiden.utils.SecretHash"
                ],
                "escrow": [
                    "raiden.utils.Address",
                    "web3.contracContract",
                    "raiden.utils.Secret"
                ],
                "adjudicator": [
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.TokenNetworkAddress",
                    "Callable",
                    "raiden.utils.TokenAddress"
                ],
                "preallocation_escrow_1": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str",
                    "List[str]"
                ],
                "mock_ursula_reencrypts": [
                    "str",
                    "tests._TestServerFactory",
                    "Optional[int]",
                    "bool"
                ],
                "mocker": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str"
                ]
            }
        },
        "test_withdraw": {
            "name": "test_withdraw",
            "location": 1251,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool",
                    "int"
                ],
                "token_economics": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]",
                    "List[str]",
                    "raiden.utils.List[raiden.utils.Address]"
                ],
                "token": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "raiden.utils.ChannelID",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "escrow": [
                    "int",
                    "web3.contracContract"
                ],
                "preallocation_escrow_interface_1": [
                    "web3.contracContract",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.Secret",
                    "Dict[str, Any]"
                ],
                "preallocation_escrow_1": [
                    "web3.contracContract",
                    "raiden.utils.Callable",
                    "pathfinding_service.api.PFSApi",
                    "str",
                    "bool"
                ],
                "preallocation_escrow_2": [
                    "web3.contracContract",
                    "raiden.utils.Address",
                    "Callable",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "str"
                ]
            }
        },
        "test_refund": {
            "name": "test_refund",
            "location": 1334,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "escrow": [],
                "worklock": [],
                "preallocation_escrow_1": [
                    "raiden.utils.Address"
                ]
            }
        },
        "execute_multisig_transaction.sign_hash": {
            "name": "sign_hash",
            "location": 234,
            "return": [
                "Optional[float]",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "testerchain": [
                    "dict",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]",
                    "int"
                ],
                "account": [
                    "str",
                    "eth.abc.BlockHeaderAPI"
                ],
                "data_hash": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/lib/test_reencryption_validator.py": {
        "reencryption_validator": {
            "name": "reencryption_validator",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "test_extended_keccak_to_bn": {
            "name": "test_extended_keccak_to_bn",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "reencryption_validator": []
            }
        },
        "test_ec_point_operations": {
            "name": "test_ec_point_operations",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "reencryption_validator": [
                    "Optional[Exception]"
                ]
            }
        },
        "test_umbral_constants": {
            "name": "test_umbral_constants",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "reencryption_validator": []
            }
        },
        "test_compute_proof_challenge_scalar": {
            "name": "test_compute_proof_challenge_scalar",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int"
                ],
                "reencryption_validator": [
                    "List[str]"
                ],
                "mock_ursula_reencrypts": [],
                "mocker": []
            }
        },
        "test_validate_cfrag": {
            "name": "test_validate_cfrag",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int"
                ],
                "reencryption_validator": [
                    "Optional[Mapping]",
                    "str",
                    "Dict[str, object]"
                ],
                "mock_ursula_reencrypts": [],
                "mocker": []
            }
        }
    },
    "nucypher-master/tests/contracts/lib/test_signature_verifier.py": {
        "signature_verifier": {
            "name": "signature_verifier",
            "location": 39,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "deploy_contract": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "test_recover": {
            "name": "test_recover",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "raiden.tests.fuzz.utils.SendSecretRevealInNode",
                    "Callable[[dict], None]",
                    "raiden.utils.SecretRegistryAddress",
                    "accounts.models.Account",
                    "Optional[str]"
                ]
            }
        },
        "test_address": {
            "name": "test_address",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "str"
                ]
            }
        },
        "test_hash": {
            "name": "test_hash",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "test_verify": {
            "name": "test_verify",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "str",
                    "Callable",
                    "bool",
                    "Callable[[str], None]"
                ]
            }
        },
        "test_verify_eip191": {
            "name": "test_verify_eip191",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "list",
                    "Optional[Tuple[str, ...]]"
                ],
                "signature_verifier": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/lib/test_snapshot.py": {
        "snapshot": {
            "name": "snapshot",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "test_snapshot": {
            "name": "test_snapshot",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "snapshot": [
                    "int",
                    "str",
                    "float"
                ],
                "block_number": [
                    "bytes",
                    "Union[bytes, str]",
                    "TextIO"
                ],
                "value": [
                    "bytes",
                    "Union[bytes, str]",
                    "TextIO"
                ]
            }
        },
        "test_snapshot.encode": {
            "name": "encode",
            "location": 46,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "_time": [
                    "str",
                    "float",
                    "T"
                ],
                "_value": [
                    "str",
                    "float",
                    "T"
                ]
            }
        },
        "test_snapshot.decode": {
            "name": "decode",
            "location": 49,
            "return": [
                "float"
            ],
            "arguments": {
                "_snapshot": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/lib/test_umbral_deserializer.py": {
        "deserializer": {
            "name": "deserializer",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "fragments": {
            "name": "fragments",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_capsule": {
            "name": "test_capsule",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "deserializer": [
                    "List[int]",
                    "Optional[Exception]",
                    "bool"
                ],
                "fragments": [
                    "str",
                    "float"
                ]
            }
        },
        "test_proof": {
            "name": "test_proof",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "deserializer": [
                    "Union[int, float]"
                ],
                "fragments": [
                    "str",
                    "float"
                ]
            }
        },
        "test_cfrag": {
            "name": "test_cfrag",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "deserializer": [
                    "Union[int, float]"
                ],
                "fragments": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/adjudicator/conftest.py": {
        "escrow": {
            "name": "escrow",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "List[List[int]]",
                    "str",
                    "Optional[str]"
                ],
                "deploy_contract": [
                    "bool",
                    "List[Dict]"
                ],
                "mock_transacting_power_activation": [
                    "List[List[int]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "adjudicator": {
            "name": "adjudicator",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "escrow": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "float"
                ],
                "request": [
                    "str"
                ],
                "token_economics": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[str]",
                    "float"
                ],
                "deploy_contract": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/adjudicator/test_adjudicator.py": {
        "test_evaluate_cfrag": {
            "name": "test_evaluate_cfrag",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Optional[bool]",
                    "str",
                    "web3.contracContract",
                    "Dict[str, str]",
                    "int"
                ],
                "escrow": [
                    "web3.contracContract",
                    "bool"
                ],
                "adjudicator": [
                    "int",
                    "Dict[str, int]",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "Optional[cirq.google.api.v2.device_pb2.DeviceSpecification]"
                ],
                "token_economics": [
                    "Optional[bool]",
                    "str",
                    "web3.contracContract",
                    "Dict[str, str]",
                    "int"
                ],
                "blockchain_ursulas": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]",
                    "bool"
                ],
                "mock_ursula_reencrypts": [
                    "int"
                ]
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": [
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "test_evaluate_cfrag.compute_penalty_and_reward": {
            "name": "compute_penalty_and_reward",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "stake": [
                    "int",
                    "Callable",
                    "str"
                ],
                "penalty_history": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/policy_manager/conftest.py": {
        "escrow": {
            "name": "escrow",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "policy_manager": {
            "name": "policy_manager",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "dict"
                ],
                "escrow": [
                    "int"
                ],
                "request": [
                    "str"
                ],
                "deploy_contract": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/policy_manager/test_policy_manager.py": {
        "test_create_revoke": {
            "name": "test_create_revoke",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "blockchain.Blockchain",
                    "web3.contracContract"
                ],
                "escrow": [
                    "web3.contracContract"
                ],
                "policy_manager": []
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "deploy_contract": [
                    "int",
                    "str"
                ]
            }
        },
        "test_handling_wrong_state": {
            "name": "test_handling_wrong_state",
            "location": 618,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "deploy_contract": [
                    "str",
                    "blockchain.Blockchain"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/policy_manager/test_policy_manager_operations.py": {
        "test_fee": {
            "name": "test_fee",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "escrow": [
                    "blockchain.Blockchain"
                ],
                "policy_manager": [
                    "int",
                    "str"
                ]
            }
        },
        "test_refund": {
            "name": "test_refund",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Set[int]",
                    "blockchain.Blockchain"
                ],
                "escrow": [
                    "blockchain.Blockchain"
                ],
                "policy_manager": []
            }
        },
        "test_reentrancy": {
            "name": "test_reentrancy",
            "location": 546,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "escrow": [],
                "policy_manager": [],
                "deploy_contract": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/staking_contracts/conftest.py": {
        "token": {
            "name": "token",
            "location": 24,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "Tuple[bytes, bytes]",
                    "Union[int, float]",
                    "Callable[[T], bool]"
                ]
            }
        },
        "escrow": {
            "name": "escrow",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "List[List[int]]",
                    "int",
                    "str"
                ],
                "token": [
                    "bytes",
                    "List[str]"
                ],
                "deploy_contract": [
                    "str",
                    "List[str]",
                    "Tuple[int, str]"
                ]
            }
        },
        "policy_manager": {
            "name": "policy_manager",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "worklock": {
            "name": "worklock",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "staking_interface": {
            "name": "staking_interface",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "List[int]",
                    "str",
                    "bool"
                ],
                "token": [
                    "str",
                    "bytes",
                    "int",
                    "dict"
                ],
                "escrow": [
                    "str",
                    "bytes",
                    "int",
                    "dict"
                ],
                "policy_manager": [
                    "str",
                    "bytes",
                    "int",
                    "dict"
                ],
                "worklock": [
                    "str",
                    "bytes",
                    "int",
                    "dict"
                ],
                "deploy_contract": [
                    "str",
                    "bytes",
                    "int",
                    "dict"
                ]
            }
        },
        "router": {
            "name": "router",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "staking_interface": [
                    "int",
                    "list",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/staking_contracts/test_preallocation_escrow.py": {
        "preallocation_escrow": {
            "name": "preallocation_escrow",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "dict",
                    "Optional[str]",
                    "Callable[[str], None]"
                ],
                "router": [
                    "int",
                    "list",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "preallocation_escrow_interface": {
            "name": "preallocation_escrow_interface",
            "location": 38,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "werkzeug.exceptions.HTTPException"
            ],
            "arguments": {
                "testerchain": [
                    "bool"
                ],
                "staking_interface": [
                    "bool"
                ],
                "preallocation_escrow": [
                    "bool"
                ]
            }
        },
        "test_escrow": {
            "name": "test_escrow",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes"
                ],
                "token": [],
                "preallocation_escrow": [
                    "Optional[str]"
                ],
                "preallocation_escrow_interface": [],
                "escrow": [
                    "web3.Web3"
                ]
            }
        },
        "test_withdraw_eth": {
            "name": "test_withdraw_eth",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "preallocation_escrow": [
                    "dict"
                ]
            }
        },
        "test_receive_approval": {
            "name": "test_receive_approval",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "web3.contracContract",
                    "dict",
                    "int",
                    "Callable",
                    "web3.Web3"
                ],
                "preallocation_escrow": [
                    "Optional[str]"
                ],
                "escrow": [
                    "str",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "test_reentrancy": {
            "name": "test_reentrancy",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "preallocation_escrow": [
                    "web3.contracContract",
                    "bool",
                    "Optional[str]"
                ],
                "deploy_contract": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/staking_contracts/test_staking_interface.py": {
        "staking_contract": {
            "name": "staking_contract",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "dict",
                    "Optional[str]",
                    "Callable[[str], None]"
                ],
                "router": [
                    "int",
                    "list",
                    "str"
                ],
                "deploy_contract": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "staking_contract_interface": {
            "name": "staking_contract_interface",
            "location": 39,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "werkzeug.exceptions.HTTPException"
            ],
            "arguments": {
                "testerchain": [
                    "bool"
                ],
                "staking_interface": [
                    "bool"
                ],
                "staking_contract": [
                    "bool"
                ]
            }
        },
        "test_nonexistent_method": {
            "name": "test_nonexistent_method",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "policy_manager": [],
                "staking_contract": []
            }
        },
        "test_staker": {
            "name": "test_staker",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes"
                ],
                "token": [
                    "web3.contracContract",
                    "str"
                ],
                "escrow": [
                    "web3.contracContract"
                ],
                "staking_contract": [
                    "web3.contracContract",
                    "Callable",
                    "web3.Web3"
                ],
                "staking_contract_interface": [
                    "web3.contracContract"
                ],
                "staking_interface": [
                    "Optional[Dict[str, Any]]",
                    "web3.contracContract"
                ]
            }
        },
        "test_policy": {
            "name": "test_policy",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "policy_manager": [],
                "staking_contract": [],
                "staking_contract_interface": [
                    "web3.contracContract"
                ]
            }
        },
        "test_worklock": {
            "name": "test_worklock",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "worklock": [
                    "web3.contracContract"
                ],
                "staking_contract": [],
                "staking_contract_interface": [],
                "staking_interface": []
            }
        },
        "test_interface_without_worklock": {
            "name": "test_interface_without_worklock",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool"
                ],
                "deploy_contract": [
                    "str",
                    "bool",
                    "int"
                ],
                "token": [
                    "str",
                    "bool",
                    "int"
                ],
                "escrow": [
                    "str",
                    "bool",
                    "int"
                ],
                "policy_manager": [
                    "str",
                    "bool",
                    "int"
                ],
                "worklock": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/staking_contracts/test_staking_interface_router.py": {
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str"
                ],
                "token": [
                    "str",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "deploy_contract": [
                    "web3.contracContract",
                    "int",
                    "Callable",
                    "web3.Web3",
                    "Sequence[str]"
                ],
                "escrow": [
                    "str",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "test_interface_selfdestruct": {
            "name": "test_interface_selfdestruct",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "float"
                ],
                "token": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, str]"
                ],
                "deploy_contract": [
                    "Callable",
                    "Optional[str]"
                ],
                "escrow": [
                    "str",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/staking_escrow/conftest.py": {
        "token_economics": {
            "name": "token_economics",
            "location": 27,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {}
        },
        "token": {
            "name": "token",
            "location": 44,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "deploy_contract": [
                    "str",
                    "List[Dict]",
                    "set",
                    "List[str]"
                ],
                "token_economics": [
                    "str",
                    "List[Dict]",
                    "set",
                    "List[str]"
                ]
            }
        },
        "escrow_contract": {
            "name": "escrow_contract",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "token": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "token_economics": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "request": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "deploy_contract": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "escrow_contract.make_escrow": {
            "name": "make_escrow",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "max_allowed_locked_tokens": [
                    "int",
                    "float",
                    "web3.contracContract"
                ],
                "disable_reward": [
                    "bool",
                    "str",
                    "Dict[str, bool]",
                    "tuple"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/staking_escrow/test_staking.py": {
        "test_minting": {
            "name": "test_minting",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "web3.contracContract",
                    "int"
                ],
                "token": [
                    "int"
                ],
                "escrow_contract": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "token_economics": [
                    "int"
                ]
            }
        },
        "test_slashing": {
            "name": "test_slashing",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "web3.Web3"
                ],
                "token": [
                    "int"
                ],
                "escrow_contract": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "web3.contracContract",
                    "int"
                ],
                "token_economics": [
                    "int"
                ],
                "deploy_contract": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "test_minting.calculate_reward": {
            "name": "calculate_reward",
            "location": 39,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "locked": [
                    "int",
                    "Callable",
                    "str"
                ],
                "total_locked": [
                    "int",
                    "Callable",
                    "str"
                ],
                "locked_periods": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/staking_escrow/test_staking_escrow.py": {
        "test_staking": {
            "name": "test_staking",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "Callable",
                    "str"
                ],
                "escrow_contract": []
            }
        },
        "test_max_sub_stakes": {
            "name": "test_max_sub_stakes",
            "location": 550,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "web3.contracContract",
                    "web3.Web3",
                    "Callable"
                ],
                "escrow_contract": []
            }
        },
        "test_allowable_locked_tokens": {
            "name": "test_allowable_locked_tokens",
            "location": 617,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "str",
                    "List[List[int]]"
                ],
                "token_economics": [
                    "List[str]",
                    "Optional[bool]",
                    "web3.contracContract",
                    "str"
                ],
                "token": [
                    "web3.contracContract"
                ],
                "escrow_contract": [
                    "List[str]",
                    "web3.contracContract",
                    "Optional[bool]",
                    "bytes",
                    "bool",
                    "List[int]"
                ],
                "deploy_contract": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]",
                    "List[str]"
                ]
            }
        },
        "test_batch_deposit": {
            "name": "test_batch_deposit",
            "location": 719,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract"
                ],
                "token": [
                    "str"
                ],
                "escrow_contract": [],
                "deploy_contract": [
                    "str",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/staking_escrow/test_staking_escrow_additional.py": {
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "float",
                    "raiden.utils.BlockTimeout"
                ],
                "token": [
                    "str",
                    "raiden.utils.List[raiden.utils.Address]",
                    "int",
                    "Optional[str]",
                    "Callable"
                ],
                "token_economics": [
                    "str",
                    "raiden.utils.List[raiden.utils.Address]",
                    "Callable",
                    "Optional[str]",
                    "raiden.utils.TokenAmount"
                ],
                "deploy_contract": [
                    "str",
                    "raiden.utils.List[raiden.utils.Address]",
                    "Callable",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_flags": {
            "name": "test_flags",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "str",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "escrow_contract": [
                    "str",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "test_re_stake": {
            "name": "test_re_stake",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "raiden.utils.Address",
                    "str",
                    "web3.contracContract",
                    "raiden.utils.Callable",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ],
                "escrow_contract": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "raiden.utils.TokenAmount",
                    "List[int]"
                ]
            }
        },
        "test_worker": {
            "name": "test_worker",
            "location": 562,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Callable",
                    "float"
                ],
                "token": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Address",
                    "str"
                ],
                "escrow_contract": [],
                "deploy_contract": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.Address",
                    "str"
                ]
            }
        },
        "test_measure_work": {
            "name": "test_measure_work",
            "location": 805,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bytes",
                    "raiden.utils.TokenAmount"
                ],
                "token": [
                    "raiden.utils.Address",
                    "web3.contracContract",
                    "raiden.utils.TokenAddress",
                    "raiden.utils.PaymentNetworkID",
                    "web3.Web3"
                ],
                "escrow_contract": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bytes",
                    "raiden.utils.TokenAmount"
                ],
                "deploy_contract": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "test_wind_down": {
            "name": "test_wind_down",
            "location": 899,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "web3.contracContract",
                    "int"
                ],
                "token": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "escrow_contract": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "token_economics": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "test_snapshots": {
            "name": "test_snapshots",
            "location": 1172,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token": [
                    "raiden.utils.Address",
                    "int",
                    "Callable[[dict], None]",
                    "str",
                    "Optional[str]"
                ],
                "escrow_contract": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bytes",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "test_wind_down.check_last_period": {
            "name": "check_last_period",
            "location": 924,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wind_down.check_events": {
            "name": "check_events",
            "location": 928,
            "return": [
                ""
            ],
            "arguments": {
                "wind_down": [
                    "bool",
                    "str",
                    "dict"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "test_wind_down.check_first_sub_stake": {
            "name": "check_first_sub_stake",
            "location": 1081,
            "return": [
                ""
            ],
            "arguments": {
                "first_duration": [
                    "int"
                ]
            }
        },
        "test_snapshots.staker_has_snapshots_enabled": {
            "name": "staker_has_snapshots_enabled",
            "location": 1217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "staker": [
                    "int",
                    "List['cirq.Qid']",
                    "callable",
                    "Optional[float]"
                ]
            }
        },
        "test_snapshots.decode_snapshots_from_slot": {
            "name": "decode_snapshots_from_slot",
            "location": 1221,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "slot": [
                    "bool"
                ]
            }
        },
        "test_snapshots.get_staker_history_from_storage": {
            "name": "get_staker_history_from_storage",
            "location": 1227,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, str]",
                "int",
                "Exception",
                "str",
                "dict"
            ],
            "arguments": {
                "staker": [
                    "dict",
                    "BinaryIO",
                    "Optional[List[Any]]"
                ]
            }
        },
        "test_snapshots.get_global_history_from_storage": {
            "name": "get_global_history_from_storage",
            "location": 1248,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, str]",
                "int",
                "Exception",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "test_snapshots.TestSnapshot.__init__": {
            "name": "__init__",
            "location": 1178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_snapshots.TestSnapshot.add_value_at": {
            "name": "add_value_at",
            "location": 1182,
            "return": [
                "Dict[str, Any]",
                "Set[VT]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "list",
                    "List[\"AttributePlainEnumValue\"]"
                ]
            }
        },
        "test_snapshots.TestSnapshot.add_value": {
            "name": "add_value",
            "location": 1191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_snapshots.TestSnapshot.last_value": {
            "name": "last_value",
            "location": 1194,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_snapshots.TestSnapshot.get_value_at": {
            "name": "get_value_at",
            "location": 1197,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_snapshots.TestSnapshot.from_list": {
            "name": "from_list",
            "location": 1204,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "snapshots": [
                    "str",
                    "dict",
                    "Optional[bool]",
                    "Callable"
                ]
            }
        },
        "test_snapshots.TestSnapshot.__str__": {
            "name": "__str__",
            "location": 1211,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_snapshots.TestSnapshot.__eq__": {
            "name": "__eq__",
            "location": 1214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/token/test_token.py": {
        "test_create_token": {
            "name": "test_create_token",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token_economics": [],
                "deploy_contract": [
                    "bytes"
                ]
            }
        },
        "test_approve_and_call": {
            "name": "test_approve_and_call",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token_economics": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "deploy_contract": [
                    "Sequence[str]",
                    "Callable"
                ]
            }
        }
    },
    "nucypher-master/tests/contracts/main/worklock/test_worklock.py": {
        "token": {
            "name": "token",
            "location": 27,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "token_economics": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "deploy_contract": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "escrow": {
            "name": "escrow",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "Callable",
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "token_economics": [
                    "str",
                    "int"
                ],
                "deploy_contract": [
                    "str",
                    "int"
                ],
                "token": [
                    "str",
                    "int"
                ]
            }
        },
        "worklock_factory": {
            "name": "worklock_factory",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "str",
                    "Mapping"
                ],
                "token": [
                    "Callable",
                    "str",
                    "Mapping"
                ],
                "escrow": [
                    "Callable",
                    "str",
                    "Mapping"
                ],
                "token_economics": [
                    "Callable",
                    "str",
                    "Mapping"
                ],
                "deploy_contract": [
                    "Callable",
                    "str",
                    "Mapping"
                ]
            }
        },
        "do_bids": {
            "name": "do_bids",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ],
                "worklock": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "bidders": [
                    "str",
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "amount": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "test_worklock": {
            "name": "test_worklock",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "float"
                ],
                "token_economics": [
                    "float"
                ],
                "deploy_contract": [
                    "str",
                    "List[dict]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "token": [
                    "str",
                    "Callable"
                ],
                "escrow": [
                    "int"
                ],
                "worklock_factory": [
                    "int",
                    "str",
                    "Tuple[str, dict]"
                ]
            }
        },
        "test_reentrancy": {
            "name": "test_reentrancy",
            "location": 680,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "token_economics": [
                    "List[int]"
                ],
                "deploy_contract": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "List[str]"
                ],
                "escrow": [
                    "Dict[str, Any]"
                ],
                "worklock_factory": []
            }
        },
        "test_verifying_correctness": {
            "name": "test_verifying_correctness",
            "location": 773,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "token_economics": [
                    "float",
                    "str"
                ],
                "escrow": [
                    "str",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "deploy_contract": [
                    "str",
                    "List[str]",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "worklock_factory": []
            }
        },
        "test_force_refund": {
            "name": "test_force_refund",
            "location": 892,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "List[int]"
                ],
                "token_economics": [
                    "str",
                    "List[int]",
                    "Iterable[str]",
                    "float",
                    "Iterable[Any]"
                ],
                "deploy_contract": [
                    "bool",
                    "List[List[int]]",
                    "int"
                ],
                "worklock_factory": [],
                "token": []
            }
        },
        "test_shutdown": {
            "name": "test_shutdown",
            "location": 1180,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "int",
                    "Callable"
                ],
                "token_economics": [
                    "Optional[str]",
                    "List[str]",
                    "List[List[str]]",
                    "List[int]",
                    "Callable",
                    "bool"
                ],
                "deploy_contract": [
                    "bool",
                    "List[List[int]]",
                    "int"
                ],
                "worklock_factory": [],
                "token": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "worklock_factory.deploy_worklock": {
            "name": "deploy_worklock",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "supply": [
                    "int",
                    "bytes"
                ],
                "bidding_delay": [
                    "int",
                    "float",
                    "bool"
                ],
                "additional_time_to_cancel": [
                    "Sequence[str]",
                    "str",
                    "bool"
                ],
                "boosting_refund": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/conftest.py": {
        "mock_contract_agency": {
            "name": "mock_contract_agency",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "module_mocker": [
                    "str",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "token_economics": [
                    "str",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "mock_token_agent": {
            "name": "mock_token_agent",
            "location": 67,
            "return": [
                "bool",
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId",
                "Optional[Dict]",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_testerchain": [
                    "bool",
                    "int"
                ],
                "token_economics": [
                    "bool",
                    "int"
                ],
                "mock_contract_agency": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str"
                ]
            }
        },
        "mock_staking_agent": {
            "name": "mock_staking_agent",
            "location": 72,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "bool",
                    "int",
                    "Set[int]"
                ],
                "token_economics": [
                    "str",
                    "bool",
                    "int",
                    "Set[int]"
                ],
                "mock_contract_agency": [
                    "str"
                ]
            }
        },
        "mock_adjudicator_agent": {
            "name": "mock_adjudicator_agent",
            "location": 78,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "bool",
                    "int",
                    "Set[int]"
                ],
                "token_economics": [
                    "str",
                    "bool",
                    "int",
                    "Set[int]"
                ],
                "mock_contract_agency": [
                    "str"
                ]
            }
        },
        "mock_policy_manager_agent": {
            "name": "mock_policy_manager_agent",
            "location": 84,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "bool",
                    "int",
                    "Set[int]"
                ],
                "token_economics": [
                    "str",
                    "bool",
                    "int",
                    "Set[int]"
                ],
                "mock_contract_agency": [
                    "str"
                ]
            }
        },
        "mock_multisig_agent": {
            "name": "mock_multisig_agent",
            "location": 90,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "bool",
                    "int",
                    "Set[int]"
                ],
                "token_economics": [
                    "str",
                    "bool",
                    "int",
                    "Set[int]"
                ],
                "mock_contract_agency": [
                    "str",
                    "Optional[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "mock_worklock_agent": {
            "name": "mock_worklock_agent",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "bool",
                    "int",
                    "Set[int]"
                ],
                "token_economics": [
                    "bool",
                    "str",
                    "int"
                ],
                "mock_contract_agency": [
                    "str",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "mock_stdin": {
            "name": "mock_stdin",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Iterable",
                    "List[str]"
                ]
            }
        },
        "mock_testerchain": {
            "name": "mock_testerchain",
            "location": 131,
            "return": [
                "tests.mock.interfaces.MockBlockchain"
            ],
            "arguments": {}
        },
        "token_economics": {
            "name": "token_economics",
            "location": 139,
            "return": [
                "List[str]",
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "mock_interface": {
            "name": "mock_interface",
            "location": 144,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "module_mocker": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_registry": {
            "name": "test_registry",
            "location": 151,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "tests.async_mock.Mock",
                "float"
            ],
            "arguments": {}
        },
        "test_registry_source_manager": {
            "name": "test_registry_source_manager",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [],
                "test_registry": []
            }
        },
        "mock_accounts": {
            "name": "mock_accounts",
            "location": 185,
            "return": [
                "dict",
                "cmk.utils.type_defs.UserId",
                "int",
                "Exception",
                "str"
            ],
            "arguments": {}
        },
        "mock_account": {
            "name": "mock_account",
            "location": 195,
            "return": [
                "bool",
                "Type",
                "str"
            ],
            "arguments": {
                "mock_accounts": [
                    "str"
                ]
            }
        },
        "worker_account": {
            "name": "worker_account",
            "location": 200,
            "return": [
                "dict",
                "str",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "src.config.user_config.UserConfig",
                "Optional[\"permissions_doc\"]"
            ],
            "arguments": {
                "mock_accounts": [
                    "str",
                    "list",
                    "mock.Mock",
                    "bool",
                    "Optional[Dict]",
                    "List[Union[Any, Any]]"
                ],
                "mock_testerchain": [
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "bool",
                    "BinaryIO",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "worker_address": {
            "name": "worker_address",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "worker_account": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "custom_config_filepath": {
            "name": "custom_config_filepath",
            "location": 212,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "custom_filepath": [
                    "str"
                ]
            }
        },
        "patch_keystore": {
            "name": "patch_keystore",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "mock_accounts": [
                    "int",
                    "set",
                    "str"
                ],
                "monkeypatch": [
                    "Iterable[str]",
                    "Dict[str, int]",
                    "str",
                    "int",
                    "eth.abc.BlockHeaderAPI"
                ],
                "mocker": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "mock_keystore": {
            "name": "mock_keystore",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Hashable",
                    "float",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "alice_blockchain_test_config": {
            "name": "alice_blockchain_test_config",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [],
                "test_registry": []
            }
        },
        "bob_blockchain_test_config": {
            "name": "bob_blockchain_test_config",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [],
                "test_registry": []
            }
        },
        "ursula_decentralized_test_config": {
            "name": "ursula_decentralized_test_config",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "mock_testerchain": [],
                "test_registry": []
            }
        },
        "patch_keystore.successful_mock_keyfile_reader": {
            "name": "successful_mock_keyfile_reader",
            "location": 219,
            "return": [
                "Dict[str, str]",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "_keystore": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/blockchain/test_currency.py": {
        "test_NU": {
            "name": "test_NU",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "token_economics": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/blockchain/test_exact_economics_model.py": {
        "test_exact_economics": {
            "name": "test_exact_economics",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/integration/characters/federated_encrypt_and_decrypt.py": {
        "test_sign_cleartext_and_encrypt": {
            "name": "test_sign_cleartext_and_encrypt",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_encrypt_and_sign_the_ciphertext": {
            "name": "test_encrypt_and_sign_the_ciphertext",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_encrypt_and_sign_including_signature_in_both_places": {
            "name": "test_encrypt_and_sign_including_signature_in_both_places",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_encrypt_but_do_not_sign": {
            "name": "test_encrypt_but_do_not_sign",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_alice_can_decrypt": {
            "name": "test_alice_can_decrypt",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/characters/test_bob_handles_frags.py": {
        "test_bob_cannot_follow_the_treasure_map_in_isolation": {
            "name": "test_bob_cannot_follow_the_treasure_map_in_isolation",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "Type",
                    "tests.basilisp.helpers.CompileFn",
                    "dict"
                ],
                "federated_bob": []
            }
        },
        "test_bob_already_knows_all_nodes_in_treasure_map": {
            "name": "test_bob_already_knows_all_nodes_in_treasure_map",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "federated_bob": [
                    "str"
                ],
                "federated_alice": [
                    "str"
                ]
            }
        },
        "test_bob_can_follow_treasure_map_even_if_he_only_knows_of_one_node": {
            "name": "test_bob_can_follow_treasure_map_even_if_he_only_knows_of_one_node",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder",
                    "bool"
                ],
                "certificates_tempdir": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_bob_can_issue_a_work_order_to_a_specific_ursula": {
            "name": "test_bob_can_issue_a_work_order_to_a_specific_ursula",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "Dict[str, Any]",
                    "str"
                ],
                "federated_bob": [],
                "federated_alice": [
                    "List[Dict[str, Any]]"
                ],
                "federated_ursulas": [],
                "capsule_side_channel": [
                    "tests.basilisp.helpers.CompileFn",
                    "int",
                    "str"
                ]
            }
        },
        "test_bob_can_use_cfrag_attached_to_completed_workorder": {
            "name": "test_bob_can_use_cfrag_attached_to_completed_workorder",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "tests.setup.SetupTest"
                ],
                "federated_alice": [
                    "tests.setup.SetupTest"
                ],
                "federated_bob": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "capsule_side_channel": []
            }
        },
        "test_bob_remembers_that_he_has_cfrags_for_a_particular_capsule": {
            "name": "test_bob_remembers_that_he_has_cfrags_for_a_particular_capsule",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "tests.setup.SetupTest"
                ],
                "federated_alice": [
                    "tests.setup.SetupTest"
                ],
                "federated_bob": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "bool"
                ],
                "capsule_side_channel": [
                    "str",
                    "dss.config.Replica"
                ]
            }
        },
        "test_bob_gathers_and_combines": {
            "name": "test_bob_gathers_and_combines",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "float",
                    "Union[int, float]",
                    "bool",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "federated_bob": [
                    "float",
                    "bool",
                    "int"
                ],
                "federated_alice": [
                    "str",
                    "tuple",
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "int"
                ],
                "capsule_side_channel": [
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode"
                ]
            }
        },
        "test_federated_bob_retrieves_a_single_message": {
            "name": "test_federated_bob_retrieves_a_single_message",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "tests.async_mock.Mock"
                ],
                "federated_alice": [
                    "bool"
                ],
                "capsule_side_channel": [
                    "bool",
                    "str"
                ],
                "enacted_federated_policy": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_federated_bob_retrieves_multiple_messages_from_same_enrico": {
            "name": "test_federated_bob_retrieves_multiple_messages_from_same_enrico",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [],
                "federated_alice": [
                    "bool"
                ],
                "capsule_side_channel": [],
                "enacted_federated_policy": []
            }
        },
        "test_federated_bob_retrieves_multiple_messages_from_different_enricos": {
            "name": "test_federated_bob_retrieves_multiple_messages_from_different_enricos",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "federated_alice": [
                    "bool"
                ],
                "capsule_side_channel": [],
                "enacted_federated_policy": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_federated_bob_retrieves_twice_without_retaining_cfrags": {
            "name": "test_federated_bob_retrieves_twice_without_retaining_cfrags",
            "location": 426,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "dss.config.Replica"
                ],
                "federated_alice": [],
                "capsule_side_channel": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "enacted_federated_policy": [
                    "dss.config.Replica"
                ]
            }
        },
        "test_federated_bob_retrieves_twice_by_retaining_cfrags": {
            "name": "test_federated_bob_retrieves_twice_by_retaining_cfrags",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "dss.config.Replica"
                ],
                "federated_alice": [],
                "capsule_side_channel": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "enacted_federated_policy": [
                    "dss.config.Replica"
                ]
            }
        },
        "test_federated_bob_cannot_resume_retrieval_without_caching": {
            "name": "test_federated_bob_cannot_resume_retrieval_without_caching",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "Dict[str, Any]",
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "federated_alice": [],
                "capsule_side_channel": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "enacted_federated_policy": [
                    "tests.async_mock.Mock"
                ],
                "federated_ursulas": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_federated_retrieves_partially_then_finishes": {
            "name": "test_federated_retrieves_partially_then_finishes",
            "location": 550,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "Dict[str, Any]",
                    "str",
                    "tests.basilisp.helpers.CompileFn",
                    "bool",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "federated_alice": [],
                "capsule_side_channel": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "enacted_federated_policy": [
                    "tests.async_mock.Mock"
                ],
                "federated_ursulas": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_bob_retrieves_multiple_messages_in_a_single_adventure": {
            "name": "test_bob_retrieves_multiple_messages_in_a_single_adventure",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [],
                "federated_alice": [
                    "bool"
                ],
                "capsule_side_channel": [],
                "enacted_federated_policy": []
            }
        }
    },
    "nucypher-master/tests/integration/characters/test_bob_joins_policy_and_retrieves.py": {
        "test_federated_bob_full_retrieve_flow": {
            "name": "test_federated_bob_full_retrieve_flow",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [],
                "federated_bob": [
                    "bool"
                ],
                "federated_alice": [],
                "capsule_side_channel": [
                    "bool"
                ],
                "enacted_federated_policy": [
                    "bool"
                ]
            }
        },
        "test_bob_joins_policy_and_retrieves": {
            "name": "test_bob_joins_policy_and_retrieves",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "bool",
                    "Union[int, float]",
                    "float",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "federated_ursulas": [],
                "certificates_tempdir": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.MagicMock",
                    "tests.async_mock.Mock",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_treasure_map_serialization": {
            "name": "test_treasure_map_serialization",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "federated_bob": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_bob_retrieves_with_treasure_map": {
            "name": "test_bob_retrieves_with_treasure_map",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [],
                "federated_ursulas": [
                    "bool",
                    "str",
                    "int"
                ],
                "enacted_federated_policy": [
                    "pyshgp.push.config.PushConfig"
                ],
                "capsule_side_channel": []
            }
        },
        "test_bob_retrieves_too_late": {
            "name": "test_bob_retrieves_too_late",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [],
                "federated_ursulas": [
                    "bool"
                ],
                "enacted_federated_policy": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "capsule_side_channel": []
            }
        }
    },
    "nucypher-master/tests/integration/characters/test_character_serialization.py": {
        "test_serialize_ursula": {
            "name": "test_serialize_ursula",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/characters/test_federated_grant_and_revoke.py": {
        "test_federated_grant": {
            "name": "test_federated_grant",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "Union[int, float]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "str"
                ],
                "federated_bob": [
                    "Union[int, float]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "str"
                ]
            }
        },
        "test_federated_alice_can_decrypt": {
            "name": "test_federated_alice_can_decrypt",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_revocation": {
            "name": "test_revocation",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "Union[int, float]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "str"
                ],
                "federated_bob": [
                    "Union[int, float]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/characters/test_specifications.py": {
        "test_various_field_validations_by_way_of_alice_grant": {
            "name": "test_various_field_validations_by_way_of_alice_grant",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "bytes",
                    "Optional[bytes]",
                    "IO[bytes]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_treasuremap_validation": {
            "name": "test_treasuremap_validation",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "bytes"
                ]
            }
        },
        "test_messagekit_validation": {
            "name": "test_messagekit_validation",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel": [
                    "slice"
                ]
            }
        },
        "test_key_validation": {
            "name": "test_key_validation",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "dict",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/characters/test_ursula_startup.py": {
        "test_new_federated_ursula_announces_herself": {
            "name": "test_new_federated_ursula_announces_herself",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": []
            }
        },
        "test_node_deployer": {
            "name": "test_node_deployer",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": []
            }
        }
    },
    "nucypher-master/tests/integration/characters/control/conftest.py": {
        "alice_web_controller_test_client": {
            "name": "alice_web_controller_test_client",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ]
            }
        },
        "bob_web_controller_test_client": {
            "name": "bob_web_controller_test_client",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "str"
                ]
            }
        },
        "enrico_web_controller_test_client": {
            "name": "enrico_web_controller_test_client",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel": [
                    "str"
                ]
            }
        },
        "enrico_web_controller_from_alice": {
            "name": "enrico_web_controller_from_alice",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "Callable",
                    "bytes",
                    "int"
                ],
                "random_policy_label": [
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "alice_rpc_test_client": {
            "name": "alice_rpc_test_client",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ]
            }
        },
        "bob_rpc_controller": {
            "name": "bob_rpc_controller",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "enrico_rpc_controller_test_client": {
            "name": "enrico_rpc_controller_test_client",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "capsule_side_channel": [
                    "str"
                ]
            }
        },
        "enrico_rpc_controller_from_alice": {
            "name": "enrico_rpc_controller_from_alice",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "Callable",
                    "bytes",
                    "int"
                ],
                "random_policy_label": [
                    "Callable",
                    "bytes",
                    "int"
                ]
            }
        },
        "create_policy_control_request": {
            "name": "create_policy_control_request",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "federated_bob": [
                    "bytes",
                    "str"
                ]
            }
        },
        "grant_control_request": {
            "name": "grant_control_request",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "federated_bob": [
                    "bytes"
                ]
            }
        },
        "join_control_request": {
            "name": "join_control_request",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "federated_bob": [
                    "bytes"
                ],
                "enacted_federated_policy": [
                    "bytes",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "retrieve_control_request": {
            "name": "retrieve_control_request",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "federated_bob": [
                    "bool",
                    "int"
                ],
                "enacted_federated_policy": [
                    "bytes",
                    "str"
                ],
                "capsule_side_channel": [
                    "bool",
                    "str",
                    "nucypher.blockchain.eth.signers.Signer",
                    "float"
                ]
            }
        },
        "encrypt_control_request": {
            "name": "encrypt_control_request",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/integration/characters/control/test_rpc_control_federated.py": {
        "test_alice_rpc_character_control_create_policy": {
            "name": "test_alice_rpc_character_control_create_policy",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "create_policy_control_request": []
            }
        },
        "test_alice_rpc_character_control_derive_policy_encrypting_key": {
            "name": "test_alice_rpc_character_control_derive_policy_encrypting_key",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": []
            }
        },
        "test_alice_rpc_character_control_grant": {
            "name": "test_alice_rpc_character_control_grant",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "alice_rpc_test_client": [],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bob_rpc_character_control_join_policy": {
            "name": "test_bob_rpc_character_control_join_policy",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "bob_rpc_controller": [
                    "int",
                    "Dict[str, str]"
                ],
                "join_control_request": [
                    "str",
                    "Optional[str]"
                ],
                "enacted_federated_policy": [
                    "bytes",
                    "list",
                    "bool"
                ]
            }
        },
        "test_enrico_rpc_character_control_encrypt_message": {
            "name": "test_enrico_rpc_character_control_encrypt_message",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "enrico_rpc_controller_test_client": [],
                "encrypt_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bob_rpc_character_control_retrieve": {
            "name": "test_bob_rpc_character_control_retrieve",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "bob_rpc_controller": [
                    "int",
                    "Dict[str, str]"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/characters/control/test_web_control_federated.py": {
        "test_label_whose_b64_representation_is_invalid_utf8": {
            "name": "test_label_whose_b64_representation_is_invalid_utf8",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [],
                "create_policy_control_request": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_alice_web_character_control_create_policy": {
            "name": "test_alice_web_character_control_create_policy",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "create_policy_control_request": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "test_alice_web_character_control_derive_policy_encrypting_key": {
            "name": "test_alice_web_character_control_derive_policy_encrypting_key",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_alice_web_character_control_grant": {
            "name": "test_alice_web_character_control_grant",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "dict",
                    "flask.testing.FlaskClient"
                ],
                "grant_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_alice_character_control_revoke": {
            "name": "test_alice_character_control_revoke",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "federated_bob": []
            }
        },
        "test_alice_character_control_decrypt": {
            "name": "test_alice_character_control_decrypt",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "dict",
                    "flask.testing.FlaskClient"
                ],
                "enacted_federated_policy": [],
                "capsule_side_channel": [
                    "str",
                    "slice"
                ]
            }
        },
        "test_bob_character_control_join_policy": {
            "name": "test_bob_character_control_join_policy",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "enacted_federated_policy": [
                    "bytes"
                ]
            }
        },
        "test_bob_web_character_control_retrieve": {
            "name": "test_bob_web_character_control_retrieve",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_bob_web_character_control_retrieve_again": {
            "name": "test_bob_web_character_control_retrieve_again",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "retrieve_control_request": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_enrico_web_character_control_encrypt_message": {
            "name": "test_enrico_web_character_control_encrypt_message",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "enrico_web_controller_test_client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "encrypt_control_request": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_web_character_control_lifecycle": {
            "name": "test_web_character_control_lifecycle",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "alice_web_controller_test_client": [
                    "bool"
                ],
                "bob_web_controller_test_client": [
                    "flask.testing.FlaskClient"
                ],
                "enrico_web_controller_from_alice": [
                    "bool"
                ],
                "federated_alice": [
                    "Callable[[], int]",
                    "str"
                ],
                "federated_bob": [
                    "slice"
                ],
                "federated_ursulas": [
                    "bool"
                ],
                "random_policy_label": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/test_ursula_local_keystore_cli_functionality.py": {
        "mock_account_password_keystore": {
            "name": "mock_account_password_keystore",
            "location": 38,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "test_ursula_init_with_local_keystore_signer": {
            "name": "test_ursula_init_with_local_keystore_signer",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "bool"
                ],
                "tmp_path": [
                    "str",
                    "List[str]"
                ],
                "mocker": [
                    "str",
                    "int"
                ],
                "mock_testerchain": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "mock_account_password_keystore": [
                    "str",
                    "Optional[str]"
                ],
                "test_registry_source_manager": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/test_worklock_cli_functionality.py": {
        "surrogate_bidder": {
            "name": "surrogate_bidder",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "List[str]",
                    "int"
                ],
                "test_registry": [
                    "raiden.utils.TokenAmount",
                    "raiden.utils.TokenAddress",
                    "Optional[int]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.ChannelID",
                    "tests.pathfinding.utils.SimpleReachabilityContainer",
                    "set"
                ],
                "mock_worklock_agent": [
                    "List[dict]",
                    "int"
                ]
            }
        },
        "assert_successful_transaction_echo": {
            "name": "assert_successful_transaction_echo",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "bidder_address": [
                    "str",
                    "int"
                ],
                "cli_output": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_status": {
            "name": "test_status",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Dict[Any, int]",
                    "bool",
                    "int",
                    "Dict[str, str]"
                ],
                "mock_worklock_agent": [
                    "str",
                    "dict"
                ],
                "test_registry_source_manager": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_account_selection": {
            "name": "test_account_selection",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "int"
                ],
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_worklock_agent": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "test_registry_source_manager": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "bidding_command": {
            "name": "bidding_command",
            "location": 99,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "token_economics": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "surrogate_bidder": [
                    "str",
                    "eth.abc.DatabaseAPI",
                    "bytes"
                ]
            }
        },
        "test_bid_too_soon": {
            "name": "test_bid_too_soon",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "web3.contracContract",
                    "bool",
                    "str",
                    "Callable"
                ],
                "mocker": [
                    "str"
                ],
                "mock_worklock_agent": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "token_economics": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "test_registry_source_manager": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "surrogate_bidder": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "mock_testerchain": [
                    "str"
                ],
                "bidding_command": [
                    "web3.contracContract",
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_bid_too_late": {
            "name": "test_bid_too_late",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "web3.contracContract",
                    "bool",
                    "str",
                    "Callable"
                ],
                "mocker": [
                    "Optional[raiden.utils.TokenNetworkAddress]",
                    "int",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "mock_worklock_agent": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "token_economics": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "test_registry_source_manager": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "surrogate_bidder": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "mock_testerchain": [
                    "str"
                ],
                "bidding_command": [
                    "web3.contracContract",
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_valid_bid": {
            "name": "test_valid_bid",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "bool"
                ],
                "mocker": [
                    "int",
                    "str"
                ],
                "mock_worklock_agent": [],
                "token_economics": [
                    "web3.contracContract",
                    "Optional[bool]",
                    "int",
                    "tests.conftesWorker",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "bool",
                    "Union[str, float]"
                ],
                "test_registry_source_manager": [
                    "str",
                    "raiden.utils.List[raiden.utils.Address]"
                ],
                "surrogate_bidder": [
                    "float",
                    "raiden.utils.BlockTimeout",
                    "raiden.utils.Address.Hex"
                ],
                "mock_testerchain": [
                    "str"
                ]
            }
        },
        "test_cancel_bid": {
            "name": "test_cancel_bid",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "List[str]"
                ],
                "mock_worklock_agent": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "nauta.config.NautaPlatformConfig",
                    "Dict[str, Dict[str, str]]"
                ],
                "surrogate_bidder": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_enable_claiming": {
            "name": "test_enable_claiming",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "bool"
                ],
                "mocker": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool"
                ],
                "mock_worklock_agent": [
                    "str"
                ],
                "surrogate_bidder": [
                    "Callable",
                    "web3.contracContract"
                ],
                "token_economics": [
                    "int",
                    "str",
                    "raiden.utils.NetworkTimeout",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "bool"
                ],
                "mock_testerchain": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_initial_claim": {
            "name": "test_initial_claim",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "mocker": [
                    "bool",
                    "tests._TestServerFactory"
                ],
                "mock_worklock_agent": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "List[str]"
                ],
                "surrogate_bidder": [
                    "str"
                ]
            }
        },
        "test_already_claimed": {
            "name": "test_already_claimed",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "mocker": [
                    "bool",
                    "tests._TestServerFactory"
                ],
                "mock_worklock_agent": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str"
                ],
                "surrogate_bidder": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_remaining_work": {
            "name": "test_remaining_work",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_worklock_agent": [
                    "nauta.config.NautaPlatformConfig",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "surrogate_bidder": [
                    "tests._TestServerFactory",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "nauta.config.NautaPlatformConfig"
                ]
            }
        },
        "test_refund": {
            "name": "test_refund",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "List[str]"
                ],
                "mock_worklock_agent": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Dict[str, Dict[str, str]]"
                ],
                "surrogate_bidder": [
                    "str"
                ]
            }
        },
        "test_participant_status": {
            "name": "test_participant_status",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str"
                ],
                "mock_worklock_agent": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "surrogate_bidder": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_interactive_new_bid": {
            "name": "test_interactive_new_bid",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "bool"
                ],
                "mocker": [
                    "int",
                    "str",
                    "raiden.utils.TokenAmount",
                    "random.Random"
                ],
                "mock_worklock_agent": [
                    "str",
                    "raiden.utils.List[raiden.utils.Address]"
                ],
                "token_economics": [
                    "web3.contracContract",
                    "Optional[bool]",
                    "tests.conftesWorker",
                    "int",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "bool",
                    "Set[str]"
                ],
                "test_registry_source_manager": [
                    "str",
                    "raiden.utils.List[raiden.utils.Address]"
                ],
                "surrogate_bidder": [
                    "Optional[int]",
                    "bool",
                    "tests._TestServerFactory"
                ],
                "mock_testerchain": [
                    "str"
                ]
            }
        },
        "test_interactive_increase_bid": {
            "name": "test_interactive_increase_bid",
            "location": 596,
            "return": [
                ""
            ],
            "arguments": {
                "click_runner": [
                    "str",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "mocker": [
                    "str",
                    "int",
                    "bool"
                ],
                "mock_worklock_agent": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "token_economics": [
                    "int",
                    "web3.contracContract",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "List[int]",
                    "Iterable[Tuple[str, dict]]"
                ],
                "test_registry_source_manager": [
                    "raiden.utils.List[raiden.utils.Address]",
                    "str"
                ],
                "surrogate_bidder": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "mock_testerchain": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/actions/test_auth_actions.py": {
        "test_get_password_from_prompt_cli_action": {
            "name": "test_get_password_from_prompt_cli_action",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_stdin": [
                    "tests.async_mock.Mock",
                    "tests.async_mock.MagicMock"
                ],
                "confirm": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": []
            }
        },
        "test_get_client_password_with_invalid_address": {
            "name": "test_get_client_password_with_invalid_address",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": []
            }
        },
        "test_get_client_password": {
            "name": "test_get_client_password",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [],
                "mock_account": [],
                "confirm": [],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_get_nucypher_password": {
            "name": "test_get_nucypher_password",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [],
                "mock_account": [],
                "confirm": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_unlock_nucypher_keyring_invalid_password": {
            "name": "test_unlock_nucypher_keyring_invalid_password",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "bool"
                ],
                "test_emitter": [
                    "int",
                    "float"
                ],
                "alice_blockchain_test_config": [
                    "int",
                    "float"
                ],
                "capsys": [
                    "str",
                    "Optional[str]",
                    "Union[str, float]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_unlock_nucypher_keyring_dev_mode": {
            "name": "test_unlock_nucypher_keyring_dev_mode",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]",
                    "str"
                ],
                "test_emitter": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ],
                "capsys": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "alice_blockchain_test_config": []
            }
        },
        "test_unlock_nucypher_keyring": {
            "name": "test_unlock_nucypher_keyring",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "test_emitter": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker"
                ],
                "capsys": [
                    "str",
                    "bool",
                    "Union[str, float]",
                    "Optional[Dict[str, Any]]",
                    "tests.conftesWorker",
                    "Optional[str]"
                ],
                "alice_blockchain_test_config": [],
                "patch_keystore": [
                    "str"
                ],
                "tmpdir": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/actions/test_config_actions.py": {
        "config": {
            "name": "config",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "request": [],
                "mocker": []
            }
        },
        "test_forget_cli_action": {
            "name": "test_forget_cli_action",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "alice_blockchain_test_config": [
                    "str",
                    "pathlib.Path",
                    "tests.e2e.Helper"
                ],
                "test_emitter": [
                    "str",
                    "pathlib.Path",
                    "tests.e2e.Helper"
                ],
                "mock_stdin": [],
                "mocker": [
                    "nauta.config.NautaPlatformConfig",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_update_configuration_cli_action": {
            "name": "test_update_configuration_cli_action",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "baseplate.lib.config.RawConfig",
                    "bytes"
                ],
                "test_emitter": [
                    "Callable",
                    "trinity.config.ChainConfig",
                    "str",
                    "pathlib.Path",
                    "pypi2nix.path.Path"
                ],
                "test_registry_source_manager": [
                    "bool",
                    "str"
                ],
                "capsys": [
                    "str",
                    "dict",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_handle_update_missing_configuration_file_cli_action": {
            "name": "test_handle_update_missing_configuration_file_cli_action",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "sphinx.config.Config",
                    "baseplate.lib.config.RawConfig",
                    "path.Path",
                    "virgene.config.Config",
                    "Dict[str, str]"
                ],
                "test_emitter": [
                    "pathlib.Path",
                    "path.Path",
                    "Optional[str]",
                    "str"
                ],
                "test_registry_source_manager": [
                    "str",
                    "pathlib.Path",
                    "baseplate.lib.config.RawConfig",
                    "bool"
                ],
                "mocker": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_handle_update_invalid_configuration_file_cli_action": {
            "name": "test_handle_update_invalid_configuration_file_cli_action",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "baseplate.lib.config.RawConfig",
                    "virgene.config.Config",
                    "dict",
                    "path.Path"
                ],
                "test_emitter": [
                    "pathlib.Path",
                    "path.Path",
                    "Optional[str]",
                    "str"
                ],
                "test_registry_source_manager": [
                    "str",
                    "pathlib.Path",
                    "baseplate.lib.config.RawConfig",
                    "bool"
                ],
                "mocker": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "capsys": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "test_destroy_configuration_cli_action": {
            "name": "test_destroy_configuration_cli_action",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "config.Config",
                    "sideeye.config.Configuration",
                    "backup.config.Config"
                ],
                "test_emitter": [
                    "str"
                ],
                "capsys": [
                    "str",
                    "list"
                ],
                "mocker": [
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "mock_stdin": []
            }
        },
        "test_handle_missing_configuration_file_cli_action": {
            "name": "test_handle_missing_configuration_file_cli_action",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "sphinx.config.Config",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_handle_invalid_configuration_file_cli_action": {
            "name": "test_handle_invalid_configuration_file_cli_action",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "config": [
                    "str",
                    "dict",
                    "tbump.config.Config",
                    "neuromation.api.config._AuthConfig",
                    "pathlib.Path"
                ],
                "test_emitter": [
                    "neuromation.api.config._AuthConfig",
                    "pathlib.Path",
                    "str"
                ],
                "capsys": [],
                "bad_config_payload": [
                    "str"
                ]
            }
        },
        "test_handle_corrupted_configuration_file_cli_action": {
            "name": "test_handle_corrupted_configuration_file_cli_action",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "config": [
                    "str",
                    "dict",
                    "tbump.config.Config",
                    "neuromation.api.config._AuthConfig",
                    "pathlib.Path"
                ],
                "test_emitter": [
                    "neuromation.api.config._AuthConfig",
                    "pathlib.Path",
                    "str"
                ],
                "capsys": [
                    "str",
                    "Optional[str]"
                ],
                "side_effect": [
                    "Optional[str]",
                    "Callable",
                    "str",
                    "dss.config.Replica",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/actions/test_confirm_actions.py": {
        "test_confirm_deployment_cli_action": {
            "name": "test_confirm_deployment_cli_action",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_stdin": [],
                "test_emitter": [],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_testerchain": []
            }
        },
        "test_confirm_enable_restaking_lock_cli_action": {
            "name": "test_confirm_enable_restaking_lock_cli_action",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [],
                "test_emitter": [],
                "capsys": []
            }
        },
        "test_confirm_enable_restaking_cli_action": {
            "name": "test_confirm_enable_restaking_cli_action",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "int",
                    "tests.e2e.Helper"
                ],
                "mock_stdin": [],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_confirm_enable_winding_down_cli_action": {
            "name": "test_confirm_enable_winding_down_cli_action",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "int",
                    "tests.e2e.Helper"
                ],
                "mock_stdin": [],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_confirm_staged_stake_cli_action": {
            "name": "test_confirm_staged_stake_cli_action",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "List[int]",
                    "tests.async_mock.MagicMock"
                ],
                "mock_stdin": [],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_confirm_large_stake_cli_action": {
            "name": "test_confirm_large_stake_cli_action",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "bool",
                    "dict",
                    "float",
                    "list"
                ],
                "mock_stdin": [
                    "str",
                    "bool"
                ],
                "capsys": [
                    "bool",
                    "tests.conftesWorker",
                    "float",
                    "Dict[str, str]",
                    "int"
                ],
                "value": [
                    "list",
                    "float",
                    "Callable",
                    "Union[str, None]",
                    "dict"
                ],
                "duration": [
                    "str",
                    "Optional[int]"
                ],
                "must_confirm_value": [
                    "str",
                    "Optional[Dict]",
                    "Optional[List[int]]",
                    "Optional[str]",
                    "raiden.constants.Environment",
                    "float"
                ],
                "must_confirm_duration": [
                    "str",
                    "Optional[str]",
                    "raiden.constants.Environment"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/actions/test_select_client_account.py": {
        "test_select_client_account": {
            "name": "test_select_client_account",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "test_emitter": [],
                "mock_testerchain": [],
                "selection": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_select_client_account_with_no_accounts": {
            "name": "test_select_client_account_with_no_accounts",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "mock_stdin": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "test_emitter": [
                    "unittesmock.Mock"
                ],
                "mock_testerchain": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_select_client_account_ambiguous_source": {
            "name": "test_select_client_account_ambiguous_source",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [
                    "mock.Mock",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ],
                "test_emitter": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ],
                "mock_testerchain": [
                    "mock.Mock",
                    "mock.MagicMock",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_select_client_account_valid_sources": {
            "name": "test_select_client_account_valid_sources",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_stdin": [
                    "unittesmock.Mock"
                ],
                "test_emitter": [],
                "mock_testerchain": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "patch_keystore": [
                    "mock.Mock"
                ],
                "mock_accounts": [
                    "mock.Mock"
                ],
                "selection": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_select_client_account_with_balance_display": {
            "name": "test_select_client_account_with_balance_display",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "mock_stdin": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "test_emitter": [],
                "mock_testerchain": [
                    "unittesmock.Mock"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "test_registry_source_manager": [
                    "unittesmock.Mock"
                ],
                "mock_staking_agent": [
                    "unittesmock.Mock",
                    "mock.Mock"
                ],
                "mock_token_agent": [
                    "unittesmock.Mock"
                ],
                "selection": [
                    "unittesmock.Mock",
                    "mock.MagicMock"
                ],
                "show_staking": [
                    "mock.Mock",
                    "click.testing.CliRunner",
                    "tests.utils.CliObjectRunner"
                ],
                "show_eth": [
                    "mock.Mock",
                    "click.testing.CliRunner",
                    "tests.utils.CliObjectRunner"
                ],
                "show_tokens": [
                    "mock.Mock",
                    "click.testing.CliRunner",
                    "tests.utils.CliObjectRunner"
                ],
                "stake_info": [
                    "mock.Mock",
                    "unittesmock.Mock"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/actions/test_select_client_account_for_staking.py": {
        "test_select_client_account_for_staking_cli_action": {
            "name": "test_select_client_account_for_staking_cli_action",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "str",
                    "Optional[str]"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "test_registry_source_manager": [
                    "str"
                ],
                "mock_stdin": [
                    "str"
                ],
                "mock_testerchain": [
                    "int",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "mocker": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/actions/test_select_config_file.py": {
        "test_select_config_file_with_no_config_files": {
            "name": "test_select_config_file_with_no_config_files",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "str",
                    "Tuple[str, str, str]",
                    "pathlib.Path"
                ],
                "capsys": [
                    "str",
                    "Optional[str]"
                ],
                "alice_blockchain_test_config": [
                    "bool",
                    "str"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_auto_select_config_file": {
            "name": "test_auto_select_config_file",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "str",
                    "List[str]",
                    "Tuple[str, str, str]"
                ],
                "capsys": [],
                "alice_blockchain_test_config": [
                    "bool"
                ],
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "pypi2nix.path.Path",
                    "path.Path"
                ],
                "mock_stdin": [
                    "str"
                ]
            }
        },
        "test_interactive_select_config_file": {
            "name": "test_interactive_select_config_file",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str, str]",
                    "pathlib.Path"
                ],
                "capsys": [],
                "alice_blockchain_test_config": [
                    "str",
                    "bool"
                ],
                "tmpdir": [
                    "str",
                    "path.Path",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "mock_stdin": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "Union[str, object]"
                ],
                "mock_accounts": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Tuple[bool, Any]]",
                    "str",
                    "Optional[Dict]",
                    "List[pathlib.Path]"
                ],
                "patch_keystore": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/actions/test_select_network.py": {
        "test_select_network_cli_action": {
            "name": "test_select_network_cli_action",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "str"
                ],
                "capsys": [
                    "str"
                ],
                "mock_stdin": [
                    "str",
                    "int"
                ],
                "user_input": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/cli/actions/test_select_stake.py": {
        "non_divisible_stakes": {
            "name": "non_divisible_stakes",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "token_economics": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "divisible_stakes": {
            "name": "divisible_stakes",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_testerchain": [
                    "str",
                    "IO",
                    "Dict[str, Any]"
                ],
                "token_economics": [
                    "str"
                ]
            }
        },
        "stakeholder_with_no_divisible_stakes": {
            "name": "stakeholder_with_no_divisible_stakes",
            "location": 50,
            "return": [
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "mock_testerchain": [
                    "int",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "token_economics": [
                    "bool",
                    "int"
                ],
                "mock_staking_agent": [],
                "test_registry": [
                    "int",
                    "click.testing.CliRunner"
                ],
                "non_divisible_stakes": []
            }
        },
        "stakeholder_with_divisible_stakes": {
            "name": "stakeholder_with_divisible_stakes",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_testerchain": [
                    "tests._TestServerFactory",
                    "tests.hints.RightFolderCall",
                    "Optional[int]",
                    "bool",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "token_economics": [
                    "int",
                    "str",
                    "Callable",
                    "raiden.utils.Callable"
                ],
                "mock_staking_agent": [
                    "Optional[int]",
                    "str"
                ],
                "test_registry": [
                    "int",
                    "List[str]",
                    "str",
                    "Tuple[int]",
                    "raiden.utils.SecreHash"
                ],
                "divisible_stakes": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "assert_stake_table_painted": {
            "name": "assert_stake_table_painted",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "output": [
                    "str"
                ]
            }
        },
        "assert_stake_table_not_painted": {
            "name": "assert_stake_table_not_painted",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "output": [
                    "str"
                ]
            }
        },
        "test_handle_select_stake_with_no_stakes": {
            "name": "test_handle_select_stake_with_no_stakes",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "int",
                    "click.testing.CliRunner"
                ],
                "token_economics": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_staking_agent": [],
                "test_registry": [
                    "int",
                    "click.testing.CliRunner",
                    "List[Tuple[int, int, float]]"
                ],
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_stdin": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_select_non_divisible_stake": {
            "name": "test_select_non_divisible_stake",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "click.testing.CliRunner",
                    "List[Tuple[int, int, float]]"
                ],
                "token_economics": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_staking_agent": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "test_registry": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str"
                ],
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str"
                ],
                "mock_stdin": [],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "non_divisible_stakes": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "stakeholder_with_no_divisible_stakes": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_handle_selection_with_no_divisible_stakes": {
            "name": "test_handle_selection_with_no_divisible_stakes",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "int",
                    "str"
                ],
                "token_economics": [],
                "mock_staking_agent": [],
                "test_registry": [
                    "int",
                    "click.testing.CliRunner"
                ],
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str"
                ],
                "mock_stdin": [],
                "capsys": [],
                "non_divisible_stakes": []
            }
        },
        "test_select_divisible_stake": {
            "name": "test_select_divisible_stake",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "test_emitter": [
                    "click.testing.CliRunner"
                ],
                "token_economics": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_staking_agent": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "test_registry": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_testerchain": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_stdin": [],
                "capsys": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "divisible_stakes": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "stakeholder_with_divisible_stakes": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/config/test_base_configuration.py": {
        "expected_configuration_filepaths": {
            "name": "expected_configuration_filepaths",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_base_configuration_defaults": {
            "name": "test_base_configuration_defaults",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_configuration_implementation": {
            "name": "test_configuration_implementation",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_configuration_creation": {
            "name": "test_configuration_creation",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_configuration_filepath_utilities": {
            "name": "test_configuration_filepath_utilities",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_configuration_preservation": {
            "name": "test_configuration_preservation",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "RestorableTestItem.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ]
            }
        },
        "RestorableTestItem.static_payload": {
            "name": "static_payload",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_configuration_implementation.NoNameItem.static_payload": {
            "name": "static_payload",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_configuration_implementation.BareMinimumConfigurableItem.static_payload": {
            "name": "static_payload",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/tests/integration/config/test_character_configuration.py": {
        "test_federated_development_character_configurations": {
            "name": "test_federated_development_character_configurations",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "character": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "configuration": [
                    "str"
                ]
            }
        },
        "test_default_character_configuration_preservation": {
            "name": "test_default_character_configuration_preservation",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "configuration_class": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "testerchain": [
                    "str",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "bool"
                ],
                "test_registry_source_manager": [
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "test_ursula_development_configuration": {
            "name": "test_ursula_development_configuration",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "federated_only": [
                    "str"
                ]
            }
        },
        "test_destroy_configuration": {
            "name": "test_destroy_configuration",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "sphinx.config.Config",
                    "bytes"
                ],
                "test_emitter": [
                    "int"
                ],
                "capsys": [
                    "str",
                    "int",
                    "dict",
                    "config.Config"
                ],
                "mocker": []
            }
        }
    },
    "nucypher-master/tests/integration/config/test_configuration_persistence.py": {
        "test_alices_powers_are_persistent": {
            "name": "test_alices_powers_are_persistent",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "Dict[str, Sequence[str]]"
                ],
                "tmpdir": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/config/test_keyring_integration.py": {
        "test_generate_alice_keyring": {
            "name": "test_generate_alice_keyring",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "tests.e2e.Helper"
                ]
            }
        },
        "test_characters_use_keyring": {
            "name": "test_characters_use_keyring",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "tests.e2e.Helper"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/config/test_storages.py": {
        "BaseTestNodeStorageBackends.light_ursula": {
            "name": "light_ursula",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseTestNodeStorageBackends._read_and_write_metadata": {
            "name": "_read_and_write_metadata",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "node_storage": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseTestNodeStorageBackends._write_and_delete_metadata": {
            "name": "_write_and_delete_metadata",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "list"
                ],
                "node_storage": [
                    "list"
                ]
            }
        },
        "BaseTestNodeStorageBackends.test_delete_node_in_storage": {
            "name": "test_delete_node_in_storage",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "light_ursula": []
            }
        },
        "BaseTestNodeStorageBackends.test_read_and_write_to_storage": {
            "name": "test_read_and_write_to_storage",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "light_ursula": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/datastore/test_datastore.py": {
        "test_key_sqlite_datastore": {
            "name": "test_key_sqlite_datastore",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "test_datastore": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "federated_bob": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "test_policy_arrangement_sqlite_datastore": {
            "name": "test_policy_arrangement_sqlite_datastore",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "test_datastore": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "test_workorder_sqlite_datastore": {
            "name": "test_workorder_sqlite_datastore",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "test_datastore": []
            }
        }
    },
    "nucypher-master/tests/integration/learning/test_discovery_phases.py": {
        "test_alice_can_learn_about_a_whole_bunch_of_ursulas": {
            "name": "test_alice_can_learn_about_a_whole_bunch_of_ursulas",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "highperf_mocked_alice": []
            }
        },
        "test_alice_verifies_ursula_just_in_time": {
            "name": "test_alice_verifies_ursula_just_in_time",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "fleet_of_highperf_mocked_ursulas": [
                    "mock.Mock"
                ],
                "highperf_mocked_alice": [],
                "highperf_mocked_bob": [
                    "mock.Mock"
                ]
            }
        },
        "test_alice_verifies_ursula_just_in_time.actual_random_key_instead": {
            "name": "actual_random_key_instead",
            "location": 91,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "test_alice_verifies_ursula_just_in_time.mock_set_policy": {
            "name": "mock_set_policy",
            "location": 97,
            "return": [
                "Callable[[bytes], None]",
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "id_as_hex": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "test_alice_verifies_ursula_just_in_time.mock_receive_treasure_map": {
            "name": "mock_receive_treasure_map",
            "location": 100,
            "return": [
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "treasure_map_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/learning/test_domains.py": {
        "test_learner_learns_about_domains_separately": {
            "name": "test_learner_learns_about_domains_separately",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [],
                "caplog": []
            }
        }
    },
    "nucypher-master/tests/integration/learning/test_firstula_circumstances.py": {
        "test_proper_seed_node_instantiation": {
            "name": "test_proper_seed_node_instantiation",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": []
            }
        },
        "test_get_cert_from_running_seed_node": {
            "name": "test_get_cert_from_running_seed_node",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_cert_from_running_seed_node.start_lonely_learning_loop": {
            "name": "start_lonely_learning_loop",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/integration/learning/test_fleet_state.py": {
        "test_learning_from_node_with_no_known_nodes": {
            "name": "test_learning_from_node_with_no_known_nodes",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "float"
                ]
            }
        },
        "test_all_nodes_have_same_fleet_state": {
            "name": "test_all_nodes_have_same_fleet_state",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": []
            }
        },
        "test_teacher_nodes_cycle": {
            "name": "test_teacher_nodes_cycle",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_nodes_with_equal_fleet_state_do_not_send_anew": {
            "name": "test_nodes_with_equal_fleet_state_do_not_send_anew",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_old_state_is_preserved": {
            "name": "test_old_state_is_preserved",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "Iterable[Any]",
                    "List[str]",
                    "bool",
                    "Set[int]"
                ],
                "ursula_federated_test_config": [
                    "Callable",
                    "float"
                ]
            }
        },
        "test_state_is_recorded_after_learning": {
            "name": "test_state_is_recorded_after_learning",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn"
                ],
                "ursula_federated_test_config": [
                    "Callable",
                    "float"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/learning/test_learning_upgrade.py": {
        "test_emit_warning_upon_new_version": {
            "name": "test_emit_warning_upon_new_version",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Callable[[], int]",
                    "tests._TestServerFactory"
                ],
                "caplog": [
                    "Callable[[], int]",
                    "tests._TestServerFactory"
                ]
            }
        },
        "test_node_posts_future_version": {
            "name": "test_node_posts_future_version",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder",
                    "int"
                ]
            }
        },
        "test_emit_warning_upon_new_version.warning_trapper": {
            "name": "warning_trapper",
            "location": 45,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "test_node_posts_future_version.warning_trapper": {
            "name": "warning_trapper",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "Sequence",
                    "list",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/network/test_failure_modes.py": {
        "test_bob_does_not_let_a_connection_error_stop_him": {
            "name": "test_bob_does_not_let_a_connection_error_stop_him",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "Set[int]"
                ],
                "federated_bob": [
                    "str"
                ],
                "federated_alice": []
            }
        },
        "test_alice_can_grant_even_when_the_first_nodes_she_tries_are_down": {
            "name": "test_alice_can_grant_even_when_the_first_nodes_she_tries_are_down",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock"
                ],
                "federated_bob": [
                    "bool",
                    "Union[int, float]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "str"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_node_has_changed_cert": {
            "name": "test_node_has_changed_cert",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_huge_treasure_maps_are_rejected": {
            "name": "test_huge_treasure_maps_are_rejected",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_hendrix_handles_content_length_validation": {
            "name": "test_hendrix_handles_content_length_validation",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Callable[[], int]",
                    "tests._TestServerFactory"
                ]
            }
        },
        "test_hendrix_handles_content_length_validation.check_node_rejects_large_posts": {
            "name": "check_node_rejects_large_posts",
            "location": 186,
            "return": [
                "tuple",
                "datetime.datetime",
                "Union[Sequence, 'SweepFixedValues']",
                "int",
                "bool"
            ],
            "arguments": {
                "node": [
                    "purplship.core.utils.Element",
                    "dict"
                ]
            }
        },
        "test_hendrix_handles_content_length_validation.check_node_accepts_normal_posts": {
            "name": "check_node_accepts_normal_posts",
            "location": 195,
            "return": [
                "tuple",
                "datetime.datetime",
                "Union[Sequence, 'SweepFixedValues']",
                "int",
                "bool"
            ],
            "arguments": {
                "node": [
                    "str",
                    "dict",
                    "purplship.providers.ups.utils.Settings",
                    "Mapping[str, Any]",
                    "purplship.core.utils.xml.Element"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/network/test_network_upgrade.py": {
        "test_alice_enacts_policies_in_policy_group_via_rest": {
            "name": "test_alice_enacts_policies_in_policy_group_via_rest",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        },
        "test_federated_nodes_connect_via_tls_and_verify": {
            "name": "test_federated_nodes_connect_via_tls_and_verify",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_federated_nodes_connect_via_tls_and_verify.check_node_with_cert": {
            "name": "check_node_with_cert",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "str",
                    "Tuple[int, int]",
                    "Dict[str, Any]"
                ],
                "cert_file": [
                    "str",
                    "dict",
                    "List[List[str]]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/integration/network/test_node_storage.py": {
        "test_one_node_stores_a_bunch_of_others": {
            "name": "test_one_node_stores_a_bunch_of_others",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "Dict[str, Any]"
                ],
                "ursula_federated_test_config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_one_node_stores_a_bunch_of_others.start_lonely_learning_loop": {
            "name": "start_lonely_learning_loop",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/integration/network/test_treasure_map_integration.py": {
        "test_alice_creates_policy_with_correct_hrac": {
            "name": "test_alice_creates_policy_with_correct_hrac",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "idle_federated_policy": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_alice_sets_treasure_map": {
            "name": "test_alice_sets_treasure_map",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_treasure_map_stored_by_ursula_is_the_correct_one_for_bob": {
            "name": "test_treasure_map_stored_by_ursula_is_the_correct_one_for_bob",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ],
                "federated_bob": [
                    "str"
                ],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "Dict[str, Any]"
                ],
                "enacted_federated_policy": []
            }
        },
        "test_bob_can_retreive_the_treasure_map_and_decrypt_it": {
            "name": "test_bob_can_retreive_the_treasure_map_and_decrypt_it",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_treasure_map_is_legit": {
            "name": "test_treasure_map_is_legit",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "tests.async_mock.Mock"
                ]
            }
        },
        "test_alice_does_not_update_with_old_ursula_info": {
            "name": "test_alice_does_not_update_with_old_ursula_info",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_ursulas": [
                    "tests.basilisp.helpers.CompileFn",
                    "cli_ui.tests.MessageRecorder"
                ]
            }
        }
    },
    "nucypher-master/tests/metrics/estimate_gas.py": {
        "mock_ursula": {
            "name": "mock_ursula",
            "location": 124,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ],
                "account": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "generate_args_for_slashing": {
            "name": "generate_args_for_slashing",
            "location": 136,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "Iterable[str]",
                "Tuple[str]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "ursula": [
                    "List[str]",
                    "dict"
                ],
                "corrupt_cfrag": [
                    "List[str]",
                    "dict"
                ]
            }
        },
        "estimate_gas": {
            "name": "estimate_gas",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "analyzer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AnalyzeGas.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeGas.__call__": {
            "name": "__call__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "AnalyzeGas.paint_line": {
            "name": "paint_line",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str"
                ],
                "estimates": [
                    "str"
                ],
                "gas_used": [
                    "str"
                ]
            }
        },
        "AnalyzeGas.to_json_file": {
            "name": "to_json_file",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeGas.start_collection": {
            "name": "start_collection",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "estimate_gas.transact_and_log": {
            "name": "transact_and_log",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "label": [
                    "str",
                    "logging.Logger",
                    "List[Exception]"
                ],
                "function": [
                    "str",
                    "int"
                ],
                "transaction": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "estimate_gas.transact": {
            "name": "transact",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "function": [
                    "Callable",
                    "str",
                    "Callable[[], object]",
                    "int"
                ],
                "transaction": [
                    "Dict[str, Any]",
                    "dict",
                    "Type",
                    "Type[T]",
                    "bool",
                    "List[str]",
                    "T"
                ]
            }
        }
    },
    "nucypher-master/tests/mock/agents.py": {
        "MockContractAgent.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "agent_class": [
                    "Optional[str]",
                    "bool",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "MockContractAgent.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockContractAgent.__setup_mock": {
            "name": "__setup_mock",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[nucypher.blockchain.eth.agents.Agent]",
                    "Callable[..., Coroutine]",
                    "Type[BaseException]",
                    "Sequence[Hashable]",
                    "eth.abc.BlockAPI"
                ],
                "agent_class": [
                    "Type[nucypher.blockchain.eth.agents.Agent]",
                    "bool",
                    "Sequence[Hashable]",
                    "int",
                    "Sequence[str]",
                    "Callable[..., Coroutine]"
                ]
            }
        },
        "MockContractAgent.__get_interface_calls": {
            "name": "__get_interface_calls",
            "location": 111,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "interface": [
                    "str",
                    "int",
                    "float",
                    "Optional[Callable]"
                ]
            }
        },
        "MockContractAgent.__is_contract_method": {
            "name": "__is_contract_method",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "agent_class": [
                    "str",
                    "Dict[str, str]"
                ],
                "method_name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "MockContractAgent.__collect_contract_api": {
            "name": "__collect_contract_api",
            "location": 127,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[str], T]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "bool",
                    "Type",
                    "set"
                ],
                "agent_class": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MockContractAgent.all_transactions": {
            "name": "all_transactions",
            "location": 138,
            "return": [
                "str",
                "List[str]",
                "Tuple[str]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockContractAgent.contract_calls": {
            "name": "contract_calls",
            "location": 144,
            "return": [
                "str",
                "enum.Enum",
                "Callable[[str], None]",
                "Iterable[Sequence[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockContractAgent.get_unexpected_transactions": {
            "name": "get_unexpected_transactions",
            "location": 149,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "allowed": [
                    "str"
                ]
            }
        },
        "MockContractAgent.assert_only_transactions": {
            "name": "assert_only_transactions",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "MockContractAgent.assert_no_transactions": {
            "name": "assert_no_transactions",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockContractAgent.reset": {
            "name": "reset",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clear_side_effects": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MockContractAgency.get_agent": {
            "name": "get_agent",
            "location": 177,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ],
                "agent_class": [
                    "bool",
                    "Type[nucypher.blockchain.eth.agents.Agent]"
                ]
            }
        },
        "MockContractAgency.get_agent_by_contract_name": {
            "name": "get_agent_by_contract_name",
            "location": 186,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "contract_name": [
                    "str",
                    "dict",
                    "Set[str]",
                    "list"
                ]
            }
        },
        "MockContractAgency.reset": {
            "name": "reset",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "nucypher-master/tests/mock/interfaces.py": {
        "mock_registry_source_manager": {
            "name": "mock_registry_source_manager",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain": [
                    "str",
                    "bool",
                    "int"
                ],
                "test_registry": [
                    "str",
                    "bool",
                    "int"
                ],
                "mock_backend": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MockBlockchain.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockEthereumClient.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "w3": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "mock_registry_source_manager.MockRegistrySource.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_registry_source_manager.MockRegistrySource.get_publication_endpoint": {
            "name": "get_publication_endpoint",
            "location": 53,
            "return": [
                "str",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "mock_registry_source_manager.MockRegistrySource.fetch_latest_publication": {
            "name": "fetch_latest_publication",
            "location": 56,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/tests/mock/io.py": {
        "MockStdinWrapper.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStdinWrapper.line": {
            "name": "line",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Pattern[str]",
                    "Dict[int, str]",
                    "int"
                ]
            }
        },
        "MockStdinWrapper.password": {
            "name": "password",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int"
                ],
                "confirm": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MockStdinWrapper.empty": {
            "name": "empty",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStdinBase.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStdinBase.line": {
            "name": "line",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "MockStdinBase._readline": {
            "name": "_readline",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStdinBase.empty": {
            "name": "empty",
            "location": 57,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockGetpass.__call__": {
            "name": "__call__",
            "location": 66,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "List[int]",
                    "int",
                    "Tuple[Union[int, slice], Union[int, slice]]"
                ]
            }
        },
        "MockStdin.readline": {
            "name": "readline",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/tests/mock/performance_mocks.py": {
        "fake_keep_learning": {
            "name": "fake_keep_learning",
            "location": 32,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "learner": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "do_not_create_cert": {
            "name": "do_not_create_cert",
            "location": 461,
            "return": [
                "str",
                "bool",
                "float",
                "List[dict]"
            ],
            "arguments": {}
        },
        "simple_remember": {
            "name": "simple_remember",
            "location": 465,
            "return": [
                ""
            ],
            "arguments": {
                "ursula": [
                    "List[str]",
                    "Union[int, str]",
                    "int",
                    "str"
                ],
                "node": [
                    "int"
                ]
            }
        },
        "mock_secret_source": {
            "name": "mock_secret_source",
            "location": 541,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_pubkey_from_bytes": {
            "name": "mock_pubkey_from_bytes",
            "location": 548,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "NotAPublicKey.tick": {
            "name": "tick",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str"
                ]
            }
        },
        "NotAPublicKey.__init__": {
            "name": "__init__",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serial": [
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "NotAPublicKey.__bytes__": {
            "name": "__bytes__",
            "location": 383,
            "return": [
                "int",
                "str",
                "bytes",
                "Union[bytes, bytearray]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPublicKey.reset": {
            "name": "reset",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "NotAPublicKey.from_bytes": {
            "name": "from_bytes",
            "location": 391,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "some_bytes": [
                    "int",
                    "str"
                ]
            }
        },
        "NotAPublicKey.to_bytes": {
            "name": "to_bytes",
            "location": 394,
            "return": [
                "bool",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPublicKey.i_want_to_be_a_real_boy": {
            "name": "i_want_to_be_a_real_boy",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPublicKey.params": {
            "name": "params",
            "location": 403,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPublicKey.__eq__": {
            "name": "__eq__",
            "location": 408,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "bool",
                    "eth_keys.datatypes.Signature",
                    "bytearray",
                    "str"
                ]
            }
        },
        "NotAPrivateKey.public_key": {
            "name": "public_key",
            "location": 419,
            "return": [
                "str",
                "bytes",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPrivateKey.get_pubkey": {
            "name": "get_pubkey",
            "location": 422,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPrivateKey.to_cryptography_privkey": {
            "name": "to_cryptography_privkey",
            "location": 425,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPrivateKey.sign": {
            "name": "sign",
            "location": 428,
            "return": [
                "Union[bytes, bytearray]",
                "bool",
                "int",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotAPrivateKey.stamp": {
            "name": "stamp",
            "location": 432,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "float"
                ]
            }
        },
        "NotAPrivateKey.signature_bytes": {
            "name": "signature_bytes",
            "location": 436,
            "return": [
                "str",
                "bytes",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "NotACert.public_bytes": {
            "name": "public_bytes",
            "location": 450,
            "return": [
                "str",
                "int",
                "bytearray",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "does_not_matter": [
                    "bool",
                    "Union[str, Iterable[str]]",
                    "int"
                ]
            }
        },
        "NotACert.public_key": {
            "name": "public_key",
            "location": 453,
            "return": [
                "str",
                "bytes",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotARestApp.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "this_node": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ]
            }
        },
        "NotARestApp.create_with_not_a_datastore": {
            "name": "create_with_not_a_datastore",
            "location": 480,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "list",
                    "str"
                ]
            }
        },
        "NotARestApp.replace_route": {
            "name": "replace_route",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "Iterable[str]"
                ],
                "route_name": [
                    "str",
                    "Exception",
                    "Iterable[str]"
                ],
                "new_route": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "NotARestApp.actual_rest_app": {
            "name": "actual_rest_app",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotARestApp.test_client": {
            "name": "test_client",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerificationTracker.fake_verify_node": {
            "name": "fake_verify_node",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Optional[Exception]",
                    "str",
                    "Set[str]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "VerificationTracker.fake_verify_metadata": {
            "name": "fake_verify_metadata",
            "location": 525,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "NotACert.Subject.get_attributes_for_oid": {
            "name": "get_attributes_for_oid",
            "location": 442,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotARestApp._ViewFunctions.__init__": {
            "name": "__init__",
            "location": 491,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_old_view_functions": [
                    "bool",
                    "str"
                ]
            }
        },
        "NotARestApp._ViewFunctions.__getitem__": {
            "name": "__getitem__",
            "location": 494,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "route_name": [
                    "str"
                ]
            }
        }
    },
    "nucypher-master/tests/unit/test_blockchain_economics_model.py": {
        "test_rough_economics": {
            "name": "test_rough_economics",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_economic_parameter_aliases": {
            "name": "test_economic_parameter_aliases",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/unit/test_block_confirmations.py": {
        "mock_ethereum_client": {
            "name": "mock_ethereum_client",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "mocker": [
                    "Mapping[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "receipt": {
            "name": "receipt",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_check_transaction_is_on_chain": {
            "name": "test_check_transaction_is_on_chain",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_ethereum_client": [],
                "receipt": []
            }
        },
        "test_block_until_enough_confirmations": {
            "name": "test_block_until_enough_confirmations",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_ethereum_client": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "receipt": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "test_wait_for_receipt_no_confirmations": {
            "name": "test_wait_for_receipt_no_confirmations",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_ethereum_client": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "mock.Mock"
                ],
                "receipt": []
            }
        },
        "test_wait_for_receipt_with_confirmations": {
            "name": "test_wait_for_receipt_with_confirmations",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Dict[str, Any]"
                ],
                "mock_ethereum_client": [
                    "mock.Mock",
                    "mock.MagicMock",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "receipt": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "nucypher-master/tests/unit/test_bytestring_types.py": {
        "test_split_two_signatures": {
            "name": "test_split_two_signatures",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_split_signature_from_arbitrary_bytes": {
            "name": "test_split_signature_from_arbitrary_bytes",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_trying_to_extract_too_many_bytes_raises_typeerror": {
            "name": "test_trying_to_extract_too_many_bytes_raises_typeerror",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_message_kit_serialization_via_enrico": {
            "name": "test_message_kit_serialization_via_enrico",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_alice": []
            }
        }
    },
    "nucypher-master/tests/unit/test_character_sign_and_verify.py": {
        "test_actor_without_signing_power_cannot_sign": {
            "name": "test_actor_without_signing_power_cannot_sign",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_actor_with_signing_power_can_sign": {
            "name": "test_actor_with_signing_power_can_sign",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_anybody_can_verify": {
            "name": "test_anybody_can_verify",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_anybody_can_encrypt": {
            "name": "test_anybody_can_encrypt",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/unit/test_coordinates_serialization.py": {
        "test_coordinates_as_bytes": {
            "name": "test_coordinates_as_bytes",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/unit/test_decorators.py": {
        "test_validate_checksum_address": {
            "name": "test_validate_checksum_address",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "get_random_checksum_address": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_validate_checksum_address.just_one_address": {
            "name": "just_one_address",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "checksum_address": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "test_validate_checksum_address.optional_checksum_address": {
            "name": "optional_checksum_address",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "whatever": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable[[], None]",
                    "str"
                ],
                "staking_address": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable[[], None]",
                    "str"
                ]
            }
        },
        "test_validate_checksum_address.multiple_checksum_addresses": {
            "name": "multiple_checksum_addresses",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "whatever": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable[[], None]",
                    "str"
                ],
                "worker_address": [
                    "Sequence[int]",
                    "bool",
                    "int",
                    "Callable[[], None]",
                    "str"
                ],
                "staking_address": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/unit/test_keccak_sanity.py": {
        "TestCrypto.test_secure_random": {
            "name": "test_secure_random",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_secure_random_range": {
            "name": "test_secure_random_range",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_keccak_digest": {
            "name": "test_keccak_digest",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/tests/unit/test_keypairs.py": {
        "test_gen_keypair_if_needed": {
            "name": "test_gen_keypair_if_needed",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keypair_with_umbral_keys": {
            "name": "test_keypair_with_umbral_keys",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keypair_serialization": {
            "name": "test_keypair_serialization",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keypair_fingerprint": {
            "name": "test_keypair_fingerprint",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_signing": {
            "name": "test_signing",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/unit/test_keystore_signer.py": {
        "mock_key": {
            "name": "mock_key",
            "location": 50,
            "return": [
                "str",
                "Mapping",
                "bool",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "mock_account": {
            "name": "mock_account",
            "location": 56,
            "return": [
                "dict",
                "int",
                "Exception",
                "str"
            ],
            "arguments": {
                "mock_key": [
                    "str",
                    "Union[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "mock_keystore": {
            "name": "mock_keystore",
            "location": 62,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "mock_account": [
                    "str",
                    "pathlib.Path"
                ],
                "tmp_path_factory": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "good_signer": {
            "name": "good_signer",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ],
                "mock_account": [
                    "str",
                    "pathlib.Path",
                    "tests.pathfinding.utils.SimpleReachabilityContainer"
                ],
                "mock_keystore": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        },
        "unknown_address": {
            "name": "unknown_address",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_blank_keystore_uri": {
            "name": "test_blank_keystore_uri",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalid_keystore": {
            "name": "test_invalid_keystore",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "pathlib.Path",
                    "path.Path",
                    "cli_ui.tests.MessageRecorder"
                ],
                "tmp_path": [
                    "path.Path",
                    "pathlib.Path",
                    "pypi2nix.path.Path",
                    "str"
                ]
            }
        },
        "test_signer_reads_keystore_from_disk": {
            "name": "test_signer_reads_keystore_from_disk",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "mock_account": [
                    "pathlib.Path",
                    "List[T]"
                ],
                "mock_key": [
                    "pathlib.Path",
                    "List[T]"
                ],
                "tmpdir": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "test_create_signer_from_directory": {
            "name": "test_create_signer_from_directory",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_account": [],
                "mock_keystore": []
            }
        },
        "test_create_signer_from_file": {
            "name": "test_create_signer_from_file",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "mock_account": [],
                "mock_keystore": []
            }
        },
        "test_keystore_locking": {
            "name": "test_keystore_locking",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "pathlib.Path",
                    "Generator[None, Any, None]",
                    "Callable"
                ],
                "mock_account": [],
                "good_signer": [],
                "unknown_address": []
            }
        },
        "test_list_keystore_accounts": {
            "name": "test_list_keystore_accounts",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "good_signer": [],
                "mock_account": [
                    "int"
                ]
            }
        },
        "test_sign_message": {
            "name": "test_sign_message",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "tests.clienMDMClient"
                ],
                "good_signer": [
                    "Callable",
                    "Optional[str]"
                ],
                "mock_account": [
                    "Callable",
                    "Optional[str]"
                ],
                "mock_key": [
                    "str"
                ]
            }
        },
        "test_sign_transaction": {
            "name": "test_sign_transaction",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "good_signer": [
                    "Dict[str, Any]",
                    "Dict[str, Sequence[Any]]"
                ],
                "mock_account": []
            }
        }
    },
    "nucypher-master/tests/unit/test_prometheus.py": {
        "test_prometheus_metrics_config": {
            "name": "test_prometheus_metrics_config",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestGenerateJSON.setUp": {
            "name": "setUp",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.tearDown": {
            "name": "tearDown",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.custom_collector": {
            "name": "custom_collector",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metric_family": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestGenerateJSON.test_counter": {
            "name": "test_counter",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_counter_name_unit_append": {
            "name": "test_counter_name_unit_append",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_counter_total": {
            "name": "test_counter_total",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_gauge": {
            "name": "test_gauge",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_summary": {
            "name": "test_summary",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_histogram": {
            "name": "test_histogram",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_gaugehistogram": {
            "name": "test_gaugehistogram",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_info": {
            "name": "test_info",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_enum": {
            "name": "test_enum",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_unicode": {
            "name": "test_unicode",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_escaping": {
            "name": "test_escaping",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_nonnumber": {
            "name": "test_nonnumber",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_timestamp": {
            "name": "test_timestamp",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.custom_collector.CustomCollector.collect": {
            "name": "collect",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_nonnumber.MyNumber.__repr__": {
            "name": "__repr__",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_nonnumber.MyNumber.__float__": {
            "name": "__float__",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_nonnumber.MyCollector.collect": {
            "name": "collect",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateJSON.test_timestamp.MyCollector.collect": {
            "name": "collect",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/tests/unit/test_registry_basics.py": {
        "test_contract_registry": {
            "name": "test_contract_registry",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "tempfile_path": [
                    "str",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        }
    },
    "nucypher-master/tests/unit/test_umbral_signatures.py": {
        "test_signature_can_verify": {
            "name": "test_signature_can_verify",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_signature_rs_serialization": {
            "name": "test_signature_rs_serialization",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ecdsa_signature_recovery": {
            "name": "test_ecdsa_signature_recovery",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "execution_number": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/unit/test_web3_clients.py": {
        "test_client_no_provider": {
            "name": "test_client_no_provider",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_geth_web3_client": {
            "name": "test_geth_web3_client",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_autodetect_provider_type_file": {
            "name": "test_autodetect_provider_type_file",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "tempfile_path": []
            }
        },
        "test_autodetect_provider_type_file_none_existent": {
            "name": "test_autodetect_provider_type_file_none_existent",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_file": {
            "name": "test_detect_provider_type_file",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_ipc": {
            "name": "test_detect_provider_type_ipc",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_http": {
            "name": "test_detect_provider_type_http",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_https": {
            "name": "test_detect_provider_type_https",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_provider_type_ws": {
            "name": "test_detect_provider_type_ws",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_infura_web3_client": {
            "name": "test_infura_web3_client",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parity_web3_client": {
            "name": "test_parity_web3_client",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ganache_web3_client": {
            "name": "test_ganache_web3_client",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "SyncedMockW3Eth.getBlock": {
            "name": "getBlock",
            "location": 63,
            "return": [
                "int",
                "datetime.timedelta",
                "Optional[datetime.tzinfo]",
                "str"
            ],
            "arguments": {
                "self": [],
                "blockNumber": [
                    "int",
                    "eth.rlp.blocks.BaseBlock",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "SyncingMockW3Eth.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncingMockW3Eth.syncing": {
            "name": "syncing",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncingMockW3Eth.getBlock": {
            "name": "getBlock",
            "location": 92,
            "return": [
                "int",
                "datetime.timedelta",
                "Optional[datetime.tzinfo]",
                "str"
            ],
            "arguments": {
                "self": [],
                "blockNumber": [
                    "int",
                    "eth.rlp.blocks.BaseBlock",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "MockedW3GethWithPeers.admin": {
            "name": "admin",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedW3GethWithNoPeers.admin": {
            "name": "admin",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncedMockWeb3.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "SyncedMockWeb3.clientVersion": {
            "name": "clientVersion",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncedMockWeb3.isConnected": {
            "name": "isConnected",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterfaceTestBase._configure_registry": {
            "name": "_configure_registry",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterfaceTestBase._setup_solidity": {
            "name": "_setup_solidity",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterfaceTestBase.attach_middleware": {
            "name": "attach_middleware",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTypeTestClient.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected_provider_class": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "actual_provider_to_attach": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ProviderTypeTestClient._attach_provider": {
            "name": "_attach_provider",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfuraTestClient._attach_provider": {
            "name": "_attach_provider",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GethClientTestBlockchain._attach_provider": {
            "name": "_attach_provider",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GethClientTestBlockchain.is_local": {
            "name": "is_local",
            "location": 205,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParityClientTestInterface._attach_provider": {
            "name": "_attach_provider",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GanacheClientTestInterface._attach_provider": {
            "name": "_attach_provider",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedW3GethWithPeers.admin.GethAdmin.peers": {
            "name": "peers",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedW3GethWithNoPeers.admin.GethAdmin.peers": {
            "name": "peers",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nucypher-master/tests/utils/blockchain.py": {
        "token_airdrop": {
            "name": "token_airdrop",
            "location": 46,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "token_agent": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "amount": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "origin": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "addresses": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "free_gas_price_strategy": {
            "name": "free_gas_price_strategy",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "w3": [
                    "raiden.utils.Dict",
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ],
                "transaction_params": [
                    "raiden.utils.Dict",
                    "web3.Web3",
                    "Iterable[int]",
                    "Iterable[bool]",
                    "List[List[str]]",
                    "List[List[Any]]"
                ]
            }
        },
        "token_airdrop.txs": {
            "name": "txs",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TesterBlockchain.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_accounts": [
                    "raiden.utils.ChannelID",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.Address",
                    "int",
                    "List[int]"
                ],
                "poa": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "light": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "eth_airdrop": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "free_transactions": [
                    "str",
                    "int",
                    "Iterable[Sequence[str]]"
                ],
                "compiler": [
                    "List[str]",
                    "int"
                ],
                "mock_backend": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "TesterBlockchain.attach_middleware": {
            "name": "attach_middleware",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.__generate_insecure_unlocked_accounts": {
            "name": "__generate_insecure_unlocked_accounts",
            "location": 140,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TesterBlockchain.ether_airdrop": {
            "name": "ether_airdrop",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "bool",
                    "nucypher.blockchain.eth.token.NU"
                ]
            }
        },
        "TesterBlockchain.time_travel": {
            "name": "time_travel",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hours": [
                    "int",
                    "bool",
                    "Iterable['cirq.Qid']"
                ],
                "seconds": [
                    "Optional[\"Outcome\"]"
                ],
                "periods": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "mode.utils.types.graphs._T"
                ]
            }
        },
        "TesterBlockchain.bootstrap_network": {
            "name": "bootstrap_network",
            "location": 213,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ],
                "economics": [
                    "web3.contracContract",
                    "web3.Web3",
                    "rotkehlchen.tests.utils.rotkehlchen.BalancesTestSetup"
                ]
            }
        },
        "TesterBlockchain.etherbase_account": {
            "name": "etherbase_account",
            "location": 234,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.alice_account": {
            "name": "alice_account",
            "location": 238,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.bob_account": {
            "name": "bob_account",
            "location": 242,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.ursula_account": {
            "name": "ursula_account",
            "location": 245,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "TesterBlockchain.staker_account": {
            "name": "staker_account",
            "location": 250,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "TesterBlockchain.ursulas_accounts": {
            "name": "ursulas_accounts",
            "location": 256,
            "return": [
                "List[str]",
                "List[T]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.stakers_accounts": {
            "name": "stakers_accounts",
            "location": 260,
            "return": [
                "List[str]",
                "List[T]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.unassigned_accounts": {
            "name": "unassigned_accounts",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.wait_for_receipt": {
            "name": "wait_for_receipt",
            "location": 270,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "txhash": [
                    "bool",
                    "int",
                    "mode.utils.times.Seconds",
                    "Mapping[str, Any]",
                    "str",
                    "Callable"
                ],
                "timeout": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TesterBlockchain.get_block_number": {
            "name": "get_block_number",
            "location": 278,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TesterBlockchain.read_storage_slot": {
            "name": "read_storage_slot",
            "location": 281,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bytes",
                    "Optional[str]",
                    "Any",
                    "str",
                    "Sequence[int]"
                ],
                "slot": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "nucypher-master/tests/utils/config.py": {
        "assemble": {
            "name": "assemble",
            "location": 37,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "federated": [
                    "Callable",
                    "Tuple[float, float]"
                ],
                "checksum_address": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]"
                ],
                "provider_uri": [
                    "str",
                    "int",
                    "bool"
                ],
                "test_registry": [
                    "str",
                    "int",
                    "bool"
                ],
                "known_nodes": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]"
                ]
            }
        },
        "make_ursula_test_configuration": {
            "name": "make_ursula_test_configuration",
            "location": 67,
            "return": [
                "str",
                "backup.config.Config"
            ],
            "arguments": {
                "rest_port": [
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "make_alice_test_configuration": {
            "name": "make_alice_test_configuration",
            "location": 73,
            "return": [
                "str",
                "backup.config.Config",
                "solo.configurator.registry.Registry",
                "Mapping[str, Any]",
                "cerise.config.Config"
            ],
            "arguments": {}
        },
        "make_bob_test_configuration": {
            "name": "make_bob_test_configuration",
            "location": 79,
            "return": [
                "str",
                "backup.config.Config",
                "solo.configurator.registry.Registry",
                "Mapping[str, Any]",
                "cerise.config.Config"
            ],
            "arguments": {}
        }
    },
    "nucypher-master/tests/utils/controllers.py": {
        "TestRPCResponse.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]"
                ],
                "payload": [
                    "str",
                    "Optional[str]"
                ],
                "success": [
                    "Optional[Callable[[], bool]]",
                    "bool",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "error": [
                    "Optional[Callable[[], bool]]",
                    "bool",
                    "int",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "TestRPCResponse.__bytes__": {
            "name": "__bytes__",
            "location": 43,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCResponse.error_code": {
            "name": "error_code",
            "location": 47,
            "return": [
                "dict",
                "str",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCResponse.content": {
            "name": "content",
            "location": 54,
            "return": [
                "Union[str, IO]",
                "bytes",
                "IO[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRPCResponse.from_string": {
            "name": "from_string",
            "location": 61,
            "return": [
                "str",
                "dict",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "int"
                ],
                "response_line": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "JSONRPCTestClient.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rpc_controller": [
                    "float",
                    "int",
                    "Type[T]",
                    "tuple"
                ]
            }
        },
        "JSONRPCTestClient.assemble_request": {
            "name": "assemble_request",
            "location": 109,
            "return": [
                "dict",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]",
                    "str"
                ]
            }
        },
        "JSONRPCTestClient.receive": {
            "name": "receive",
            "location": 120,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "List[str]",
                    "io.BufferedReader",
                    "bytes"
                ]
            }
        },
        "JSONRPCTestClient.send": {
            "name": "send",
            "location": 128,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "malformed": [
                    "bool"
                ]
            }
        }
    },
    "nucypher-master/tests/utils/middleware.py": {
        "_TestMiddlewareClient.response_cleaner": {
            "name": "response_cleaner",
            "location": 34,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "response": [
                    "requests.models.Response",
                    "Mapping[str, object]",
                    "dict",
                    "Response",
                    "Dict[str, Any]",
                    "scrapy.http.Response"
                ]
            }
        },
        "_TestMiddlewareClient._get_mock_client_by_ursula": {
            "name": "_get_mock_client_by_ursula",
            "location": 38,
            "return": [
                "str",
                "Optional[str]",
                "Union[Sequence[str], Sequence[int]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_TestMiddlewareClient._get_mock_client_by_url": {
            "name": "_get_mock_client_by_url",
            "location": 42,
            "return": [
                "str",
                "Optional[str]",
                "Union[Sequence[str], Sequence[int]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "_TestMiddlewareClient._get_mock_client_by_port": {
            "name": "_get_mock_client_by_port",
            "location": 46,
            "return": [
                "flask.Flask",
                "Optional[str]",
                "str",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str"
                ]
            }
        },
        "_TestMiddlewareClient._get_ursula_by_port": {
            "name": "_get_ursula_by_port",
            "location": 53,
            "return": [
                "flask.Flask",
                "str"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.HostName",
                    "Type[T]"
                ]
            }
        },
        "_TestMiddlewareClient.parse_node_or_host_and_port": {
            "name": "parse_node_or_host_and_port",
            "location": 60,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "host": [
                    "str",
                    "Tuple[str]"
                ],
                "port": [
                    "str",
                    "list",
                    "bytes",
                    "List[str]",
                    "int"
                ]
            }
        },
        "_TestMiddlewareClient.invoke_method": {
            "name": "invoke_method",
            "location": 74,
            "return": [
                "dict",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "_TestMiddlewareClient.clean_params": {
            "name": "clean_params",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_kwargs": [
                    "tests.e2e.Helper"
                ]
            }
        },
        "MockRestMiddleware.get_certificate": {
            "name": "get_certificate",
            "location": 92,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "bool"
                ],
                "port": [
                    "int",
                    "Dict[str, Any]",
                    "raiden.utils.Secret",
                    "Iterable",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "bool"
                ],
                "retry_attempts": [
                    "int",
                    "bool"
                ],
                "retry_rate": [
                    "int",
                    "bool"
                ],
                "current_attempt": [
                    "int",
                    "bool"
                ]
            }
        },
        "MockRestMiddlewareForLargeFleetTests.get_nodes_via_rest": {
            "name": "get_nodes_via_rest",
            "location": 103,
            "return": [
                "bool",
                "str",
                "MutableMapping[str, int]",
                "List[str]",
                "List[Optional[str]]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "set"
                ],
                "announce_nodes": [
                    "str",
                    "int",
                    "List[str]",
                    "Callable[[str], str]",
                    "bool",
                    "list"
                ],
                "nodes_i_need": [
                    "str",
                    "int",
                    "List[str]",
                    "Callable[[str], str]",
                    "bool",
                    "list"
                ],
                "fleet_checksum": [
                    "str",
                    "int",
                    "List[str]",
                    "Callable[[str], str]",
                    "bool",
                    "list"
                ]
            }
        },
        "_MiddlewareClientWithConnectionProblems.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_MiddlewareClientWithConnectionProblems._get_ursula_by_port": {
            "name": "_get_ursula_by_port",
            "location": 122,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "raiden.utils.Any",
                    "str"
                ]
            }
        },
        "_MiddlewareClientWithConnectionProblems.get": {
            "name": "get",
            "location": 128,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIsDownMiddleware.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIsDownMiddleware.node_is_down": {
            "name": "node_is_down",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "NodeIsDownMiddleware.node_is_up": {
            "name": "node_is_up",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list",
                    "bytes"
                ]
            }
        },
        "NodeIsDownMiddleware.all_nodes_up": {
            "name": "all_nodes_up",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeIsDownMiddleware.all_nodes_down": {
            "name": "all_nodes_down",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvilMiddleWare.propagate_shitty_interface_id": {
            "name": "propagate_shitty_interface_id",
            "location": 167,
            "return": [
                "bytes",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "bytes",
                    "str",
                    "IO[bytes]",
                    "raiden.utils.MonitoringServiceAddress",
                    "Optional[str]",
                    "Dict[models.characters.states.AttributeType, int]"
                ],
                "shitty_interface_id": [
                    "bytes",
                    "str",
                    "IO[bytes]",
                    "raiden.utils.MonitoringServiceAddress",
                    "Optional[str]",
                    "Dict[models.characters.states.AttributeType, int]"
                ]
            }
        },
        "EvilMiddleWare.upload_arbitrary_data": {
            "name": "upload_arbitrary_data",
            "location": 177,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "path": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "nucypher-master/tests/utils/policy.py": {
        "generate_random_label": {
            "name": "generate_random_label",
            "location": 85,
            "return": [
                "str",
                "Dict[str, str]",
                "bytearray",
                "Union[bytes, bytearray]",
                "int"
            ],
            "arguments": {}
        },
        "MockArrangement.publish_treasure_map": {
            "name": "publish_treasure_map",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockArrangement.revoke": {
            "name": "revoke",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPolicy.make_arrangements": {
            "name": "make_arrangements",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Callable",
                    "str"
                ],
                "deposit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "expiration": [
                    "maya.MayaDT",
                    "List[str]",
                    "dict",
                    "str"
                ],
                "ursulas": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MockPolicyCreation.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPolicyCreation.transact": {
            "name": "transact",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MockPolicyCreation.wait_for_receipt": {
            "name": "wait_for_receipt",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "dict",
                    "bool",
                    "str"
                ],
                "tx_hash": [
                    "int",
                    "dict"
                ]
            }
        }
    },
    "nucypher-master/tests/utils/solidity.py": {
        "to_bytes32": {
            "name": "to_bytes32",
            "location": 21,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "int",
                    "Union[str, bytes]",
                    "dict"
                ],
                "hexstr": [
                    "bytes",
                    "int",
                    "Union[str, bytes]",
                    "dict"
                ]
            }
        },
        "to_32byte_hex": {
            "name": "to_32byte_hex",
            "location": 25,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "int"
                ],
                "hexstr": [
                    "bytes",
                    "int"
                ]
            }
        },
        "get_mapping_entry_location": {
            "name": "get_mapping_entry_location",
            "location": 29,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "set",
                "dict"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "int"
                ],
                "mapping_location": [
                    "str",
                    "int",
                    "float",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "get_array_data_location": {
            "name": "get_array_data_location",
            "location": 37,
            "return": [
                "str",
                "Callable",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, Any]",
                "IO"
            ],
            "arguments": {
                "array_location": [
                    "str",
                    "int",
                    "List[int]",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "nucypher-master/tests/utils/ursula.py": {
        "select_test_port": {
            "name": "select_test_port",
            "location": 36,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "make_federated_ursulas": {
            "name": "make_federated_ursulas",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula_config": [
                    "nucypher.config.characters.UrsulaConfiguration",
                    "str",
                    "Mapping[str, str]",
                    "Callable",
                    "cmk.base.config.HostConfig"
                ],
                "quantity": [
                    "int",
                    "float",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "know_each_other": [
                    "bool",
                    "float"
                ]
            }
        },
        "make_decentralized_ursulas": {
            "name": "make_decentralized_ursulas",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula_config": [
                    "nucypher.config.characters.UrsulaConfiguration",
                    "bool",
                    "nucypher.blockchain.eth.interfaces.BlockchainInterface",
                    "opentrons.config.robot_configs.robot_config"
                ],
                "stakers_addresses": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "workers_addresses": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "commit_to_next_period": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "make_ursula_for_staker": {
            "name": "make_ursula_for_staker",
            "location": 121,
            "return": [
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "staker": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "worker_address": [
                    "str",
                    "nucypher.blockchain.eth.actors.Staker",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "blockchain": [
                    "dict",
                    "str",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "bool",
                    "nucypher.blockchain.eth.interfaces.BlockchainInterface",
                    "float"
                ],
                "ursula_config": [
                    "dict",
                    "str",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "bool",
                    "nucypher.blockchain.eth.interfaces.BlockchainInterface",
                    "float"
                ],
                "ursulas_to_learn_about": [
                    "str",
                    "can.interfaces.vector.xlclass.XLportHandle",
                    "dict",
                    "bool"
                ],
                "commit_to_next_period": [
                    "dict",
                    "str",
                    "nucypher.config.characters.UrsulaConfiguration",
                    "bool",
                    "nucypher.blockchain.eth.interfaces.BlockchainInterface",
                    "float"
                ]
            }
        },
        "start_pytest_ursula_services": {
            "name": "start_pytest_ursula_services",
            "location": 146,
            "return": [
                "str",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "ursula": [
                    "TextIO",
                    "str"
                ]
            }
        }
    }
}
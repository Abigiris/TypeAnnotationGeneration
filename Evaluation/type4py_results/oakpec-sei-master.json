{
    "oakpec-sei-master/main.py": {
        "download_all_filings": {
            "name": "download_all_filings",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "AnyStr"
                ],
                "context": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Iterable[str]"
                ]
            }
        },
        "trigger_processing": {
            "name": "trigger_processing",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "storage_client": [
                    "str",
                    "google.cloud.bigquery.dataseDatasetReference",
                    "dict",
                    "Dict[str, Any]"
                ],
                "parent_directory": [
                    "str"
                ]
            }
        },
        "download_netfile_filing": {
            "name": "download_netfile_filing",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "dict",
                    "Callable[[Any], None]",
                    "int",
                    "List[List[str]]"
                ],
                "context": [
                    "List[dict]",
                    "str",
                    "List[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "process_netfile_filings": {
            "name": "process_netfile_filings",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "context": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "oakpec-sei-master/pipeline/bigquery.py": {
        "is_connected": {
            "name": "is_connected",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_stringio2bytesio": {
            "name": "_stringio2bytesio",
            "location": 31,
            "return": [
                "IO[bytes]",
                "TextIO",
                "BinaryIO",
                "cdp.io.StreamHandle",
                "io.BytesIO"
            ],
            "arguments": {
                "data": [
                    "io.StringIO",
                    "bytes",
                    "str",
                    "bool",
                    "memoryview",
                    "Union[bytes, str]"
                ]
            }
        },
        "_recreate_table": {
            "name": "_recreate_table",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[core.models.User]",
                    "str",
                    "google.cloud.storage.Client"
                ],
                "table_id": [
                    "str"
                ],
                "schema": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "_refresh_table_data": {
            "name": "_refresh_table_data",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "table_id": [
                    "str"
                ],
                "schema": [
                    "List[google.cloud.bigquery.SchemaField]",
                    "str",
                    "Optional[int]"
                ],
                "source_file": [
                    "str"
                ]
            }
        },
        "_get_type_for_field": {
            "name": "_get_type_for_field",
            "location": 72,
            "return": [
                "str",
                "tuple",
                "int",
                "Type"
            ],
            "arguments": {
                "field": [
                    "peewee.Field",
                    "str",
                    "Mapping[rflx.model.Field, rflx.model.Type]",
                    "Sequence[rflx.model.Field]",
                    "Type"
                ]
            }
        },
        "_get_schema_for_field": {
            "name": "_get_schema_for_field",
            "location": 88,
            "return": [
                "str",
                "Optional[db.models.Taxon]",
                "Optional[str]"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        },
        "_get_schema_for_model": {
            "name": "_get_schema_for_model",
            "location": 94,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "str",
                "int",
                "Set[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "model": [
                    "peewee.Model",
                    "django.db.models.Model",
                    "dict",
                    "esm.models.service_type.ServiceType",
                    "str"
                ]
            }
        },
        "get_table_id_for_model": {
            "name": "get_table_id_for_model",
            "location": 98,
            "return": [
                "int",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "model": [
                    "peewee.Model",
                    "str",
                    "int"
                ]
            }
        },
        "refresh_model_data": {
            "name": "refresh_model_data",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Dict[str, Any]",
                    "Callable",
                    "Iterable[Callable]"
                ],
                "data": [
                    "bytes",
                    "str",
                    "Dict[str, List[Any]]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "oakpec-sei-master/pipeline/__init__.py": {},
    "oakpec-sei-master/pipeline/netfile/client.py": {
        "build_url": {
            "name": "build_url",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_filing_ids": {
            "name": "get_filing_ids",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "form_type": [
                    "str",
                    "int"
                ]
            }
        },
        "download_filing": {
            "name": "download_filing",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "filing_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "oakpec-sei-master/pipeline/netfile/errors.py": {},
    "oakpec-sei-master/pipeline/netfile/models.py": {
        "close_connection": {
            "name": "close_connection",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "destroy_database": {
            "name": "destroy_database",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_model_classes": {
            "name": "get_model_classes",
            "location": 253,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "build_tables": {
            "name": "build_tables",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_table_to_csv": {
            "name": "_table_to_csv",
            "location": 266,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "export_data_to_csv": {
            "name": "export_data_to_csv",
            "location": 274,
            "return": [
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "BaseModel.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type[T]",
                    "Type",
                    "Optional[str]",
                    "Exception",
                    "Type[BaseException]"
                ]
            }
        }
    },
    "oakpec-sei-master/pipeline/netfile/parsers.py": {
        "find_and_clean_text": {
            "name": "find_and_clean_text",
            "location": 16,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Optional[Callable]"
            ],
            "arguments": {
                "element": [
                    "str",
                    "dict"
                ],
                "path": [
                    "str",
                    "dict"
                ]
            }
        },
        "_parse_comments": {
            "name": "_parse_comments",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "filing": [
                    "models.Form700Filing",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode"
                ],
                "xml_tree": [
                    "models.Form700Filing",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode"
                ]
            }
        },
        "_parse_cover": {
            "name": "_parse_cover",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "filing": [
                    "models.Form700Filing",
                    "models.File"
                ],
                "xml_tree": [
                    "docker.models.containers.Container",
                    "models.Form700Filing",
                    "dict",
                    "models.File"
                ]
            }
        },
        "_parse_offices": {
            "name": "_parse_offices",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "filing": [
                    "models.Form700Filing",
                    "jobs.models.Job",
                    "bool"
                ],
                "xml_tree": [
                    "str",
                    "bool",
                    "int",
                    "FrozenSet[str]"
                ]
            }
        },
        "_parse_schedule_a1_attachments": {
            "name": "_parse_schedule_a1_attachments",
            "location": 71,
            "return": [
                "bool",
                "List[List[str]]"
            ],
            "arguments": {
                "filing": [
                    "str",
                    "Callable[[Mapping], Awaitable]",
                    "Callable[[], Awaitable[Mapping]]"
                ],
                "xml_tree": [
                    "str"
                ]
            }
        },
        "_parse_schedule_a2_attachments": {
            "name": "_parse_schedule_a2_attachments",
            "location": 102,
            "return": [
                "bool",
                "List[List[str]]"
            ],
            "arguments": {
                "filing": [
                    "bool",
                    "docker.models.containers.Container"
                ],
                "xml_tree": [
                    "str"
                ]
            }
        },
        "_parse_schedule_b_attachments": {
            "name": "_parse_schedule_b_attachments",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "filing": [
                    "videoarchiver.tvasahi.models.Episode",
                    "models.Form700Filing"
                ],
                "xml_tree": [
                    "str"
                ]
            }
        },
        "_parse_schedule_c1_attachments": {
            "name": "_parse_schedule_c1_attachments",
            "location": 176,
            "return": [
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "filing": [
                    "bool",
                    "Callable",
                    "docker.models.containers.Container",
                    "models.Form700Filing"
                ],
                "xml_tree": [
                    "str"
                ]
            }
        },
        "_parse_schedule_c2_attachments": {
            "name": "_parse_schedule_c2_attachments",
            "location": 204,
            "return": [
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "filing": [
                    "models.Form700Filing",
                    "Tuple[str, float]",
                    "Optional[\"TreeNode\"]"
                ],
                "xml_tree": [
                    "str"
                ]
            }
        },
        "_parse_schedule_d_attachments": {
            "name": "_parse_schedule_d_attachments",
            "location": 255,
            "return": [
                "float",
                "int",
                "Iterable[Iterable[T]]"
            ],
            "arguments": {
                "filing": [
                    "bool",
                    "Optional[IO[str]]",
                    "TextIO"
                ],
                "xml_tree": [
                    "str"
                ]
            }
        },
        "_parse_schedule_e_attachments": {
            "name": "_parse_schedule_e_attachments",
            "location": 286,
            "return": [
                "str",
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "filing": [
                    "bool",
                    "Callable",
                    "docker.models.containers.Container",
                    "models.Form700Filing"
                ],
                "xml_tree": [
                    "str"
                ]
            }
        },
        "_save_models": {
            "name": "_save_models",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "instances": [
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "parse_filing": {
            "name": "parse_filing",
            "location": 321,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "filing_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "raw_data": [
                    "str",
                    "Dict[Any, str]"
                ]
            }
        }
    },
    "oakpec-sei-master/pipeline/netfile/utils.py": {
        "clean_boolean": {
            "name": "clean_boolean",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "clean_datetime": {
            "name": "clean_datetime",
            "location": 21,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "clean_choice": {
            "name": "clean_choice",
            "location": 42,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "str",
                    "Set[int]"
                ],
                "choices": [
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "clean_decimal": {
            "name": "clean_decimal",
            "location": 49,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "FrozenSet[int]"
                ]
            }
        },
        "clean_string": {
            "name": "clean_string",
            "location": 53,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "str",
                    "type",
                    "Dict[str, str]"
                ]
            }
        },
        "clean_integer": {
            "name": "clean_integer",
            "location": 60,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "str",
                    "Type",
                    "Optional[int]",
                    "Union[List, Tuple]",
                    "int"
                ]
            }
        }
    },
    "oakpec-sei-master/pipeline/netfile/__init__.py": {},
    "oakpec-sei-master/pipeline/netfile/tests/conftest.py": {
        "reset_database": {
            "name": "reset_database",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "oakpec-sei-master/pipeline/netfile/tests/test_client.py": {
        "test_build_url": {
            "name": "test_build_url",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_filings": {
            "name": "test_get_filings",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_filings_error": {
            "name": "test_get_filings_error",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_download_filing": {
            "name": "test_download_filing",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_download_filing_error": {
            "name": "test_download_filing_error",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "oakpec-sei-master/pipeline/netfile/tests/test_parsers.py": {
        "read_filing": {
            "name": "read_filing",
            "location": 16,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "filing_id": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_parse_filing": {
            "name": "_parse_filing",
            "location": 25,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "filing_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "test_parse_filing": {
            "name": "test_parse_filing",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_filing_amendments": {
            "name": "test_parse_filing_amendments",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_filing_comments_schedule_b": {
            "name": "test_parse_filing_comments_schedule_b",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_filing_comments_schedule_d": {
            "name": "test_parse_filing_comments_schedule_d",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_filing_duplicates": {
            "name": "test_parse_filing_duplicates",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_schedule_a2": {
            "name": "test_parse_schedule_a2",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_schedule_b": {
            "name": "test_parse_schedule_b",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_schedule_b_income_sources": {
            "name": "test_parse_schedule_b_income_sources",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_schedule_c1": {
            "name": "test_parse_schedule_c1",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_schedule_c2": {
            "name": "test_parse_schedule_c2",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_schedule_d": {
            "name": "test_parse_schedule_d",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_schedule_e": {
            "name": "test_parse_schedule_e",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "oakpec-sei-master/pipeline/netfile/tests/test_utils.py": {
        "test_clean_string": {
            "name": "test_clean_string",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_clean_boolean": {
            "name": "test_clean_boolean",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_clean_datetime": {
            "name": "test_clean_datetime",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_clean_decimal": {
            "name": "test_clean_decimal",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_clean_integer": {
            "name": "test_clean_integer",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "oakpec-sei-master/pipeline/netfile/tests/__init__.py": {},
    "oakpec-sei-master/pipeline/tests/bigquery.py": {
        "test_get_table_id_for_model": {
            "name": "test_get_table_id_for_model",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "oakpec-sei-master/scripts/download_form_700_data.py": {
        "_save_file": {
            "name": "_save_file",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "filing_id": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "oakpec-sei-master/scripts/parse_local_data.py": {
        "_save_file": {
            "name": "_save_file",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "filing_id": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "oakpec-sei-master/scripts/__init__.py": {}
}
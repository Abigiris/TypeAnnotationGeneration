{
    "ocr-experiments-master/datagen.py": {
        "_charset": {
            "name": "_charset",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "char2idx": {
            "name": "char2idx",
            "location": 20,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "text2idx": {
            "name": "text2idx",
            "location": 24,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "idx2char": {
            "name": "idx2char",
            "location": 28,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "random_fontname": {
            "name": "random_fontname",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "drawn_bb": {
            "name": "drawn_bb",
            "location": 39,
            "return": [],
            "arguments": {
                "fontname": [],
                "fontsize": [],
                "text": [],
                "total_width": [],
                "total_height": []
            }
        },
        "make_image": {
            "name": "make_image",
            "location": 49,
            "return": [],
            "arguments": {
                "width": [],
                "height": [],
                "bgcolor": []
            }
        },
        "main": {
            "name": "main",
            "location": 87,
            "return": [],
            "arguments": {}
        }
    },
    "ocr-experiments-master/group_norm.py": {
        "GroupNormalization.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "int",
                    "bool",
                    "float"
                ],
                "axis": [
                    "int",
                    "bool",
                    "float"
                ],
                "epsilon": [
                    "int",
                    "bool",
                    "float"
                ],
                "center": [
                    "int",
                    "bool",
                    "float"
                ],
                "scale": [
                    "int",
                    "bool",
                    "float"
                ],
                "beta_initializer": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "gamma_initializer": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "beta_regularizer": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "gamma_regularizer": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "beta_constraint": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "gamma_constraint": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ]
            }
        },
        "GroupNormalization.build": {
            "name": "build",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "Optional[Union[float, str]]",
                    "int",
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "GroupNormalization.call": {
            "name": "call",
            "location": 128,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int"
                ]
            }
        },
        "GroupNormalization.get_config": {
            "name": "get_config",
            "location": 178,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Optional[dict]",
                "Dict[int, Dict[str, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupNormalization.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 195,
            "return": [
                "str",
                "Tuple[int]",
                "List[bytes]",
                "Iterable[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "int",
                    "bool",
                    "Generator",
                    "List[int]",
                    "Union[None, bytes]",
                    "List[str]"
                ]
            }
        }
    },
    "ocr-experiments-master/main.py": {
        "meshgrid": {
            "name": "meshgrid",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "xywh2xyxy": {
            "name": "xywh2xyxy",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "xyxy2xywh": {
            "name": "xyxy2xywh",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "box_iou": {
            "name": "box_iou",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "box1": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "int"
                ],
                "box2": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_bottleneck": {
            "name": "_bottleneck",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "numpy.ndarray",
                    "Tuple[float, float, float]",
                    "float"
                ],
                "channels": [
                    "tuple",
                    "int",
                    "numpy.ndarray",
                    "bool"
                ],
                "strides": [
                    "float",
                    "int",
                    "List[int]"
                ]
            }
        },
        "feature_extract": {
            "name": "feature_extract",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "bool"
                ]
            }
        },
        "position_predict": {
            "name": "position_predict",
            "location": 273,
            "return": [
                "numpy.ndarray",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "feature_map": [
                    "str",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "reconstruct_bounding_boxes": {
            "name": "reconstruct_bounding_boxes",
            "location": 279,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "anchor_boxes": [
                    "bool"
                ],
                "outputs": [
                    "bool"
                ]
            }
        },
        "roi_pooling": {
            "name": "roi_pooling",
            "location": 317,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "image": [
                    "tensorflow.Tensor",
                    "float",
                    "Optional[int]",
                    "List[Union[\"PipeChain\", str]]",
                    "Optional[Awaitable[None]]"
                ],
                "boxes": [
                    "tensorflow.Tensor",
                    "bool",
                    "str"
                ],
                "height": [
                    "tensorflow.Tensor",
                    "float",
                    "Optional[int]",
                    "List[Union[\"PipeChain\", str]]",
                    "Optional[Awaitable[None]]"
                ]
            }
        },
        "roi_pooling_in_batch": {
            "name": "roi_pooling_in_batch",
            "location": 357,
            "return": [
                "Callable",
                "Tuple[numpy.ndarray]",
                "str"
            ],
            "arguments": {
                "feature_maps": [
                    "tensorflow.Tensor",
                    "int",
                    "numpy.ndarray",
                    "str"
                ],
                "boxes": [
                    "int",
                    "tensorflow.Tensor"
                ],
                "height": [
                    "int",
                    "tensorflow.Tensor"
                ]
            }
        },
        "roi_pooling_lengths_in_batch": {
            "name": "roi_pooling_lengths_in_batch",
            "location": 366,
            "return": [
                "float",
                "Dict[str, str]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "boxes": [
                    "str",
                    "int",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "height": [
                    "float",
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "bilinear_interpolate": {
            "name": "bilinear_interpolate",
            "location": 375,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img": [
                    "tensorflow.Tensor",
                    "Tuple[tensorflow.Tensor]",
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ],
                "x": [
                    "tensorflow.Tensor",
                    "numpy.ndarray",
                    "Sequence[Any]"
                ],
                "y": [
                    "tensorflow.Tensor",
                    "numpy.ndarray",
                    "Sequence[Any]"
                ]
            }
        },
        "ocr_predict": {
            "name": "ocr_predict",
            "location": 418,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "features": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "make_model_fn": {
            "name": "make_model_fn",
            "location": 444,
            "return": [],
            "arguments": {
                "anchor_boxes": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "List[Tuple[int, int]]",
                    "str",
                    "bool"
                ]
            }
        },
        "weighted_binary_cross_entropy": {
            "name": "weighted_binary_cross_entropy",
            "location": 492,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "output": [
                    "str",
                    "dict",
                    "Callable[[str], None]"
                ],
                "target": [
                    "str",
                    "dict",
                    "Callable[[str], None]"
                ],
                "weights": [
                    "str",
                    "dict",
                    "Callable[[str], None]"
                ]
            }
        },
        "loss_positions": {
            "name": "loss_positions",
            "location": 499,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "targets": [
                    "int",
                    "str"
                ],
                "preds": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "calc_ocr_loss": {
            "name": "calc_ocr_loss",
            "location": 532,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "lengths_pred": [
                    "float",
                    "str",
                    "bool",
                    "Tuple[str, str, str]"
                ],
                "y_true": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "y_pred": [
                    "float",
                    "str",
                    "bool",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "decode_ocr": {
            "name": "decode_ocr",
            "location": 564,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "lengths": [],
                "ocr_predictions": [
                    "numpy.ndarray",
                    "list",
                    "numpy.array",
                    "Iterable[Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 576,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Sequence.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "int",
                    "Tuple[float, float, float, float]",
                    "Optional[bool]",
                    "Iterator[int]"
                ],
                "input_size": [
                    "tensorflow.Tensor",
                    "int",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "Sequence._get_anchor_wh": {
            "name": "_get_anchor_wh",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence._get_anchor_boxes": {
            "name": "_get_anchor_boxes",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Sequence._load_data": {
            "name": "_load_data",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.__len__": {
            "name": "__len__",
            "location": 114,
            "return": [
                "str",
                "numpy.ndarray",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.__getitem__": {
            "name": "__getitem__",
            "location": 117,
            "return": [
                "Sequence['cirq.Qid']",
                "tuple",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "float"
                ]
            }
        },
        "Sequence.generator": {
            "name": "generator",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequence.make_input_fn": {
            "name": "make_input_fn",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ],
                "shuffle": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        },
        "Sequence.encode": {
            "name": "encode",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "boxes": [
                    "numpy.ndarray",
                    "List[float]",
                    "float"
                ],
                "input_size": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "float"
                ]
            }
        },
        "Sequence.decode": {
            "name": "decode",
            "location": 213,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "loc_preds": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "input_size": [
                    "numpy.array",
                    "list",
                    "Dict[str, Any]",
                    "Optional[Sequence[int]]",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "int",
                    "float"
                ],
                "conf_thres": [
                    "int",
                    "str",
                    "Callable[[str, str], float]",
                    "Optional[float]",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "reconstruct_bounding_boxes.nms_fn": {
            "name": "nms_fn",
            "location": 303,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes": [
                    "Set[str]",
                    "List['cirq.Qid']",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "roi_pooling.mapper": {
            "name": "mapper",
            "location": 324,
            "return": [],
            "arguments": {
                "box": []
            }
        },
        "roi_pooling_in_batch.mapper": {
            "name": "mapper",
            "location": 358,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "bilinear_interpolate.to_f": {
            "name": "to_f",
            "location": 383,
            "return": [
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "t": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "bilinear_interpolate.meshgrid_distance": {
            "name": "meshgrid_distance",
            "location": 401,
            "return": [
                "str"
            ],
            "arguments": {
                "x_distance": [
                    "float",
                    "str"
                ],
                "y_distance": [
                    "float",
                    "str"
                ]
            }
        },
        "ocr_predict.mapper": {
            "name": "mapper",
            "location": 419,
            "return": [
                "numpy.ndarray",
                "Callable"
            ],
            "arguments": {
                "feature": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "make_model_fn.model_fn": {
            "name": "model_fn",
            "location": 445,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "features": [
                    "str",
                    "Sequence",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Union[int, float]",
                    "List[str]",
                    "bool"
                ],
                "labels": [
                    "str",
                    "Optional[int]",
                    "int",
                    "float",
                    "Optional[Sequence[str]]"
                ],
                "mode": [
                    "bytes",
                    "str",
                    "float",
                    "tuple",
                    "Optional[bool]"
                ]
            }
        },
        "Sequence.make_input_fn.input_fn": {
            "name": "input_fn",
            "location": 154,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "roi_pooling.mapper.then_branch": {
            "name": "then_branch",
            "location": 330,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "roi_pooling.mapper.else_branch": {
            "name": "else_branch",
            "location": 347,
            "return": [
                "Callable",
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {}
        },
        "ocr_predict.mapper.block": {
            "name": "block",
            "location": 420,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "bool",
                    "str",
                    "numpy.ndarray"
                ],
                "channels": [
                    "int",
                    "bool",
                    "str",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "ocr-experiments-master/ocr/evaluate.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ocr-experiments-master/ocr/serve.py": {
        "greeting": {
            "name": "greeting",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ocr-experiments-master/ocr/__init__.py": {},
    "ocr-experiments-master/ocr/data/process.py": {
        "_random_from_charset": {
            "name": "_random_from_charset",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "_random_text": {
            "name": "_random_text",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "_charset": {
            "name": "_charset",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "vocab": {
            "name": "vocab",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "char2idx": {
            "name": "char2idx",
            "location": 74,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "text2idx": {
            "name": "text2idx",
            "location": 81,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "idx2char": {
            "name": "idx2char",
            "location": 85,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "random_fontname": {
            "name": "random_fontname",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "drawn_bb": {
            "name": "drawn_bb",
            "location": 109,
            "return": [],
            "arguments": {
                "fontname": [],
                "fontsize": [],
                "text": [],
                "total_width": [],
                "total_height": []
            }
        },
        "make_image": {
            "name": "make_image",
            "location": 119,
            "return": [],
            "arguments": {
                "width": [],
                "height": [],
                "bgcolor": []
            }
        },
        "_dofn": {
            "name": "_dofn",
            "location": 159,
            "return": [],
            "arguments": {
                "n": [],
                "n_images": [],
                "out": []
            }
        },
        "main": {
            "name": "main",
            "location": 174,
            "return": [],
            "arguments": {}
        }
    },
    "ocr-experiments-master/ocr/models/bboxnet.py": {
        "__flatten_and_mask": {
            "name": "__flatten_and_mask",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "y_true": [
                    "str",
                    "Exception"
                ],
                "y_pred": [
                    "float",
                    "int"
                ]
            }
        },
        "__loss_confidence": {
            "name": "__loss_confidence",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y_true": [
                    "dict",
                    "str",
                    "float"
                ],
                "y_pred": [
                    "float",
                    "Callable",
                    "int"
                ]
            }
        },
        "_metric_confidence_accuracy": {
            "name": "_metric_confidence_accuracy",
            "location": 43,
            "return": [
                "bytearray",
                "float",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "y_true": [
                    "str",
                    "Callable",
                    "dict",
                    "Optional[bool]"
                ],
                "y_pred": [
                    "Tuple[int, int]"
                ]
            }
        },
        "_metric_loss_confidence": {
            "name": "_metric_loss_confidence",
            "location": 50,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "y_true": [
                    "str",
                    "Exception",
                    "Callable"
                ],
                "y_pred": [
                    "str",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "_ious": {
            "name": "_ious",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y_true": [
                    "str"
                ],
                "y_pred": [
                    "Input",
                    "int",
                    "AsyncIterator[T]",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "__loss_iou": {
            "name": "__loss_iou",
            "location": 82,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "y_true": [
                    "List[Tuple[bool, str]]"
                ],
                "y_pred": [
                    "List[Tuple[bool, str]]"
                ]
            }
        },
        "_metric_iou": {
            "name": "_metric_iou",
            "location": 87,
            "return": [
                "str",
                "bytearray",
                "float",
                "bool"
            ],
            "arguments": {
                "y_true": [
                    "Iterable[bytes]",
                    "Exception"
                ],
                "y_pred": [
                    "Iterable[bytes]",
                    "Exception"
                ]
            }
        },
        "_loss": {
            "name": "_loss",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y_true": [
                    "dict"
                ],
                "y_pred": [
                    "dict"
                ]
            }
        },
        "_reconstruct_boxes": {
            "name": "_reconstruct_boxes",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Callable",
                    "tensorflow.estimator.Estimator"
                ],
                "features_pixel": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_bilinear_interpolate": {
            "name": "_bilinear_interpolate",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img": [
                    "tensorflow.Tensor",
                    "Tuple[tensorflow.Tensor]",
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ],
                "x": [
                    "tensorflow.Tensor",
                    "Sequence[Any]"
                ],
                "y": [
                    "tensorflow.Tensor",
                    "Sequence[Any]"
                ]
            }
        },
        "_roi_pooling_horizontal": {
            "name": "_roi_pooling_horizontal",
            "location": 172,
            "return": [
                "bool",
                "tuple",
                "Tuple[str, str, str]",
                "List[List[str]]"
            ],
            "arguments": {
                "images": [
                    "float",
                    "List[list]"
                ],
                "boxes": [
                    "str",
                    "int",
                    "Tuple[int, int, int]",
                    "float"
                ]
            }
        },
        "_roi_pooling_vertical": {
            "name": "_roi_pooling_vertical",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "images": [
                    "float",
                    "int",
                    "List[list]"
                ],
                "boxes": [
                    "str",
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "_ctc_lambda_func": {
            "name": "_ctc_lambda_func",
            "location": 269,
            "return": [
                "bytearray",
                "float"
            ],
            "arguments": {
                "args": []
            }
        },
        "_text_recognition_horizontal_model": {
            "name": "_text_recognition_horizontal_model",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "input_shape": [
                    "str"
                ],
                "n_vocab": [
                    "List[int]",
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "float"
                ]
            }
        },
        "_text_recognition_vertical_model": {
            "name": "_text_recognition_vertical_model",
            "location": 292,
            "return": [
                "str",
                "tensorflow.Tensor"
            ],
            "arguments": {
                "input_shape": [
                    "int",
                    "str",
                    "bool",
                    "Type[Callable[..., Any]]",
                    "float",
                    "dict"
                ],
                "n_vocab": [
                    "int",
                    "list"
                ]
            }
        },
        "_pad_horizontal_and_vertical": {
            "name": "_pad_horizontal_and_vertical",
            "location": 310,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_model": {
            "name": "create_model",
            "location": 320,
            "return": [
                "int",
                "str",
                "Type[abilian.core.models.Model]",
                "model.Model"
            ],
            "arguments": {
                "backborn": [
                    "int",
                    "float",
                    "List[int]",
                    "Collection[int]"
                ],
                "features_pixel": [
                    "int",
                    "float",
                    "List[int]",
                    "Collection[int]"
                ],
                "input_shape": [
                    "int",
                    "float",
                    "List[int]",
                    "Collection[int]"
                ],
                "n_vocab": [
                    "int",
                    "float",
                    "List[int]",
                    "Collection[int]"
                ]
            }
        },
        "_bilinear_interpolate.to_f": {
            "name": "to_f",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "t": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "_bilinear_interpolate.meshgrid_distance": {
            "name": "meshgrid_distance",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "x_distance": [
                    "float",
                    "str"
                ],
                "y_distance": [
                    "float",
                    "str"
                ]
            }
        },
        "_roi_pooling_horizontal.mapper": {
            "name": "mapper",
            "location": 188,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "_roi_pooling_vertical.mapper": {
            "name": "mapper",
            "location": 237,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "create_model.nms_fn": {
            "name": "nms_fn",
            "location": 392,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create_model.crop_and_ocr": {
            "name": "crop_and_ocr",
            "location": 407,
            "return": [
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "_roi_pooling_horizontal.mapper.cond": {
            "name": "cond",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "_roi_pooling_horizontal.mapper.non_zero": {
            "name": "non_zero",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "_roi_pooling_horizontal.mapper.zero": {
            "name": "zero",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "_roi_pooling_vertical.mapper.cond": {
            "name": "cond",
            "location": 242,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "_roi_pooling_vertical.mapper.non_zero": {
            "name": "non_zero",
            "location": 247,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "_roi_pooling_vertical.mapper.zero": {
            "name": "zero",
            "location": 260,
            "return": [
                "str",
                "bytearray",
                "bool"
            ],
            "arguments": {}
        },
        "create_model.nms_fn.mapper": {
            "name": "mapper",
            "location": 395,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "i": [
                    "int",
                    "List[str]",
                    "tensorflow.Tensor"
                ]
            }
        },
        "create_model.crop_and_ocr._mapper": {
            "name": "_mapper",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "create_model.crop_and_ocr._mapper.then_branch": {
            "name": "then_branch",
            "location": 442,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "create_model.crop_and_ocr._mapper.else_branch": {
            "name": "else_branch",
            "location": 452,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "ocr-experiments-master/ocr/models/group_norm.py": {
        "GroupNormalization.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "int",
                    "bool",
                    "float"
                ],
                "axis": [
                    "int",
                    "bool",
                    "float"
                ],
                "epsilon": [
                    "int",
                    "bool",
                    "float"
                ],
                "center": [
                    "int",
                    "bool",
                    "float"
                ],
                "scale": [
                    "int",
                    "bool",
                    "float"
                ],
                "beta_initializer": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "gamma_initializer": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "beta_regularizer": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "gamma_regularizer": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "beta_constraint": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "gamma_constraint": [
                    "int",
                    "str",
                    "dict",
                    "djmoney.contrib.exchange.models.Rate",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ]
            }
        },
        "GroupNormalization.build": {
            "name": "build",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "Optional[Union[float, str]]",
                    "int",
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "GroupNormalization.call": {
            "name": "call",
            "location": 128,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Container[T]",
                    "int"
                ]
            }
        },
        "GroupNormalization.get_config": {
            "name": "get_config",
            "location": 180,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Optional[dict]",
                "Dict[int, Dict[str, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupNormalization.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 197,
            "return": [
                "str",
                "Tuple[int]",
                "List[bytes]",
                "Iterable[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "int",
                    "bool",
                    "Generator",
                    "List[int]",
                    "Union[None, bytes]",
                    "List[str]"
                ]
            }
        }
    },
    "ocr-experiments-master/ocr/models/mobilenet.py": {
        "_deconv_block": {
            "name": "_deconv_block",
            "location": 13,
            "return": [
                "List[str]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "Optional[int]",
                    "int"
                ],
                "filters": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "float",
                    "Optional[Any]"
                ],
                "kernel_size": [
                    "text_recognizer.models.base.Model",
                    "int",
                    "float"
                ]
            }
        },
        "backbone": {
            "name": "backbone",
            "location": 23,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "input_shape": [
                    "str",
                    "tensorflow.Tensor",
                    "Exception"
                ]
            }
        }
    },
    "ocr-experiments-master/ocr/models/resnet50.py": {
        "_deconv_block": {
            "name": "_deconv_block",
            "location": 13,
            "return": [
                "List[str]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "List[T]"
                ],
                "filters": [
                    "int",
                    "float"
                ]
            }
        },
        "backbone": {
            "name": "backbone",
            "location": 20,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "input_shape": [
                    "str",
                    "tensorflow.Tensor",
                    "Exception"
                ]
            }
        }
    },
    "ocr-experiments-master/ocr/models/train.py": {
        "set_debugger_session": {
            "name": "set_debugger_session",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_callbacks": {
            "name": "create_callbacks",
            "location": 26,
            "return": [
                "bool",
                "allennlp.data.dataseDataset",
                "float"
            ],
            "arguments": {
                "checkpoint_path": [
                    "str",
                    "list"
                ],
                "log_dir": [
                    "str",
                    "list",
                    "Callable",
                    "r2c.lib.versioned_analyzer.AnalyzerName",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ocr-experiments-master/ocr/preprocessing/generator.py": {
        "_read_annotations": {
            "name": "_read_annotations",
            "location": 153,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "csvpath": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "features_pixel": [
                    "int",
                    "bool",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "aug": [
                    "int",
                    "str"
                ]
            }
        },
        "Generator.resize_entry": {
            "name": "resize_entry",
            "location": 43,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "numpy.ndarray",
                    "float",
                    "bytes"
                ],
                "annots": [
                    "int",
                    "str",
                    "dict",
                    "numpy.array"
                ]
            }
        },
        "Generator.size": {
            "name": "size",
            "location": 56,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.load_image": {
            "name": "load_image",
            "location": 59,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "image_index": [
                    "int",
                    "List[numpy.ndarray]",
                    "str"
                ]
            }
        },
        "Generator.load_annotation": {
            "name": "load_annotation",
            "location": 62,
            "return": [
                "typing.Tuple[numpy.ndarray, typing.List[builtins.str]]"
            ],
            "arguments": {
                "self": [],
                "image_index": [
                    "int",
                    "List[numpy.ndarray]",
                    "Tuple[int, int, int]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "Generator.char2idx": {
            "name": "char2idx",
            "location": 65,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "List[Dict[str, Any]]",
                    "str",
                    "List[str]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "Generator.compute_ground_truth": {
            "name": "compute_ground_truth",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "annots": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Generator.batches": {
            "name": "batches",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "float",
                    "bytearray"
                ],
                "infinite": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        },
        "CSVGenerator.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "csv_file_path": [
                    "str"
                ],
                "basedir": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "CSVGenerator._image_path": {
            "name": "_image_path",
            "location": 181,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "image_index": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "CSVGenerator.size": {
            "name": "size",
            "location": 184,
            "return": [
                "str",
                "int",
                "MutableSequence[utils.CWLObjectType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVGenerator.load_image": {
            "name": "load_image",
            "location": 187,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "image_index": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "CSVGenerator.load_annotation": {
            "name": "load_annotation",
            "location": 190,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "image_index": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CSVGenerator.char2idx": {
            "name": "char2idx",
            "location": 202,
            "return": [
                "str",
                "bool",
                "Callable",
                "adam.visualization.utils.Shape"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "list",
                    "List[str]",
                    "Sequence[T]",
                    "int",
                    "List[Tuple[str, Any]]",
                    "List[Tuple[Any, Any]]",
                    "List[List[int]]",
                    "str"
                ]
            }
        }
    },
    "ocr-experiments-master/ocr/utils/image.py": {
        "read_image": {
            "name": "read_image",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "resize_image": {
            "name": "resize_image",
            "location": 12,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "img": [
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "int",
                    "List[float]",
                    "float",
                    "bool"
                ],
                "size": [
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "int",
                    "List[float]",
                    "float",
                    "bool"
                ]
            }
        },
        "nms": {
            "name": "nms",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes": [
                    "int",
                    "str"
                ],
                "scores": [
                    "int",
                    "Callable",
                    "str"
                ],
                "thresh": [
                    "BaseException"
                ]
            }
        }
    },
    "ocr-experiments-master/ocr/utils/visualize.py": {
        "overlay_annotations": {
            "name": "overlay_annotations",
            "location": 5,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "image": [
                    "numpy.ndarray"
                ],
                "annots": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "float"
                ]
            }
        }
    },
    "ocr-experiments-master/ocr/utils/__init__.py": {
        "meshgrid": {
            "name": "meshgrid",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "xywh2xyxy": {
            "name": "xywh2xyxy",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "xyxy2xywh": {
            "name": "xyxy2xywh",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "boxes": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "box_iou": {
            "name": "box_iou",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "box1": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "int"
                ],
                "box2": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    }
}
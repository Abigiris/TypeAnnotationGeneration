{
    "oh-leetcode-master/1-TwoSum.py": {
        "Solution.twoSum": {
            "name": "twoSum",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "target": []
            }
        }
    },
    "oh-leetcode-master/12-Integer2Roman.py": {
        "Solution.intToRoman": {
            "name": "intToRoman",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        }
    },
    "oh-leetcode-master/13-Roman2Integer.py": {
        "Solution.romanToInt": {
            "name": "romanToInt",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "roman": []
            }
        }
    },
    "oh-leetcode-master/136-SingleNumber-General.py": {
        "Solution.singleNumber": {
            "name": "singleNumber",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        }
    },
    "oh-leetcode-master/136-SingleNumber-MathAns.py": {
        "Solution.singleNumber": {
            "name": "singleNumber",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        }
    },
    "oh-leetcode-master/15-3sum-correct-answer-but-time-exceed.py": {
        "Solution.threeSum": {
            "name": "threeSum",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        }
    },
    "oh-leetcode-master/2-AddTwoNumber-Loop-Ans.py": {
        "ListNode.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Solution.addTwoNumbers": {
            "name": "addTwoNumbers",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "l1": [],
                "l2": []
            }
        }
    },
    "oh-leetcode-master/2-AddTwoNumber-Loop.py": {
        "ListNode.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Solution.addTwoNumbers": {
            "name": "addTwoNumbers",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "l1": [],
                "l2": []
            }
        }
    },
    "oh-leetcode-master/2-AddTwoNumber-Recursive.py": {
        "ListNode.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Solution.addTwoNumbers": {
            "name": "addTwoNumbers",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "l1": [],
                "l2": []
            }
        }
    },
    "oh-leetcode-master/20-ValidParentheses.py": {
        "Solution.isValid": {
            "name": "isValid",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "src": []
            }
        }
    },
    "oh-leetcode-master/3-LongestSubstringWithoutRepeatingCharacters.py": {
        "Solution.lengthOfLongestSubstring": {
            "name": "lengthOfLongestSubstring",
            "location": 3,
            "return": [],
            "arguments": {
                "self": [],
                "src": []
            }
        }
    },
    "oh-leetcode-master/31-nextPermutation-one-pass.py": {
        "Solution.nextPermutation": {
            "name": "nextPermutation",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        }
    },
    "oh-leetcode-master/46-Permutations.py": {
        "Solution.permute": {
            "name": "permute",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "list",
                    "List[int]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "oh-leetcode-master/7-ReverseInteger.py": {
        "Solution.reverse": {
            "name": "reverse",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "oh-leetcode-master/9-PalindromeNumber.py": {
        "Solution.isPalindrome": {
            "name": "isPalindrome",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "src": []
            }
        }
    },
    "oh-leetcode-master/carousell-divisibility-of-string.py": {
        "DivisibilityOfString": {
            "name": "DivisibilityOfString",
            "location": 8,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Sequence[int]"
                ],
                "t": [
                    "str",
                    "FrozenSet[int]"
                ]
            }
        }
    },
    "oh-leetcode-master/migo-first-occurrence.py": {
        "firstOccurrence": {
            "name": "firstOccurrence",
            "location": 3,
            "return": [],
            "arguments": {
                "src": [],
                "pattern": []
            }
        }
    }
}
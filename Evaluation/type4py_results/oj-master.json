{
    "oj-master/setup.py": {},
    "oj-master/src/oj/exceptions.py": {},
    "oj-master/src/oj/lex.py": {
        "lex": {
            "name": "lex",
            "location": 19,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "as3.scanner.Token",
                "str"
            ],
            "arguments": {
                "json_string": [
                    "str",
                    "List[str]",
                    "List[allennlp.data.tokenizers.Token]"
                ]
            }
        },
        "lex_bool": {
            "name": "lex_bool",
            "location": 51,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "json_string": [
                    "str"
                ],
                "start_index": [
                    "str",
                    "int",
                    "List[str]",
                    "float",
                    "List['Token']"
                ]
            }
        },
        "lex_delimiter": {
            "name": "lex_delimiter",
            "location": 59,
            "return": [
                "bool",
                "Optional[bool]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "json_string": [
                    "str",
                    "Callable",
                    "Optional[bytes]"
                ],
                "start_index": [
                    "str",
                    "int",
                    "T",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "lex_null": {
            "name": "lex_null",
            "location": 75,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "json_string": [
                    "str"
                ],
                "start_index": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "lex_nan": {
            "name": "lex_nan",
            "location": 83,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "json_string": [
                    "str"
                ],
                "start_index": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "lex_infinity": {
            "name": "lex_infinity",
            "location": 91,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "json_string": [
                    "str",
                    "int"
                ],
                "start_index": [
                    "int"
                ]
            }
        },
        "lex_number": {
            "name": "lex_number",
            "location": 101,
            "return": [
                "bool",
                "Optional[bool]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "json_string": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "start_index": [
                    "int",
                    "str"
                ]
            }
        },
        "lex_string": {
            "name": "lex_string",
            "location": 112,
            "return": [
                "Optional[str]",
                "Optional[Dict]",
                "Optional[int]",
                "Optional[bytes]",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "json_string": [
                    "int",
                    "List[int]"
                ],
                "start_index": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "oj-master/src/oj/parse.py": {
        "parse": {
            "name": "parse",
            "location": 8,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tokens": [
                    "List[oj.tokens.Token]",
                    "List[spacy.tokens.Token]",
                    "allennlp.data.tokenizers.token.Token"
                ]
            }
        },
        "parse_value": {
            "name": "parse_value",
            "location": 15,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "tokens": [
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[\"PNBuffer\"]",
                    "ebl.transliteration.domain.tokens.Token",
                    "int",
                    "list"
                ],
                "index": [
                    "List[allennlp.data.tokenizers.Token]",
                    "List[str]",
                    "int",
                    "spacy.tokens.Token"
                ]
            }
        },
        "parse_boolean": {
            "name": "parse_boolean",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": [
                    "oj.tokens.Token",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "str",
                    "List[str]",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "List[List[str]]"
                ]
            }
        },
        "parse_number": {
            "name": "parse_number",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "token": [
                    "oj.tokens.Token",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "str",
                    "spacy.tokens.Token",
                    "int",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "_parse_integer": {
            "name": "_parse_integer",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "literal": [
                    "int",
                    "List[int]"
                ],
                "start_index": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "allow_plus": [
                    "bool",
                    "List[str]",
                    "int",
                    "str",
                    "float",
                    "Dict[str, Any]"
                ],
                "allow_leading_zeros": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_parse_digit": {
            "name": "_parse_digit",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "digit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "parse_string": {
            "name": "parse_string",
            "location": 123,
            "return": [
                "int",
                "str",
                "set"
            ],
            "arguments": {
                "token": [
                    "int",
                    "oj.tokens.Token",
                    "List[str]",
                    "dict",
                    "Union[List[str], List[Any]]"
                ]
            }
        },
        "parse_array": {
            "name": "parse_array",
            "location": 176,
            "return": [
                "List[str]",
                "str",
                "Sequence",
                "Mapping",
                "int",
                "bool",
                "Optional[Callable]"
            ],
            "arguments": {
                "tokens": [
                    "List[oj.tokens.Token]",
                    "int",
                    "T"
                ],
                "index": [
                    "int",
                    "ebl.transliteration.domain.tokens.Token"
                ]
            }
        },
        "parse_object": {
            "name": "parse_object",
            "location": 211,
            "return": [
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "tokens": [
                    "List[oj.tokens.Token]",
                    "int",
                    "T"
                ],
                "index": [
                    "int",
                    "ebl.transliteration.domain.tokens.Token",
                    "List[List[int]]"
                ]
            }
        }
    },
    "oj-master/src/oj/tokens.py": {},
    "oj-master/src/oj/__init__.py": {
        "loads": {
            "name": "loads",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "json_string": [
                    "str",
                    "List[List[Any]]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 13,
            "return": [
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "json_file": [
                    "IO",
                    "str",
                    "TextIO",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "oj-master/tests/test_fuzzy.py": {
        "raw_json": {
            "name": "raw_json",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "Optional[str]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "corrupted_json": {
            "name": "corrupted_json",
            "location": 29,
            "return": [
                "Callable",
                "str",
                "Optional[bool]",
                "Optional[int]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "List['cirq.Qid']",
                    "bytes",
                    "bool"
                ]
            }
        },
        "assert_json_equal": {
            "name": "assert_json_equal",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "object1": [
                    "Dict[str, Any]",
                    "float"
                ],
                "object2": [
                    "List[int]",
                    "int",
                    "Set[int]"
                ]
            }
        },
        "test_compared_to_stdlib_success": {
            "name": "test_compared_to_stdlib_success",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "input_json": []
            }
        },
        "test_compared_to_stdlib_corrupted_json": {
            "name": "test_compared_to_stdlib_corrupted_json",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "input_json": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_compared_to_stdlib_random_text": {
            "name": "test_compared_to_stdlib_random_text",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "input_text": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "oj-master/tests/test_lex_types.py": {
        "assert_lexes_literal": {
            "name": "assert_lexes_literal",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "lex_func": [
                    "bool"
                ],
                "json_literal": [
                    "Optional[Callable[[Any, Any], None]]",
                    "str",
                    "Pattern[str]",
                    "bool",
                    "list",
                    "Callable[[Any], bool]"
                ],
                "expected_token_type": [
                    "bool",
                    "Dict[str, Any]",
                    "Tuple[List[str], List[str]]"
                ],
                "expected_lexeme": [
                    "FrozenSet[str]",
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]",
                    "Union[int, float]",
                    "Callable",
                    "Optional[dict]",
                    "Dict[str, Exception]"
                ]
            }
        },
        "test_lex_bool_positive": {
            "name": "test_lex_bool_positive",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "bool_literal": [
                    "str",
                    "Callable[..., Awaitable]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_lex_null_positive": {
            "name": "test_lex_null_positive",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lex_delimiter_positive": {
            "name": "test_lex_delimiter_positive",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "delimiter": [
                    "str"
                ],
                "expected_token_type": [
                    "str"
                ]
            }
        },
        "test_lex_string_positive": {
            "name": "test_lex_string_positive",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "string_literal": [
                    "Optional[Mapping[str, Any]]",
                    "Exception",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_lex_string_with_escapes": {
            "name": "test_lex_string_with_escapes",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lex_number_positive": {
            "name": "test_lex_number_positive",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "num": [
                    "Callable",
                    "List[str]",
                    "Callable[[Any, Any], Any]",
                    "str",
                    "Dict[Any, int]"
                ]
            }
        },
        "test_lex_list": {
            "name": "test_lex_list",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lex_nested_list": {
            "name": "test_lex_nested_list",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "oj-master/tests/test_loads.py": {
        "test_bool_positive": {
            "name": "test_bool_positive",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "boolean": []
            }
        },
        "test_null_positive": {
            "name": "test_null_positive",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_empty_string": {
            "name": "test_empty_string",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_positive": {
            "name": "test_string_positive",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "string_literal": [
                    "str",
                    "dict",
                    "Iterable[str]"
                ]
            }
        },
        "test_string_with_escapes": {
            "name": "test_string_with_escapes",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_integer_positive": {
            "name": "test_integer_positive",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "num": [
                    "str",
                    "int"
                ]
            }
        },
        "test_float_positive": {
            "name": "test_float_positive",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "num": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lex_nested_list": {
            "name": "test_lex_nested_list",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_loads_empty_list": {
            "name": "test_loads_empty_list",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_loads_list": {
            "name": "test_loads_list",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_loads_nested_list": {
            "name": "test_loads_nested_list",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_loads_empty_object": {
            "name": "test_loads_empty_object",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_loads_object": {
            "name": "test_loads_object",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rejects_non_string_keys": {
            "name": "test_rejects_non_string_keys",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "oj-master/tests/test_parse.py": {
        "test_parse_escape_chars": {
            "name": "test_parse_escape_chars",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "escaped_char": [
                    "str"
                ],
                "result_char": [
                    "str"
                ]
            }
        },
        "test_parse_hex": {
            "name": "test_parse_hex",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "char_point": [
                    "str"
                ]
            }
        },
        "test_parse_number_integer": {
            "name": "test_parse_number_integer",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "num": [
                    "str",
                    "int"
                ]
            }
        },
        "test_parse_number_float": {
            "name": "test_parse_number_float",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "num": [
                    "str"
                ]
            }
        },
        "test_parse_number_rejects_leading_zeros": {
            "name": "test_parse_number_rejects_leading_zeros",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_number_scientific_notations": {
            "name": "test_parse_number_scientific_notations",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "base": [
                    "str"
                ],
                "exponent": [
                    "str"
                ]
            }
        }
    },
    "oj-master/tests/utils.py": {}
}
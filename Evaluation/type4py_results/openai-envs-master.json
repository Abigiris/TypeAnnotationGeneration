{
    "openai-envs-master/setup.py": {},
    "openai-envs-master/examples/checkerboard.py": {},
    "openai-envs-master/examples/handeye.py": {},
    "openai-envs-master/examples/maze.py": {},
    "openai-envs-master/examples/maze_rotating.py": {},
    "openai-envs-master/examples/taxi.py": {},
    "openai-envs-master/gym_checkerboard/checkerboard.py": {
        "Checkerboard.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "ndiv": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Checkerboard.reset": {
            "name": "reset",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checkerboard.step": {
            "name": "step",
            "location": 36,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "logging.Logger",
                    "dict",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "Checkerboard.render": {
            "name": "render",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "Type[\"SerializationDialect\"]",
                    "int",
                    "bool"
                ]
            }
        },
        "Checkerboard._generate_state": {
            "name": "_generate_state",
            "location": 54,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checkerboard._observation": {
            "name": "_observation",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Checkerboard._true_color": {
            "name": "_true_color",
            "location": 64,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_checkerboard/checkerboard_simulator.py": {
        "CheckerboardSimulator.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "ndiv": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CheckerboardSimulator._build_board": {
            "name": "_build_board",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckerboardSimulator.get_color": {
            "name": "get_color",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckerboardSimulator._get_index": {
            "name": "_get_index",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "List[str]",
                    "float",
                    "str",
                    "Callable[[None], None]",
                    "int"
                ]
            }
        }
    },
    "openai-envs-master/gym_checkerboard/__init__.py": {},
    "openai-envs-master/gym_checkerboard/tests/test_checkerboard.py": {
        "TestCheckerboard.checkerboard": {
            "name": "checkerboard",
            "location": 11,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckerboard.test_initializing_environment": {
            "name": "test_initializing_environment",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "TestCheckerboard.test_should_reset_environment": {
            "name": "test_should_reset_environment",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "type",
                    "str",
                    "List[str]",
                    "list"
                ]
            }
        },
        "TestCheckerboard.test_should_execute_step": {
            "name": "test_should_execute_step",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Union[Tuple[int], Tuple[int, int]]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "openai-envs-master/gym_checkerboard/tests/test_checkerboard_simulator.py": {
        "TestCheckerboard.test_should_build_board": {
            "name": "test_should_build_board",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_dim": [
                    "bool",
                    "float",
                    "str"
                ],
                "_ndiv": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "TestCheckerboard.test_should_return_proper_color": {
            "name": "test_should_return_proper_color",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_cords": [
                    "str"
                ],
                "_color": [
                    "str"
                ]
            }
        },
        "TestCheckerboard.test_should_return_index": {
            "name": "test_should_return_index",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_val": [
                    "str",
                    "bool",
                    "Sequence[int]"
                ],
                "_result": [
                    "str",
                    "bool",
                    "Sequence[int]"
                ]
            }
        }
    },
    "openai-envs-master/gym_checkerboard/tests/__init__.py": {},
    "openai-envs-master/gym_corridor/corridor.py": {
        "Corridor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "Corridor.reset": {
            "name": "reset",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corridor.step": {
            "name": "step",
            "location": 27,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "bytes",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ]
            }
        },
        "Corridor.render": {
            "name": "render",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Corridor.get_transitions": {
            "name": "get_transitions",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corridor._visualize": {
            "name": "_visualize",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corridor._calculate_transitions": {
            "name": "_calculate_transitions",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corridor._state_action": {
            "name": "_state_action",
            "location": 81,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "OrderedDict",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corridor._calculate_transitions._handle_state": {
            "name": "_handle_state",
            "location": 64,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "list",
                    "int"
                ]
            }
        }
    },
    "openai-envs-master/gym_corridor/__init__.py": {},
    "openai-envs-master/gym_corridor/tests/test_corridor.py": {
        "TestCorridor.test_should_initialize": {
            "name": "test_should_initialize",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorridor.test_should_visualize": {
            "name": "test_should_visualize",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorridor.test_should_initialize_in_allowed_position": {
            "name": "test_should_initialize_in_allowed_position",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorridor.test_should_hit_left_wall": {
            "name": "test_should_hit_left_wall",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorridor.test_should_get_reward": {
            "name": "test_should_get_reward",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorridor.test_should_move_in_both_directions": {
            "name": "test_should_move_in_both_directions",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorridor.test_should_calculate_transitions": {
            "name": "test_should_calculate_transitions",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorridor.test_should_return_state_action_dict": {
            "name": "test_should_return_state_action_dict",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_corridor/tests/__init__.py": {},
    "openai-envs-master/gym_fsw/fsw.py": {
        "FiniteStateWorld.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "FiniteStateWorld.reset": {
            "name": "reset",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiniteStateWorld.step": {
            "name": "step",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FiniteStateWorld.render": {
            "name": "render",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "FiniteStateWorld._observation": {
            "name": "_observation",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FiniteStateWorld.state_action": {
            "name": "state_action",
            "location": 45,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "OrderedDict",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_fsw/__init__.py": {},
    "openai-envs-master/gym_fsw/tests/test_fsw.py": {
        "TestFiniteStateWorld.test_should_initialize": {
            "name": "test_should_initialize",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFiniteStateWorld.test_should_start_from_initial_position": {
            "name": "test_should_start_from_initial_position",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFiniteStateWorld.test_should_follow_optimal_path_and_find_reward": {
            "name": "test_should_follow_optimal_path_and_find_reward",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFiniteStateWorld.test_should_follow_suboptimal_path_and_find_reward": {
            "name": "test_should_follow_suboptimal_path_and_find_reward",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFiniteStateWorld.test_should_initialize_bigger_environment": {
            "name": "test_should_initialize_bigger_environment",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFiniteStateWorld.test_should_get_all_states_and_actions": {
            "name": "test_should_get_all_states_and_actions",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_fsw/tests/__init__.py": {},
    "openai-envs-master/gym_grid/grid.py": {
        "Grid.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Grid._state": {
            "name": "_state",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid._in_reward": {
            "name": "_in_reward",
            "location": 35,
            "return": [
                "str",
                "float",
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.reset": {
            "name": "reset",
            "location": 38,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid.step": {
            "name": "step",
            "location": 46,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Grid.render": {
            "name": "render",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Grid.get_transitions": {
            "name": "get_transitions",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid._visualize": {
            "name": "_visualize",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid._calculate_transitions": {
            "name": "_calculate_transitions",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid._state_action": {
            "name": "_state_action",
            "location": 156,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grid._calculate_transitions._handle_state": {
            "name": "_handle_state",
            "location": 102,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "numpy.ndarray",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "openai-envs-master/gym_grid/__init__.py": {},
    "openai-envs-master/gym_grid/tests/test_grid.py": {
        "TestGrid.test_should_initialize": {
            "name": "test_should_initialize",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrid.test_should_handle_hitting_boundaries": {
            "name": "test_should_handle_hitting_boundaries",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrid.test_should_get_reward": {
            "name": "test_should_get_reward",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrid.test_should_move_in_each_direction": {
            "name": "test_should_move_in_each_direction",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrid.test_should_reach_reward": {
            "name": "test_should_reach_reward",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrid.test_should_get_all_states_and_actions": {
            "name": "test_should_get_all_states_and_actions",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrid.test_should_get_all_transitions": {
            "name": "test_should_get_all_transitions",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_grid/tests/__init__.py": {},
    "openai-envs-master/gym_handeye/handeye.py": {
        "HandEye.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "grid_size": [],
                "note_in_hand": [],
                "test_only_changes": []
            }
        },
        "HandEye.step": {
            "name": "step",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "HandEye.reset": {
            "name": "reset",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandEye.render": {
            "name": "render",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [],
                "close": []
            }
        },
        "HandEye.close": {
            "name": "close",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandEye.unwrapped": {
            "name": "unwrapped",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandEye.get_all_possible_actions": {
            "name": "get_all_possible_actions",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "HandEye.get_all_possible_transitions": {
            "name": "get_all_possible_transitions",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandEye.get_goal_state": {
            "name": "get_goal_state",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandEye._should_end_testing": {
            "name": "_should_end_testing",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "previous": [],
                "obs": []
            }
        },
        "HandEye._change_detected": {
            "name": "_change_detected",
            "location": 162,
            "return": [],
            "arguments": {
                "previous": [],
                "current": []
            }
        },
        "HandEye._observe": {
            "name": "_observe",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandEye._take_action": {
            "name": "_take_action",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "HandEye._render_element": {
            "name": "_render_element",
            "location": 189,
            "return": [],
            "arguments": {
                "el": []
            }
        }
    },
    "openai-envs-master/gym_handeye/handeye_simulator.py": {
        "HandEyeSimulator.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grid_size": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "bool"
                ],
                "note_in_hand": [
                    "int",
                    "str",
                    "bool",
                    "tuple"
                ]
            }
        },
        "HandEyeSimulator.observe": {
            "name": "observe",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator.take_action": {
            "name": "take_action",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "type"
                ]
            }
        },
        "HandEyeSimulator.set_random_positions": {
            "name": "set_random_positions",
            "location": 93,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator.parse_observation": {
            "name": "parse_observation",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "HandEyeSimulator._move_gripper": {
            "name": "_move_gripper",
            "location": 150,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "x_end": [
                    "float",
                    "str",
                    "Union[int, float]"
                ],
                "y_end": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "HandEyeSimulator._grip_block": {
            "name": "_grip_block",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._release_block": {
            "name": "_release_block",
            "location": 206,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._get_empty_observation": {
            "name": "_get_empty_observation",
            "location": 220,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._is_above_block": {
            "name": "_is_above_block",
            "location": 229,
            "return": [
                "Optional[Dict[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._set_block_in_hand": {
            "name": "_set_block_in_hand",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._set_block_not_in_hand": {
            "name": "_set_block_not_in_hand",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._set_gripper_state": {
            "name": "_set_gripper_state",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int",
                    "Union[int, str]",
                    "Mapping[str, Sequence[Any]]"
                ],
                "state": [
                    "str",
                    "int"
                ]
            }
        },
        "HandEyeSimulator._set_grid": {
            "name": "_set_grid",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "x": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "y": [
                    "int",
                    "Tuple[float, float]",
                    "bool"
                ],
                "observe": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "HandEyeSimulator._set_observation_grid": {
            "name": "_set_observation_grid",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "observe": [
                    "int",
                    "float"
                ]
            }
        },
        "HandEyeSimulator._set_observation_gripper_state": {
            "name": "_set_observation_gripper_state",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "HandEyeSimulator._set_goal_grid": {
            "name": "_set_goal_grid",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "observe": [
                    "int",
                    "float"
                ]
            }
        },
        "HandEyeSimulator._set_goal_gripper_state": {
            "name": "_set_goal_gripper_state",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.random.RandomState",
                    "str"
                ]
            }
        },
        "HandEyeSimulator._random_position": {
            "name": "_random_position",
            "location": 330,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator.get_goal_state": {
            "name": "get_goal_state",
            "location": 337,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Dict]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._state_move_over_block": {
            "name": "_state_move_over_block",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._state_grip_block": {
            "name": "_state_grip_block",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._state_move_with_block": {
            "name": "_state_move_with_block",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._state_release_block": {
            "name": "_state_release_block",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandEyeSimulator._state_move_not_over_block": {
            "name": "_state_move_not_over_block",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_handeye/__init__.py": {},
    "openai-envs-master/gym_handeye/tests/test_handeye.py": {
        "TestHandEye.test_initialize": {
            "name": "test_initialize",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEye.test_return_observation_when_reset": {
            "name": "test_return_observation_when_reset",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEye.test_execute_step": {
            "name": "test_execute_step",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEye.test_execute_multiple_steps_and_keep_constant_perception_length": {
            "name": "test_execute_multiple_steps_and_keep_constant_perception_length",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEye.test_get_all_possible_transitions": {
            "name": "test_get_all_possible_transitions",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEye._random_action": {
            "name": "_random_action",
            "location": 90,
            "return": [
                "str",
                "int",
                "OrderedDict"
            ],
            "arguments": {}
        }
    },
    "openai-envs-master/gym_handeye/tests/test_handeye_simulator.py": {
        "TestHandEyeSimulator.test_parse_block_not_under_hand": {
            "name": "test_parse_block_not_under_hand",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEyeSimulator.test_parse_block_in_hand": {
            "name": "test_parse_block_in_hand",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEyeSimulator.test_parse_block_under_hand": {
            "name": "test_parse_block_under_hand",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEyeSimulator.test_move_north_not_in_hand": {
            "name": "test_move_north_not_in_hand",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEyeSimulator.test_move_north_in_hand": {
            "name": "test_move_north_in_hand",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEyeSimulator.test_move_blocked": {
            "name": "test_move_blocked",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEyeSimulator.test_grip_block": {
            "name": "test_grip_block",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEyeSimulator.test_grip_block_blocked": {
            "name": "test_grip_block_blocked",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEyeSimulator.test_release_block": {
            "name": "test_release_block",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHandEyeSimulator.test_release_block_blocked": {
            "name": "test_release_block_blocked",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_handeye/tests/__init__.py": {},
    "openai-envs-master/gym_handeye/utils/utils.py": {
        "get_all_possible_transitions": {
            "name": "get_all_possible_transitions",
            "location": 7,
            "return": [
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "grid_size": [
                    "list",
                    "int"
                ]
            }
        },
        "get_transitions": {
            "name": "get_transitions",
            "location": 39,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "grid_size": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "bytes",
                    "dict"
                ],
                "start": [
                    "Iterable[str]",
                    "str",
                    "int",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "openai-envs-master/gym_handeye/utils/__init__.py": {},
    "openai-envs-master/gym_maze/maze.py": {
        "Maze.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "bool",
                    "Optional[Callable]"
                ]
            }
        },
        "Maze.reset": {
            "name": "reset",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze.step": {
            "name": "step",
            "location": 32,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Maze.render": {
            "name": "render",
            "location": 36,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "Type[\"SerializationDialect\"]",
                    "int",
                    "bool"
                ]
            }
        },
        "Maze._observe": {
            "name": "_observe",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze._get_reward": {
            "name": "_get_reward",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze._is_over": {
            "name": "_is_over",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze.get_transitions": {
            "name": "get_transitions",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze.get_goal_state": {
            "name": "get_goal_state",
            "location": 61,
            "return": [
                "cmk.utils.type_defs.UserId",
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze._calculate_transitions": {
            "name": "_calculate_transitions",
            "location": 64,
            "return": [
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/rotating_maze.py": {
        "RotatingMaze.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "RotatingMaze.reset": {
            "name": "reset",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingMaze.step": {
            "name": "step",
            "location": 33,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RotatingMaze.render": {
            "name": "render",
            "location": 45,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "RotatingMaze._observe": {
            "name": "_observe",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingMaze._get_reward": {
            "name": "_get_reward",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingMaze._is_over": {
            "name": "_is_over",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/__init__.py": {},
    "openai-envs-master/gym_maze/common/maze_observation_space.py": {
        "MazeObservationSpace.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "float",
                    "Collection[\"Issue\"]",
                    "List[numpy.array]"
                ]
            }
        },
        "MazeObservationSpace.seed": {
            "name": "seed",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MazeObservationSpace.sample": {
            "name": "sample",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeObservationSpace.np_random": {
            "name": "np_random",
            "location": 24,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeObservationSpace.contains": {
            "name": "contains",
            "location": 27,
            "return": [
                "List[str]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Union[numpy.ndarray, List[numpy.ndarray]]",
                    "Iterable[Iterable[float]]",
                    "numpy.ndarray"
                ]
            }
        },
        "MazeObservationSpace.to_jsonable": {
            "name": "to_jsonable",
            "location": 31,
            "return": [
                "Type[Any]",
                "Optional[str]",
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "sample_n": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "MazeObservationSpace.from_jsonable": {
            "name": "from_jsonable",
            "location": 34,
            "return": [
                "str",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "sample_n": [
                    "int",
                    "T",
                    "float"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/common/maze_renderer.py": {
        "render": {
            "name": "render",
            "location": 7,
            "return": [],
            "arguments": {
                "out": [],
                "board": []
            }
        },
        "_render_element": {
            "name": "_render_element",
            "location": 16,
            "return": [],
            "arguments": {
                "el": []
            }
        }
    },
    "openai-envs-master/gym_maze/common/maze_utils.py": {
        "get_possible_insertion_coordinates": {
            "name": "get_possible_insertion_coordinates",
            "location": 8,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "matrix": [
                    "str"
                ]
            }
        },
        "get_animat_xy": {
            "name": "get_animat_xy",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "matrix": [
                    "str",
                    "List[int]",
                    "Union[str, int]"
                ]
            }
        },
        "get_reward_xy": {
            "name": "get_reward_xy",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "matrix": [
                    "str",
                    "bool"
                ]
            }
        },
        "adjacent_cell_values": {
            "name": "adjacent_cell_values",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "matrix": [
                    "float",
                    "int"
                ],
                "x": [
                    "int",
                    "float",
                    "Union[int, float, str]",
                    "Union[str, float]"
                ],
                "y": [
                    "float",
                    "numpy.ndarray",
                    "gluonts.model.common.Tensor"
                ]
            }
        },
        "get_possible_neighbour_cords": {
            "name": "get_possible_neighbour_cords",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "pos_x": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "Union[int, float]",
                    "bool",
                    "float"
                ],
                "pos_y": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "Union[int, float]",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/common/__init__.py": {},
    "openai-envs-master/gym_maze/envs/Maze4.py": {
        "Maze4.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/Maze5.py": {
        "Maze5.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/Maze6.py": {
        "Maze6.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/Maze7.py": {
        "Maze7.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/MazeF1.py": {
        "MazeF1.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/MazeF2.py": {
        "MazeF2.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/MazeF3.py": {
        "MazeF3.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/MazeF4.py": {
        "MazeF4.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/MazeT2.py": {
        "MazeT2.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/MazeT3.py": {
        "MazeT3.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/MazeT4.py": {
        "MazeT4.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/rotating_maze_envs.py": {
        "Maze228.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Maze252.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Maze288.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Maze324.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/envs/__init__.py": {},
    "openai-envs-master/gym_maze/internal/abstract_maze.py": {
        "AbstractMaze.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AbstractMaze.agent_position": {
            "name": "agent_position",
            "location": 16,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMaze.is_done": {
            "name": "is_done",
            "location": 19,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractMaze.perception": {
            "name": "perception",
            "location": 22,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "Optional[Union[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "cords": [
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "AbstractMaze.insert_agent": {
            "name": "insert_agent",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cords": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "AbstractMaze.is_wall": {
            "name": "is_wall",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cords": [
                    "Optional[int]",
                    "Optional[Tuple[int, int]]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "AbstractMaze.is_path": {
            "name": "is_path",
            "location": 43,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "cords": [
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/internal/maze_impl.py": {
        "find_action_by_direction": {
            "name": "find_action_by_direction",
            "location": 22,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "direction": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "MazeImpl.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "MazeImpl.is_done": {
            "name": "is_done",
            "location": 35,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeImpl.move": {
            "name": "move",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "type"
                ]
            }
        },
        "MazeImpl.get_goal_state": {
            "name": "get_goal_state",
            "location": 80,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeImpl.move._can_move": {
            "name": "_can_move",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "el": [
                    "int",
                    "str",
                    "dict",
                    "Union[int, str]"
                ]
            }
        },
        "MazeImpl.get_goal_state.adjust": {
            "name": "adjust",
            "location": 87,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "p": [
                    "allennlp.common.util.JsonDict",
                    "Sequence[int]",
                    "list",
                    "List[dict]",
                    "Callable"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/internal/rotating_maze_impl.py": {
        "RotatingMazeImpl.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "RotatingMazeImpl.perception": {
            "name": "perception",
            "location": 17,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "cords": [
                    "int",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "RotatingMazeImpl.turn_left": {
            "name": "turn_left",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingMazeImpl.turn_right": {
            "name": "turn_right",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingMazeImpl.step_ahead": {
            "name": "step_ahead",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingMazeImpl.is_done": {
            "name": "is_done",
            "location": 50,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/internal/__init__.py": {},
    "openai-envs-master/gym_maze/tests/test_maze.py": {
        "TestMaze.test_should_return_reward_state": {
            "name": "test_should_return_reward_state",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_env_name": [
                    "str"
                ],
                "_goal": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestMaze.test_should_return_goal_state": {
            "name": "test_should_return_goal_state",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_env_name": [
                    "str",
                    "numpy.ndarray"
                ],
                "_xy": [
                    "str",
                    "int",
                    "Dict[Tuple[str, str], int]"
                ],
                "_goal_state": [
                    "str",
                    "int"
                ]
            }
        },
        "TestMaze.test_should_reset_the_environment": {
            "name": "test_should_reset_the_environment",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaze.test_should_get_correct_transitions": {
            "name": "test_should_get_correct_transitions",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaze.test_should_calculate_number_of_transitions": {
            "name": "test_should_calculate_number_of_transitions",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_env_name": [
                    "str",
                    "bool"
                ],
                "_c": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/tests/test_maze_utils.py": {
        "TestMazeUtils.matrix": {
            "name": "matrix",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMazeUtils.test_should_get_insertion_coordinates": {
            "name": "test_should_get_insertion_coordinates",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "str"
                ]
            }
        },
        "TestMazeUtils.test_should_return_reward_xy": {
            "name": "test_should_return_reward_xy",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "Callable"
                ]
            }
        },
        "TestMazeUtils.test_should_get_perception": {
            "name": "test_should_get_perception",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_cords": [
                    "str",
                    "int"
                ],
                "_p": [
                    "str",
                    "int"
                ],
                "matrix": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/tests/test_rotating_maze.py": {
        "TestRotatingMaze.test_should_have_proper_terminal_states": {
            "name": "test_should_have_proper_terminal_states",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_env_name": [
                    "str"
                ],
                "_count": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "TestRotatingMaze.test_should_reset_the_environment": {
            "name": "test_should_reset_the_environment",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotatingMaze.test_should_calculate_transitions": {
            "name": "test_should_calculate_transitions",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_env_name": [
                    "str"
                ],
                "_count": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/tests/test_rotating_maze_impl.py": {
        "TestAbstractRotatingMazeImpl.maze": {
            "name": "maze",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractRotatingMazeImpl.test_should_initialize": {
            "name": "test_should_initialize",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maze": []
            }
        },
        "TestAbstractRotatingMazeImpl.test_should_insert_agent": {
            "name": "test_should_insert_agent",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maze": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAbstractRotatingMazeImpl.test_should_get_perception": {
            "name": "test_should_get_perception",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_xy": [
                    "Iterable[numpy.dtype]",
                    "str"
                ],
                "_p": [
                    "Iterable[numpy.dtype]",
                    "str"
                ],
                "maze": [
                    "Iterable[numpy.dtype]",
                    "str"
                ]
            }
        },
        "TestAbstractRotatingMazeImpl.test_agent_should_turn_left": {
            "name": "test_agent_should_turn_left",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maze": [
                    "str",
                    "common.ComponentFactory"
                ]
            }
        },
        "TestAbstractRotatingMazeImpl.test_agent_should_turn_right": {
            "name": "test_agent_should_turn_right",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maze": [
                    "str",
                    "common.ComponentFactory"
                ]
            }
        },
        "TestAbstractRotatingMazeImpl.test_should_step_ahead": {
            "name": "test_should_step_ahead",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maze": [
                    "Set[int]"
                ]
            }
        },
        "TestAbstractRotatingMazeImpl.test_should_get_reward": {
            "name": "test_should_get_reward",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maze": []
            }
        },
        "TestAbstractRotatingMazeImpl.test_should_get_correct_perceptions": {
            "name": "test_should_get_correct_perceptions",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maze": [
                    "Set[int]",
                    "int"
                ]
            }
        },
        "TestAbstractRotatingMazeImpl.test_should_remain_in_position_when_hitting_wall": {
            "name": "test_should_remain_in_position_when_hitting_wall",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maze": [
                    "Set[int]"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/tests/test_utils.py": {
        "TestUtils.test_should_calculate_transitions": {
            "name": "test_should_calculate_transitions",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_maze/tests/__init__.py": {},
    "openai-envs-master/gym_maze/utils/rotating_utils.py": {
        "get_all_transitions": {
            "name": "get_all_transitions",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "matrix": [
                    "bool",
                    "int",
                    "str",
                    "BaseException",
                    "Optional[int]"
                ]
            }
        },
        "_get_step_transitions": {
            "name": "_get_step_transitions",
            "location": 38,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "matrix": [
                    "str",
                    "bool",
                    "float",
                    "rotkehlchen.chain.ethereum.manager.EthereumManager",
                    "int"
                ]
            }
        },
        "_get_rotation_transitions": {
            "name": "_get_rotation_transitions",
            "location": 53,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "matrix": [
                    "str",
                    "int",
                    "Hashable",
                    "Optional[bool]"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/utils/utils.py": {
        "get_all_possible_transitions": {
            "name": "get_all_possible_transitions",
            "location": 11,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "maze": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_create_graph": {
            "name": "_create_graph",
            "location": 36,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "env": [
                    "str"
                ]
            }
        },
        "distinguish_direction": {
            "name": "distinguish_direction",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "openai-envs-master/gym_maze/utils/__init__.py": {},
    "openai-envs-master/gym_mountain_car/EnergyMountainCar.py": {
        "EnergyMountainCar.step": {
            "name": "step",
            "location": 7,
            "return": [
                "str",
                "float",
                "int",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "openai-envs-master/gym_mountain_car/__init__.py": {},
    "openai-envs-master/gym_mountain_car/tests/test_energy_mountain_car.py": {
        "TestEnergyMountainCar.test_should_initialize": {
            "name": "test_should_initialize",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnergyMountainCar.test_should_make_move": {
            "name": "test_should_make_move",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_mountain_car/tests/__init__.py": {},
    "openai-envs-master/gym_multiplexer/boolean_multiplexer.py": {
        "BooleanMultiplexer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control_bits": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "BooleanMultiplexer._generate_state": {
            "name": "_generate_state",
            "location": 15,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanMultiplexer._internal_state": {
            "name": "_internal_state",
            "location": 19,
            "return": [
                "List[Dict]",
                "List[str]",
                "list",
                "Tuple[int]",
                "List[int]",
                "Union[str, List[Any]]",
                "List[float]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_multiplexer/multiplexer.py": {
        "Multiplexer._generate_state": {
            "name": "_generate_state",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Multiplexer._internal_state": {
            "name": "_internal_state",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Multiplexer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control_bits": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Multiplexer.reset": {
            "name": "reset",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Multiplexer.step": {
            "name": "step",
            "location": 28,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Multiplexer.render": {
            "name": "render",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "Type[\"SerializationDialect\"]",
                    "int",
                    "bool"
                ]
            }
        },
        "Multiplexer._observation": {
            "name": "_observation",
            "location": 46,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Multiplexer._correct_answer": {
            "name": "_correct_answer",
            "location": 52,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Multiplexer._observation_string_length": {
            "name": "_observation_string_length",
            "location": 57,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_multiplexer/real_multiplexer.py": {
        "RealMultiplexer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control_bits": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "threshold": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RealMultiplexer._generate_state": {
            "name": "_generate_state",
            "location": 19,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RealMultiplexer._internal_state": {
            "name": "_internal_state",
            "location": 23,
            "return": [
                "List[Dict]",
                "List[str]",
                "Tuple[int]",
                "list",
                "List[int]",
                "Union[List[float], List[int]]",
                "List[List[Any]]",
                "Union[str, List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_multiplexer/__init__.py": {},
    "openai-envs-master/gym_multiplexer/tests/test_boolean_multiplexer.py": {
        "TestBooleanMultiplexer.test_should_initialize_multiplexer": {
            "name": "test_should_initialize_multiplexer",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanMultiplexer.test_should_return_observation_when_reset": {
            "name": "test_should_return_observation_when_reset",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanMultiplexer.test_should_render_state": {
            "name": "test_should_render_state",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanMultiplexer.test_should_execute_step": {
            "name": "test_should_execute_step",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanMultiplexer.test_execute_multiple_steps_and_keep_constant_perception_length": {
            "name": "test_execute_multiple_steps_and_keep_constant_perception_length",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanMultiplexer._random_action": {
            "name": "_random_action",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "openai-envs-master/gym_multiplexer/tests/test_real_multiplexer.py": {
        "TestRealMultiplexer.test_should_initialize_real_mpx": {
            "name": "test_should_initialize_real_mpx",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_env_name": [
                    "str"
                ],
                "_obs_space": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "TestRealMultiplexer.test_should_return_observation_when_reset": {
            "name": "test_should_return_observation_when_reset",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealMultiplexer.test_should_execute_step": {
            "name": "test_should_execute_step",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealMultiplexer.test_execute_multiple_steps_and_keep_constant_perception_length": {
            "name": "test_execute_multiple_steps_and_keep_constant_perception_length",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealMultiplexer._random_action": {
            "name": "_random_action",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "openai-envs-master/gym_multiplexer/tests/test_utils.py": {
        "TestUtils.test_should_calculate_correct_answer_for_3bit_multiplexer": {
            "name": "test_should_calculate_correct_answer_for_3bit_multiplexer",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_should_calculate_correct_answer_for_6bit_multiplexer": {
            "name": "test_should_calculate_correct_answer_for_6bit_multiplexer",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.test_should_calculate_correct_answer_for_11bit_multiplexer": {
            "name": "test_should_calculate_correct_answer_for_11bit_multiplexer",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_multiplexer/tests/__init__.py": {},
    "openai-envs-master/gym_multiplexer/utils/utils.py": {
        "get_correct_answer": {
            "name": "get_correct_answer",
            "location": 4,
            "return": [
                "bytes",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "bitstring": [
                    "Union[str, IO]",
                    "bool",
                    "str",
                    "IO[str]"
                ],
                "control_bits": [
                    "list",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "openai-envs-master/gym_multiplexer/utils/__init__.py": {},
    "openai-envs-master/gym_taxi_goal/taxi_goal.py": {
        "TaxiGoalEnv.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxiGoalEnv.get_goal_state": {
            "name": "get_goal_state",
            "location": 15,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_taxi_goal/__init__.py": {},
    "openai-envs-master/gym_taxi_goal/tests/test_taxi_goal.py": {
        "TestTaxiGoal.test_should_return_goal_state": {
            "name": "test_should_return_goal_state",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_taxi_x": [
                    "str",
                    "bytes",
                    "int"
                ],
                "_taxi_y": [
                    "str",
                    "bytes",
                    "int"
                ],
                "_passloc": [
                    "str",
                    "bytes",
                    "int"
                ],
                "_destidx": [
                    "str",
                    "bytes",
                    "int"
                ],
                "_goal_x": [],
                "_goal_y": [],
                "_goal_pass": [],
                "_goal_dest": []
            }
        }
    },
    "openai-envs-master/gym_taxi_goal/tests/__init__.py": {},
    "openai-envs-master/gym_woods/woods.py": {
        "Woods.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "int",
                    "bool",
                    "Optional[Union[int, float]]",
                    "Optional[int]"
                ]
            }
        },
        "Woods.possible_insertion_cords": {
            "name": "possible_insertion_cords",
            "location": 26,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Woods.reward_cords": {
            "name": "reward_cords",
            "location": 31,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Woods.perception": {
            "name": "perception",
            "location": 35,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "y": [
                    "numpy.ndarray"
                ]
            }
        },
        "Woods.is_reward": {
            "name": "is_reward",
            "location": 57,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "float",
                    "List[int]",
                    "type"
                ],
                "y": [
                    "str",
                    "int",
                    "float",
                    "List[int]",
                    "type"
                ]
            }
        }
    },
    "openai-envs-master/gym_woods/__init__.py": {},
    "openai-envs-master/gym_woods/envs/Woods1.py": {
        "Woods1.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_woods/envs/Woods100.py": {
        "Woods100.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_woods/envs/Woods14.py": {
        "Woods14.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_woods/envs/Woods2.py": {
        "Woods2.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_woods/envs/woods_env.py": {
        "WoodsObservationSpace.seed": {
            "name": "seed",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "WoodsObservationSpace.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "WoodsObservationSpace.sample": {
            "name": "sample",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WoodsObservationSpace.contains": {
            "name": "contains",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AbstractWoods.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": []
            }
        },
        "AbstractWoods.reset": {
            "name": "reset",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractWoods.step": {
            "name": "step",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "AbstractWoods.render": {
            "name": "render",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "AbstractWoods._take_action": {
            "name": "_take_action",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "action": [],
                "observation": []
            }
        },
        "AbstractWoods._insert_animat": {
            "name": "_insert_animat",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractWoods._observe": {
            "name": "_observe",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractWoods._perception": {
            "name": "_perception",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "posx": [],
                "posy": []
            }
        },
        "AbstractWoods._get_reward": {
            "name": "_get_reward",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractWoods._is_over": {
            "name": "_is_over",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractWoods.is_wall": {
            "name": "is_wall",
            "location": 181,
            "return": [],
            "arguments": {
                "obs": []
            }
        },
        "AbstractWoods._render": {
            "name": "_render",
            "location": 185,
            "return": [],
            "arguments": {
                "el": []
            }
        },
        "AbstractWoods._state_action": {
            "name": "_state_action",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_woods/envs/__init__.py": {},
    "openai-envs-master/gym_woods/tests/test_woods.py": {
        "TestWoods.test_should_calculate_boundaries": {
            "name": "test_should_calculate_boundaries",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWoods.test_should_get_insertion_coordinates": {
            "name": "test_should_get_insertion_coordinates",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWoods.test_should_raise_error_with_invalid_cords": {
            "name": "test_should_raise_error_with_invalid_cords",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWoods.test_should_calculate_perception": {
            "name": "test_should_calculate_perception",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWoods.test_should_detect_reward": {
            "name": "test_should_detect_reward",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "openai-envs-master/gym_woods/tests/test_woods_envs.py": {
        "TestWoodsEnvs.test_should_initialize": {
            "name": "test_should_initialize",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_env_name": [
                    "str"
                ]
            }
        },
        "TestWoodsEnvs.test_should_reset": {
            "name": "test_should_reset",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_env_name": [
                    "str"
                ]
            }
        },
        "TestWoodsEnvs.test_should_make_toroidal_move": {
            "name": "test_should_make_toroidal_move",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_env_name": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "TestWoodsEnvs.test_should_get_all_states_and_actions": {
            "name": "test_should_get_all_states_and_actions",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWoodsEnvs.test_should_make_toroidal_move._place_animat": {
            "name": "_place_animat",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "float",
                    "int",
                    "Type",
                    "bool"
                ],
                "x": [
                    "int",
                    "List[int]"
                ],
                "y": [
                    "Iterable[dict]",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "TestWoodsEnvs.test_should_make_toroidal_move._assert_cords": {
            "name": "_assert_cords",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "Optional[str]",
                    "float",
                    "list",
                    "bytes"
                ],
                "x1": [
                    "str",
                    "Callable",
                    "Dict[int, int]",
                    "int"
                ],
                "y1": []
            }
        },
        "TestWoodsEnvs.test_should_make_toroidal_move._assert_not_done": {
            "name": "_assert_not_done",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "reward": [
                    "bool",
                    "list",
                    "int",
                    "Optional[T]"
                ],
                "done": [
                    "str"
                ]
            }
        }
    },
    "openai-envs-master/gym_woods/tests/__init__.py": {},
    "openai-envs-master/gym_yacs_simple_maze/maze.py": {
        "SimpleMaze.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMaze.reset": {
            "name": "reset",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMaze.step": {
            "name": "step",
            "location": 58,
            "return": [
                "str",
                "int",
                "Tuple[Tuple[int, Any]]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "float"
                ]
            }
        },
        "SimpleMaze._current_perception": {
            "name": "_current_perception",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleMaze._perception": {
            "name": "_perception",
            "location": 73,
            "return": [
                "str",
                "List[Dict]",
                "list"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "Optional[Any]",
                    "Union[str, Tuple[Any]]",
                    "List[int]",
                    "int",
                    "Union[int, List[int]]"
                ]
            }
        },
        "SimpleMaze._state_id": {
            "name": "_state_id",
            "location": 76,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[str]",
                "Optional[List[Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "perception": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Callable"
                ]
            }
        },
        "SimpleMaze.render": {
            "name": "render",
            "location": 81,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "openai-envs-master/gym_yacs_simple_maze/__init__.py": {},
    "openai-envs-master/gym_yacs_simple_maze/tests/test_maze.py": {
        "TestSimpleMaze.env": {
            "name": "env",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleMaze.test_should_initialize": {
            "name": "test_should_initialize",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "gym.Env",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestSimpleMaze.test_should_return_desired_perception": {
            "name": "test_should_return_desired_perception",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "TestSimpleMaze.test_should_get_state_id": {
            "name": "test_should_get_state_id",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_p": [
                    "Dict[str, List[str]]",
                    "List[str]"
                ],
                "_s": [
                    "Set[str]"
                ],
                "env": [
                    "Set[str]"
                ]
            }
        },
        "TestSimpleMaze.test_should_reset_state": {
            "name": "test_should_reset_state",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ]
            }
        },
        "TestSimpleMaze.test_should_perform_happy_path": {
            "name": "test_should_perform_happy_path",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Tuple[str, Any]",
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "TestSimpleMaze.test_should_ignore_hitting_the_wall": {
            "name": "test_should_ignore_hitting_the_wall",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        }
    },
    "openai-envs-master/gym_yacs_simple_maze/tests/__init__.py": {}
}
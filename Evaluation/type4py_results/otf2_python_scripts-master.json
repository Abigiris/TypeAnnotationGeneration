{
    "otf2_python_scripts-master/otf2_access_stats/setup.py": {},
    "otf2_python_scripts-master/otf2_access_stats/otf2_access_stats/create_access_counters.py": {},
    "otf2_python_scripts-master/otf2_access_stats/otf2_access_stats/metricdict.py": {
        "MetricDict.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trace_writer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MetricDict._get_metric_class": {
            "name": "_get_metric_class",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str",
                    "Optional[List[str]]",
                    "int"
                ],
                "unit": [
                    "str",
                    "int"
                ],
                "value_type": [
                    "str",
                    "int"
                ]
            }
        },
        "MetricDict._get_metric_location": {
            "name": "_get_metric_location",
            "location": 26,
            "return": [
                "str",
                "Callable",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "location_scope": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[int, int]"
                ],
                "metric_key": [
                    "str",
                    "Dict[Hashable, Any]",
                    "bool"
                ],
                "metric_class": [
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "MetricDict.get": {
            "name": "get",
            "location": 43,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "location_scope": [
                    "str",
                    "Optional[bool]",
                    "Optional[bytes]",
                    "bytes"
                ],
                "metric_name": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "metric_key": [
                    "str",
                    "Optional[bool]",
                    "Optional[bytes]",
                    "bytes"
                ],
                "unit": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "value_type": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "otf2_python_scripts-master/otf2_access_stats/otf2_access_stats/spacecollection.py": {
        "AccessType.get_by_name": {
            "name": "get_by_name",
            "location": 23,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type['Declared']",
                    "Dict[str, Any]"
                ],
                "type_name": [
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "AccessType.contains": {
            "name": "contains",
            "location": 31,
            "return": [
                "List[str]",
                "bool",
                "Iterator[\"pytesmark.structures.ParameterSet[CaseInfo]\"]",
                "Union[str, Sequence[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "type_name": [
                    "str",
                    "int"
                ]
            }
        },
        "AccessSequence.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessSequence.add": {
            "name": "add",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "int"
                ],
                "access": [
                    "int"
                ]
            }
        },
        "AccessSequence.get": {
            "name": "get",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessSequence.__len__": {
            "name": "__len__",
            "location": 52,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessSequence.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddressSpace._init_by_attributes": {
            "name": "_init_by_attributes",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "str",
                    "int",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "AddressSpace._init_by_properties": {
            "name": "_init_by_properties",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "properties": [
                    "dict",
                    "bool",
                    "Iterable[str]",
                    "Type[T]",
                    "Iterable",
                    "str"
                ]
            }
        },
        "AddressSpace.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Dict]"
                ],
                "properties": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "AddressSpace.add_access_on_location": {
            "name": "add_access_on_location",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "Dict[Any, list]"
                ],
                "access": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "Dict[Any, list]"
                ],
                "location": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "Dict[Any, list]"
                ]
            }
        },
        "AddressSpace.get_all_accesses": {
            "name": "get_all_accesses",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddressSpace.initialized": {
            "name": "initialized",
            "location": 107,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddressSpace.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "otf2_python_scripts-master/otf2_access_stats/otf2_access_stats/spacestatistics.py": {
        "MemoryAccessStatistics.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryAccessStatistics.add_mapped_space": {
            "name": "add_mapped_space",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "space": [
                    "str",
                    "bool"
                ]
            }
        },
        "MemoryAccessStatistics.add_access": {
            "name": "add_access",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "location": [
                    "str",
                    "Union[float, str]",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "MemoryAccessStatistics.create_access_metrics": {
            "name": "create_access_metrics",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trace_writer": [
                    "List[str]",
                    "dict"
                ]
            }
        },
        "MemoryAccessStatistics.create_counter_metrics": {
            "name": "create_counter_metrics",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "trace_writer": [
                    "dict",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "MemoryAccessStatistics.get_space_stats": {
            "name": "get_space_stats",
            "location": 81,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryAccessStatistics.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryAccessStatistics.create_counter_metrics._get_counter": {
            "name": "_get_counter",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "async_metrics": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Iterable[Any]]",
                    "Type[Any]"
                ],
                "source": [
                    "str",
                    "int"
                ],
                "prefix": [
                    "str",
                    "int"
                ],
                "location": [
                    "str",
                    "Callable",
                    "bool",
                    "bytes",
                    "int",
                    "dict"
                ],
                "unit": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, Iterable[Any]]",
                    "Type[Any]"
                ]
            }
        }
    },
    "otf2_python_scripts-master/otf2_access_stats/tests/create_trace.py": {
        "t": {
            "name": "t",
            "location": 17,
            "return": [
                "bool",
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        }
    },
    "otf2_python_scripts-master/otf2_iostats/otf2_iostats.py": {
        "is_posix": {
            "name": "is_posix",
            "location": 41,
            "return": [
                "List[str]",
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "identification": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "print_tree": {
            "name": "print_tree",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": []
            }
        },
        "get_interval": {
            "name": "get_interval",
            "location": 48,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "timestamp": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "tree": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "generate_intervals": {
            "name": "generate_intervals",
            "location": 53,
            "return": [
                "builtins.tuple"
            ],
            "arguments": {
                "trace": [
                    "int",
                    "Callable",
                    "str"
                ],
                "clock": [
                    "str",
                    "int"
                ],
                "length": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "parse_proc_stats": {
            "name": "parse_proc_stats",
            "location": 60,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "io_stats": [
                    "dict",
                    "int",
                    "Iterable[str]",
                    "Sequence[MutableSet[int]]",
                    "str"
                ]
            }
        },
        "store_stats": {
            "name": "store_stats",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "io_stats": [
                    "str"
                ],
                "path": [
                    "str",
                    "argparse.Namespace"
                ]
            }
        },
        "get_io_operation_count": {
            "name": "get_io_operation_count",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "trace_file": [
                    "str",
                    "Optional[str]"
                ],
                "interval_length": [
                    "float",
                    "int",
                    "str"
                ],
                "step_count": [
                    "int",
                    "Dict[str, int]",
                    "bytes",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ClockConverter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "clock_properties": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "ClockConverter.to_usec": {
            "name": "to_usec",
            "location": 18,
            "return": [
                "int",
                "Callable[..., Awaitable]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "ticks": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[BaseException]",
                    "type",
                    "float"
                ]
            }
        },
        "ClockConverter.to_sec": {
            "name": "to_sec",
            "location": 21,
            "return": [
                "int",
                "Callable[..., Awaitable]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "ticks": [
                    "bool",
                    "int",
                    "str",
                    "Optional[bool]",
                    "List[str]",
                    "Optional[BaseException]",
                    "type",
                    "float"
                ]
            }
        },
        "ClockConverter.to_ticks": {
            "name": "to_ticks",
            "location": 24,
            "return": [
                "bool",
                "argparse.Namespace",
                "set",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "secs": [
                    "Callable[[dict], None]",
                    "bool",
                    "type"
                ]
            }
        },
        "IoStat.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IoStat.incReadCount": {
            "name": "incReadCount",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IoStat.incWriteCount": {
            "name": "incWriteCount",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IoStat.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "otf2_python_scripts-master/otf2_iostats/setup.py": {},
    "otf2_python_scripts-master/otf2_trace_merger/combineTraces.py": {
        "gather_traces": {
            "name": "gather_traces",
            "location": 15,
            "return": [],
            "arguments": {
                "trace_folder": []
            }
        },
        "_update": {
            "name": "_update",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "old_key": [],
                "obj": []
            }
        },
        "getSortedEvents": {
            "name": "getSortedEvents",
            "location": 34,
            "return": [],
            "arguments": {
                "trace_readers": [],
                "fixup_time": []
            }
        },
        "find_by_name": {
            "name": "find_by_name",
            "location": 52,
            "return": [],
            "arguments": {
                "name": [],
                "iterable": []
            }
        },
        "get_properties": {
            "name": "get_properties",
            "location": 55,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "is_trivial_type": {
            "name": "is_trivial_type",
            "location": 65,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "register_translated_obj": {
            "name": "register_translated_obj",
            "location": 76,
            "return": [],
            "arguments": {
                "orig_obj": [],
                "new_obj": [],
                "dest": []
            }
        },
        "get_translated_obj": {
            "name": "get_translated_obj",
            "location": 85,
            "return": [],
            "arguments": {
                "orig_obj": [],
                "dest": []
            }
        },
        "clone_obj": {
            "name": "clone_obj",
            "location": 91,
            "return": [],
            "arguments": {
                "obj": [],
                "dest": [],
                "do_register": []
            }
        },
        "clone_event": {
            "name": "clone_event",
            "location": 116,
            "return": [],
            "arguments": {
                "obj": [],
                "dest": []
            }
        },
        "clone_or_register": {
            "name": "clone_or_register",
            "location": 119,
            "return": [],
            "arguments": {
                "obj": [],
                "new_obj": [],
                "dest": []
            }
        },
        "event_name": {
            "name": "event_name",
            "location": 127,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "prettify_names": {
            "name": "prettify_names",
            "location": 277,
            "return": [],
            "arguments": {
                "trace_readers": [],
                "trace_files": [],
                "output_trace": []
            }
        },
        "combine_traces": {
            "name": "combine_traces",
            "location": 305,
            "return": [],
            "arguments": {
                "trace_files": [],
                "out_folder": []
            }
        },
        "main": {
            "name": "main",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "Period.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "start_time": [],
                "start_offset": [],
                "end_time": [],
                "end_offset": []
            }
        },
        "Period.interpolate": {
            "name": "interpolate",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "time": []
            }
        },
        "LocationEventWriter.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "archive_writer": [],
                "location": []
            }
        },
        "LocationEventWriter.update_timestamps": {
            "name": "update_timestamps",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "time": []
            }
        },
        "LocationEventWriter.add_clock_offset": {
            "name": "add_clock_offset",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "offset": []
            }
        },
        "LocationEventWriter.interpolate_time": {
            "name": "interpolate_time",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": []
            }
        },
        "LocationEventWriter.update_archive_time": {
            "name": "update_archive_time",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "archive": []
            }
        },
        "LocationEventWriter.write": {
            "name": "write",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "LocationEventWriter.get_min_offset": {
            "name": "get_min_offset",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocationEventWriter.finalize_periods": {
            "name": "finalize_periods",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "LocationEventWriter.write_definitions": {
            "name": "write_definitions",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "archive": []
            }
        },
        "EventWriter.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "writer": []
            }
        },
        "EventWriter.__enter__": {
            "name": "__enter__",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventWriter.__exit__": {
            "name": "__exit__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "tb": []
            }
        },
        "EventWriter._get_writer": {
            "name": "_get_writer",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "location": []
            }
        },
        "EventWriter.write": {
            "name": "write",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "location": [],
                "event": []
            }
        },
        "EventWriter.clock_offset": {
            "name": "clock_offset",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "location": [],
                "timestamp": [],
                "offset": []
            }
        },
        "EventWriter.close": {
            "name": "close",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeTranslater.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "target_resolution": [],
                "target_offset": []
            }
        },
        "TimeTranslater.translate": {
            "name": "translate",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "time": [],
                "reader": []
            }
        },
        "TimeTranslater.translate_resolution": {
            "name": "translate_resolution",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "time": [],
                "timer_resolution": []
            }
        }
    },
    "otf2_python_scripts-master/otf2_trace_merger/setup.py": {}
}
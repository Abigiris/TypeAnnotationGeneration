{
    "pairpair-master/pairpair.py": {},
    "pairpair-master/server.py": {},
    "pairpair-master/database/migrations/init.py": {
        "create_pairs_table": {
            "name": "create_pairs_table",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "cur": [
                    "sqlite3.Connection",
                    "str",
                    "Type[T]"
                ]
            }
        }
    },
    "pairpair-master/src/__init__.py": {},
    "pairpair-master/src/application/usecase/pair/pair.py": {
        "NextPairsByHistory.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs_repository": [
                    "int",
                    "bool",
                    "float"
                ],
                "evaluation_service": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "NextPairsByHistory.run": {
            "name": "run",
            "location": 17,
            "return": [
                "Awaitable",
                "Optional[Iterable[str]]",
                "tuple",
                "bytearray",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "members": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "SavePairsHistory.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pairs_repository": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SavePairsHistory.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pairpair-master/src/domain/__init__.py": {},
    "pairpair-master/src/domain/model/__init__.py": {},
    "pairpair-master/src/domain/model/pair/history.py": {
        "PairsHistory.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "int",
                    "bool",
                    "float"
                ],
                "pairs": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PairsHistoryRepository.next_identity": {
            "name": "next_identity",
            "location": 24,
            "return": [
                "PairsHistoryId"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairsHistoryRepository.save": {
            "name": "save",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs_history": [
                    "bool",
                    "dict",
                    "tracki.src.domain.entities.Shift",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "PairsHistoryRepository.load": {
            "name": "load",
            "location": 32,
            "return": [
                "typing.List[src.domain.model.pair.pair.Pairs]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationService.evaluate": {
            "name": "evaluate",
            "location": 37,
            "return": [
                "str",
                "BaseException",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "history": [
                    "int",
                    "List[str]"
                ],
                "members": [
                    "int",
                    "str",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "EvaluationService.pair_must_have_only_either_member_of_last_pair": {
            "name": "pair_must_have_only_either_member_of_last_pair",
            "location": 64,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "last_pairs": [
                    "src.evalg.encoding.BinaryTree",
                    "Tuple[int]"
                ],
                "pair_trees": [
                    "src.evalg.encoding.BinaryTree",
                    "Tuple[int]"
                ]
            }
        },
        "EvaluationService.member_is_must_not_in_same_position_at_three_times": {
            "name": "member_is_must_not_in_same_position_at_three_times",
            "location": 81,
            "return": [
                "float",
                "List[str]",
                "List[int]",
                "int",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "history": [
                    "str",
                    "dict",
                    "List[model.objects.JUnitCommitReport]",
                    "List[str]"
                ],
                "possible_pairs": []
            }
        },
        "EvaluationService.pair_should_not_exist_same_pair_in_near_history": {
            "name": "pair_should_not_exist_same_pair_in_near_history",
            "location": 98,
            "return": [
                "tuple",
                "Tuple[int, int]",
                "bool",
                "List[str]",
                "float",
                "Optional[Iterable[str]]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "history": [
                    "float",
                    "str"
                ],
                "possible_pairs": [
                    "float",
                    "str"
                ]
            }
        },
        "EvaluationService.member_is_must_not_in_same_position_at_three_times.member_in_same_position_at_three_times": {
            "name": "member_in_same_position_at_three_times",
            "location": 87,
            "return": [
                "int",
                "List[int]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "pairs": [
                    "gluonts.model.common.Tensor",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pairpair-master/src/domain/model/pair/pair.py": {
        "Pair.__contains__": {
            "name": "__contains__",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "Pair.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pair.only_has_either": {
            "name": "only_has_either",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pair.to_dict": {
            "name": "to_dict",
            "location": 34,
            "return": [
                "str",
                "Sequence[str]",
                "Optional[List[str]]",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pair.from_dict": {
            "name": "from_dict",
            "location": 41,
            "return": [
                "Optional[str]",
                "List[str]",
                "Iterable[T]",
                "Callable[[T], bool]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Optional[str]]",
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "Optional[bytes]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Pairs.__iter__": {
            "name": "__iter__",
            "location": 54,
            "return": [
                "typing.Iterator[Pair]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pairs.__getitem__": {
            "name": "__getitem__",
            "location": 57,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "Optional[Union[str, Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "Pairs.__len__": {
            "name": "__len__",
            "location": 60,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pairs.__contains__": {
            "name": "__contains__",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "T",
                    "Type[object]",
                    "Iterable[T]",
                    "list"
                ]
            }
        },
        "Pairs.tail": {
            "name": "tail",
            "location": 68,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pairs.prepend": {
            "name": "prepend",
            "location": 71,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Pairs.merge": {
            "name": "merge",
            "location": 74,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Pairs.have_same": {
            "name": "have_same",
            "location": 77,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Pairs.to_list": {
            "name": "to_list",
            "location": 82,
            "return": [
                "List[Dict[str, Any]]",
                "str",
                "List[List[dict]]",
                "Dict[str, List[Any]]",
                "Tuple[List[Any], int]",
                "bool",
                "Dict[str, str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pairs.from_list": {
            "name": "from_list",
            "location": 86,
            "return": [
                "bool",
                "str",
                "Tuple[str, bool]",
                "OrderedDict"
            ],
            "arguments": {
                "list": [
                    "List[Dict[str, Any]]",
                    "float",
                    "dict"
                ]
            }
        },
        "Pairs.from_list2": {
            "name": "from_list2",
            "location": 90,
            "return": [
                "int",
                "Dict[str, int]",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "List[List[str]]",
                    "bool",
                    "Mapping[str, object]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "PairTree.fold": {
            "name": "fold",
            "location": 102,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairTree.possible_pairs": {
            "name": "possible_pairs",
            "location": 112,
            "return": [
                "bool",
                "str",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "trees": [
                    "dict",
                    "IO",
                    "Iterable[str]"
                ]
            }
        },
        "Members.__iter__": {
            "name": "__iter__",
            "location": 120,
            "return": [
                "typing.Iterator[Member]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Members.__len__": {
            "name": "__len__",
            "location": 123,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Members.remaining_members": {
            "name": "remaining_members",
            "location": 126,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Members.select_first_pairs": {
            "name": "select_first_pairs",
            "location": 129,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Members.combinations": {
            "name": "combinations",
            "location": 137,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Members.possible_pair": {
            "name": "possible_pair",
            "location": 151,
            "return": [
                "typing.List[Pairs]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Members.from_list": {
            "name": "from_list",
            "location": 155,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "List[Dict]",
                "Tuple[Tuple[int, int]]",
                "Set[str]"
            ],
            "arguments": {
                "data": [
                    "List[str]",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "pairpair-master/src/domain/model/pair/__init__.py": {},
    "pairpair-master/src/infrastructure/persistence/pair/inmemory.py": {
        "InMemoryPairsHistoryRepository.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryPairsHistoryRepository.next_identity": {
            "name": "next_identity",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryPairsHistoryRepository.load": {
            "name": "load",
            "location": 20,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "List[List[Any]]",
                "List[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryPairsHistoryRepository.save": {
            "name": "save",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs_history": [
                    "int",
                    "str"
                ]
            }
        },
        "InMemoryPairsHistoryRepository.flush": {
            "name": "flush",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pairpair-master/src/infrastructure/persistence/pair/sqlite3.py": {
        "Sqlite3PairsHistoryRepository.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sqlite3PairsHistoryRepository.__del__": {
            "name": "__del__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Sqlite3PairsHistoryRepository.next_identity": {
            "name": "next_identity",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sqlite3PairsHistoryRepository.save": {
            "name": "save",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairs_history": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Sqlite3PairsHistoryRepository.load": {
            "name": "load",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pairpair-master/src/infrastructure/serialize/protobuf/pair.py": {
        "ProtoBufPairSerializer.load_member": {
            "name": "load_member",
            "location": 8,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ProtoBufPairSerializer.load_pair": {
            "name": "load_pair",
            "location": 11,
            "return": [
                "bool",
                "int",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Tuple[str, int]",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ProtoBufPairSerializer.load_pairs": {
            "name": "load_pairs",
            "location": 17,
            "return": [
                "int",
                "float",
                "List[Dict[str, str]]",
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "resources.protobuf.pair_pb2.Pairs"
                ]
            }
        },
        "ProtoBufPairSerializer.load_members": {
            "name": "load_members",
            "location": 20,
            "return": [
                "int",
                "float",
                "List[Dict[str, str]]",
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ProtoBufPairSerializer.dump_member": {
            "name": "dump_member",
            "location": 23,
            "return": [
                "bool",
                "Dict[str, str]",
                "Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "member": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "ProtoBufPairSerializer.dump_pair": {
            "name": "dump_pair",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pair": []
            }
        },
        "ProtoBufPairSerializer.dump_pairs": {
            "name": "dump_pairs",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProtoBufPairSerializer.dump_possible_pairs": {
            "name": "dump_possible_pairs",
            "location": 36,
            "return": [
                "int",
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pairs_list": [
                    "list",
                    "float",
                    "List[float]",
                    "str",
                    "Union[int, float]",
                    "List[List[T]]"
                ]
            }
        }
    },
    "pairpair-master/src/interfaces/cli/pairpair.py": {
        "PairPair.save": {
            "name": "save",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairPair.next": {
            "name": "next",
            "location": 15,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pairpair-master/src/interfaces/grpc/pairpair.py": {
        "serve": {
            "name": "serve",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "PairService.SavePairsHistory": {
            "name": "SavePairsHistory",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "resources.protobuf.pair_pb2.Pairs",
                    "bool",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "context": [
                    "list",
                    "bool",
                    "grpc.ServicerContext"
                ]
            }
        },
        "PairService.NextPairsByHistory": {
            "name": "NextPairsByHistory",
            "location": 21,
            "return": [
                "str",
                "bool",
                "\"CollectionList\""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "resources.protobuf.pair_pb2.Pairs",
                    "bool",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "context": [
                    "grpc.ServicerContext",
                    "bool"
                ]
            }
        }
    },
    "pairpair-master/src/registry/domain.py": {
        "evaluation_service": {
            "name": "evaluation_service",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pairs_history_repository": {
            "name": "pairs_history_repository",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "pairpair-master/src/registry/usecase.py": {
        "next_pairs_by_history": {
            "name": "next_pairs_by_history",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "save_pairs_history": {
            "name": "save_pairs_history",
            "location": 10,
            "return": [
                "str",
                "Optional[str]",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "pairpair-master/tests/__init__.py": {},
    "pairpair-master/tests/application/__init__.py": {},
    "pairpair-master/tests/application/usecase/__init__.py": {},
    "pairpair-master/tests/application/usecase/pair/test_pair.py": {
        "NextPairsByHistoryTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NextPairsByHistoryTest.test_run": {
            "name": "test_run",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NextPairsByHistoryTest.test_run_with_history": {
            "name": "test_run_with_history",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SavePairsHistoryTest.setUp": {
            "name": "setUp",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SavePairsHistoryTest.test_run": {
            "name": "test_run",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pairpair-master/tests/application/usecase/pair/__init__.py": {},
    "pairpair-master/tests/domain/__init__.py": {},
    "pairpair-master/tests/domain/model/__init__.py": {},
    "pairpair-master/tests/domain/model/pair/test_pair.py": {
        "PairTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairTest.test_equals": {
            "name": "test_equals",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairTest.test_equals2": {
            "name": "test_equals2",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairTest.test_equals3": {
            "name": "test_equals3",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairsTest.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairsTest.test_getitem__pairs": {
            "name": "test_getitem__pairs",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairsTest.test_tail__pairs": {
            "name": "test_tail__pairs",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairsTest.test_tail__one_pairs": {
            "name": "test_tail__one_pairs",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairsTest.test_tail__empty_pairs": {
            "name": "test_tail__empty_pairs",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairsTest.test_in__pairs": {
            "name": "test_in__pairs",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairsTest.test_have_same__pairs": {
            "name": "test_have_same__pairs",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairsTest.test_have_same__pairs2": {
            "name": "test_have_same__pairs2",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairTreeTest.test_fold": {
            "name": "test_fold",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PairTreeTest.test_fold2": {
            "name": "test_fold2",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersTest.setUp": {
            "name": "setUp",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersTest.test_select_first_pairs": {
            "name": "test_select_first_pairs",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersTest.test_select_first_pairs_with_single_members": {
            "name": "test_select_first_pairs_with_single_members",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersTest.test_combinations": {
            "name": "test_combinations",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersTest.test_possible_pair": {
            "name": "test_possible_pair",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.setUp": {
            "name": "setUp",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_filter": {
            "name": "test_filter",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_filter2": {
            "name": "test_filter2",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_filter_and_empty": {
            "name": "test_filter_and_empty",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_position_filter": {
            "name": "test_position_filter",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_filter_same_pair": {
            "name": "test_filter_same_pair",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_filter_same_pair2": {
            "name": "test_filter_same_pair2",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_filter_same_pair3": {
            "name": "test_filter_same_pair3",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_evaluate": {
            "name": "test_evaluate",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_evaluate_twice": {
            "name": "test_evaluate_twice",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_evaluate_three_times": {
            "name": "test_evaluate_three_times",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_evaluate_four_times": {
            "name": "test_evaluate_four_times",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationServiceTest.test_evaluate_five_times": {
            "name": "test_evaluate_five_times",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pairpair-master/tests/domain/model/pair/__init__.py": {}
}
{
    "pandora-master/manage.py": {
        "Pandora.run": {
            "name": "run",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "Pandora.create_database": {
            "name": "create_database",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pandora.drop_database": {
            "name": "drop_database",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pandora.create_tables": {
            "name": "create_tables",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pandora.drop_tables": {
            "name": "drop_tables",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pandora.openapi_doc": {
            "name": "openapi_doc",
            "location": 40,
            "return": [
                "str",
                "Optional[Callable]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pandora-master/wsgi.py": {},
    "pandora-master/pandora/application.py": {
        "create_app": {
            "name": "create_app",
            "location": 11,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "config": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "utils.tags.Tags",
                    "bool"
                ],
                "init_db": [
                    "T",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "pandora-master/pandora/blueprints.py": {
        "_factory": {
            "name": "_factory",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "module_path": [
                    "Optional[str]",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "str",
                    "core.DependencyContainer",
                    "Optional[list]"
                ],
                "url_prefix": [
                    "Optional[str]",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "str",
                    "core.DependencyContainer",
                    "Optional[list]"
                ],
                "is_api": [
                    "Optional[str]",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "str",
                    "core.DependencyContainer",
                    "Optional[list]"
                ]
            }
        },
        "_factory.set_variables": {
            "name": "set_variables",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pandora-master/pandora/config.py": {
        "_bool": {
            "name": "_bool",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "Optional[Any]",
                    "int",
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[float]"
                ]
            }
        }
    },
    "pandora-master/pandora/extensions.py": {
        "CustomJSONEncoder.default": {
            "name": "default",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "pandora-master/pandora/__init__.py": {},
    "pandora-master/pandora/brokers/__init__.py": {},
    "pandora-master/pandora/core/apidoc.py": {
        "is_field_openapi_model": {
            "name": "is_field_openapi_model",
            "location": 12,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "is_field_union_model": {
            "name": "is_field_union_model",
            "location": 23,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "is_model_base_model": {
            "name": "is_model_base_model",
            "location": 30,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "is_model_enum": {
            "name": "is_model_enum",
            "location": 35,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "traverse_field_to_get_models": {
            "name": "traverse_field_to_get_models",
            "location": 39,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "traverse_model_to_get_models": {
            "name": "traverse_model_to_get_models",
            "location": 51,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "traverse_view_funcs_to_get_models": {
            "name": "traverse_view_funcs_to_get_models",
            "location": 61,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "trans_python_type_to_openapi_type": {
            "name": "trans_python_type_to_openapi_type",
            "location": 85,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "trans_field_to_spec": {
            "name": "trans_field_to_spec",
            "location": 102,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "trans_model_to_spec": {
            "name": "trans_model_to_spec",
            "location": 126,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "trans_model_to_get_parameters_spec": {
            "name": "trans_model_to_get_parameters_spec",
            "location": 152,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "trans_view_to_spec": {
            "name": "trans_view_to_spec",
            "location": 189,
            "return": [],
            "arguments": {
                "rule": [],
                "view_func": [],
                "tag": []
            }
        },
        "trans_path_param_url": {
            "name": "trans_path_param_url",
            "location": 282,
            "return": [],
            "arguments": {
                "url_path": []
            }
        },
        "get_interface_tag": {
            "name": "get_interface_tag",
            "location": 294,
            "return": [],
            "arguments": {
                "url_endpoint": [],
                "app": []
            }
        },
        "app_openapi_doc": {
            "name": "app_openapi_doc",
            "location": 302,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "trans_path_param_url.trans_param": {
            "name": "trans_param",
            "location": 286,
            "return": [],
            "arguments": {
                "matched": []
            }
        }
    },
    "pandora-master/pandora/core/cache.py": {
        "is_logined": {
            "name": "is_logined",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "common_cache_key": {
            "name": "common_cache_key",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Sequence[Sequence[Any]]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "PandoraCache.cache_for_anonymous": {
            "name": "cache_for_anonymous",
            "location": 28,
            "return": [
                "str",
                "bytes",
                "dict",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "pandora-master/pandora/core/cursor.py": {
        "get_base_id_and_max_size": {
            "name": "get_base_id_and_max_size",
            "location": 7,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "Sequence[int]"
            ],
            "arguments": {
                "cursor": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "bytes",
                    "int"
                ],
                "size": [
                    "int",
                    "str"
                ]
            }
        },
        "encode_cursor": {
            "name": "encode_cursor",
            "location": 16,
            "return": [
                "str",
                "bytes",
                "bytearray"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "gen_next_cursor": {
            "name": "gen_next_cursor",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "objs": [
                    "list",
                    "Union[int, float]",
                    "int",
                    "str",
                    "Mapping[str, int]"
                ],
                "size": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "CursorReq.cursor_int": {
            "name": "cursor_int",
            "location": 36,
            "return": [
                "dict",
                "Callable",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CursorResp.from_objs_and_cursor": {
            "name": "from_objs_and_cursor",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "objs": [
                    "str",
                    "Callable"
                ],
                "cursor": [
                    "str",
                    "bytes",
                    "list",
                    "bool"
                ]
            }
        },
        "CursorResp.from_cursor": {
            "name": "from_cursor",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "prev_cursor": [
                    "str"
                ],
                "next_cursor": [
                    "str"
                ]
            }
        }
    },
    "pandora-master/pandora/core/db.py": {
        "RetryOperationalError.execute_sql": {
            "name": "execute_sql",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "params": [
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "commit": [
                    "int",
                    "T"
                ]
            }
        }
    },
    "pandora-master/pandora/core/dto.py": {
        "setup_dto_stats": {
            "name": "setup_dto_stats",
            "location": 4,
            "return": [],
            "arguments": {
                "dto": [],
                "setup_func": []
            }
        },
        "setup_dto_stats.deco": {
            "name": "deco",
            "location": 10,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "setup_dto_stats.deco.inner": {
            "name": "inner",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "pandora-master/pandora/core/errors.py": {
        "APIException.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "errmsg": [
                    "str",
                    "bool",
                    "int"
                ],
                "errcode": [
                    "str",
                    "bool",
                    "int"
                ],
                "description": [
                    "str",
                    "Optional[str]"
                ],
                "response": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "APIException.get_body": {
            "name": "get_body",
            "location": 16,
            "return": [
                "str",
                "Type[Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "APIException.get_headers": {
            "name": "get_headers",
            "location": 23,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "str",
                    "Sequence[int]",
                    "List[str]",
                    "Callable"
                ]
            }
        }
    },
    "pandora-master/pandora/core/exceptions.py": {
        "PandoraBaseException.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "error_msg": [],
                "error": []
            }
        }
    },
    "pandora-master/pandora/core/my_blueprint.py": {
        "MyBlueprint.rpc_route": {
            "name": "rpc_route",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "bool",
                    "Callable[..., Awaitable]",
                    "Callable",
                    "str",
                    "T"
                ],
                "methods": [
                    "bool",
                    "Callable[..., Awaitable]",
                    "Callable",
                    "str",
                    "T"
                ]
            }
        },
        "MyBlueprint.rpc": {
            "name": "rpc",
            "location": 48,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "Type[T]",
                    "T"
                ]
            }
        },
        "MyBlueprint.rpc_route.decorator": {
            "name": "decorator",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "MyBlueprint.rpc_route.decorator._": {
            "name": "_",
            "location": 22,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "Mapping[Any, Any]",
                "Callable",
                "int"
            ],
            "arguments": {}
        }
    },
    "pandora-master/pandora/core/response.py": {
        "ok": {
            "name": "ok",
            "location": 4,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Optional[Callable]",
                    "KT"
                ],
                "status_code": [
                    "int",
                    "str"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "errmsg": [
                    "str",
                    "Tuple[int, int]",
                    "Union[Callable, str]"
                ],
                "error": [
                    "str",
                    "Tuple[int, int]",
                    "Union[Callable, str]"
                ],
                "errcode": [
                    "str",
                    "Tuple[int, int]",
                    "Union[Callable, str]"
                ],
                "status_code": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "pandora-master/pandora/core/text.py": {
        "random_str": {
            "name": "random_str",
            "location": 9,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "is_chinese_char": {
            "name": "is_chinese_char",
            "location": 14,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "is_number_char": {
            "name": "is_number_char",
            "location": 19,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "is_alphabet_char": {
            "name": "is_alphabet_char",
            "location": 24,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "is_legal_char_for_user_name": {
            "name": "is_legal_char_for_user_name",
            "location": 29,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "has_illegal_txt_for_user_name": {
            "name": "has_illegal_txt_for_user_name",
            "location": 34,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "filter_illegal_txt_for_user_name": {
            "name": "filter_illegal_txt_for_user_name",
            "location": 42,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "humanize_time": {
            "name": "humanize_time",
            "location": 48,
            "return": [],
            "arguments": {
                "date": []
            }
        },
        "json_dumps": {
            "name": "json_dumps",
            "location": 92,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "json_loads": {
            "name": "json_loads",
            "location": 96,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "pandora-master/pandora/core/__init__.py": {},
    "pandora-master/pandora/models/base.py": {
        "BaseDAO.save": {
            "name": "save",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDAO.update_from_dict": {
            "name": "update_from_dict",
            "location": 24,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes",
                    "Mapping",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseDAO.to_dict": {
            "name": "to_dict",
            "location": 29,
            "return": [
                "List[str]",
                "int",
                "Optional[str]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pandora-master/pandora/models/__init__.py": {},
    "pandora-master/pandora/models/api_key/api.py": {
        "get_api_key_by_public_key": {
            "name": "get_api_key_by_public_key",
            "location": 8,
            "return": [
                "dict",
                "str",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "public_key": [
                    "str",
                    "core.models.GroupingKey",
                    "bytes"
                ]
            }
        }
    },
    "pandora-master/pandora/models/api_key/__init__.py": {},
    "pandora-master/pandora/models/api_key/dao/api_key.py": {
        "get_api_key_by_public_key": {
            "name": "get_api_key_by_public_key",
            "location": 22,
            "return": [
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "public_key": [
                    "str",
                    "Iterable[Tuple[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_api_key": {
            "name": "create_api_key",
            "location": 28,
            "return": [
                "contests.models.Submission",
                "IO[bytes]",
                "str",
                "int",
                "List[bytes]"
            ],
            "arguments": {
                "app_name": [
                    "str",
                    "List[str]"
                ],
                "desc": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "pandora-master/pandora/models/api_key/dao/__init__.py": {},
    "pandora-master/pandora/models/api_key/dto/api_key.py": {
        "ApiKeyDTO.from_dao": {
            "name": "from_dao",
            "location": 16,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[bool, str]",
                    "dict",
                    "bool",
                    "List[str]"
                ],
                "dao": [
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[bool, str]",
                    "dict",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "ApiKeyDTO.dict_for_dao": {
            "name": "dict_for_dao",
            "location": 19,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pandora-master/pandora/models/api_key/dto/__init__.py": {},
    "pandora-master/pandora/models/utils/db.py": {
        "create_tables": {
            "name": "create_tables",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "drop_tables": {
            "name": "drop_tables",
            "location": 18,
            "return": [],
            "arguments": {
                "force": []
            }
        },
        "create_database": {
            "name": "create_database",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "drop_database": {
            "name": "drop_database",
            "location": 42,
            "return": [],
            "arguments": {
                "force": []
            }
        }
    },
    "pandora-master/pandora/models/utils/__init__.py": {},
    "pandora-master/pandora/tasks/__init__.py": {},
    "pandora-master/pandora/templates/__init__.py": {},
    "pandora-master/pandora/views/index.py": {
        "index": {
            "name": "index",
            "location": 6,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        }
    },
    "pandora-master/pandora/views/__init__.py": {},
    "pandora-master/pandora/views/utils/check_sign.py": {
        "get_md5": {
            "name": "get_md5",
            "location": 8,
            "return": [],
            "arguments": {
                "d": [],
                "secret_key": [],
                "salt": []
            }
        },
        "verify_md5": {
            "name": "verify_md5",
            "location": 19,
            "return": [],
            "arguments": {
                "d": [],
                "secret_key": [],
                "salt": []
            }
        },
        "check_sign": {
            "name": "check_sign",
            "location": 30,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "pandora-master/pandora/views/utils/__init__.py": {},
    "pandora-master/tests/conftest.py": {},
    "pandora-master/tests/__init__.py": {}
}
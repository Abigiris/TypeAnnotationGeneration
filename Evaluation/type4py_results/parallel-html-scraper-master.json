{
    "parallel-html-scraper-master/setup.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parallel-html-scraper-master/tasks.py": {
        "_delete_file": {
            "name": "_delete_file",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "IO",
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Union[str, pathlib3x.Path, IO[str]]"
                ]
            }
        },
        "style": {
            "name": "style",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "check": [
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "isort": {
            "name": "isort",
            "location": 51,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "pipenv_setup": {
            "name": "pipenv_setup",
            "location": 57,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bytes",
                    "bool",
                    "Union[Sequence[str], Sequence[int]]",
                    "Iterable[str]"
                ],
                "check": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 63,
            "return": [
                "str",
                "int",
                "float",
                "bool",
                "Sequence[int]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "check": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "lint_flake8": {
            "name": "lint_flake8",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_pylint": {
            "name": "lint_pylint",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint_mypy": {
            "name": "lint_mypy",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "lint": {
            "name": "lint",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "radon_cc": {
            "name": "radon_cc",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon_mi": {
            "name": "radon_mi",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "radon": {
            "name": "radon",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "xenon": {
            "name": "xenon",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 141,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ],
                "publish": [
                    "Union[List, set]",
                    "Iterator[str]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ],
                "xml": [
                    "Union[List, set]",
                    "Iterator[str]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "clean_build": {
            "name": "clean_build",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "clean_python": {
            "name": "clean_python",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "Path",
                    "int",
                    "pathlib.Path",
                    "bool"
                ]
            }
        },
        "clean_tests": {
            "name": "clean_tests",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "_context": [
                    "runners.TestRunner",
                    "bool",
                    "Callable[[], bytes]",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "dist": {
            "name": "dist",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "parallel-html-scraper-master/parallelhtmlscraper/exceptions.py": {
        "HttpTimeoutError.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpTimeoutError.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parallel-html-scraper-master/parallelhtmlscraper/html_analyzer.py": {},
    "parallel-html-scraper-master/parallelhtmlscraper/html_request_coroutine.py": {
        "HtmlRequestCoroutine.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "parallel-html-scraper-master/parallelhtmlscraper/html_text_load_coroutine.py": {},
    "parallel-html-scraper-master/parallelhtmlscraper/parallel_html_request_coroutine.py": {},
    "parallel-html-scraper-master/parallelhtmlscraper/parallel_html_scraper.py": {
        "ParallelHtmlScraper.execute": {
            "name": "execute",
            "location": 27,
            "return": [
                "Union[str, List[str], Tuple[str, ...]]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "base_url": [
                    "int",
                    "str",
                    "Iterable[str]"
                ],
                "list_url": [
                    "int",
                    "str",
                    "Iterable[str]"
                ],
                "analyzer": [
                    "int",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "parallel-html-scraper-master/parallelhtmlscraper/__init__.py": {},
    "parallel-html-scraper-master/tests/conftest.py": {
        "mock_aioresponse": {
            "name": "mock_aioresponse",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "html_byte": {
            "name": "html_byte",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "resource_path_root": [
                    "dict",
                    "int"
                ],
                "request": [
                    "dict",
                    "int"
                ]
            }
        },
        "client_response_html_byte": {
            "name": "client_response_html_byte",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "resource_path_root": [
                    "asyncio.AbstractEventLoop",
                    "bool",
                    "str"
                ],
                "request": [
                    "asyncio.AbstractEventLoop",
                    "bool",
                    "str"
                ],
                "mock_aioresponse": [
                    "Dict[str, str]",
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "bool",
                    "IO"
                ]
            }
        },
        "client_response": {
            "name": "client_response",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "mock_aioresponse": [
                    "str",
                    "aiohttp.ClientSession",
                    "Optional[float]"
                ],
                "request": [
                    "str",
                    "aiohttp.ClientSession",
                    "Optional[float]"
                ]
            }
        },
        "generate_client_response": {
            "name": "generate_client_response",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "mock_aioresponse": [
                    "str",
                    "Set[str]",
                    "IO",
                    "Iterable[List[Any]]",
                    "bool"
                ],
                "aioresponse_parameter": [
                    "str",
                    "Set[str]",
                    "IO",
                    "Iterable[List[Any]]",
                    "bool"
                ]
            }
        }
    },
    "parallel-html-scraper-master/tests/test_hrml_analyzer.py": {},
    "parallel-html-scraper-master/tests/test_html_request_coroutine.py": {},
    "parallel-html-scraper-master/tests/test_html_text_load_coroutine.py": {},
    "parallel-html-scraper-master/tests/test_parallel_url_scraper.py": {
        "TestParallelHtmlScraper.test": {
            "name": "test",
            "location": 23,
            "return": [],
            "arguments": {
                "mocker": [],
                "mock_aioresponse": [],
                "monkeypatch": [],
                "resource_path_root": []
            }
        }
    },
    "parallel-html-scraper-master/tests/__init__.py": {},
    "parallel-html-scraper-master/tests/testlibraries/analyzer_for_test.py": {},
    "parallel-html-scraper-master/tests/testlibraries/__init__.py": {}
}
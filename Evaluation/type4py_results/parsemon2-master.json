{
    "parsemon2-master/setup.py": {},
    "parsemon2-master/mypy_stubs/parsemon/__init__.py": {},
    "parsemon2-master/mypy_stubs/parsemon/extensions/primitives.py": {
        "LiteralParser.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "expected": []
            }
        },
        "LiteralParser.__call__": {
            "name": "__call__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "continuation": []
            }
        }
    },
    "parsemon2-master/mypy_stubs/parsemon/extensions/result.py": {
        "success": {
            "name": "success",
            "location": 10,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "failure": {
            "name": "failure",
            "location": 11,
            "return": [],
            "arguments": {
                "message": [],
                "position": []
            }
        },
        "Result.get_failures": {
            "name": "get_failures",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "parsemon2-master/mypy_stubs/parsemon/extensions/trampoline.py": {
        "with_trampoline": {
            "name": "with_trampoline",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "Call.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "parsemon2-master/mypy_stubs/parsemon/extensions/__init__.py": {},
    "parsemon2-master/source/conf.py": {},
    "parsemon2-master/src/parsemon/basic.py": {
        "concat": {
            "name": "concat",
            "location": 10,
            "return": [
                "Optional[bytes]",
                "float"
            ],
            "arguments": {
                "chars": [
                    "str"
                ]
            }
        },
        "integer": {
            "name": "integer",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "floating_point": {
            "name": "floating_point",
            "location": 37,
            "return": [
                "str",
                "Dict[str, int]",
                "float",
                "bool"
            ],
            "arguments": {
                "delimiter": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "floating_point.without_integer_part": {
            "name": "without_integer_part",
            "location": 45,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "floating_point.without_rational_part": {
            "name": "without_rational_part",
            "location": 51,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "floating_point.both_parts": {
            "name": "both_parts",
            "location": 57,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "floating_point.sign": {
            "name": "sign",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "floating_point.float_without_e": {
            "name": "float_without_e",
            "location": 71,
            "return": [
                "str",
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {}
        },
        "floating_point.parse_exponent": {
            "name": "parse_exponent",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "floating_point.int_to_signum": {
            "name": "int_to_signum",
            "location": 83,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "parsemon2-master/src/parsemon/coroutine.py": {
        "do": {
            "name": "do",
            "location": 8,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "do.decorator": {
            "name": "decorator",
            "location": 28,
            "return": [
                "List[List[str]]",
                "Set[str]",
                "float"
            ],
            "arguments": {}
        },
        "do.decorator._do_parser": {
            "name": "_do_parser",
            "location": 29,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "stream": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "original_continuation": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "do.decorator._do_parser.do_continuation": {
            "name": "do_continuation",
            "location": 32,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "progressed_stream": [
                    "int",
                    "Mapping[str, Tuple[float, float, float]]"
                ],
                "previous_parsing_result": [
                    "psycopg2.extensions.connection",
                    "int",
                    "bool",
                    "str",
                    "dict",
                    "Optional[Tuple[int, ...]]"
                ]
            }
        }
    },
    "parsemon2-master/src/parsemon/error.py": {},
    "parsemon2-master/src/parsemon/json.py": {
        "concat": {
            "name": "concat",
            "location": 19,
            "return": [
                "tuple"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "utils.parser.BinaryParser"
                ]
            }
        },
        "unicode_char": {
            "name": "unicode_char",
            "location": 37,
            "return": [
                "str",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {}
        },
        "escaped_from_pair": {
            "name": "escaped_from_pair",
            "location": 43,
            "return": [
                "bool",
                "dict",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "escape_sequence": [
                    "int"
                ],
                "translation": [
                    "int"
                ]
            }
        },
        "json_string": {
            "name": "json_string",
            "location": 55,
            "return": [
                "str",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "json_number": {
            "name": "json_number",
            "location": 65,
            "return": [
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {}
        },
        "json_bool": {
            "name": "json_bool",
            "location": 122,
            "return": [
                "Optional[Any]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "json_null": {
            "name": "json_null",
            "location": 134,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "json_list": {
            "name": "json_list",
            "location": 140,
            "return": [
                "int",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "json_object": {
            "name": "json_object",
            "location": 162,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "json_value": {
            "name": "json_value",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "json_document": {
            "name": "json_document",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "json_number.just_one_digit": {
            "name": "just_one_digit",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "json_number.multiple_digits": {
            "name": "multiple_digits",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "json_number.maybe_sign": {
            "name": "maybe_sign",
            "location": 85,
            "return": [
                "tuple"
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "json_number.fraction": {
            "name": "fraction",
            "location": 100,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "json_number.exponent": {
            "name": "exponent",
            "location": 107,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "json_object.key_value_pair": {
            "name": "key_value_pair",
            "location": 164,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "Callable",
                "int"
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/src/parsemon/parser.py": {
        "parsing_result": {
            "name": "parsing_result",
            "location": 26,
            "return": [
                "int",
                "tuple",
                "dict",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "SupportsBytes",
                    "Sequence[str]",
                    "Union[str, int, float]"
                ],
                "remaining_input": [
                    "str",
                    "SupportsBytes",
                    "Sequence[str]",
                    "Union[str, int, float]"
                ]
            }
        },
        "chain": {
            "name": "chain",
            "location": 42,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "first": [
                    "tuple"
                ],
                "second": [
                    "tuple"
                ]
            }
        },
        "choice": {
            "name": "choice",
            "location": 57,
            "return": [
                "List[str]",
                "Tuple[Dict[str, str], List[str]]"
            ],
            "arguments": {
                "first_parser": [
                    "bool",
                    "type"
                ],
                "second_parser": [
                    "bool",
                    "type"
                ]
            }
        },
        "choices": {
            "name": "choices",
            "location": 65,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "many": {
            "name": "many",
            "location": 71,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "original_parser": [
                    "bool",
                    "Container"
                ]
            }
        },
        "many1": {
            "name": "many1",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "original_parser": [
                    "bool",
                    "Container",
                    "type"
                ]
            }
        },
        "seperated_by": {
            "name": "seperated_by",
            "location": 110,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "parser": [],
                "seperator": [
                    "str"
                ]
            }
        },
        "enclosed_by": {
            "name": "enclosed_by",
            "location": 128,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "parser": [
                    "str"
                ],
                "prefix_parser": [
                    "bool"
                ],
                "suffix_parser": [
                    "bool"
                ]
            }
        },
        "run_parser": {
            "name": "run_parser",
            "location": 145,
            "return": [
                "bool",
                "List[str]",
                "list",
                "Optional[str]",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "p": [
                    "str",
                    "Optional[str]"
                ],
                "input_string": [
                    "str",
                    "Optional[str]"
                ],
                "stream_implementation": [
                    "str",
                    "Sequence[str]",
                    "list",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "parse_file": {
            "name": "parse_file",
            "location": 168,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "parser": [
                    "bool",
                    "str"
                ],
                "input_file": [
                    "int",
                    "TextIO",
                    "bytes",
                    "str",
                    "Set[str]"
                ],
                "max_size": [
                    "int",
                    "str",
                    "bytes",
                    "Tuple[int, int]"
                ]
            }
        },
        "until": {
            "name": "until",
            "location": 209,
            "return": [
                "str",
                "Iterable[T]",
                "Callable"
            ],
            "arguments": {
                "repeating_parser": [
                    "bool"
                ],
                "delimiter_parser": [
                    "bool"
                ]
            }
        },
        "repeat": {
            "name": "repeat",
            "location": 240,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "parser": [
                    "dict",
                    "str",
                    "Callable[[Any], bool]"
                ],
                "count": [
                    "str"
                ]
            }
        },
        "chain._chain": {
            "name": "_chain",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "p1": [
                    "BaseException"
                ],
                "p2": [
                    "BaseException"
                ]
            }
        },
        "run_parser.render_failure": {
            "name": "render_failure",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "failure": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "parsemon2-master/src/parsemon/sourcemap.py": {
        "display_location": {
            "name": "display_location",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "dict"
                ],
                "column": [
                    "str",
                    "dict"
                ]
            }
        },
        "find_linebreak_indices": {
            "name": "find_linebreak_indices",
            "location": 11,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "List[int]",
                "list"
            ],
            "arguments": {
                "document": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "Optional[List]",
                    "str"
                ]
            }
        },
        "find_line_in_indices": {
            "name": "find_line_in_indices",
            "location": 20,
            "return": [
                "str",
                "List[str]",
                "dict",
                "list",
                "Union[int, None]"
            ],
            "arguments": {
                "index": [
                    "bool",
                    "Callable[..., None]"
                ],
                "indices": [
                    "bool",
                    "Callable[..., None]"
                ]
            }
        },
        "find_column_in_indices": {
            "name": "find_column_in_indices",
            "location": 24,
            "return": [
                "str",
                "dict",
                "list",
                "List[str]",
                "Union[int, None]"
            ],
            "arguments": {
                "index": [
                    "bool"
                ],
                "indices": [
                    "bool"
                ]
            }
        },
        "find_location_in_indices": {
            "name": "find_location_in_indices",
            "location": 28,
            "return": [
                "str",
                "List[str]",
                "Optional[Callable]"
            ],
            "arguments": {
                "index": [
                    "bytes",
                    "dict",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "str",
                    "list"
                ],
                "indices": [
                    "List[str]",
                    "int",
                    "Union[str, List[Any]]",
                    "list"
                ]
            }
        },
        "find_linebreak_indices.iterate": {
            "name": "iterate",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/src/parsemon/stream.py": {
        "Stream.from_string": {
            "name": "from_string",
            "location": 11,
            "return": [
                "Stream"
            ],
            "arguments": {
                "the_class": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "Set[str]",
                    "Optional[bool]"
                ],
                "content": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "Set[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Stream.next": {
            "name": "next",
            "location": 15,
            "return": [
                "typing.Optional[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.to_string": {
            "name": "to_string",
            "location": 19,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.position": {
            "name": "position",
            "location": 23,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.read": {
            "name": "read",
            "location": 27,
            "return": [
                "typing.Optional[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.get_reset_point": {
            "name": "get_reset_point",
            "location": 31,
            "return": [
                "ResetPoint"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.reset_stream": {
            "name": "reset_stream",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reset_point": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ResetPoint.destroy": {
            "name": "destroy",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetPoint.get_position": {
            "name": "get_position",
            "location": 45,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStreamResetPoint.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StringStreamResetPoint.destroy": {
            "name": "destroy",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStreamResetPoint.get_position": {
            "name": "get_position",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStream.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "dict",
                    "bytes",
                    "List[Callable]"
                ],
                "position": [
                    "int",
                    "Callable[[], None]",
                    "str"
                ]
            }
        },
        "StringStream.from_string": {
            "name": "from_string",
            "location": 66,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "StringStream.to_string": {
            "name": "to_string",
            "location": 72,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStream.read": {
            "name": "read",
            "location": 75,
            "return": [
                "Optional[bytes]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStream.next": {
            "name": "next",
            "location": 81,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[BaseException]",
                "list",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStream.position": {
            "name": "position",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStream.get_reset_point": {
            "name": "get_reset_point",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStream.reset_stream": {
            "name": "reset_stream",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reset_point": [
                    "TextIO",
                    "List[List[int]]"
                ]
            }
        },
        "IOStreamResetPoint.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IOStreamResetPoint.destroy": {
            "name": "destroy",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOStreamResetPoint.get_position": {
            "name": "get_position",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOStream.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IOStream.next": {
            "name": "next",
            "location": 113,
            "return": [
                "Optional[bytes]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOStream.from_string": {
            "name": "from_string",
            "location": 118,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "IO[bytes]",
                    "str"
                ],
                "content": [
                    "bytes",
                    "IO[bytes]",
                    "str"
                ]
            }
        },
        "IOStream.read": {
            "name": "read",
            "location": 123,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOStream.position": {
            "name": "position",
            "location": 131,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOStream.to_string": {
            "name": "to_string",
            "location": 134,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[Tuple[str, str]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOStream.get_reset_point": {
            "name": "get_reset_point",
            "location": 140,
            "return": [
                "str",
                "int",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOStream.reset_stream": {
            "name": "reset_stream",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reset_point": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "parsemon2-master/src/parsemon/validator.py": {
        "Validator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "Validator.validates": {
            "name": "validates",
            "location": 15,
            "return": [
                "str",
                "T",
                "Optional[Iterable[Any]]",
                "List[str]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "parser.Parser"
                ]
            }
        },
        "Validator.__or__": {
            "name": "__or__",
            "location": 32,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Validator.__and__": {
            "name": "__and__",
            "location": 44,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Validator.validates.do_validation": {
            "name": "do_validation",
            "location": 19,
            "return": [
                "int",
                "str",
                "Callable",
                "Iterable[int]"
            ],
            "arguments": {
                "to_validate": [
                    "int"
                ]
            }
        },
        "Validator.__or__.validator_function": {
            "name": "validator_function",
            "location": 33,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Validator.__and__.validator_function": {
            "name": "validator_function",
            "location": 45,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict[type, Callable]",
                    "Optional['ModelOrDc']",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "parsemon2-master/src/parsemon/__init__.py": {},
    "parsemon2-master/src/parsemon/internals/parser.py": {
        "bind": {
            "name": "bind",
            "location": 7,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "parser": [
                    "bool"
                ],
                "binding": [
                    "bool"
                ]
            }
        },
        "choose_parser": {
            "name": "choose_parser",
            "location": 30,
            "return": [],
            "arguments": {
                "parser": [
                    "str"
                ],
                "other": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 66,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "parser": [
                    "dict"
                ],
                "input_stream": [
                    "dict"
                ]
            }
        },
        "bind._combined_parser": {
            "name": "_combined_parser",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "stream": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "continuation": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "choose_parser._choice_parser": {
            "name": "_choice_parser",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "stream": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "continuation": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "bind._combined_parser.bind_continuation": {
            "name": "bind_continuation",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "progressed_stream": [
                    "dict",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "previous_parsing_result": [
                    "psycopg2.extensions.connection",
                    "str",
                    "dict",
                    "bool",
                    "Optional[Tuple[int, ...]]"
                ]
            }
        },
        "choose_parser._choice_parser._choice_continuation": {
            "name": "_choice_continuation",
            "location": 32,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "progressed_stream": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "float"
                ],
                "parser_result": [
                    "bool",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "choose_parser._choice_parser._choice_continuation._error_message_continuation": {
            "name": "_error_message_continuation",
            "location": 33,
            "return": [
                "Dict[str, int]",
                "dict",
                "str"
            ],
            "arguments": {
                "final_stream": [
                    "int",
                    "dict",
                    "Callable",
                    "str"
                ],
                "other_result": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "parsemon2-master/src/parsemon/internals/primitives.py": {
        "look_ahead": {
            "name": "look_ahead",
            "location": 4,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "parser": [
                    "bool"
                ]
            }
        },
        "try_parser": {
            "name": "try_parser",
            "location": 28,
            "return": [],
            "arguments": {
                "parser": [
                    "Callable[[str], T]",
                    "Sequence[int]"
                ]
            }
        },
        "unit": {
            "name": "unit",
            "location": 52,
            "return": [],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "fail": {
            "name": "fail",
            "location": 65,
            "return": [],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "character": {
            "name": "character",
            "location": 76,
            "return": [],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "literal": {
            "name": "literal",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "expected": [
                    "str",
                    "bool",
                    "TextIO",
                    "Optional[str]"
                ]
            }
        },
        "none_of": {
            "name": "none_of",
            "location": 117,
            "return": [],
            "arguments": {
                "chars": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "Mapping[str, str]"
                ]
            }
        },
        "one_of": {
            "name": "one_of",
            "location": 170,
            "return": [],
            "arguments": {
                "expected": [
                    "str",
                    "int",
                    "ClassVar",
                    "Literal[True]"
                ]
            }
        },
        "fmap": {
            "name": "fmap",
            "location": 213,
            "return": [
                "bool",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "mapping": [
                    "Dict[str, Any]",
                    "bool",
                    "Callable[[str], T]"
                ],
                "parser": [
                    "Dict[str, Any]",
                    "bool",
                    "Callable[[str], T]"
                ]
            }
        },
        "end_of_file": {
            "name": "end_of_file",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "look_ahead._wrapped_parser": {
            "name": "_wrapped_parser",
            "location": 5,
            "return": [],
            "arguments": {
                "stream": [],
                "continuation": []
            }
        },
        "try_parser._wrapped_parser": {
            "name": "_wrapped_parser",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "stream": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "continuation": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "unit.parser": {
            "name": "parser",
            "location": 53,
            "return": [],
            "arguments": {
                "stream": [],
                "cont": []
            }
        },
        "fail.parser": {
            "name": "parser",
            "location": 68,
            "return": [],
            "arguments": {
                "stream": [],
                "cont": []
            }
        },
        "character.parser": {
            "name": "parser",
            "location": 79,
            "return": [],
            "arguments": {
                "stream": [],
                "cont": []
            }
        },
        "none_of.parser": {
            "name": "parser",
            "location": 125,
            "return": [],
            "arguments": {
                "stream": [],
                "cont": []
            }
        },
        "one_of.parser": {
            "name": "parser",
            "location": 173,
            "return": [],
            "arguments": {
                "stream": [],
                "cont": []
            }
        },
        "fmap.new_parser": {
            "name": "new_parser",
            "location": 216,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "stream": [
                    "Optional[int]",
                    "Callable",
                    "Tuple[Optional[float], Optional[float]]",
                    "bool"
                ],
                "continuation": [
                    "Optional[int]",
                    "Callable",
                    "Tuple[Optional[float], Optional[float]]",
                    "bool"
                ]
            }
        },
        "end_of_file.parser": {
            "name": "parser",
            "location": 232,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "stream": [
                    "Dict[str, Any]",
                    "str"
                ],
                "cont": [
                    "str",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "look_ahead._wrapped_parser._reset_stream": {
            "name": "_reset_stream",
            "location": 8,
            "return": [],
            "arguments": {
                "stream": [],
                "parsing_result": []
            }
        },
        "try_parser._wrapped_parser._reset_stream": {
            "name": "_reset_stream",
            "location": 32,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "progressed_stream": [
                    "int",
                    "bool",
                    "float"
                ],
                "parsing_result": [
                    "dict",
                    "Dict[str, float]",
                    "Callable"
                ]
            }
        }
    },
    "parsemon2-master/src/parsemon/internals/__init__.py": {},
    "parsemon2-master/tests/conftest.py": {
        "file_generator": {
            "name": "file_generator",
            "location": 19,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, TextIO]"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileGenerator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmp_path_factory": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileGenerator.create_file": {
            "name": "create_file",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "bytes",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "parsemon2-master/tests/strategies.py": {
        "stream_implementation": {
            "name": "stream_implementation",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "draw": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "stream": {
            "name": "stream",
            "location": 12,
            "return": [
                "float"
            ],
            "arguments": {
                "draw": [
                    "int"
                ],
                "min_size": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "parsemon2-master/tests/test_basic.py": {
        "test_if_integer_parses_1_digit": {
            "name": "test_if_integer_parses_1_digit",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_if_integer_parses_2_digits": {
            "name": "test_if_integer_parses_2_digits",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_if_integer_parses_negative_numbers": {
            "name": "test_if_integer_parses_negative_numbers",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_if_integer_parses_plus_prefix": {
            "name": "test_if_integer_parses_plus_prefix",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_if_floating_point_parses_simple_integer": {
            "name": "test_if_floating_point_parses_simple_integer",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_if_floating_point_parses_number_with_one_point_in_the_middle": {
            "name": "test_if_floating_point_parses_number_with_one_point_in_the_middle",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_if_floating_point_parses_number_without_integer_part": {
            "name": "test_if_floating_point_parses_number_without_integer_part",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_if_floating_point_parses_number_without_rational_part": {
            "name": "test_if_floating_point_parses_number_without_rational_part",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_if_floating_point_recognizes_one_sign_before_number": {
            "name": "test_if_floating_point_recognizes_one_sign_before_number",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_if_floating_point_recognizes_custom_delimiters": {
            "name": "test_if_floating_point_recognizes_custom_delimiters",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_if_floating_point_recognizes_custom_delimiters_without_integer_part": {
            "name": "test_if_floating_point_recognizes_custom_delimiters_without_integer_part",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_if_floating_point_recognizes_float_with_e_notation": {
            "name": "test_if_floating_point_recognizes_float_with_e_notation",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_that_floating_point_does_not_recognize_number_without_rational_part": {
            "name": "test_that_floating_point_does_not_recognize_number_without_rational_part",
            "location": 54,
            "return": [],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/test_character_stream.py": {
        "stream_implementation": {
            "name": "stream_implementation",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "test_empty_character_stream_yields_no_next": {
            "name": "test_empty_character_stream_yields_no_next",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "stream_implementation": []
            }
        },
        "test_1_character_stream_yields_content_as_next": {
            "name": "test_1_character_stream_yields_content_as_next",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "stream_implementation": [
                    "dict"
                ]
            }
        },
        "test_1_character_stream_read_yields_content_back": {
            "name": "test_1_character_stream_read_yields_content_back",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "stream_implementation": [
                    "dict"
                ]
            }
        },
        "test_that_read_gives_same_char_as_next": {
            "name": "test_that_read_gives_same_char_as_next",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "random_stream": [
                    "bool"
                ]
            }
        },
        "test_that_characters_read_from_stream_are_in_same_order_as_original_string": {
            "name": "test_that_characters_read_from_stream_are_in_same_order_as_original_string",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "stream_implementation": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_that_from_string_and_to_string_yields_identity": {
            "name": "test_that_from_string_and_to_string_yields_identity",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ],
                "stream_implementation": [
                    "str",
                    "int"
                ]
            }
        },
        "test_that_next_on_stream_that_was_emptied_gives_none": {
            "name": "test_that_next_on_stream_that_was_emptied_gives_none",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "stream": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "int",
                    "Optional[TextIO]"
                ]
            }
        },
        "test_that_reading_stream_advances_its_position_by_one": {
            "name": "test_that_reading_stream_advances_its_position_by_one",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "stream_implementation": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_that_stream_can_be_reset": {
            "name": "test_that_stream_can_be_reset",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "stream": []
            }
        },
        "test_peeking_next_character_does_not_change_result_of_to_string": {
            "name": "test_peeking_next_character_does_not_change_result_of_to_string",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "bytes"
                ],
                "stream_implementation": [
                    "bytes"
                ]
            }
        }
    },
    "parsemon2-master/tests/test_coroutine.py": {
        "test_can_combine_2_parsers_with_do": {
            "name": "test_can_combine_2_parsers_with_do",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_can_use_do_notation_in_choice": {
            "name": "test_can_use_do_notation_in_choice",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_do_can_handle_1000_parsers_combined_in_one_do_block": {
            "name": "test_do_can_handle_1000_parsers_combined_in_one_do_block",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_do_can_handle_parameters_correctly": {
            "name": "test_do_can_handle_parameters_correctly",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_do_can_handle_parsers_that_do_not_return_anything": {
            "name": "test_that_do_can_handle_parsers_that_do_not_return_anything",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_parsers_with_do_notation_can_excecute_twice_with_same_result": {
            "name": "test_that_parsers_with_do_notation_can_excecute_twice_with_same_result",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_can_combine_2_parsers_with_do.a_and_b": {
            "name": "a_and_b",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_can_use_do_notation_in_choice.a_and_b": {
            "name": "a_and_b",
            "location": 17,
            "return": [
                "str",
                "Iterable[int]",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "test_do_can_handle_1000_parsers_combined_in_one_do_block.a_10000_times": {
            "name": "a_10000_times",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_do_can_handle_parameters_correctly.a_for_n_times": {
            "name": "a_for_n_times",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "test_that_do_can_handle_parsers_that_do_not_return_anything.trivial": {
            "name": "trivial",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_that_parsers_with_do_notation_can_excecute_twice_with_same_result.trivial": {
            "name": "trivial",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_parsers_with_do_notation_can_excecute_twice_with_same_result.is_success": {
            "name": "is_success",
            "location": 66,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/test_error_handling.py": {
        "test_attribute_errors_are_propagated_correctly": {
            "name": "test_attribute_errors_are_propagated_correctly",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_attribute_errors_are_propagated_correctly.parser": {
            "name": "parser",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/test_file_handling.py": {
        "test_can_open_file_and_run_a_parser": {
            "name": "test_can_open_file_and_run_a_parser",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "file_generator": [
                    "str",
                    "int"
                ]
            }
        },
        "test_raise_an_exception_if_file_size_is_larger_then_allowed": {
            "name": "test_raise_an_exception_if_file_size_is_larger_then_allowed",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "file_generator": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        }
    },
    "parsemon2-master/tests/test_internals.py": {
        "test_that_end_of_file_parser_accepts_empty_input": {
            "name": "test_that_end_of_file_parser_accepts_empty_input",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_end_of_file_parser_does_only_accept_empty_input": {
            "name": "test_that_end_of_file_parser_does_only_accept_empty_input",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "list",
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, Dict]"
                ]
            }
        },
        "test_that_end_of_file_parser_parsers_multiple_times": {
            "name": "test_that_end_of_file_parser_parsers_multiple_times",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "parsemon2-master/tests/test_json.py": {
        "test_json_string_parses_abc_as_intended": {
            "name": "test_json_string_parses_abc_as_intended",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_string_can_handle_escaped_quotes": {
            "name": "test_json_string_can_handle_escaped_quotes",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_string_can_handle_escaped_chars": {
            "name": "test_json_string_can_handle_escaped_chars",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_string_can_handle_unicode_escapes": {
            "name": "test_json_string_can_handle_unicode_escapes",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_number_can_handle_0_string": {
            "name": "test_json_number_can_handle_0_string",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_number_can_handle_two_digit_string": {
            "name": "test_json_number_can_handle_two_digit_string",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_number_raises_with_leading_zero": {
            "name": "test_json_number_raises_with_leading_zero",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_number_can_handle_leading_minus": {
            "name": "test_json_number_can_handle_leading_minus",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_number_can_handle_floats": {
            "name": "test_json_number_can_handle_floats",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_number_does_not_parse_digit_followed_by_dot_successfully": {
            "name": "test_json_number_does_not_parse_digit_followed_by_dot_successfully",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_number_can_handle_exponents": {
            "name": "test_json_number_can_handle_exponents",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_number_can_handle_negative_exponents": {
            "name": "test_json_number_can_handle_negative_exponents",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_bool_detects_true": {
            "name": "test_json_bool_detects_true",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_bool_detects_false": {
            "name": "test_json_bool_detects_false",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_bool_fails_on_other_strings": {
            "name": "test_json_bool_fails_on_other_strings",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_null_detects_null": {
            "name": "test_json_null_detects_null",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_null_fails_on_other_strings": {
            "name": "test_json_null_fails_on_other_strings",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_list_parses_empty_list": {
            "name": "test_json_list_parses_empty_list",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_list_parses_empty_list_with_5_spaces": {
            "name": "test_json_list_parses_empty_list_with_5_spaces",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_list_parses_list_with_one_int_in_it": {
            "name": "test_json_list_parses_list_with_one_int_in_it",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_list_parses_a_list_of_2_ints": {
            "name": "test_json_list_parses_a_list_of_2_ints",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_list_parses_list_including_spaces": {
            "name": "test_json_list_parses_list_including_spaces",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_list_parses_list_of_strings_and_ints": {
            "name": "test_json_list_parses_list_of_strings_and_ints",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_list_parses_a_list_with_null_in_it": {
            "name": "test_json_list_parses_a_list_with_null_in_it",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_list_handles_a_list_of_lists": {
            "name": "test_json_list_handles_a_list_of_lists",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_object_parses_empty_object": {
            "name": "test_json_object_parses_empty_object",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_object_parses_empty_object_with_spaces": {
            "name": "test_json_object_parses_empty_object_with_spaces",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_object_parses_object_with_one_entry": {
            "name": "test_json_object_parses_object_with_one_entry",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_object_parses_object_with_object_inside": {
            "name": "test_json_object_parses_object_with_object_inside",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_value_parses_bool_value": {
            "name": "test_json_value_parses_bool_value",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_document_trims_whitespaces": {
            "name": "test_json_document_trims_whitespaces",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_document_accepts_floats_without_signed_exponent": {
            "name": "test_json_document_accepts_floats_without_signed_exponent",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/test_parser.py": {
        "runner": {
            "name": "runner",
            "location": 34,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_literal_parses_a_single_string": {
            "name": "test_literal_parses_a_single_string",
            "location": 43,
            "return": [],
            "arguments": {
                "runner": [],
                "text": []
            }
        },
        "test_that_unit_returns_char_given_to_unit": {
            "name": "test_that_unit_returns_char_given_to_unit",
            "location": 48,
            "return": [],
            "arguments": {
                "runner": [],
                "char": [],
                "text": []
            }
        },
        "test_fmap_can_replace_parsing_result": {
            "name": "test_fmap_can_replace_parsing_result",
            "location": 52,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_fmap_can_map_1000_times": {
            "name": "test_fmap_can_map_1000_times",
            "location": 57,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_bind_can_chain_two_literal_parsers": {
            "name": "test_bind_can_chain_two_literal_parsers",
            "location": 68,
            "return": [],
            "arguments": {
                "runner": [],
                "a": [],
                "b": []
            }
        },
        "test_bind_can_chain_3_literal_parsers": {
            "name": "test_bind_can_chain_3_literal_parsers",
            "location": 81,
            "return": [],
            "arguments": {
                "runner": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_literal_parser_throws_ParsingFailed_when_seeing_non_matching_string": {
            "name": "test_literal_parser_throws_ParsingFailed_when_seeing_non_matching_string",
            "location": 94,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_literal_choice_can_parse_both_possibilities": {
            "name": "test_literal_choice_can_parse_both_possibilities",
            "location": 103,
            "return": [],
            "arguments": {
                "runner": [],
                "a": [],
                "b": []
            }
        },
        "test_choice_can_be_chained_1000_times": {
            "name": "test_choice_can_be_chained_1000_times",
            "location": 121,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_choice_throws_ParsingFailed_when_both_choices_fail": {
            "name": "test_choice_throws_ParsingFailed_when_both_choices_fail",
            "location": 135,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_choice_should_not_retry_if_the_parser_after_choice_fails": {
            "name": "test_choice_should_not_retry_if_the_parser_after_choice_fails",
            "location": 144,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_many_parses_empty_strings": {
            "name": "test_many_parses_empty_strings",
            "location": 154,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_many_parses_one_occurence": {
            "name": "test_many_parses_one_occurence",
            "location": 159,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_many_parses_5_occurences": {
            "name": "test_many_parses_5_occurences",
            "location": 164,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_we_can_chain_many_with_something_else": {
            "name": "test_we_can_chain_many_with_something_else",
            "location": 169,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_parse_none_of_parses_character_when_passed_empty_string": {
            "name": "test_parse_none_of_parses_character_when_passed_empty_string",
            "location": 179,
            "return": [],
            "arguments": {
                "runner": [],
                "text": []
            }
        },
        "test_none_of_raises_ParsingFailed_when_encountering_forbidden_char": {
            "name": "test_none_of_raises_ParsingFailed_when_encountering_forbidden_char",
            "location": 184,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_none_of_raises_ParsingFailed_when_nothing_to_consume": {
            "name": "test_none_of_raises_ParsingFailed_when_nothing_to_consume",
            "location": 190,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_fail_throws_ParsingFailed_error": {
            "name": "test_fail_throws_ParsingFailed_error",
            "location": 196,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_character_parses_a_single_character": {
            "name": "test_character_parses_a_single_character",
            "location": 203,
            "return": [],
            "arguments": {
                "runner": [],
                "text": []
            }
        },
        "test_character_raises_ParsingFailed_on_empty_string": {
            "name": "test_character_raises_ParsingFailed_on_empty_string",
            "location": 208,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_character_can_parse_5_characters": {
            "name": "test_character_can_parse_5_characters",
            "location": 214,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_character_raises_ParsingFailed_when_too_few_characters_in_stream": {
            "name": "test_character_raises_ParsingFailed_when_too_few_characters_in_stream",
            "location": 219,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_chain_executes_two_parsers_and_returns_result_of_second_one": {
            "name": "test_chain_executes_two_parsers_and_returns_result_of_second_one",
            "location": 225,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_chain_can_take_3_parsers_as_args": {
            "name": "test_chain_can_take_3_parsers_as_args",
            "location": 230,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_if_a_choice_failes_in_the_middle_of_chain_it_retries_other_option": {
            "name": "test_if_a_choice_failes_in_the_middle_of_chain_it_retries_other_option",
            "location": 235,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_many1_fails_for_empty_strings": {
            "name": "test_many1_fails_for_empty_strings",
            "location": 246,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_many1_behaves_like_many_for_1_occurence": {
            "name": "test_many1_behaves_like_many_for_1_occurence",
            "location": 252,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_failure_of_literal_contains_expected_string": {
            "name": "test_failure_of_literal_contains_expected_string",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "test_failure_of_choice_of_2_literals_should_contain_both_literals": {
            "name": "test_failure_of_choice_of_2_literals_should_contain_both_literals",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "test_failure_of_choice_of_3_literals_should_contain_all_3_literal": {
            "name": "test_failure_of_choice_of_3_literals_should_contain_all_3_literal",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "test_that_error_message_respects_ordering_of_failing_choices": {
            "name": "test_that_error_message_respects_ordering_of_failing_choices",
            "location": 285,
            "return": [],
            "arguments": {}
        },
        "test_that_error_message_order_is_preserved_with_3_choices": {
            "name": "test_that_error_message_order_is_preserved_with_3_choices",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "test_a_simple_failing_parser_prints_column_0_as_error": {
            "name": "test_a_simple_failing_parser_prints_column_0_as_error",
            "location": 314,
            "return": [],
            "arguments": {}
        },
        "test_simple_failing_parser_after_n_newlines_has_linenumber_n1_in_error": {
            "name": "test_simple_failing_parser_after_n_newlines_has_linenumber_n1_in_error",
            "location": 323,
            "return": [],
            "arguments": {
                "n": [],
                "runner": []
            }
        },
        "test_one_of_fails_if_trying_to_parse_something_not_in_set": {
            "name": "test_one_of_fails_if_trying_to_parse_something_not_in_set",
            "location": 333,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_onf_of_succeeds_if_trying_to_parse_something_in_the_set": {
            "name": "test_onf_of_succeeds_if_trying_to_parse_something_in_the_set",
            "location": 338,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_seperated_by_empty": {
            "name": "test_seperated_by_empty",
            "location": 342,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_seperated_by_one_element": {
            "name": "test_seperated_by_one_element",
            "location": 346,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_seperated_by_five_elemts": {
            "name": "test_seperated_by_five_elemts",
            "location": 350,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_seperated_by_1000_elements": {
            "name": "test_seperated_by_1000_elements",
            "location": 360,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_enclosed_by": {
            "name": "test_enclosed_by",
            "location": 367,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_choices": {
            "name": "test_choices",
            "location": 371,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_whitespace_parses_regular_space_character": {
            "name": "test_whitespace_parses_regular_space_character",
            "location": 375,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_whitespace_parses_tab_char": {
            "name": "test_whitespace_parses_tab_char",
            "location": 379,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_whitespace_parses_newline_char": {
            "name": "test_whitespace_parses_newline_char",
            "location": 383,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_that_fmap_does_not_change_error_messages": {
            "name": "test_that_fmap_does_not_change_error_messages",
            "location": 387,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "test_that_unit_parser_returns_complete_input_string_as_not_consumed": {
            "name": "test_that_unit_parser_returns_complete_input_string_as_not_consumed",
            "location": 397,
            "return": [],
            "arguments": {
                "text": [],
                "runner": []
            }
        },
        "runner.fixture": {
            "name": "fixture",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/test_performance.py": {
        "runner": {
            "name": "runner",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "test_stack_performance_with_many_choices": {
            "name": "test_stack_performance_with_many_choices",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "bool"
                ],
                "input_string": [
                    "str",
                    "bool"
                ],
                "runner": [
                    "str",
                    "bool"
                ]
            }
        },
        "runner.fixture": {
            "name": "fixture",
            "location": 14,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/test_performance_without_choice.py": {
        "document": {
            "name": "document",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "implementation": {
            "name": "implementation",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "test_performance_without_choice": {
            "name": "test_performance_without_choice",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "document": [
                    "str"
                ],
                "benchmark": [
                    "List[str]"
                ],
                "implementation": []
            }
        },
        "implementation.wrapper": {
            "name": "wrapper",
            "location": 31,
            "return": [],
            "arguments": {
                "document": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "implementation.wrapper.parser": {
            "name": "parser",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/test_repeat.py": {
        "test_repeat_can_handle_1_repitition": {
            "name": "test_repeat_can_handle_1_repitition",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repeat_can_handle_5_repitition": {
            "name": "test_repeat_can_handle_5_repitition",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/test_sourcemap.py": {
        "test_display_location_contains_the_actual_line_number": {
            "name": "test_display_location_contains_the_actual_line_number",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dist_location_contains_the_actual_column_number_supplied": {
            "name": "test_dist_location_contains_the_actual_column_number_supplied",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_linebreak_indices_returns_empty_list_for_online_string": {
            "name": "test_find_linebreak_indices_returns_empty_list_for_online_string",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_linebreak_indices_on_string_with_only_linebreaks": {
            "name": "test_find_linebreak_indices_on_string_with_only_linebreaks",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_line_breaks_of_empty_string_returns_empty_list": {
            "name": "test_find_line_breaks_of_empty_string_returns_empty_list",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_line_in_indices_returns_1_for_index_0": {
            "name": "test_find_line_in_indices_returns_1_for_index_0",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_line_in_indices_returns_2_after_first_linebreak": {
            "name": "test_find_line_in_indices_returns_2_after_first_linebreak",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_line_in_indices_returns_2_in_middle_of_two_linebreaks": {
            "name": "test_find_line_in_indices_returns_2_in_middle_of_two_linebreaks",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_line_in_indices_returns_1_for_index_0_with_linbreak_at_index_0": {
            "name": "test_find_line_in_indices_returns_1_for_index_0_with_linbreak_at_index_0",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_column_in_indices_resturns_n_for_empty_indices": {
            "name": "test_find_column_in_indices_resturns_n_for_empty_indices",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "test_find_column_in_indices_returns_n_minus_1_if_index_is_n_after_newline": {
            "name": "test_find_column_in_indices_returns_n_minus_1_if_index_is_n_after_newline",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "parsemon2-master/tests/test_until.py": {
        "runner": {
            "name": "runner",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "test_until_failes_if_parser_fails_and_delimiter_parser_fails": {
            "name": "test_until_failes_if_parser_fails_and_delimiter_parser_fails",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "runner": []
            }
        },
        "test_until_returns_empty_tuple_when_only_delimiter_is_found": {
            "name": "test_until_returns_empty_tuple_when_only_delimiter_is_found",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "str"
                ]
            }
        },
        "test_until_consumes_the_delimiter": {
            "name": "test_until_consumes_the_delimiter",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "Container"
                ]
            }
        },
        "test_until_returns_n_elements_when_n_elements_are_found": {
            "name": "test_until_returns_n_elements_when_n_elements_are_found",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "List[str]"
                ],
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "test_until_returns_tuple": {
            "name": "test_until_returns_tuple",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "str"
                ],
                "n": []
            }
        },
        "test_result_list_contains_results_of_supplied_parser": {
            "name": "test_result_list_contains_results_of_supplied_parser",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "runner.fixture": {
            "name": "fixture",
            "location": 14,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/test_validator.py": {
        "test_even_validates_2": {
            "name": "test_even_validates_2",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_even_does_not_validate_5": {
            "name": "test_even_does_not_validate_5",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_odd_does_validate_5": {
            "name": "test_odd_does_validate_5",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_odd_and_even_neither_validate_2_nor_5": {
            "name": "test_odd_and_even_neither_validate_2_nor_5",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_odd_or_even_validates_2_and_5": {
            "name": "test_odd_or_even_validates_2_and_5",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsemon2-master/tests/__init__.py": {}
}
{
    "parsl-master/setup.py": {},
    "parsl-master/docs/conf.py": {
        "linkcode_resolve": {
            "name": "linkcode_resolve",
            "location": 50,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "domain": [
                    "int",
                    "T",
                    "str"
                ],
                "info": [
                    "str",
                    "type",
                    "T",
                    "Tuple[int]"
                ]
            }
        }
    },
    "parsl-master/docs/userguide/examples/config.py": {},
    "parsl-master/docs/userguide/examples/library.py": {
        "increment": {
            "name": "increment",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "parsl-master/docs/userguide/examples/run_increment.py": {},
    "parsl-master/parsl/addresses.py": {
        "address_by_route": {
            "name": "address_by_route",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "address_by_query": {
            "name": "address_by_query",
            "location": 46,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "timeout": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "address_by_hostname": {
            "name": "address_by_hostname",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "address_by_interface": {
            "name": "address_by_interface",
            "location": 80,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "ifname": [
                    "str",
                    "int"
                ]
            }
        },
        "get_all_addresses": {
            "name": "get_all_addresses",
            "location": 100,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executors": [
                    "Optional[str]",
                    "Optional[IO[str]]",
                    "str",
                    "bool"
                ],
                "app_cache": [
                    "bool",
                    "Tuple[str, str]"
                ],
                "checkpoint_files": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "checkpoint_mode": [
                    "Optional[str]",
                    "str"
                ],
                "checkpoint_period": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[dict], None]]",
                    "Optional[Callable[[], None]]",
                    "int",
                    "torch.utils.data.Dataset"
                ],
                "garbage_collect": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Container[str]",
                    "Sequence[str]"
                ],
                "internal_tasks_max_threads": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Dict[str, list]"
                ],
                "retries": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Container[str]",
                    "Sequence[str]"
                ],
                "retry_handler": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "int"
                ],
                "run_dir": [
                    "str",
                    "bool"
                ],
                "strategy": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Container[str]",
                    "Sequence[str]"
                ],
                "max_idletime": [
                    "int",
                    "List[str]",
                    "float",
                    "str",
                    "bool"
                ],
                "monitoring": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Container[str]",
                    "Sequence[str]"
                ],
                "usage_tracking": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Container[str]",
                    "Sequence[str]"
                ],
                "initialize_logging": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Container[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Config.executors": {
            "name": "executors",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executors": [
                    "Iterable[str]",
                    "dict"
                ]
            }
        }
    },
    "parsl-master/parsl/errors.py": {
        "OptionalModuleMissing.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module_names": [
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "reason": [
                    "int",
                    "Sequence",
                    "bool",
                    "str"
                ]
            }
        },
        "OptionalModuleMissing.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/log_utils.py": {
        "set_stream_logger": {
            "name": "set_stream_logger",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "level": [
                    "str",
                    "logging.Formatter",
                    "float",
                    "Optional[str]",
                    "int"
                ],
                "format_string": [
                    "str",
                    "bool",
                    "bytes",
                    "list",
                    "List[str]"
                ],
                "stream": [
                    "str",
                    "logging.Logger",
                    "TextIO"
                ]
            }
        },
        "set_file_logger": {
            "name": "set_file_logger",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "level": [
                    "str",
                    "logging.Formatter",
                    "float",
                    "Optional[str]",
                    "int"
                ],
                "format_string": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/multiprocessing.py": {
        "MacSafeQueue.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MacSafeQueue.put": {
            "name": "put",
            "location": 32,
            "return": [
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacSafeQueue.get": {
            "name": "get",
            "location": 39,
            "return": [
                "str",
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacSafeQueue.qsize": {
            "name": "qsize",
            "location": 46,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MacSafeQueue.empty": {
            "name": "empty",
            "location": 49,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/process_loggers.py": {
        "wrap_with_logs": {
            "name": "wrap_with_logs",
            "location": 8,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "fn": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ],
                "target": [
                    "List[str]",
                    "bool",
                    "AbstractSet[str]",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "wrap_with_logs.decorator": {
            "name": "decorator",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "wrap_with_logs.decorator.wrapped": {
            "name": "wrapped",
            "location": 20,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/utils.py": {
        "get_version": {
            "name": "get_version",
            "location": 28,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, Tuple[str, str]]"
            ],
            "arguments": {}
        },
        "get_all_checkpoints": {
            "name": "get_all_checkpoints",
            "location": 47,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "rundir": [
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "get_last_checkpoint": {
            "name": "get_last_checkpoint",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "rundir": [
                    "str"
                ]
            }
        },
        "get_std_fname_mode": {
            "name": "get_std_fname_mode",
            "location": 108,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[str]",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {
                "fdname": [],
                "stdfspec": [
                    "Optional[int]",
                    "Optional[List[str]]",
                    "int",
                    "Optional[Tuple[Any, Any]]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Set[str]"
                ]
            }
        },
        "wait_for_file": {
            "name": "wait_for_file",
            "location": 132,
            "return": [
                "typing.Generator[None, None, None]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "seconds": [
                    "int",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "time_limited_open": {
            "name": "time_limited_open",
            "location": 141,
            "return": [
                "typing.Generator[typing.IO[typing.AnyStr], None, None]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ],
                "mode": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bool"
                ],
                "seconds": [
                    "int",
                    "str",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "wtime_to_minutes": {
            "name": "wtime_to_minutes",
            "location": 149,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "time_string": [
                    "str",
                    "Pattern",
                    "Optional[Iterable]",
                    "list"
                ]
            }
        },
        "setproctitle": {
            "name": "setproctitle",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int",
                    "Union[str, List[str]]"
                ]
            }
        },
        "RepresentationMixin.__repr__": {
            "name": "__repr__",
            "location": 196,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtomicIDCounter.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AtomicIDCounter.get_id": {
            "name": "get_id",
            "location": 262,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepresentationMixin.__repr__.assemble_multiline": {
            "name": "assemble_multiline",
            "location": 229,
            "return": [
                "str",
                "Callable[[str], None]",
                "bool"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "RepresentationMixin.__repr__.assemble_line": {
            "name": "assemble_line",
            "location": 242,
            "return": [
                "str",
                "bool",
                "Type",
                "int"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "RepresentationMixin.__repr__.assemble_multiline.indent": {
            "name": "indent",
            "location": 230,
            "return": [
                "Optional[Callable]",
                "Optional[List[str]]",
                "Optional[str]",
                "Union[int, None]",
                "bool",
                "Optional[T]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/version.py": {},
    "parsl-master/parsl/__init__.py": {},
    "parsl-master/parsl/app/app.py": {
        "python_app": {
            "name": "python_app",
            "location": 72,
            "return": [
                "Callable",
                "Type"
            ],
            "arguments": {
                "function": [
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "data_flow_kernel": [
                    "int",
                    "bool"
                ],
                "cache": [
                    "int",
                    "bool"
                ],
                "executors": [
                    "int",
                    "bool"
                ],
                "ignore_for_cache": [
                    "int",
                    "bool"
                ],
                "join": [
                    "int",
                    "bool"
                ]
            }
        },
        "join_app": {
            "name": "join_app",
            "location": 116,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "function": [
                    "bool"
                ],
                "data_flow_kernel": [
                    "bool"
                ],
                "cache": [
                    "bool"
                ],
                "ignore_for_cache": [
                    "bool"
                ]
            }
        },
        "bash_app": {
            "name": "bash_app",
            "location": 129,
            "return": [
                "Callable",
                "Type"
            ],
            "arguments": {
                "function": [
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "data_flow_kernel": [
                    "int",
                    "bool"
                ],
                "cache": [
                    "int",
                    "bool"
                ],
                "executors": [
                    "int",
                    "bool"
                ],
                "ignore_for_cache": [
                    "int",
                    "bool"
                ]
            }
        },
        "AppBase.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "bool",
                    "int",
                    "List[\"DictDataLoader\"]",
                    "Tuple[int, int]"
                ],
                "data_flow_kernel": [
                    "bool"
                ],
                "executors": [
                    "bool",
                    "Tuple[str, str]",
                    "Optional[Union[int, str]]",
                    "Callable"
                ],
                "cache": [
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "ignore_for_cache": [
                    "int",
                    "Optional[Any]",
                    "Callable[[str], bool]",
                    "bool"
                ]
            }
        },
        "AppBase.__call__": {
            "name": "__call__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "python_app.decorator": {
            "name": "decorator",
            "location": 101,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "bash_app.decorator": {
            "name": "decorator",
            "location": 155,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "python_app.decorator.wrapper": {
            "name": "wrapper",
            "location": 102,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "bash_app.decorator.wrapper": {
            "name": "wrapper",
            "location": 156,
            "return": [
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "dict",
                    "T"
                ]
            }
        }
    },
    "parsl-master/parsl/app/bash.py": {
        "remote_side_bash_executor": {
            "name": "remote_side_bash_executor",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "remote_side_bash_executor.open_std_fd": {
            "name": "open_std_fd",
            "location": 51,
            "return": [
                "Optional[str]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "fdname": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "BashApp.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Optional[int]",
                    "int",
                    "Optional[List[int]]",
                    "Optional[Dict]"
                ],
                "data_flow_kernel": [
                    "Optional[int]",
                    "int",
                    "Dict[str, int]",
                    "Optional[str]",
                    "bool"
                ],
                "cache": [
                    "Optional[int]",
                    "int",
                    "Dict[str, int]",
                    "Optional[str]",
                    "bool"
                ],
                "executors": [
                    "Optional[int]",
                    "int",
                    "Dict[str, int]",
                    "Optional[str]",
                    "bool"
                ],
                "ignore_for_cache": [
                    "Optional[int]",
                    "int",
                    "Dict[str, int]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "BashApp.__call__": {
            "name": "__call__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/app/errors.py": {
        "wrap_error": {
            "name": "wrap_error",
            "location": 170,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "func": [
                    "Callable[[], Any]",
                    "Callable"
                ]
            }
        },
        "BashExitFailure.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str"
                ],
                "exitcode": [
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "BashExitFailure.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BashAppNoReturn.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "Exception"
                ]
            }
        },
        "MissingOutputs.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "bytes",
                    "BinaryIO"
                ],
                "outputs": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "MissingOutputs.__repr__": {
            "name": "__repr__",
            "location": 89,
            "return": [
                "dict",
                "str",
                "Iterable['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadStdStreamFile.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "float"
                ],
                "exception": [
                    "str",
                    "Exception"
                ]
            }
        },
        "BadStdStreamFile.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadStdStreamFile.__str__": {
            "name": "__str__",
            "location": 110,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteExceptionWrapper.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_type": [
                    "str",
                    "Type",
                    "mypy.types.Type",
                    "int"
                ],
                "e_value": [
                    "FrozenSet[str]",
                    "Optional[str]",
                    "bool",
                    "Callable"
                ],
                "traceback": [
                    "Optional[float]",
                    "Optional[Callable[[bool], None]]",
                    "Optional[int]"
                ]
            }
        },
        "RemoteExceptionWrapper.reraise": {
            "name": "reraise",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteExceptionWrapper.get_exception": {
            "name": "get_exception",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "wrap_error.wrapper": {
            "name": "wrapper",
            "location": 172,
            "return": [
                "int",
                "str",
                "Mapping[str, Sequence[str]]",
                "Dict[str, int]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/app/futures.py": {
        "DataFuture.parent_callback": {
            "name": "parent_callback",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_fu": [
                    "str",
                    "type",
                    "Iterable[str]"
                ]
            }
        },
        "DataFuture.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fut": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "Optional[Union[Any, Any]]"
                ],
                "file_obj": [
                    "Dict[str, Any]",
                    "List[str]",
                    "str"
                ],
                "tid": [
                    "str",
                    "TextIO",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "DataFuture.tid": {
            "name": "tid",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFuture.filepath": {
            "name": "filepath",
            "location": 78,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFuture.filename": {
            "name": "filename",
            "location": 83,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFuture.cancel": {
            "name": "cancel",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFuture.cancelled": {
            "name": "cancelled",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFuture.running": {
            "name": "running",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFuture.__repr__": {
            "name": "__repr__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/app/python.py": {
        "timeout": {
            "name": "timeout",
            "location": 14,
            "return": [
                "int",
                "str",
                "Union[str, int, float]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ],
                "seconds": [
                    "int",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        },
        "timeout.wrapper": {
            "name": "wrapper",
            "location": 15,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "PythonApp.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "data_flow_kernel": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "cache": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "executors": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "ignore_for_cache": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "join": [
                    "int",
                    "Optional[Any]",
                    "Callable[[str], bool]",
                    "bool"
                ]
            }
        },
        "PythonApp.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "timeout.wrapper.inject_exception": {
            "name": "inject_exception",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "thread": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/app/__init__.py": {},
    "parsl-master/parsl/channels/base.py": {
        "Channel.execute_wait": {
            "name": "execute_wait",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "walltime": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "envs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Channel.script_dir": {
            "name": "script_dir",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.push_file": {
            "name": "push_file",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "List[str]",
                    "str",
                    "float",
                    "bool"
                ],
                "dest_dir": [
                    "List[str]",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Channel.pull_file": {
            "name": "pull_file",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "remote_source": [
                    "bool",
                    "str",
                    "list"
                ],
                "local_dir": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "Channel.close": {
            "name": "close",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.makedirs": {
            "name": "makedirs",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "int",
                    "str",
                    "bool"
                ],
                "mode": [
                    "int",
                    "str",
                    "bool"
                ],
                "exist_ok": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Channel.isdir": {
            "name": "isdir",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Channel.abspath": {
            "name": "abspath",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/channels/errors.py": {
        "ChannelError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Tuple[List[str], Optional[str]]",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "List[\"Outcome\"]"
                ],
                "e": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Tuple[List[str], Optional[str]]",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "List[\"Outcome\"]"
                ],
                "hostname": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Tuple[List[str], Optional[str]]",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "List[\"Outcome\"]"
                ]
            }
        },
        "ChannelError.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelError.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadHostKeyException.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Exception"
                ],
                "hostname": [
                    "str",
                    "Exception"
                ]
            }
        },
        "BadScriptPath.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Exception"
                ],
                "hostname": [
                    "str",
                    "Exception"
                ]
            }
        },
        "BadPermsScriptPath.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Exception"
                ],
                "hostname": [
                    "str",
                    "Exception"
                ]
            }
        },
        "FileExists.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Exception",
                    "Optional[str]"
                ],
                "hostname": [
                    "str",
                    "Exception",
                    "Optional[str]"
                ],
                "filename": [
                    "str",
                    "Exception",
                    "Optional[str]"
                ]
            }
        },
        "AuthException.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Exception"
                ],
                "hostname": [
                    "str",
                    "Exception"
                ]
            }
        },
        "SSHException.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Exception"
                ],
                "hostname": [
                    "str",
                    "Exception"
                ]
            }
        },
        "FileCopyException.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Exception",
                    "Callable",
                    "int",
                    "Optional[bool]"
                ],
                "hostname": [
                    "str",
                    "Exception",
                    "Callable",
                    "int",
                    "Optional[bool]"
                ]
            }
        }
    },
    "parsl-master/parsl/channels/__init__.py": {},
    "parsl-master/parsl/channels/local/local.py": {
        "LocalChannel.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "userhome": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "envs": [
                    "List[Dict[str, Any]]",
                    "dict",
                    "Dict[str, Union[str, int]]",
                    "utils.MinMaxStats",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ],
                "script_dir": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "LocalChannel.execute_wait": {
            "name": "execute_wait",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str"
                ],
                "walltime": [
                    "str",
                    "float",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "envs": [
                    "bytes",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "LocalChannel.push_file": {
            "name": "push_file",
            "location": 80,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int"
                ],
                "dest_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "LocalChannel.pull_file": {
            "name": "pull_file",
            "location": 111,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "remote_source": [
                    "str"
                ],
                "local_dir": [
                    "str"
                ]
            }
        },
        "LocalChannel.close": {
            "name": "close",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalChannel.isdir": {
            "name": "isdir",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "LocalChannel.makedirs": {
            "name": "makedirs",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bool"
                ],
                "mode": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bool"
                ],
                "exist_ok": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "bool"
                ]
            }
        },
        "LocalChannel.abspath": {
            "name": "abspath",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "LocalChannel.script_dir": {
            "name": "script_dir",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "bytes",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "parsl-master/parsl/channels/local/__init__.py": {},
    "parsl-master/parsl/channels/oauth_ssh/oauth_ssh.py": {
        "OAuthSSHChannel.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str",
                    "logging.LogRecord"
                ],
                "username": [],
                "script_dir": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "envs": [
                    "Optional[Set[int]]"
                ],
                "port": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "OAuthSSHChannel.execute_wait": {
            "name": "execute_wait",
            "location": 68,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "Optional[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "int",
                    "Sequence[int]"
                ],
                "walltime": [
                    "int",
                    "Callable",
                    "str"
                ],
                "envs": [
                    "Optional[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "OAuthSSHChannel.close": {
            "name": "close",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/channels/oauth_ssh/__init__.py": {},
    "parsl-master/parsl/channels/ssh/ssh.py": {
        "NoAuthSSHClient._auth": {
            "name": "_auth",
            "location": 14,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, bool]",
                    "Dict[str, str]"
                ]
            }
        },
        "SSHChannel.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "username": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "password": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "script_dir": [
                    "str",
                    "Optional[str]"
                ],
                "envs": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "bool",
                    "Optional[Union[str, Any]]"
                ],
                "gssapi_auth": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "skip_auth": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "port": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "key_filename": [
                    "str"
                ],
                "host_keys_filename": [
                    "str",
                    "float",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "SSHChannel._is_connected": {
            "name": "_is_connected",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHChannel._connect": {
            "name": "_connect",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHChannel._valid_sftp_client": {
            "name": "_valid_sftp_client",
            "location": 104,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHChannel._valid_ssh_client": {
            "name": "_valid_ssh_client",
            "location": 108,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHChannel.prepend_envs": {
            "name": "prepend_envs",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "List[str]",
                    "alerta.database.base.Query",
                    "Optional[Dict[Hashable, Any]]"
                ],
                "env": [
                    "dict",
                    "List[List]",
                    "Dict[Hashable, Any]",
                    "Callable",
                    "graphql.execution.base.ResolveInfo",
                    "Mapping[Any, Any]"
                ]
            }
        },
        "SSHChannel.execute_wait": {
            "name": "execute_wait",
            "location": 120,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "Mapping",
                    "IO"
                ],
                "walltime": [
                    "str",
                    "Mapping",
                    "IO"
                ],
                "envs": [
                    "str",
                    "Mapping",
                    "IO"
                ]
            }
        },
        "SSHChannel.push_file": {
            "name": "push_file",
            "location": 147,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "local_source": [
                    "str",
                    "bool"
                ],
                "remote_dir": [
                    "str"
                ]
            }
        },
        "SSHChannel.pull_file": {
            "name": "pull_file",
            "location": 187,
            "return": [
                "str",
                "int",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "remote_source": [
                    "str"
                ],
                "local_dir": [
                    "str"
                ]
            }
        },
        "SSHChannel.close": {
            "name": "close",
            "location": 220,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHChannel.isdir": {
            "name": "isdir",
            "location": 224,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SSHChannel.makedirs": {
            "name": "makedirs",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Union[None, str]"
                ],
                "mode": [
                    "str",
                    "Literal"
                ],
                "exist_ok": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "SSHChannel.abspath": {
            "name": "abspath",
            "location": 260,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "SSHChannel.script_dir": {
            "name": "script_dir",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list",
                    "object",
                    "bytes",
                    "Union[Dict[str, Any], List[Any]]"
                ]
            }
        }
    },
    "parsl-master/parsl/channels/ssh/__init__.py": {},
    "parsl-master/parsl/channels/ssh_il/ssh_il.py": {
        "SSHInteractiveLoginChannel.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "script_dir": [
                    "str",
                    "Optional[str]"
                ],
                "envs": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/channels/ssh_il/__init__.py": {},
    "parsl-master/parsl/configs/ad_hoc.py": {},
    "parsl-master/parsl/configs/ASPIRE1.py": {},
    "parsl-master/parsl/configs/Azure.py": {},
    "parsl-master/parsl/configs/bluewaters.py": {},
    "parsl-master/parsl/configs/bridges.py": {},
    "parsl-master/parsl/configs/cc_in2p3.py": {},
    "parsl-master/parsl/configs/comet.py": {},
    "parsl-master/parsl/configs/cooley.py": {},
    "parsl-master/parsl/configs/cori.py": {},
    "parsl-master/parsl/configs/ec2.py": {},
    "parsl-master/parsl/configs/exex_local.py": {},
    "parsl-master/parsl/configs/frontera.py": {},
    "parsl-master/parsl/configs/htex_local.py": {},
    "parsl-master/parsl/configs/illinoiscluster.py": {},
    "parsl-master/parsl/configs/kubernetes.py": {},
    "parsl-master/parsl/configs/local_threads.py": {},
    "parsl-master/parsl/configs/midway.py": {},
    "parsl-master/parsl/configs/osg.py": {},
    "parsl-master/parsl/configs/stampede2.py": {},
    "parsl-master/parsl/configs/summit.py": {},
    "parsl-master/parsl/configs/theta.py": {},
    "parsl-master/parsl/configs/toss3_llnl.py": {},
    "parsl-master/parsl/configs/wqex_local.py": {},
    "parsl-master/parsl/configs/__init__.py": {},
    "parsl-master/parsl/dataflow/dflow.py": {
        "DataFlowKernel.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "model.Config",
                    "pyramid.config.Configurator",
                    "Dict[str, str]"
                ]
            }
        },
        "DataFlowKernel._send_task_log_info": {
            "name": "_send_task_log_info",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_record": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "DataFlowKernel._create_task_log_info": {
            "name": "_create_task_log_info",
            "location": 198,
            "return": [
                "List[cmk.utils.type_defs.HostName]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "task_record": [
                    "logging.Logger",
                    "Dict[str, Any]"
                ]
            }
        },
        "DataFlowKernel._count_deps": {
            "name": "_count_deps",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "depends": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DataFlowKernel.config": {
            "name": "config",
            "location": 258,
            "return": [
                "str",
                "Optional[dict]",
                "app.App",
                "app.config.MQConfig",
                "dict",
                "Config",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFlowKernel.handle_exec_update": {
            "name": "handle_exec_update",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_record": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "future": [
                    "Iterable[Any]",
                    "Iterable[Iterable[str]]",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "DataFlowKernel.handle_join_update": {
            "name": "handle_join_update",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_record": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "inner_app_future": [
                    "int",
                    "str"
                ]
            }
        },
        "DataFlowKernel.handle_app_update": {
            "name": "handle_app_update",
            "location": 413,
            "return": [
                "Union[tuple, list]",
                "Optional[bool]",
                "app.models.move.Coordinate"
            ],
            "arguments": {
                "self": [],
                "task_record": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "future": [
                    "str",
                    "Callable",
                    "Optional[List[Any]]"
                ]
            }
        },
        "DataFlowKernel._complete_task": {
            "name": "_complete_task",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_record": [
                    "dict",
                    "OrderedDict",
                    "str"
                ],
                "new_state": [
                    "bool",
                    "List[str]",
                    "raiden.utils.ChannelID"
                ],
                "result": [
                    "str",
                    "Iterator[Any]",
                    "bool",
                    "List[Dict]",
                    "Dict[str, Set[str]]",
                    "Optional[Dict[str, str]]",
                    "Optional[str]"
                ]
            }
        },
        "DataFlowKernel.update_task_state": {
            "name": "update_task_state",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_record": [
                    "utils.clienClient"
                ],
                "new_state": [
                    "utils.clienClient",
                    "Optional[raiden.utils.Address]"
                ]
            }
        },
        "DataFlowKernel._unwrap_remote_exception_wrapper": {
            "name": "_unwrap_remote_exception_wrapper",
            "location": 471,
            "return": [
                "bool",
                "str",
                "Tuple[int, Dict[str, Any]]",
                "Dict[str, Tuple[int, int]]",
                "Iterable"
            ],
            "arguments": {
                "future": [
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, Any]",
                    "Sequence['cirq.Qid']",
                    "str"
                ]
            }
        },
        "DataFlowKernel.wipe_task": {
            "name": "wipe_task",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DataFlowKernel.check_staging_inhibited": {
            "name": "check_staging_inhibited",
            "location": 484,
            "return": [
                "bool",
                "int",
                "str",
                "tuple",
                "Optional[bytes]",
                "List[str]"
            ],
            "arguments": {
                "kwargs": []
            }
        },
        "DataFlowKernel.launch_if_ready": {
            "name": "launch_if_ready",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_record": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "DataFlowKernel.launch_task": {
            "name": "launch_task",
            "location": 557,
            "return": [
                "str",
                "bytes",
                "bool",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "task_record": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "executable": [
                    "str",
                    "Awaitable",
                    "Optional[Mapping]"
                ]
            }
        },
        "DataFlowKernel._add_input_deps": {
            "name": "_add_input_deps",
            "location": 624,
            "return": [
                "Mapping[str, Sequence[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "Dict[str, Any]",
                    "Callable",
                    "dict",
                    "Callable[..., T]",
                    "config.Config"
                ],
                "args": [],
                "kwargs": [],
                "func": [
                    "Callable",
                    "Callable[[T], Optional[T]]",
                    "Iterable[T]",
                    "Callable[..., T]"
                ]
            }
        },
        "DataFlowKernel._add_output_deps": {
            "name": "_add_output_deps",
            "location": 654,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "app.GrpyApp",
                    "Callable"
                ],
                "args": [],
                "kwargs": [],
                "app_fut": [
                    "Dict[str, int]"
                ],
                "func": [
                    "str",
                    "app.GrpyApp",
                    "Callable"
                ]
            }
        },
        "DataFlowKernel._gather_all_deps": {
            "name": "_gather_all_deps",
            "location": 689,
            "return": [
                "int",
                "datetime.timedelta",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "DataFlowKernel.sanitize_and_wrap": {
            "name": "sanitize_and_wrap",
            "location": 721,
            "return": [
                "type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "DataFlowKernel.submit": {
            "name": "submit",
            "location": 790,
            "return": [
                "abilian.app.Application"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "bool",
                    "str"
                ],
                "app_args": [
                    "bool",
                    "str"
                ],
                "executors": [
                    "bool",
                    "str"
                ],
                "cache": [
                    "bool",
                    "str"
                ],
                "ignore_for_cache": [
                    "bool",
                    "str"
                ],
                "app_kwargs": [
                    "bool",
                    "str"
                ],
                "join": [
                    "bool",
                    "str"
                ]
            }
        },
        "DataFlowKernel.log_task_states": {
            "name": "log_task_states",
            "location": 955,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFlowKernel._create_remote_dirs_over_channel": {
            "name": "_create_remote_dirs_over_channel",
            "location": 964,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ],
                "channel": [
                    "str"
                ]
            }
        },
        "DataFlowKernel.add_executors": {
            "name": "add_executors",
            "location": 987,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executors": [
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "Optional[Callable]"
                ]
            }
        },
        "DataFlowKernel.atexit_cleanup": {
            "name": "atexit_cleanup",
            "location": 1016,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFlowKernel.wait_for_current_tasks": {
            "name": "wait_for_current_tasks",
            "location": 1020,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFlowKernel.cleanup": {
            "name": "cleanup",
            "location": 1043,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFlowKernel.checkpoint": {
            "name": "checkpoint",
            "location": 1122,
            "return": [
                "str",
                "pathlib.Path",
                "int",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "tasks": [
                    "dict",
                    "datetime.timedelta",
                    "Callable[[datetime.datetime], Awaitable[None]]"
                ]
            }
        },
        "DataFlowKernel._load_checkpoints": {
            "name": "_load_checkpoints",
            "location": 1200,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "checkpointDirs": [
                    "bool",
                    "str",
                    "list",
                    "IO[str]"
                ]
            }
        },
        "DataFlowKernel.load_checkpoints": {
            "name": "load_checkpoints",
            "location": 1250,
            "return": [
                "int",
                "threading.Event",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "checkpointDirs": [
                    "List[str]",
                    "set",
                    "dict",
                    "Dict[str, Set[str]]",
                    "Tuple[Any, Any, Any]",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "DataFlowKernel._log_std_streams": {
            "name": "_log_std_streams",
            "location": 1273,
            "return": [
                ""
            ],
            "arguments": {
                "task_record": [
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ]
            }
        },
        "DataFlowKernelLoader.clear": {
            "name": "clear",
            "location": 1290,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "float",
                    "Optional[T]",
                    "int",
                    "str"
                ]
            }
        },
        "DataFlowKernelLoader.load": {
            "name": "load",
            "location": 1296,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "pyramid.config.Configurator",
                    "core.Config",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "_vendor.traitlets.config.Config",
                    "Type['BaseConfig']"
                ],
                "config": [
                    "dict",
                    "pyramid.config.Configurator",
                    "Optional[str]"
                ]
            }
        },
        "DataFlowKernelLoader.wait_for_current_tasks": {
            "name": "wait_for_current_tasks",
            "location": 1316,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "DataFlowKernelLoader.dfk": {
            "name": "dfk",
            "location": 1324,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "Callable[..., T]",
                    "int",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "DataFlowKernel._gather_all_deps.check_dep": {
            "name": "check_dep",
            "location": 702,
            "return": [
                ""
            ],
            "arguments": {
                "d": [
                    "Tuple[bool, str]",
                    "List[str]",
                    "T",
                    "bytes"
                ]
            }
        },
        "DataFlowKernel.submit.callback_adapter": {
            "name": "callback_adapter",
            "location": 936,
            "return": [
                ""
            ],
            "arguments": {
                "dep_fut": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/dataflow/error.py": {
        "BadCheckpoint.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BadCheckpoint.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadCheckpoint.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyError.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dependent_exceptions_tids": [
                    "str",
                    "Any",
                    "FrozenSet[str]",
                    "bool"
                ],
                "task_id": [
                    "str",
                    "int",
                    "bytes",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "DependencyError.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/dataflow/executor_status.py": {
        "ExecutorStatus.executor": {
            "name": "executor",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutorStatus.status": {
            "name": "status",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/dataflow/flow_control.py": {
        "FlowControl.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dfk": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "FlowControl._wake_up_timer": {
            "name": "_wake_up_timer",
            "location": 72,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "kill_event": [
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "FlowControl.notify": {
            "name": "notify",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_id": [
                    "str",
                    "int"
                ]
            }
        },
        "FlowControl.make_callback": {
            "name": "make_callback",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowControl.add_executors": {
            "name": "add_executors",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executors": [
                    "Callable",
                    "str",
                    "int"
                ]
            }
        },
        "FlowControl.close": {
            "name": "close",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Timer._wake_up_timer": {
            "name": "_wake_up_timer",
            "location": 169,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "kill_event": [
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "Timer.make_callback": {
            "name": "make_callback",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.close": {
            "name": "close",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "foo": {
            "name": "foo",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "cback": {
            "name": "cback",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/dataflow/futures.py": {
        "AppFuture.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_def": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "AppFuture.stdout": {
            "name": "stdout",
            "location": 73,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppFuture.stderr": {
            "name": "stderr",
            "location": 77,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppFuture.tid": {
            "name": "tid",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppFuture.cancel": {
            "name": "cancel",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppFuture.cancelled": {
            "name": "cancelled",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppFuture.task_status": {
            "name": "task_status",
            "location": 90,
            "return": [
                "str",
                "bool",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppFuture.outputs": {
            "name": "outputs",
            "location": 114,
            "return": [
                "int",
                "bytes",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/dataflow/job_error_handler.py": {
        "JobErrorHandler.run": {
            "name": "run",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Callable[[], bool]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "JobErrorHandler._check_irrecoverable_executor": {
            "name": "_check_irrecoverable_executor",
            "location": 13,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "es": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Optional[Dict]",
                    "int"
                ]
            }
        },
        "JobErrorHandler.simple_error_handler": {
            "name": "simple_error_handler",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "bool",
                    "int",
                    "str",
                    "Exception",
                    "bytes"
                ],
                "status": [
                    "int",
                    "str",
                    "bool"
                ],
                "threshold": [
                    "str",
                    "int"
                ]
            }
        },
        "JobErrorHandler.count_jobs": {
            "name": "count_jobs",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "bytes",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "JobErrorHandler.get_error": {
            "name": "get_error",
            "location": 32,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/dataflow/memoization.py": {
        "id_for_memo": {
            "name": "id_for_memo",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "MutableMapping[str, Any]",
                    "T",
                    "Exception",
                    "logging.Logger"
                ],
                "output_ref": [
                    "bool",
                    "int",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "id_for_memo_serialize": {
            "name": "id_for_memo_serialize",
            "location": 49,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[Set[str]]"
                ],
                "output_ref": [
                    "bool",
                    "int",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "id_for_memo_list": {
            "name": "id_for_memo_list",
            "location": 54,
            "return": [
                "List[str]",
                "str",
                "bytes",
                "List[float]"
            ],
            "arguments": {
                "denormalized_list": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "list",
                    "List[List[Any]]",
                    "Dict[str, str]"
                ],
                "output_ref": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "Container[str]"
                ]
            }
        },
        "id_for_memo_tuple": {
            "name": "id_for_memo_tuple",
            "location": 67,
            "return": [
                "List[str]",
                "str",
                "bytes",
                "List[float]"
            ],
            "arguments": {
                "denormalized_tuple": [
                    "int",
                    "Optional[bool]"
                ],
                "output_ref": [
                    "str",
                    "float",
                    "dict",
                    "int",
                    "Container[str]"
                ]
            }
        },
        "id_for_memo_dict": {
            "name": "id_for_memo_dict",
            "location": 80,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "list",
                "List[float]"
            ],
            "arguments": {
                "denormalized_dict": [
                    "Union[str, dict]",
                    "dict",
                    "str"
                ],
                "output_ref": [
                    "List[int]",
                    "int",
                    "Set[str]",
                    "bytes",
                    "Set[int]"
                ]
            }
        },
        "id_for_memo_function": {
            "name": "id_for_memo_function",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "function": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "bytes",
                    "Optional[Set[str]]"
                ],
                "output_ref": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "Memoizer.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dfk": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "memoize": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "checkpoint": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Memoizer.make_hash": {
            "name": "make_hash",
            "location": 170,
            "return": [
                "bool",
                "str",
                "IO[Any]",
                "float",
                "Tuple[bytes]",
                "int"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Memoizer.check_memo": {
            "name": "check_memo",
            "location": 209,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "dict",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Memoizer.hash_lookup": {
            "name": "hash_lookup",
            "location": 246,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "hashsum": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Memoizer.update_memo": {
            "name": "update_memo",
            "location": 260,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "r": [
                    "dict"
                ]
            }
        }
    },
    "parsl-master/parsl/dataflow/rundirs.py": {
        "make_rundir": {
            "name": "make_rundir",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/dataflow/states.py": {},
    "parsl-master/parsl/dataflow/strategy.py": {
        "Strategy.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dfk": [
                    "Dict[str, Any]",
                    "Mapping[str, str]"
                ]
            }
        },
        "Strategy.add_executors": {
            "name": "add_executors",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executors": [
                    "float",
                    "List[str]"
                ]
            }
        },
        "Strategy._strategy_noop": {
            "name": "_strategy_noop",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "bool",
                    "int",
                    "str"
                ],
                "tasks": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Strategy._strategy_simple": {
            "name": "_strategy_simple",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_list": [
                    "T",
                    "Dict[str, Any]",
                    "Optional[Tuple[str, str]]",
                    "int"
                ],
                "tasks": [
                    "T",
                    "Dict[str, Any]",
                    "Optional[Tuple[str, str]]",
                    "int"
                ]
            }
        },
        "Strategy._strategy_htex_auto_scale": {
            "name": "_strategy_htex_auto_scale",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_list": [
                    "T",
                    "Dict[str, Any]",
                    "Optional[Tuple[str, str]]",
                    "int"
                ],
                "tasks": [
                    "T",
                    "Dict[str, Any]",
                    "Optional[Tuple[str, str]]",
                    "int"
                ]
            }
        },
        "Strategy._general_strategy": {
            "name": "_general_strategy",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_list": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "Optional[float]",
                    "int",
                    "Callable"
                ],
                "tasks": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "Optional[float]",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "parsl-master/parsl/dataflow/task_status_poller.py": {
        "PollItem.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "int",
                    "str",
                    "float",
                    "dict"
                ],
                "dfk": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PollItem._should_poll": {
            "name": "_should_poll",
            "location": 39,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "float",
                    "int",
                    "Tuple[float, float]",
                    "bool",
                    "list",
                    "dict"
                ]
            }
        },
        "PollItem.poll": {
            "name": "poll",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "now": [
                    "int"
                ]
            }
        },
        "PollItem.send_monitoring_info": {
            "name": "send_monitoring_info",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Dict[str, str]",
                    "list",
                    "str",
                    "dict"
                ]
            }
        },
        "PollItem.status": {
            "name": "status",
            "location": 56,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollItem.executor": {
            "name": "executor",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PollItem.scale_in": {
            "name": "scale_in",
            "location": 67,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str"
                ],
                "force": [
                    "int"
                ],
                "max_idletime": [
                    "int"
                ]
            }
        },
        "PollItem.scale_out": {
            "name": "scale_out",
            "location": 80,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "PollItem.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskStatusPoller.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dfk": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TaskStatusPoller.poll": {
            "name": "poll",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tasks": [
                    "str",
                    "int",
                    "\"Step\"",
                    "bool"
                ]
            }
        },
        "TaskStatusPoller._update_state": {
            "name": "_update_state",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskStatusPoller.add_executors": {
            "name": "add_executors",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executors": [
                    "int"
                ]
            }
        }
    },
    "parsl-master/parsl/dataflow/__init__.py": {},
    "parsl-master/parsl/dataflow/usage_tracking/usage.py": {
        "async_process": {
            "name": "async_process",
            "location": 20,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "udp_messenger": {
            "name": "udp_messenger",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "domain_name": [
                    "str",
                    "Optional[\"Address\"]",
                    "List[str]"
                ],
                "UDP_IP": [
                    "Optional[str]",
                    "Optional['Block']",
                    "int",
                    "bool",
                    "Optional[\"LocalizedString\"]"
                ],
                "UDP_PORT": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Dict[str, str]]",
                    "int",
                    "Optional[int]"
                ],
                "sock_timeout": [
                    "int",
                    "float",
                    "Dict[int, Dict[int, Any]]",
                    "bool",
                    "str"
                ],
                "message": [
                    "str",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "async_process.run": {
            "name": "run",
            "location": 23,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {}
        },
        "UsageTracker.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dfk": [
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str",
                    "Optional[str]"
                ],
                "ip": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "float"
                ],
                "port": [
                    "bool",
                    "float",
                    "list",
                    "Optional[bool]"
                ],
                "domain_name": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "UsageTracker.check_tracking_enabled": {
            "name": "check_tracking_enabled",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageTracker.construct_start_message": {
            "name": "construct_start_message",
            "location": 151,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageTracker.construct_end_message": {
            "name": "construct_end_message",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageTracker.send_UDP_message": {
            "name": "send_UDP_message",
            "location": 198,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "int",
                    "bool"
                ]
            }
        },
        "UsageTracker.send_message": {
            "name": "send_message",
            "location": 212,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageTracker.__del__": {
            "name": "__del__",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageTracker.close": {
            "name": "close",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/dataflow/usage_tracking/__init__.py": {},
    "parsl-master/parsl/data_provider/data_manager.py": {
        "DataManager.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dfk": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DataManager.replace_task_stage_out": {
            "name": "replace_task_stage_out",
            "location": 37,
            "return": [
                "logging.LogRecord",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bytes"
                ],
                "func": [
                    "dict",
                    "str",
                    "Sequence[str]"
                ],
                "executor": [
                    "str",
                    "dict",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "DataManager.optionally_stage_in": {
            "name": "optionally_stage_in",
            "location": 58,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "Callable",
                    "str"
                ],
                "func": [
                    "Type"
                ],
                "executor": [
                    "Callable"
                ]
            }
        },
        "DataManager.replace_task": {
            "name": "replace_task",
            "location": 77,
            "return": [
                "logging.LogRecord",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ],
                "func": [
                    "str"
                ],
                "executor": [
                    "str",
                    "int",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "DataManager.stage_in": {
            "name": "stage_in",
            "location": 99,
            "return": [
                "Iterator",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "int",
                    "BinaryIO"
                ],
                "input": [
                    "str",
                    "int",
                    "TextIO",
                    "BinaryIO",
                    "Callable"
                ],
                "executor": [
                    "bool",
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "DataManager.stage_out": {
            "name": "stage_out",
            "location": 140,
            "return": [
                "str",
                "Optional[int]",
                "bytes",
                "BinaryIO",
                "django.core.files.uploadedfile.UploadedFile"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "executor": [
                    "str"
                ],
                "app_fu": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "parsl-master/parsl/data_provider/files.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "File.cleancopy": {
            "name": "cleancopy",
            "location": 49,
            "return": [
                "bool",
                "str",
                "IO",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.__fspath__": {
            "name": "__fspath__",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.filepath": {
            "name": "filepath",
            "location": 77,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/data_provider/file_noop.py": {
        "NoOpFileStaging.can_stage_in": {
            "name": "can_stage_in",
            "location": 12,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "NoOpFileStaging.can_stage_out": {
            "name": "can_stage_out",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "logging.Logger"
                ]
            }
        }
    },
    "parsl-master/parsl/data_provider/ftp.py": {
        "in_task_transfer_wrapper": {
            "name": "in_task_transfer_wrapper",
            "location": 53,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "file": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "working_dir": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "_ftp_stage_in": {
            "name": "_ftp_stage_in",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "working_dir": [
                    "str",
                    "bool"
                ],
                "parent_fut": [
                    "str",
                    "bool",
                    "Optional[Exception]",
                    "List[str]"
                ],
                "outputs": [
                    "IO[str]",
                    "parsl.data_provider.files.File",
                    "bool",
                    "str",
                    "int"
                ],
                "_parsl_staging_inhibit": [
                    "str",
                    "bool",
                    "Optional[Exception]",
                    "List[str]"
                ]
            }
        },
        "_ftp_stage_in_app": {
            "name": "_ftp_stage_in_app",
            "location": 83,
            "return": [
                "float",
                "Mapping[str, Any]",
                "Callable",
                "Callable[[str], None]"
            ],
            "arguments": {
                "dm": [
                    "bytearray",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "executor": [
                    "bytearray",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "FTPSeparateTaskStaging.can_stage_in": {
            "name": "can_stage_in",
            "location": 17,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "FTPSeparateTaskStaging.stage_in": {
            "name": "stage_in",
            "location": 21,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "str",
                    "list"
                ],
                "executor": [
                    "str",
                    "list"
                ],
                "file": [
                    "str"
                ],
                "parent_fut": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "FTPInTaskStaging.can_stage_in": {
            "name": "can_stage_in",
            "location": 35,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "logging.Logger",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "FTPInTaskStaging.stage_in": {
            "name": "stage_in",
            "location": 39,
            "return": [
                "Optional[str]",
                "int",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ],
                "executor": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ],
                "file": [
                    "str"
                ],
                "parent_fut": [
                    "str",
                    "parsl.data_provider.files.File",
                    "bool",
                    "Container[\"Taxon\"]"
                ]
            }
        },
        "FTPInTaskStaging.replace_task": {
            "name": "replace_task",
            "location": 48,
            "return": [
                "bool",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "IO[Any]"
                ],
                "executor": [
                    "IO[Any]"
                ],
                "file": [
                    "TextIO"
                ],
                "f": [
                    "TextIO"
                ]
            }
        },
        "in_task_transfer_wrapper.wrapper": {
            "name": "wrapper",
            "location": 54,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/data_provider/globus.py": {
        "_get_globus_provider": {
            "name": "_get_globus_provider",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dfk": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "executor_label": [
                    "str"
                ]
            }
        },
        "get_globus": {
            "name": "get_globus",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_globus_stage_in": {
            "name": "_globus_stage_in",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "provider": [
                    "str",
                    "int",
                    "Union[str, IO[bytes]]"
                ],
                "executor": [
                    "int",
                    "dict",
                    "str",
                    "Optional[int]",
                    "bytes",
                    "List[str]",
                    "List[int]"
                ],
                "parent_fut": [
                    "int",
                    "Iterator[int]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "outputs": [
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ],
                "_parsl_staging_inhibit": [
                    "int",
                    "Iterator[int]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "_globus_stage_out": {
            "name": "_globus_stage_out",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "provider": [
                    "float",
                    "list",
                    "str"
                ],
                "executor": [
                    "bool",
                    "dict"
                ],
                "app_fu": [
                    "bool",
                    "List[int]",
                    "Iterable[str]",
                    "Mapping[str, Any]",
                    "str",
                    "int"
                ],
                "inputs": [
                    "List[Tuple[float, str]]",
                    "bool"
                ],
                "_parsl_staging_inhibit": [
                    "bool",
                    "List[int]",
                    "Iterable[str]",
                    "Mapping[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "cli_run": {
            "name": "cli_run",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Globus.init": {
            "name": "init",
            "location": 65,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "cls": [
                    "IO[str]",
                    "Dict[str, Any]",
                    "Exception",
                    "list",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Globus.get_authorizer": {
            "name": "get_authorizer",
            "location": 76,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Globus.transfer_file": {
            "name": "transfer_file",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "src_ep": [
                    "dict",
                    "str",
                    "List[int]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "dst_ep": [
                    "dict",
                    "str",
                    "List[int]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "src_path": [
                    "str",
                    "Tuple[int, int]"
                ],
                "dst_path": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "Globus._load_tokens_from_file": {
            "name": "_load_tokens_from_file",
            "location": 129,
            "return": [
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "bytes",
                    "List[str]",
                    "Callable[[], Any]"
                ],
                "filepath": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Globus._save_tokens_to_file": {
            "name": "_save_tokens_to_file",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[str]"
                ],
                "filepath": [
                    "str",
                    "Optional[List[str]]"
                ],
                "tokens": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Globus._update_tokens_file_on_refresh": {
            "name": "_update_tokens_file_on_refresh",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes"
                ],
                "token_response": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Globus._do_native_app_authentication": {
            "name": "_do_native_app_authentication",
            "location": 144,
            "return": [
                "int",
                "dict",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, float]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "client_id": [
                    "str",
                    "bool"
                ],
                "redirect_uri": [
                    "Optional[Dict[str, Any]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "requested_scopes": [
                    "Optional[Dict[str, Any]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Globus._get_native_app_authorizer": {
            "name": "_get_native_app_authorizer",
            "location": 160,
            "return": [
                "dict",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "client_id": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "GlobusStaging.can_stage_in": {
            "name": "can_stage_in",
            "location": 203,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "GlobusStaging.can_stage_out": {
            "name": "can_stage_out",
            "location": 207,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "logging.Logger"
                ]
            }
        },
        "GlobusStaging.stage_in": {
            "name": "stage_in",
            "location": 211,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "str"
                ],
                "executor": [
                    "str"
                ],
                "file": [
                    "BinaryIO",
                    "List[str]",
                    "utils.FileInfo",
                    "str"
                ],
                "parent_fut": [
                    "int",
                    "List[str]",
                    "TextIO",
                    "BinaryIO",
                    "FrozenSet[str]"
                ]
            }
        },
        "GlobusStaging.stage_out": {
            "name": "stage_out",
            "location": 218,
            "return": [
                "app.App"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "bool"
                ],
                "executor": [
                    "bool"
                ],
                "file": [],
                "app_fu": [
                    "Callable"
                ]
            }
        },
        "GlobusStaging.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "endpoint_uuid": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Optional[int]"
                ],
                "endpoint_path": [
                    "str",
                    "List[str]"
                ],
                "local_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "GlobusStaging._globus_stage_in_app": {
            "name": "_globus_stage_in_app",
            "location": 231,
            "return": [
                "Callable",
                "bool",
                "Callable[[str], None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "Optional[int]"
                ],
                "dfk": [
                    "str"
                ]
            }
        },
        "GlobusStaging._globus_stage_out_app": {
            "name": "_globus_stage_out_app",
            "location": 236,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "Callable",
                    "bool"
                ],
                "dfk": []
            }
        },
        "GlobusStaging.initialize_globus": {
            "name": "initialize_globus",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobusStaging._get_globus_endpoint": {
            "name": "_get_globus_endpoint",
            "location": 246,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "bool"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "str",
                    "bytes",
                    "Union[int, str]"
                ]
            }
        },
        "GlobusStaging._update_local_path": {
            "name": "_update_local_path",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "TextIO"
                ],
                "executor": [
                    "str",
                    "int",
                    "bool"
                ],
                "dfk": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/data_provider/http.py": {
        "in_task_transfer_wrapper": {
            "name": "in_task_transfer_wrapper",
            "location": 60,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "file": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "working_dir": [
                    "bool",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "_http_stage_in": {
            "name": "_http_stage_in",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "working_dir": [
                    "str",
                    "bool"
                ],
                "parent_fut": [
                    "str",
                    "bool",
                    "Optional[Exception]",
                    "List[str]"
                ],
                "outputs": [
                    "IO[str]",
                    "parsl.data_provider.files.File",
                    "bool",
                    "str",
                    "int"
                ],
                "_parsl_staging_inhibit": [
                    "str",
                    "bool",
                    "Optional[Exception]",
                    "List[str]"
                ]
            }
        },
        "_http_stage_in_app": {
            "name": "_http_stage_in_app",
            "location": 87,
            "return": [
                "float",
                "Mapping[str, Any]",
                "Callable",
                "Callable[[str], None]"
            ],
            "arguments": {
                "dm": [
                    "bytearray",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "executor": [
                    "bytearray",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "HTTPSeparateTaskStaging.can_stage_in": {
            "name": "can_stage_in",
            "location": 18,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "HTTPSeparateTaskStaging.stage_in": {
            "name": "stage_in",
            "location": 22,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "str",
                    "list"
                ],
                "executor": [
                    "str",
                    "list"
                ],
                "file": [
                    "str"
                ],
                "parent_fut": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "HTTPInTaskStaging.can_stage_in": {
            "name": "can_stage_in",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "HTTPInTaskStaging.stage_in": {
            "name": "stage_in",
            "location": 45,
            "return": [
                "Optional[str]",
                "int",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ],
                "executor": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ],
                "file": [
                    "str"
                ],
                "parent_fut": [
                    "str",
                    "parsl.data_provider.files.File",
                    "bool",
                    "Container[\"Taxon\"]"
                ]
            }
        },
        "HTTPInTaskStaging.replace_task": {
            "name": "replace_task",
            "location": 55,
            "return": [
                "bool",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "IO[Any]"
                ],
                "executor": [
                    "IO[Any]"
                ],
                "file": [
                    "TextIO"
                ],
                "f": [
                    "TextIO"
                ]
            }
        },
        "in_task_transfer_wrapper.wrapper": {
            "name": "wrapper",
            "location": 61,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/data_provider/rsync.py": {
        "in_task_stage_in_wrapper": {
            "name": "in_task_stage_in_wrapper",
            "location": 71,
            "return": [
                "str",
                "List[str]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "func": [
                    "int",
                    "bool",
                    "str"
                ],
                "file": [
                    "int",
                    "bool",
                    "str"
                ],
                "working_dir": [
                    "int",
                    "bool",
                    "str"
                ],
                "hostname": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "in_task_stage_out_wrapper": {
            "name": "in_task_stage_out_wrapper",
            "location": 92,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "func": [
                    "int",
                    "bool",
                    "str"
                ],
                "file": [
                    "int",
                    "bool",
                    "str"
                ],
                "working_dir": [
                    "int",
                    "bool",
                    "str"
                ],
                "hostname": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "RSyncStaging.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RSyncStaging.can_stage_in": {
            "name": "can_stage_in",
            "location": 27,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "IO",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO[str]",
                    "str"
                ]
            }
        },
        "RSyncStaging.can_stage_out": {
            "name": "can_stage_out",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO[str]",
                    "str"
                ]
            }
        },
        "RSyncStaging.stage_in": {
            "name": "stage_in",
            "location": 33,
            "return": [
                "Optional[str]",
                "int",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ],
                "executor": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "int"
                ],
                "file": [
                    "str",
                    "bool"
                ],
                "parent_fut": [
                    "str",
                    "parsl.data_provider.files.File",
                    "bool",
                    "Container[\"Taxon\"]"
                ]
            }
        },
        "RSyncStaging.stage_out": {
            "name": "stage_out",
            "location": 47,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "executor": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "file": [
                    "str"
                ],
                "parent_fut": [
                    "bool",
                    "list",
                    "str",
                    "bytes"
                ]
            }
        },
        "RSyncStaging.replace_task": {
            "name": "replace_task",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "IO[Any]"
                ],
                "executor": [
                    "IO[Any]"
                ],
                "file": [
                    "TextIO",
                    "Optional[str]"
                ],
                "f": [
                    "TextIO",
                    "Optional[str]"
                ]
            }
        },
        "RSyncStaging.replace_task_stage_out": {
            "name": "replace_task_stage_out",
            "location": 65,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "IO[Any]"
                ],
                "executor": [
                    "IO[Any]"
                ],
                "file": [
                    "TextIO",
                    "Optional[str]"
                ],
                "f": [
                    "TextIO",
                    "Optional[str]"
                ]
            }
        },
        "in_task_stage_in_wrapper.wrapper": {
            "name": "wrapper",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "in_task_stage_out_wrapper.wrapper": {
            "name": "wrapper",
            "location": 93,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/data_provider/staging.py": {
        "Staging.can_stage_in": {
            "name": "can_stage_in",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "parsl.data_provider.files.File",
                    "IO[str]",
                    "list",
                    "List[str]",
                    "BinaryIO"
                ]
            }
        },
        "Staging.can_stage_out": {
            "name": "can_stage_out",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "parsl.data_provider.files.File",
                    "IO[str]",
                    "list"
                ]
            }
        },
        "Staging.stage_in": {
            "name": "stage_in",
            "location": 49,
            "return": [
                "Optional[str]",
                "int",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "str",
                    "DataManager",
                    "parsl.data_provider.files.File",
                    "Optional[concurrenfutures.Future]",
                    "bool",
                    "Container[\"Taxon\"]"
                ],
                "executor": [
                    "str",
                    "DataManager",
                    "parsl.data_provider.files.File",
                    "Optional[concurrenfutures.Future]",
                    "bool",
                    "Container[\"Taxon\"]"
                ],
                "file": [
                    "str",
                    "DataManager",
                    "parsl.data_provider.files.File",
                    "Optional[concurrenfutures.Future]",
                    "bool",
                    "Container[\"Taxon\"]"
                ],
                "parent_fut": [
                    "str",
                    "DataManager",
                    "parsl.data_provider.files.File",
                    "Optional[concurrenfutures.Future]",
                    "bool",
                    "Container[\"Taxon\"]"
                ]
            }
        },
        "Staging.stage_out": {
            "name": "stage_out",
            "location": 72,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "concurrenfutures.Future"
                ],
                "executor": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "concurrenfutures.Future"
                ],
                "file": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "concurrenfutures.Future"
                ],
                "app_fu": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "concurrenfutures.Future"
                ]
            }
        },
        "Staging.replace_task": {
            "name": "replace_task",
            "location": 92,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "Callable"
                ],
                "executor": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "Callable"
                ],
                "file": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "Callable"
                ],
                "func": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "Callable"
                ]
            }
        },
        "Staging.replace_task_stage_out": {
            "name": "replace_task_stage_out",
            "location": 100,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "Callable"
                ],
                "executor": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "Callable"
                ],
                "file": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "Callable"
                ],
                "func": [
                    "DataManager",
                    "str",
                    "parsl.data_provider.files.File",
                    "Callable"
                ]
            }
        }
    },
    "parsl-master/parsl/data_provider/__init__.py": {},
    "parsl-master/parsl/executors/base.py": {
        "ParslExecutor.__enter__": {
            "name": "__enter__",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.__exit__": {
            "name": "__exit__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "ParslExecutor.start": {
            "name": "start",
            "location": 57,
            "return": [
                "typing.Optional[typing.List[builtins.str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.submit": {
            "name": "submit",
            "location": 65,
            "return": [
                "concurrent.futures.Future"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ],
                "resource_specification": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "ParslExecutor.scale_out": {
            "name": "scale_out",
            "location": 76,
            "return": [
                "typing.List[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ParslExecutor.scale_in": {
            "name": "scale_in",
            "location": 88,
            "return": [
                "typing.List[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "bool"
                ]
            }
        },
        "ParslExecutor.shutdown": {
            "name": "shutdown",
            "location": 102,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.scaling_enabled": {
            "name": "scaling_enabled",
            "location": 110,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.create_monitoring_info": {
            "name": "create_monitoring_info",
            "location": 118,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Optional[float]",
                    "Iterable[str]"
                ]
            }
        },
        "ParslExecutor.monitor_resources": {
            "name": "monitor_resources",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.status": {
            "name": "status",
            "location": 136,
            "return": [
                "typing.Dict[builtins.str, parsl.providers.provider_base.JobStatus]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 145,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.error_management_enabled": {
            "name": "error_management_enabled",
            "location": 158,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.handle_errors": {
            "name": "handle_errors",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_handler": [
                    "bool",
                    "MutableSequence[str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Type[object]",
                    "int"
                ],
                "status": [
                    "bool",
                    "MutableSequence[str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Type[object]",
                    "int"
                ]
            }
        },
        "ParslExecutor.set_bad_state_and_fail_all": {
            "name": "set_bad_state_and_fail_all",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ParslExecutor.bad_state_is_set": {
            "name": "bad_state_is_set",
            "location": 205,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.executor_exception": {
            "name": "executor_exception",
            "location": 214,
            "return": [
                "builtins.Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.tasks": {
            "name": "tasks",
            "location": 220,
            "return": [
                "typing.Dict[builtins.object, concurrent.futures.Future]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslExecutor.run_dir": {
            "name": "run_dir",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list",
                    "object",
                    "bytes",
                    "bool",
                    "float"
                ]
            }
        },
        "ParslExecutor.hub_address": {
            "name": "hub_address",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "ParslExecutor.hub_port": {
            "name": "hub_port",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "parsl-master/parsl/executors/errors.py": {
        "ExecutorError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "int",
                    "bool",
                    "float"
                ],
                "reason": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ExecutorError.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadStateException.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "bool",
                    "Mapping[str, str]",
                    "str",
                    "int"
                ],
                "exception": [
                    "bool",
                    "Mapping[str, str]",
                    "str",
                    "int"
                ]
            }
        },
        "UnsupportedFeatureError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "feature": [
                    "int",
                    "bool",
                    "float"
                ],
                "current_executor": [
                    "str",
                    "int"
                ],
                "target_executor": [
                    "str",
                    "List[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "UnsupportedFeatureError.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalingFailed.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeserializationError.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DeserializationError.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "str",
                "Iterable[int]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationError.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SerializationError.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadMessage.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BadMessage.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/status_handling.py": {
        "BlockProviderExecutor.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BlockProviderExecutor._make_status_dict": {
            "name": "_make_status_dict",
            "location": 59,
            "return": [
                "dict",
                "Dict[str, bool]",
                "int",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "block_ids": [
                    "int",
                    "List[str]",
                    "list"
                ],
                "status_list": [
                    "int",
                    "Mapping",
                    "List[str]"
                ]
            }
        },
        "BlockProviderExecutor.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 76,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockProviderExecutor._fail_job_async": {
            "name": "_fail_job_async",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block_id": [
                    "str",
                    "Optional[str]",
                    "List[\"ResourceTypeId\"]",
                    "float"
                ],
                "message": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "BlockProviderExecutor.outstanding": {
            "name": "outstanding",
            "location": 92,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockProviderExecutor.status": {
            "name": "status",
            "location": 98,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockProviderExecutor.set_bad_state_and_fail_all": {
            "name": "set_bad_state_and_fail_all",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str"
                ]
            }
        },
        "BlockProviderExecutor.bad_state_is_set": {
            "name": "bad_state_is_set",
            "location": 121,
            "return": [
                "bool",
                "Optional[logging.Filter]",
                "cmk.utils.type_defs.UserId",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockProviderExecutor.executor_exception": {
            "name": "executor_exception",
            "location": 125,
            "return": [
                "List[str]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockProviderExecutor.error_management_enabled": {
            "name": "error_management_enabled",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockProviderExecutor.handle_errors": {
            "name": "handle_errors",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_handler": [
                    "int",
                    "Dict[str, str]",
                    "str",
                    "Mapping",
                    "bool"
                ],
                "status": [
                    "int",
                    "Dict[str, str]",
                    "str",
                    "Mapping",
                    "bool"
                ]
            }
        },
        "BlockProviderExecutor.tasks": {
            "name": "tasks",
            "location": 142,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockProviderExecutor.provider": {
            "name": "provider",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockProviderExecutor._filter_scale_in_ids": {
            "name": "_filter_scale_in_ids",
            "location": 149,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "bool",
                "int",
                "set",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "to_kill": [
                    "List[str]",
                    "list",
                    "str",
                    "List[T]",
                    "Tuple[str, bool]",
                    "List[int]"
                ],
                "killed": [
                    "List[str]",
                    "list",
                    "str",
                    "List[T]",
                    "Tuple[str, bool]",
                    "List[int]"
                ]
            }
        },
        "BlockProviderExecutor.scale_out": {
            "name": "scale_out",
            "location": 156,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "int",
                    "raiden.utils.BlockIdentifier",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BlockProviderExecutor._launch_block": {
            "name": "_launch_block",
            "location": 176,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "block_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockProviderExecutor._get_launch_command": {
            "name": "_get_launch_command",
            "location": 186,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "block_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "BlockProviderExecutor._get_block_and_job_ids": {
            "name": "_get_block_and_job_ids",
            "location": 189,
            "return": [
                "bool",
                "Callable[..., None]",
                "Tuple[bool, Optional[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockProviderExecutor.workers_per_node": {
            "name": "workers_per_node",
            "location": 200,
            "return": [
                "typing.Union[builtins.int, builtins.float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStatusHandlingExecutor.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStatusHandlingExecutor.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 210,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStatusHandlingExecutor.bad_state_is_set": {
            "name": "bad_state_is_set",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStatusHandlingExecutor.error_management_enabled": {
            "name": "error_management_enabled",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStatusHandlingExecutor.executor_exception": {
            "name": "executor_exception",
            "location": 222,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[dbadapters.base.relation.BaseRelation]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStatusHandlingExecutor.set_bad_state_and_fail_all": {
            "name": "set_bad_state_and_fail_all",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "NoStatusHandlingExecutor.status": {
            "name": "status",
            "location": 228,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStatusHandlingExecutor.handle_errors": {
            "name": "handle_errors",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_handler": [
                    "bool",
                    "MutableSequence[str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Type[object]",
                    "int"
                ],
                "status": [
                    "bool",
                    "MutableSequence[str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Type[object]",
                    "int"
                ]
            }
        },
        "NoStatusHandlingExecutor.tasks": {
            "name": "tasks",
            "location": 236,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStatusHandlingExecutor.provider": {
            "name": "provider",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/swift_t.py": {
        "runner": {
            "name": "runner",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "incoming_q": [
                    "int",
                    "float"
                ],
                "outgoing_q": [
                    "Optional[int]",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "runner.execute_task": {
            "name": "execute_task",
            "location": 59,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "bufs": [
                    "dict"
                ]
            }
        },
        "TurbineExecutor.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "bytes",
                    "dict"
                ],
                "storage_access": [
                    "str",
                    "bool",
                    "bytes",
                    "dict"
                ],
                "working_dir": [
                    "str",
                    "bytes"
                ],
                "managed": [
                    "str",
                    "bool",
                    "bytes",
                    "dict"
                ]
            }
        },
        "TurbineExecutor.start": {
            "name": "start",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TurbineExecutor._queue_management_worker": {
            "name": "_queue_management_worker",
            "location": 200,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurbineExecutor.weakref_cb": {
            "name": "weakref_cb",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "q": [
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TurbineExecutor._start_queue_management_thread": {
            "name": "_start_queue_management_thread",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TurbineExecutor.shutdown": {
            "name": "shutdown",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurbineExecutor.submit": {
            "name": "submit",
            "location": 301,
            "return": [
                "str",
                "uuid.UUID"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Mapping[str, Any]",
                    "Sequence[Any]"
                ]
            }
        },
        "TurbineExecutor.scaling_enabled": {
            "name": "scaling_enabled",
            "location": 337,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurbineExecutor.scale_out": {
            "name": "scale_out",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "TurbineExecutor.scale_in": {
            "name": "scale_in",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/executors/threads.py": {
        "ThreadPoolExecutor.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[dict]",
                    "Optional[List[str]]"
                ],
                "max_threads": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "thread_name_prefix": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "storage_access": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[dict]",
                    "Optional[List[str]]"
                ],
                "working_dir": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]"
                ],
                "managed": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[dict]",
                    "Optional[List[str]]"
                ]
            }
        },
        "ThreadPoolExecutor.start": {
            "name": "start",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadPoolExecutor.scaling_enabled": {
            "name": "scaling_enabled",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadPoolExecutor.submit": {
            "name": "submit",
            "location": 56,
            "return": [
                "List[Dict[str, Any]]",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "resource_specification": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "ThreadPoolExecutor.scale_out": {
            "name": "scale_out",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "workers": [
                    "int"
                ]
            }
        },
        "ThreadPoolExecutor.scale_in": {
            "name": "scale_in",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "bool"
                ]
            }
        },
        "ThreadPoolExecutor.shutdown": {
            "name": "shutdown",
            "location": 93,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "ThreadPoolExecutor.monitor_resources": {
            "name": "monitor_resources",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/__init__.py": {},
    "parsl-master/parsl/executors/extreme_scale/executor.py": {
        "ExtremeScaleExecutor.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "provider": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "launch_cmd": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "address": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "worker_ports": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "worker_port_range": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "interchange_port_range": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "storage_access": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "working_dir": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "worker_debug": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "ranks_per_node": [
                    "bool",
                    "int",
                    "list"
                ],
                "heartbeat_threshold": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "heartbeat_period": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ],
                "managed": [
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "raiden.utils.Optional[raiden.utils.OneToNAddress]",
                    "List[Optional[float]]",
                    "raiden.utils.Optional[raiden.utils.UserDepositAddress]"
                ]
            }
        },
        "ExtremeScaleExecutor.start": {
            "name": "start",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtremeScaleExecutor.initialize_scaling": {
            "name": "initialize_scaling",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/extreme_scale/mpi_worker_pool.py": {
        "execute_task": {
            "name": "execute_task",
            "location": 349,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "bufs": [
                    "dict"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "comm": [
                    "str",
                    "Optional[bool]",
                    "Dict[str, Any]"
                ],
                "rank": [
                    "list",
                    "str",
                    "Optional[Union[Any, str]]"
                ]
            }
        },
        "start_file_logger": {
            "name": "start_file_logger",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "rank": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "name": [
                    "str"
                ],
                "level": [
                    "str",
                    "logging.Formatter",
                    "Optional[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "format_string": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Manager.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "comm": [
                    "int",
                    "bool",
                    "Optional[Union[int, float]]",
                    "Optional[int]"
                ],
                "rank": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "task_q_url": [
                    "dict",
                    "Dict[str, object]"
                ],
                "result_q_url": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "max_queue_size": [
                    "bool",
                    "int",
                    "Optional[Union[int, float]]",
                    "Optional[int]",
                    "List[str]"
                ],
                "heartbeat_threshold": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "heartbeat_period": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "uid": [
                    "str",
                    "bool",
                    "Iterable[int]"
                ]
            }
        },
        "Manager.create_reg_message": {
            "name": "create_reg_message",
            "location": 93,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.heartbeat": {
            "name": "heartbeat",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.recv_result_from_workers": {
            "name": "recv_result_from_workers",
            "location": 118,
            "return": [
                "List[str]",
                "list",
                "set",
                "Tuple[int, Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.recv_task_request_from_workers": {
            "name": "recv_task_request_from_workers",
            "location": 130,
            "return": [
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.pull_tasks": {
            "name": "pull_tasks",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kill_event": [
                    "threading.Event",
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Manager.push_results": {
            "name": "push_results",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kill_event": [
                    "int"
                ]
            }
        },
        "Manager.start": {
            "name": "start",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/extreme_scale/__init__.py": {},
    "parsl-master/parsl/executors/flux/execute_parsl_task.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/executors/flux/executor.py": {
        "_complete_future": {
            "name": "_complete_future",
            "location": 77,
            "return": [
                "app.models.Article",
                "Iterator"
            ],
            "arguments": {
                "expected_file": [
                    "str"
                ],
                "future_wrapper": [
                    "str",
                    "int"
                ],
                "flux_future": [
                    "str",
                    "bool",
                    "TextIO"
                ]
            }
        },
        "_submit_wrapper": {
            "name": "_submit_wrapper",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "submission_queue": [
                    "Optional[bool]",
                    "List[str]",
                    "raiden.utils.ChainID",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.OneToNAddress",
                    "str",
                    "recidiviz.utils.regions.Region"
                ],
                "stop_event": [
                    "Optional[bool]",
                    "List[str]",
                    "raiden.utils.ChainID",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.OneToNAddress",
                    "str",
                    "recidiviz.utils.regions.Region"
                ]
            }
        },
        "_error_out_jobs": {
            "name": "_error_out_jobs",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "submission_queue": [
                    "dict",
                    "cmk.utils.type_defs.EventRule",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "stop_event": [
                    "Dict[str, Any]",
                    "threading.Event"
                ],
                "exc": [
                    "Callable[..., None]",
                    "Sequence[Any]",
                    "List[str]",
                    "Optional[Callable[[Type, Dict], Any]]",
                    "bool",
                    "int"
                ]
            }
        },
        "_submit_flux_jobs": {
            "name": "_submit_flux_jobs",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "submission_queue": [
                    "Callable[[str], bool]",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "Dict[str, List[Any]]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[int, Dict[str, str]]"
                ],
                "stop_event": [
                    "str",
                    "list",
                    "Optional[int]",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "socket": [
                    "str",
                    "int"
                ],
                "working_dir": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[os.PathLike, str]"
                ],
                "flux_executor_kwargs": [
                    "bool",
                    "int",
                    "float"
                ],
                "provider": [
                    "str",
                    "bool",
                    "Optional[Union[Any, str]]",
                    "int"
                ],
                "executor": [
                    "List[float]",
                    "bool",
                    "str",
                    "Tuple[int, int, int]",
                    "Optional[str]"
                ],
                "flux_path": [
                    "str",
                    "int"
                ],
                "launch_cmd": [
                    "str",
                    "int"
                ]
            }
        },
        "_check_provider_job": {
            "name": "_check_provider_job",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "socket": [
                    "Dict[str, str]",
                    "str",
                    "Mapping[str, Any]"
                ],
                "provider": [
                    "int",
                    "str",
                    "bytearray"
                ],
                "job_id": [
                    "int",
                    "str",
                    "bytearray"
                ]
            }
        },
        "_submit_single_job": {
            "name": "_submit_single_job",
            "location": 408,
            "return": [
                "app.models.Article",
                "Iterator"
            ],
            "arguments": {
                "flux_executor": [
                    "str",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "working_dir": [
                    "str",
                    "Union[str, os.PathLike]",
                    "int"
                ],
                "jobinfo": [
                    "bytes",
                    "Union[dict, list]"
                ]
            }
        },
        "FluxFutureWrapper.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FluxFutureWrapper.cancel": {
            "name": "cancel",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FluxFutureWrapper.running": {
            "name": "running",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FluxExecutor.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[int]",
                    "recidiviz.utils.regions.Region"
                ],
                "managed": [
                    "str"
                ],
                "working_dir": [
                    "str",
                    "Optional[TextIO]",
                    "Optional[str]",
                    "Union[str, List[str]]"
                ],
                "label": [
                    "str",
                    "Optional[str]"
                ],
                "flux_executor_kwargs": [
                    "str"
                ],
                "flux_path": [
                    "Optional[str]",
                    "str",
                    "bytes",
                    "Optional[float]"
                ],
                "launch_cmd": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "recidiviz.utils.regions.Region"
                ]
            }
        },
        "FluxExecutor.start": {
            "name": "start",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FluxExecutor.shutdown": {
            "name": "shutdown",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wait": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FluxExecutor.submit": {
            "name": "submit",
            "location": 256,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "resource_specification": [
                    "Callable",
                    "int",
                    "bool"
                ]
            }
        },
        "FluxExecutor.scale_in": {
            "name": "scale_in",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FluxExecutor.scale_out": {
            "name": "scale_out",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FluxExecutor.scaling_enabled": {
            "name": "scaling_enabled",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/flux/flux_instance_manager.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/executors/flux/__init__.py": {},
    "parsl-master/parsl/executors/high_throughput/errors.py": {
        "WorkerLost.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "hostname": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WorkerLost.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerLost.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/high_throughput/executor.py": {
        "HighThroughputExecutor.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "provider": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "launch_cmd": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "address": [
                    "Optional[str]",
                    "raiden.utils.TokenAmount",
                    "float",
                    "raiden.utils.Dict[raiden.utils.Any, raiden.utils.Any]",
                    "raiden.utils.Nonce",
                    "raiden.utils.AdditionalHash",
                    "raiden.utils.Signature",
                    "raiden.utils.BalanceHash",
                    "raiden.utils.ChannelID"
                ],
                "worker_ports": [
                    "bool",
                    "float",
                    "str"
                ],
                "worker_port_range": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "interchange_port_range": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "storage_access": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "working_dir": [
                    "Optional[str]",
                    "bool",
                    "Optional[Union[Any, str]]",
                    "str"
                ],
                "worker_debug": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "cores_per_worker": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "mem_per_worker": [
                    "Optional[float]",
                    "List[str]",
                    "int"
                ],
                "max_workers": [
                    "int",
                    "Tuple[int, int]",
                    "Union[int, float]",
                    "Optional[int]"
                ],
                "cpu_affinity": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "available_accelerators": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "prefetch_capacity": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "heartbeat_threshold": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "heartbeat_period": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "poll_period": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "address_probe_timeout": [
                    "float",
                    "int",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "managed": [
                    "bool",
                    "Optional[datetime.datetime]",
                    "int",
                    "list"
                ],
                "worker_logdir_root": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "HighThroughputExecutor.initialize_scaling": {
            "name": "initialize_scaling",
            "location": 279,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor.start": {
            "name": "start",
            "location": 327,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor._queue_management_worker": {
            "name": "_queue_management_worker",
            "location": 346,
            "return": [
                "app.models.Article"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor._start_local_interchange_process": {
            "name": "_start_local_interchange_process",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor._start_queue_management_thread": {
            "name": "_start_queue_management_thread",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor.hold_worker": {
            "name": "hold_worker",
            "location": 504,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": [],
                "worker_id": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "HighThroughputExecutor.outstanding": {
            "name": "outstanding",
            "location": 521,
            "return": [
                "str",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor.connected_workers": {
            "name": "connected_workers",
            "location": 526,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor.connected_managers": {
            "name": "connected_managers",
            "location": 531,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor._hold_block": {
            "name": "_hold_block",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block_id": [
                    "str",
                    "int"
                ]
            }
        },
        "HighThroughputExecutor.submit": {
            "name": "submit",
            "location": 551,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "Callable"
                ],
                "resource_specification": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "HighThroughputExecutor.scaling_enabled": {
            "name": "scaling_enabled",
            "location": 606,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor.create_monitoring_info": {
            "name": "create_monitoring_info",
            "location": 609,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "Iterable[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "HighThroughputExecutor.workers_per_node": {
            "name": "workers_per_node",
            "location": 626,
            "return": [
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Tuple[float, float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HighThroughputExecutor.scale_in": {
            "name": "scale_in",
            "location": 629,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "str",
                    "int"
                ],
                "block_ids": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "force": [
                    "bool",
                    "Optional[bool]"
                ],
                "max_idletime": [
                    "int",
                    "bytes",
                    "datetime.timedelta",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "HighThroughputExecutor._get_launch_command": {
            "name": "_get_launch_command",
            "location": 711,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "block_id": [
                    "str",
                    "int"
                ]
            }
        },
        "HighThroughputExecutor.shutdown": {
            "name": "shutdown",
            "location": 717,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/high_throughput/interchange.py": {
        "start_file_logger": {
            "name": "start_file_logger",
            "location": 561,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "logging.Logger"
                ],
                "name": [
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ],
                "format_string": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "starter": {
            "name": "starter",
            "location": 595,
            "return": [
                ""
            ],
            "arguments": {
                "comm_q": [
                    "utils.JobsType",
                    "bytes"
                ]
            }
        },
        "ManagerLost.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "manager_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "hostname": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ManagerLost.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "Dict[str, Dict[str, int]]",
                "cmk.utils.type_defs.EventRule",
                "cmk.utils.type_defs.HostName",
                "Dict[str, Any]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerLost.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMismatch.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interchange_version": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "List['cirq.Circuit']",
                    "Optional[dict]"
                ],
                "manager_version": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "List['cirq.Circuit']",
                    "Optional[dict]"
                ]
            }
        },
        "VersionMismatch.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "bool",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionMismatch.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interchange.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_address": [
                    "str"
                ],
                "interchange_address": [
                    "str"
                ],
                "client_ports": [
                    "str",
                    "logging.Logger",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "worker_ports": [
                    "raiden.utils.BalanceHash",
                    "raiden.utils.Address",
                    "datetime.datetime",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Locksroot"
                ],
                "worker_port_range": [],
                "hub_address": [
                    "str"
                ],
                "hub_port": [
                    "str"
                ],
                "heartbeat_threshold": [
                    "str",
                    "float"
                ],
                "logdir": [
                    "str",
                    "bool"
                ],
                "logging_level": [
                    "str",
                    "bool"
                ],
                "poll_period": [
                    "str",
                    "float"
                ]
            }
        },
        "Interchange.get_tasks": {
            "name": "get_tasks",
            "location": 197,
            "return": [
                "str",
                "int",
                "Callable[[str, str], None]",
                "bytes",
                "app.models.Game"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "str"
                ]
            }
        },
        "Interchange.task_puller": {
            "name": "task_puller",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kill_event": [
                    "list",
                    "threading.Event",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Interchange._create_monitoring_channel": {
            "name": "_create_monitoring_channel",
            "location": 256,
            "return": [
                "datetime.datetime",
                "Dict[int, dict]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interchange._send_monitoring_info": {
            "name": "_send_monitoring_info",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hub_channel": [
                    "Set[int]",
                    "int",
                    "str",
                    "bool"
                ],
                "manager": [
                    "raiden.utils.Address",
                    "int"
                ]
            }
        },
        "Interchange._command_server": {
            "name": "_command_server",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kill_event": [
                    "threading.Event",
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Interchange.start": {
            "name": "start",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poll_period": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/executors/high_throughput/monitoring_info.py": {},
    "parsl-master/parsl/executors/high_throughput/probe.py": {
        "probe_addresses": {
            "name": "probe_addresses",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "addresses": [
                    "bool",
                    "dict",
                    "str",
                    "list"
                ],
                "task_port": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "timeout": [
                    "int",
                    "Union[str, dict]",
                    "Optional[float]"
                ]
            }
        },
        "TestWorker.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "addresses": [
                    "Optional[str]",
                    "Callable[[dict], None]",
                    "int"
                ],
                "port": [
                    "Tuple[str, int]"
                ]
            }
        },
        "TestWorker.heartbeat": {
            "name": "heartbeat",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/high_throughput/process_worker_pool.py": {
        "execute_task": {
            "name": "execute_task",
            "location": 459,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "bufs": [
                    "dict"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 489,
            "return": [
                ""
            ],
            "arguments": {
                "worker_id": [
                    "str",
                    "dict",
                    "Optional[List]"
                ],
                "pool_id": [
                    "str",
                    "dict",
                    "Optional[List]"
                ],
                "pool_size": [
                    "str",
                    "bool"
                ],
                "task_queue": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "result_queue": [
                    "str",
                    "Optional[IO[bytes]]",
                    "Dict[str, object]",
                    "bool",
                    "List[str]"
                ],
                "worker_queue": [
                    "str",
                    "int"
                ],
                "tasks_in_progress": [
                    "int",
                    "str",
                    "List[str]",
                    "Optional[float]"
                ],
                "cpu_affinity": [
                    "str",
                    "int"
                ],
                "accelerator": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "Optional[\"ValidatorTypes\"]"
                ]
            }
        },
        "start_file_logger": {
            "name": "start_file_logger",
            "location": 585,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "rank": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "name": [
                    "str"
                ],
                "level": [
                    "str",
                    "logging.Formatter",
                    "Optional[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "format_string": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Manager.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "addresses": [
                    "int"
                ],
                "address_probe_timeout": [
                    "int"
                ],
                "task_port": [
                    "str",
                    "int",
                    "Optional[float]",
                    "Iterable"
                ],
                "result_port": [
                    "str",
                    "bytes"
                ],
                "cores_per_worker": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Optional[Union[int, float]]"
                ],
                "mem_per_worker": [
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ],
                "max_workers": [
                    "int",
                    "bool",
                    "Optional[Union[int, float]]"
                ],
                "prefetch_capacity": [
                    "int",
                    "List[str]"
                ],
                "uid": [
                    "bytes",
                    "str",
                    "Tuple[int, int]"
                ],
                "block_id": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "heartbeat_threshold": [
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ],
                "heartbeat_period": [
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ],
                "poll_period": [
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ],
                "cpu_affinity": [
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ],
                "available_accelerators": [
                    "Optional[List[Any]]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "Manager.create_reg_message": {
            "name": "create_reg_message",
            "location": 200,
            "return": [
                "str",
                "multiprocessing.Queue",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.heartbeat_to_incoming": {
            "name": "heartbeat_to_incoming",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.pull_tasks": {
            "name": "pull_tasks",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kill_event": [
                    "threading.Event",
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Manager.push_results": {
            "name": "push_results",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kill_event": [
                    "int"
                ]
            }
        },
        "Manager.worker_watchdog": {
            "name": "worker_watchdog",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kill_event": [
                    "int"
                ]
            }
        },
        "Manager.start": {
            "name": "start",
            "location": 395,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/high_throughput/zmq_pipes.py": {
        "CommandClient.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "port_range": [
                    "int",
                    "Callable"
                ]
            }
        },
        "CommandClient.create_socket_and_bind": {
            "name": "create_socket_and_bind",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandClient.run": {
            "name": "run",
            "location": 47,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "IO",
                    "str",
                    "int"
                ],
                "max_retries": [
                    "int"
                ]
            }
        },
        "CommandClient.close": {
            "name": "close",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TasksOutgoing.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "int",
                    "float"
                ],
                "port_range": [
                    "int",
                    "float"
                ]
            }
        },
        "TasksOutgoing.put": {
            "name": "put",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "List[str]",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "TasksOutgoing.close": {
            "name": "close",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsIncoming.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "int",
                    "float"
                ],
                "port_range": [
                    "int",
                    "float"
                ]
            }
        },
        "ResultsIncoming.get": {
            "name": "get",
            "location": 153,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool",
                    "int",
                    "Mapping[str, float]",
                    "List[str]",
                    "list",
                    "Exception"
                ],
                "timeout": [
                    "bool",
                    "int",
                    "Mapping[str, float]",
                    "List[str]",
                    "list",
                    "Exception"
                ]
            }
        },
        "ResultsIncoming.request_close": {
            "name": "request_close",
            "location": 156,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsIncoming.close": {
            "name": "close",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/high_throughput/__init__.py": {},
    "parsl-master/parsl/executors/low_latency/executor.py": {
        "LowLatencyExecutor.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "bool",
                    "int",
                    "list"
                ],
                "provider": [
                    "bool",
                    "str"
                ],
                "launch_cmd": [
                    "bool",
                    "int",
                    "list"
                ],
                "address": [
                    "bool",
                    "int",
                    "list"
                ],
                "worker_port": [
                    "bool",
                    "float",
                    "str"
                ],
                "worker_port_range": [
                    "bool",
                    "int",
                    "list"
                ],
                "interchange_port_range": [
                    "bool",
                    "int",
                    "list"
                ],
                "working_dir": [
                    "Optional[str]",
                    "bool",
                    "Optional[Union[Any, str]]",
                    "str"
                ],
                "worker_debug": [
                    "bool",
                    "int",
                    "list"
                ],
                "workers_per_node": [
                    "bool",
                    "int",
                    "list"
                ],
                "managed": [
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "LowLatencyExecutor.start": {
            "name": "start",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LowLatencyExecutor._start_local_queue_process": {
            "name": "_start_local_queue_process",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LowLatencyExecutor._start_queue_management_thread": {
            "name": "_start_queue_management_thread",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LowLatencyExecutor._queue_management_worker": {
            "name": "_queue_management_worker",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LowLatencyExecutor.submit": {
            "name": "submit",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Mapping[str, Any]",
                    "Sequence[Any]"
                ],
                "resource_specification": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "LowLatencyExecutor.scaling_enabled": {
            "name": "scaling_enabled",
            "location": 219,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LowLatencyExecutor.scale_out": {
            "name": "scale_out",
            "location": 222,
            "return": [
                "List[str]",
                "str",
                "dict",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "dict"
                ]
            }
        },
        "LowLatencyExecutor.scale_in": {
            "name": "scale_in",
            "location": 249,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "float",
                    "int"
                ]
            }
        },
        "LowLatencyExecutor._get_job_ids": {
            "name": "_get_job_ids",
            "location": 261,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LowLatencyExecutor.shutdown": {
            "name": "shutdown",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hub": [
                    "bool",
                    "str",
                    "Callable[[], bool]",
                    "List[str]"
                ],
                "targets": [
                    "bool",
                    "str",
                    "Callable[[], bool]",
                    "List[str]"
                ],
                "block": [
                    "bool",
                    "str",
                    "Callable[[], bool]",
                    "List[str]"
                ]
            }
        }
    },
    "parsl-master/parsl/executors/low_latency/interchange.py": {
        "start_file_logger": {
            "name": "start_file_logger",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "logging.Logger"
                ],
                "name": [
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ],
                "format_string": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "starter": {
            "name": "starter",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "comm_q": [
                    "str",
                    "slice",
                    "float"
                ]
            }
        },
        "Interchange.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_address": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "client_ports": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "worker_port": [
                    "bool",
                    "int",
                    "str"
                ],
                "worker_port_range": [
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Interchange.start": {
            "name": "start",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/low_latency/lowlatency_worker.py": {
        "execute_task": {
            "name": "execute_task",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[float, float, float, float]"
                ],
                "args": [],
                "kwargs": [],
                "user_ns": [
                    "dict",
                    "tuple",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "start_file_logger": {
            "name": "start_file_logger",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "rank": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "name": [
                    "str"
                ],
                "level": [
                    "str",
                    "logging.Formatter",
                    "Optional[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "format_string": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "worker_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "task_url": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "debug": [
                    "str",
                    "int",
                    "bool"
                ],
                "logdir": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "uid": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "parsl-master/parsl/executors/low_latency/zmq_pipes.py": {
        "TasksOutgoing.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "int",
                    "float"
                ],
                "port_range": [
                    "int",
                    "float"
                ]
            }
        },
        "TasksOutgoing.put": {
            "name": "put",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "buffer": [
                    "str",
                    "int"
                ]
            }
        },
        "TasksOutgoing.close": {
            "name": "close",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsIncoming.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ip_address": [
                    "int",
                    "float"
                ],
                "port_range": [
                    "int",
                    "float"
                ]
            }
        },
        "ResultsIncoming.get": {
            "name": "get",
            "location": 49,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultsIncoming.close": {
            "name": "close",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerMessages.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tasks_url": [
                    "Dict[str, Any]"
                ]
            }
        },
        "WorkerMessages.get": {
            "name": "get",
            "location": 69,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkerMessages.put": {
            "name": "put",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "int"
                ],
                "buffer": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "WorkerMessages.close": {
            "name": "close",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/low_latency/__init__.py": {},
    "parsl-master/parsl/executors/workqueue/errors.py": {
        "WorkQueueTaskFailure.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "status": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "parsl-master/parsl/executors/workqueue/executor.py": {
        "_work_queue_submit_wait": {
            "name": "_work_queue_submit_wait",
            "location": 720,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "task_queue": [
                    "str",
                    "bool",
                    "Callable[[str], None]",
                    "Optional[str]"
                ],
                "launch_cmd": [
                    "str"
                ],
                "env": [
                    "Optional[Set[int]]",
                    "str",
                    "Optional[str]"
                ],
                "collector_queue": [
                    "float",
                    "bool"
                ],
                "data_dir": [
                    "str",
                    "Optional[bool]",
                    "Union[str, os.PathLike]",
                    "int",
                    "Callable",
                    "bool"
                ],
                "full": [
                    "int",
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "shared_fs": [
                    "str",
                    "Optional[bool]",
                    "Union[str, os.PathLike]",
                    "int",
                    "Callable",
                    "bool"
                ],
                "autolabel": [
                    "int",
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "autolabel_window": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]",
                    "Optional[Dict]"
                ],
                "autocategory": [
                    "str",
                    "Optional[bool]",
                    "Union[str, os.PathLike]",
                    "int",
                    "Callable",
                    "bool"
                ],
                "max_retries": [
                    "Optional[str]",
                    "str",
                    "executors.sagemaker.Sagemaker"
                ],
                "should_stop": [
                    "List[Dict[str, Any]]",
                    "dict",
                    "str",
                    "int",
                    "Dict[str, Dict[str, Any]]"
                ],
                "port": [
                    "str",
                    "int",
                    "bytes"
                ],
                "wq_log_dir": [
                    "str",
                    "Union[str, List[str]]",
                    "Union[str, bool]"
                ],
                "project_password_file": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "project_name": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "_explain_work_queue_result": {
            "name": "_explain_work_queue_result",
            "location": 947,
            "return": [
                "int",
                "Tuple[int, int, int, int]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "wq_task": [
                    "pc.data.Task",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "WorkQueueExecutor.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "provider": [
                    "Union[None, bool, str]",
                    "dict",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "working_dir": [
                    "str",
                    "Optional[str]"
                ],
                "managed": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "project_name": [
                    "str",
                    "Union[Optional[str], Literal[Literal]]",
                    "bool"
                ],
                "project_password_file": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "address": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[List[str]]"
                ],
                "port": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "env": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "shared_fs": [
                    "bool",
                    "str",
                    "int"
                ],
                "storage_access": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "use_cache": [
                    "bool"
                ],
                "source": [
                    "str",
                    "bool",
                    "List[int]"
                ],
                "pack": [
                    "bool",
                    "List[str]",
                    "float",
                    "dict",
                    "str"
                ],
                "extra_pkgs": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "autolabel": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "autolabel_window": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "autocategory": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "max_retries": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "init_command": [
                    "Optional[str]",
                    "Optional[tuple]",
                    "str",
                    "Optional[Dict]",
                    "bool",
                    "raiden.utils.Secret",
                    "Optional[Callable[..., Any]]"
                ],
                "worker_options": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "full_debug": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "worker_executable": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "WorkQueueExecutor._get_launch_command": {
            "name": "_get_launch_command",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "block_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[int, int]"
                ]
            }
        },
        "WorkQueueExecutor.start": {
            "name": "start",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueExecutor._path_in_task": {
            "name": "_path_in_task",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str"
                ]
            }
        },
        "WorkQueueExecutor.submit": {
            "name": "submit",
            "location": 344,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "Callable",
                    "Exception"
                ],
                "resource_specification": [
                    "str",
                    "Union[int, slice]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "WorkQueueExecutor._construct_worker_command": {
            "name": "_construct_worker_command",
            "location": 485,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueExecutor._patch_providers": {
            "name": "_patch_providers",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueExecutor._serialize_function": {
            "name": "_serialize_function",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fn_path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "parsl_fn": [
                    "dict",
                    "bool"
                ],
                "parsl_fn_args": [
                    "dict",
                    "bool"
                ],
                "parsl_fn_kwargs": [
                    "dict",
                    "bool"
                ]
            }
        },
        "WorkQueueExecutor._construct_map_file": {
            "name": "_construct_map_file",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "map_file": [
                    "str"
                ],
                "input_files": [
                    "str"
                ],
                "output_files": [
                    "str"
                ]
            }
        },
        "WorkQueueExecutor._register_file": {
            "name": "_register_file",
            "location": 543,
            "return": [
                "str",
                "Dict[cmk.utils.type_defs.HostName, str]"
            ],
            "arguments": {
                "self": [],
                "parsl_file": [
                    "str",
                    "IO[Any]",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "WorkQueueExecutor._std_output_to_wq": {
            "name": "_std_output_to_wq",
            "location": 568,
            "return": [
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "fdname": [
                    "int"
                ],
                "stdfspec": [
                    "int"
                ]
            }
        },
        "WorkQueueExecutor._prepare_package": {
            "name": "_prepare_package",
            "location": 575,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "bool"
                ],
                "extra_pkgs": [
                    "purplship.providers.ups.utils.Settings",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Collection[str]",
                    "dict"
                ]
            }
        },
        "WorkQueueExecutor.initialize_scaling": {
            "name": "initialize_scaling",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueExecutor.outstanding": {
            "name": "outstanding",
            "location": 626,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueExecutor.workers_per_node": {
            "name": "workers_per_node",
            "location": 639,
            "return": [
                "str",
                "tuple",
                "Tuple[str, str, str]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueExecutor.scale_in": {
            "name": "scale_in",
            "location": 642,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "count": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "WorkQueueExecutor.shutdown": {
            "name": "shutdown",
            "location": 655,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueExecutor.scaling_enabled": {
            "name": "scaling_enabled",
            "location": 671,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkQueueExecutor.run_dir": {
            "name": "run_dir",
            "location": 676,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "WorkQueueExecutor._collect_work_queue_results": {
            "name": "_collect_work_queue_results",
            "location": 684,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/executors/workqueue/exec_parsl_function.py": {
        "load_pickled_file": {
            "name": "load_pickled_file",
            "location": 28,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, Tuple[str, str]]",
                "Dict[str, Union[str, int]]",
                "cmk.utils.type_defs.ServiceCheckResult"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "dump_result_to_file": {
            "name": "dump_result_to_file",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "result_file": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "result_package": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Mapping",
                    "Union[dict, list]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "remap_location": {
            "name": "remap_location",
            "location": 38,
            "return": [
                "DefaultDict",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "mapping": [
                    "str",
                    "Optional[str]"
                ],
                "parsl_file": [
                    "str"
                ]
            }
        },
        "remap_list_of_files": {
            "name": "remap_list_of_files",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "mapping": [
                    "Sequence[str]",
                    "List[str]",
                    "dict"
                ],
                "maybe_files": [
                    "bool",
                    "BinaryIO",
                    "Iterable[str]",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "remap_all_files": {
            "name": "remap_all_files",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "mapping": [
                    "str"
                ],
                "fn_args": [
                    "str",
                    "Optional[str]",
                    "T"
                ],
                "fn_kwargs": [
                    "dict",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "Dict[str, str]",
                    "Dict[str, bool]"
                ]
            }
        },
        "unpack_function": {
            "name": "unpack_function",
            "location": 75,
            "return": [
                "bool",
                "type",
                "int"
            ],
            "arguments": {
                "function_info": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "user_namespace": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "unpack_source_code_function": {
            "name": "unpack_source_code_function",
            "location": 84,
            "return": [
                "Dict[str, Any]",
                "str",
                "List[str]",
                "T"
            ],
            "arguments": {
                "function_info": [
                    "Type",
                    "Exception",
                    "str",
                    "type"
                ],
                "user_namespace": [
                    "str",
                    "bool",
                    "list",
                    "Iterable[T]",
                    "raiden.utils.List"
                ]
            }
        },
        "unpack_byte_code_function": {
            "name": "unpack_byte_code_function",
            "location": 92,
            "return": [
                "bool",
                "Type",
                "type",
                "str"
            ],
            "arguments": {
                "function_info": [
                    "str",
                    "tuple"
                ],
                "user_namespace": [
                    "str",
                    "tuple"
                ]
            }
        },
        "encode_function": {
            "name": "encode_function",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "user_namespace": [
                    "bool",
                    "str",
                    "dict"
                ],
                "fn": [
                    "str",
                    "Optional[str]"
                ],
                "fn_name": [
                    "app.models.User",
                    "str",
                    "bytes",
                    "bool",
                    "cmk.utils.type_defs.HostName"
                ],
                "fn_args": [
                    "bool",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ],
                "fn_kwargs": [
                    "bool",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "encode_source_code_function": {
            "name": "encode_source_code_function",
            "location": 121,
            "return": [
                "str",
                "dict",
                "Tuple[str]"
            ],
            "arguments": {
                "user_namespace": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]",
                    "dict"
                ],
                "fn": [
                    "str",
                    "Optional[str]",
                    "int",
                    "BinaryIO",
                    "List[str]"
                ],
                "fn_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "args_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "kwargs_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "result_name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "encode_byte_code_function": {
            "name": "encode_byte_code_function",
            "location": 132,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "user_namespace": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[str]",
                    "bool"
                ],
                "fn": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[str]",
                    "bool"
                ],
                "fn_name": [
                    "str",
                    "bool",
                    "Awaitable",
                    "int"
                ],
                "args_name": [
                    "str"
                ],
                "kwargs_name": [
                    "str"
                ],
                "result_name": [
                    "str"
                ]
            }
        },
        "load_function": {
            "name": "load_function",
            "location": 138,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "map_file": [
                    "str",
                    "dict",
                    "Union[slice, List[slice], List[int]]"
                ],
                "function_file": [
                    "str",
                    "Optional['Directory']"
                ]
            }
        },
        "execute_function": {
            "name": "execute_function",
            "location": 161,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "int",
                "\"Parameter\"",
                "List[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "namespace": [
                    "str"
                ],
                "function_code": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ],
                "result_name": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        }
    },
    "parsl-master/parsl/executors/workqueue/__init__.py": {},
    "parsl-master/parsl/launchers/error.py": {
        "BadLauncher.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "launcher": [
                    "int",
                    "bool",
                    "float"
                ],
                "reason": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BadLauncher.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/launchers/launchers.py": {
        "Launcher.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "Launcher.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "Dict[str, Any]"
                ],
                "tasks_per_node": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "Dict[str, Any]"
                ],
                "nodes_per_block": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SimpleLauncher.__init_": {
            "name": "__init_",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "SimpleLauncher.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "Dict[str, Any]"
                ],
                "tasks_per_node": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "Dict[str, Any]"
                ],
                "nodes_per_block": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "WrappedLauncher.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prepend": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool",
                    "str",
                    "Callable"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "WrappedLauncher.__call__": {
            "name": "__call__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "int"
                ],
                "tasks_per_node": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "List[str]",
                    "IO",
                    "str"
                ],
                "nodes_per_block": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "List[str]",
                    "IO",
                    "str"
                ],
                "debug": [
                    "bool",
                    "int",
                    "List[Type[Exception]]",
                    "List[str]",
                    "IO",
                    "str"
                ]
            }
        },
        "SingleNodeLauncher.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ],
                "fail_on_any": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "SingleNodeLauncher.__call__": {
            "name": "__call__",
            "location": 74,
            "return": [
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "tasks_per_node": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ],
                "nodes_per_block": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "GnuParallelLauncher.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "GnuParallelLauncher.__call__": {
            "name": "__call__",
            "location": 144,
            "return": [
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "int",
                    "dict",
                    "bool"
                ],
                "tasks_per_node": [
                    "bool"
                ],
                "nodes_per_block": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "MpiExecLauncher.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "MpiExecLauncher.__call__": {
            "name": "__call__",
            "location": 208,
            "return": [
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "tasks_per_node": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ],
                "nodes_per_block": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "MpiRunLauncher.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ],
                "bash_location": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "overrides": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "MpiRunLauncher.__call__": {
            "name": "__call__",
            "location": 261,
            "return": [
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]",
                    "int",
                    "bytes"
                ],
                "tasks_per_node": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ],
                "nodes_per_block": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "SrunLauncher.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ],
                "overrides": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "SrunLauncher.__call__": {
            "name": "__call__",
            "location": 309,
            "return": [
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "tasks_per_node": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ],
                "nodes_per_block": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "SrunMPILauncher.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ],
                "overrides": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "SrunMPILauncher.__call__": {
            "name": "__call__",
            "location": 361,
            "return": [
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "List[Union[int, Any]]",
                    "List[Union[int, str]]",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "tasks_per_node": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ],
                "nodes_per_block": [
                    "Optional[Callable[[Type, Dict], Any]]",
                    "Callable",
                    "Optional[str]",
                    "bool",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "AprunLauncher.__init__": {
            "name": "__init__",
            "location": 422,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ],
                "overrides": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "AprunLauncher.__call__": {
            "name": "__call__",
            "location": 433,
            "return": [
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "tasks_per_node": [],
                "nodes_per_block": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "JsrunLauncher.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool"
                ],
                "overrides": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "JsrunLauncher.__call__": {
            "name": "__call__",
            "location": 481,
            "return": [
                "str",
                "Union[bool, List[bool]]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[Union[Any, Any]]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "tasks_per_node": [],
                "nodes_per_block": [
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/launchers/__init__.py": {},
    "parsl-master/parsl/monitoring/db_manager.py": {
        "dbm_starter": {
            "name": "dbm_starter",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "exception_q": [
                    "int",
                    "Optional[int]",
                    "Callable",
                    "bool",
                    "Union[None, int]",
                    "List[str]"
                ],
                "priority_msgs": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "node_msgs": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "block_msgs": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "resource_msgs": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "db_url": [
                    "str",
                    "int",
                    "bool",
                    "tuple",
                    "dict"
                ],
                "logdir": [
                    "str",
                    "int",
                    "bool",
                    "tuple",
                    "dict"
                ],
                "logging_level": [
                    "str",
                    "int",
                    "bool",
                    "tuple",
                    "dict"
                ]
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ]
            }
        },
        "Database._get_mapper": {
            "name": "_get_mapper",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "table_obj": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Database.update": {
            "name": "update",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.insert": {
            "name": "insert",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.rollback": {
            "name": "rollback",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database._generate_mappings": {
            "name": "_generate_mappings",
            "location": 109,
            "return": [
                "str",
                "OrderedDict",
                "bytes",
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "columns": [
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]"
                ],
                "messages": [
                    "bool",
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "DatabaseManager.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_url": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ],
                "logdir": [
                    "str",
                    "bool",
                    "Mapping"
                ],
                "logging_level": [
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ],
                "batching_interval": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ],
                "batching_threshold": [
                    "bool",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "DatabaseManager.start": {
            "name": "start",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "priority_queue": [
                    "int",
                    "float"
                ],
                "node_queue": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "block_queue": [
                    "int",
                    "float"
                ],
                "resource_queue": [
                    "int",
                    "float"
                ]
            }
        },
        "DatabaseManager._migrate_logs_to_internal": {
            "name": "_migrate_logs_to_internal",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logs_queue": [
                    "Optional[str]",
                    "bool",
                    "IO[Any]",
                    "dict"
                ],
                "queue_tag": [
                    "logging.Logger",
                    "str",
                    "uita.types.DiscordUser",
                    "Optional[str]"
                ],
                "kill_event": [
                    "Optional[str]",
                    "bool",
                    "dict",
                    "Callable[[Dict], None]"
                ]
            }
        },
        "DatabaseManager._dispatch_to_internal": {
            "name": "_dispatch_to_internal",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "dict",
                    "Match"
                ]
            }
        },
        "DatabaseManager._update": {
            "name": "_update",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "Dict[str, Any]"
                ],
                "columns": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Union[Dict, List]"
                ],
                "messages": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Union[Dict, List]"
                ]
            }
        },
        "DatabaseManager._insert": {
            "name": "_insert",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Callable"
                ],
                "messages": [
                    "str",
                    "dict"
                ]
            }
        },
        "DatabaseManager._get_messages_in_batch": {
            "name": "_get_messages_in_batch",
            "location": 665,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "msg_queue": [
                    "int",
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DatabaseManager.close": {
            "name": "close",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/monitoring/message_type.py": {},
    "parsl-master/parsl/monitoring/monitoring.py": {
        "start_file_logger": {
            "name": "start_file_logger",
            "location": 42,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "logging.Logger"
                ],
                "name": [
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ],
                "format_string": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "filesystem_receiver": {
            "name": "filesystem_receiver",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "logdir": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "q": [
                    "str",
                    "multiprocessing.Queue",
                    "bool",
                    "Optional[str]"
                ],
                "run_dir": [
                    "str",
                    "Union[os.PathLike, str]"
                ]
            }
        },
        "router_starter": {
            "name": "router_starter",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "comm_q": [
                    "multiprocessing.Queue",
                    "bool",
                    "str",
                    "Dict[Tuple[int, int], int]",
                    "int",
                    "Optional[str]"
                ],
                "exception_q": [
                    "List[str]",
                    "int",
                    "float",
                    "List[float]",
                    "Optional[int]"
                ],
                "priority_msgs": [
                    "Optional[str]",
                    "bool",
                    "float",
                    "int"
                ],
                "node_msgs": [
                    "Optional[str]",
                    "bool",
                    "float",
                    "int"
                ],
                "block_msgs": [
                    "Optional[str]",
                    "bool",
                    "float",
                    "int"
                ],
                "resource_msgs": [
                    "Optional[str]",
                    "bool",
                    "float",
                    "int"
                ],
                "hub_address": [
                    "bool",
                    "backup.time.Time",
                    "Optional[bool]",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount"
                ],
                "hub_port": [
                    "bool",
                    "backup.time.Time",
                    "Optional[bool]",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount"
                ],
                "hub_port_range": [
                    "bool",
                    "backup.time.Time",
                    "Optional[bool]",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount"
                ],
                "logdir": [
                    "bool",
                    "backup.time.Time",
                    "Optional[bool]",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount"
                ],
                "logging_level": [
                    "bool",
                    "backup.time.Time",
                    "Optional[bool]",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount"
                ],
                "run_id": [
                    "bool",
                    "backup.time.Time",
                    "Optional[bool]",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.ChainID",
                    "raiden.utils.Signature",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "send_first_message": {
            "name": "send_first_message",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "try_id": [
                    "int",
                    "Optional[float]",
                    "Dict[str, str]",
                    "bool",
                    "cmk.utils.type_defs.UserId",
                    "str"
                ],
                "task_id": [
                    "int",
                    "Optional[float]",
                    "Dict[str, str]",
                    "bool",
                    "cmk.utils.type_defs.UserId",
                    "str"
                ],
                "monitoring_hub_url": [
                    "int",
                    "Optional[float]",
                    "Dict[str, str]",
                    "bool",
                    "cmk.utils.type_defs.UserId",
                    "str"
                ],
                "run_id": [
                    "int",
                    "Optional[float]",
                    "Dict[str, str]",
                    "bool",
                    "cmk.utils.type_defs.UserId",
                    "str"
                ],
                "radio_mode": [
                    "int",
                    "Optional[float]",
                    "Dict[str, str]",
                    "bool",
                    "cmk.utils.type_defs.UserId",
                    "str"
                ],
                "run_dir": [
                    "int",
                    "Optional[float]",
                    "Dict[str, str]",
                    "bool",
                    "cmk.utils.type_defs.UserId",
                    "str"
                ]
            }
        },
        "send_last_message": {
            "name": "send_last_message",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "try_id": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, str]",
                    "raiden.utils.Optional[str]",
                    "cmk.utils.type_defs.UserId"
                ],
                "task_id": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, str]",
                    "raiden.utils.Optional[str]",
                    "cmk.utils.type_defs.UserId"
                ],
                "monitoring_hub_url": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, str]",
                    "raiden.utils.Optional[str]",
                    "cmk.utils.type_defs.UserId"
                ],
                "run_id": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, str]",
                    "raiden.utils.Optional[str]",
                    "cmk.utils.type_defs.UserId"
                ],
                "radio_mode": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, str]",
                    "raiden.utils.Optional[str]",
                    "cmk.utils.type_defs.UserId"
                ],
                "run_dir": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Dict[str, str]",
                    "raiden.utils.Optional[str]",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "send_first_last_message": {
            "name": "send_first_last_message",
            "location": 765,
            "return": [
                "int",
                "Optional[bool]",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Set[VT]"
            ],
            "arguments": {
                "try_id": [
                    "str",
                    "datetime.datetime",
                    "Optional[bool]"
                ],
                "task_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "monitoring_hub_url": [
                    "str",
                    "bool",
                    "int"
                ],
                "run_id": [
                    "str",
                    "datetime.datetime",
                    "Optional[bool]"
                ],
                "radio_mode": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "run_dir": [
                    "str"
                ],
                "is_last": [
                    "str",
                    "datetime.datetime",
                    "Optional[bool]"
                ]
            }
        },
        "monitor": {
            "name": "monitor",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "pid": [
                    "Optional[int]",
                    "datetime.datetime",
                    "int",
                    "List[str]",
                    "str",
                    "web3.types.Timestamp"
                ],
                "try_id": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.ChainID",
                    "int"
                ],
                "task_id": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "monitoring_hub_url": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "run_id": [
                    "str",
                    "bool"
                ],
                "radio_mode": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "logging_level": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "sleep_dur": [
                    "int",
                    "str",
                    "raiden.utils.Address"
                ],
                "run_dir": [
                    "str"
                ],
                "terminate_event": [
                    "int",
                    "Iterable[str]",
                    "str",
                    "List[str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ]
            }
        },
        "MonitoringRadio.send": {
            "name": "send",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FilesystemRadio.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FilesystemRadio.send": {
            "name": "send",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "HTEXRadio.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monitoring_url": [
                    "str",
                    "int"
                ],
                "source_id": [
                    "str",
                    "Dict[str, Any]"
                ],
                "timeout": [
                    "str",
                    "int"
                ]
            }
        },
        "HTEXRadio.send": {
            "name": "send",
            "location": 153,
            "return": [
                "itsim.machine.process_managemenprocess.Process",
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "UDPRadio.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monitoring_url": [
                    "str",
                    "int",
                    "Optional[Tuple[int, int]]",
                    "bytes"
                ],
                "source_id": [
                    "str",
                    "Dict[str, Any]"
                ],
                "timeout": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "UDPRadio.send": {
            "name": "send",
            "location": 224,
            "return": [
                "mypy.types.Instance"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "int",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "MonitoringHub.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hub_address": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "hub_port": [
                    "bool",
                    "float",
                    "str"
                ],
                "hub_port_range": [
                    "Callable",
                    "bool",
                    "int",
                    "str"
                ],
                "client_address": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "client_port_range": [
                    "Callable",
                    "bool",
                    "int",
                    "str"
                ],
                "workflow_name": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ],
                "workflow_version": [
                    "Callable",
                    "bool",
                    "int",
                    "str"
                ],
                "logging_endpoint": [
                    "str",
                    "int"
                ],
                "logdir": [
                    "Callable",
                    "bool",
                    "int",
                    "str"
                ],
                "monitoring_debug": [
                    "Callable",
                    "bool",
                    "int",
                    "str"
                ],
                "resource_monitoring_enabled": [
                    "List[str]",
                    "bool",
                    "int",
                    "Iterable[str]",
                    "datetime.timedelta"
                ],
                "resource_monitoring_interval": [
                    "List[str]",
                    "bool",
                    "int",
                    "Iterable[str]",
                    "datetime.timedelta"
                ]
            }
        },
        "MonitoringHub.start": {
            "name": "start",
            "location": 337,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list",
                "types.ServiceT"
            ],
            "arguments": {
                "self": [],
                "run_id": [
                    "str",
                    "bool",
                    "float",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ],
                "run_dir": [
                    "str"
                ]
            }
        },
        "MonitoringHub.send": {
            "name": "send",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtype": [
                    "int",
                    "str"
                ],
                "message": [
                    "int",
                    "str"
                ]
            }
        },
        "MonitoringHub.close": {
            "name": "close",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonitoringHub.monitor_wrapper": {
            "name": "monitor_wrapper",
            "location": 460,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ],
                "try_id": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ],
                "task_id": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ],
                "monitoring_hub_url": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ],
                "run_id": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ],
                "logging_level": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ],
                "sleep_dur": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ],
                "radio_mode": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ],
                "monitor_resources": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ],
                "run_dir": [
                    "str",
                    "List[Tuple[int, int]]",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "MonitoringRouter.__init__": {
            "name": "__init__",
            "location": 570,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonitoringRouter.start": {
            "name": "start",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "priority_msgs": [
                    "Sequence[int]",
                    "int",
                    "float",
                    "Dict[int, dict]",
                    "Iterable[int]",
                    "dict"
                ],
                "node_msgs": [
                    "int",
                    "str",
                    "List[int]",
                    "raiden.utils.TokenAmount"
                ],
                "block_msgs": [
                    "float",
                    "bytes",
                    "int",
                    "bool",
                    "str",
                    "type"
                ],
                "resource_msgs": [
                    "str",
                    "int",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "MonitoringHub.monitor_wrapper.wrapped": {
            "name": "wrapped",
            "location": 474,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/monitoring/types.py": {},
    "parsl-master/parsl/monitoring/__init__.py": {},
    "parsl-master/parsl/monitoring/visualization/app.py": {
        "cli_run": {
            "name": "cli_run",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/monitoring/visualization/models.py": {},
    "parsl-master/parsl/monitoring/visualization/utils.py": {
        "timestamp_to_float": {
            "name": "timestamp_to_float",
            "location": 7,
            "return": [
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "time": [
                    "str",
                    "datetime.datetime"
                ],
                "format": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "timestamp_to_int": {
            "name": "timestamp_to_int",
            "location": 11,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "time": [
                    "int",
                    "float"
                ]
            }
        },
        "num_to_timestamp": {
            "name": "num_to_timestamp",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/monitoring/visualization/version.py": {},
    "parsl-master/parsl/monitoring/visualization/views.py": {
        "format_time": {
            "name": "format_time",
            "location": 15,
            "return": [
                "Optional[bool]",
                "str",
                "Optional[str]",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "value": [
                    "datetime.datetime",
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[object]",
                    "datetime.date",
                    "Union[int, float, None]"
                ]
            }
        },
        "format_duration": {
            "name": "format_duration",
            "location": 29,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "Union[float, int]",
                    "int",
                    "float"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 42,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "workflow": {
            "name": "workflow",
            "location": 52,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "workflow_id": [
                    "transfer.models.SnippetID",
                    "str",
                    "int"
                ]
            }
        },
        "parsl_app": {
            "name": "parsl_app",
            "location": 78,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "workflow_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "app_name": [
                    "str",
                    "transfer.models.OrderID",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "parsl_apps": {
            "name": "parsl_apps",
            "location": 93,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "workflow_id": [
                    "str",
                    "transfer.models.SnippetID",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "transfer.models.TicketBundleID"
                ]
            }
        },
        "task": {
            "name": "task",
            "location": 107,
            "return": [
                "str",
                "Optional[str]",
                "tracim.models.context_models.ContentInContext",
                "dict"
            ],
            "arguments": {
                "workflow_id": [
                    "str",
                    "int",
                    "transfer.models.TicketBundleID"
                ],
                "task_id": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "workflow_dag_details": {
            "name": "workflow_dag_details",
            "location": 132,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "workflow_id": [
                    "str",
                    "int",
                    "Type[models.taxonomies.T]"
                ],
                "path": [
                    "str",
                    "dep_check.models.SourceFile",
                    "bytes",
                    "Optional[bool]"
                ]
            }
        },
        "workflow_resources": {
            "name": "workflow_resources",
            "location": 154,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "workflow_id": [
                    "transfer.models.OrderID",
                    "transfer.models.SnippetID",
                    "int",
                    "Optional[int]",
                    "shop.transfer.models.ShopID"
                ]
            }
        }
    },
    "parsl-master/parsl/monitoring/visualization/__init__.py": {},
    "parsl-master/parsl/monitoring/visualization/plots/__init__.py": {},
    "parsl-master/parsl/monitoring/visualization/plots/default/task_plots.py": {
        "time_series_cpu_per_task_plot": {
            "name": "time_series_cpu_per_task_plot",
            "location": 5,
            "return": [
                "bool",
                "int",
                "Optional[float]",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {
                "df_resources": [
                    "int"
                ],
                "resource_type": [
                    "int"
                ],
                "label": [
                    "int"
                ]
            }
        },
        "time_series_memory_per_task_plot": {
            "name": "time_series_memory_per_task_plot",
            "location": 18,
            "return": [
                "bool",
                "int",
                "Optional[float]",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {
                "df_resources": [
                    "str",
                    "Tuple[str, str]",
                    "int",
                    "List[str]",
                    "List['Photo']"
                ],
                "resource_type": [
                    "str",
                    "Tuple[str, str]",
                    "int",
                    "List[str]",
                    "List['Photo']"
                ],
                "label": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Mapping[str, Any]",
                    "Set[str]"
                ]
            }
        }
    },
    "parsl-master/parsl/monitoring/visualization/plots/default/workflow_plots.py": {
        "task_gantt_plot": {
            "name": "task_gantt_plot",
            "location": 12,
            "return": [
                "str",
                "bool",
                "int",
                "float",
                "dict",
                "numpy.ndarray"
            ],
            "arguments": {
                "df_task": [
                    "Tuple[int, str]",
                    "int",
                    "bool"
                ],
                "df_status": [
                    "bool",
                    "int"
                ],
                "time_completed": [
                    "bool",
                    "int",
                    "raiden.utils.NodeNetworkStateMap",
                    "raiden.utils.List[raiden.transfer.state.RouteState]"
                ]
            }
        },
        "task_per_app_plot": {
            "name": "task_per_app_plot",
            "location": 79,
            "return": [
                "str",
                "int",
                "float",
                "dict",
                "bool"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int"
                ],
                "status": [
                    "str",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "total_tasks_plot": {
            "name": "total_tasks_plot",
            "location": 117,
            "return": [
                "bool",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "df_task": [
                    "bool",
                    "int",
                    "str"
                ],
                "df_status": [
                    "bool",
                    "int",
                    "str"
                ],
                "columns": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "workflow_dag_plot": {
            "name": "workflow_dag_plot",
            "location": 189,
            "return": [
                "int",
                "str",
                "float",
                "Iterable[numpy.dtype]"
            ],
            "arguments": {
                "df_tasks": [
                    "str",
                    "dict"
                ],
                "group_by_apps": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "total_tasks_plot.y_axis_setup": {
            "name": "y_axis_setup",
            "location": 136,
            "return": [
                "Dict[str, Any]",
                "pandas.DataFrame",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "list",
                    "List[Union[int, float]]",
                    "str",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "parsl-master/parsl/monitoring/visualization/plots/default/workflow_resource_plots.py": {
        "resource_distribution_plot": {
            "name": "resource_distribution_plot",
            "location": 8,
            "return": [
                "int",
                "str",
                "float",
                "Iterable[numpy.dtype]"
            ],
            "arguments": {
                "df_resources": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[list]",
                    "bool",
                    "float"
                ],
                "df_task": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[list]",
                    "bool",
                    "float"
                ],
                "type": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[list]",
                    "bool",
                    "float"
                ],
                "label": [
                    "dict",
                    "pandas.DataFrame",
                    "Sequence[Mapping]",
                    "List[Tuple[str, str]]"
                ],
                "option": [
                    "dict",
                    "pandas.DataFrame",
                    "Sequence[Mapping]",
                    "List[Tuple[str, str]]"
                ],
                "columns": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[list]",
                    "bool",
                    "float"
                ]
            }
        },
        "resource_time_series": {
            "name": "resource_time_series",
            "location": 64,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "tasks": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Dict[str, int]",
                    "Optional[str]"
                ],
                "type": [
                    "str",
                    "int",
                    "numpy.dtype",
                    "list",
                    "Dict[str, Any]",
                    "pandas.DataFrame"
                ],
                "label": [
                    "bool"
                ]
            }
        },
        "worker_efficiency": {
            "name": "worker_efficiency",
            "location": 97,
            "return": [
                "int",
                "str",
                "float",
                "Iterable[numpy.dtype]"
            ],
            "arguments": {
                "task": [
                    "int",
                    "Union[str, int, None]",
                    "Optional[str]"
                ],
                "node": [
                    "dict"
                ]
            }
        },
        "resource_efficiency": {
            "name": "resource_efficiency",
            "location": 144,
            "return": [
                "int",
                "str",
                "float",
                "Iterable[numpy.dtype]"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "node": [],
                "label": [
                    "bool",
                    "numpy.ndarray",
                    "Iterable[T]"
                ]
            }
        },
        "resource_distribution_plot.y_axis_setup": {
            "name": "y_axis_setup",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "pandas.DataFrame",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/monitoring/visualization/plots/default/__init__.py": {},
    "parsl-master/parsl/providers/cluster_provider.py": {
        "ClusterProvider.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Optional[str]"
                ],
                "channel": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "tuple"
                ],
                "nodes_per_block": [
                    "str",
                    "Iterable[int]",
                    "Dict[str, T]",
                    "int"
                ],
                "init_blocks": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "min_blocks": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "max_blocks": [
                    "int"
                ],
                "parallelism": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "tuple"
                ],
                "walltime": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "tuple"
                ],
                "launcher": [
                    "str",
                    "float",
                    "int"
                ],
                "cmd_timeout": [
                    "int",
                    "float",
                    "Dict[str, int]",
                    "Callable[[str], List[str]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "ClusterProvider.execute_wait": {
            "name": "execute_wait",
            "location": 79,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "float"
                ],
                "timeout": [
                    "Optional[float]",
                    "str",
                    "Optional[Callable]",
                    "List[str]"
                ]
            }
        },
        "ClusterProvider._write_submit_script": {
            "name": "_write_submit_script",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "script_filename": [
                    "str"
                ],
                "job_name": [
                    "str",
                    "Optional[str]"
                ],
                "configs": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ClusterProvider._status": {
            "name": "_status",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterProvider.status": {
            "name": "status",
            "location": 127,
            "return": [
                "List[str]",
                "List[Dict[str, str]]",
                "str",
                "bool",
                "Tuple[List[Any], List[int]]",
                "Dict[str, Any]",
                "Tuple[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "ClusterProvider.label": {
            "name": "label",
            "location": 146,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/error.py": {
        "ScaleOutFailed.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "bool",
                    "float"
                ],
                "reason": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ScaleOutFailed.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerMissingArgs.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "missing_keywords": [
                    "int",
                    "bool",
                    "float"
                ],
                "sitename": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SchedulerMissingArgs.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptPathError.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script_path": [
                    "str",
                    "Iterable[str]"
                ],
                "reason": [
                    "dict",
                    "bool"
                ]
            }
        },
        "ScriptPathError.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmitException.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "message": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ],
                "stdout": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ],
                "stderr": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "SubmitException.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/provider_base.py": {
        "JobState.__new__": {
            "name": "__new__",
            "location": 10,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Union[bytes, str, None]"
                ],
                "value": [
                    "bytes",
                    "str",
                    "Callable"
                ],
                "terminal": [
                    "str",
                    "int",
                    "bool"
                ],
                "status_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "JobStatus.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "list"
                ],
                "message": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "list"
                ],
                "exit_code": [
                    "int",
                    "bytes",
                    "str"
                ],
                "stdout_path": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bytes"
                ],
                "stderr_path": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "JobStatus.terminal": {
            "name": "terminal",
            "location": 52,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.status_name": {
            "name": "status_name",
            "location": 56,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.stdout": {
            "name": "stdout",
            "location": 73,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.stderr": {
            "name": "stderr",
            "location": 77,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus._read_file": {
            "name": "_read_file",
            "location": 80,
            "return": [
                "str",
                "Optional[bool]",
                "Union[None, List[str]]",
                "List[Dict[str, Any]]",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "JobStatus.stdout_summary": {
            "name": "stdout_summary",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.stderr_summary": {
            "name": "stderr_summary",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus._read_summary": {
            "name": "_read_summary",
            "location": 97,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Optional[float]",
                "int",
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ExecutionProvider.submit": {
            "name": "submit",
            "location": 152,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int",
                    "bool"
                ],
                "tasks_per_node": [
                    "str",
                    "int",
                    "bool"
                ],
                "job_name": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ExecutionProvider.status": {
            "name": "status",
            "location": 176,
            "return": [
                "typing.List[JobStatus]"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "list",
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "ExecutionProvider.cancel": {
            "name": "cancel",
            "location": 194,
            "return": [
                "typing.List[builtins.bool]"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        },
        "ExecutionProvider.label": {
            "name": "label",
            "location": 210,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionProvider.mem_per_node": {
            "name": "mem_per_node",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "ExecutionProvider.cores_per_node": {
            "name": "cores_per_node",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "ExecutionProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 252,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/__init__.py": {},
    "parsl-master/parsl/providers/ad_hoc/ad_hoc.py": {
        "AdHocProvider.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channels": [
                    "bool",
                    "str",
                    "int",
                    "Callable"
                ],
                "worker_init": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "List[int]",
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "list",
                    "bytes"
                ],
                "cmd_timeout": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "bytes"
                ],
                "parallelism": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "List[int]",
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "list",
                    "bytes"
                ],
                "move_files": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "bool",
                    "float"
                ]
            }
        },
        "AdHocProvider._write_submit_script": {
            "name": "_write_submit_script",
            "location": 69,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "script_string": [
                    "str",
                    "Union[None, bytes]",
                    "bool"
                ],
                "script_filename": [
                    "str",
                    "int"
                ]
            }
        },
        "AdHocProvider._least_loaded": {
            "name": "_least_loaded",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AdHocProvider.submit": {
            "name": "submit",
            "location": 127,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]",
                    "int"
                ],
                "tasks_per_node": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]",
                    "int"
                ],
                "job_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AdHocProvider.status": {
            "name": "status",
            "location": 194,
            "return": [
                "str",
                "bytes",
                "Optional[str]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "AdHocProvider.cancel": {
            "name": "cancel",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "AdHocProvider.scaling_enabled": {
            "name": "scaling_enabled",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdHocProvider.label": {
            "name": "label",
            "location": 246,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdHocProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 250,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/ad_hoc/__init__.py": {},
    "parsl-master/parsl/providers/aws/aws.py": {
        "AWSProvider.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image_id": [
                    "str"
                ],
                "key_name": [
                    "str",
                    "int"
                ],
                "init_blocks": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[Callable]",
                    "Optional[Any]"
                ],
                "min_blocks": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[Callable]",
                    "Optional[Any]"
                ],
                "max_blocks": [
                    "int",
                    "Tuple[int, int]",
                    "Set[int]",
                    "Callable[[int], int]"
                ],
                "nodes_per_block": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "parallelism": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "worker_init": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "instance_type": [
                    "str",
                    "bool",
                    "Optional[Sequence[str]]",
                    "list"
                ],
                "region": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "spot_max_bid": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "key_file": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool",
                    "Tuple[str]"
                ],
                "profile": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "iam_instance_profile_arn": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "state_file": [
                    "Optional[str]",
                    "str",
                    "Optional[List[\"SoftwareApplication\"]]"
                ],
                "walltime": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "linger": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "launcher": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AWSProvider.initialize_boto_client": {
            "name": "initialize_boto_client",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSProvider.read_state_file": {
            "name": "read_state_file",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_file": []
            }
        },
        "AWSProvider.write_state_file": {
            "name": "write_state_file",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSProvider.create_session": {
            "name": "create_session",
            "location": 222,
            "return": [
                "str",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSProvider.create_vpc": {
            "name": "create_vpc",
            "location": 277,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSProvider.security_group": {
            "name": "security_group",
            "location": 353,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "vpc": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "AWSProvider.config_route_table": {
            "name": "config_route_table",
            "location": 438,
            "return": [
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "vpc": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "internet_gateway": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "AWSProvider.xstr": {
            "name": "xstr",
            "location": 454,
            "return": [
                "Dict[str, Any]",
                "Optional[int]",
                "Dict[int, dict]",
                "cmk.utils.type_defs.UserId",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Optional[str]",
                    "Optional[bytes]",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "AWSProvider.spin_up_instance": {
            "name": "spin_up_instance",
            "location": 457,
            "return": [
                "bool",
                "str",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "job_name": [
                    "str"
                ]
            }
        },
        "AWSProvider.shut_down_instance": {
            "name": "shut_down_instance",
            "location": 568,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "instances": [
                    "list",
                    "int",
                    "List[float]",
                    "float"
                ]
            }
        },
        "AWSProvider.get_instance_state": {
            "name": "get_instance_state",
            "location": 592,
            "return": [
                "str",
                "raiden.utils.BlockNumber",
                "raiden.utils.TokenAmount",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instances": [
                    "str",
                    "List[Dict]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "AWSProvider.status": {
            "name": "status",
            "location": 604,
            "return": [
                "Dict[str, Any]",
                "int",
                "dict",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AWSProvider.submit": {
            "name": "submit",
            "location": 631,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "Dict[str, object]"
                ],
                "tasks_per_node": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "memoryview"
                ],
                "job_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AWSProvider.cancel": {
            "name": "cancel",
            "location": 673,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "AWSProvider.show_summary": {
            "name": "show_summary",
            "location": 707,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSProvider.teardown": {
            "name": "teardown",
            "location": 724,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSProvider.generate_aws_id": {
            "name": "generate_aws_id",
            "location": 754,
            "return": [
                "str",
                "Dict[str, Any]",
                "Mapping[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSProvider.create_name_tag_spec": {
            "name": "create_name_tag_spec",
            "location": 764,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "resource_type": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "AWSProvider.label": {
            "name": "label",
            "location": 782,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSProvider.goodbye": {
            "name": "goodbye",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 789,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/aws/template.py": {},
    "parsl-master/parsl/providers/aws/__init__.py": {},
    "parsl-master/parsl/providers/azure/azure.py": {
        "AzureProvider.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vm_reference": [
                    "int",
                    "bool",
                    "str",
                    "Optional[\"GraphLogger\"]"
                ],
                "init_blocks": [
                    "str",
                    "bool"
                ],
                "min_blocks": [
                    "str",
                    "bool"
                ],
                "max_blocks": [
                    "int",
                    "list"
                ],
                "parallelism": [
                    "int",
                    "bool",
                    "str",
                    "Optional[\"GraphLogger\"]"
                ],
                "worker_init": [
                    "int",
                    "bool",
                    "str",
                    "Optional[\"GraphLogger\"]"
                ],
                "location": [
                    "int",
                    "bool",
                    "str",
                    "Optional[\"GraphLogger\"]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, float]"
                ],
                "key_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "key_file": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "vnet_name": [
                    "str"
                ],
                "linger": [
                    "int",
                    "bool",
                    "str",
                    "Optional[\"GraphLogger\"]"
                ],
                "launcher": [
                    "int",
                    "bool",
                    "str",
                    "Optional[\"GraphLogger\"]"
                ]
            }
        },
        "AzureProvider.get_clients": {
            "name": "get_clients",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureProvider.get_credentials": {
            "name": "get_credentials",
            "location": 197,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureProvider.submit": {
            "name": "submit",
            "location": 208,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "cmk.utils.type_defs.TagGroups",
                    "Optional[str]"
                ],
                "tasks_per_node": [
                    "str",
                    "cmk.utils.type_defs.TagGroups",
                    "Optional[str]"
                ],
                "job_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "AzureProvider.status": {
            "name": "status",
            "location": 302,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "list",
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "AzureProvider.cancel": {
            "name": "cancel",
            "location": 326,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "AzureProvider.label": {
            "name": "label",
            "location": 358,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureProvider.create_nic": {
            "name": "create_nic",
            "location": 361,
            "return": [
                "str",
                "dict",
                "zerver.models.Realm",
                "IO",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "network_client": [
                    "bool",
                    "raiden.utils.Address.Hex",
                    "list"
                ]
            }
        },
        "AzureProvider.create_vm_parameters": {
            "name": "create_vm_parameters",
            "location": 440,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "nic_id": [
                    "str",
                    "models.Workspace",
                    "int"
                ],
                "vm_reference": [
                    "str",
                    "models.Workspace",
                    "int"
                ]
            }
        },
        "AzureProvider.create_disk": {
            "name": "create_disk",
            "location": 468,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 486,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/azure/template.py": {},
    "parsl-master/parsl/providers/azure/__init__.py": {},
    "parsl-master/parsl/providers/cobalt/cobalt.py": {
        "CobaltProvider.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "float"
                ],
                "nodes_per_block": [
                    "str",
                    "float"
                ],
                "init_blocks": [
                    "str",
                    "float"
                ],
                "min_blocks": [
                    "str",
                    "float"
                ],
                "max_blocks": [
                    "str",
                    "float"
                ],
                "parallelism": [
                    "str",
                    "float"
                ],
                "walltime": [
                    "str",
                    "float"
                ],
                "account": [
                    "bool",
                    "int",
                    "list",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "queue": [
                    "bool",
                    "int",
                    "list",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "scheduler_options": [
                    "bool",
                    "int",
                    "str",
                    "Callable"
                ],
                "worker_init": [
                    "bool",
                    "int",
                    "list",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "launcher": [
                    "str",
                    "float"
                ],
                "cmd_timeout": [
                    "str",
                    "float"
                ]
            }
        },
        "CobaltProvider._status": {
            "name": "_status",
            "location": 90,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CobaltProvider.submit": {
            "name": "submit",
            "location": 129,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "tasks_per_node": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "job_name": [
                    "str"
                ]
            }
        },
        "CobaltProvider.cancel": {
            "name": "cancel",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "CobaltProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 229,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/cobalt/template.py": {},
    "parsl-master/parsl/providers/cobalt/__init__.py": {},
    "parsl-master/parsl/providers/condor/condor.py": {
        "_chunker": {
            "name": "_chunker",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "seq": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ],
                "size": [
                    "int",
                    "str",
                    "raiden.utils.SecreHash"
                ]
            }
        },
        "CondorProvider.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int",
                    "str"
                ],
                "nodes_per_block": [
                    "int",
                    "str"
                ],
                "cores_per_slot": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "mem_per_slot": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "init_blocks": [
                    "int",
                    "str"
                ],
                "min_blocks": [
                    "int",
                    "str"
                ],
                "max_blocks": [
                    "int",
                    "str"
                ],
                "parallelism": [
                    "int",
                    "str"
                ],
                "environment": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "project": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "scheduler_options": [
                    "str",
                    "List[int]",
                    "Any",
                    "Callable",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "transfer_input_files": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "walltime": [
                    "int",
                    "str"
                ],
                "worker_init": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "launcher": [
                    "int",
                    "str"
                ],
                "requirements": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "cmd_timeout": [
                    "int",
                    "str"
                ],
                "cmd_chunk_size": []
            }
        },
        "CondorProvider._status": {
            "name": "_status",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CondorProvider.status": {
            "name": "status",
            "location": 158,
            "return": [
                "List[str]",
                "List[Dict[str, str]]",
                "str",
                "bool",
                "Tuple[List[Any], List[int]]",
                "Dict[str, Any]",
                "Tuple[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "CondorProvider.submit": {
            "name": "submit",
            "location": 175,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.Item",
                    "cmk.utils.type_defs.CheckPluginName.Str"
                ],
                "tasks_per_node": [
                    "str",
                    "dict"
                ],
                "job_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "CondorProvider.cancel": {
            "name": "cancel",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "CondorProvider._add_resource": {
            "name": "_add_resource",
            "location": 315,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[float]",
                    "list"
                ]
            }
        },
        "CondorProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 321,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/condor/template.py": {},
    "parsl-master/parsl/providers/condor/__init__.py": {},
    "parsl-master/parsl/providers/googlecloud/googlecloud.py": {
        "GoogleCloudProvider.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "bool",
                    "int"
                ],
                "key_file": [
                    "str",
                    "Optional[dict]",
                    "bool"
                ],
                "region": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "os_project": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "os_family": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "google_version": [
                    "Optional[str]",
                    "str",
                    "dict"
                ],
                "instance_type": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[float]",
                    "List[str]"
                ],
                "init_blocks": [
                    "str",
                    "Optional[Callable[[], Any]]",
                    "Optional[Any]",
                    "int"
                ],
                "min_blocks": [
                    "str",
                    "Optional[Callable[[], Any]]",
                    "Optional[Any]",
                    "int"
                ],
                "max_blocks": [
                    "int",
                    "List[int]"
                ],
                "launcher": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int"
                ],
                "parallelism": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "GoogleCloudProvider.submit": {
            "name": "submit",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]"
                ],
                "tasks_per_node": [
                    "str",
                    "Optional[str]"
                ],
                "job_name": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "GoogleCloudProvider.status": {
            "name": "status",
            "location": 121,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "list",
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "GoogleCloudProvider.cancel": {
            "name": "cancel",
            "location": 143,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        },
        "GoogleCloudProvider.bye": {
            "name": "bye",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCloudProvider.create_instance": {
            "name": "create_instance",
            "location": 167,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool",
                    "float"
                ]
            }
        },
        "GoogleCloudProvider.get_zone": {
            "name": "get_zone",
            "location": 219,
            "return": [
                "str",
                "Optional[str]",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "float"
                ]
            }
        },
        "GoogleCloudProvider.delete_instance": {
            "name": "delete_instance",
            "location": 225,
            "return": [
                "bool",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GoogleCloudProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 234,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/googlecloud/__init__.py": {},
    "parsl-master/parsl/providers/grid_engine/grid_engine.py": {
        "GridEngineProvider.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int",
                    "str"
                ],
                "nodes_per_block": [
                    "int",
                    "str"
                ],
                "init_blocks": [
                    "int",
                    "str"
                ],
                "min_blocks": [
                    "int",
                    "str"
                ],
                "max_blocks": [
                    "int",
                    "str"
                ],
                "parallelism": [
                    "int",
                    "str"
                ],
                "walltime": [
                    "int",
                    "str"
                ],
                "scheduler_options": [
                    "bool",
                    "int",
                    "str",
                    "Callable"
                ],
                "worker_init": [
                    "bool",
                    "int",
                    "list",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "launcher": [
                    "int",
                    "str",
                    "bool"
                ],
                "cmd_timeout": [
                    "int",
                    "str"
                ],
                "queue": [
                    "bool",
                    "int",
                    "list",
                    "Tuple[int, int, int]",
                    "str"
                ]
            }
        },
        "GridEngineProvider.get_configs": {
            "name": "get_configs",
            "location": 99,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "Dict[str, List[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool"
                ],
                "tasks_per_node": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "GridEngineProvider.submit": {
            "name": "submit",
            "location": 118,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "tasks_per_node": [
                    "str"
                ],
                "job_name": [
                    "str"
                ]
            }
        },
        "GridEngineProvider._status": {
            "name": "_status",
            "location": 167,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridEngineProvider.cancel": {
            "name": "cancel",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "GridEngineProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 231,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/grid_engine/template.py": {},
    "parsl-master/parsl/providers/grid_engine/__init__.py": {},
    "parsl-master/parsl/providers/kubernetes/kube.py": {
        "KubernetesProvider.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "bool",
                    "str",
                    "float"
                ],
                "namespace": [
                    "bool",
                    "str",
                    "float"
                ],
                "nodes_per_block": [
                    "bool",
                    "str",
                    "dict",
                    "Hashable",
                    "Optional[dict]",
                    "Tuple[int, int]"
                ],
                "init_blocks": [
                    "str",
                    "bool",
                    "Hashable"
                ],
                "min_blocks": [
                    "str",
                    "bool",
                    "Hashable"
                ],
                "max_blocks": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "max_cpu": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "max_mem": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "init_cpu": [
                    "bool",
                    "str",
                    "float"
                ],
                "init_mem": [
                    "bool",
                    "str",
                    "float"
                ],
                "parallelism": [
                    "bool",
                    "str",
                    "float"
                ],
                "worker_init": [
                    "bool",
                    "str",
                    "float"
                ],
                "pod_name": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "bool"
                ],
                "user_id": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "Optional[str]"
                ],
                "group_id": [
                    "int",
                    "bool",
                    "raiden.utils.ChainID",
                    "str",
                    "tuple"
                ],
                "run_as_non_root": [
                    "Optional[str]",
                    "Optional[int]"
                ],
                "secret": [
                    "bool",
                    "Iterable[str]",
                    "List[str]"
                ],
                "persistent_volumes": [
                    "bool",
                    "tuple",
                    "Callable[[str], Any]",
                    "utils.ResolveType",
                    "Callable"
                ]
            }
        },
        "KubernetesProvider.submit": {
            "name": "submit",
            "location": 133,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmd_string": [
                    "str",
                    "Container",
                    "bool",
                    "Callable[[str], str]"
                ],
                "tasks_per_node": [
                    "str",
                    "float",
                    "int",
                    "Callable",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "job_name": [
                    "str"
                ]
            }
        },
        "KubernetesProvider.status": {
            "name": "status",
            "location": 169,
            "return": [
                "List[str]",
                "List[Dict[str, str]]",
                "str",
                "bool",
                "Tuple[List[Any], List[int]]",
                "Dict[str, Any]",
                "Tuple[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "KubernetesProvider.cancel": {
            "name": "cancel",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "qiskiproviders.jobstatus.JobStatus"
                ]
            }
        },
        "KubernetesProvider._status": {
            "name": "_status",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KubernetesProvider._create_pod": {
            "name": "_create_pod",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "pod_name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "job_name": [
                    "str"
                ],
                "port": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "cmd_string": [
                    "str",
                    "int"
                ],
                "volumes": [
                    "str",
                    "Callable"
                ]
            }
        },
        "KubernetesProvider._delete_pod": {
            "name": "_delete_pod",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "KubernetesProvider.label": {
            "name": "label",
            "location": 311,
            "return": [
                "int",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "KubernetesProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 315,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/kubernetes/template.py": {},
    "parsl-master/parsl/providers/kubernetes/__init__.py": {},
    "parsl-master/parsl/providers/local/local.py": {
        "LocalProvider.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ],
                "nodes_per_block": [
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ],
                "launcher": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ],
                "init_blocks": [
                    "str",
                    "bool",
                    "int"
                ],
                "min_blocks": [
                    "str",
                    "bool",
                    "int"
                ],
                "max_blocks": [
                    "int"
                ],
                "worker_init": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ],
                "cmd_timeout": [
                    "float",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "parallelism": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ],
                "move_files": [
                    "str",
                    "bool",
                    "int",
                    "tuple"
                ]
            }
        },
        "LocalProvider.status": {
            "name": "status",
            "location": 63,
            "return": [
                "List[str]",
                "List[Dict[str, str]]",
                "str",
                "bool",
                "Tuple[List[Any], List[int]]",
                "Dict[str, Any]",
                "Tuple[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "LocalProvider._is_alive": {
            "name": "_is_alive",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_dict": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "LocalProvider._job_file_path": {
            "name": "_job_file_path",
            "location": 132,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "script_path": [
                    "str"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "LocalProvider._read_job_file": {
            "name": "_read_job_file",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "script_path": [
                    "str"
                ],
                "suffix": [
                    "str"
                ]
            }
        },
        "LocalProvider._write_submit_script": {
            "name": "_write_submit_script",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "script_string": [
                    "str",
                    "Union[None, bytes]",
                    "bool"
                ],
                "script_filename": [
                    "str",
                    "int"
                ]
            }
        },
        "LocalProvider.submit": {
            "name": "submit",
            "location": 175,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "tasks_per_node": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "job_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LocalProvider._should_move_files": {
            "name": "_should_move_files",
            "location": 251,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalProvider.cancel": {
            "name": "cancel",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "qiskiproviders.jobstatus.JobStatus"
                ]
            }
        },
        "LocalProvider.label": {
            "name": "label",
            "location": 277,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 281,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/local/__init__.py": {},
    "parsl-master/parsl/providers/lsf/lsf.py": {
        "LSFProvider.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int",
                    "bool",
                    "str"
                ],
                "nodes_per_block": [
                    "int",
                    "bool",
                    "str"
                ],
                "cores_per_block": [
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "Hashable"
                ],
                "cores_per_node": [
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[float]"
                ],
                "init_blocks": [
                    "int",
                    "bool",
                    "str"
                ],
                "min_blocks": [
                    "int",
                    "bool",
                    "str"
                ],
                "max_blocks": [
                    "int",
                    "bool",
                    "str"
                ],
                "parallelism": [
                    "int",
                    "bool",
                    "str"
                ],
                "walltime": [
                    "int",
                    "bool",
                    "str"
                ],
                "scheduler_options": [
                    "str"
                ],
                "worker_init": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "list",
                    "str",
                    "Optional[int]"
                ],
                "project": [
                    "str",
                    "Optional[str]"
                ],
                "queue": [
                    "str",
                    "int"
                ],
                "cmd_timeout": [
                    "int",
                    "bool",
                    "str"
                ],
                "move_files": [
                    "str",
                    "int",
                    "Optional[bool]"
                ],
                "bsub_redirection": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "list",
                    "str",
                    "Optional[int]"
                ],
                "request_by_nodes": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "launcher": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "LSFProvider._status": {
            "name": "_status",
            "location": 144,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LSFProvider.submit": {
            "name": "submit",
            "location": 177,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "tasks_per_node": [
                    "str"
                ],
                "job_name": [
                    "str"
                ]
            }
        },
        "LSFProvider.cancel": {
            "name": "cancel",
            "location": 242,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "LSFProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 265,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/lsf/template.py": {},
    "parsl-master/parsl/providers/lsf/__init__.py": {},
    "parsl-master/parsl/providers/pbspro/pbspro.py": {
        "PBSProProvider.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "account": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "queue": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "scheduler_options": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "select_options": [
                    "str",
                    "Optional[str]",
                    "Any",
                    "bool",
                    "Optional[Union[str, Any]]"
                ],
                "worker_init": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "nodes_per_block": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "cpus_per_node": [
                    "bool",
                    "int",
                    "List[int]",
                    "str"
                ],
                "init_blocks": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "min_blocks": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "max_blocks": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "parallelism": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "launcher": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "walltime": [
                    "Optional[\"Address\"]",
                    "str"
                ],
                "cmd_timeout": [
                    "Optional[\"Address\"]",
                    "str"
                ]
            }
        },
        "PBSProProvider.submit": {
            "name": "submit",
            "location": 90,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "tasks_per_node": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "job_name": [
                    "str"
                ]
            }
        },
        "PBSProProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 167,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/pbspro/template.py": {},
    "parsl-master/parsl/providers/pbspro/__init__.py": {},
    "parsl-master/parsl/providers/slurm/slurm.py": {
        "SlurmProvider.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partition": [
                    "str",
                    "int"
                ],
                "account": [
                    "str",
                    "int"
                ],
                "channel": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "nodes_per_block": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "cores_per_node": [
                    "bool",
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "mem_per_node": [
                    "bool",
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "init_blocks": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "min_blocks": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "max_blocks": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "parallelism": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "walltime": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "scheduler_options": [
                    "str",
                    "Dict[str, Any]"
                ],
                "worker_init": [
                    "bool",
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "cmd_timeout": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ],
                "exclusive": [
                    "bool",
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "move_files": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "launcher": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ]
            }
        },
        "SlurmProvider._status": {
            "name": "_status",
            "location": 132,
            "return": [
                "Union[tuple, list]",
                "set",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SlurmProvider.submit": {
            "name": "submit",
            "location": 177,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "tasks_per_node": [
                    "bool",
                    "memoryview",
                    "str",
                    "Optional[Iterable[str]]",
                    "int",
                    "Optional[cmk.utils.type_defs.SectionName]"
                ],
                "job_name": [
                    "str"
                ]
            }
        },
        "SlurmProvider.cancel": {
            "name": "cancel",
            "location": 248,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SlurmProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 271,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/slurm/template.py": {},
    "parsl-master/parsl/providers/slurm/__init__.py": {},
    "parsl-master/parsl/providers/torque/template.py": {},
    "parsl-master/parsl/providers/torque/torque.py": {
        "TorqueProvider.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "account": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "list",
                    "List[int]",
                    "str"
                ],
                "queue": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "list",
                    "List[int]",
                    "str"
                ],
                "scheduler_options": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Any",
                    "Dict[str, Any]"
                ],
                "worker_init": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "list",
                    "List[int]",
                    "str"
                ],
                "nodes_per_block": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "init_blocks": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "min_blocks": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "max_blocks": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "parallelism": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "launcher": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "walltime": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ],
                "cmd_timeout": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "TorqueProvider._status": {
            "name": "_status",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TorqueProvider.submit": {
            "name": "submit",
            "location": 140,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "List[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "tasks_per_node": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "job_name": [
                    "str"
                ]
            }
        },
        "TorqueProvider.cancel": {
            "name": "cancel",
            "location": 220,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_ids": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "TorqueProvider.status_polling_interval": {
            "name": "status_polling_interval",
            "location": 243,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/providers/torque/__init__.py": {},
    "parsl-master/parsl/serialize/base.py": {
        "SerializerBase.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "SerializerBase.identifier": {
            "name": "identifier",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializerBase.chomp": {
            "name": "chomp",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "SerializerBase.enable_caching": {
            "name": "enable_caching",
            "location": 49,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "maxsize": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SerializerBase.serialize": {
            "name": "serialize",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "SerializerBase.deserialize": {
            "name": "deserialize",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/serialize/concretes.py": {
        "PickleSerializer.serialize": {
            "name": "serialize",
            "location": 22,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Union[Dict, List]",
                    "T"
                ]
            }
        },
        "PickleSerializer.deserialize": {
            "name": "deserialize",
            "location": 26,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DillSerializer.serialize": {
            "name": "serialize",
            "location": 48,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Union[Dict, List]",
                    "T"
                ]
            }
        },
        "DillSerializer.deserialize": {
            "name": "deserialize",
            "location": 52,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/serialize/facade.py": {
        "ParslSerializer.__new__": {
            "name": "__new__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[str, Pattern[str]]"
                ]
            }
        },
        "ParslSerializer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslSerializer._list_methods": {
            "name": "_list_methods",
            "location": 37,
            "return": [
                "List[str]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParslSerializer.pack_apply_message": {
            "name": "pack_apply_message",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "bool"
                ],
                "args": [],
                "kwargs": [],
                "buffer_threshold": [
                    "Callable",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "ParslSerializer.unpack_apply_message": {
            "name": "unpack_apply_message",
            "location": 65,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": [],
                "packed_buffer": [
                    "List[int]",
                    "float",
                    "Optional[int]",
                    "Sequence[int]",
                    "int"
                ],
                "user_ns": [
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "copy": [
                    "bool",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "ParslSerializer.serialize": {
            "name": "serialize",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ],
                "buffer_threshold": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ParslSerializer.deserialize": {
            "name": "deserialize",
            "location": 111,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "bytes",
                    "dict",
                    "bool"
                ]
            }
        },
        "ParslSerializer.pack_buffers": {
            "name": "pack_buffers",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "buffers": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ParslSerializer.unpack_buffers": {
            "name": "unpack_buffers",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "packed_buffer": [
                    "BinaryIO",
                    "str",
                    "Union[str, bytes]",
                    "IO[str]",
                    "bytes"
                ]
            }
        },
        "ParslSerializer.unpack_and_deserialize": {
            "name": "unpack_and_deserialize",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "packed_buffer": [
                    "BinaryIO",
                    "str",
                    "Union[str, bytes]",
                    "IO[str]",
                    "bytes"
                ]
            }
        }
    },
    "parsl-master/parsl/serialize/__init__.py": {},
    "parsl-master/parsl/tests/callables_helper.py": {
        "some_aux_func": {
            "name": "some_aux_func",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/conftest.py": {
        "dumpstacks": {
            "name": "dumpstacks",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "sig": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "str",
                    "bool"
                ]
            }
        },
        "pytest_sessionstart": {
            "name": "pytest_sessionstart",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "list",
                    "Iterable"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "load_dfk_session": {
            "name": "load_dfk_session",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "dict"
                ],
                "pytestconfig": [
                    "Dict[str, Any]"
                ]
            }
        },
        "load_dfk_local_module": {
            "name": "load_dfk_local_module",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "pytestconfig": [
                    "Dict[str, Any]"
                ]
            }
        },
        "apply_masks": {
            "name": "apply_masks",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "request": [],
                "pytestconfig": [
                    "Dict[str, Any]"
                ]
            }
        },
        "setup_data": {
            "name": "setup_data",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wait_for_task_completion": {
            "name": "wait_for_task_completion",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "pytestconfig": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "pytest_make_collect_report": {
            "name": "pytest_make_collect_report",
            "location": 229,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "collector": [
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "pytest_ignore_collect": {
            "name": "pytest_ignore_collect",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_aalst_patterns.py": {
        "multiply_rand": {
            "name": "multiply_rand",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "square_sum": {
            "name": "square_sum",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "double_sum": {
            "name": "double_sum",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "subtract": {
            "name": "subtract",
            "location": 32,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "Iterable[Iterable[float]]"
                ],
                "y": [
                    "Iterable[Iterable[float]]"
                ]
            }
        },
        "add_two": {
            "name": "add_two",
            "location": 37,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "rand": {
            "name": "rand",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "square": {
            "name": "square",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "cubed": {
            "name": "cubed",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "sleep_cubed": {
            "name": "sleep_cubed",
            "location": 59,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "increment": {
            "name": "increment",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "slow_increment": {
            "name": "slow_increment",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "join": {
            "name": "join",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "join_three": {
            "name": "join_three",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ],
                "y": [
                    "float",
                    "str"
                ],
                "z": [
                    "float",
                    "str"
                ]
            }
        },
        "sleep_square": {
            "name": "sleep_square",
            "location": 90,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "sum_results": {
            "name": "sum_results",
            "location": 99,
            "return": [
                "int",
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "Type",
                    "T",
                    "int"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 107,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "sum_list": {
            "name": "sum_list",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "sum_lists": {
            "name": "sum_lists",
            "location": 117,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str"
                ],
                "z": [
                    "int",
                    "str",
                    "List[int]",
                    "list",
                    "Union[int, str]"
                ]
            }
        },
        "sum_elements": {
            "name": "sum_elements",
            "location": 129,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "Optional[str]",
                    "int"
                ],
                "z": [
                    "list",
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "simple_sum_elements": {
            "name": "simple_sum_elements",
            "location": 142,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Mapping",
                    "MutableMapping",
                    "List[int]"
                ],
                "y": [
                    "int",
                    "Mapping",
                    "MutableMapping",
                    "List[int]"
                ],
                "z": [
                    "int",
                    "Mapping",
                    "MutableMapping",
                    "List[int]"
                ]
            }
        },
        "eval_number": {
            "name": "eval_number",
            "location": 147,
            "return": [
                "dict",
                "bytes",
                "int",
                "Dict[str, Set[str]]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "return_one": {
            "name": "return_one",
            "location": 157,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {}
        },
        "return_zero": {
            "name": "return_zero",
            "location": 162,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {}
        },
        "xor_split": {
            "name": "xor_split",
            "location": 167,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "arb_rand": {
            "name": "arb_rand",
            "location": 181,
            "return": [
                "int",
                "bool",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "arb_square": {
            "name": "arb_square",
            "location": 189,
            "return": [
                "bool",
                "float",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "arb_cubed": {
            "name": "arb_cubed",
            "location": 198,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "Iterable[Iterable[float]]"
                ]
            }
        },
        "test_increment_p1a": {
            "name": "test_increment_p1a",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_increment_slow_p1b": {
            "name": "test_increment_slow_p1b",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "Callable",
                    "tests.basilisp.helpers.CompileFn",
                    "str"
                ]
            }
        },
        "test_sequence_p1c": {
            "name": "test_sequence_p1c",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_and_split_p2a": {
            "name": "test_and_split_p2a",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_parallel_split_p2b": {
            "name": "test_parallel_split_p2b",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_and_join_p3a": {
            "name": "test_and_join_p3a",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "int"
                ]
            }
        },
        "test_synchronization_p3b": {
            "name": "test_synchronization_p3b",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_xor_split_p4a": {
            "name": "test_xor_split_p4a",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_xor_split_p4b": {
            "name": "test_xor_split_p4b",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_xor_join_p5": {
            "name": "test_xor_join_p5",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_or_split_p6": {
            "name": "test_or_split_p6",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "test_synchronizing_merge_p7": {
            "name": "test_synchronizing_merge_p7",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "Union[str, List[Any]]",
                    "list",
                    "[str]",
                    "dict"
                ],
                "y": [
                    "int",
                    "str",
                    "Union[str, List[Any]]",
                    "list",
                    "[str]",
                    "dict"
                ]
            }
        },
        "test_multi_merge_p8": {
            "name": "test_multi_merge_p8",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_discriminator_p9": {
            "name": "test_discriminator_p9",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_arbitrary_cycles_p10": {
            "name": "test_arbitrary_cycles_p10",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_implicit_termination_p11": {
            "name": "test_implicit_termination_p11",
            "location": 353,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_multi_instances_p12": {
            "name": "test_multi_instances_p12",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_multi_instances_priori_p13": {
            "name": "test_multi_instances_priori_p13",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multi_instances_without_runtime_p15": {
            "name": "test_multi_instances_without_runtime_p15",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multi_instances_runtime_p14": {
            "name": "test_multi_instances_runtime_p14",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[int]",
                    "Union[int, Tuple[int, int]]",
                    "int"
                ]
            }
        },
        "test_deferred_choice_p16": {
            "name": "test_deferred_choice_p16",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unordered_sequence_p17": {
            "name": "test_unordered_sequence_p17",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_milestone_p18": {
            "name": "test_milestone_p18",
            "location": 422,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_withdraw_activity_p19": {
            "name": "test_withdraw_activity_p19",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_cancel_case_p20": {
            "name": "test_cancel_case_p20",
            "location": 449,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_xor_parallel_split": {
            "name": "test_xor_parallel_split",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {
                "width": [
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_callables.py": {
        "app": {
            "name": "app",
            "location": 14,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int"
                ]
            }
        },
        "test_check_base_app": {
            "name": "test_check_base_app",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "somefunc": {
            "name": "somefunc",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_this_module_function": {
            "name": "test_check_this_module_function",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_this_module_function_partial": {
            "name": "test_check_this_module_function_partial",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_import_module_function": {
            "name": "test_check_import_module_function",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_import_module_function_partial": {
            "name": "test_check_import_module_function_partial",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_importlib_file_function": {
            "name": "test_check_importlib_file_function",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_importlib_file_function_partial": {
            "name": "test_check_importlib_file_function_partial",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_importlib_module_function": {
            "name": "test_check_importlib_module_function",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_importlib_module_partial": {
            "name": "test_check_importlib_module_partial",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_flux.py": {
        "multiply": {
            "name": "multiply",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "bad_foo": {
            "name": "bad_foo",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiply": {
            "name": "test_multiply",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_except": {
            "name": "test_except",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_affinity": {
            "name": "test_affinity",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cancel": {
            "name": "test_cancel",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_future_cancel": {
            "name": "test_future_cancel",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_future_running": {
            "name": "test_future_running",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_future_callback_returncode": {
            "name": "test_future_callback_returncode",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_future_callback_nofile": {
            "name": "test_future_callback_nofile",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_future_callback_flux_exception": {
            "name": "test_future_callback_flux_exception",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_future_cancel_no_underlying_future": {
            "name": "test_future_cancel_no_underlying_future",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_summary.py": {
        "succeed": {
            "name": "succeed",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fail": {
            "name": "fail",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_summary": {
            "name": "test_summary",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_swift.py": {
        "foo": {
            "name": "foo",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "slow_foo": {
            "name": "slow_foo",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "bad_foo": {
            "name": "bad_foo",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_slow": {
            "name": "test_slow",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_except": {
            "name": "test_except",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_thread_parallelism.py": {
        "sleep_python": {
            "name": "sleep_python",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "sleep_bash": {
            "name": "sleep_bash",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_parallel_sleep_bash": {
            "name": "test_parallel_sleep_bash",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ],
                "sleep_dur": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "tolerance": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_parallel_sleep_python": {
            "name": "test_parallel_sleep_python",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ],
                "sleep_dur": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "tolerance": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/utils.py": {
        "get_config": {
            "name": "get_config",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/__init__.py": {
        "id_for_memo_file": {
            "name": "id_for_memo_file",
            "location": 6,
            "return": [
                "str",
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "file": [
                    "parsl.data_provider.files.File",
                    "IO[str]",
                    "List[Optional[str]]",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "output_ref": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "[str]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/configs/ad_hoc_cluster_htex.py": {},
    "parsl-master/parsl/tests/configs/azure_single_node.py": {},
    "parsl-master/parsl/tests/configs/bluewaters.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 9,
            "return": [
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Config",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/bridges.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/cc_in2p3.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/comet.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/cooley_htex.py": {},
    "parsl-master/parsl/tests/configs/cori.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/ec2_single_node.py": {},
    "parsl-master/parsl/tests/configs/ec2_spot.py": {},
    "parsl-master/parsl/tests/configs/exex_local.py": {},
    "parsl-master/parsl/tests/configs/frontera.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/htex_ad_hoc_cluster.py": {},
    "parsl-master/parsl/tests/configs/htex_local.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/htex_local_alternate.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 38,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/htex_local_intask_staging.py": {},
    "parsl-master/parsl/tests/configs/htex_local_rsync_staging.py": {},
    "parsl-master/parsl/tests/configs/local_adhoc.py": {},
    "parsl-master/parsl/tests/configs/local_threads.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 5,
            "return": [
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Config",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/local_threads_checkpoint.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 5,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/local_threads_checkpoint_dfk_exit.py": {},
    "parsl-master/parsl/tests/configs/local_threads_checkpoint_periodic.py": {},
    "parsl-master/parsl/tests/configs/local_threads_checkpoint_task_exit.py": {},
    "parsl-master/parsl/tests/configs/local_threads_ftp_in_task.py": {},
    "parsl-master/parsl/tests/configs/local_threads_globus.py": {},
    "parsl-master/parsl/tests/configs/local_threads_http_in_task.py": {},
    "parsl-master/parsl/tests/configs/local_threads_monitoring.py": {},
    "parsl-master/parsl/tests/configs/local_threads_no_cache.py": {},
    "parsl-master/parsl/tests/configs/midway.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 9,
            "return": [
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Config",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/nscc_singapore.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 10,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/osg_htex.py": {},
    "parsl-master/parsl/tests/configs/petrelkube.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 10,
            "return": [
                "str",
                "dict",
                "Optional[dict]",
                "app.config.MQConfig",
                "Config",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/summit.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/swan_htex.py": {},
    "parsl-master/parsl/tests/configs/theta.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "_vendor.traitlets.config.Config",
                "dict",
                "app.config.MQConfig",
                "bool",
                "Optional[dict]",
                "str",
                "app.config.HealthCheckConfig"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/configs/user_opts.py": {},
    "parsl-master/parsl/tests/configs/workqueue_blocks.py": {},
    "parsl-master/parsl/tests/configs/workqueue_ex.py": {},
    "parsl-master/parsl/tests/configs/__init__.py": {},
    "parsl-master/parsl/tests/integration/latency.py": {
        "python_app": {
            "name": "python_app",
            "location": 37,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "python_app_slow": {
            "name": "python_app_slow",
            "location": 43,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "duration": [
                    "Callable",
                    "str",
                    "bool",
                    "List[dict]",
                    "int",
                    "float"
                ]
            }
        },
        "python_noop": {
            "name": "python_noop",
            "location": 51,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "bash_app": {
            "name": "bash_app",
            "location": 56,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "stdout": [
                    "int"
                ],
                "stderr": [
                    "int"
                ]
            }
        },
        "test_python_remote": {
            "name": "test_python_remote",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "count": [
                    "str",
                    "float"
                ]
            }
        },
        "test_python_remote_slow": {
            "name": "test_python_remote_slow",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "count": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "average": {
            "name": "average",
            "location": 82,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "list",
                    "str",
                    "int"
                ]
            }
        },
        "test_python": {
            "name": "test_python",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "count": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_bash": {
            "name": "test_bash",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/integration/test_early_attach_bug.py": {
        "sleep_double": {
            "name": "sleep_double",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_z_cleanup": {
            "name": "test_z_cleanup",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/integration/test_parsl_load_default_config.py": {
        "cpu_stress": {
            "name": "cpu_stress",
            "location": 6,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "inputs": [
                    "bool"
                ],
                "outputs": [
                    "bool"
                ]
            }
        },
        "test_parsl_load_default_config": {
            "name": "test_parsl_load_default_config",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/integration/__init__.py": {},
    "parsl-master/parsl/tests/integration/test_apps/__init__.py": {},
    "parsl-master/parsl/tests/integration/test_apps/HEDM_processlayer/process_layer.py": {
        "create_dirs": {
            "name": "create_dirs",
            "location": 30,
            "return": [],
            "arguments": {
                "cwd": []
            }
        },
        "ls": {
            "name": "ls",
            "location": 53,
            "return": [],
            "arguments": {
                "pwd": [],
                "outputs": []
            }
        },
        "catter": {
            "name": "catter",
            "location": 64,
            "return": [],
            "arguments": {
                "dir": [],
                "dur": [],
                "inputs": [],
                "outputs": [],
                "stdout": [],
                "stderr": []
            }
        },
        "light_app": {
            "name": "light_app",
            "location": 70,
            "return": [],
            "arguments": {
                "dir": [],
                "dur": [],
                "inputs": [],
                "outputs": [],
                "stdout": [],
                "stderr": []
            }
        },
        "csv_maker": {
            "name": "csv_maker",
            "location": 76,
            "return": [],
            "arguments": {
                "dir": [],
                "count": [],
                "dur": [],
                "inputs": [],
                "outputs": [],
                "stdout": [],
                "stderr": []
            }
        },
        "main": {
            "name": "main",
            "location": 86,
            "return": [],
            "arguments": {
                "count": []
            }
        },
        "test_HEDM": {
            "name": "test_HEDM",
            "location": 125,
            "return": [],
            "arguments": {
                "count": []
            }
        }
    },
    "parsl-master/parsl/tests/integration/test_apps/HEDM_processlayer/__init__.py": {},
    "parsl-master/parsl/tests/integration/test_apps/vasp/vasp_example.py": {
        "create_dirs": {
            "name": "create_dirs",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "cwd": [
                    "str",
                    "Union[str, bytes]",
                    "dict"
                ]
            }
        },
        "ls": {
            "name": "ls",
            "location": 60,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "pwd": [
                    "float",
                    "str",
                    "List[Dict]"
                ],
                "outputs": [
                    "str",
                    "TextIO",
                    "IO[Any]"
                ]
            }
        },
        "catter": {
            "name": "catter",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "dir": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes",
                    "Iterable[str]"
                ],
                "outputs": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes",
                    "Iterable[str]"
                ],
                "stdout": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes",
                    "Iterable[str]"
                ],
                "stderr": [
                    "str",
                    "bool",
                    "Union[str, bytes]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/integration/test_apps/vasp/__init__.py": {},
    "parsl-master/parsl/tests/integration/test_channels/test_channels.py": {
        "test_local": {
            "name": "test_local",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/integration/test_channels/test_local_channel.py": {
        "test_env": {
            "name": "test_env",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_env_mod": {
            "name": "test_env_mod",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/integration/test_channels/test_scp_1.py": {
        "connect_and_list": {
            "name": "connect_and_list",
            "location": 6,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "hostname": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ],
                "username": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "test_connect_1": {
            "name": "test_connect_1",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/integration/test_channels/test_ssh_1.py": {
        "connect_and_list": {
            "name": "connect_and_list",
            "location": 4,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "hostname": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ],
                "username": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "test_midway": {
            "name": "test_midway",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_beagle": {
            "name": "test_beagle",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_osg": {
            "name": "test_osg",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cori": {
            "name": "test_cori",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/integration/test_channels/test_ssh_errors.py": {
        "connect_and_list": {
            "name": "connect_and_list",
            "location": 5,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "hostname": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ],
                "username": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "test_error_1": {
            "name": "test_error_1",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_error_2": {
            "name": "test_error_2",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_error_3": {
            "name": "test_error_3",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/integration/test_channels/test_ssh_file_transport.py": {
        "connect_and_list": {
            "name": "connect_and_list",
            "location": 5,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "hostname": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ],
                "username": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "test_push": {
            "name": "test_push",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "bytes"
                ],
                "fname": []
            }
        },
        "test_pull": {
            "name": "test_pull",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ],
                "fname": [
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/integration/test_channels/test_ssh_interactive.py": {
        "connect_and_list": {
            "name": "connect_and_list",
            "location": 5,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "hostname": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ],
                "username": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "test_cooley": {
            "name": "test_cooley",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/integration/test_channels/__init__.py": {},
    "parsl-master/parsl/tests/integration/test_integration/test_ssh/__init__.py": {},
    "parsl-master/parsl/tests/integration/test_providers/ec2/__init__.py": {},
    "parsl-master/parsl/tests/integration/test_stress/test_bash_apps.py": {
        "sleep_foo": {
            "name": "sleep_foo",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleepdur": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/integration/test_stress/test_python_simple.py": {
        "increment": {
            "name": "increment",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_stress": {
            "name": "test_stress",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "count": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/integration/test_stress/test_python_threads.py": {
        "increment": {
            "name": "increment",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_stress": {
            "name": "test_stress",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "count": [
                    "int",
                    "float",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/integration/test_stress/__init__.py": {},
    "parsl-master/parsl/tests/low_latency/constants.py": {},
    "parsl-master/parsl/tests/low_latency/executor.py": {
        "simple_executor": {
            "name": "simple_executor",
            "location": 22,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "f_all": [
                    "Callable[..., Awaitable]",
                    "float",
                    "str"
                ],
                "args_all": [
                    "Callable[..., Awaitable]",
                    "float",
                    "str"
                ],
                "kwargs_all": [
                    "Callable[..., Awaitable]",
                    "float",
                    "str"
                ],
                "num_tasks": [
                    "int",
                    "str"
                ]
            }
        },
        "dealer_executor": {
            "name": "dealer_executor",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "f_all": [
                    "int",
                    "tuple",
                    "dict",
                    "Sequence[Any]",
                    "Callable",
                    "float"
                ],
                "args_all": [
                    "int",
                    "tuple",
                    "dict",
                    "Sequence[Any]",
                    "Callable",
                    "float"
                ],
                "kwargs_all": [
                    "int",
                    "tuple",
                    "dict",
                    "Sequence[Any]",
                    "Callable",
                    "float"
                ],
                "num_tasks": [
                    "int",
                    "Iterator[int]",
                    "Optional[bool]"
                ],
                "return_dict": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "MutableMapping"
                ],
                "port": [
                    "str",
                    "type",
                    "int",
                    "List[str]"
                ],
                "interchange": [
                    "int",
                    "bool",
                    "str"
                ],
                "warmup": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "double": {
            "name": "double",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "f_all": {
            "name": "f_all",
            "location": 150,
            "return": [
                "bool",
                "List[str]",
                "Tuple[bool, int]"
            ],
            "arguments": {}
        },
        "args_all": {
            "name": "args_all",
            "location": 153,
            "return": [
                "Set[str]",
                "int",
                "Optional[dict]",
                "list"
            ],
            "arguments": {}
        },
        "kwargs_all": {
            "name": "kwargs_all",
            "location": 156,
            "return": [
                "bool",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/low_latency/interchange.py": {
        "dealer_interchange": {
            "name": "dealer_interchange",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "manager_ip": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ],
                "manager_port": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ],
                "worker_port": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/low_latency/utils.py": {
        "ping_time": {
            "name": "ping_time",
            "location": 4,
            "return": [
                "int",
                "bool",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "ip": [
                    "str",
                    "Callable[[], Any]",
                    "bool",
                    "int"
                ],
                "n": [
                    "str",
                    "Callable[[], Any]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/low_latency/worker.py": {
        "execute_task": {
            "name": "execute_task",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "f": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[float, float, float, float]"
                ],
                "args": [],
                "kwargs": [],
                "user_ns": [
                    "dict",
                    "tuple",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "dealer_worker": {
            "name": "dealer_worker",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "worker_id": [
                    "int",
                    "str",
                    "bytes"
                ],
                "ip": [
                    "str",
                    "int",
                    "dict"
                ],
                "port": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/low_latency/__init__.py": {},
    "parsl-master/parsl/tests/manual_tests/htex_local.py": {},
    "parsl-master/parsl/tests/manual_tests/llex_local.py": {},
    "parsl-master/parsl/tests/manual_tests/plain_executor.py": {
        "sleep": {
            "name": "sleep",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "double": {
            "name": "double",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "call_sleep": {
            "name": "call_sleep",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "size": [
                    "int",
                    "float"
                ]
            }
        },
        "call_double": {
            "name": "call_double",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "size": [
                    "int",
                    "Union[int, Sequence[int]]"
                ],
                "executor": [
                    "int",
                    "str"
                ]
            }
        },
        "measure_latency": {
            "name": "measure_latency",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "size": [
                    "int",
                    "list"
                ],
                "executor": [
                    "int",
                    "str",
                    "float",
                    "Tuple[int]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_ad_hoc_htex.py": {
        "platform": {
            "name": "platform",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_raw_provider": {
            "name": "test_raw_provider",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_basic.py": {
        "double": {
            "name": "double",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ],
                "string": [
                    "str"
                ],
                "stdout": [
                    "str",
                    "bool"
                ]
            }
        },
        "import_echo": {
            "name": "import_echo",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ],
                "string": [
                    "str"
                ],
                "stdout": [
                    "str",
                    "bool"
                ]
            }
        },
        "platform": {
            "name": "platform",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]",
                    "List[list]"
                ]
            }
        },
        "test_imports": {
            "name": "test_imports",
            "location": 91,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "list"
                ]
            }
        },
        "test_platform": {
            "name": "test_platform",
            "location": 103,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_parallel_for": {
            "name": "test_parallel_for",
            "location": 118,
            "return": [],
            "arguments": {
                "n": [
                    "int",
                    "Sequence",
                    "List[int]",
                    "List[T]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_dynamic_executor.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sleeper": {
            "name": "sleeper",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "dur": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "cpu_stress": {
            "name": "cpu_stress",
            "location": 43,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "dur": [
                    "int",
                    "float"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 55,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_fan_in_out_htex_remote.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "inc": {
            "name": "inc",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "add_inc": {
            "name": "add_inc",
            "location": 59,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "int",
                    "list"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_htex_worker_loss.py": {
        "double": {
            "name": "double",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "platform": {
            "name": "platform",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ],
                "dur": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_manager_fail": {
            "name": "test_manager_fail",
            "location": 90,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ],
                "dur": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_log_filter.py": {
        "platform": {
            "name": "platform",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_platform": {
            "name": "test_platform",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SkipTasksFilter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "avoid_string": [
                    "str",
                    "bool",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "SkipTasksFilter.filter": {
            "name": "filter",
            "location": 22,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_memory_limits.py": {
        "double": {
            "name": "double",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "mem_per_worker": []
            }
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_oauth_ssh.py": {
        "test_channel": {
            "name": "test_channel",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_udp_simple.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sleeper": {
            "name": "sleeper",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "dur": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "cpu_stress": {
            "name": "cpu_stress",
            "location": 35,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "dur": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/manual_tests/test_worker_count.py": {
        "slow_pid": {
            "name": "slow_pid",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_worker": {
            "name": "test_worker",
            "location": 34,
            "return": [],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ],
                "sleep": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/manual_tests/__init__.py": {},
    "parsl-master/parsl/tests/sites/test_affinity.py": {
        "get_worker_info": {
            "name": "get_worker_info",
            "location": 31,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int",
                "dss.config.Replica"
            ],
            "arguments": {}
        },
        "test_htex": {
            "name": "test_htex",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/sites/test_dynamic_executor.py": {
        "sleeper": {
            "name": "sleeper",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "dur": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "cpu_stress": {
            "name": "cpu_stress",
            "location": 17,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "dur": [
                    "int",
                    "float"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 29,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "dur": [
                    "int",
                    "float"
                ]
            }
        },
        "test_dynamic_executor": {
            "name": "test_dynamic_executor",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/sites/test_ec2.py": {
        "python_app_2": {
            "name": "python_app_2",
            "location": 14,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "python_app_1": {
            "name": "python_app_1",
            "location": 23,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "bash_app": {
            "name": "bash_app",
            "location": 32,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "stdout": [
                    "int",
                    "logging.Logger"
                ],
                "stderr": [
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "test_python": {
            "name": "test_python",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "N": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_bash": {
            "name": "test_bash",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/sites/test_launchers.py": {
        "test_wrapped_launcher": {
            "name": "test_wrapped_launcher",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": []
            }
        }
    },
    "parsl-master/parsl/tests/sites/test_local_adhoc.py": {
        "python_app_2": {
            "name": "python_app_2",
            "location": 13,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "python_app_1": {
            "name": "python_app_1",
            "location": 22,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "bash_app": {
            "name": "bash_app",
            "location": 31,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "stdout": [
                    "int",
                    "logging.Logger"
                ],
                "stderr": [
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "test_python": {
            "name": "test_python",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "N": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_bash": {
            "name": "test_bash",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/sites/test_local_exex.py": {
        "python_app_2": {
            "name": "python_app_2",
            "location": 14,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "python_app_1": {
            "name": "python_app_1",
            "location": 23,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "bash_app": {
            "name": "bash_app",
            "location": 32,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "stdout": [
                    "int",
                    "logging.Logger"
                ],
                "stderr": [
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "test_python": {
            "name": "test_python",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "N": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_bash": {
            "name": "test_bash",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/sites/test_worker_info.py": {
        "get_worker_info": {
            "name": "get_worker_info",
            "location": 28,
            "return": [
                "str",
                "int",
                "List[int]",
                "Optional[str]",
                "Union[int, float]"
            ],
            "arguments": {}
        },
        "test_htex": {
            "name": "test_htex",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/sites/__init__.py": {},
    "parsl-master/parsl/tests/sites/test_mpi/__init__.py": {},
    "parsl-master/parsl/tests/site_tests/site_config_selector.py": {
        "fresh_config": {
            "name": "fresh_config",
            "location": 6,
            "return": [
                "str",
                "dict",
                "Optional[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/site_tests/test_provider.py": {
        "platform": {
            "name": "platform",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_provider": {
            "name": "test_provider",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/site_tests/test_site.py": {
        "platform": {
            "name": "platform",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_platform": {
            "name": "test_platform",
            "location": 17,
            "return": [
                "str",
                "Tuple[int, int, bool]",
                "solo.server.app.App"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ],
                "sleep_dur": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/site_tests/__init__.py": {},
    "parsl-master/parsl/tests/test_bash_apps/test_apptimeout.py": {
        "echo_to_file": {
            "name": "echo_to_file",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "outputs": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "stderr": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "stdout": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "walltime": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "test_walltime": {
            "name": "test_walltime",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_walltime_longer": {
            "name": "test_walltime_longer",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_basic.py": {
        "echo_to_file": {
            "name": "echo_to_file",
            "location": 17,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "outputs": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "stderr": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "stdout": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "foo": {
            "name": "foo",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "Union[int, float]"
                ],
                "y": [
                    "float",
                    "int",
                    "Union[int, float]"
                ],
                "z": [
                    "float",
                    "int",
                    "Union[int, float]"
                ],
                "stdout": [
                    "int",
                    "Callable",
                    "Optional[Callable]",
                    "float"
                ],
                "label": [
                    "int",
                    "Callable",
                    "Optional[Callable]",
                    "float"
                ]
            }
        },
        "test_command_format_1": {
            "name": "test_command_format_1",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_auto_log_filename_format": {
            "name": "test_auto_log_filename_format",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_parallel_for": {
            "name": "test_parallel_for",
            "location": 84,
            "return": [],
            "arguments": {
                "n": [
                    "int",
                    "Sequence",
                    "List[int]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_error_codes.py": {
        "command_not_found": {
            "name": "command_not_found",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "stderr": [
                    "list",
                    "bool",
                    "List[Dict]",
                    "str",
                    "BaseException"
                ],
                "stdout": [
                    "list",
                    "bool",
                    "List[Dict]",
                    "str",
                    "BaseException"
                ]
            }
        },
        "bash_misuse": {
            "name": "bash_misuse",
            "location": 24,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "stderr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "div_0": {
            "name": "div_0",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "stderr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "not_executable": {
            "name": "not_executable",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "stderr": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "bad_format": {
            "name": "bad_format",
            "location": 42,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "stderr": [
                    "Callable[[str], str]",
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int"
                ],
                "stdout": [
                    "Callable[[str], str]",
                    "bool",
                    "List[Tuple[int, str]]",
                    "float",
                    "int"
                ]
            }
        },
        "test_div_0": {
            "name": "test_div_0",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "test_fn": [
                    "str"
                ]
            }
        },
        "test_bash_misuse": {
            "name": "test_bash_misuse",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "test_fn": [
                    "str"
                ]
            }
        },
        "test_command_not_found": {
            "name": "test_command_not_found",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "test_fn": [
                    "str"
                ]
            }
        },
        "test_not_executable": {
            "name": "test_not_executable",
            "location": 114,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "test_fn": [
                    "str"
                ]
            }
        },
        "run_app": {
            "name": "run_app",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "test_fn": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "err_code": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_file_bug_1.py": {
        "app1": {
            "name": "app1",
            "location": 15,
            "return": [
                "str",
                "Dict[str, str]",
                "List[str]",
                "Dict[str, Any]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "inputs": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "outputs": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "stdout": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "stderr": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "mock": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "app2": {
            "name": "app2",
            "location": 21,
            "return": [
                "str",
                "Dict[str, str]",
                "List[str]",
                "Dict[str, Any]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "int"
                ],
                "outputs": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "stdout": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "stderr": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "mock": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_behavior": {
            "name": "test_behavior",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_keyword_overlaps.py": {
        "my_app": {
            "name": "my_app",
            "location": 5,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cache": [
                    "dict",
                    "bool",
                    "set"
                ]
            }
        },
        "test_default_value": {
            "name": "test_default_value",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_specified_value": {
            "name": "test_specified_value",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_kwarg_storage.py": {
        "foo": {
            "name": "foo",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Callable",
                    "str"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_command_format_1": {
            "name": "test_command_format_1",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_memoize.py": {
        "fail_on_presence": {
            "name": "fail_on_presence",
            "location": 12,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "outputs": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bash_memoization": {
            "name": "test_bash_memoization",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "fail_on_presence_kw": {
            "name": "fail_on_presence_kw",
            "location": 44,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "outputs": [
                    "str",
                    "bool"
                ],
                "foo": [
                    "bytes",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "test_bash_memoization_keywords": {
            "name": "test_bash_memoization_keywords",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_memoize_ignore_args.py": {
        "oneshot_app": {
            "name": "oneshot_app",
            "location": 9,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_memo_same_at_definition": {
            "name": "test_memo_same_at_definition",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "no_checkpoint_stdout_app": {
            "name": "no_checkpoint_stdout_app",
            "location": 21,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "stdout": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "test_memo_stdout": {
            "name": "test_memo_stdout",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_multiline.py": {
        "multiline": {
            "name": "multiline",
            "location": 14,
            "return": [
                "int",
                "str",
                "Union[str, bytes]",
                "Union[int, List[int]]"
            ],
            "arguments": {
                "inputs": [
                    "Optional[str]",
                    "Sequence[Sequence[T]]",
                    "bool",
                    "str"
                ],
                "outputs": [
                    "Optional[str]",
                    "Sequence[Sequence[T]]",
                    "bool",
                    "str"
                ],
                "stderr": [
                    "bool"
                ],
                "stdout": [
                    "bool"
                ]
            }
        },
        "test_multiline": {
            "name": "test_multiline",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_pipeline.py": {
        "increment": {
            "name": "increment",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "int",
                    "float"
                ],
                "outputs": [
                    "str",
                    "int",
                    "float"
                ],
                "stdout": [
                    "bool"
                ],
                "stderr": [
                    "bool"
                ]
            }
        },
        "slow_increment": {
            "name": "slow_increment",
            "location": 24,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "dur": [
                    "str",
                    "int",
                    "bool"
                ],
                "inputs": [
                    "str",
                    "int",
                    "bool"
                ],
                "outputs": [
                    "str",
                    "int",
                    "bool"
                ],
                "stdout": [
                    "bool"
                ],
                "stderr": [
                    "bool"
                ]
            }
        },
        "cleanup_work": {
            "name": "cleanup_work",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_increment": {
            "name": "test_increment",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "str",
                    "int"
                ]
            }
        },
        "test_increment_slow": {
            "name": "test_increment_slow",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "str",
                    "int"
                ],
                "dur": []
            }
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/test_stdout.py": {
        "echo_to_streams": {
            "name": "echo_to_streams",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "stderr": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ],
                "stdout": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "test_bad_stdout_specs": {
            "name": "test_bad_stdout_specs",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "spec": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_bad_stderr_file": {
            "name": "test_bad_stderr_file",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_stdout_truncate": {
            "name": "test_stdout_truncate",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_stdout_append": {
            "name": "test_stdout_append",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_bash_apps/__init__.py": {},
    "parsl-master/parsl/tests/test_channels/test_large_output.py": {
        "test_local_large_output_2210": {
            "name": "test_local_large_output_2210",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_channels/__init__.py": {},
    "parsl-master/parsl/tests/test_checkpointing/checkpointed.py": {
        "run_checkpointed": {
            "name": "run_checkpointed",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "str"
                ],
                "mode": [
                    "int",
                    "bool"
                ],
                "sleep_dur": [
                    "int",
                    "list",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "run_checkpointed.cached_rand": {
            "name": "cached_rand",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "sleep_dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_checkpointing/test_periodic.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "slow_double": {
            "name": "slow_double",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "sleep_dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "tstamp_to_seconds": {
            "name": "tstamp_to_seconds",
            "location": 29,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "line": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_periodic": {
            "name": "test_periodic",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_checkpointing/test_python_checkpoint_1.py": {
        "random_app": {
            "name": "random_app",
            "location": 11,
            "return": [
                "float",
                "str",
                "Callable",
                "list"
            ],
            "arguments": {
                "i": [
                    "int",
                    "List[int]",
                    "list"
                ]
            }
        },
        "launch_n_random": {
            "name": "launch_n_random",
            "location": 16,
            "return": [
                "List[str]",
                "Set[str]",
                "Dict[int, Dict[str, Any]]",
                "Optional[dict]",
                "list",
                "Dict[str, str]",
                "List[int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "test_initial_checkpoint_write": {
            "name": "test_initial_checkpoint_write",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_checkpointing/test_python_checkpoint_2.py": {
        "random_app": {
            "name": "random_app",
            "location": 12,
            "return": [
                "float",
                "str",
                "Callable",
                "list"
            ],
            "arguments": {
                "i": [
                    "int",
                    "List[int]",
                    "list"
                ]
            }
        },
        "launch_n_random": {
            "name": "launch_n_random",
            "location": 17,
            "return": [
                "List[str]",
                "Set[str]",
                "Dict[int, Dict[str, Any]]",
                "Optional[dict]",
                "list",
                "Dict[str, str]",
                "List[int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "test_loading_checkpoint": {
            "name": "test_loading_checkpoint",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_checkpointing/test_python_checkpoint_3.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "slow_double": {
            "name": "slow_double",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "sleep_dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "cache": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_checkpointing": {
            "name": "test_checkpointing",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_checkpointing/test_regression_232.py": {
        "kill": {
            "name": "kill",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_regress_232_task_exit": {
            "name": "test_regress_232_task_exit",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "count": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_regress_232_dfk_exit": {
            "name": "test_regress_232_dfk_exit",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "count": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_checkpointing/test_regression_233.py": {
        "run_checkpointed": {
            "name": "run_checkpointed",
            "location": 7,
            "return": [
                "config.Rule",
                "Dict[str, str]"
            ],
            "arguments": {
                "checkpoints": [
                    "str",
                    "bool"
                ]
            }
        },
        "run_race": {
            "name": "run_race",
            "location": 30,
            "return": [
                "int",
                "List[int]",
                "Optional[dict]",
                "list"
            ],
            "arguments": {
                "sleep_dur": [
                    "str",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "test_regress_234": {
            "name": "test_regress_234",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_slower_apps": {
            "name": "test_slower_apps",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_checkpoint_availability": {
            "name": "test_checkpoint_availability",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_checkpointed.cached_rand": {
            "name": "cached_rand",
            "location": 14,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "run_race.cached_rand": {
            "name": "cached_rand",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "sleep_dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_checkpointing/test_regression_239.py": {
        "run_checkpointed": {
            "name": "run_checkpointed",
            "location": 9,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "str"
                ],
                "mode": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_regression_239": {
            "name": "test_regression_239",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_checkpointing_at_dfk_exit": {
            "name": "test_checkpointing_at_dfk_exit",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_checkpointed.cached_rand": {
            "name": "cached_rand",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "run_checkpointed.cached_failing": {
            "name": "cached_failing",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_checkpointing/test_task_exit.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "slow_double": {
            "name": "slow_double",
            "location": 23,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "sleep_dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_at_task_exit": {
            "name": "test_at_task_exit",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_checkpointing/__init__.py": {},
    "parsl-master/parsl/tests/test_data/test_file.py": {
        "test_files": {
            "name": "test_files",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_open": {
            "name": "test_open",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_data/test_file_apps.py": {
        "cat": {
            "name": "cat",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "inputs": [
                    "Sequence[str]",
                    "IO[str]",
                    "Union[List[Any], str]",
                    "str"
                ],
                "outputs": [
                    "type",
                    "int",
                    "Union[int, str]",
                    "str"
                ],
                "stdout": [
                    "bool"
                ],
                "stderr": [
                    "bool"
                ]
            }
        },
        "test_files": {
            "name": "test_files",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "increment": {
            "name": "increment",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "inputs": [
                    "type",
                    "int",
                    "Union[int, str]",
                    "str"
                ],
                "outputs": [
                    "type",
                    "int",
                    "Union[int, str]",
                    "str"
                ],
                "stdout": [
                    "bool"
                ],
                "stderr": [
                    "bool"
                ]
            }
        },
        "test_increment": {
            "name": "test_increment",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_data/test_file_staging.py": {
        "cat": {
            "name": "cat",
            "location": 8,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "inputs": [
                    "Sequence[str]",
                    "IO[str]",
                    "Union[List[Any], str]",
                    "str"
                ],
                "outputs": [
                    "type",
                    "int",
                    "Union[int, str]",
                    "str"
                ],
                "stdout": [
                    "bool"
                ],
                "stderr": [
                    "bool"
                ]
            }
        },
        "test_files": {
            "name": "test_files",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "increment": {
            "name": "increment",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "inputs": [
                    "type",
                    "int",
                    "Union[int, str]",
                    "str"
                ],
                "outputs": [
                    "type",
                    "int",
                    "Union[int, str]",
                    "str"
                ],
                "stdout": [
                    "bool"
                ],
                "stderr": [
                    "bool"
                ]
            }
        },
        "test_regression_200": {
            "name": "test_regression_200",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_increment": {
            "name": "test_increment",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_data/__init__.py": {},
    "parsl-master/parsl/tests/test_docs/test_from_slides.py": {
        "echo": {
            "name": "echo",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "dict",
                    "str",
                    "type",
                    "Union[str, Tuple[Any]]"
                ],
                "outputs": [
                    "dict",
                    "str",
                    "type",
                    "Union[str, Tuple[Any]]"
                ]
            }
        },
        "cat": {
            "name": "cat",
            "location": 13,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_slides": {
            "name": "test_slides",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_docs/test_tutorial_1.py": {
        "sim_mol_dyn": {
            "name": "sim_mol_dyn",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str",
                    "bool"
                ],
                "dur": [
                    "int",
                    "str",
                    "bool"
                ],
                "outputs": [
                    "int",
                    "str",
                    "bool"
                ],
                "stdout": [
                    "int",
                    "str",
                    "bool"
                ],
                "stderr": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_data_future_result": {
            "name": "test_data_future_result",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_app_future_result": {
            "name": "test_app_future_result",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_docs/test_workflow1.py": {
        "generate": {
            "name": "generate",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "dict",
                    "Iterable[str]",
                    "IO[str]",
                    "str"
                ],
                "outputs": [
                    "dict",
                    "Iterable[str]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "test_procedural": {
            "name": "test_procedural",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "Optional[int]",
                    "float",
                    "int",
                    "Dict[str, Union[int, str]]",
                    "dict"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_docs/test_workflow2.py": {
        "wait_sleep_double": {
            "name": "wait_sleep_double",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "fu_1": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "fu_2": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_parallel": {
            "name": "test_parallel",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_docs/test_workflow3.py": {
        "generate": {
            "name": "generate",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_parallel_for": {
            "name": "test_parallel_for",
            "location": 14,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "N": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_docs/test_workflow4.py": {
        "generate": {
            "name": "generate",
            "location": 14,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "outputs": [
                    "str"
                ]
            }
        },
        "concat": {
            "name": "concat",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bytes"
                ],
                "outputs": [
                    "str",
                    "bytes"
                ],
                "stdout": [
                    "bool"
                ],
                "stderr": [
                    "bool"
                ]
            }
        },
        "total": {
            "name": "total",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_parallel_dataflow": {
            "name": "test_parallel_dataflow",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_docs/__init__.py": {},
    "parsl-master/parsl/tests/test_error_handling/test_fail.py": {
        "always_fail": {
            "name": "always_fail",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_htex_basic.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dummy": {
            "name": "dummy",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_it_fails": {
            "name": "test_that_it_fails",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_htex_missing_worker.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dummy": {
            "name": "dummy",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_that_it_fails": {
            "name": "test_that_it_fails",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_htex_worker_failure.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "kill_worker": {
            "name": "kill_worker",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_htex_worker_failure": {
            "name": "test_htex_worker_failure",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_python_walltime.py": {
        "my_app": {
            "name": "my_app",
            "location": 8,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "walltime": [
                    "int"
                ]
            }
        },
        "test_python_walltime": {
            "name": "test_python_walltime",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_python_longer_walltime_at_invocation": {
            "name": "test_python_longer_walltime_at_invocation",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_python_bad_decorator_args": {
            "name": "test_python_bad_decorator_args",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_python_bad_decorator_args.my_app_2": {
            "name": "my_app_2",
            "location": 30,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_rand_fail.py": {
        "sleep_fail": {
            "name": "sleep_fail",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "sleep_dur": [
                    "int",
                    "float"
                ],
                "sleep_rand_max": [
                    "int",
                    "float"
                ],
                "fail_prob": [
                    "int",
                    "Callable",
                    "str"
                ],
                "inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "double": {
            "name": "double",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]",
                    "List[list]"
                ]
            }
        },
        "test_no_deps": {
            "name": "test_no_deps",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "numtasks": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "test_fail_sequence": {
            "name": "test_fail_sequence",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "numtasks": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_deps": {
            "name": "test_deps",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "numtasks": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "sleep_then_fail": {
            "name": "sleep_then_fail",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleep_dur": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_fail_nowait": {
            "name": "test_fail_nowait",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "numtasks": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_resource_spec.py": {
        "double": {
            "name": "double",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "parsl_resource_specification": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_resource": {
            "name": "test_resource",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_retries.py": {
        "sleep_then_fail": {
            "name": "sleep_then_fail",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "sleep_dur": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "succeed_on_retry": {
            "name": "succeed_on_retry",
            "location": 23,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "success_on": [
                    "str",
                    "Optional[str]"
                ],
                "stdout": [
                    "bool",
                    "str"
                ]
            }
        },
        "sleep": {
            "name": "sleep",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleep_dur": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_fail_nowait": {
            "name": "test_fail_nowait",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "numtasks": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_fail_delayed": {
            "name": "test_fail_delayed",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "numtasks": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_retry": {
            "name": "test_retry",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_retry_handler.py": {
        "half_handler": {
            "name": "half_handler",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "succeed_on_retry": {
            "name": "succeed_on_retry",
            "location": 20,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "success_on": [
                    "str",
                    "Optional[str]"
                ],
                "stdout": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_retry": {
            "name": "test_retry",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_retry_handler_failure.py": {
        "always_fails": {
            "name": "always_fails",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "retry_handler_raises": {
            "name": "retry_handler_raises",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "exc": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "task_record": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_retry_handler_exception": {
            "name": "test_retry_handler_exception",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_serialization_fail.py": {
        "fail_pickling": {
            "name": "fail_pickling",
            "location": 12,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "generator": {
            "name": "generator",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_serialization_error": {
            "name": "test_serialization_error",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_error_handling/test_wrap_with_logs.py": {
        "somefunc_ok": {
            "name": "somefunc_ok",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "somefunc_exception": {
            "name": "somefunc_exception",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wrap_with_logs_ok": {
            "name": "test_wrap_with_logs_ok",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "test_wrap_with_logs_exception": {
            "name": "test_wrap_with_logs_exception",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_error_handling/__init__.py": {},
    "parsl-master/parsl/tests/test_flowcontrol/test_bash.py": {
        "bash_app": {
            "name": "bash_app",
            "location": 5,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "stdout": [
                    "int"
                ],
                "stderr": [
                    "int"
                ]
            }
        },
        "test_bash": {
            "name": "test_bash",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_flowcontrol/test_one_block.py": {
        "app": {
            "name": "app",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_one_block": {
            "name": "test_one_block",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "OneShotLocalProvider.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OneShotLocalProvider.submit": {
            "name": "submit",
            "location": 29,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/tests/test_flowcontrol/test_python.py": {
        "py_app": {
            "name": "py_app",
            "location": 12,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_python": {
            "name": "test_python",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_flowcontrol/test_python_diamond.py": {
        "local_setup": {
            "name": "local_setup",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "local_teardown": {
            "name": "local_teardown",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "diamond": {
            "name": "diamond",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ],
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_python": {
            "name": "test_python",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "width": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_flowcontrol/__init__.py": {},
    "parsl-master/parsl/tests/test_manual/test_regression_220.py": {
        "test_220": {
            "name": "test_220",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_manual/__init__.py": {},
    "parsl-master/parsl/tests/test_monitoring/test_basic.py": {
        "this_app": {
            "name": "this_app",
            "location": 11,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "test_row_counts": {
            "name": "test_row_counts",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_monitoring/test_db_locks.py": {
        "this_app": {
            "name": "this_app",
            "location": 11,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "test_row_counts": {
            "name": "test_row_counts",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_monitoring/test_fuzz_zmq.py": {
        "this_app": {
            "name": "this_app",
            "location": 12,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "test_row_counts": {
            "name": "test_row_counts",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_monitoring/test_memoization_representation.py": {
        "this_app": {
            "name": "this_app",
            "location": 11,
            "return": [
                "float",
                "List[str]",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_hashsum": {
            "name": "test_hashsum",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_monitoring/__init__.py": {},
    "parsl-master/parsl/tests/test_providers/test_local_provider.py": {
        "_run_tests": {
            "name": "_run_tests",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "parsl.providers.LocalProvider",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "test_local_channel": {
            "name": "test_local_channel",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ssh_channel": {
            "name": "test_ssh_channel",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_stop_sshd": {
            "name": "_stop_sshd",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "sshd_thread": []
            }
        },
        "_start_sshd": {
            "name": "_start_sshd",
            "location": 145,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "config_dir": [
                    "str"
                ]
            }
        },
        "_init_sshd": {
            "name": "_init_sshd",
            "location": 155,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "config_dir": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "_get_system_sftp_path": {
            "name": "_get_system_sftp_path",
            "location": 170,
            "return": [
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {}
        },
        "_find_free_port": {
            "name": "_find_free_port",
            "location": 184,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str"
                ]
            }
        },
        "_run": {
            "name": "_run",
            "location": 198,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "p": [
                    "str",
                    "Type[Any]",
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "command": [
                    "Sequence[str]",
                    "Union[str, List[str]]",
                    "BinaryIO",
                    "Optional[List[str]]",
                    "List[str]",
                    "str"
                ],
                "np": [
                    "Sequence[str]",
                    "Union[str, List[str]]",
                    "BinaryIO",
                    "Optional[List[str]]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_wait": {
            "name": "_wait",
            "location": 203,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str"
                ],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "SSHDThread.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "pathlib.Path"
                ]
            }
        },
        "SSHDThread.run": {
            "name": "run",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHDThread.stop": {
            "name": "stop",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parsl-master/parsl/tests/test_providers/__init__.py": {},
    "parsl-master/parsl/tests/test_python_apps/test_arg_input_types.py": {
        "take_a_value": {
            "name": "take_a_value",
            "location": 10,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "List[int]",
                    "int",
                    "Union[str, int, float]"
                ]
            }
        },
        "add_two_values": {
            "name": "add_two_values",
            "location": 15,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_input_str": {
            "name": "test_input_str",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_num": {
            "name": "test_input_num",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_list": {
            "name": "test_input_list",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_at_scale.py": {
        "double": {
            "name": "double",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "plain_double": {
            "name": "plain_double",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_plain": {
            "name": "test_plain",
            "location": 24,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "tests.async_mock.Mock",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_parallel": {
            "name": "test_parallel",
            "location": 39,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "tests.async_mock.Mock",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_parallel2": {
            "name": "test_parallel2",
            "location": 54,
            "return": [
                "tests.basilisp.helpers.CompileFn",
                "str",
                "tests.async_mock.Mock",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_basic.py": {
        "double": {
            "name": "double",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ],
                "string": [
                    "str"
                ],
                "stdout": [
                    "str",
                    "bool"
                ]
            }
        },
        "import_echo": {
            "name": "import_echo",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ],
                "string": [
                    "str"
                ],
                "stdout": [
                    "str",
                    "bool"
                ]
            }
        },
        "custom_exception": {
            "name": "custom_exception",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]",
                    "List[list]"
                ]
            }
        },
        "test_imports": {
            "name": "test_imports",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "list"
                ]
            }
        },
        "test_parallel_for": {
            "name": "test_parallel_for",
            "location": 57,
            "return": [],
            "arguments": {
                "n": [
                    "int",
                    "Sequence",
                    "List[int]",
                    "List[T]"
                ]
            }
        },
        "test_custom_exception": {
            "name": "test_custom_exception",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "demonstrate_custom_exception": {
            "name": "demonstrate_custom_exception",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_depfail_propagation.py": {
        "fails": {
            "name": "fails",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "depends": {
            "name": "depends",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "parent": [
                    "bool"
                ]
            }
        },
        "test_depfail_once": {
            "name": "test_depfail_once",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_depfail_chain": {
            "name": "test_depfail_chain",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_depfail_branches": {
            "name": "test_depfail_branches",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_dep_standard_futures.py": {
        "copy_app": {
            "name": "copy_app",
            "location": 7,
            "return": [
                "int",
                "bytes",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "v": [
                    "list",
                    "List[str]",
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_future_result_dependency": {
            "name": "test_future_result_dependency",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_future_fail_dependency": {
            "name": "test_future_fail_dependency",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_fail.py": {
        "sleep_fail": {
            "name": "sleep_fail",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "sleep_dur": [
                    "int",
                    "float"
                ],
                "sleep_rand_max": [
                    "int",
                    "float"
                ],
                "fail_prob": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_no_deps": {
            "name": "test_no_deps",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "numtasks": [
                    "tests.async_mock.Mock",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_fail_sequence": {
            "name": "test_fail_sequence",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "numtasks": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_deps": {
            "name": "test_deps",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "numtasks": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_fibonacci_iterative.py": {
        "get_num": {
            "name": "get_num",
            "location": 9,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "first": [
                    "str",
                    "Callable",
                    "List[List[int]]"
                ],
                "second": [
                    "str",
                    "Callable",
                    "List[List[int]]"
                ]
            }
        },
        "test_fibonacci": {
            "name": "test_fibonacci",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "num": [
                    "str",
                    "tests.test_util.aiohttp.AiohttpClientMocker",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_fibonacci_recursive.py": {
        "add": {
            "name": "add",
            "location": 5,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "fibonacci": {
            "name": "fibonacci",
            "location": 16,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_fibonacci": {
            "name": "test_fibonacci",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_futures.py": {
        "delay_incr": {
            "name": "delay_incr",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Union[None, bytes]",
                    "float"
                ],
                "delay": [
                    "bool",
                    "bytes",
                    "int",
                    "List[app.models.Question]"
                ],
                "outputs": [
                    "str",
                    "Union[int, str]",
                    "MutableMapping[str, Any]",
                    "bool"
                ]
            }
        },
        "get_contents": {
            "name": "get_contents",
            "location": 34,
            "return": [
                "List[str]",
                "str",
                "Set[str]",
                "Union[List, Dict]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "test_fut_case_1": {
            "name": "test_fut_case_1",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_fut_case_2": {
            "name": "test_fut_case_2",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_fut_case_3": {
            "name": "test_fut_case_3",
            "location": 82,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_fut_case_4": {
            "name": "test_fut_case_4",
            "location": 103,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_garbage_collect.py": {
        "slow_double": {
            "name": "slow_double",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_garbage_collect": {
            "name": "test_garbage_collect",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_import_fail.py": {
        "platform_name": {
            "name": "platform_name",
            "location": 6,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Container[str]",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {}
        },
        "test_name_error": {
            "name": "test_name_error",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ]
            }
        },
        "bad_import": {
            "name": "bad_import",
            "location": 25,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_import_error": {
            "name": "test_import_error",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_join.py": {
        "inner_app": {
            "name": "inner_app",
            "location": 14,
            "return": [
                "bool",
                "List[object]"
            ],
            "arguments": {}
        },
        "outer_app": {
            "name": "outer_app",
            "location": 20,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "add_one": {
            "name": "add_one",
            "location": 26,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "combine": {
            "name": "combine",
            "location": 31,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "list",
                "Optional[Union[str, Any]]",
                "Optional[Type]",
                "Tuple[str]",
                "Union[List[float], List[int]]"
            ],
            "arguments": {}
        },
        "outer_make_a_dag": {
            "name": "outer_make_a_dag",
            "location": 37,
            "return": [
                "bool",
                "List[List[str]]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_result_flow": {
            "name": "test_result_flow",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "join_wrong_type_app": {
            "name": "join_wrong_type_app",
            "location": 51,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_wrong_type": {
            "name": "test_wrong_type",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dependency_on_joined": {
            "name": "test_dependency_on_joined",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_combine": {
            "name": "test_combine",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_mapred.py": {
        "fan_out": {
            "name": "fan_out",
            "location": 9,
            "return": [
                "float",
                "Set[Optional[str]]"
            ],
            "arguments": {
                "x": [
                    "bool"
                ],
                "dur": [
                    "int",
                    "float"
                ]
            }
        },
        "accumulate": {
            "name": "accumulate",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "accumulate_t": {
            "name": "accumulate_t",
            "location": 21,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_mapred_type1": {
            "name": "test_mapred_type1",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "width": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_mapred_type2": {
            "name": "test_mapred_type2",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "width": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_memoize_1.py": {
        "random_uuid": {
            "name": "random_uuid",
            "location": 9,
            "return": [
                "str",
                "argparse.Namespace"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "cache": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_python_memoization": {
            "name": "test_python_memoization",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_memoize_2.py": {
        "random_uuid": {
            "name": "random_uuid",
            "location": 13,
            "return": [
                "str",
                "argparse.Namespace"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_python_memoization": {
            "name": "test_python_memoization",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_memoize_4.py": {
        "test_python_memoization": {
            "name": "test_python_memoization",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ]
            }
        },
        "test_python_memoization.random_uuid": {
            "name": "random_uuid",
            "location": 20,
            "return": [
                "str",
                "argparse.Namespace"
            ],
            "arguments": {
                "x": [
                    "bool"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_memoize_5.py": {
        "test_python_memoization": {
            "name": "test_python_memoization",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ]
            }
        },
        "test_python_memoization.random_uuid": {
            "name": "random_uuid",
            "location": 24,
            "return": [
                "str",
                "argparse.Namespace"
            ],
            "arguments": {
                "x": [
                    "list",
                    "Tuple[List[float], List[float]]",
                    "List[float]",
                    "int",
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_memoize_bad_id_for_memo.py": {
        "failing_memoizer": {
            "name": "failing_memoizer",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "bool",
                    "Sequence[str]",
                    "int",
                    "str"
                ],
                "output_ref": [
                    "bool",
                    "Sequence[str]",
                    "int",
                    "str"
                ]
            }
        },
        "noop_app": {
            "name": "noop_app",
            "location": 27,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str"
                ],
                "inputs": [
                    "bool",
                    "str"
                ],
                "cache": [
                    "bool",
                    "str"
                ]
            }
        },
        "sleep": {
            "name": "sleep",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "t": [
                    "float",
                    "int",
                    "Collection[int]",
                    "list"
                ]
            }
        },
        "test_python_unmemoizable": {
            "name": "test_python_unmemoizable",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_python_failing_memoizer": {
            "name": "test_python_failing_memoizer",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_python_unmemoizable_after_dep": {
            "name": "test_python_unmemoizable_after_dep",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_python_failing_memoizer_afer_dep": {
            "name": "test_python_failing_memoizer_afer_dep",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_memoize_ignore_args.py": {
        "random_uuid": {
            "name": "random_uuid",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "random_uuid_def": {
            "name": "random_uuid_def",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_memo_different": {
            "name": "test_memo_different",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_memo_same_at_definition": {
            "name": "test_memo_same_at_definition",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_memoize_joinapp.py": {
        "random_uuid": {
            "name": "random_uuid",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "const": {
            "name": "const",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_join_memoization": {
            "name": "test_join_memoization",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_outputs.py": {
        "double": {
            "name": "double",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "os.PathLike",
                    "BinaryIO"
                ],
                "outputs": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_launch_apps": {
            "name": "test_launch_apps",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "outdir": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_overview.py": {
        "app_double": {
            "name": "app_double",
            "location": 9,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "str",
                    "int"
                ]
            }
        },
        "app_sum": {
            "name": "app_sum",
            "location": 14,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "slow_app_double": {
            "name": "slow_app_double",
            "location": 19,
            "return": [
                "float",
                "List[str]",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str"
                ],
                "sleep_dur": [
                    "int",
                    "List[datetime.time]"
                ]
            }
        },
        "test_1": {
            "name": "test_1",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "float"
                ]
            }
        },
        "test_2": {
            "name": "test_2",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_pipeline.py": {
        "increment": {
            "name": "increment",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "slow_increment": {
            "name": "slow_increment",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_increment": {
            "name": "test_increment",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_increment_slow": {
            "name": "test_increment_slow",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_simple.py": {
        "increment": {
            "name": "increment",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "slow_increment": {
            "name": "slow_increment",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_increment": {
            "name": "test_increment",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "test_slow_increment": {
            "name": "test_slow_increment",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "depth": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_type5.py": {
        "map_one": {
            "name": "map_one",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "map_two": {
            "name": "map_two",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "add_two": {
            "name": "add_two",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "dur": [
                    "str",
                    "float",
                    "T",
                    "int"
                ]
            }
        },
        "test_func_1": {
            "name": "test_func_1",
            "location": 30,
            "return": [
                "bool",
                "Iterable[Any]",
                "cli_ui.tests.MessageRecorder"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "test_func_2": {
            "name": "test_func_2",
            "location": 47,
            "return": [
                "bool",
                "Iterable[Any]",
                "cli_ui.tests.MessageRecorder"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/test_worker_fail.py": {
        "import_echo": {
            "name": "import_echo",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ],
                "string": [
                    "str"
                ],
                "sleep": [
                    "str"
                ],
                "stdout": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_parallel_for": {
            "name": "test_parallel_for",
            "location": 17,
            "return": [],
            "arguments": {
                "n": [
                    "int",
                    "Sequence",
                    "List[int]",
                    "List[T]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_python_apps/__init__.py": {},
    "parsl-master/parsl/tests/test_regression/test_1480.py": {
        "compute_descript": {
            "name": "compute_descript",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Sized",
                    "List[str]",
                    "List[int]",
                    "Sequence"
                ]
            }
        },
        "test_1480": {
            "name": "test_1480",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "size": [
                    "int",
                    "Iterable[int]",
                    "float",
                    "list"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_regression/test_1606_wait_for_current_tasks.py": {
        "slow_app": {
            "name": "slow_app",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "delay": [
                    "Callable",
                    "str",
                    "bool",
                    "List[dict]",
                    "int",
                    "float"
                ]
            }
        },
        "test_wait_for_tasks": {
            "name": "test_wait_for_tasks",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_regression/test_1653.py": {
        "compute_descript": {
            "name": "compute_descript",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Sized",
                    "List[str]",
                    "List[int]",
                    "Sequence"
                ]
            }
        },
        "test_1653": {
            "name": "test_1653",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_regression/test_221.py": {
        "slow_double": {
            "name": "slow_double",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_cleanup_behavior_221": {
            "name": "test_cleanup_behavior_221",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_regression/test_226.py": {
        "get_foo_x": {
            "name": "get_foo_x",
            "location": 27,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "T",
                    "list",
                    "float"
                ],
                "b": [
                    "int",
                    "float",
                    "Optional[List[str]]"
                ],
                "c": [
                    "int",
                    "str",
                    "T",
                    "list",
                    "float"
                ]
            }
        },
        "get_foo_x_bash": {
            "name": "get_foo_x_bash",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "T",
                    "list",
                    "float"
                ],
                "b": [
                    "Tuple[int, int]",
                    "int",
                    "Optional[str]",
                    "bytes",
                    "str"
                ],
                "c": [
                    "int",
                    "str",
                    "T",
                    "list",
                    "float"
                ]
            }
        },
        "get_dataframe": {
            "name": "get_dataframe",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "postfix": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "stdout": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "test_no_eq": {
            "name": "test_no_eq",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_dataframe": {
            "name": "test_get_dataframe",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bash_default_arg": {
            "name": "test_bash_default_arg",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "Foo.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_regression/test_69a.py": {
        "echo_slow_message": {
            "name": "echo_slow_message",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "bool",
                    "str"
                ],
                "sleep": [
                    "int",
                    "bool",
                    "str"
                ],
                "fu": [
                    "int",
                    "bool",
                    "str"
                ],
                "outputs": [
                    "int",
                    "bool",
                    "str"
                ],
                "stderr": [
                    "int",
                    "bool",
                    "str"
                ],
                "stdout": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "sleep": {
            "name": "sleep",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "sleep_dur": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_immediate_datafuture": {
            "name": "test_immediate_datafuture",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_delayed_datafuture": {
            "name": "test_delayed_datafuture",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_regression/test_69b.py": {
        "double": {
            "name": "double",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_1": {
            "name": "test_1",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sleep_double": {
            "name": "sleep_double",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_2": {
            "name": "test_2",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wait_sleep_double": {
            "name": "wait_sleep_double",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "fu_1": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "fu_2": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_3": {
            "name": "test_3",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "bad_divide": {
            "name": "bad_divide",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_4": {
            "name": "test_4",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 99,
            "return": [
                "list",
                "int",
                "Dict[str, str]",
                "bytes",
                "List[int]",
                "str"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "BinaryIO"
                ],
                "outputs": [
                    "int",
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "cat": {
            "name": "cat",
            "location": 107,
            "return": [
                "str",
                "List[int]",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "inputs": [
                    "Optional[str]",
                    "Sequence[Sequence[T]]",
                    "bool",
                    "str"
                ],
                "outputs": [
                    "Optional[str]",
                    "Sequence[Sequence[T]]",
                    "bool",
                    "str"
                ],
                "stdout": [
                    "bool"
                ],
                "stderr": [
                    "bool"
                ]
            }
        },
        "test_5": {
            "name": "test_5",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_regression/test_854.py": {
        "consumer": {
            "name": "consumer",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "in_q": [
                    "str",
                    "bool"
                ],
                "out_q": [
                    "str",
                    "dict",
                    "int",
                    "Optional[int]",
                    "bytes"
                ],
                "delay": [
                    "List[List[str]]",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "test_mac_safe_queue": {
            "name": "test_mac_safe_queue",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mac_safe_queue_size": {
            "name": "test_mac_safe_queue_size",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_regression/test_97.py": {
        "python_app": {
            "name": "python_app",
            "location": 16,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_python": {
            "name": "test_python",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_regression/test_98.py": {
        "test_immutable_config": {
            "name": "test_immutable_config",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool",
                    "Sequence[Union[str, Any]]",
                    "Sequence[Dict[str, Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_regression/__init__.py": {},
    "parsl-master/parsl/tests/test_scaling/test_scale_down.py": {
        "sleeper": {
            "name": "sleeper",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "t": [
                    "float",
                    "int",
                    "Collection[int]",
                    "list"
                ]
            }
        },
        "test_scale_out": {
            "name": "test_scale_out",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_scaling/__init__.py": {},
    "parsl-master/parsl/tests/test_staging/staging_provider.py": {
        "make_stage_out_app": {
            "name": "make_stage_out_app",
            "location": 60,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "executor": [
                    "str",
                    "int",
                    "Callable",
                    "trezor.utils.Writer",
                    "dict"
                ],
                "dfk": [
                    "str",
                    "int",
                    "Callable",
                    "trezor.utils.Writer",
                    "dict"
                ]
            }
        },
        "stage_out_noop": {
            "name": "stage_out_noop",
            "location": 64,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "app_fu": [],
                "inputs": [],
                "_parsl_staging_inhibit": []
            }
        },
        "make_stage_in_app": {
            "name": "make_stage_in_app",
            "location": 73,
            "return": [
                "bool",
                "str",
                "float",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "executor": [
                    "Callable",
                    "int"
                ],
                "dfk": [
                    "Callable",
                    "int"
                ]
            }
        },
        "stage_in_noop": {
            "name": "stage_in_noop",
            "location": 77,
            "return": [
                "Optional[str]",
                "int",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "parent_fut": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "outputs": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "_parsl_staging_inhibit": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "NoOpTestingFileStaging.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "allow_stage_in": [
                    "bool"
                ],
                "allow_stage_out": [
                    "bool"
                ]
            }
        },
        "NoOpTestingFileStaging.can_stage_in": {
            "name": "can_stage_in",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "logging.Logger",
                    "Optional[str]"
                ]
            }
        },
        "NoOpTestingFileStaging.can_stage_out": {
            "name": "can_stage_out",
            "location": 36,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "logging.Logger",
                    "Optional[str]"
                ]
            }
        },
        "NoOpTestingFileStaging.stage_in": {
            "name": "stage_in",
            "location": 42,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "bool",
                    "Dict[int, bool]",
                    "Union[utils.CWLObjectType, List[utils.CWLObjectType]]",
                    "type"
                ],
                "executor": [
                    "bool",
                    "Dict[int, bool]",
                    "Union[utils.CWLObjectType, List[utils.CWLObjectType]]",
                    "type"
                ],
                "file": [
                    "str",
                    "List[Exception]",
                    "Optional[str]",
                    "List[str]"
                ],
                "parent_fut": [
                    "int",
                    "List[str]",
                    "TextIO",
                    "BinaryIO",
                    "FrozenSet[str]"
                ]
            }
        },
        "NoOpTestingFileStaging.stage_out": {
            "name": "stage_out",
            "location": 51,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "executor": [
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "file": [
                    "logging.Logger",
                    "str",
                    "bool"
                ],
                "app_fu": []
            }
        }
    },
    "parsl-master/parsl/tests/test_staging/test_1316.py": {
        "observe_input_local_path": {
            "name": "observe_input_local_path",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "f": [
                    "int",
                    "bytes",
                    "str",
                    "Callable",
                    "Tuple[str, str]"
                ]
            }
        },
        "wait_and_create": {
            "name": "wait_and_create",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "outputs": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_1316_local_path_on_execution_side_sp2": {
            "name": "test_1316_local_path_on_execution_side_sp2",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_1316_local_path_setting_preserves_dependency_sp2": {
            "name": "test_1316_local_path_setting_preserves_dependency_sp2",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "SP2.can_stage_in": {
            "name": "can_stage_in",
            "location": 28,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO[str]",
                    "str"
                ]
            }
        },
        "SP2.stage_in": {
            "name": "stage_in",
            "location": 31,
            "return": [
                "Optional[str]",
                "int",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "str",
                    "parsl.data_provider.files.File",
                    "bool",
                    "Container[\"Taxon\"]"
                ],
                "executor": [
                    "str",
                    "parsl.data_provider.files.File",
                    "bool",
                    "Container[\"Taxon\"]"
                ],
                "file": [
                    "Dict[str, str]",
                    "List[str]",
                    "int",
                    "str"
                ],
                "parent_fut": [
                    "str",
                    "parsl.data_provider.files.File",
                    "bool",
                    "Container[\"Taxon\"]"
                ]
            }
        },
        "SP2.can_stage_out": {
            "name": "can_stage_out",
            "location": 35,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "IO[str]",
                    "str"
                ]
            }
        },
        "SP2.stage_out": {
            "name": "stage_out",
            "location": 38,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "dm": [
                    "str",
                    "parsl.data_provider.files.File"
                ],
                "executor": [
                    "str",
                    "parsl.data_provider.files.File"
                ],
                "file": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "app_fu": [
                    "str",
                    "parsl.data_provider.files.File"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_staging/test_docs_1.py": {
        "convert": {
            "name": "convert",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "Type[T]"
                ],
                "outputs": [
                    "str",
                    "Optional[str]",
                    "IO",
                    "Dict[str, int]",
                    "int"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_staging/test_docs_2.py": {
        "cat": {
            "name": "cat",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_staging/test_elaborate_noop_file.py": {
        "touch": {
            "name": "touch",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "inputs": [
                    "bool"
                ],
                "outputs": [
                    "bool"
                ]
            }
        },
        "app_test_in": {
            "name": "app_test_in",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "List[str]",
                    "List[Callable]",
                    "IO[Any]",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "test_regression_stage_out_does_not_stage_in": {
            "name": "test_regression_stage_out_does_not_stage_in",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_regression_stage_in_does_not_stage_out": {
            "name": "test_regression_stage_in_does_not_stage_out",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_staging/test_staging_ftp.py": {
        "sort_strings": {
            "name": "sort_strings",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bool"
                ],
                "outputs": [
                    "str"
                ]
            }
        },
        "test_staging_ftp": {
            "name": "test_staging_ftp",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_staging/test_staging_ftp_in_task.py": {
        "sort_strings": {
            "name": "sort_strings",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bool"
                ],
                "outputs": [
                    "str"
                ]
            }
        },
        "test_staging_ftp": {
            "name": "test_staging_ftp",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_staging/test_staging_globus.py": {
        "sort_strings": {
            "name": "sort_strings",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bool"
                ],
                "outputs": [
                    "str"
                ]
            }
        },
        "test_stage_in_globus": {
            "name": "test_stage_in_globus",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_stage_in_out_globus": {
            "name": "test_stage_in_out_globus",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_staging/test_staging_https.py": {
        "sort_strings": {
            "name": "sort_strings",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bool"
                ],
                "outputs": [
                    "str"
                ]
            }
        },
        "test_staging_https": {
            "name": "test_staging_https",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sort_strings_kw": {
            "name": "sort_strings_kw",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "bytes",
                    "Mapping[str, str]"
                ],
                "outputs": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_staging_https_kwargs": {
            "name": "test_staging_https_kwargs",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sort_strings_arg": {
            "name": "sort_strings_arg",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "bytes",
                    "Mapping[str, str]"
                ],
                "outputs": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_staging_https_args": {
            "name": "test_staging_https_args",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sort_strings_additional_executor": {
            "name": "sort_strings_additional_executor",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bool"
                ],
                "outputs": [
                    "str"
                ]
            }
        },
        "test_staging_https_additional_executor": {
            "name": "test_staging_https_additional_executor",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_staging/test_staging_https_in_task.py": {
        "sort_strings": {
            "name": "sort_strings",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "bool"
                ],
                "outputs": [
                    "str"
                ]
            }
        },
        "test_staging_https": {
            "name": "test_staging_https",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_staging/__init__.py": {},
    "parsl-master/parsl/tests/test_threads/test_configs.py": {
        "worker_identify": {
            "name": "worker_identify",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "sleep_dur": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "test_parallel_for": {
            "name": "test_parallel_for",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "parsl-master/parsl/tests/test_threads/test_lazy_errors.py": {
        "test_lazy_behavior": {
            "name": "test_lazy_behavior",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_lazy_behavior.divide": {
            "name": "divide",
            "location": 15,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/test_threads/__init__.py": {},
    "parsl-master/parsl/tests/workqueue_tests/htex_local.py": {},
    "parsl-master/parsl/tests/workqueue_tests/local_threads.py": {},
    "parsl-master/parsl/tests/workqueue_tests/test_scale.py": {
        "double": {
            "name": "double",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "echo": {
            "name": "echo",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ],
                "string": [
                    "str"
                ],
                "stdout": [
                    "str",
                    "bool"
                ]
            }
        },
        "import_echo": {
            "name": "import_echo",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ],
                "string": [
                    "str"
                ],
                "stdout": [
                    "str",
                    "bool"
                ]
            }
        },
        "platform": {
            "name": "platform",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sleep": [
                    "int",
                    "Callable",
                    "str"
                ],
                "stdout": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_simple": {
            "name": "test_simple",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]",
                    "List[list]"
                ]
            }
        },
        "test_imports": {
            "name": "test_imports",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "list"
                ]
            }
        },
        "test_platform": {
            "name": "test_platform",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ],
                "sleep": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "test_parallel_for": {
            "name": "test_parallel_for",
            "location": 101,
            "return": [],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ],
                "sleep": [
                    "int",
                    "Union[int, float]"
                ]
            }
        }
    },
    "parsl-master/parsl/tests/workqueue_tests/wqex_condor.py": {},
    "parsl-master/parsl/tests/workqueue_tests/wqex_local.py": {},
    "parsl-master/parsl/tests/workqueue_tests/__init__.py": {}
}
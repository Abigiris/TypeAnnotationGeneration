{
    "pathpy-master/setup.py": {},
    "pathpy-master/doc/conf.py": {
        "setup": {
            "name": "setup",
            "location": 187,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "pathpy-master/doc/sphinxext/gallery_generator.py": {
        "create_thumbnail": {
            "name": "create_thumbnail",
            "location": 141,
            "return": [],
            "arguments": {
                "infile": [],
                "thumbfile": [],
                "width": [],
                "height": [],
                "cx": [],
                "cy": [],
                "border": []
            }
        },
        "indent": {
            "name": "indent",
            "location": 167,
            "return": [],
            "arguments": {
                "s": [],
                "N": []
            }
        },
        "main": {
            "name": "main",
            "location": 329,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 389,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "execfile": {
            "name": "execfile",
            "location": 31,
            "return": [],
            "arguments": {
                "filename": [],
                "globals": [],
                "locals": []
            }
        },
        "ExampleGenerator.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "target_dir": []
            }
        },
        "ExampleGenerator.dirname": {
            "name": "dirname",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.fname": {
            "name": "fname",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.modulename": {
            "name": "modulename",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.pyfilename": {
            "name": "pyfilename",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.rstfilename": {
            "name": "rstfilename",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.htmlfilename": {
            "name": "htmlfilename",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.pngfilename": {
            "name": "pngfilename",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.thumbfilename": {
            "name": "thumbfilename",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.sphinxtag": {
            "name": "sphinxtag",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.pagetitle": {
            "name": "pagetitle",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.plotfunc": {
            "name": "plotfunc",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.extract_docstring": {
            "name": "extract_docstring",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.exec_file": {
            "name": "exec_file",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.toctree_entry": {
            "name": "toctree_entry",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExampleGenerator.contents_entry": {
            "name": "contents_entry",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/doc/tools/nb_to_doc.py": {
        "convert_nb": {
            "name": "convert_nb",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "nbname": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "pathpy-master/examples/lotr.py": {},
    "pathpy-master/examples/pyplot_text.py": {},
    "pathpy-master/examples/simple_plot.py": {},
    "pathpy-master/pathpy/__about__.py": {},
    "pathpy-master/pathpy/__init__.py": {},
    "pathpy-master/pathpy/algorithms/bipartite.py": {
        "check_multi_partite": {
            "name": "check_multi_partite",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "network": [
                    "int",
                    "float",
                    "Iterable[T]"
                ],
                "k": [
                    "int",
                    "float",
                    "Iterable[T]"
                ],
                "partition": [
                    "int"
                ]
            }
        },
        "one_mode_projection": {
            "name": "one_mode_projection",
            "location": 18,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "bipartite_net": [
                    "Dict[str, Dict[str, int]]",
                    "Set[str]",
                    "float",
                    "int"
                ],
                "partition": [
                    "List[str]",
                    "int",
                    "Optional[Union[str, Any]]",
                    "bool"
                ],
                "projection": [
                    "int",
                    "bool",
                    "str"
                ],
                "type": [
                    "int",
                    "bool",
                    "str"
                ],
                "temporal": [
                    "bool",
                    "list",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "pathpy-master/pathpy/algorithms/centralities.py": {
        "betweenness_centrality": {
            "name": "betweenness_centrality",
            "location": 40,
            "return": [
                "typing.Dict"
            ],
            "arguments": {
                "self": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "normalized": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_bw_paths": {
            "name": "_bw_paths",
            "location": 79,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "normalized": [
                    "pathlib.Path",
                    "str",
                    "bool",
                    "Callable",
                    "Set[pathlib.Path]"
                ]
            }
        },
        "_bw_network": {
            "name": "_bw_network",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [
                    "str",
                    "pathlib.Path"
                ],
                "normalized": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_bw_hon": {
            "name": "_bw_hon",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [
                    "str",
                    "bool"
                ],
                "normalized": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "closeness_centrality": {
            "name": "closeness_centrality",
            "location": 225,
            "return": [
                "typing.Dict"
            ],
            "arguments": {
                "self": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "normalized": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "disconnected": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "weight": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "count": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_cl_network": {
            "name": "_cl_network",
            "location": 266,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "network": [
                    "int",
                    "list",
                    "List[str]",
                    "str"
                ],
                "normalized": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "disconnected": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "weight": [
                    "Optional[numpy.ndarray]",
                    "List[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "count": [
                    "Optional[numpy.ndarray]",
                    "List[str]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "_cl_paths": {
            "name": "_cl_paths",
            "location": 337,
            "return": [
                "str",
                "Iterable[str]",
                "pathlib.Path"
            ],
            "arguments": {
                "paths": [
                    "pathlib.Path",
                    "List[str]",
                    "norfs.fs.base.Path",
                    "Union[str, List[str]]",
                    "str"
                ],
                "normalized": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Set[str]",
                    "Optional[List[str]]"
                ],
                "disconnected": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Set[str]",
                    "Optional[List[str]]"
                ],
                "weight": [
                    "str",
                    "pathlib.Path"
                ],
                "count": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "degree_centrality": {
            "name": "degree_centrality",
            "location": 377,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "network": [
                    "str",
                    "int",
                    "dict",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "mode": [
                    "str",
                    "bool",
                    "int",
                    "vimiv.api.modes.Mode",
                    "List[app.models.Question]"
                ]
            }
        },
        "eigenvector_centrality": {
            "name": "eigenvector_centrality",
            "location": 424,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "str",
                    "float",
                    "bool"
                ],
                "weight": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "rank_centralities": {
            "name": "rank_centralities",
            "location": 461,
            "return": [
                "float",
                "str",
                "numpy.ndarray"
            ],
            "arguments": {
                "centralities": [
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "Iterable[int]",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "pathpy-master/pathpy/algorithms/community_detection.py": {
        "_Q_merge": {
            "name": "_Q_merge",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "pathpy.core.network.Network",
                    "T",
                    "Tuple[int, int]",
                    "str",
                    "Type"
                ],
                "A": [
                    "int"
                ],
                "D": [
                    "int"
                ],
                "n": [
                    "int",
                    "str"
                ],
                "m": [
                    "int"
                ],
                "C": [
                    "set",
                    "dict",
                    "paradigm.models.Plain",
                    "numpy.dtype",
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "merge": [
                    "set",
                    "dict",
                    "paradigm.models.Plain",
                    "numpy.dtype",
                    "float",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "modularity_maximisation": {
            "name": "modularity_maximisation",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "network": [
                    "Optional[str]",
                    "list",
                    "int"
                ],
                "iterations": [
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "float"
                ]
            }
        }
    },
    "pathpy-master/pathpy/algorithms/components.py": {
        "find_connected_components": {
            "name": "find_connected_components",
            "location": 24,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "network": [
                    "bytes",
                    "src.core.model.profile.Profile",
                    "str"
                ]
            }
        },
        "mean_component_size": {
            "name": "mean_component_size",
            "location": 97,
            "return": [
                "Union[complex, float, int]",
                "str",
                "float"
            ],
            "arguments": {
                "network": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "largest_connected_component": {
            "name": "largest_connected_component",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "network": [
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "Set[str]"
                ]
            }
        },
        "is_connected": {
            "name": "is_connected",
            "location": 129,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "network": [
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "largest_component_size": {
            "name": "largest_component_size",
            "location": 135,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "network": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "find_connected_components.tarjan": {
            "name": "tarjan",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "list",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "pathpy-master/pathpy/algorithms/evaluation.py": {
        "train_test_split": {
            "name": "train_test_split",
            "location": 30,
            "return": [
                "int",
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "network": [
                    "int",
                    "float",
                    "bytes",
                    "numpy.ndarray",
                    "bool",
                    "str"
                ],
                "test_size": [
                    "bool",
                    "int",
                    "Optional[List[int]]",
                    "numpy.ndarray",
                    "Optional[float]",
                    "Dict[int, Set[int]]",
                    "str"
                ],
                "train_size": [
                    "Optional[int]",
                    "Optional[float]",
                    "str",
                    "tensorflow.keras.models.Model",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "split": [
                    "str",
                    "bool"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 110,
            "return": [
                "bool",
                "int",
                "Optional[float]",
                "str",
                "numpy.dtype"
            ],
            "arguments": {
                "network": [
                    "int",
                    "float",
                    "Optional[float]",
                    "bool"
                ],
                "test_size": [
                    "int",
                    "float",
                    "str"
                ],
                "train_size": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Optional[List[str]]"
                ],
                "split": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "adjusted_mutual_information": {
            "name": "adjusted_mutual_information",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "clustering_1": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "clustering_2": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "shuffle_temporal_network": {
            "name": "shuffle_temporal_network",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "net": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pathpy-master/pathpy/algorithms/matrices.py": {
        "adjacency_matrix": {
            "name": "adjacency_matrix",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [],
                "count": [],
                "transposed": [],
                "directed": []
            }
        },
        "_network": {
            "name": "_network",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [],
                "count": [],
                "transposed": [],
                "directed": [],
                "loops": []
            }
        },
        "transition_matrix": {
            "name": "transition_matrix",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [],
                "transposed": []
            }
        }
    },
    "pathpy-master/pathpy/algorithms/path_extraction.py": {
        "_remove_repetitions": {
            "name": "_remove_repetitions",
            "location": 35,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "_expand_set_paths": {
            "name": "_expand_set_paths",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "set_path": [
                    "int",
                    "Collection[str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "all_paths_from_dag": {
            "name": "all_paths_from_dag",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "dag": [
                    "list",
                    "int",
                    "bool",
                    "str",
                    "List[int]",
                    "List[str]"
                ],
                "node_mapping": [
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]",
                    "Optional[List[str]]",
                    "str",
                    "Optional[List[float]]",
                    "bool",
                    "Dict[str, Exception]",
                    "Optional[Tuple[Any, Any]]"
                ],
                "max_subpath_length": [
                    "bool",
                    "int"
                ],
                "repetitions": [
                    "bool",
                    "int"
                ],
                "unique": [
                    "bool",
                    "int"
                ]
            }
        },
        "all_paths_from_temporal_network": {
            "name": "all_paths_from_temporal_network",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "tempnet": [
                    "list",
                    "str",
                    "bytes",
                    "int"
                ],
                "delta": [
                    "list",
                    "str",
                    "bytes",
                    "int"
                ],
                "max_subpath_length": [
                    "int",
                    "str",
                    "text_recognizer.models.base.Model",
                    "Optional[int]",
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "generate_causal_tree": {
            "name": "generate_causal_tree",
            "location": 309,
            "return": [
                "float",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "dag": [
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ],
                "root": [
                    "\"Atom\"",
                    "daily_problems.binary_tree_node.Node",
                    "List[int]",
                    "List[str]",
                    "List[List[int]]"
                ],
                "node_map": [
                    "Node",
                    "Pattern",
                    "int"
                ]
            }
        },
        "PaCo": {
            "name": "PaCo",
            "location": 364,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str"
            ],
            "arguments": {
                "tn": [
                    "float",
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ],
                "delta": [
                    "int",
                    "Optional[float]",
                    "float",
                    "bool"
                ],
                "skip_first": [
                    "static_frame.core.util.PathSpecifier",
                    "static_frame.core.util.IndexConstructor",
                    "bool",
                    "Optional[str]"
                ],
                "up_to_k": [
                    "float",
                    "bool",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "pathpy-master/pathpy/algorithms/rolling_time_window.py": {
        "RollingTimeWindow.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temporal_net": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "float",
                    "bool"
                ],
                "window_size": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "step_size": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "return_window": [
                    "float",
                    "int",
                    "bool",
                    "list",
                    "Optional[int]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Dict[int, str]"
                ]
            }
        },
        "RollingTimeWindow.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTimeWindow.__next__": {
            "name": "__next__",
            "location": 73,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/algorithms/shortest_paths.py": {
        "distance_matrix": {
            "name": "distance_matrix",
            "location": 35,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "weight": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "count": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_dm_network": {
            "name": "_dm_network",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "int",
                    "float",
                    "bool"
                ],
                "weight": [
                    "int",
                    "float",
                    "bool"
                ],
                "count": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_dm_paths": {
            "name": "_dm_paths",
            "location": 85,
            "return": [
                "int",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "int"
                ],
                "weight": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "count": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "all_shortest_paths": {
            "name": "all_shortest_paths",
            "location": 102,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "network": [
                    "str",
                    "Dict[str, Any]",
                    "numpy.dtype",
                    "Optional[Dict]",
                    "Callable"
                ],
                "weight": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "return_distance_matrix": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "single_source_shortest_paths": {
            "name": "single_source_shortest_paths",
            "location": 194,
            "return": [
                "str"
            ],
            "arguments": {
                "network": [
                    "int",
                    "bool",
                    "str"
                ],
                "source": [
                    "str",
                    "dict",
                    "bool",
                    "pipwatch_worker.core.data_models.RequirementsFile"
                ],
                "weight": [
                    "int",
                    "bytes",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "shortest_path_tree": {
            "name": "shortest_path_tree",
            "location": 255,
            "return": [
                "Optional[int]",
                "str",
                "Optional[str]",
                "bool",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "network": [
                    "bool",
                    "int",
                    "Iterable[static_frame.core.index_base.IndexBase]",
                    "Type[static_frame.core.index_base.IndexBase]"
                ],
                "source": [
                    "str",
                    "int",
                    "List[str]",
                    "dict"
                ],
                "weight": [
                    "str",
                    "List[str]",
                    "float",
                    "dep_check.models.Module",
                    "core.I.CanonicalStorage",
                    "Sequence[core.ICanonicalSource]"
                ]
            }
        },
        "diameter": {
            "name": "diameter",
            "location": 302,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "weight": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "all_longest_paths": {
            "name": "all_longest_paths",
            "location": 341,
            "return": [
                "Callable[[str, Any], Tuple[bytes, int]]",
                "MutableMapping[str, Any]",
                "str",
                "MutableMapping[str, int]",
                "bool"
            ],
            "arguments": {
                "network": [
                    "float",
                    "str",
                    "vehicles.models.Vehicle"
                ],
                "weight": [
                    "str",
                    "BinaryIO",
                    "Union[str, bytes]",
                    "int"
                ]
            }
        },
        "avg_path_length": {
            "name": "avg_path_length",
            "location": 381,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "network": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "django.db.models.QuerySet"
                ],
                "weight": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "django.db.models.QuerySet"
                ],
                "exclude_zero": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "pathpy-master/pathpy/algorithms/trees.py": {
        "check_tree": {
            "name": "check_tree",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "network": [
                    "pathpy.core.network.Network",
                    "int",
                    "List[int]"
                ]
            }
        },
        "tree_size": {
            "name": "tree_size",
            "location": 66,
            "return": [
                "float",
                "int",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "network": [
                    "pathpy.core.network.Network",
                    "int",
                    "Callable[[T], T]",
                    "Iterable[T]",
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "node": [
                    "str",
                    "Callable[[T], T]",
                    "dict",
                    "Optional[Callable]"
                ]
            }
        },
        "check_tree.dfs": {
            "name": "dfs",
            "location": 46,
            "return": [
                "str",
                "app.models.Question"
            ],
            "arguments": {
                "network": [
                    "pathpy.core.network.Network",
                    "list",
                    "List[int]"
                ],
                "node": [
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "dict"
                ]
            }
        }
    },
    "pathpy-master/pathpy/algorithms/__init__.py": {},
    "pathpy-master/pathpy/converters/networkx.py": {
        "to_networkx": {
            "name": "to_networkx",
            "location": 19,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "network": [
                    "bool",
                    "pathpy.core.network.Network",
                    "graph.Graph"
                ]
            }
        },
        "from_networkx": {
            "name": "from_networkx",
            "location": 37,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "graph": [
                    "Any",
                    "bool"
                ]
            }
        }
    },
    "pathpy-master/pathpy/converters/__init__.py": {},
    "pathpy-master/pathpy/core/api.py": {},
    "pathpy-master/pathpy/core/classes.py": {
        "BaseClass.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "BaseClass.__setitem__": {
            "name": "__setitem__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "BaseClass.__getitem__": {
            "name": "__getitem__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BaseClass.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseClass.uid": {
            "name": "uid",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseClass.update": {
            "name": "update",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseClass.copy": {
            "name": "copy",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseClass.weight": {
            "name": "weight",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [],
                "default": []
            }
        }
    },
    "pathpy-master/pathpy/core/core.py": {
        "_get_valid_objects": {
            "name": "_get_valid_objects",
            "location": 986,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "PathPyObject.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "PathPyObject.__setitem__": {
            "name": "__setitem__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "PathPyObject.__getitem__": {
            "name": "__getitem__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PathPyObject.__repr__": {
            "name": "__repr__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyObject.has_python_uid": {
            "name": "has_python_uid",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyObject.uid": {
            "name": "uid",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyObject.attributes": {
            "name": "attributes",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyObject.update": {
            "name": "update",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyObject.copy": {
            "name": "copy",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyObject.weight": {
            "name": "weight",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [],
                "default": []
            }
        },
        "PathPySet.__new__": {
            "name": "__new__",
            "location": 325,
            "return": [],
            "arguments": {
                "cls": [],
                "args": []
            }
        },
        "PathPySet.__repr__": {
            "name": "__repr__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyTuple.__new__": {
            "name": "__new__",
            "location": 336,
            "return": [],
            "arguments": {
                "cls": [],
                "args": [],
                "directed": []
            }
        },
        "PathPyTuple.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "directed": []
            }
        },
        "PathPyTuple.__hash__": {
            "name": "__hash__",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyTuple.__eq__": {
            "name": "__eq__",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PathPyTuple.__repr__": {
            "name": "__repr__",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyRelation.__new__": {
            "name": "__new__",
            "location": 362,
            "return": [],
            "arguments": {
                "cls": [],
                "args": [],
                "directed": [],
                "ordered": []
            }
        },
        "PathPyRelation.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "directed": [],
                "ordered": []
            }
        },
        "PathPyCounter.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": [],
                "relations": [],
                "directed": [],
                "ordered": []
            }
        },
        "PathPyCounter.__getitem__": {
            "name": "__getitem__",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PathPyCounter.__setitem__": {
            "name": "__setitem__",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "PathPyCounter._map_key": {
            "name": "_map_key",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PathPyEmpty.__new__": {
            "name": "__new__",
            "location": 411,
            "return": [],
            "arguments": {
                "cls": [],
                "args": []
            }
        },
        "PathPyEmpty.uid": {
            "name": "uid",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyEmpty.__repr__": {
            "name": "__repr__",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.__repr__": {
            "name": "__repr__",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.__len__": {
            "name": "__len__",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.__str__": {
            "name": "__str__",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.__contains__": {
            "name": "__contains__",
            "location": 517,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PathPyPath.__iter__": {
            "name": "__iter__",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.objects": {
            "name": "objects",
            "location": 527,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.relations": {
            "name": "relations",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.depth": {
            "name": "depth",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.directed": {
            "name": "directed",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "directed": []
            }
        },
        "PathPyPath.items": {
            "name": "items",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.keys": {
            "name": "keys",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.values": {
            "name": "values",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyPath.max_depth": {
            "name": "max_depth",
            "location": 568,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "PathPyPath.subobjects": {
            "name": "subobjects",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "depth": []
            }
        },
        "PathPyPath.summary": {
            "name": "summary",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.__init__": {
            "name": "__init__",
            "location": 617,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.__getitem__": {
            "name": "__getitem__",
            "location": 655,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PathPyCollection._": {
            "name": "_",
            "location": 954,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.__setitem__": {
            "name": "__setitem__",
            "location": 673,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "PathPyCollection.__delitem__": {
            "name": "__delitem__",
            "location": 676,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PathPyCollection.__iter__": {
            "name": "__iter__",
            "location": 679,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.__len__": {
            "name": "__len__",
            "location": 682,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.__repr__": {
            "name": "__repr__",
            "location": 685,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.__str__": {
            "name": "__str__",
            "location": 688,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.__eq__": {
            "name": "__eq__",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PathPyCollection.__iadd__": {
            "name": "__iadd__",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PathPyCollection.__isub__": {
            "name": "__isub__",
            "location": 700,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PathPyCollection.__contains__": {
            "name": "__contains__",
            "location": 713,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "PathPyCollection.items": {
            "name": "items",
            "location": 737,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.keys": {
            "name": "keys",
            "location": 741,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.values": {
            "name": "values",
            "location": 745,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.pop": {
            "name": "pop",
            "location": 749,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "PathPyCollection.uids": {
            "name": "uids",
            "location": 754,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.directed": {
            "name": "directed",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.counter": {
            "name": "counter",
            "location": 764,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.index": {
            "name": "index",
            "location": 769,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.nodes": {
            "name": "nodes",
            "location": 785,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection.add": {
            "name": "add",
            "location": 790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection._add": {
            "name": "_add",
            "location": 898,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PathPyCollection._if_exist": {
            "name": "_if_exist",
            "location": 923,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PathPyCollection.remove": {
            "name": "remove",
            "location": 937,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathPyCollection._remove": {
            "name": "_remove",
            "location": 968,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "pathpy-master/pathpy/core/edge.py": {
        "Edge.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "w": [],
                "uid": [],
                "directed": []
            }
        },
        "Edge.v": {
            "name": "v",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Edge.w": {
            "name": "w",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Edge.nodes": {
            "name": "nodes",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Edge.summary": {
            "name": "summary",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EdgeCollection.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EdgeCollection.multiedges": {
            "name": "multiedges",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EdgeCollection.add": {
            "name": "add",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EdgeCollection._": {
            "name": "_",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EdgeCollection.remove": {
            "name": "remove",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/core/hyperedge.py": {
        "HyperEdge.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperEdge.nodes": {
            "name": "nodes",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperEdge.summary": {
            "name": "summary",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperEdgeCollection.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperEdgeCollection.multiedges": {
            "name": "multiedges",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperEdgeCollection.add": {
            "name": "add",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperEdgeCollection._": {
            "name": "_",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperEdgeCollection.remove": {
            "name": "remove",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/core/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeCollection.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeCollection.add": {
            "name": "add",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeCollection._": {
            "name": "_",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeCollection.remove": {
            "name": "remove",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/core/path.py": {
        "Path.summary": {
            "name": "summary",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.nodes": {
            "name": "nodes",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.subpaths": {
            "name": "subpaths",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "min_length": [],
                "max_length": [],
                "include_self": [],
                "paths": []
            }
        },
        "PathCollection.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathCollection.multipaths": {
            "name": "multipaths",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathCollection.add": {
            "name": "add",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathCollection._": {
            "name": "_",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathCollection.remove": {
            "name": "remove",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/core/temporal.py": {
        "_get_start_end": {
            "name": "_get_start_end",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "TemporalPathPyObject.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "TemporalPathPyObject.__iter__": {
            "name": "__iter__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalPathPyObject.__getitem__": {
            "name": "__getitem__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TemporalPathPyObject._": {
            "name": "_",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "TemporalPathPyObject.__setitem__": {
            "name": "__setitem__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "TemporalPathPyObject.start": {
            "name": "start",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalPathPyObject.end": {
            "name": "end",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalPathPyObject._clean_events": {
            "name": "_clean_events",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalPathPyObject.event": {
            "name": "event",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalPathPyObject.last": {
            "name": "last",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalPathPyObject._clean_events.reducer": {
            "name": "reducer",
            "location": 107,
            "return": [],
            "arguments": {
                "old": [],
                "new": []
            }
        }
    },
    "pathpy-master/pathpy/core/__init__.py": {},
    "pathpy-master/pathpy/generators/lattice.py": {
        "_multi_dim_range": {
            "name": "_multi_dim_range",
            "location": 25,
            "return": [
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "stop": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "dims": [
                    "int",
                    "bool",
                    "Union[str, list]"
                ]
            }
        },
        "lattice_network": {
            "name": "lattice_network",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "bool",
                    "Union[str, list]"
                ],
                "stop": [
                    "int",
                    "bool",
                    "Union[str, list]"
                ],
                "dims": [
                    "int",
                    "bool",
                    "Union[str, list]"
                ]
            }
        }
    },
    "pathpy-master/pathpy/generators/random_graphs.py": {
        "max_edges": {
            "name": "max_edges",
            "location": 28,
            "return": [],
            "arguments": {
                "n": [],
                "directed": [],
                "multiedges": [],
                "loops": []
            }
        },
        "ER_nm": {
            "name": "ER_nm",
            "location": 77,
            "return": [],
            "arguments": {
                "n": [],
                "m": [],
                "directed": [],
                "loops": [],
                "multiedges": [],
                "node_uids": []
            }
        },
        "ER_nm_randomize": {
            "name": "ER_nm_randomize",
            "location": 151,
            "return": [],
            "arguments": {
                "network": [],
                "loops": [],
                "multiedges": []
            }
        },
        "ER_np": {
            "name": "ER_np",
            "location": 198,
            "return": [],
            "arguments": {
                "n": [],
                "p": [],
                "directed": [],
                "loops": [],
                "node_uids": []
            }
        },
        "ER_np_randomize": {
            "name": "ER_np_randomize",
            "location": 263,
            "return": [],
            "arguments": {
                "network": [],
                "loops": []
            }
        },
        "Watts_Strogatz": {
            "name": "Watts_Strogatz",
            "location": 276,
            "return": [],
            "arguments": {
                "n": [],
                "s": [],
                "p": [],
                "loops": [],
                "node_uids": []
            }
        },
        "is_graphic_Erdos_Gallai": {
            "name": "is_graphic_Erdos_Gallai",
            "location": 362,
            "return": [],
            "arguments": {
                "degrees": []
            }
        },
        "generate_degree_sequence": {
            "name": "generate_degree_sequence",
            "location": 412,
            "return": [],
            "arguments": {
                "n": [],
                "distribution": []
            }
        },
        "Molloy_Reed": {
            "name": "Molloy_Reed",
            "location": 442,
            "return": [],
            "arguments": {
                "degrees": [],
                "multiedge": [],
                "relax": [],
                "node_uids": []
            }
        },
        "Molloy_Reed_randomize": {
            "name": "Molloy_Reed_randomize",
            "location": 534,
            "return": [],
            "arguments": {
                "network": []
            }
        },
        "k_regular_random": {
            "name": "k_regular_random",
            "location": 551,
            "return": [],
            "arguments": {
                "k": [],
                "n": [],
                "node_uids": []
            }
        }
    },
    "pathpy-master/pathpy/generators/__init__.py": {},
    "pathpy-master/pathpy/io/csv.py": {
        "read_dataframe": {
            "name": "read_dataframe",
            "location": 34,
            "return": [],
            "arguments": {
                "filename": [],
                "sep": [],
                "header": [],
                "names": []
            }
        },
        "add_attributes": {
            "name": "add_attributes",
            "location": 48,
            "return": [],
            "arguments": {
                "filename": [],
                "network": [],
                "sep": [],
                "header": []
            }
        },
        "read_network": {
            "name": "read_network",
            "location": 54,
            "return": [],
            "arguments": {
                "filename": [],
                "loops": [],
                "directed": [],
                "multiedges": [],
                "sep": [],
                "header": [],
                "names": [],
                "bipartite": []
            }
        },
        "read_temporal_network": {
            "name": "read_temporal_network",
            "location": 75,
            "return": [],
            "arguments": {
                "filename": [],
                "loops": [],
                "directed": [],
                "multiedges": [],
                "sep": [],
                "header": [],
                "names": []
            }
        },
        "read_pathcollection": {
            "name": "read_pathcollection",
            "location": 95,
            "return": [],
            "arguments": {
                "filename": [],
                "separator": [],
                "frequency": [],
                "directed": [],
                "maxlines": []
            }
        },
        "write_dataframe": {
            "name": "write_dataframe",
            "location": 175,
            "return": [],
            "arguments": {
                "frame": [],
                "path_or_buf": []
            }
        },
        "write": {
            "name": "write",
            "location": 224,
            "return": [],
            "arguments": {
                "network": [],
                "path_or_buf": [],
                "include_edge_uid": [],
                "export_indices": []
            }
        }
    },
    "pathpy-master/pathpy/io/graphml.py": {
        "read_network": {
            "name": "read_network",
            "location": 24,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "pathpy-master/pathpy/io/graphtool.py": {
        "_parse_property_value": {
            "name": "_parse_property_value",
            "location": 36,
            "return": [
                "str",
                "Optional[Callable[..., Any]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "ptr": [
                    "str"
                ],
                "type_index": [
                    "str"
                ],
                "endianness": [
                    "str"
                ]
            }
        },
        "parse_graphtool_format": {
            "name": "parse_graphtool_format",
            "location": 148,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes"
                ],
                "ignore_temporal": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, str]",
                    "pandas.DataFrame"
                ],
                "multiedges": [
                    "dict",
                    "bool",
                    "Tuple[int, str, bytearray]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "read_graphtool": {
            "name": "read_graphtool",
            "location": 307,
            "return": [
                "str"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[str]"
                ],
                "ignore_temporal": [
                    "bytes",
                    "BinaryIO",
                    "memoryview",
                    "List[float]",
                    "Iterable[str]"
                ],
                "multiedges": [
                    "bytes",
                    "BinaryIO",
                    "memoryview",
                    "List[float]",
                    "Iterable[str]"
                ]
            }
        },
        "write_graphtool": {
            "name": "write_graphtool",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "network": [
                    "Union[List, set]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ],
                "file": [
                    "Union[List, set]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "list_netzschleuder_records": {
            "name": "list_netzschleuder_records",
            "location": 339,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Optional[zerver.models.Realm]",
                "Callable",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ]
            }
        },
        "read_netzschleuder_record": {
            "name": "read_netzschleuder_record",
            "location": 393,
            "return": [
                "str",
                "int",
                "salon.models.Stylist"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "base_url": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "read_netzschleuder_network": {
            "name": "read_netzschleuder_network",
            "location": 433,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "net": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "ignore_temporal": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "multiedges": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "base_url": [
                    "str",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "pathpy-master/pathpy/io/infomap.py": {
        "to_state_file": {
            "name": "to_state_file",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "list",
                    "int",
                    "dict"
                ],
                "file": [
                    "str",
                    "BinaryIO"
                ],
                "max_memory": [
                    "int"
                ]
            }
        },
        "from_state_file": {
            "name": "from_state_file",
            "location": 121,
            "return": [
                "collections.Counter"
            ],
            "arguments": {
                "file": [
                    "IO[Any]",
                    "List[str]",
                    "IO[str]",
                    "List[Callable]"
                ]
            }
        }
    },
    "pathpy-master/pathpy/io/konect.py": {
        "read_tsv_network": {
            "name": "read_tsv_network",
            "location": 31,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "file": [
                    "BinaryIO",
                    "io.TextIOBase",
                    "List[str]",
                    "IO",
                    "IO[bytes]",
                    "TextIO",
                    "IO[str]"
                ],
                "ignore_temporal": [
                    "str",
                    "bytes",
                    "frozenset",
                    "Callable"
                ]
            }
        },
        "read_konect_name": {
            "name": "read_konect_name",
            "location": 178,
            "return": [
                "str",
                "List[str]",
                "Type",
                "bytes",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "ignore_temporal": [
                    "List[Tuple[int, Any]]",
                    "List[Callable[[], None]]"
                ],
                "base_url": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "pathpy-master/pathpy/io/network_recognition.py": {
        "_check_connected": {
            "name": "_check_connected",
            "location": 27,
            "return": [
                "itsim.network.packePacket",
                "bool",
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "list"
                ],
                "v": [
                    "str",
                    "Sequence[tree.Node]"
                ],
                "w": [
                    "float",
                    "int",
                    "List[Union[\"PipeChain\", str]]",
                    "T"
                ],
                "tol": [
                    "Callable[[T, T], T]",
                    "T",
                    "str",
                    "Pattern",
                    "int"
                ]
            }
        },
        "_detect_nodes": {
            "name": "_detect_nodes",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "edges": [
                    "int",
                    "bool"
                ],
                "node_radius": [
                    "int",
                    "float"
                ],
                "num_nodes": [
                    "int"
                ],
                "n": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray",
                    "Optional[Iterable[int]]"
                ]
            }
        },
        "_detect_edges": {
            "name": "_detect_edges",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "edges": [
                    "str",
                    "numpy.ndarray"
                ],
                "min_edge_length": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "max_edge_gap": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "threshold": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "intersect_tolerance_factor": [
                    "int",
                    "float",
                    "str",
                    "numpy.ndarray"
                ],
                "network": [
                    "Edge",
                    "bool"
                ]
            }
        },
        "_preprocess_image": {
            "name": "_preprocess_image",
            "location": 94,
            "return": [
                "numpy.ndarray",
                "int",
                "str"
            ],
            "arguments": {
                "img": [
                    "numpy.ndarray",
                    "int",
                    "str"
                ],
                "sigma": [
                    "numpy.ndarray",
                    "int",
                    "str"
                ],
                "dil": [
                    "numpy.ndarray",
                    "int",
                    "str"
                ]
            }
        },
        "from_image": {
            "name": "from_image",
            "location": 110,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "img_path": [
                    "str"
                ],
                "sigma": [
                    "str"
                ],
                "dilation": [
                    "str"
                ],
                "node_radius": [
                    "List[str]",
                    "str",
                    "int",
                    "List[Dict[str, float]]",
                    "List[int]",
                    "List[None]"
                ],
                "num_nodes": [
                    "List[str]",
                    "str",
                    "int",
                    "List[Dict[str, float]]",
                    "List[int]",
                    "List[None]"
                ],
                "threshold": [
                    "int",
                    "str"
                ],
                "min_edge_length": [
                    "int",
                    "str"
                ],
                "max_edge_gap": [
                    "int",
                    "str"
                ],
                "intersect_tolerance_factor": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pathpy-master/pathpy/io/pandas.py": {
        "_check_column_name": {
            "name": "_check_column_name",
            "location": 27,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "frame": [
                    "str",
                    "abilian.services.security.models.Permission",
                    "abilian.services.security.models.Role"
                ],
                "name": [
                    "str"
                ],
                "synonyms": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "to_network": {
            "name": "to_network",
            "location": 41,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "df": [
                    "dict",
                    "str"
                ],
                "loops": [
                    "Iterable[Any]",
                    "str",
                    "int",
                    "List[int]",
                    "Iterable",
                    "float"
                ],
                "directed": [
                    "str",
                    "models.characters.mods_base.Mod",
                    "int"
                ],
                "multiedges": [
                    "int",
                    "Iterable[T]",
                    "List[str]",
                    "x509_pki.models.Certificate",
                    "T",
                    "bytes"
                ],
                "bipartite": [
                    "dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ]
            }
        },
        "add_attributes": {
            "name": "add_attributes",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "df": [
                    "str",
                    "List[int]"
                ],
                "network": [
                    "int",
                    "str",
                    "pathpy.core.network.Network"
                ]
            }
        },
        "to_temporal_network": {
            "name": "to_temporal_network",
            "location": 192,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "df": [
                    "dict",
                    "Mapping[str, Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "loops": [
                    "dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ],
                "directed": [
                    "int",
                    "str"
                ],
                "multiedges": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "from_network": {
            "name": "from_network",
            "location": 358,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "network": [
                    "static_frame.core.index.Index",
                    "Optional[str]",
                    "str",
                    "int",
                    "List['Photo']"
                ],
                "include_edge_uid": [
                    "bool",
                    "str"
                ],
                "export_indices": [
                    "bool",
                    "str"
                ]
            }
        },
        "from_temporal_network": {
            "name": "from_temporal_network",
            "location": 445,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "network": [
                    "static_frame.core.index.Index",
                    "Optional[str]",
                    "str",
                    "int",
                    "List['Photo']"
                ],
                "include_edge_uid": [
                    "bool",
                    "str"
                ],
                "export_indices": [
                    "bool",
                    "str"
                ]
            }
        },
        "to_dataframe": {
            "name": "to_dataframe",
            "location": 527,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "network": [
                    "str",
                    "bool",
                    "int"
                ],
                "include_edge_uid": [
                    "Optional[float]",
                    "bool",
                    "int"
                ],
                "export_indices": [
                    "Optional[float]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pathpy-master/pathpy/io/sql.py": {
        "read_dataframe": {
            "name": "read_dataframe",
            "location": 35,
            "return": [],
            "arguments": {
                "db_file": [],
                "con": [],
                "uri": [],
                "sql": [],
                "table": []
            }
        },
        "read_network": {
            "name": "read_network",
            "location": 105,
            "return": [],
            "arguments": {
                "db_file": [],
                "loops": [],
                "directed": [],
                "multiedges": [],
                "con": [],
                "sql": [],
                "table": [],
                "uri": []
            }
        },
        "read_temporal_network": {
            "name": "read_temporal_network",
            "location": 125,
            "return": [],
            "arguments": {
                "db_file": [],
                "loops": [],
                "directed": [],
                "multiedges": [],
                "con": [],
                "sql": [],
                "table": []
            }
        },
        "write_dataframe": {
            "name": "write_dataframe",
            "location": 144,
            "return": [],
            "arguments": {
                "frame": [],
                "table": [],
                "filename": [],
                "con": []
            }
        },
        "write": {
            "name": "write",
            "location": 198,
            "return": [],
            "arguments": {
                "network": [],
                "table": [],
                "filename": [],
                "con": [],
                "include_edge_uid": [],
                "export_indices": []
            }
        }
    },
    "pathpy-master/pathpy/io/__init__.py": {},
    "pathpy-master/pathpy/models/api.py": {},
    "pathpy-master/pathpy/models/classes.py": {},
    "pathpy-master/pathpy/models/directed_acyclic_graph.py": {
        "DirectedAcyclicGraph.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "multiedges": []
            }
        },
        "DirectedAcyclicGraph.roots": {
            "name": "roots",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph.leafs": {
            "name": "leafs",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph.acyclic": {
            "name": "acyclic",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph._add_node_properties": {
            "name": "_add_node_properties",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph._remove_node_properties": {
            "name": "_remove_node_properties",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph._add_edge_properties": {
            "name": "_add_edge_properties",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph._remove_edge_properties": {
            "name": "_remove_edge_properties",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph.summary": {
            "name": "summary",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph.topological_sorting": {
            "name": "topological_sorting",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectedAcyclicGraph._dfs_visit": {
            "name": "_dfs_visit",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "parent": []
            }
        },
        "DirectedAcyclicGraph.routes_from": {
            "name": "routes_from",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "node_mapping": []
            }
        },
        "DirectedAcyclicGraph.from_temporal_network": {
            "name": "from_temporal_network",
            "location": 323,
            "return": [],
            "arguments": {
                "cls": [],
                "temporal_network": [],
                "delta": []
            }
        }
    },
    "pathpy-master/pathpy/models/higher_order_network.py": {
        "HigherOrderNode.order": {
            "name": "order",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderNode.first_order_relations": {
            "name": "first_order_relations",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderNodeCollection.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderEdge.first_order_relations": {
            "name": "first_order_relations",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderEdgeCollection.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderNetwork.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "order": []
            }
        },
        "HigherOrderNetwork.order": {
            "name": "order",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderNetwork.subpaths": {
            "name": "subpaths",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderNetwork.observed": {
            "name": "observed",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderNetwork.fit": {
            "name": "fit",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "order": [],
                "subpaths": []
            }
        },
        "HigherOrderNetwork._": {
            "name": "_",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "order": [],
                "subpaths": []
            }
        },
        "HigherOrderNetwork.possible_relations": {
            "name": "possible_relations",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "collection": [],
                "length": []
            }
        },
        "HigherOrderNetwork.likelihood": {
            "name": "likelihood",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "log": []
            }
        },
        "HigherOrderNetwork.window": {
            "name": "window",
            "location": 239,
            "return": [],
            "arguments": {
                "iterable": [],
                "size": []
            }
        },
        "HigherOrderNetwork.from_paths": {
            "name": "from_paths",
            "location": 250,
            "return": [],
            "arguments": {
                "cls": [],
                "paths": []
            }
        }
    },
    "pathpy-master/pathpy/models/hypergraph.py": {
        "HyperGraph.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "multiedges": []
            }
        },
        "HyperGraph.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.uid": {
            "name": "uid",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.__add__": {
            "name": "__add__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HyperGraph.__sub__": {
            "name": "__sub__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HyperGraph.__iadd__": {
            "name": "__iadd__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HyperGraph.__isub__": {
            "name": "__isub__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HyperGraph.multiedges": {
            "name": "multiedges",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.nodes": {
            "name": "nodes",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.edges": {
            "name": "edges",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.incident_edges": {
            "name": "incident_edges",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph._degrees": {
            "name": "_degrees",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "_dict": [],
                "weight": []
            }
        },
        "HyperGraph.degrees": {
            "name": "degrees",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "weight": []
            }
        },
        "HyperGraph.summary": {
            "name": "summary",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.number_of_nodes": {
            "name": "number_of_nodes",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.number_of_edges": {
            "name": "number_of_edges",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.add_node": {
            "name": "add_node",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.add_edge": {
            "name": "add_edge",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.add_nodes": {
            "name": "add_nodes",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.add_edges": {
            "name": "add_edges",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.remove_node": {
            "name": "remove_node",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "HyperGraph.remove_edge": {
            "name": "remove_edge",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.remove_edges": {
            "name": "remove_edges",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.remove_nodes": {
            "name": "remove_nodes",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph._add_node_properties": {
            "name": "_add_node_properties",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph._remove_node_properties": {
            "name": "_remove_node_properties",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph._add_edge_properties": {
            "name": "_add_edge_properties",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph._remove_edge_properties": {
            "name": "_remove_edge_properties",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperGraph.plot": {
            "name": "plot",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/models/models.py": {},
    "pathpy-master/pathpy/models/MOGen.py": {
        "unwrap_self_count_transitions": {
            "name": "unwrap_self_count_transitions",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "arg": [
                    "Union[numpy.ndarray, numpy.void]",
                    "Union[str, List[str]]",
                    "numpy.ndarray"
                ]
            }
        },
        "unwrap_self_get_log_likelihood_path": {
            "name": "unwrap_self_get_log_likelihood_path",
            "location": 187,
            "return": [
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "arg": [
                    "str"
                ]
            }
        },
        "unwrap_self_generate_paths_chunk": {
            "name": "unwrap_self_generate_paths_chunk",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "MultiOrderMatrix.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "int",
                    "raiden.network.proxies.token.Token",
                    "Optional[Any]",
                    "Optional[bool]"
                ],
                "node_id_dict": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "django.db.models.QuerySet"
                ]
            }
        },
        "MultiOrderMatrix.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "str",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderMatrix.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderMatrix.__add__": {
            "name": "__add__",
            "location": 85,
            "return": [
                "numpy.ndarray",
                "Dict[str, int]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "numpy.ndarray",
                    "Type",
                    "str",
                    "Callable"
                ]
            }
        },
        "MultiOrderMatrix.__sub__": {
            "name": "__sub__",
            "location": 89,
            "return": [
                "numpy.ndarray",
                "Dict[str, Any]",
                "int",
                "esm.models.service_type.ServiceType",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "numpy.ndarray",
                    "Type",
                    "str"
                ]
            }
        },
        "MultiOrderMatrix.to_dataframe": {
            "name": "to_dataframe",
            "location": 93,
            "return": [
                "float",
                "bool",
                "db.models.taxon.FillDataLevel",
                "int",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "decimals": [
                    "numpy.ndarray",
                    "float",
                    "Dict[str, numpy.ndarray]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "MultiOrderMatrix._repr_html_": {
            "name": "_repr_html_",
            "location": 107,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderMatrix.display": {
            "name": "display",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "decimals": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MultiOrderMatrix.remove_zero_order": {
            "name": "remove_zero_order",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderMatrix.integrate_zero_order": {
            "name": "integrate_zero_order",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderMatrix.start_distribution": {
            "name": "start_distribution",
            "location": 147,
            "return": [
                "Dict[int, zam_repondeur.services.fetch.an.dossiers.models.TexteRef]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderMatrix.end_probability": {
            "name": "end_probability",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderMatrix.to_first_order": {
            "name": "to_first_order",
            "location": 167,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MOGen.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "max_order": [
                    "int"
                ],
                "model_selection": [
                    "bool",
                    "type",
                    "str",
                    "dict"
                ]
            }
        },
        "MOGen.update_max_order": {
            "name": "update_max_order",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_order": [
                    "int",
                    "float",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "MOGen.update_model_selection": {
            "name": "update_model_selection",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_selection": [
                    "int",
                    "float",
                    "pandas.DataFrame",
                    "Optional[float]"
                ]
            }
        },
        "MOGen._get_log_likelihood_offset": {
            "name": "_get_log_likelihood_offset",
            "location": 226,
            "return": [
                "str",
                "dict",
                "Dict[str, 'LabwareDefinition']"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str"
                ]
            }
        },
        "MOGen._chunks": {
            "name": "_chunks",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "Sequence",
                    "list",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "Sequence",
                    "List[T]",
                    "List[int]"
                ]
            }
        },
        "MOGen._count_transitions": {
            "name": "_count_transitions",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "MOGen._get_multi_order_transitions": {
            "name": "_get_multi_order_transitions",
            "location": 271,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Callable",
                    "dict",
                    "bool"
                ],
                "no_of_processes": [
                    "int",
                    "bool",
                    "str"
                ],
                "verbose": [
                    "int",
                    "bool"
                ]
            }
        },
        "MOGen._get_multi_order_adjacency_matrix": {
            "name": "_get_multi_order_adjacency_matrix",
            "location": 290,
            "return": [
                "str",
                "Tuple[float, float]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "pandas.DataFrame",
                    "esm.models.service_type.ServiceType"
                ],
                "no_of_processes": [
                    "pandas.DataFrame",
                    "esm.models.service_type.ServiceType"
                ],
                "verbose": [
                    "pandas.DataFrame",
                    "esm.models.service_type.ServiceType"
                ]
            }
        },
        "MOGen._get_multi_order_transition_matrix": {
            "name": "_get_multi_order_transition_matrix",
            "location": 312,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "pandas.DataFrame"
                ],
                "no_of_processes": [
                    "int",
                    "pandas.DataFrame"
                ],
                "A": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Tuple[float, float]"
                ],
                "verbose": [
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "MOGen._get_log_likelihood_path": {
            "name": "_get_log_likelihood_path",
            "location": 331,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "args": []
            }
        },
        "MOGen._compute_log_likelihood": {
            "name": "_compute_log_likelihood",
            "location": 350,
            "return": [
                "str",
                "Iterable[str]",
                "List[str]",
                "Set[str]",
                "Deque[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Optional[List[str]]",
                    "int",
                    "str",
                    "List[str]"
                ],
                "T": [
                    "str",
                    "Callable",
                    "List[str]",
                    "Sequence[str]"
                ],
                "no_of_processes": [
                    "int"
                ],
                "verbose": [
                    "int",
                    "bool",
                    "Union[int, float]",
                    "tuple",
                    "numpy.ndarray"
                ]
            }
        },
        "MOGen._compute_degrees_of_freedom": {
            "name": "_compute_degrees_of_freedom",
            "location": 369,
            "return": [
                "pandas.DataFrame",
                "Sequence",
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle",
                "str"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "pandas.DataFrame",
                    "Sequence",
                    "models.seat_group.SeatGroup",
                    "ticketing.models.ticket_bundle.TicketBundle",
                    "str"
                ]
            }
        },
        "MOGen._compute_AIC": {
            "name": "_compute_AIC",
            "location": 381,
            "return": [
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "str",
                    "float",
                    "Sequence[Any]",
                    "Callable"
                ],
                "T": [
                    "str",
                    "float",
                    "Sequence[Any]",
                    "Callable"
                ],
                "no_of_processes": [
                    "str",
                    "float",
                    "Sequence[Any]",
                    "Callable"
                ],
                "verbose": [
                    "str",
                    "float",
                    "Sequence[Any]",
                    "Callable"
                ]
            }
        },
        "MOGen._compute_order": {
            "name": "_compute_order",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "list",
                    "Iterable[Any]",
                    "Callable[[T, T], T]",
                    "T"
                ],
                "no_of_processes": [
                    "int",
                    "list",
                    "Iterable[Any]",
                    "Callable[[T, T], T]",
                    "T"
                ],
                "verbose": [
                    "int",
                    "list",
                    "Iterable[Any]",
                    "Callable[[T, T], T]",
                    "T"
                ]
            }
        },
        "MOGen.summary": {
            "name": "summary",
            "location": 402,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "print_summary": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MOGen.__str__": {
            "name": "__str__",
            "location": 464,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MOGen.__repr__": {
            "name": "__repr__",
            "location": 467,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MOGen.fit": {
            "name": "fit",
            "location": 470,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "no_of_processes": [
                    "List[\"IntensityTable\"]",
                    "str"
                ],
                "verbose": [
                    "List[\"IntensityTable\"]",
                    "str"
                ]
            }
        },
        "MOGen.plot": {
            "name": "plot",
            "location": 513,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MOGen._generate_path_chunk": {
            "name": "_generate_path_chunk",
            "location": 552,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "args": []
            }
        },
        "MOGen.predict": {
            "name": "predict",
            "location": 567,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "no_of_paths": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "max_order": [
                    "int",
                    "datetime.datetime",
                    "numpy.ndarray",
                    "bool",
                    "models.Project",
                    "models.Record",
                    "Any"
                ],
                "seed": [
                    "bool",
                    "Optional[Any]",
                    "Optional[list]",
                    "str",
                    "Optional[str]"
                ],
                "start_node": [
                    "bool",
                    "Optional[dict]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "no_of_processes": [
                    "int",
                    "Callable",
                    "Tuple[str]",
                    "Optional[str]",
                    "str",
                    "Optional[dict]",
                    "Tuple[int, int, int]"
                ],
                "paths_per_process": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "MOGen.pagerank": {
            "name": "pagerank",
            "location": 612,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "max_order": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Type[abilian.core.models.Model]"
                ]
            }
        },
        "MOGen.mean_first_passage_time": {
            "name": "mean_first_passage_time",
            "location": 634,
            "return": [
                "Optional[str]",
                "int",
                "IO",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "max_order": [
                    "int",
                    "float",
                    "str",
                    "Optional[float]"
                ],
                "recurrence": [
                    "Optional[Any]",
                    "Callable[..., None]",
                    "bool"
                ]
            }
        },
        "MOGen.fundamental_matrix": {
            "name": "fundamental_matrix",
            "location": 665,
            "return": [
                "str",
                "int",
                "bool",
                "bytes",
                "rl_algorithms.utils.config.ConfigDict"
            ],
            "arguments": {
                "self": [],
                "max_order": [
                    "db.models.Region",
                    "models.Credentials",
                    "AsyncGenerator",
                    "bool",
                    "viewer.models.Archive",
                    "str"
                ]
            }
        },
        "MOGen.transient_matrix": {
            "name": "transient_matrix",
            "location": 675,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "max_order": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "MOGen._get_log_likelihood_offset.log_factorial": {
            "name": "log_factorial",
            "location": 228,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "thresh": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "pathpy-master/pathpy/models/multi_order_model.py": {
        "MultiOrderModel.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "max_order": []
            }
        },
        "MultiOrderModel.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderModel.max_order": {
            "name": "max_order",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderModel._current_max_order": {
            "name": "_current_max_order",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderModel.degrees_of_freedom": {
            "name": "degrees_of_freedom",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "order": [],
                "mode": []
            }
        },
        "MultiOrderModel.fit": {
            "name": "fit",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "max_order": [],
                "null_models": []
            }
        },
        "MultiOrderModel.predict": {
            "name": "predict",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "threshold": []
            }
        },
        "MultiOrderModel.likelihood_ratio_test": {
            "name": "likelihood_ratio_test",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "null": [],
                "order": [],
                "threshold": []
            }
        },
        "MultiOrderModel.likelihood": {
            "name": "likelihood",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "order": [],
                "log": []
            }
        },
        "MultiOrderModel.layer_likelihood": {
            "name": "layer_likelihood",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "order": [],
                "longer_paths": [],
                "log": [],
                "min_length": []
            }
        },
        "MultiOrderModel.path_likelihood": {
            "name": "path_likelihood",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "frequency": [],
                "order": [],
                "log": []
            }
        },
        "MultiOrderModel._path_to_hon": {
            "name": "_path_to_hon",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "order": []
            }
        },
        "MultiOrderModel.summary": {
            "name": "summary",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiOrderModel.from_paths": {
            "name": "from_paths",
            "location": 372,
            "return": [],
            "arguments": {
                "cls": [],
                "paths": []
            }
        }
    },
    "pathpy-master/pathpy/models/network.py": {
        "Network.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "directed": [],
                "multiedges": []
            }
        },
        "Network.__str__": {
            "name": "__str__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.uid": {
            "name": "uid",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.__add__": {
            "name": "__add__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Network.__sub__": {
            "name": "__sub__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Network.__iadd__": {
            "name": "__iadd__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Network.__isub__": {
            "name": "__isub__",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Network.shape": {
            "name": "shape",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.directed": {
            "name": "directed",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.multiedges": {
            "name": "multiedges",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.nodes": {
            "name": "nodes",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.edges": {
            "name": "edges",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.successors": {
            "name": "successors",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.predecessors": {
            "name": "predecessors",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.outgoing": {
            "name": "outgoing",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.incoming": {
            "name": "incoming",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.neighbors": {
            "name": "neighbors",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.incident_edges": {
            "name": "incident_edges",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network._degrees": {
            "name": "_degrees",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "_dict": [],
                "weight": []
            }
        },
        "Network.indegrees": {
            "name": "indegrees",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "weight": []
            }
        },
        "Network.outdegrees": {
            "name": "outdegrees",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "weight": []
            }
        },
        "Network.degrees": {
            "name": "degrees",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "weight": []
            }
        },
        "Network.summary": {
            "name": "summary",
            "location": 545,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.number_of_nodes": {
            "name": "number_of_nodes",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.number_of_edges": {
            "name": "number_of_edges",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.add_node": {
            "name": "add_node",
            "location": 653,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.add_edge": {
            "name": "add_edge",
            "location": 687,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.add_nodes": {
            "name": "add_nodes",
            "location": 724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.add_edges": {
            "name": "add_edges",
            "location": 757,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.remove_node": {
            "name": "remove_node",
            "location": 806,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Network.remove_edge": {
            "name": "remove_edge",
            "location": 844,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.remove_edges": {
            "name": "remove_edges",
            "location": 883,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.remove_nodes": {
            "name": "remove_nodes",
            "location": 888,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network._add_node_properties": {
            "name": "_add_node_properties",
            "location": 893,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network._remove_node_properties": {
            "name": "_remove_node_properties",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network._add_edge_properties": {
            "name": "_add_edge_properties",
            "location": 899,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network._remove_edge_properties": {
            "name": "_remove_edge_properties",
            "location": 943,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Network.to_multi_layer": {
            "name": "to_multi_layer",
            "location": 978,
            "return": [],
            "arguments": {
                "network": [],
                "edge_attribute": [],
                "retain_nodes": []
            }
        },
        "Network.from_temporal_network": {
            "name": "from_temporal_network",
            "location": 996,
            "return": [],
            "arguments": {
                "cls": [],
                "temporal_network": [],
                "min_time": [],
                "max_time": []
            }
        },
        "Network.from_paths": {
            "name": "from_paths",
            "location": 1017,
            "return": [],
            "arguments": {
                "cls": [],
                "path_collection": []
            }
        }
    },
    "pathpy-master/pathpy/models/null_model.py": {
        "NullModel.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "order": []
            }
        },
        "NullModel.fit": {
            "name": "fit",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "order": [],
                "subpaths": []
            }
        },
        "NullModel._": {
            "name": "_",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "order": [],
                "subpaths": []
            }
        },
        "NullModel.degrees_of_freedom": {
            "name": "degrees_of_freedom",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "NullModel.from_paths": {
            "name": "from_paths",
            "location": 123,
            "return": [],
            "arguments": {
                "cls": [],
                "paths": []
            }
        },
        "NullModel.from_network": {
            "name": "from_network",
            "location": 134,
            "return": [],
            "arguments": {
                "cls": [],
                "network": []
            }
        }
    },
    "pathpy-master/pathpy/models/temporal_network.py": {
        "TemporalNode.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNode.summary": {
            "name": "summary",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalEdge.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "v": [],
                "w": [],
                "uid": [],
                "directed": []
            }
        },
        "TemporalEdge.summary": {
            "name": "summary",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNodeCollection.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNodeCollection.__getitem__": {
            "name": "__getitem__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TemporalNodeCollection._": {
            "name": "_",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TemporalNodeCollection.start": {
            "name": "start",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNodeCollection.end": {
            "name": "end",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNodeCollection.events": {
            "name": "events",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNodeCollection.add": {
            "name": "add",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNodeCollection._add": {
            "name": "_add",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TemporalNodeCollection._if_exist": {
            "name": "_if_exist",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TemporalNodeCollection._remove": {
            "name": "_remove",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TemporalEdgeCollection.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalEdgeCollection.__getitem__": {
            "name": "__getitem__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TemporalEdgeCollection._": {
            "name": "_",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TemporalEdgeCollection.start": {
            "name": "start",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalEdgeCollection.end": {
            "name": "end",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalEdgeCollection.events": {
            "name": "events",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalEdgeCollection.add": {
            "name": "add",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalEdgeCollection._add": {
            "name": "_add",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TemporalEdgeCollection._if_exist": {
            "name": "_if_exist",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TemporalEdgeCollection._remove": {
            "name": "_remove",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TemporalNetwork.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "uid": [],
                "directed": [],
                "multiedges": []
            }
        },
        "TemporalNetwork.nodes": {
            "name": "nodes",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNetwork.edges": {
            "name": "edges",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNetwork.start": {
            "name": "start",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNetwork.end": {
            "name": "end",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNetwork.summary": {
            "name": "summary",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporalNetwork.to_continuous_time": {
            "name": "to_continuous_time",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "sampling_period": []
            }
        }
    },
    "pathpy-master/pathpy/models/__init__.py": {},
    "pathpy-master/pathpy/processes/epidemic_spreading.py": {
        "EpidemicSIR.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "List[str]",
                    "Sequence[str]",
                    "float",
                    "int"
                ],
                "recovery_time": [
                    "int",
                    "Optional[int]"
                ],
                "infection_prob": [
                    "float",
                    "int",
                    "Union[float, int]"
                ]
            }
        },
        "EpidemicSIR.random_seed": {
            "name": "random_seed",
            "location": 84,
            "return": [
                "utils.Node",
                "str",
                "pathlib.Path",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpidemicSIR.init": {
            "name": "init",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "EpidemicSIR.step": {
            "name": "step",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpidemicSIR.node_state": {
            "name": "node_state",
            "location": 168,
            "return": [
                "bool",
                "str",
                "salon.models.Stylist",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Callable[[T, T], T]",
                    "T",
                    "int"
                ]
            }
        },
        "EpidemicSIR.state_to_color": {
            "name": "state_to_color",
            "location": 179,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "EpidemicSIR.time": {
            "name": "time",
            "location": 188,
            "return": [
                "str",
                "int",
                "float",
                "numpy.ndarray",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpidemicSIR.R0": {
            "name": "R0",
            "location": 192,
            "return": [
                "str",
                "int",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/processes/process.py": {
        "BaseProcess.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "network": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseProcess.network": {
            "name": "network",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProcess.init": {
            "name": "init",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "BaseProcess.random_seed": {
            "name": "random_seed",
            "location": 46,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProcess.step": {
            "name": "step",
            "location": 50,
            "return": [
                "typing.Iterable[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProcess.time": {
            "name": "time",
            "location": 55,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProcess.state_to_color": {
            "name": "state_to_color",
            "location": 59,
            "return": [
                "typing.Union[typing.Tuple[builtins.int, builtins.int, builtins.int], builtins.str]"
            ],
            "arguments": {
                "self": [],
                "Any": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[dict]"
                ]
            }
        },
        "BaseProcess.node_state": {
            "name": "node_state",
            "location": 63,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Iterable[str]",
                    "Callable",
                    "tuple"
                ]
            }
        },
        "BaseProcess.simulation_run": {
            "name": "simulation_run",
            "location": 66,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Node]"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "seed": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "BaseProcess.run_experiment": {
            "name": "run_experiment",
            "location": 79,
            "return": [
                "cltk.core.data_types.Doc",
                "str",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "bool",
                    "float",
                    "int",
                    "str",
                    "List[str]"
                ],
                "runs": [
                    "int"
                ]
            }
        },
        "BaseProcess.plot": {
            "name": "plot",
            "location": 112,
            "return": [
                "Optional[bool]",
                "bool",
                "str",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "core.models.Subtask",
                    "bytearray"
                ],
                "run_id": [
                    "str",
                    "bytes",
                    "core.models.Subtask",
                    "bytearray"
                ],
                "timescale": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "BaseProcess.to_directed_acylic_graph": {
            "name": "to_directed_acylic_graph",
            "location": 192,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Optional[str]",
                    "int",
                    "dict"
                ],
                "run_id": [
                    "bytes",
                    "bool",
                    "int",
                    "str"
                ],
                "time_delta": [
                    "int",
                    "Optional[int]"
                ],
                "states": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "pathpy-master/pathpy/processes/random_walk.py": {
        "RandomWalk.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "str",
                    "Union[pandas.DataFrame, pandas.Series]",
                    "pydcop.algorithms.ComputationDef"
                ],
                "weight": [
                    "str",
                    "random.Random",
                    "List[int]",
                    "int",
                    "Optional[int]"
                ],
                "restart_prob": [
                    "str",
                    "random.Random",
                    "List[int]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "RandomWalk.init": {
            "name": "init",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "RandomWalk.random_seed": {
            "name": "random_seed",
            "location": 202,
            "return": [
                "utils.Node",
                "str",
                "pathlib.Path",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.step": {
            "name": "step",
            "location": 208,
            "return": [
                "int",
                "golem_messages.datastructures.p2p.Node",
                "Iterable[int]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.node_state": {
            "name": "node_state",
            "location": 231,
            "return": [
                "Optional[List[Any]]",
                "int",
                "Optional[bool]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "T",
                    "Iterator[T]",
                    "Dict[str, Tuple[int, int]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "RandomWalk.time": {
            "name": "time",
            "location": 245,
            "return": [
                "Union[int, float]",
                "Tuple[float, float]",
                "str",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.state_to_color": {
            "name": "state_to_color",
            "location": 251,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "RandomWalk.compute_transition_matrix": {
            "name": "compute_transition_matrix",
            "location": 266,
            "return": [
                "bool",
                "str",
                "Union[numbers.Real, numpy.ndarray]"
            ],
            "arguments": {
                "network": [
                    "float",
                    "int",
                    "Union[str, List[str]]",
                    "Food.models.Category",
                    "nucypher.network.middleware.RestMiddleware"
                ],
                "weight": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "restart_prob": [
                    "float",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "RandomWalk.transition_matrix": {
            "name": "transition_matrix",
            "location": 308,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.transition_probabilities": {
            "name": "transition_probabilities",
            "location": 313,
            "return": [
                "int",
                "Callable",
                "str",
                "List[dict]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[Node]",
                    "int",
                    "Node",
                    "Optional[daily_problems.binary_tree_node.Node]",
                    "node.Node"
                ]
            }
        },
        "RandomWalk.visitation_probabilities": {
            "name": "visitation_probabilities",
            "location": 324,
            "return": [
                "Tuple[Any, Any, Any]",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "Iterator[pandas.DataFrame]",
                    "Callable"
                ],
                "seed": [
                    "pathpy.core.network.Network",
                    "str",
                    "Node"
                ]
            }
        },
        "RandomWalk.transition_matrix_pd": {
            "name": "transition_matrix_pd",
            "location": 335,
            "return": [
                "str",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.current_node": {
            "name": "current_node",
            "location": 342,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.get_path": {
            "name": "get_path",
            "location": 345,
            "return": [
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "pandas._FrameOrSeries",
                    "int",
                    "Dict[str, str]",
                    "pandas.DataFrame",
                    "models.data_frames.data_frame.DataFrame"
                ],
                "run_id": [
                    "dict",
                    "pandas._FrameOrSeries",
                    "int",
                    "Dict[str, str]",
                    "pandas.DataFrame",
                    "models.data_frames.data_frame.DataFrame"
                ],
                "first_order": [
                    "Dict[str, str]",
                    "str",
                    "dict"
                ]
            }
        },
        "RandomWalk.get_paths": {
            "name": "get_paths",
            "location": 376,
            "return": [
                "str",
                "int",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "dict"
                ],
                "run_ids": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "bytes",
                    "Dict[str, Any]",
                    "int",
                    "Optional[Dict]",
                    "List[str]"
                ]
            }
        },
        "RandomWalk.stationary_state": {
            "name": "stationary_state",
            "location": 412,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.visitation_frequencies": {
            "name": "visitation_frequencies",
            "location": 435,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.total_variation_distance": {
            "name": "total_variation_distance",
            "location": 442,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomWalk.TVD": {
            "name": "TVD",
            "location": 455,
            "return": [
                "float",
                "T",
                "utils.Node"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "HigherOrderRandomWalk.__init__": {
            "name": "__init__",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "higher_order_network": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "first_order_network": [
                    "int",
                    "bool",
                    "float"
                ],
                "weight": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ],
                "restart_prob": [
                    "str",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "HigherOrderRandomWalk.init": {
            "name": "init",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "Edge",
                    "str"
                ]
            }
        },
        "HigherOrderRandomWalk.first_order_visitation_frequencies": {
            "name": "first_order_visitation_frequencies",
            "location": 591,
            "return": [
                "int",
                "Callable",
                "str",
                "List[dict]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderRandomWalk.first_order_stationary_state": {
            "name": "first_order_stationary_state",
            "location": 597,
            "return": [
                "django.db.models.QuerySet",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderRandomWalk.first_order_total_variation_distance": {
            "name": "first_order_total_variation_distance",
            "location": 613,
            "return": [
                "str",
                "pathlib.Path",
                "Optional[bool]",
                "Optional[int]",
                "int",
                "esm.models.service_type.ServiceType"
            ],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderRandomWalk.first_order_node": {
            "name": "first_order_node",
            "location": 624,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "higher_order_node": [
                    "pathpy.core.network.Network",
                    "Node",
                    "list",
                    "docutils.nodes.Node",
                    "Sequence[tree.Node]"
                ]
            }
        },
        "HigherOrderRandomWalk.step": {
            "name": "step",
            "location": 640,
            "return": [
                "int",
                "golem_messages.datastructures.p2p.Node",
                "Iterable[int]",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HigherOrderRandomWalk.plot": {
            "name": "plot",
            "location": 653,
            "return": [
                "str",
                "Iterable[str]",
                "salon.models.Stylist",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "core.models.Subtask",
                    "bytearray"
                ],
                "run_id": [
                    "str",
                    "bytes",
                    "core.models.Subtask",
                    "bytearray"
                ],
                "timescale": [
                    "str",
                    "bytes",
                    "Optional[float]",
                    "dict",
                    "bool"
                ]
            }
        },
        "HigherOrderRandomWalk.get_path": {
            "name": "get_path",
            "location": 731,
            "return": [
                "str",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "pandas._FrameOrSeries",
                    "int",
                    "Dict[str, str]",
                    "pandas.DataFrame",
                    "models.data_frames.data_frame.DataFrame"
                ],
                "run_id": [
                    "dict",
                    "pandas._FrameOrSeries",
                    "int",
                    "Dict[str, str]",
                    "pandas.DataFrame",
                    "models.data_frames.data_frame.DataFrame"
                ]
            }
        },
        "HigherOrderRandomWalk.get_paths": {
            "name": "get_paths",
            "location": 766,
            "return": [
                "str",
                "int",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "dict"
                ],
                "run_ids": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "bytes",
                    "Dict[str, Any]",
                    "int",
                    "Optional[Dict]",
                    "List[str]"
                ]
            }
        }
    },
    "pathpy-master/pathpy/processes/sampling.py": {
        "VoseAliasSampling.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "str",
                    "List[int]",
                    "list",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "VoseAliasSampling.sample": {
            "name": "sample",
            "location": 93,
            "return": [
                "float",
                "int",
                "List[numpy.array]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/processes/__init__.py": {},
    "pathpy-master/pathpy/statistics/clustering.py": {
        "local_clustering_coefficient": {
            "name": "local_clustering_coefficient",
            "location": 25,
            "return": [
                "Set[str]",
                "str",
                "List[str]",
                "Optional[int]",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "network": [
                    "Iterable['cirq.Qid']",
                    "List['cirq.Qid']",
                    "str"
                ],
                "v": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "Match",
                    "node.Node"
                ]
            }
        },
        "avg_clustering_coefficient": {
            "name": "avg_clustering_coefficient",
            "location": 69,
            "return": [
                "numpy.ndarray",
                "Optional[int]",
                "int",
                "str",
                "Tuple[Tuple[int, Any]]",
                "list"
            ],
            "arguments": {
                "network": [
                    "numpy.ndarray",
                    "bool",
                    "str",
                    "Tuple[float, float, float]",
                    "List[List[T]]"
                ]
            }
        },
        "closed_triads": {
            "name": "closed_triads",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "Tuple[float, float]",
                    "float",
                    "int",
                    "str",
                    "dict"
                ],
                "v": [
                    "numpy.ndarray",
                    "Tuple[float, float]",
                    "float",
                    "list",
                    "pathpy.core.network.Network"
                ]
            }
        }
    },
    "pathpy-master/pathpy/statistics/degrees.py": {
        "degree_sequence": {
            "name": "degree_sequence",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "Set[str]"
                ],
                "weight": [
                    "int",
                    "Tuple[int, int, int]",
                    "Dict[int, numpy.ndarray]"
                ]
            }
        },
        "degree_distribution": {
            "name": "degree_distribution",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "degrees": [
                    "str",
                    "int"
                ],
                "weight": [
                    "int",
                    "float"
                ]
            }
        },
        "mean_degree": {
            "name": "mean_degree",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "weight": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "mean_neighbor_degree": {
            "name": "mean_neighbor_degree",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "int",
                    "Callable"
                ],
                "weight": [
                    "float",
                    "Sequence['cirq.Qid']",
                    "esm.models.ServiceInstance"
                ],
                "exclude_neighbor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "degree_raw_moment": {
            "name": "degree_raw_moment",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "int",
                    "float",
                    "numpy.array",
                    "Iterable[T]",
                    "numpy.ndarray"
                ],
                "k": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "weight": [
                    "int",
                    "float",
                    "numpy.array",
                    "Iterable[T]",
                    "numpy.ndarray"
                ]
            }
        },
        "degree_central_moment": {
            "name": "degree_central_moment",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "int",
                    "float",
                    "numpy.array",
                    "Iterable[T]",
                    "numpy.ndarray"
                ],
                "k": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "weight": [
                    "int",
                    "float",
                    "numpy.array",
                    "Iterable[T]",
                    "numpy.ndarray"
                ]
            }
        },
        "degree_generating_function": {
            "name": "degree_generating_function",
            "location": 185,
            "return": [
                "Dict[str, Any]",
                "str",
                "list",
                "Iterable[int]",
                "Union[str, int]"
            ],
            "arguments": {
                "degrees": [
                    "numpy.ndarray",
                    "Callable",
                    "bool",
                    "str"
                ],
                "x": [
                    "float"
                ],
                "weight": [
                    "numpy.ndarray",
                    "float",
                    "Callable",
                    "Awaitable[T]",
                    "str",
                    "int"
                ]
            }
        },
        "molloy_reed_fraction": {
            "name": "molloy_reed_fraction",
            "location": 283,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "weight": [
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "degree_assortativity": {
            "name": "degree_assortativity",
            "location": 302,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "network": [
                    "Union[int, float]",
                    "Union[fonduer.parser.models.table.Cell, fonduer.parser.models.sentence.Sentence]",
                    "bool",
                    "List[int]"
                ],
                "mode": [
                    "str",
                    "bool",
                    "int",
                    "vimiv.api.modes.Mode",
                    "List[app.models.Question]"
                ],
                "weight": [
                    "float",
                    "Mapping[str, int]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "pathpy-master/pathpy/statistics/likelihoods.py": {
        "likelihood": {
            "name": "likelihood",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "observations": [],
                "log": []
            }
        },
        "_hon": {
            "name": "_hon",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "observations": [],
                "log": []
            }
        }
    },
    "pathpy-master/pathpy/statistics/modularity.py": {
        "Q_modularity": {
            "name": "Q_modularity",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "Tuple[int, int]"
                ],
                "cluster_mapping": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Q_max_modularity": {
            "name": "Q_max_modularity",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "Tuple[int, int]",
                    "int"
                ],
                "cluster_mapping": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Q_assortativity_coefficient": {
            "name": "Q_assortativity_coefficient",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "network": [
                    "pathpy.core.network.Network",
                    "int",
                    "str",
                    "Dict[str, str]"
                ],
                "cluster_mapping": [
                    "pathpy.core.network.Network",
                    "int",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "pathpy-master/pathpy/statistics/reciprocity.py": {
        "edge_reciprocity": {
            "name": "edge_reciprocity",
            "location": 17,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "int"
            ],
            "arguments": {
                "network": [
                    "dict",
                    "list"
                ]
            }
        }
    },
    "pathpy-master/pathpy/statistics/subpaths.py": {
        "SubPathCollection.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "paths": []
            }
        },
        "SubPathCollection.__call__": {
            "name": "__call__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "min_length": [],
                "max_length": [],
                "include_path": [],
                "recalculate": []
            }
        },
        "SubPathCollection.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubPathCollection.observed": {
            "name": "observed",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubPathCollection.possible": {
            "name": "possible",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubPathCollection.counter": {
            "name": "counter",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubPathCollection.calculate": {
            "name": "calculate",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "min_length": [],
                "max_length": [],
                "include_path": []
            }
        },
        "SubPathCollection.summary": {
            "name": "summary",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubPathCollection.from_paths": {
            "name": "from_paths",
            "location": 242,
            "return": [],
            "arguments": {
                "cls": [],
                "paths": [],
                "min_length": [],
                "max_length": [],
                "include_path": []
            }
        }
    },
    "pathpy-master/pathpy/statistics/__init__.py": {},
    "pathpy-master/pathpy/tests/test_algorithms.py": {
        "net": {
            "name": "net",
            "location": 19,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_adjacency_matrix": {
            "name": "test_adjacency_matrix",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_distance_matrix": {
            "name": "test_distance_matrix",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_all_shortest_paths": {
            "name": "test_all_shortest_paths",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_diameter": {
            "name": "test_diameter",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_avg_path_length": {
            "name": "test_avg_path_length",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_betweenness_centrality_network": {
            "name": "test_betweenness_centrality_network",
            "location": 104,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_closeness_centrality": {
            "name": "test_closeness_centrality",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_degree_centrality": {
            "name": "test_degree_centrality",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "test_rank_centralities": {
            "name": "test_rank_centralities",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "test_find_connected_components": {
            "name": "test_find_connected_components",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_largest_connected_component": {
            "name": "test_largest_connected_component",
            "location": 181,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_converters.py": {
        "test_to_networkx": {
            "name": "test_to_networkx",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_core.py": {
        "test_PathPyEmpty": {
            "name": "test_PathPyEmpty",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_PathPyPath": {
            "name": "test_PathPyPath",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_PathPyCollection_add_PathPyPath": {
            "name": "test_PathPyCollection_add_PathPyPath",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_PathPyCollection_add_str": {
            "name": "test_PathPyCollection_add_str",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_PathPySet": {
            "name": "test_PathPySet",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_PathPyRelation": {
            "name": "test_PathPyRelation",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_PathPyIter": {
            "name": "test_PathPyIter",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_PathPyPath_subobjects": {
            "name": "test_PathPyPath_subobjects",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_PathPyCollection_add_diff": {
            "name": "test_PathPyCollection_add_diff",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_PathPyCollection_counter": {
            "name": "test_PathPyCollection_counter",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_PathPyCollection_iadd": {
            "name": "test_PathPyCollection_iadd",
            "location": 223,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_dag.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_dag_node_creation": {
            "name": "test_dag_node_creation",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_from_temporal_network": {
            "name": "test_from_temporal_network",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_routes_from": {
            "name": "test_routes_from",
            "location": 86,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_edge.py": {
        "nodes": {
            "name": "nodes",
            "location": 18,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_hash": {
            "name": "test_hash",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_uid": {
            "name": "test_uid",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_setitem": {
            "name": "test_setitem",
            "location": 73,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 84,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "test_repr": {
            "name": "test_repr",
            "location": 95,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 105,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 118,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "test_weight": {
            "name": "test_weight",
            "location": 131,
            "return": [],
            "arguments": {
                "nodes": []
            }
        },
        "test_self_loop": {
            "name": "test_self_loop",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "test_multiple_nodes": {
            "name": "test_multiple_nodes",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_errors": {
            "name": "test_errors",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_EdgeCollection": {
            "name": "test_EdgeCollection",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "test_EdgeCollection_multiedges": {
            "name": "test_EdgeCollection_multiedges",
            "location": 281,
            "return": [],
            "arguments": {}
        },
        "test_multiedges": {
            "name": "test_multiedges",
            "location": 302,
            "return": [],
            "arguments": {}
        },
        "test_EdgeCollection_undirected": {
            "name": "test_EdgeCollection_undirected",
            "location": 328,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_evaluation.py": {
        "net": {
            "name": "net",
            "location": 15,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "temp_net": {
            "name": "temp_net",
            "location": 21,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_train_test_split_network": {
            "name": "test_train_test_split_network",
            "location": 31,
            "return": [],
            "arguments": {
                "net": []
            }
        },
        "test_shuffle_temporal_network": {
            "name": "test_shuffle_temporal_network",
            "location": 45,
            "return": [],
            "arguments": {
                "temp_net": []
            }
        },
        "test_train_test_split_temporalnetwork": {
            "name": "test_train_test_split_temporalnetwork",
            "location": 55,
            "return": [],
            "arguments": {
                "temp_net": []
            }
        }
    },
    "pathpy-master/pathpy/tests/test_generators.py": {
        "test_Molloy_Reed": {
            "name": "test_Molloy_Reed",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_ER_np": {
            "name": "test_ER_np",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_ER_nm": {
            "name": "test_ER_nm",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_k_regular": {
            "name": "test_k_regular",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_lattice": {
            "name": "test_lattice",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_Watts_Strogatz": {
            "name": "test_Watts_Strogatz",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_Watts_Strogatz_uids": {
            "name": "test_Watts_Strogatz_uids",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_higher_order_network.py": {
        "test_higher_order_node": {
            "name": "test_higher_order_node",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_higher_order_edge": {
            "name": "test_higher_order_edge",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_higher_order_network": {
            "name": "test_higher_order_network",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "test_fit_path_collection": {
            "name": "test_fit_path_collection",
            "location": 125,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_hyperedge.py": {
        "test_HyperEdge": {
            "name": "test_HyperEdge",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_HyperEdgeCollection": {
            "name": "test_HyperEdgeCollection",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_hypergraph.py": {
        "test_hypergraph": {
            "name": "test_hypergraph",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "test_hyperedge": {
            "name": "test_hyperedge",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_plot": {
            "name": "test_plot",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_io.py": {
        "test_sql_write_network": {
            "name": "test_sql_write_network",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_csv_write_network": {
            "name": "test_csv_write_network",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_csv_read_network": {
            "name": "test_csv_read_network",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_pandas_temporal": {
            "name": "test_pandas_temporal",
            "location": 70,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_konect.py": {
        "test_karate_club": {
            "name": "test_karate_club",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_mulit_order_model.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_network.py": {
        "test_setitem": {
            "name": "test_setitem",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_uid": {
            "name": "test_uid",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_directed": {
            "name": "test_directed",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_shape": {
            "name": "test_shape",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_add_node": {
            "name": "test_add_node",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "test_add_nodes": {
            "name": "test_add_nodes",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "test_add_edge": {
            "name": "test_add_edge",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "test_call_edges": {
            "name": "test_call_edges",
            "location": 313,
            "return": [],
            "arguments": {}
        },
        "test_add_edges": {
            "name": "test_add_edges",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "test_properties": {
            "name": "test_properties",
            "location": 376,
            "return": [],
            "arguments": {}
        },
        "test_remove_edge": {
            "name": "test_remove_edge",
            "location": 386,
            "return": [],
            "arguments": {}
        },
        "test_remove_node": {
            "name": "test_remove_node",
            "location": 443,
            "return": [],
            "arguments": {}
        },
        "test_get_edge": {
            "name": "test_get_edge",
            "location": 461,
            "return": [],
            "arguments": {}
        },
        "test_network_properties": {
            "name": "test_network_properties",
            "location": 480,
            "return": [],
            "arguments": {}
        },
        "test_add_networks": {
            "name": "test_add_networks",
            "location": 501,
            "return": [],
            "arguments": {}
        },
        "test_iadd_networks": {
            "name": "test_iadd_networks",
            "location": 589,
            "return": [],
            "arguments": {}
        },
        "test_sub_networks": {
            "name": "test_sub_networks",
            "location": 667,
            "return": [],
            "arguments": {}
        },
        "test_isub_networks": {
            "name": "test_isub_networks",
            "location": 698,
            "return": [],
            "arguments": {}
        },
        "test_network_edges": {
            "name": "test_network_edges",
            "location": 717,
            "return": [],
            "arguments": {}
        },
        "test_network_degrees": {
            "name": "test_network_degrees",
            "location": 731,
            "return": [],
            "arguments": {}
        },
        "test_network_undirected": {
            "name": "test_network_undirected",
            "location": 740,
            "return": [],
            "arguments": {}
        },
        "test_network_from_pathpyobjects": {
            "name": "test_network_from_pathpyobjects",
            "location": 753,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_netzschleuder.py": {
        "get_metric": {
            "name": "get_metric",
            "location": 35,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "network": [
                    "str",
                    "bool"
                ],
                "metric": [
                    "dict"
                ]
            }
        },
        "test_netzschleuder_consistency": {
            "name": "test_netzschleuder_consistency",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_facebook_friends": {
            "name": "test_facebook_friends",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_node.py": {
        "test_hash": {
            "name": "test_hash",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_uid": {
            "name": "test_uid",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_setitem": {
            "name": "test_setitem",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_getitem": {
            "name": "test_getitem",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_copy": {
            "name": "test_copy",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_NodeCollection": {
            "name": "test_NodeCollection",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_NodeCollection_iter": {
            "name": "test_NodeCollection_iter",
            "location": 163,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_null_model.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_possible_paths": {
            "name": "test_possible_paths",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_from_network": {
            "name": "test_from_network",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_degrees_of_reedom": {
            "name": "test_degrees_of_reedom",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_path.py": {
        "test_path": {
            "name": "test_path",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_PathCollection_add_path": {
            "name": "test_PathCollection_add_path",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_PathCollection_add_edges": {
            "name": "test_PathCollection_add_edges",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_PathCollection_add_nodes": {
            "name": "test_PathCollection_add_nodes",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_PathCollection_add_str": {
            "name": "test_PathCollection_add_str",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "test_PathCollection_add_tuple": {
            "name": "test_PathCollection_add_tuple",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_PathCollection_remove_path": {
            "name": "test_PathCollection_remove_path",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "test_PathCollection_remove_edges": {
            "name": "test_PathCollection_remove_edges",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_PathCollection": {
            "name": "test_PathCollection",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_PathCollection_counter": {
            "name": "test_PathCollection_counter",
            "location": 402,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_path_extraction.py": {
        "tempnet": {
            "name": "tempnet",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "tempnet2": {
            "name": "tempnet2",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "dag": {
            "name": "dag",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_path_extraction_temporal_network": {
            "name": "test_path_extraction_temporal_network",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "tempnet": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "delta": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "path_counts": [
                    "str"
                ]
            }
        },
        "test_path_extraction_temporal_network_undirected": {
            "name": "test_path_extraction_temporal_network_undirected",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "tempnet2": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_path_extraction_dag": {
            "name": "test_path_extraction_dag",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "dag": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_temporal_net_to_dag": {
            "name": "test_temporal_net_to_dag",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "tempnet": [
                    "str",
                    "List[str]"
                ],
                "delta": [
                    "str",
                    "List[str]"
                ],
                "expected_edges": [
                    "bool",
                    "str"
                ]
            }
        },
        "tn1": {
            "name": "tn1",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "tn2": {
            "name": "tn2",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "tn1_delta2": {
            "name": "tn1_delta2",
            "location": 123,
            "return": [
                "str",
                "Union[bytes, bytearray]",
                "bytearray",
                "bytes"
            ],
            "arguments": {}
        },
        "tn1_delta3": {
            "name": "tn1_delta3",
            "location": 142,
            "return": [
                "str",
                "Union[bytes, bytearray]",
                "bytearray",
                "bytes"
            ],
            "arguments": {}
        },
        "tn2_delta1": {
            "name": "tn2_delta1",
            "location": 165,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "Tuple[str, List[str]]",
                "list"
            ],
            "arguments": {}
        },
        "tn2_delta2": {
            "name": "tn2_delta2",
            "location": 189,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "Tuple[str, List[str]]",
                "list"
            ],
            "arguments": {}
        },
        "test_PaCo": {
            "name": "test_PaCo",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "tn": [
                    "bool"
                ],
                "delta": [
                    "bool"
                ],
                "expected_paths": [
                    "str"
                ]
            }
        }
    },
    "pathpy-master/pathpy/tests/test_plot.py": {
        "test_plot_empty_network_plot": {
            "name": "test_plot_empty_network_plot",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_network_plot": {
            "name": "test_network_plot",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_temporal_network": {
            "name": "test_temporal_network",
            "location": 181,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_state_file_export.py": {
        "paths": {
            "name": "paths",
            "location": 18,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "test_state_file_export": {
            "name": "test_state_file_export",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "paths": [
                    "str",
                    "io.StringIO",
                    "Union[object, str]"
                ]
            }
        }
    },
    "pathpy-master/pathpy/tests/test_statistics.py": {
        "net": {
            "name": "net",
            "location": 21,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_degree_sequence": {
            "name": "test_degree_sequence",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_degree_distribution": {
            "name": "test_degree_distribution",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_degree_raw_moment": {
            "name": "test_degree_raw_moment",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_degree_central_moment": {
            "name": "test_degree_central_moment",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "test_degree_assortativity": {
            "name": "test_degree_assortativity",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_mean_degree": {
            "name": "test_mean_degree",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_local_clustering_coefficient": {
            "name": "test_local_clustering_coefficient",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_avg_clustering_coefficient": {
            "name": "test_avg_clustering_coefficient",
            "location": 132,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/test_temporal_network.py": {
        "test_TemporalPathPyObject": {
            "name": "test_TemporalPathPyObject",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_temporal_node": {
            "name": "test_temporal_node",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "test_temporal_edge": {
            "name": "test_temporal_edge",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_temporal_node_collection": {
            "name": "test_temporal_node_collection",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "test_temporal_edge_collection": {
            "name": "test_temporal_edge_collection",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "test_temporal_network": {
            "name": "test_temporal_network",
            "location": 175,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/tests/__init__.py": {},
    "pathpy-master/pathpy/tests/speed/speed_add_edges.py": {
        "add_edges": {
            "name": "add_edges",
            "location": 17,
            "return": [],
            "arguments": {
                "pathpy": [],
                "edges": [],
                "indexing": []
            }
        },
        "test_add_edges_pathpy": {
            "name": "test_add_edges_pathpy",
            "location": 52,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_add_nodes_dict": {
            "name": "test_add_nodes_dict",
            "location": 60,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_add_edges_pathpy_index": {
            "name": "test_add_edges_pathpy_index",
            "location": 68,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_add_nodes_dict_index": {
            "name": "test_add_nodes_dict_index",
            "location": 76,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        }
    },
    "pathpy-master/pathpy/tests/speed/speed_add_nodes.py": {
        "add_nodes": {
            "name": "add_nodes",
            "location": 14,
            "return": [],
            "arguments": {
                "pathpy": [],
                "numbers": []
            }
        },
        "test_add_nodes_pathpy": {
            "name": "test_add_nodes_pathpy",
            "location": 28,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_add_nodes_dict": {
            "name": "test_add_nodes_dict",
            "location": 35,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        }
    },
    "pathpy-master/pathpy/tests/speed/speed_create_edges.py": {
        "create_edges": {
            "name": "create_edges",
            "location": 13,
            "return": [],
            "arguments": {
                "pathpy": [],
                "iterations": []
            }
        },
        "test_create_edges_pathpy": {
            "name": "test_create_edges_pathpy",
            "location": 31,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_create_edges_dict": {
            "name": "test_create_edges_dict",
            "location": 38,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        }
    },
    "pathpy-master/pathpy/tests/speed/speed_create_nodes.py": {
        "create_nodes": {
            "name": "create_nodes",
            "location": 13,
            "return": [],
            "arguments": {
                "pathpy": []
            }
        },
        "create_nodes_attributes": {
            "name": "create_nodes_attributes",
            "location": 25,
            "return": [],
            "arguments": {
                "pathpy": [],
                "number": []
            }
        },
        "test_create_nodes_pathpy": {
            "name": "test_create_nodes_pathpy",
            "location": 38,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_create_nodes_dict": {
            "name": "test_create_nodes_dict",
            "location": 45,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_create_nodes_attr_pathpy": {
            "name": "test_create_nodes_attr_pathpy",
            "location": 52,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_create_nodes_attr_dict": {
            "name": "test_create_nodes_attr_dict",
            "location": 59,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        }
    },
    "pathpy-master/pathpy/tests/speed/speed_node.py": {
        "create_nodes": {
            "name": "create_nodes",
            "location": 14,
            "return": [],
            "arguments": {
                "pathpy": []
            }
        },
        "add_nodes": {
            "name": "add_nodes",
            "location": 28,
            "return": [],
            "arguments": {
                "pathpy": [],
                "numbers": []
            }
        },
        "test_create_nodes_pathpy": {
            "name": "test_create_nodes_pathpy",
            "location": 42,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_create_nodes_dict": {
            "name": "test_create_nodes_dict",
            "location": 49,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_add_nodes_pathpy": {
            "name": "test_add_nodes_pathpy",
            "location": 56,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        },
        "test_add_nodes_dict": {
            "name": "test_add_nodes_dict",
            "location": 63,
            "return": [],
            "arguments": {
                "benchmark": []
            }
        }
    },
    "pathpy-master/pathpy/tests/speed/__init__.py": {},
    "pathpy-master/pathpy/utils/config.py": {},
    "pathpy-master/pathpy/utils/errors.py": {},
    "pathpy-master/pathpy/utils/helper.py": {
        "window": {
            "name": "window",
            "location": 12,
            "return": [],
            "arguments": {
                "iterable": [],
                "size": []
            }
        }
    },
    "pathpy-master/pathpy/utils/logger.py": {
        "logger": {
            "name": "logger",
            "location": 41,
            "return": [],
            "arguments": {
                "name": [],
                "level": []
            }
        }
    },
    "pathpy-master/pathpy/utils/progress.py": {
        "tqdm_disabled": {
            "name": "tqdm_disabled",
            "location": 17,
            "return": [],
            "arguments": {
                "it": []
            }
        },
        "tqdm_console": {
            "name": "tqdm_console",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "tqdm_notebook": {
            "name": "tqdm_notebook",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "pathpy-master/pathpy/utils/__init__.py": {},
    "pathpy-master/pathpy/visualisations/api.py": {},
    "pathpy-master/pathpy/visualisations/layout.py": {
        "layout": {
            "name": "layout",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "network": [
                    "Callable[..., None]"
                ]
            }
        },
        "Layout.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "int",
                    "List[str]",
                    "bool",
                    "numpy.array"
                ],
                "adjacency_matrix": [
                    "int",
                    "List[str]",
                    "bool",
                    "numpy.array"
                ]
            }
        },
        "Layout.rename_attributes": {
            "name": "rename_attributes",
            "location": 327,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Layout.generate_layout": {
            "name": "generate_layout",
            "location": 369,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.random": {
            "name": "random",
            "location": 390,
            "return": [
                "dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.fruchterman_reingold": {
            "name": "fruchterman_reingold",
            "location": 421,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout._fruchterman_reingold": {
            "name": "_fruchterman_reingold",
            "location": 511,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout._sparse_fruchterman_reingold": {
            "name": "_sparse_fruchterman_reingold",
            "location": 585,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.circular": {
            "name": "circular",
            "location": 670,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layout.grid": {
            "name": "grid",
            "location": 709,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/plot.py": {
        "plot": {
            "name": "plot",
            "location": 186,
            "return": [],
            "arguments": {
                "obj": [],
                "filename": [],
                "backend": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.__call__": {
            "name": "__call__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "plot_config": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "_config": []
            }
        },
        "Parser._parse_temporal": {
            "name": "_parse_temporal",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "plot_config": []
            }
        },
        "Parser._isotime": {
            "name": "_isotime",
            "location": 534,
            "return": [],
            "arguments": {
                "time": []
            }
        },
        "Parser._parse_static": {
            "name": "_parse_static",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "plot_config": [],
                "temporal": []
            }
        },
        "Parser._convert_color": {
            "name": "_convert_color",
            "location": 621,
            "return": [],
            "arguments": {
                "self": [],
                "objects": []
            }
        },
        "Parser._convert_size": {
            "name": "_convert_size",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "objects": [],
                "converter": [],
                "otype": []
            }
        },
        "Parser._update_layout": {
            "name": "_update_layout",
            "location": 641,
            "return": [],
            "arguments": {
                "self": [],
                "nodes": [],
                "layout": [],
                "converter": []
            }
        },
        "Parser.parse_config": {
            "name": "parse_config",
            "location": 713,
            "return": [],
            "arguments": {
                "self": [],
                "properties": []
            }
        },
        "Parser.parse_static_objects": {
            "name": "parse_static_objects",
            "location": 742,
            "return": [],
            "arguments": {
                "self": [],
                "objects": [],
                "otype": [],
                "temporal": []
            }
        },
        "Parser._parse_temporal.find_nearest": {
            "name": "find_nearest",
            "location": 406,
            "return": [],
            "arguments": {
                "array": [],
                "value": [],
                "index": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/__init__.py": {},
    "pathpy-master/pathpy/visualisations/backends/d3js.py": {
        "D3js.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "D3js.to_html": {
            "name": "to_html",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "figure": []
            }
        },
        "D3js.to_json": {
            "name": "to_json",
            "location": 108,
            "return": [],
            "arguments": {
                "figure": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/backends/matplotlib.py": {
        "Matplotlib.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matplotlib.draw": {
            "name": "draw",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matplotlib.show": {
            "name": "show",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/backends/tikz.py": {
        "Tikz.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tikz.to_tex": {
            "name": "to_tex",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "figure": []
            }
        },
        "Tikz.to_csv": {
            "name": "to_csv",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "figure": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/backends/__init__.py": {},
    "pathpy-master/pathpy/visualisations/fileformats/html.py": {
        "HTML.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML.draw": {
            "name": "draw",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "backend": [],
                "data": []
            }
        },
        "HTML._draw_d3js": {
            "name": "_draw_d3js",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "backend": [],
                "data": []
            }
        },
        "HTML.save": {
            "name": "save",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "HTML.show": {
            "name": "show",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/fileformats/pdf.py": {
        "PDF.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PDF.draw": {
            "name": "draw",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "backend": [],
                "data": []
            }
        },
        "PDF._draw_tikz": {
            "name": "_draw_tikz",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "backend": [],
                "data": []
            }
        },
        "PDF.save": {
            "name": "save",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "PDF.compile": {
            "name": "compile",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PDF.show": {
            "name": "show",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/fileformats/png.py": {},
    "pathpy-master/pathpy/visualisations/fileformats/tex.py": {
        "TEX.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TEX.draw": {
            "name": "draw",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "backend": [],
                "data": []
            }
        },
        "TEX._draw_tikz": {
            "name": "_draw_tikz",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "backend": [],
                "data": []
            }
        },
        "TEX.save": {
            "name": "save",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "TEX.show": {
            "name": "show",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/fileformats/__init__.py": {},
    "pathpy-master/pathpy/visualisations/utils/bending.py": {
        "bend_factor": {
            "name": "bend_factor",
            "location": 15,
            "return": [],
            "arguments": {
                "curved": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/utils/units.py": {
        "UnitConverter.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "input_unit": [],
                "output_unit": [],
                "dpi": [],
                "digits": []
            }
        },
        "UnitConverter.__call__": {
            "name": "__call__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UnitConverter.px_to_mm": {
            "name": "px_to_mm",
            "location": 102,
            "return": [],
            "arguments": {
                "measure": [],
                "dpi": []
            }
        },
        "UnitConverter.px_to_pt": {
            "name": "px_to_pt",
            "location": 107,
            "return": [],
            "arguments": {
                "measure": []
            }
        },
        "UnitConverter.pt_to_mm": {
            "name": "pt_to_mm",
            "location": 112,
            "return": [],
            "arguments": {
                "measure": []
            }
        },
        "UnitConverter.mm_to_px": {
            "name": "mm_to_px",
            "location": 117,
            "return": [],
            "arguments": {
                "measure": [],
                "dpi": []
            }
        },
        "UnitConverter.mm_to_pt": {
            "name": "mm_to_pt",
            "location": 122,
            "return": [],
            "arguments": {
                "measure": []
            }
        },
        "UnitConverter.convert": {
            "name": "convert",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "pathpy-master/pathpy/visualisations/utils/__init__.py": {}
}